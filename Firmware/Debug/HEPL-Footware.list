
HEPL-Footware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009e0  08007580  08007580  00017580  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f60  08007f60  00020fd8  2**0
                  CONTENTS
  4 .ARM          00000000  08007f60  08007f60  00020fd8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f60  08007f60  00020fd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f60  08007f60  00017f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f64  08007f64  00017f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000fd8  20000000  08007f68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015d8  20000fd8  08008f40  00020fd8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200025b0  08008f40  000225b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020fd8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d06  00000000  00000000  00021008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e87  00000000  00000000  00036d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000e525  00000000  00000000  00039b95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001018  00000000  00000000  000480c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f50  00000000  00000000  000490d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025bd0  00000000  00000000  0004a028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a4d0  00000000  00000000  0006fbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da37d  00000000  00000000  0008a0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00164445  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003854  00000000  00000000  00164498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000fd8 	.word	0x20000fd8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007564 	.word	0x08007564

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000fdc 	.word	0x20000fdc
 80001cc:	08007564 	.word	0x08007564

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <IMU_convertAccel>:
	IMU_writeRegister(IMU, buf, 1);

}

float IMU_convertAccel(uint8_t H_byte, uint8_t L_byte) {
	int16_t reading = (int16_t)(H_byte << 8) + L_byte;
 8000c38:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8000c3c:	b209      	sxth	r1, r1

	// (Full-scale val / Max LSB val) * reading (LSB) = Accel (g)
	return XL_SCALE_FACTOR * reading;
 8000c3e:	ee07 1a90 	vmov	s15, r1
 8000c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8000c46:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8000c50 <IMU_convertAccel+0x18>
 8000c4a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8000c4e:	4770      	bx	lr
 8000c50:	3b1cd806 	.word	0x3b1cd806

08000c54 <IMU_convertGyro>:

float IMU_convertGyro(uint8_t H_byte, uint8_t L_byte) {
	int16_t reading = (int16_t)(H_byte << 8) + L_byte;
 8000c54:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8000c58:	b209      	sxth	r1, r1

	// (Full-scale val / Max LSB val) * reading (LSB) = Accel (g)
	return GYRO_SCALE_FACTOR * reading;
 8000c5a:	ee07 1a90 	vmov	s15, r1
 8000c5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8000c62:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8000c6c <IMU_convertGyro+0x18>
 8000c66:	ee27 0a80 	vmul.f32	s0, s15, s0
 8000c6a:	4770      	bx	lr
 8000c6c:	3d0f5dff 	.word	0x3d0f5dff

08000c70 <IMU_chipSelect>:
	__enable_irq();

	return status;
}

void IMU_chipSelect(uint8_t chipID) {
 8000c70:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOB, (1 << chipID), 0); // PB0,1,2 for IMU 0,1,2
 8000c72:	2101      	movs	r1, #1
 8000c74:	4081      	lsls	r1, r0
 8000c76:	2200      	movs	r2, #0
 8000c78:	b289      	uxth	r1, r1
 8000c7a:	4802      	ldr	r0, [pc, #8]	; (8000c84 <IMU_chipSelect+0x14>)
 8000c7c:	f002 f992 	bl	8002fa4 <HAL_GPIO_WritePin>
}
 8000c80:	bd08      	pop	{r3, pc}
 8000c82:	bf00      	nop
 8000c84:	48000400 	.word	0x48000400

08000c88 <IMU_chipRelease>:

void IMU_chipRelease(uint8_t chipID) {
 8000c88:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOB, (1 << chipID), 1); // PB0,1,2 for IMU 0,1,2
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	fa02 f100 	lsl.w	r1, r2, r0
 8000c90:	b289      	uxth	r1, r1
 8000c92:	4802      	ldr	r0, [pc, #8]	; (8000c9c <IMU_chipRelease+0x14>)
 8000c94:	f002 f986 	bl	8002fa4 <HAL_GPIO_WritePin>
}
 8000c98:	bd08      	pop	{r3, pc}
 8000c9a:	bf00      	nop
 8000c9c:	48000400 	.word	0x48000400

08000ca0 <IMU_readRegister>:
HAL_StatusTypeDef IMU_readRegister(IMU* IMU, uint8_t reg_addr, uint8_t* rx_buf, int num_bytes) {
 8000ca0:	b570      	push	{r4, r5, r6, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	4604      	mov	r4, r0
 8000ca6:	4615      	mov	r5, r2
 8000ca8:	461e      	mov	r6, r3
	uint8_t reg_buffer[1] = {reg_addr | 0x80};
 8000caa:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8000cae:	f88d 1004 	strb.w	r1, [sp, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb2:	b672      	cpsid	i
	IMU_chipSelect(IMU->chipID);
 8000cb4:	7f00      	ldrb	r0, [r0, #28]
 8000cb6:	f7ff ffdb 	bl	8000c70 <IMU_chipSelect>
	HAL_SPI_Transmit(IMU->hspi, (uint8_t *)reg_buffer, 1, SPI_TIMEOUT);
 8000cba:	2301      	movs	r3, #1
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	a901      	add	r1, sp, #4
 8000cc0:	6820      	ldr	r0, [r4, #0]
 8000cc2:	f003 f834 	bl	8003d2e <HAL_SPI_Transmit>
	status = HAL_SPI_Receive(IMU->hspi, (uint8_t *)rx_buf, num_bytes, SPI_TIMEOUT);
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	b2b2      	uxth	r2, r6
 8000cca:	4629      	mov	r1, r5
 8000ccc:	6820      	ldr	r0, [r4, #0]
 8000cce:	f003 fa9e 	bl	800420e <HAL_SPI_Receive>
 8000cd2:	4605      	mov	r5, r0
	IMU_chipRelease(IMU->chipID);
 8000cd4:	7f20      	ldrb	r0, [r4, #28]
 8000cd6:	f7ff ffd7 	bl	8000c88 <IMU_chipRelease>
  __ASM volatile ("cpsie i" : : : "memory");
 8000cda:	b662      	cpsie	i
}
 8000cdc:	4628      	mov	r0, r5
 8000cde:	b002      	add	sp, #8
 8000ce0:	bd70      	pop	{r4, r5, r6, pc}

08000ce2 <IMU_readSensorData>:
void IMU_readSensorData(IMU* IMU, SensorData* data) {
 8000ce2:	b530      	push	{r4, r5, lr}
 8000ce4:	b085      	sub	sp, #20
 8000ce6:	4605      	mov	r5, r0
 8000ce8:	460c      	mov	r4, r1
	IMU_readRegister(IMU, OUTX_L_G, buf, 12);
 8000cea:	230c      	movs	r3, #12
 8000cec:	aa01      	add	r2, sp, #4
 8000cee:	2122      	movs	r1, #34	; 0x22
 8000cf0:	f7ff ffd6 	bl	8000ca0 <IMU_readRegister>
	data->G_X = IMU_convertGyro(buf[1], buf[0]) - IMU->GX_offset;
 8000cf4:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8000cf8:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8000cfc:	f7ff ffaa 	bl	8000c54 <IMU_convertGyro>
 8000d00:	edd5 7a04 	vldr	s15, [r5, #16]
 8000d04:	ee30 0a67 	vsub.f32	s0, s0, s15
 8000d08:	ed84 0a03 	vstr	s0, [r4, #12]
	data->G_Y = IMU_convertGyro(buf[3], buf[2]) - IMU->GY_offset;
 8000d0c:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8000d10:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000d14:	f7ff ff9e 	bl	8000c54 <IMU_convertGyro>
 8000d18:	edd5 7a05 	vldr	s15, [r5, #20]
 8000d1c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8000d20:	ed84 0a04 	vstr	s0, [r4, #16]
	data->G_Z = IMU_convertGyro(buf[5], buf[4]) - IMU->GZ_offset;
 8000d24:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8000d28:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8000d2c:	f7ff ff92 	bl	8000c54 <IMU_convertGyro>
 8000d30:	edd5 7a06 	vldr	s15, [r5, #24]
 8000d34:	ee30 0a67 	vsub.f32	s0, s0, s15
 8000d38:	ed84 0a05 	vstr	s0, [r4, #20]
	data->XL_X = IMU_convertAccel(buf[7], buf[6]) + IMU->X_offset;
 8000d3c:	f89d 100a 	ldrb.w	r1, [sp, #10]
 8000d40:	f89d 000b 	ldrb.w	r0, [sp, #11]
 8000d44:	f7ff ff78 	bl	8000c38 <IMU_convertAccel>
 8000d48:	edd5 7a01 	vldr	s15, [r5, #4]
 8000d4c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000d50:	ed84 0a00 	vstr	s0, [r4]
	data->XL_Y = IMU_convertAccel(buf[9], buf[8]) + IMU->Y_offset;
 8000d54:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8000d58:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8000d5c:	f7ff ff6c 	bl	8000c38 <IMU_convertAccel>
 8000d60:	edd5 7a02 	vldr	s15, [r5, #8]
 8000d64:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000d68:	ed84 0a01 	vstr	s0, [r4, #4]
	data->XL_Z = IMU_convertAccel(buf[11], buf[10]) - IMU->Z_offset;
 8000d6c:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8000d70:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8000d74:	f7ff ff60 	bl	8000c38 <IMU_convertAccel>
 8000d78:	edd5 7a03 	vldr	s15, [r5, #12]
 8000d7c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8000d80:	ed84 0a02 	vstr	s0, [r4, #8]
}
 8000d84:	b005      	add	sp, #20
 8000d86:	bd30      	pop	{r4, r5, pc}

08000d88 <IMU_writeRegister>:
HAL_StatusTypeDef IMU_writeRegister(IMU* IMU, uint8_t* tx_buf, int num_bytes) {
 8000d88:	b570      	push	{r4, r5, r6, lr}
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	460e      	mov	r6, r1
 8000d8e:	4615      	mov	r5, r2
  __ASM volatile ("cpsid i" : : : "memory");
 8000d90:	b672      	cpsid	i
	IMU_chipSelect(IMU->chipID);
 8000d92:	7f00      	ldrb	r0, [r0, #28]
 8000d94:	f7ff ff6c 	bl	8000c70 <IMU_chipSelect>
	status = HAL_SPI_Transmit(IMU->hspi, (uint8_t *)tx_buf, num_bytes + 1, SPI_TIMEOUT);
 8000d98:	1c6a      	adds	r2, r5, #1
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	b292      	uxth	r2, r2
 8000d9e:	4631      	mov	r1, r6
 8000da0:	6820      	ldr	r0, [r4, #0]
 8000da2:	f002 ffc4 	bl	8003d2e <HAL_SPI_Transmit>
 8000da6:	4605      	mov	r5, r0
	IMU_chipRelease(IMU->chipID);
 8000da8:	7f20      	ldrb	r0, [r4, #28]
 8000daa:	f7ff ff6d 	bl	8000c88 <IMU_chipRelease>
  __ASM volatile ("cpsie i" : : : "memory");
 8000dae:	b662      	cpsie	i
}
 8000db0:	4628      	mov	r0, r5
 8000db2:	bd70      	pop	{r4, r5, r6, pc}

08000db4 <IMU_init>:
void IMU_init(SPI_HandleTypeDef* hspi, IMU* IMU, uint8_t chipID) {
 8000db4:	b510      	push	{r4, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	460c      	mov	r4, r1
	IMU->hspi = hspi;
 8000dba:	6008      	str	r0, [r1, #0]
	IMU->X_offset = IMU_offsets[3*chipID + 0];
 8000dbc:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8000dc0:	4840      	ldr	r0, [pc, #256]	; (8000ec4 <IMU_init+0x110>)
 8000dc2:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8000dc6:	6809      	ldr	r1, [r1, #0]
 8000dc8:	6061      	str	r1, [r4, #4]
	IMU->Y_offset = IMU_offsets[3*chipID + 1];
 8000dca:	f103 0c01 	add.w	ip, r3, #1
 8000dce:	eb00 018c 	add.w	r1, r0, ip, lsl #2
 8000dd2:	6809      	ldr	r1, [r1, #0]
 8000dd4:	60a1      	str	r1, [r4, #8]
	IMU->Z_offset = IMU_offsets[3*chipID + 2];
 8000dd6:	f103 0e02 	add.w	lr, r3, #2
 8000dda:	eb00 008e 	add.w	r0, r0, lr, lsl #2
 8000dde:	6801      	ldr	r1, [r0, #0]
 8000de0:	60e1      	str	r1, [r4, #12]
	IMU->GX_offset = IMU_Goffsets[3*chipID + 0];
 8000de2:	4939      	ldr	r1, [pc, #228]	; (8000ec8 <IMU_init+0x114>)
 8000de4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	6123      	str	r3, [r4, #16]
	IMU->GY_offset = IMU_Goffsets[3*chipID + 1];
 8000dec:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 8000df0:	f8dc 3000 	ldr.w	r3, [ip]
 8000df4:	6163      	str	r3, [r4, #20]
	IMU->GZ_offset = IMU_Goffsets[3*chipID + 2];
 8000df6:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8000dfa:	680b      	ldr	r3, [r1, #0]
 8000dfc:	61a3      	str	r3, [r4, #24]
	IMU->chipID = chipID;
 8000dfe:	7722      	strb	r2, [r4, #28]
	buf[0] = CTRL3_C;
 8000e00:	2312      	movs	r3, #18
 8000e02:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = 0x04;
 8000e06:	2304      	movs	r3, #4
 8000e08:	f88d 3005 	strb.w	r3, [sp, #5]
	IMU_writeRegister(IMU, buf, 1);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	eb0d 0103 	add.w	r1, sp, r3
 8000e12:	4620      	mov	r0, r4
 8000e14:	f7ff ffb8 	bl	8000d88 <IMU_writeRegister>
	IMU_readRegister(IMU, WHO_AM_I, buf, 1);
 8000e18:	2301      	movs	r3, #1
 8000e1a:	aa01      	add	r2, sp, #4
 8000e1c:	210f      	movs	r1, #15
 8000e1e:	4620      	mov	r0, r4
 8000e20:	f7ff ff3e 	bl	8000ca0 <IMU_readRegister>
	assert(buf[0] == WHO_I_AM_ID); // Crash if not connected properly
 8000e24:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000e28:	2b6a      	cmp	r3, #106	; 0x6a
 8000e2a:	d144      	bne.n	8000eb6 <IMU_init+0x102>
	buf[0] = CTRL1_XL;
 8000e2c:	2310      	movs	r3, #16
 8000e2e:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = 0x4C;
 8000e32:	234c      	movs	r3, #76	; 0x4c
 8000e34:	f88d 3005 	strb.w	r3, [sp, #5]
	IMU_writeRegister(IMU, buf, 1);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	a901      	add	r1, sp, #4
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	f7ff ffa3 	bl	8000d88 <IMU_writeRegister>
	buf[0] = CTRL2_G;
 8000e42:	2311      	movs	r3, #17
 8000e44:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = 0x38;
 8000e48:	2338      	movs	r3, #56	; 0x38
 8000e4a:	f88d 3005 	strb.w	r3, [sp, #5]
	IMU_writeRegister(IMU, buf, 1);
 8000e4e:	2201      	movs	r2, #1
 8000e50:	a901      	add	r1, sp, #4
 8000e52:	4620      	mov	r0, r4
 8000e54:	f7ff ff98 	bl	8000d88 <IMU_writeRegister>
	buf[0] = INT2_CTRL;
 8000e58:	230e      	movs	r3, #14
 8000e5a:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = 0x03;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	f88d 3005 	strb.w	r3, [sp, #5]
	IMU_writeRegister(IMU, buf, 1);
 8000e64:	2201      	movs	r2, #1
 8000e66:	a901      	add	r1, sp, #4
 8000e68:	4620      	mov	r0, r4
 8000e6a:	f7ff ff8d 	bl	8000d88 <IMU_writeRegister>
	buf[0] = CTRL5_C;
 8000e6e:	2314      	movs	r3, #20
 8000e70:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = 0x60;
 8000e74:	2360      	movs	r3, #96	; 0x60
 8000e76:	f88d 3005 	strb.w	r3, [sp, #5]
	IMU_writeRegister(IMU, buf, 1);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	a901      	add	r1, sp, #4
 8000e7e:	4620      	mov	r0, r4
 8000e80:	f7ff ff82 	bl	8000d88 <IMU_writeRegister>
	buf[0] = CTRL6_C;
 8000e84:	2315      	movs	r3, #21
 8000e86:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = 0x04;
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	f88d 3005 	strb.w	r3, [sp, #5]
	IMU_writeRegister(IMU, buf, 1);
 8000e90:	2201      	movs	r2, #1
 8000e92:	eb0d 0103 	add.w	r1, sp, r3
 8000e96:	4620      	mov	r0, r4
 8000e98:	f7ff ff76 	bl	8000d88 <IMU_writeRegister>
	buf[0] = CTRL7_G;
 8000e9c:	2316      	movs	r3, #22
 8000e9e:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = 0x00;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f88d 3005 	strb.w	r3, [sp, #5]
	IMU_writeRegister(IMU, buf, 1);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	a901      	add	r1, sp, #4
 8000eac:	4620      	mov	r0, r4
 8000eae:	f7ff ff6b 	bl	8000d88 <IMU_writeRegister>
}
 8000eb2:	b004      	add	sp, #16
 8000eb4:	bd10      	pop	{r4, pc}
	assert(buf[0] == WHO_I_AM_ID); // Crash if not connected properly
 8000eb6:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <IMU_init+0x118>)
 8000eb8:	4a05      	ldr	r2, [pc, #20]	; (8000ed0 <IMU_init+0x11c>)
 8000eba:	2129      	movs	r1, #41	; 0x29
 8000ebc:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <IMU_init+0x120>)
 8000ebe:	f004 f96b 	bl	8005198 <__assert_func>
 8000ec2:	bf00      	nop
 8000ec4:	20000024 	.word	0x20000024
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	08007580 	.word	0x08007580
 8000ed0:	080075ac 	.word	0x080075ac
 8000ed4:	08007598 	.word	0x08007598

08000ed8 <XBeeChecksum>:
// modifies frame[]. pass payload to be sent in data[].
uint8_t XBeeChecksum(uint8_t frame[], uint8_t frame_size)
{
	uint8_t checksum = 0;
	uint8_t ret = 0;
	for (int i = 0; i < frame_size; i++) // skip bytes 0-2, and last
 8000ed8:	2200      	movs	r2, #0
	uint8_t checksum = 0;
 8000eda:	4613      	mov	r3, r2
	for (int i = 0; i < frame_size; i++) // skip bytes 0-2, and last
 8000edc:	e006      	b.n	8000eec <XBeeChecksum+0x14>
	{
		uint8_t temp = frame[i+3];
 8000ede:	f102 0c03 	add.w	ip, r2, #3
 8000ee2:	f810 c00c 	ldrb.w	ip, [r0, ip]
		checksum += temp;
 8000ee6:	4463      	add	r3, ip
 8000ee8:	b2db      	uxtb	r3, r3
	for (int i = 0; i < frame_size; i++) // skip bytes 0-2, and last
 8000eea:	3201      	adds	r2, #1
 8000eec:	4291      	cmp	r1, r2
 8000eee:	dcf6      	bgt.n	8000ede <XBeeChecksum+0x6>
	}
	checksum = 0x00FF - checksum;
 8000ef0:	43d8      	mvns	r0, r3
	ret = (uint8_t)(checksum & 0x00FF);
	return ret;
}
 8000ef2:	b2c0      	uxtb	r0, r0
 8000ef4:	4770      	bx	lr

08000ef6 <makeXBeeFrame>:
			uint8_t frame_id,
			uint8_t data_size, // in bytes
			uint8_t data[],
			uint8_t frame[],
			uint64_t dest_addr
){
 8000ef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ef8:	468c      	mov	ip, r1
 8000efa:	4615      	mov	r5, r2
 8000efc:	9c06      	ldr	r4, [sp, #24]
 8000efe:	9f08      	ldr	r7, [sp, #32]
 8000f00:	9e09      	ldr	r6, [sp, #36]	; 0x24
	// only do 14 bytes of data to avoid exceeding x-byte frame size
	if (data_size > 20) { data_size = 20; }
 8000f02:	2a14      	cmp	r2, #20
 8000f04:	d900      	bls.n	8000f08 <makeXBeeFrame+0x12>
 8000f06:	2514      	movs	r5, #20

	uint16_t frame_size = 0x0E + data_size;
 8000f08:	f105 020e 	add.w	r2, r5, #14
	uint32_t checksum = 0;

	frame[0] = XBEE_START;
 8000f0c:	217e      	movs	r1, #126	; 0x7e
 8000f0e:	7021      	strb	r1, [r4, #0]
	frame[1] = ((frame_size) >> 8) & 0x00FF; // length upper byte
 8000f10:	0a12      	lsrs	r2, r2, #8
 8000f12:	7062      	strb	r2, [r4, #1]
	frame[2] = ((frame_size) >> 0) & 0x00FF; // length lower byte
 8000f14:	f105 010e 	add.w	r1, r5, #14
 8000f18:	b2c9      	uxtb	r1, r1
 8000f1a:	70a1      	strb	r1, [r4, #2]
	frame[3] = frame_type;
 8000f1c:	70e0      	strb	r0, [r4, #3]
	frame[4] = frame_id;
 8000f1e:	f884 c004 	strb.w	ip, [r4, #4]
	for (int i = 0; i < 8; i++) // write 64-bit dest
 8000f22:	f04f 0c00 	mov.w	ip, #0
 8000f26:	e014      	b.n	8000f52 <makeXBeeFrame+0x5c>
	{
		uint8_t temp = (dest_addr >> 8*(7-i));
 8000f28:	f1cc 0007 	rsb	r0, ip, #7
 8000f2c:	00c0      	lsls	r0, r0, #3
 8000f2e:	f1c0 0e20 	rsb	lr, r0, #32
 8000f32:	f1a0 0220 	sub.w	r2, r0, #32
 8000f36:	fa27 f000 	lsr.w	r0, r7, r0
 8000f3a:	fa06 fe0e 	lsl.w	lr, r6, lr
 8000f3e:	ea40 000e 	orr.w	r0, r0, lr
 8000f42:	fa26 f202 	lsr.w	r2, r6, r2
 8000f46:	4310      	orrs	r0, r2
		frame[i + 5] = temp;
 8000f48:	f10c 0205 	add.w	r2, ip, #5
 8000f4c:	54a0      	strb	r0, [r4, r2]
	for (int i = 0; i < 8; i++) // write 64-bit dest
 8000f4e:	f10c 0c01 	add.w	ip, ip, #1
 8000f52:	f1bc 0f07 	cmp.w	ip, #7
 8000f56:	dde7      	ble.n	8000f28 <makeXBeeFrame+0x32>
	}
	frame[13] = 0xFF; // 16-bit addr upper
 8000f58:	22ff      	movs	r2, #255	; 0xff
 8000f5a:	7362      	strb	r2, [r4, #13]
	frame[14] = 0xFE; // 16-bit addr lower
 8000f5c:	22fe      	movs	r2, #254	; 0xfe
 8000f5e:	73a2      	strb	r2, [r4, #14]
	frame[15] = 0x00; // broadcast_radius
 8000f60:	2000      	movs	r0, #0
 8000f62:	73e0      	strb	r0, [r4, #15]
	frame[16] = 0x00; // options
 8000f64:	7420      	strb	r0, [r4, #16]
	for (int i = 0; i < data_size; i++) // add data payload to frame
 8000f66:	e004      	b.n	8000f72 <makeXBeeFrame+0x7c>
	{
		uint8_t temp = data[i];
 8000f68:	5c1e      	ldrb	r6, [r3, r0]
		frame[i + 17] = temp;
 8000f6a:	f100 0211 	add.w	r2, r0, #17
 8000f6e:	54a6      	strb	r6, [r4, r2]
	for (int i = 0; i < data_size; i++) // add data payload to frame
 8000f70:	3001      	adds	r0, #1
 8000f72:	4285      	cmp	r5, r0
 8000f74:	dcf8      	bgt.n	8000f68 <makeXBeeFrame+0x72>
	}

	// update checksum
	checksum = XBeeChecksum(frame, frame_size);
 8000f76:	4620      	mov	r0, r4
 8000f78:	f7ff ffae 	bl	8000ed8 <XBeeChecksum>
	frame[data_size + 17] = checksum;
 8000f7c:	f105 0311 	add.w	r3, r5, #17
 8000f80:	54e0      	strb	r0, [r4, r3]
	return frame_size + 4;
 8000f82:	f105 0012 	add.w	r0, r5, #18
}
 8000f86:	b2c0      	uxtb	r0, r0
 8000f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000f8c <XBeeTransmitReceive>:
void XBeeTransmitReceive(uint8_t* data_buf, uint8_t* xbee_rx_buf, uint8_t tx_data_size, uint64_t dest_addr) {
 8000f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f90:	b08c      	sub	sp, #48	; 0x30
 8000f92:	4603      	mov	r3, r0
 8000f94:	460c      	mov	r4, r1
	uint8_t tx_size = makeXBeeFrame(XBEE_TRANSMIT_FRAME, 0x01, tx_data_size, data_buf, xbee_tx_buf, dest_addr);
 8000f96:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8000f9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000f9e:	f10d 0810 	add.w	r8, sp, #16
 8000fa2:	f8cd 8000 	str.w	r8, [sp]
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	2010      	movs	r0, #16
 8000faa:	f7ff ffa4 	bl	8000ef6 <makeXBeeFrame>
 8000fae:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(XBEE_CS_PORT, XBEE_CS_PIN, 0);
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <XBeeTransmitReceive+0x58>)
 8000fb2:	881f      	ldrh	r7, [r3, #0]
 8000fb4:	4e0c      	ldr	r6, [pc, #48]	; (8000fe8 <XBeeTransmitReceive+0x5c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	4639      	mov	r1, r7
 8000fba:	6830      	ldr	r0, [r6, #0]
 8000fbc:	f001 fff2 	bl	8002fa4 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc0:	b672      	cpsid	i
	HAL_SPI_TransmitReceive(&XBEE_SPI, xbee_tx_buf, xbee_rx_buf, tx_size, 7);
 8000fc2:	2307      	movs	r3, #7
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	b2ab      	uxth	r3, r5
 8000fc8:	4622      	mov	r2, r4
 8000fca:	4641      	mov	r1, r8
 8000fcc:	4807      	ldr	r0, [pc, #28]	; (8000fec <XBeeTransmitReceive+0x60>)
 8000fce:	f002 ffaf 	bl	8003f30 <HAL_SPI_TransmitReceive>
  __ASM volatile ("cpsie i" : : : "memory");
 8000fd2:	b662      	cpsie	i
	HAL_GPIO_WritePin(XBEE_CS_PORT, XBEE_CS_PIN, 1);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	4639      	mov	r1, r7
 8000fd8:	6830      	ldr	r0, [r6, #0]
 8000fda:	f001 ffe3 	bl	8002fa4 <HAL_GPIO_WritePin>
}
 8000fde:	b00c      	add	sp, #48	; 0x30
 8000fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000fe4:	080075b8 	.word	0x080075b8
 8000fe8:	20000048 	.word	0x20000048
 8000fec:	20001088 	.word	0x20001088

08000ff0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ff4:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff6:	2400      	movs	r4, #0
 8000ff8:	9403      	str	r4, [sp, #12]
 8000ffa:	9404      	str	r4, [sp, #16]
 8000ffc:	9405      	str	r4, [sp, #20]
 8000ffe:	9406      	str	r4, [sp, #24]
 8001000:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001002:	4b50      	ldr	r3, [pc, #320]	; (8001144 <MX_GPIO_Init+0x154>)
 8001004:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001006:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800100a:	64da      	str	r2, [r3, #76]	; 0x4c
 800100c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800100e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001012:	9200      	str	r2, [sp, #0]
 8001014:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001018:	f042 0201 	orr.w	r2, r2, #1
 800101c:	64da      	str	r2, [r3, #76]	; 0x4c
 800101e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001020:	f002 0201 	and.w	r2, r2, #1
 8001024:	9201      	str	r2, [sp, #4]
 8001026:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001028:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800102a:	f042 0202 	orr.w	r2, r2, #2
 800102e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	9302      	str	r3, [sp, #8]
 8001038:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU1_CS_Pin|IMU2_CS_Pin|IMU3_CS_Pin|FLASH_CS_Pin, GPIO_PIN_RESET);
 800103a:	4e43      	ldr	r6, [pc, #268]	; (8001148 <MX_GPIO_Init+0x158>)
 800103c:	4622      	mov	r2, r4
 800103e:	f242 0107 	movw	r1, #8199	; 0x2007
 8001042:	4630      	mov	r0, r6
 8001044:	f001 ffae 	bl	8002fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XBEE_CS_GPIO_Port, XBEE_CS_Pin, GPIO_PIN_RESET);
 8001048:	4622      	mov	r2, r4
 800104a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800104e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001052:	f001 ffa7 	bl	8002fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_3, GPIO_PIN_RESET);
 8001056:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 800114c <MX_GPIO_Init+0x15c>
 800105a:	4622      	mov	r2, r4
 800105c:	2108      	movs	r1, #8
 800105e:	4640      	mov	r0, r8
 8001060:	f001 ffa0 	bl	8002fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MAG_INT_Pin MAG_INT_TRG_Pin IMU3_INT1_Pin IMU3_INT2_Pin
                           IMU2_INT1_Pin IMU2_INT2_Pin IMU1_INT1_Pin IMU1_INT2_Pin */
  GPIO_InitStruct.Pin = MAG_INT_Pin|MAG_INT_TRG_Pin|IMU3_INT1_Pin|IMU3_INT2_Pin
 8001064:	f641 631d 	movw	r3, #7709	; 0x1e1d
 8001068:	9303      	str	r3, [sp, #12]
                          |IMU2_INT1_Pin|IMU2_INT2_Pin|IMU1_INT1_Pin|IMU1_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800106a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800106e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	a903      	add	r1, sp, #12
 8001074:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001078:	f001 feb0 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU1_CS_Pin IMU2_CS_Pin IMU3_CS_Pin FLASH_CS_Pin */
  GPIO_InitStruct.Pin = IMU1_CS_Pin|IMU2_CS_Pin|IMU3_CS_Pin|FLASH_CS_Pin;
 800107c:	f242 0307 	movw	r3, #8199	; 0x2007
 8001080:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001082:	2701      	movs	r7, #1
 8001084:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108a:	a903      	add	r1, sp, #12
 800108c:	4630      	mov	r0, r6
 800108e:	f001 fea5 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001092:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001096:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	f04f 0902 	mov.w	r9, #2
 800109c:	f8cd 9010 	str.w	r9, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a2:	2503      	movs	r5, #3
 80010a4:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010a6:	2305      	movs	r3, #5
 80010a8:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010aa:	a903      	add	r1, sp, #12
 80010ac:	4630      	mov	r0, r6
 80010ae:	f001 fe95 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : XBEE_CS_Pin */
  GPIO_InitStruct.Pin = XBEE_CS_Pin;
 80010b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010b6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b8:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(XBEE_CS_GPIO_Port, &GPIO_InitStruct);
 80010be:	a903      	add	r1, sp, #12
 80010c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c4:	f001 fe8a 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_ATTN_Pin */
  GPIO_InitStruct.Pin = SPI3_ATTN_Pin;
 80010c8:	2380      	movs	r3, #128	; 0x80
 80010ca:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010cc:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(SPI3_ATTN_GPIO_Port, &GPIO_InitStruct);
 80010d0:	a903      	add	r1, sp, #12
 80010d2:	4630      	mov	r0, r6
 80010d4:	f001 fe82 	bl	8002ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010d8:	2308      	movs	r3, #8
 80010da:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010dc:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010de:	f8cd 9014 	str.w	r9, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010e4:	a903      	add	r1, sp, #12
 80010e6:	4640      	mov	r0, r8
 80010e8:	f001 fe78 	bl	8002ddc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 4, 0);
 80010ec:	4622      	mov	r2, r4
 80010ee:	2104      	movs	r1, #4
 80010f0:	2006      	movs	r0, #6
 80010f2:	f001 fe19 	bl	8002d28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80010f6:	2006      	movs	r0, #6
 80010f8:	f001 fe4e 	bl	8002d98 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 3, 0);
 80010fc:	4622      	mov	r2, r4
 80010fe:	4629      	mov	r1, r5
 8001100:	2009      	movs	r0, #9
 8001102:	f001 fe11 	bl	8002d28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001106:	2009      	movs	r0, #9
 8001108:	f001 fe46 	bl	8002d98 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 3, 0);
 800110c:	4622      	mov	r2, r4
 800110e:	4629      	mov	r1, r5
 8001110:	200a      	movs	r0, #10
 8001112:	f001 fe09 	bl	8002d28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001116:	200a      	movs	r0, #10
 8001118:	f001 fe3e 	bl	8002d98 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 800111c:	4622      	mov	r2, r4
 800111e:	4629      	mov	r1, r5
 8001120:	2017      	movs	r0, #23
 8001122:	f001 fe01 	bl	8002d28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001126:	2017      	movs	r0, #23
 8001128:	f001 fe36 	bl	8002d98 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 800112c:	4622      	mov	r2, r4
 800112e:	4629      	mov	r1, r5
 8001130:	2028      	movs	r0, #40	; 0x28
 8001132:	f001 fdf9 	bl	8002d28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001136:	2028      	movs	r0, #40	; 0x28
 8001138:	f001 fe2e 	bl	8002d98 <HAL_NVIC_EnableIRQ>

}
 800113c:	b009      	add	sp, #36	; 0x24
 800113e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001142:	bf00      	nop
 8001144:	40021000 	.word	0x40021000
 8001148:	48000400 	.word	0x48000400
 800114c:	48001c00 	.word	0x48001c00

08001150 <sendCurrentPosition>:
uint8_t sendCurrentPosition(uint8_t state) {
 8001150:	b570      	push	{r4, r5, r6, lr}
 8001152:	b0a6      	sub	sp, #152	; 0x98
	returnDebugOutput(&corr, &pred, &opt, &K_gain, &w_avg, &quat, &ZUPT);
 8001154:	ab10      	add	r3, sp, #64	; 0x40
 8001156:	9302      	str	r3, [sp, #8]
 8001158:	ab13      	add	r3, sp, #76	; 0x4c
 800115a:	9301      	str	r3, [sp, #4]
 800115c:	ab17      	add	r3, sp, #92	; 0x5c
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	ab1a      	add	r3, sp, #104	; 0x68
 8001162:	aa1d      	add	r2, sp, #116	; 0x74
 8001164:	a920      	add	r1, sp, #128	; 0x80
 8001166:	a823      	add	r0, sp, #140	; 0x8c
 8001168:	f000 f9da 	bl	8001520 <returnDebugOutput>
	uint32_t IMUX = *(int*)&pred.X; // x_est
 800116c:	9e20      	ldr	r6, [sp, #128]	; 0x80
	uint32_t IMUY = *(int*)&corr.X; // Hx
 800116e:	9d23      	ldr	r5, [sp, #140]	; 0x8c
	uint32_t IMUZ = *(int*)&corr.Y; // Z - Hx
 8001170:	9c24      	ldr	r4, [sp, #144]	; 0x90
	float K_mag = (float)sqrt(K_gain.X*K_gain.X+K_gain.Y*K_gain.Y+K_gain.Z*K_gain.Z);
 8001172:	eddd 7a1a 	vldr	s15, [sp, #104]	; 0x68
 8001176:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800117a:	ed9d 7a1b 	vldr	s14, [sp, #108]	; 0x6c
 800117e:	ee27 7a07 	vmul.f32	s14, s14, s14
 8001182:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001186:	ed9d 7a1c 	vldr	s14, [sp, #112]	; 0x70
 800118a:	ee27 7a07 	vmul.f32	s14, s14, s14
 800118e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001192:	ee17 0a90 	vmov	r0, s15
 8001196:	f7ff f9cf 	bl	8000538 <__aeabi_f2d>
 800119a:	ec41 0b10 	vmov	d0, r0, r1
 800119e:	f005 f8eb 	bl	8006378 <sqrt>
	uint32_t quatW = *(int*)&opt.X; // x_opt
 80011a2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
	for (i = 0; i < 3; ++i) {
 80011a4:	2100      	movs	r1, #0
 80011a6:	e00a      	b.n	80011be <sendCurrentPosition+0x6e>
	  data_buf[i] = (IMUX >> (3-i)*8) & 0xFF;
 80011a8:	f1c1 0303 	rsb	r3, r1, #3
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	fa26 f303 	lsr.w	r3, r6, r3
 80011b2:	f101 0098 	add.w	r0, r1, #152	; 0x98
 80011b6:	4468      	add	r0, sp
 80011b8:	f800 3c68 	strb.w	r3, [r0, #-104]
	for (i = 0; i < 3; ++i) {
 80011bc:	3101      	adds	r1, #1
 80011be:	2902      	cmp	r1, #2
 80011c0:	ddf2      	ble.n	80011a8 <sendCurrentPosition+0x58>
	for (i = 0; i < 3; ++i) {
 80011c2:	2100      	movs	r1, #0
 80011c4:	e00a      	b.n	80011dc <sendCurrentPosition+0x8c>
	  data_buf[i+4] = (IMUY >> (3-i)*8) & 0xFF;
 80011c6:	f1c1 0303 	rsb	r3, r1, #3
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	fa25 f303 	lsr.w	r3, r5, r3
 80011d0:	f101 009c 	add.w	r0, r1, #156	; 0x9c
 80011d4:	4468      	add	r0, sp
 80011d6:	f800 3c68 	strb.w	r3, [r0, #-104]
	for (i = 0; i < 3; ++i) {
 80011da:	3101      	adds	r1, #1
 80011dc:	2902      	cmp	r1, #2
 80011de:	ddf2      	ble.n	80011c6 <sendCurrentPosition+0x76>
	for (i = 0; i < 3; ++i) {
 80011e0:	2100      	movs	r1, #0
 80011e2:	e00a      	b.n	80011fa <sendCurrentPosition+0xaa>
	  data_buf[i+8] = (IMUZ >> (3-i)*8) & 0xFF;
 80011e4:	f1c1 0303 	rsb	r3, r1, #3
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	fa24 f303 	lsr.w	r3, r4, r3
 80011ee:	f101 00a0 	add.w	r0, r1, #160	; 0xa0
 80011f2:	4468      	add	r0, sp
 80011f4:	f800 3c68 	strb.w	r3, [r0, #-104]
	for (i = 0; i < 3; ++i) {
 80011f8:	3101      	adds	r1, #1
 80011fa:	2902      	cmp	r1, #2
 80011fc:	ddf2      	ble.n	80011e4 <sendCurrentPosition+0x94>
	for (i = 0; i < 3; ++i) {
 80011fe:	2100      	movs	r1, #0
 8001200:	e00a      	b.n	8001218 <sendCurrentPosition+0xc8>
	  data_buf[i+12] = (quatW >> (3-i)*8) & 0xFF;
 8001202:	f1c1 0303 	rsb	r3, r1, #3
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	fa22 f303 	lsr.w	r3, r2, r3
 800120c:	f101 00a4 	add.w	r0, r1, #164	; 0xa4
 8001210:	4468      	add	r0, sp
 8001212:	f800 3c68 	strb.w	r3, [r0, #-104]
	for (i = 0; i < 3; ++i) {
 8001216:	3101      	adds	r1, #1
 8001218:	2902      	cmp	r1, #2
 800121a:	ddf2      	ble.n	8001202 <sendCurrentPosition+0xb2>
	if (ctr == 0) {
 800121c:	4b10      	ldr	r3, [pc, #64]	; (8001260 <sendCurrentPosition+0x110>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	b15b      	cbz	r3, 800123a <sendCurrentPosition+0xea>
	ctr = (ctr + 1) % CTR_MOD;
 8001222:	4a0f      	ldr	r2, [pc, #60]	; (8001260 <sendCurrentPosition+0x110>)
 8001224:	6813      	ldr	r3, [r2, #0]
 8001226:	3301      	adds	r3, #1
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	bf48      	it	mi
 800122e:	425b      	negmi	r3, r3
 8001230:	6013      	str	r3, [r2, #0]
}
 8001232:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001236:	b026      	add	sp, #152	; 0x98
 8001238:	bd70      	pop	{r4, r5, r6, pc}
		XBeeTransmitReceive(data_buf, xbee_rx_buf, TX_DATA_BUF_SZ, COMPUTER_ADDR);
 800123a:	a307      	add	r3, pc, #28	; (adr r3, 8001258 <sendCurrentPosition+0x108>)
 800123c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001240:	e9cd 2300 	strd	r2, r3, [sp]
 8001244:	2210      	movs	r2, #16
 8001246:	eb0d 0102 	add.w	r1, sp, r2
 800124a:	a80c      	add	r0, sp, #48	; 0x30
 800124c:	f7ff fe9e 	bl	8000f8c <XBeeTransmitReceive>
 8001250:	e7e7      	b.n	8001222 <sendCurrentPosition+0xd2>
 8001252:	bf00      	nop
 8001254:	f3af 8000 	nop.w
 8001258:	4108245c 	.word	0x4108245c
 800125c:	0013a200 	.word	0x0013a200
 8001260:	200010ec 	.word	0x200010ec

08001264 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8001264:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001266:	e7fe      	b.n	8001266 <Error_Handler+0x2>

08001268 <MX_SPI1_Init>:
{
 8001268:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 800126a:	480f      	ldr	r0, [pc, #60]	; (80012a8 <MX_SPI1_Init+0x40>)
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <MX_SPI1_Init+0x44>)
 800126e:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001270:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001274:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001276:	2300      	movs	r3, #0
 8001278:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800127a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800127e:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001280:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001282:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001284:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001288:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800128a:	2210      	movs	r2, #16
 800128c:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800128e:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001290:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001292:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001294:	2207      	movs	r2, #7
 8001296:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001298:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800129a:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800129c:	f002 fcd8 	bl	8003c50 <HAL_SPI_Init>
 80012a0:	b900      	cbnz	r0, 80012a4 <MX_SPI1_Init+0x3c>
}
 80012a2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80012a4:	f7ff ffde 	bl	8001264 <Error_Handler>
 80012a8:	200010f0 	.word	0x200010f0
 80012ac:	40013000 	.word	0x40013000

080012b0 <MX_SPI3_Init>:
{
 80012b0:	b508      	push	{r3, lr}
  hspi3.Instance = SPI3;
 80012b2:	4810      	ldr	r0, [pc, #64]	; (80012f4 <MX_SPI3_Init+0x44>)
 80012b4:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <MX_SPI3_Init+0x48>)
 80012b6:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80012b8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80012bc:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80012be:	2300      	movs	r3, #0
 80012c0:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80012c2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80012c6:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012c8:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012ca:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80012cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012d0:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80012d2:	2210      	movs	r2, #16
 80012d4:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012d6:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80012d8:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012da:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80012dc:	2207      	movs	r2, #7
 80012de:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012e0:	6303      	str	r3, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012e2:	2308      	movs	r3, #8
 80012e4:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80012e6:	f002 fcb3 	bl	8003c50 <HAL_SPI_Init>
 80012ea:	b900      	cbnz	r0, 80012ee <MX_SPI3_Init+0x3e>
}
 80012ec:	bd08      	pop	{r3, pc}
    Error_Handler();
 80012ee:	f7ff ffb9 	bl	8001264 <Error_Handler>
 80012f2:	bf00      	nop
 80012f4:	20001154 	.word	0x20001154
 80012f8:	40003c00 	.word	0x40003c00

080012fc <MX_TIM2_Init>:
{
 80012fc:	b500      	push	{lr}
 80012fe:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001300:	2300      	movs	r3, #0
 8001302:	930a      	str	r3, [sp, #40]	; 0x28
 8001304:	930b      	str	r3, [sp, #44]	; 0x2c
 8001306:	930c      	str	r3, [sp, #48]	; 0x30
 8001308:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800130a:	9307      	str	r3, [sp, #28]
 800130c:	9308      	str	r3, [sp, #32]
 800130e:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	9301      	str	r3, [sp, #4]
 8001314:	9302      	str	r3, [sp, #8]
 8001316:	9303      	str	r3, [sp, #12]
 8001318:	9304      	str	r3, [sp, #16]
 800131a:	9305      	str	r3, [sp, #20]
 800131c:	9306      	str	r3, [sp, #24]
  htim2.Instance = TIM2;
 800131e:	481d      	ldr	r0, [pc, #116]	; (8001394 <MX_TIM2_Init+0x98>)
 8001320:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001324:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 7999;
 8001326:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800132a:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132c:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 40;
 800132e:	2228      	movs	r2, #40	; 0x28
 8001330:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001332:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001334:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001336:	f003 fab3 	bl	80048a0 <HAL_TIM_Base_Init>
 800133a:	bb00      	cbnz	r0, 800137e <MX_TIM2_Init+0x82>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800133c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001340:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001342:	a90a      	add	r1, sp, #40	; 0x28
 8001344:	4813      	ldr	r0, [pc, #76]	; (8001394 <MX_TIM2_Init+0x98>)
 8001346:	f003 fb91 	bl	8004a6c <HAL_TIM_ConfigClockSource>
 800134a:	b9d0      	cbnz	r0, 8001382 <MX_TIM2_Init+0x86>
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800134c:	4811      	ldr	r0, [pc, #68]	; (8001394 <MX_TIM2_Init+0x98>)
 800134e:	f003 fad7 	bl	8004900 <HAL_TIM_OC_Init>
 8001352:	b9c0      	cbnz	r0, 8001386 <MX_TIM2_Init+0x8a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001354:	2300      	movs	r3, #0
 8001356:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001358:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800135a:	a907      	add	r1, sp, #28
 800135c:	480d      	ldr	r0, [pc, #52]	; (8001394 <MX_TIM2_Init+0x98>)
 800135e:	f003 fc05 	bl	8004b6c <HAL_TIMEx_MasterConfigSynchronization>
 8001362:	b990      	cbnz	r0, 800138a <MX_TIM2_Init+0x8e>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001364:	2200      	movs	r2, #0
 8001366:	9200      	str	r2, [sp, #0]
  sConfigOC.Pulse = 0;
 8001368:	9201      	str	r2, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800136a:	9202      	str	r2, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800136c:	9204      	str	r2, [sp, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800136e:	4669      	mov	r1, sp
 8001370:	4808      	ldr	r0, [pc, #32]	; (8001394 <MX_TIM2_Init+0x98>)
 8001372:	f003 fb31 	bl	80049d8 <HAL_TIM_OC_ConfigChannel>
 8001376:	b950      	cbnz	r0, 800138e <MX_TIM2_Init+0x92>
}
 8001378:	b00f      	add	sp, #60	; 0x3c
 800137a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800137e:	f7ff ff71 	bl	8001264 <Error_Handler>
    Error_Handler();
 8001382:	f7ff ff6f 	bl	8001264 <Error_Handler>
    Error_Handler();
 8001386:	f7ff ff6d 	bl	8001264 <Error_Handler>
    Error_Handler();
 800138a:	f7ff ff6b 	bl	8001264 <Error_Handler>
    Error_Handler();
 800138e:	f7ff ff69 	bl	8001264 <Error_Handler>
 8001392:	bf00      	nop
 8001394:	200011b8 	.word	0x200011b8

08001398 <SystemClock_Config>:
{
 8001398:	b500      	push	{lr}
 800139a:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139c:	2244      	movs	r2, #68	; 0x44
 800139e:	2100      	movs	r1, #0
 80013a0:	a805      	add	r0, sp, #20
 80013a2:	f003 ff71 	bl	8005288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a6:	2300      	movs	r3, #0
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	9301      	str	r3, [sp, #4]
 80013ac:	9302      	str	r3, [sp, #8]
 80013ae:	9303      	str	r3, [sp, #12]
 80013b0:	9304      	str	r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013b6:	f001 fe11 	bl	8002fdc <HAL_PWREx_ControlVoltageScaling>
 80013ba:	b9d0      	cbnz	r0, 80013f2 <SystemClock_Config+0x5a>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80013bc:	2310      	movs	r3, #16
 80013be:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013c0:	2301      	movs	r3, #1
 80013c2:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 80013c8:	2280      	movs	r2, #128	; 0x80
 80013ca:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013cc:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ce:	a805      	add	r0, sp, #20
 80013d0:	f001 feee 	bl	80031b0 <HAL_RCC_OscConfig>
 80013d4:	b978      	cbnz	r0, 80013f6 <SystemClock_Config+0x5e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d6:	230f      	movs	r3, #15
 80013d8:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80013da:	2100      	movs	r1, #0
 80013dc:	9101      	str	r1, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013de:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013e0:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013e2:	9104      	str	r1, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013e4:	4668      	mov	r0, sp
 80013e6:	f002 fa19 	bl	800381c <HAL_RCC_ClockConfig>
 80013ea:	b930      	cbnz	r0, 80013fa <SystemClock_Config+0x62>
}
 80013ec:	b017      	add	sp, #92	; 0x5c
 80013ee:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80013f2:	f7ff ff37 	bl	8001264 <Error_Handler>
    Error_Handler();
 80013f6:	f7ff ff35 	bl	8001264 <Error_Handler>
    Error_Handler();
 80013fa:	f7ff ff33 	bl	8001264 <Error_Handler>
	...

08001400 <main>:
{
 8001400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_Init();
 8001402:	f001 fc43 	bl	8002c8c <HAL_Init>
  SystemClock_Config();
 8001406:	f7ff ffc7 	bl	8001398 <SystemClock_Config>
  MX_GPIO_Init();
 800140a:	f7ff fdf1 	bl	8000ff0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800140e:	f7ff ff2b 	bl	8001268 <MX_SPI1_Init>
  MX_SPI3_Init();
 8001412:	f7ff ff4d 	bl	80012b0 <MX_SPI3_Init>
  MX_TIM2_Init();
 8001416:	f7ff ff71 	bl	80012fc <MX_TIM2_Init>
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 800141a:	4834      	ldr	r0, [pc, #208]	; (80014ec <main+0xec>)
 800141c:	f003 f8fe 	bl	800461c <HAL_TIM_Base_Start_IT>
 8001420:	b108      	cbz	r0, 8001426 <main+0x26>
      Error_Handler();
 8001422:	f7ff ff1f 	bl	8001264 <Error_Handler>
  XBEE_SPI = hspi3;
 8001426:	2264      	movs	r2, #100	; 0x64
 8001428:	4931      	ldr	r1, [pc, #196]	; (80014f0 <main+0xf0>)
 800142a:	4832      	ldr	r0, [pc, #200]	; (80014f4 <main+0xf4>)
 800142c:	f003 ff1e 	bl	800526c <memcpy>
  IMU_init(&hspi1, &IMU0, 0);
 8001430:	4f31      	ldr	r7, [pc, #196]	; (80014f8 <main+0xf8>)
 8001432:	4c32      	ldr	r4, [pc, #200]	; (80014fc <main+0xfc>)
 8001434:	2200      	movs	r2, #0
 8001436:	4639      	mov	r1, r7
 8001438:	4620      	mov	r0, r4
 800143a:	f7ff fcbb 	bl	8000db4 <IMU_init>
  IMU_init(&hspi1, &IMU1, 1);
 800143e:	4e30      	ldr	r6, [pc, #192]	; (8001500 <main+0x100>)
 8001440:	2201      	movs	r2, #1
 8001442:	4631      	mov	r1, r6
 8001444:	4620      	mov	r0, r4
 8001446:	f7ff fcb5 	bl	8000db4 <IMU_init>
  IMU_init(&hspi1, &IMU2, 2);
 800144a:	2202      	movs	r2, #2
 800144c:	492d      	ldr	r1, [pc, #180]	; (8001504 <main+0x104>)
 800144e:	4620      	mov	r0, r4
 8001450:	f7ff fcb0 	bl	8000db4 <IMU_init>
  HAL_Delay(500);
 8001454:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001458:	f001 fc40 	bl	8002cdc <HAL_Delay>
  IMU_readSensorData(&IMU0, &IMU0_data);
 800145c:	4c2a      	ldr	r4, [pc, #168]	; (8001508 <main+0x108>)
 800145e:	4621      	mov	r1, r4
 8001460:	4638      	mov	r0, r7
 8001462:	f7ff fc3e 	bl	8000ce2 <IMU_readSensorData>
  IMU_readSensorData(&IMU1, &IMU1_data);
 8001466:	4d29      	ldr	r5, [pc, #164]	; (800150c <main+0x10c>)
 8001468:	4629      	mov	r1, r5
 800146a:	4630      	mov	r0, r6
 800146c:	f7ff fc39 	bl	8000ce2 <IMU_readSensorData>
  HAL_Delay(500);
 8001470:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001474:	f001 fc32 	bl	8002cdc <HAL_Delay>
  IMU_readSensorData(&IMU0, &IMU0_data);
 8001478:	4621      	mov	r1, r4
 800147a:	4638      	mov	r0, r7
 800147c:	f7ff fc31 	bl	8000ce2 <IMU_readSensorData>
  IMU_readSensorData(&IMU1, &IMU1_data);
 8001480:	4629      	mov	r1, r5
 8001482:	4630      	mov	r0, r6
 8001484:	f7ff fc2d 	bl	8000ce2 <IMU_readSensorData>
  init_processing(&IMU0_data, &IMU1_data);
 8001488:	4629      	mov	r1, r5
 800148a:	4620      	mov	r0, r4
 800148c:	f001 f808 	bl	80024a0 <init_processing>
	  if (DRDY_flag || periodic_tx_flag) {
 8001490:	4b1f      	ldr	r3, [pc, #124]	; (8001510 <main+0x110>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	b913      	cbnz	r3, 800149c <main+0x9c>
 8001496:	4b1f      	ldr	r3, [pc, #124]	; (8001514 <main+0x114>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	b1b3      	cbz	r3, 80014ca <main+0xca>
		  IMU_readSensorData(&IMU0, &IMU0_data);
 800149c:	4c1a      	ldr	r4, [pc, #104]	; (8001508 <main+0x108>)
 800149e:	4621      	mov	r1, r4
 80014a0:	4815      	ldr	r0, [pc, #84]	; (80014f8 <main+0xf8>)
 80014a2:	f7ff fc1e 	bl	8000ce2 <IMU_readSensorData>
		  IMU_readSensorData(&IMU1, &IMU1_data);
 80014a6:	4d19      	ldr	r5, [pc, #100]	; (800150c <main+0x10c>)
 80014a8:	4629      	mov	r1, r5
 80014aa:	4815      	ldr	r0, [pc, #84]	; (8001500 <main+0x100>)
 80014ac:	f7ff fc19 	bl	8000ce2 <IMU_readSensorData>
		  calculateCorrectedState(&IMU0_data, &IMU1_data, timeDelta);
 80014b0:	4b19      	ldr	r3, [pc, #100]	; (8001518 <main+0x118>)
 80014b2:	ed93 0a00 	vldr	s0, [r3]
 80014b6:	4629      	mov	r1, r5
 80014b8:	4620      	mov	r0, r4
 80014ba:	f001 f96b 	bl	8002794 <calculateCorrectedState>
		  DRDY_flag = 0;
 80014be:	4b14      	ldr	r3, [pc, #80]	; (8001510 <main+0x110>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
		  new_data_flag = 1;
 80014c4:	4b15      	ldr	r3, [pc, #84]	; (800151c <main+0x11c>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	701a      	strb	r2, [r3, #0]
	  if (periodic_tx_flag && new_data_flag) {
 80014ca:	4b12      	ldr	r3, [pc, #72]	; (8001514 <main+0x114>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0de      	beq.n	8001490 <main+0x90>
 80014d2:	4b12      	ldr	r3, [pc, #72]	; (800151c <main+0x11c>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0da      	beq.n	8001490 <main+0x90>
		  uint8_t rx_byte1 = sendCurrentPosition(RUN_STATE);
 80014da:	2001      	movs	r0, #1
 80014dc:	f7ff fe38 	bl	8001150 <sendCurrentPosition>
		  periodic_tx_flag = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	4a0c      	ldr	r2, [pc, #48]	; (8001514 <main+0x114>)
 80014e4:	7013      	strb	r3, [r2, #0]
		  new_data_flag = 0;
 80014e6:	4a0d      	ldr	r2, [pc, #52]	; (800151c <main+0x11c>)
 80014e8:	7013      	strb	r3, [r2, #0]
 80014ea:	e7d1      	b.n	8001490 <main+0x90>
 80014ec:	200011b8 	.word	0x200011b8
 80014f0:	20001154 	.word	0x20001154
 80014f4:	20001088 	.word	0x20001088
 80014f8:	20000ff8 	.word	0x20000ff8
 80014fc:	200010f0 	.word	0x200010f0
 8001500:	20001030 	.word	0x20001030
 8001504:	20001068 	.word	0x20001068
 8001508:	20001018 	.word	0x20001018
 800150c:	20001050 	.word	0x20001050
 8001510:	20000ff4 	.word	0x20000ff4
 8001514:	2000004c 	.word	0x2000004c
 8001518:	20000050 	.word	0x20000050
 800151c:	20001204 	.word	0x20001204

08001520 <returnDebugOutput>:
	current_pos->Z = (x_curr_f32[2] + x_curr_f32[5]) / 2;
	// Returns avg of two position values, units of meters
	return 0.;
}

float returnDebugOutput(Position* corr, Position* pred, Position* optimal_pos, Position* K_gain, Position* w_avg, Quaternion* quat, Position* ZUPT) {
 8001520:	b4f0      	push	{r4, r5, r6, r7}
 8001522:	9d04      	ldr	r5, [sp, #16]
 8001524:	9c05      	ldr	r4, [sp, #20]
 8001526:	9e06      	ldr	r6, [sp, #24]
	corr->X = correction_f32[0];
 8001528:	4f22      	ldr	r7, [pc, #136]	; (80015b4 <returnDebugOutput+0x94>)
 800152a:	f8d7 c000 	ldr.w	ip, [r7]
 800152e:	f8c0 c000 	str.w	ip, [r0]
	corr->Y = correction_f32[1];
 8001532:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8001536:	f8c0 c004 	str.w	ip, [r0, #4]
	corr->Z = correction_f32[2];
 800153a:	68bf      	ldr	r7, [r7, #8]
 800153c:	6087      	str	r7, [r0, #8]

	//*pred = (Position){0,0,0};
	pred->X = prediction_f32[0];
 800153e:	481e      	ldr	r0, [pc, #120]	; (80015b8 <returnDebugOutput+0x98>)
 8001540:	6807      	ldr	r7, [r0, #0]
 8001542:	600f      	str	r7, [r1, #0]
	pred->Y = prediction_f32[1];
 8001544:	6847      	ldr	r7, [r0, #4]
 8001546:	604f      	str	r7, [r1, #4]
	pred->Z = prediction_f32[2];
 8001548:	6880      	ldr	r0, [r0, #8]
 800154a:	6088      	str	r0, [r1, #8]

	optimal_pos->X = optimal_f32[0];
 800154c:	491b      	ldr	r1, [pc, #108]	; (80015bc <returnDebugOutput+0x9c>)
 800154e:	6808      	ldr	r0, [r1, #0]
 8001550:	6010      	str	r0, [r2, #0]
	optimal_pos->Y = optimal_f32[1];
 8001552:	6848      	ldr	r0, [r1, #4]
 8001554:	6050      	str	r0, [r2, #4]
	optimal_pos->Z = optimal_f32[2];
 8001556:	6889      	ldr	r1, [r1, #8]
 8001558:	6091      	str	r1, [r2, #8]

	K_gain->X = gain_f32[0];
 800155a:	4a19      	ldr	r2, [pc, #100]	; (80015c0 <returnDebugOutput+0xa0>)
 800155c:	6811      	ldr	r1, [r2, #0]
 800155e:	6019      	str	r1, [r3, #0]
	K_gain->Y = gain_f32[1];
 8001560:	6851      	ldr	r1, [r2, #4]
 8001562:	6059      	str	r1, [r3, #4]
	K_gain->Z = gain_f32[2];
 8001564:	6892      	ldr	r2, [r2, #8]
 8001566:	609a      	str	r2, [r3, #8]

	w_avg->X = w_avg_b0_f32[0];
 8001568:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <returnDebugOutput+0xa4>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	602a      	str	r2, [r5, #0]
	w_avg->Y = w_avg_b0_f32[1];
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	606a      	str	r2, [r5, #4]
	w_avg->Z = w_avg_b0_f32[2];
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	60ab      	str	r3, [r5, #8]

	quat->W = q_f32[0];
 8001576:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <returnDebugOutput+0xa8>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	6022      	str	r2, [r4, #0]
	quat->X = q_f32[1];
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	6062      	str	r2, [r4, #4]
	quat->Y = q_f32[2];
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	60a2      	str	r2, [r4, #8]
	quat->Z = q_f32[3];
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	60e3      	str	r3, [r4, #12]

	ZUPT->X = (float)curr_phase; // Phase
 8001588:	4b10      	ldr	r3, [pc, #64]	; (80015cc <returnDebugOutput+0xac>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	ee07 3a90 	vmov	s15, r3
 8001590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001594:	edc6 7a00 	vstr	s15, [r6]
	ZUPT->Y = (float)phase_counter;
 8001598:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <returnDebugOutput+0xb0>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	ee07 3a90 	vmov	s15, r3
 80015a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015a4:	edc6 7a01 	vstr	s15, [r6, #4]

	return w_avg_b0_mag;
}
 80015a8:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <returnDebugOutput+0xb4>)
 80015aa:	ed93 0a00 	vldr	s0, [r3]
 80015ae:	bcf0      	pop	{r4, r5, r6, r7}
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	20001624 	.word	0x20001624
 80015b8:	20001664 	.word	0x20001664
 80015bc:	20001650 	.word	0x20001650
 80015c0:	2000163c 	.word	0x2000163c
 80015c4:	200024a4 	.word	0x200024a4
 80015c8:	20000ef8 	.word	0x20000ef8
 80015cc:	20000ef4 	.word	0x20000ef4
 80015d0:	2000165c 	.word	0x2000165c
 80015d4:	200024b0 	.word	0x200024b0

080015d8 <calculateRotationMatrix>:
	// Determine |w_avg_b0|
	w_avg_b0_mag = vec_mag_f32(w_avg_b0_f32);
}

void calculateRotationMatrix(
		float timeDelta) { // TODO Verify this
 80015d8:	b510      	push	{r4, lr}
 80015da:	ed2d 8b02 	vpush	{d8}
 80015de:	b084      	sub	sp, #16

	// Determine change in rotation angle / 2 (units of radians)
	float rotation_angle_div_2 = w_avg_b0_mag * timeDelta * deg2rad / 2;
 80015e0:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <calculateRotationMatrix+0xc0>)
 80015e2:	ed93 8a00 	vldr	s16, [r3]
 80015e6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80015ea:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800169c <calculateRotationMatrix+0xc4>
 80015ee:	ee20 0a27 	vmul.f32	s0, s0, s15
 80015f2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80015f6:	ee60 7a27 	vmul.f32	s15, s0, s15
 80015fa:	ee17 4a90 	vmov	r4, s15

	float q1_3_scaling_term = (w_avg_b0_mag) ?
			(float)sin(rotation_angle_div_2) / w_avg_b0_mag : w_avg_b0_mag; // reduce number of calculations
 80015fe:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8001602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001606:	d00f      	beq.n	8001628 <calculateRotationMatrix+0x50>
 8001608:	ee17 0a90 	vmov	r0, s15
 800160c:	f7fe ff94 	bl	8000538 <__aeabi_f2d>
 8001610:	ec41 0b10 	vmov	d0, r0, r1
 8001614:	f004 fe58 	bl	80062c8 <sin>
 8001618:	ec51 0b10 	vmov	r0, r1, d0
 800161c:	f7ff fabc 	bl	8000b98 <__aeabi_d2f>
 8001620:	ee07 0a90 	vmov	s15, r0
 8001624:	ee87 8a88 	vdiv.f32	s16, s15, s16

	// Determine change in rotation as quaternion
	float delta_q_f32[4];
	delta_q_f32[0] = (float)cos(rotation_angle_div_2);
 8001628:	4620      	mov	r0, r4
 800162a:	f7fe ff85 	bl	8000538 <__aeabi_f2d>
 800162e:	ec41 0b10 	vmov	d0, r0, r1
 8001632:	f004 fdf5 	bl	8006220 <cos>
 8001636:	ec51 0b10 	vmov	r0, r1, d0
 800163a:	f7ff faad 	bl	8000b98 <__aeabi_d2f>
 800163e:	9000      	str	r0, [sp, #0]
	delta_q_f32[1] = w_avg_b0_f32[0] * q1_3_scaling_term;
 8001640:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <calculateRotationMatrix+0xc8>)
 8001642:	edd3 7a00 	vldr	s15, [r3]
 8001646:	ee67 7a88 	vmul.f32	s15, s15, s16
 800164a:	edcd 7a01 	vstr	s15, [sp, #4]
	delta_q_f32[2] = w_avg_b0_f32[1] * q1_3_scaling_term;
 800164e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001652:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001656:	edcd 7a02 	vstr	s15, [sp, #8]
	delta_q_f32[3] = w_avg_b0_f32[2] * q1_3_scaling_term;
 800165a:	edd3 7a02 	vldr	s15, [r3, #8]
 800165e:	ee27 8a88 	vmul.f32	s16, s15, s16
 8001662:	ed8d 8a03 	vstr	s16, [sp, #12]

	arm_quaternion_normalize_f32(delta_q_f32, delta_q_f32, 1);	// q = q / |q|a
 8001666:	2201      	movs	r2, #1
 8001668:	4669      	mov	r1, sp
 800166a:	4668      	mov	r0, sp
 800166c:	f003 fcbb 	bl	8004fe6 <arm_quaternion_normalize_f32>

	// Calculate new normalized quaternion
	arm_quaternion_product_single_f32(delta_q_f32, q_f32, q_f32); // q = q x delta_q
 8001670:	4c0c      	ldr	r4, [pc, #48]	; (80016a4 <calculateRotationMatrix+0xcc>)
 8001672:	4622      	mov	r2, r4
 8001674:	4621      	mov	r1, r4
 8001676:	4668      	mov	r0, sp
 8001678:	f003 fd0c 	bl	8005094 <arm_quaternion_product_single_f32>
	arm_quaternion_normalize_f32(q_f32, q_f32, 1);	// q = q / |q|
 800167c:	2201      	movs	r2, #1
 800167e:	4621      	mov	r1, r4
 8001680:	4620      	mov	r0, r4
 8001682:	f003 fcb0 	bl	8004fe6 <arm_quaternion_normalize_f32>
	// Calculate rotation matrix from board frame to nav frame using quaternion
	arm_quaternion2rotation_f32(q_f32, rotation_b0_n_f32, 1);
 8001686:	2201      	movs	r2, #1
 8001688:	4907      	ldr	r1, [pc, #28]	; (80016a8 <calculateRotationMatrix+0xd0>)
 800168a:	4620      	mov	r0, r4
 800168c:	f003 fc2a 	bl	8004ee4 <arm_quaternion2rotation_f32>
	//printf("%f %f %f %f %f %f %f %f %f\n", rotation_b0_n_f32[0], rotation_b0_n_f32[1], rotation_b0_n_f32[2], rotation_b0_n_f32[3], rotation_b0_n_f32[4], rotation_b0_n_f32[5], rotation_b0_n_f32[6], rotation_b0_n_f32[7], rotation_b0_n_f32[8]);
}
 8001690:	b004      	add	sp, #16
 8001692:	ecbd 8b02 	vpop	{d8}
 8001696:	bd10      	pop	{r4, pc}
 8001698:	200024b0 	.word	0x200024b0
 800169c:	3c8efa35 	.word	0x3c8efa35
 80016a0:	200024a4 	.word	0x200024a4
 80016a4:	20000ef8 	.word	0x20000ef8
 80016a8:	20001678 	.word	0x20001678

080016ac <calculateStateEstimation>:

void calculateStateEstimation(void) { // TODO Verify this
 80016ac:	b500      	push	{lr}
 80016ae:	b09d      	sub	sp, #116	; 0x74
	 *  Define Temporary Objects
	 */

	float temp1_f32[12];
	arm_matrix_instance_f32 temp1;
	arm_mat_init_f32(&temp1, 12, 1, temp1_f32); // temp for first term of sum, 12x1
 80016b0:	ab10      	add	r3, sp, #64	; 0x40
 80016b2:	2201      	movs	r2, #1
 80016b4:	210c      	movs	r1, #12
 80016b6:	a80e      	add	r0, sp, #56	; 0x38
 80016b8:	f003 faab 	bl	8004c12 <arm_mat_init_f32>

	float temp2_f32[12];
	arm_matrix_instance_f32 temp2;
	arm_mat_init_f32(&temp2, 12, 1, temp2_f32); // temp for second term of sum, 12x1
 80016bc:	ab02      	add	r3, sp, #8
 80016be:	2201      	movs	r2, #1
 80016c0:	210c      	movs	r1, #12
 80016c2:	4668      	mov	r0, sp
 80016c4:	f003 faa5 	bl	8004c12 <arm_mat_init_f32>

	/*
	 *  Calculation Section
	 */

	arm_mat_mult_f32(&F_matrix, &x_prev, &temp1); // F*x(k-1) --> (12x12) * (12x1)
 80016c8:	aa0e      	add	r2, sp, #56	; 0x38
 80016ca:	4915      	ldr	r1, [pc, #84]	; (8001720 <calculateStateEstimation+0x74>)
 80016cc:	4815      	ldr	r0, [pc, #84]	; (8001724 <calculateStateEstimation+0x78>)
 80016ce:	f003 fb9b 	bl	8004e08 <arm_mat_mult_f32>

	arm_mat_mult_f32(&B_matrix, &u_curr, &temp2); // B*u(k) --> (12x6) * (6x1)
 80016d2:	466a      	mov	r2, sp
 80016d4:	4914      	ldr	r1, [pc, #80]	; (8001728 <calculateStateEstimation+0x7c>)
 80016d6:	4815      	ldr	r0, [pc, #84]	; (800172c <calculateStateEstimation+0x80>)
 80016d8:	f003 fb96 	bl	8004e08 <arm_mat_mult_f32>

	arm_mat_add_f32(&temp1, &temp2, &x_curr); // x(k) = F*x(k-1) + B*u(k)
 80016dc:	4a14      	ldr	r2, [pc, #80]	; (8001730 <calculateStateEstimation+0x84>)
 80016de:	4669      	mov	r1, sp
 80016e0:	a80e      	add	r0, sp, #56	; 0x38
 80016e2:	f003 fa7e 	bl	8004be2 <arm_mat_add_f32>

	prediction_f32[0] = (x_curr_f32[0]);
 80016e6:	4b13      	ldr	r3, [pc, #76]	; (8001734 <calculateStateEstimation+0x88>)
 80016e8:	6819      	ldr	r1, [r3, #0]
 80016ea:	4a13      	ldr	r2, [pc, #76]	; (8001738 <calculateStateEstimation+0x8c>)
 80016ec:	6011      	str	r1, [r2, #0]
	prediction_f32[1] = (x_curr_f32[1] + x_curr_f32[4]) / 2;
 80016ee:	ed93 7a01 	vldr	s14, [r3, #4]
 80016f2:	edd3 7a04 	vldr	s15, [r3, #16]
 80016f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016fa:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80016fe:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001702:	ed82 7a01 	vstr	s14, [r2, #4]
	prediction_f32[2] = (x_curr_f32[2] + x_curr_f32[5]) / 2;
 8001706:	edd3 7a02 	vldr	s15, [r3, #8]
 800170a:	ed93 7a05 	vldr	s14, [r3, #20]
 800170e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001712:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001716:	edc2 7a02 	vstr	s15, [r2, #8]
}
 800171a:	b01d      	add	sp, #116	; 0x74
 800171c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001720:	200024fc 	.word	0x200024fc
 8001724:	20001210 	.word	0x20001210
 8001728:	2000247c 	.word	0x2000247c
 800172c:	20001208 	.word	0x20001208
 8001730:	200024f4 	.word	0x200024f4
 8001734:	20000f08 	.word	0x20000f08
 8001738:	20001664 	.word	0x20001664

0800173c <calculateStateEstimationErrorCovariance>:

void calculateStateEstimationErrorCovariance(void) {
 800173c:	b510      	push	{r4, lr}
 800173e:	f5ad 6d92 	sub.w	sp, sp, #1168	; 0x490
	 *  Define Temporary Objects
	 */

	float temp12x12_0_f32[144];
	arm_matrix_instance_f32 temp12x12_0;
	arm_mat_init_f32(&temp12x12_0, 12, 12, temp12x12_0_f32); // Temp 12x12 matrix
 8001742:	ab94      	add	r3, sp, #592	; 0x250
 8001744:	220c      	movs	r2, #12
 8001746:	4611      	mov	r1, r2
 8001748:	a892      	add	r0, sp, #584	; 0x248
 800174a:	f003 fa62 	bl	8004c12 <arm_mat_init_f32>
	arm_mat_trans_f32(&F_matrix, &temp12x12_0);	// Initialize to transpose of F
 800174e:	4c0e      	ldr	r4, [pc, #56]	; (8001788 <calculateStateEstimationErrorCovariance+0x4c>)
 8001750:	a992      	add	r1, sp, #584	; 0x248
 8001752:	4620      	mov	r0, r4
 8001754:	f003 fbaa 	bl	8004eac <arm_mat_trans_f32>

	float temp12x12_1_f32[144];
	arm_matrix_instance_f32 temp12x12_1;
	arm_mat_init_f32(&temp12x12_1, 12, 12, temp12x12_1_f32); // Temp 12x12 matrix
 8001758:	ab02      	add	r3, sp, #8
 800175a:	220c      	movs	r2, #12
 800175c:	4611      	mov	r1, r2
 800175e:	4668      	mov	r0, sp
 8001760:	f003 fa57 	bl	8004c12 <arm_mat_init_f32>
	/*
	 *  Calculation Section
	 */

	arm_mat_mult_f32(&P_prev, &temp12x12_0, &temp12x12_1);	// P(k-1)*F^T --> (12x12) * (12x12)
 8001764:	466a      	mov	r2, sp
 8001766:	a992      	add	r1, sp, #584	; 0x248
 8001768:	4808      	ldr	r0, [pc, #32]	; (800178c <calculateStateEstimationErrorCovariance+0x50>)
 800176a:	f003 fb4d 	bl	8004e08 <arm_mat_mult_f32>

	arm_mat_mult_f32(&F_matrix, &temp12x12_1, &temp12x12_0);	// F*(P(k-1)*F^T) --> (12x12) * (12x12)
 800176e:	aa92      	add	r2, sp, #584	; 0x248
 8001770:	4669      	mov	r1, sp
 8001772:	4620      	mov	r0, r4
 8001774:	f003 fb48 	bl	8004e08 <arm_mat_mult_f32>

	arm_mat_add_f32(&temp12x12_0, &Q_prev, &P_minus);	// P-(k) = (F*P(k-1)*F^T) + Q(k-1)
 8001778:	4a05      	ldr	r2, [pc, #20]	; (8001790 <calculateStateEstimationErrorCovariance+0x54>)
 800177a:	4906      	ldr	r1, [pc, #24]	; (8001794 <calculateStateEstimationErrorCovariance+0x58>)
 800177c:	a892      	add	r0, sp, #584	; 0x248
 800177e:	f003 fa30 	bl	8004be2 <arm_mat_add_f32>

}
 8001782:	f50d 6d92 	add.w	sp, sp, #1168	; 0x490
 8001786:	bd10      	pop	{r4, pc}
 8001788:	20001210 	.word	0x20001210
 800178c:	200015a8 	.word	0x200015a8
 8001790:	200015a0 	.word	0x200015a0
 8001794:	200015b0 	.word	0x200015b0

08001798 <calculateGainMatrix>:
#define MAX_IMU (4*g)

void calculateGainMatrix(
		arm_matrix_instance_f32* Ki, /*(12xN)*/
		arm_matrix_instance_f32* Hi, /*(Nx12)*/
		arm_matrix_instance_f32* Ri /*(NxN)*/) { // TODO Verify this
 8001798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800179a:	b08f      	sub	sp, #60	; 0x3c
 800179c:	4605      	mov	r5, r0
 800179e:	460e      	mov	r6, r1
 80017a0:	4617      	mov	r7, r2

	uint16_t N = Hi->numRows;
 80017a2:	880c      	ldrh	r4, [r1, #0]
	/*
	 *  Define Temporary Objects
	 */

	arm_matrix_instance_f32 temp12xN_0;
	arm_mat_init_f32(&temp12xN_0, 12, N, temp12xN_0_f32); // temp matrix (12xN)
 80017a4:	4b8e      	ldr	r3, [pc, #568]	; (80019e0 <calculateGainMatrix+0x248>)
 80017a6:	4622      	mov	r2, r4
 80017a8:	210c      	movs	r1, #12
 80017aa:	a80c      	add	r0, sp, #48	; 0x30
 80017ac:	f003 fa31 	bl	8004c12 <arm_mat_init_f32>
	arm_mat_trans_f32(Hi, &temp12xN_0); // init to transpose of Hi
 80017b0:	a90c      	add	r1, sp, #48	; 0x30
 80017b2:	4630      	mov	r0, r6
 80017b4:	f003 fb7a 	bl	8004eac <arm_mat_trans_f32>

	arm_matrix_instance_f32 temp12xN_1;
	arm_mat_init_f32(&temp12xN_1, 12, N, temp12xN_1_f32); // temp matrix (12xN)
 80017b8:	4b8a      	ldr	r3, [pc, #552]	; (80019e4 <calculateGainMatrix+0x24c>)
 80017ba:	4622      	mov	r2, r4
 80017bc:	210c      	movs	r1, #12
 80017be:	a80a      	add	r0, sp, #40	; 0x28
 80017c0:	f003 fa27 	bl	8004c12 <arm_mat_init_f32>

	arm_matrix_instance_f32 tempNxN_0;
	arm_mat_init_f32(&tempNxN_0, N, N, tempNxN_0_f32); // temp matrix (NxN)
 80017c4:	4b88      	ldr	r3, [pc, #544]	; (80019e8 <calculateGainMatrix+0x250>)
 80017c6:	4622      	mov	r2, r4
 80017c8:	4621      	mov	r1, r4
 80017ca:	a808      	add	r0, sp, #32
 80017cc:	f003 fa21 	bl	8004c12 <arm_mat_init_f32>

	arm_matrix_instance_f32 tempNxN_1;
	arm_mat_init_f32(&tempNxN_1, N, N, tempNxN_1_f32); // temp matrix (NxN)
 80017d0:	4b86      	ldr	r3, [pc, #536]	; (80019ec <calculateGainMatrix+0x254>)
 80017d2:	4622      	mov	r2, r4
 80017d4:	4621      	mov	r1, r4
 80017d6:	a806      	add	r0, sp, #24
 80017d8:	f003 fa1b 	bl	8004c12 <arm_mat_init_f32>

	arm_matrix_instance_f32 tempNxN_2;
	arm_mat_init_f32(&tempNxN_2, N, N, tempNxN_2_f32); // temp matrix (NxN)
 80017dc:	4b84      	ldr	r3, [pc, #528]	; (80019f0 <calculateGainMatrix+0x258>)
 80017de:	4622      	mov	r2, r4
 80017e0:	4621      	mov	r1, r4
 80017e2:	a804      	add	r0, sp, #16
 80017e4:	f003 fa15 	bl	8004c12 <arm_mat_init_f32>
	/*
	 *  Calculation Section
	 */

	float IMU[3];
	int index = ((int)xl_oldest - 1)%RING_SIZE;
 80017e8:	4b82      	ldr	r3, [pc, #520]	; (80019f4 <calculateGainMatrix+0x25c>)
 80017ea:	781a      	ldrb	r2, [r3, #0]
 80017ec:	3a01      	subs	r2, #1
 80017ee:	4982      	ldr	r1, [pc, #520]	; (80019f8 <calculateGainMatrix+0x260>)
 80017f0:	fb81 3102 	smull	r3, r1, r1, r2
 80017f4:	17d3      	asrs	r3, r2, #31
 80017f6:	ebc3 0361 	rsb	r3, r3, r1, asr #1
 80017fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80017fe:	1ad3      	subs	r3, r2, r3
	IMU[0] = xl0_avg_x_ring[index]/MAX_IMU;
 8001800:	4a7e      	ldr	r2, [pc, #504]	; (80019fc <calculateGainMatrix+0x264>)
 8001802:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001806:	edd2 6a00 	vldr	s13, [r2]
 800180a:	eddf 7a7d 	vldr	s15, [pc, #500]	; 8001a00 <calculateGainMatrix+0x268>
 800180e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001812:	ed8d 7a01 	vstr	s14, [sp, #4]
	IMU[1] = xl0_avg_y_ring[index]/MAX_IMU;
 8001816:	4a7b      	ldr	r2, [pc, #492]	; (8001a04 <calculateGainMatrix+0x26c>)
 8001818:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800181c:	edd2 6a00 	vldr	s13, [r2]
 8001820:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001824:	ed8d 7a02 	vstr	s14, [sp, #8]
	IMU[2] = xl0_avg_z_ring[index]/MAX_IMU;
 8001828:	4a77      	ldr	r2, [pc, #476]	; (8001a08 <calculateGainMatrix+0x270>)
 800182a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800182e:	edd3 6a00 	vldr	s13, [r3]
 8001832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001836:	ed8d 7a03 	vstr	s14, [sp, #12]


	// Form Ri Scaling Matrix
	int i;
	for (i = 0; i < N; ++i) {
 800183a:	f04f 0e00 	mov.w	lr, #0
 800183e:	e060      	b.n	8001902 <calculateGainMatrix+0x16a>
		int j;
		for (j = 0; j < 3; ++j) {
			if (((N+1)*i) % N == j) {
				tempNxN_0_f32[((N+1)*i)] = IMU[j] * dT;
 8001840:	aa0e      	add	r2, sp, #56	; 0x38
 8001842:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001846:	ed52 6a0d 	vldr	s13, [r2, #-52]	; 0xffffffcc
 800184a:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8001a0c <calculateGainMatrix+0x274>
 800184e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001852:	4a65      	ldr	r2, [pc, #404]	; (80019e8 <calculateGainMatrix+0x250>)
 8001854:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8001858:	edc1 7a00 	vstr	s15, [r1]
		for (j = 0; j < 3; ++j) {
 800185c:	3301      	adds	r3, #1
 800185e:	2b02      	cmp	r3, #2
 8001860:	dc0f      	bgt.n	8001882 <calculateGainMatrix+0xea>
			if (((N+1)*i) % N == j) {
 8001862:	fb04 e10e 	mla	r1, r4, lr, lr
 8001866:	fb91 f2f4 	sdiv	r2, r1, r4
 800186a:	fb04 1212 	mls	r2, r4, r2, r1
 800186e:	429a      	cmp	r2, r3
 8001870:	d0e6      	beq.n	8001840 <calculateGainMatrix+0xa8>
			} else {
				tempNxN_0_f32[(i*N)+j] = 0;
 8001872:	fb0e 3204 	mla	r2, lr, r4, r3
 8001876:	495c      	ldr	r1, [pc, #368]	; (80019e8 <calculateGainMatrix+0x250>)
 8001878:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800187c:	2100      	movs	r1, #0
 800187e:	6011      	str	r1, [r2, #0]
 8001880:	e7ec      	b.n	800185c <calculateGainMatrix+0xc4>
			}
		}
		for (j = 3; j < 6; ++j) {
 8001882:	2303      	movs	r3, #3
 8001884:	e01c      	b.n	80018c0 <calculateGainMatrix+0x128>
			if (((N+1)*i) % N == j) {
				tempNxN_0_f32[((N+1)*i)] = IMU[j%3] * dT2 / 2;
 8001886:	4a62      	ldr	r2, [pc, #392]	; (8001a10 <calculateGainMatrix+0x278>)
 8001888:	fb82 0203 	smull	r0, r2, r2, r3
 800188c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001890:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001894:	1a9a      	subs	r2, r3, r2
 8001896:	a80e      	add	r0, sp, #56	; 0x38
 8001898:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800189c:	ed52 7a0d 	vldr	s15, [r2, #-52]	; 0xffffffcc
 80018a0:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001a0c <calculateGainMatrix+0x274>
 80018a4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80018a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80018b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018b4:	4a4c      	ldr	r2, [pc, #304]	; (80019e8 <calculateGainMatrix+0x250>)
 80018b6:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80018ba:	edc1 7a00 	vstr	s15, [r1]
		for (j = 3; j < 6; ++j) {
 80018be:	3301      	adds	r3, #1
 80018c0:	2b05      	cmp	r3, #5
 80018c2:	dc0f      	bgt.n	80018e4 <calculateGainMatrix+0x14c>
			if (((N+1)*i) % N == j) {
 80018c4:	fb04 e10e 	mla	r1, r4, lr, lr
 80018c8:	fb91 f2f4 	sdiv	r2, r1, r4
 80018cc:	fb04 1212 	mls	r2, r4, r2, r1
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d0d8      	beq.n	8001886 <calculateGainMatrix+0xee>
			} else {
				tempNxN_0_f32[(i*N)+j] = 0;
 80018d4:	fb0e 3204 	mla	r2, lr, r4, r3
 80018d8:	4943      	ldr	r1, [pc, #268]	; (80019e8 <calculateGainMatrix+0x250>)
 80018da:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80018de:	2100      	movs	r1, #0
 80018e0:	6011      	str	r1, [r2, #0]
 80018e2:	e7ec      	b.n	80018be <calculateGainMatrix+0x126>
			}
		}
		for (j = 6; j < N; ++j) {
 80018e4:	2306      	movs	r3, #6
 80018e6:	e008      	b.n	80018fa <calculateGainMatrix+0x162>
			tempNxN_0_f32[(i*N)+j] = 0;
 80018e8:	fb0e 3c04 	mla	ip, lr, r4, r3
 80018ec:	4a3e      	ldr	r2, [pc, #248]	; (80019e8 <calculateGainMatrix+0x250>)
 80018ee:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 80018f2:	2200      	movs	r2, #0
 80018f4:	f8cc 2000 	str.w	r2, [ip]
		for (j = 6; j < N; ++j) {
 80018f8:	3301      	adds	r3, #1
 80018fa:	429c      	cmp	r4, r3
 80018fc:	dcf4      	bgt.n	80018e8 <calculateGainMatrix+0x150>
	for (i = 0; i < N; ++i) {
 80018fe:	f10e 0e01 	add.w	lr, lr, #1
 8001902:	4574      	cmp	r4, lr
 8001904:	dd01      	ble.n	800190a <calculateGainMatrix+0x172>
		for (j = 0; j < 3; ++j) {
 8001906:	2300      	movs	r3, #0
 8001908:	e7a9      	b.n	800185e <calculateGainMatrix+0xc6>
		}
	}

	arm_mat_mult_f32(Ri, &tempNxN_0, &tempNxN_2);
 800190a:	aa04      	add	r2, sp, #16
 800190c:	a908      	add	r1, sp, #32
 800190e:	4638      	mov	r0, r7
 8001910:	f003 fa7a 	bl	8004e08 <arm_mat_mult_f32>

	arm_mat_mult_f32(&P_minus, &temp12xN_0, &temp12xN_1);	// P-(k)*Hi^T --> (12x12) * (12xN)
 8001914:	aa0a      	add	r2, sp, #40	; 0x28
 8001916:	a90c      	add	r1, sp, #48	; 0x30
 8001918:	483e      	ldr	r0, [pc, #248]	; (8001a14 <calculateGainMatrix+0x27c>)
 800191a:	f003 fa75 	bl	8004e08 <arm_mat_mult_f32>

	arm_mat_mult_f32(Hi, &temp12xN_1, &tempNxN_0);	// Hi*(P-(k)*Hi^T) --> (Nx12) * (12xN)
 800191e:	aa08      	add	r2, sp, #32
 8001920:	a90a      	add	r1, sp, #40	; 0x28
 8001922:	4630      	mov	r0, r6
 8001924:	f003 fa70 	bl	8004e08 <arm_mat_mult_f32>

	arm_mat_add_f32(&tempNxN_0, &tempNxN_2, &tempNxN_1);	// (Hi*P-(k)*Hi^T + Ri(k))
 8001928:	aa06      	add	r2, sp, #24
 800192a:	a904      	add	r1, sp, #16
 800192c:	a808      	add	r0, sp, #32
 800192e:	f003 f958 	bl	8004be2 <arm_mat_add_f32>

	arm_mat_inverse_f32(&tempNxN_1, &tempNxN_0);	// (Hi*P-(k)*Hi^T + Ri(k))^-1
 8001932:	a908      	add	r1, sp, #32
 8001934:	a806      	add	r0, sp, #24
 8001936:	f003 f971 	bl	8004c1c <arm_mat_inverse_f32>

	arm_mat_mult_f32(&temp12xN_1, &tempNxN_0, Ki);	// Ki(k) = P-(k)*Hi^T * (Hi*P-(k)*Hi^T + Ri(k))^-1 --> (12xN) * (NxN)
 800193a:	462a      	mov	r2, r5
 800193c:	a908      	add	r1, sp, #32
 800193e:	a80a      	add	r0, sp, #40	; 0x28
 8001940:	f003 fa62 	bl	8004e08 <arm_mat_mult_f32>

	float k_gate = 5;
	for (i = 0; i < N*N; ++i) {
 8001944:	2200      	movs	r2, #0
 8001946:	e00b      	b.n	8001960 <calculateGainMatrix+0x1c8>
		if (fabs(Ki->pData[i]) > k_gate || Ki->pData != Ki->pData) {
			Ki->pData[i] = k_gate * (Ki->pData[i] > 0 ? 1 : -1);
 8001948:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800194c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001950:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001954:	edc3 7a00 	vstr	s15, [r3]
			diverging_flag = 1;
 8001958:	4b2f      	ldr	r3, [pc, #188]	; (8001a18 <calculateGainMatrix+0x280>)
 800195a:	2101      	movs	r1, #1
 800195c:	7019      	strb	r1, [r3, #0]
	for (i = 0; i < N*N; ++i) {
 800195e:	3201      	adds	r2, #1
 8001960:	fb04 f304 	mul.w	r3, r4, r4
 8001964:	4293      	cmp	r3, r2
 8001966:	dd15      	ble.n	8001994 <calculateGainMatrix+0x1fc>
		if (fabs(Ki->pData[i]) > k_gate || Ki->pData != Ki->pData) {
 8001968:	686b      	ldr	r3, [r5, #4]
 800196a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800196e:	edd3 7a00 	vldr	s15, [r3]
 8001972:	eef0 6ae7 	vabs.f32	s13, s15
 8001976:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800197a:	eef4 6ac7 	vcmpe.f32	s13, s14
 800197e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001982:	ddec      	ble.n	800195e <calculateGainMatrix+0x1c6>
			Ki->pData[i] = k_gate * (Ki->pData[i] > 0 ? 1 : -1);
 8001984:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198c:	dddc      	ble.n	8001948 <calculateGainMatrix+0x1b0>
 800198e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001992:	e7db      	b.n	800194c <calculateGainMatrix+0x1b4>
		}
	}

	gain_f32[0] = (Ki->pData[0] + Ki->pData[3]) / 2;
 8001994:	686b      	ldr	r3, [r5, #4]
 8001996:	edd3 7a00 	vldr	s15, [r3]
 800199a:	ed93 7a03 	vldr	s14, [r3, #12]
 800199e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019a2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80019a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019aa:	4a1c      	ldr	r2, [pc, #112]	; (8001a1c <calculateGainMatrix+0x284>)
 80019ac:	edc2 7a00 	vstr	s15, [r2]
	gain_f32[1] = (Ki->pData[1] + Ki->pData[4]) / 2;
 80019b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80019b4:	edd3 6a04 	vldr	s13, [r3, #16]
 80019b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80019bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019c0:	edc2 7a01 	vstr	s15, [r2, #4]
	gain_f32[2] = (Ki->pData[2] + Ki->pData[5]) / 2;
 80019c4:	686b      	ldr	r3, [r5, #4]
 80019c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80019ca:	edd3 6a05 	vldr	s13, [r3, #20]
 80019ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80019d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019d6:	edc2 7a02 	vstr	s15, [r2, #8]
}
 80019da:	b00f      	add	sp, #60	; 0x3c
 80019dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019de:	bf00      	nop
 80019e0:	200016fc 	.word	0x200016fc
 80019e4:	2000193c 	.word	0x2000193c
 80019e8:	20001dbc 	.word	0x20001dbc
 80019ec:	20001ffc 	.word	0x20001ffc
 80019f0:	2000223c 	.word	0x2000223c
 80019f4:	20002594 	.word	0x20002594
 80019f8:	66666667 	.word	0x66666667
 80019fc:	20002504 	.word	0x20002504
 8001a00:	421cd806 	.word	0x421cd806
 8001a04:	20002518 	.word	0x20002518
 8001a08:	2000252c 	.word	0x2000252c
 8001a0c:	42480000 	.word	0x42480000
 8001a10:	55555556 	.word	0x55555556
 8001a14:	200015a0 	.word	0x200015a0
 8001a18:	20001630 	.word	0x20001630
 8001a1c:	2000163c 	.word	0x2000163c

08001a20 <calculateOptimalStateEstimation>:
#define Z_THRES 0.1

void calculateOptimalStateEstimation(
		arm_matrix_instance_f32* Ki, /*(12xN)*/
		arm_matrix_instance_f32* Zi, /*(Nx1)*/
		arm_matrix_instance_f32* Hi /*(Nx12)*/) { // TODO Verify this
 8001a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a24:	b092      	sub	sp, #72	; 0x48
 8001a26:	4606      	mov	r6, r0
 8001a28:	460c      	mov	r4, r1
 8001a2a:	4617      	mov	r7, r2

	uint16_t N = Zi->numRows;
 8001a2c:	880d      	ldrh	r5, [r1, #0]
	/*
	 *  Define Temporary Objects
	 */

	arm_matrix_instance_f32 tempNx1_0;
	arm_mat_init_f32(&tempNx1_0, N, 1, temp12x1_0_f32); // Will temporarily store some operation results, (Nx1)
 8001a2e:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <calculateOptimalStateEstimation+0x8c>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	4629      	mov	r1, r5
 8001a34:	a810      	add	r0, sp, #64	; 0x40
 8001a36:	f003 f8ec 	bl	8004c12 <arm_mat_init_f32>

	arm_matrix_instance_f32 tempNx1_1;
	arm_mat_init_f32(&tempNx1_1, N, 1, temp12x1_1_f32); // Will temporarily store some operation results, (Nx1)
 8001a3a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8001ab8 <calculateOptimalStateEstimation+0x98>
 8001a3e:	4643      	mov	r3, r8
 8001a40:	2201      	movs	r2, #1
 8001a42:	4629      	mov	r1, r5
 8001a44:	a80e      	add	r0, sp, #56	; 0x38
 8001a46:	f003 f8e4 	bl	8004c12 <arm_mat_init_f32>

	float temp12x1_f32[12];
	arm_matrix_instance_f32 temp12x1;
	arm_mat_init_f32(&temp12x1, 12, 1, temp12x1_f32); // Will temporarily store some operation results, (12x1)
 8001a4a:	ab02      	add	r3, sp, #8
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	210c      	movs	r1, #12
 8001a50:	4668      	mov	r0, sp
 8001a52:	f003 f8de 	bl	8004c12 <arm_mat_init_f32>

	/*
	 *  Calculation Section
	 */

	arm_mat_mult_f32(Hi, &x_curr, &tempNx1_0);	// Hi*x(k) --> (Nx12) * (12x1)
 8001a56:	4d16      	ldr	r5, [pc, #88]	; (8001ab0 <calculateOptimalStateEstimation+0x90>)
 8001a58:	aa10      	add	r2, sp, #64	; 0x40
 8001a5a:	4629      	mov	r1, r5
 8001a5c:	4638      	mov	r0, r7
 8001a5e:	f003 f9d3 	bl	8004e08 <arm_mat_mult_f32>

	// Calculate correction factor
	arm_mat_sub_f32(Zi, &tempNx1_0, &tempNx1_1);	// (Zi(k) - Hi*x(k)) -> tempNx1
 8001a62:	aa0e      	add	r2, sp, #56	; 0x38
 8001a64:	a910      	add	r1, sp, #64	; 0x40
 8001a66:	4620      	mov	r0, r4
 8001a68:	f003 fa08 	bl	8004e7c <arm_mat_sub_f32>
//	printf("%f %f %f\n", tempNx1_f32[3], tempNx1_f32[4], tempNx1_f32[5]); // should be ideally zero


	correction_f32[0] = (temp12x1_1_f32[0]); // Z - Hx
 8001a6c:	f8d8 3000 	ldr.w	r3, [r8]
 8001a70:	4c10      	ldr	r4, [pc, #64]	; (8001ab4 <calculateOptimalStateEstimation+0x94>)
 8001a72:	6023      	str	r3, [r4, #0]
	// Weight correction factor by Kalman Gain
	arm_mat_mult_f32(Ki, &tempNx1_1, &temp12x1); // Ki(k) * (Zi(k) - Hi*x(k)) --> (12xN) * (Nx1) -> temp12x1
 8001a74:	466a      	mov	r2, sp
 8001a76:	a90e      	add	r1, sp, #56	; 0x38
 8001a78:	4630      	mov	r0, r6
 8001a7a:	f003 f9c5 	bl	8004e08 <arm_mat_mult_f32>

	correction_f32[1] = (temp12x1_f32[0]); // K(Z - Hx)
 8001a7e:	9b02      	ldr	r3, [sp, #8]
 8001a80:	6063      	str	r3, [r4, #4]

	//correction_f32[0] = (temp12x1_f32[0] + temp12x1_f32[3]) / 2;
	//correction_f32[1] = (temp12x1_f32[1] + temp12x1_f32[4]) / 2;
	correction_f32[2] = (temp12x1_f32[2] + temp12x1_f32[5]) / 2;
 8001a82:	eddd 7a04 	vldr	s15, [sp, #16]
 8001a86:	ed9d 7a07 	vldr	s14, [sp, #28]
 8001a8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a8e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001a92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a96:	edc4 7a02 	vstr	s15, [r4, #8]

//	printf("X_curr_before: %f \n", (x_curr_f32[0] + x_curr_f32[3]) / 2);
//	printf("Correction: %f \n", (temp12x1_f32[0] + temp12x1_f32[3]) / 2);

	// Add weighted correction factor
	arm_mat_add_f32(&x_curr, &temp12x1, &x_curr); // x(k) <= x_best(k) = x(k) + Ki(k) * (Zi(k) - Hi*x(k))
 8001a9a:	462a      	mov	r2, r5
 8001a9c:	4669      	mov	r1, sp
 8001a9e:	4628      	mov	r0, r5
 8001aa0:	f003 f89f 	bl	8004be2 <arm_mat_add_f32>

//	printf("X_curr_after: %f \n", (x_curr_f32[0] + x_curr_f32[3]) / 2);
//	printf("~~~~~~~~~\n");

}
 8001aa4:	b012      	add	sp, #72	; 0x48
 8001aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001aaa:	bf00      	nop
 8001aac:	2000169c 	.word	0x2000169c
 8001ab0:	200024f4 	.word	0x200024f4
 8001ab4:	20001624 	.word	0x20001624
 8001ab8:	200016cc 	.word	0x200016cc

08001abc <calculateOptimalEstimationErrorCovariance>:

void calculateOptimalEstimationErrorCovariance(
		arm_matrix_instance_f32* Ki, /*(12xN)*/
		arm_matrix_instance_f32* Hi, /*(Nx12)*/
		arm_matrix_instance_f32* Ri /*(NxN)*/) { // TODO Verify this
 8001abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001abe:	f6ad 1d34 	subw	sp, sp, #2356	; 0x934
 8001ac2:	4605      	mov	r5, r0
 8001ac4:	460e      	mov	r6, r1
 8001ac6:	4617      	mov	r7, r2

	uint16_t N = Hi->numRows;
 8001ac8:	880c      	ldrh	r4, [r1, #0]
	/*
	 *  Define Temporary Objects
	 */

	arm_matrix_instance_f32 tempNx12_0;
	arm_mat_init_f32(&tempNx12_0, N, 12, tempNx12_0_f32); // temp matrix (Nx12)
 8001aca:	4b51      	ldr	r3, [pc, #324]	; (8001c10 <calculateOptimalEstimationErrorCovariance+0x154>)
 8001acc:	220c      	movs	r2, #12
 8001ace:	4621      	mov	r1, r4
 8001ad0:	f60d 1028 	addw	r0, sp, #2344	; 0x928
 8001ad4:	f003 f89d 	bl	8004c12 <arm_mat_init_f32>
	arm_mat_trans_f32(Ki, &tempNx12_0); // init to transpose of Ki
 8001ad8:	f60d 1128 	addw	r1, sp, #2344	; 0x928
 8001adc:	4628      	mov	r0, r5
 8001ade:	f003 f9e5 	bl	8004eac <arm_mat_trans_f32>

	arm_matrix_instance_f32 temp12xN_0;
	arm_mat_init_f32(&temp12xN_0, 12, N, temp12xN_0_f32); // temp matrix (12xN)
 8001ae2:	4b4c      	ldr	r3, [pc, #304]	; (8001c14 <calculateOptimalEstimationErrorCovariance+0x158>)
 8001ae4:	4622      	mov	r2, r4
 8001ae6:	210c      	movs	r1, #12
 8001ae8:	f50d 6012 	add.w	r0, sp, #2336	; 0x920
 8001aec:	f003 f891 	bl	8004c12 <arm_mat_init_f32>

	float Identity12x12_f32[144] = {
 8001af0:	f50d 64dc 	add.w	r4, sp, #1760	; 0x6e0
 8001af4:	f44f 7210 	mov.w	r2, #576	; 0x240
 8001af8:	2100      	movs	r1, #0
 8001afa:	4620      	mov	r0, r4
 8001afc:	f003 fbc4 	bl	8005288 <memset>
 8001b00:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001b04:	6023      	str	r3, [r4, #0]
 8001b06:	6363      	str	r3, [r4, #52]	; 0x34
 8001b08:	66a3      	str	r3, [r4, #104]	; 0x68
 8001b0a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 8001b0e:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
 8001b12:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 8001b16:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
 8001b1a:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
 8001b1e:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
 8001b22:	f8c4 31d4 	str.w	r3, [r4, #468]	; 0x1d4
 8001b26:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 8001b2a:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
			0,0,0,	0,0,0,	0,0,0,	1,0,0,
			0,0,0,	0,0,0,	0,0,0,	0,1,0,
			0,0,0,	0,0,0,	0,0,0,	0,0,1,
	};
	arm_matrix_instance_f32 Identity12x12;
	arm_mat_init_f32(&Identity12x12, 12, 12, Identity12x12_f32); // 12x12 Identity matrix
 8001b2e:	4623      	mov	r3, r4
 8001b30:	220c      	movs	r2, #12
 8001b32:	4611      	mov	r1, r2
 8001b34:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
 8001b38:	f003 f86b 	bl	8004c12 <arm_mat_init_f32>

	float temp12x12_0_f32[144];
	arm_matrix_instance_f32 temp12x12_0;
	arm_mat_init_f32(&temp12x12_0, 12, 12, temp12x12_0_f32); // Temp 12x12 matrix 0
 8001b3c:	f50d 6393 	add.w	r3, sp, #1176	; 0x498
 8001b40:	220c      	movs	r2, #12
 8001b42:	4611      	mov	r1, r2
 8001b44:	f50d 6092 	add.w	r0, sp, #1168	; 0x490
 8001b48:	f003 f863 	bl	8004c12 <arm_mat_init_f32>

	float temp12x12_1_f32[144];
	arm_matrix_instance_f32 temp12x12_1;
	arm_mat_init_f32(&temp12x12_1, 12, 12, temp12x12_1_f32); // Temp 12x12 matrix 1
 8001b4c:	ab94      	add	r3, sp, #592	; 0x250
 8001b4e:	220c      	movs	r2, #12
 8001b50:	4611      	mov	r1, r2
 8001b52:	a892      	add	r0, sp, #584	; 0x248
 8001b54:	f003 f85d 	bl	8004c12 <arm_mat_init_f32>

	float temp12x12_2_f32[144];
	arm_matrix_instance_f32 temp12x12_2;
	arm_mat_init_f32(&temp12x12_2, 12, 12, temp12x12_2_f32); // Temp 12x12 matrix 2
 8001b58:	ab02      	add	r3, sp, #8
 8001b5a:	220c      	movs	r2, #12
 8001b5c:	4611      	mov	r1, r2
 8001b5e:	4668      	mov	r0, sp
 8001b60:	f003 f857 	bl	8004c12 <arm_mat_init_f32>
	 *  Calculation Section
	 */

	// Check for divergence
	float rst_constant = 1;
	if (diverging_flag) {
 8001b64:	4b2c      	ldr	r3, [pc, #176]	; (8001c18 <calculateOptimalEstimationErrorCovariance+0x15c>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	b303      	cbz	r3, 8001bac <calculateOptimalEstimationErrorCovariance+0xf0>
		int i;
		int j;
		for (i = 0; i < P_curr.numRows; ++i) {
 8001b6a:	f04f 0c00 	mov.w	ip, #0
 8001b6e:	e011      	b.n	8001b94 <calculateOptimalEstimationErrorCovariance+0xd8>
			for (j = 0; j < P_curr.numCols; ++j) {
				P_curr.pData[(i*P_curr.numCols) + j] = P_init_f32[(i*P_curr.numCols) + j] * rst_constant;
 8001b70:	fb0c 2303 	mla	r3, ip, r3, r2
 8001b74:	4929      	ldr	r1, [pc, #164]	; (8001c1c <calculateOptimalEstimationErrorCovariance+0x160>)
 8001b76:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001b7a:	6808      	ldr	r0, [r1, #0]
 8001b7c:	4928      	ldr	r1, [pc, #160]	; (8001c20 <calculateOptimalEstimationErrorCovariance+0x164>)
 8001b7e:	6849      	ldr	r1, [r1, #4]
 8001b80:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8001b84:	6018      	str	r0, [r3, #0]
			for (j = 0; j < P_curr.numCols; ++j) {
 8001b86:	3201      	adds	r2, #1
 8001b88:	4b25      	ldr	r3, [pc, #148]	; (8001c20 <calculateOptimalEstimationErrorCovariance+0x164>)
 8001b8a:	885b      	ldrh	r3, [r3, #2]
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	dcef      	bgt.n	8001b70 <calculateOptimalEstimationErrorCovariance+0xb4>
		for (i = 0; i < P_curr.numRows; ++i) {
 8001b90:	f10c 0c01 	add.w	ip, ip, #1
 8001b94:	4b22      	ldr	r3, [pc, #136]	; (8001c20 <calculateOptimalEstimationErrorCovariance+0x164>)
 8001b96:	881b      	ldrh	r3, [r3, #0]
 8001b98:	4563      	cmp	r3, ip
 8001b9a:	dd01      	ble.n	8001ba0 <calculateOptimalEstimationErrorCovariance+0xe4>
			for (j = 0; j < P_curr.numCols; ++j) {
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	e7f3      	b.n	8001b88 <calculateOptimalEstimationErrorCovariance+0xcc>
			}
		}
		diverging_flag = 0;
 8001ba0:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <calculateOptimalEstimationErrorCovariance+0x15c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	701a      	strb	r2, [r3, #0]

	arm_mat_mult_f32(&temp12xN_0, &tempNx12_0, &temp12x12_0);	// Ki(k)*Ri*Ki(k)^T --> (12xN) * (Nx12)

	arm_mat_add_f32(&temp12x12_1, &temp12x12_0, &P_curr);	// P(k) = (I - Ki(k)*Hi)*P-(k)*(I - (Ki(k)*Hi)^T + Ki(k)*Ri*Ki(k)^T

}
 8001ba6:	f60d 1d34 	addw	sp, sp, #2356	; 0x934
 8001baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	arm_mat_mult_f32(Ki, Hi, &temp12x12_0);	// Ki(k)*Hi --> (12xN) * (Nx12)
 8001bac:	f50d 6292 	add.w	r2, sp, #1168	; 0x490
 8001bb0:	4631      	mov	r1, r6
 8001bb2:	4628      	mov	r0, r5
 8001bb4:	f003 f928 	bl	8004e08 <arm_mat_mult_f32>
	arm_mat_sub_f32(&Identity12x12, &temp12x12_0, &temp12x12_1); // I - (Ki(k)*Hi)
 8001bb8:	aa92      	add	r2, sp, #584	; 0x248
 8001bba:	f50d 6192 	add.w	r1, sp, #1168	; 0x490
 8001bbe:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
 8001bc2:	f003 f95b 	bl	8004e7c <arm_mat_sub_f32>
	arm_mat_trans_f32(&temp12x12_1, &temp12x12_0); 	// (I - (Ki(k)*Hi)^T
 8001bc6:	f50d 6192 	add.w	r1, sp, #1168	; 0x490
 8001bca:	a892      	add	r0, sp, #584	; 0x248
 8001bcc:	f003 f96e 	bl	8004eac <arm_mat_trans_f32>
	arm_mat_mult_f32(&temp12x12_1, &P_minus, &temp12x12_2);	// (I - Ki(k)*Hi)*P-(k) --> (12x12) * (12x12)
 8001bd0:	466a      	mov	r2, sp
 8001bd2:	4914      	ldr	r1, [pc, #80]	; (8001c24 <calculateOptimalEstimationErrorCovariance+0x168>)
 8001bd4:	a892      	add	r0, sp, #584	; 0x248
 8001bd6:	f003 f917 	bl	8004e08 <arm_mat_mult_f32>
	arm_mat_mult_f32(&temp12x12_2, &temp12x12_0, &temp12x12_1);	// (I - Ki(k)*Hi)*P-(k)*(I - (Ki(k)*Hi)^T
 8001bda:	aa92      	add	r2, sp, #584	; 0x248
 8001bdc:	f50d 6192 	add.w	r1, sp, #1168	; 0x490
 8001be0:	4668      	mov	r0, sp
 8001be2:	f003 f911 	bl	8004e08 <arm_mat_mult_f32>
	arm_mat_mult_f32(Ki, Ri, &temp12xN_0);	// Ki(k)*Ri --> (12xN) * (NxN)
 8001be6:	f50d 6212 	add.w	r2, sp, #2336	; 0x920
 8001bea:	4639      	mov	r1, r7
 8001bec:	4628      	mov	r0, r5
 8001bee:	f003 f90b 	bl	8004e08 <arm_mat_mult_f32>
	arm_mat_mult_f32(&temp12xN_0, &tempNx12_0, &temp12x12_0);	// Ki(k)*Ri*Ki(k)^T --> (12xN) * (Nx12)
 8001bf2:	f50d 6292 	add.w	r2, sp, #1168	; 0x490
 8001bf6:	f60d 1128 	addw	r1, sp, #2344	; 0x928
 8001bfa:	f50d 6012 	add.w	r0, sp, #2336	; 0x920
 8001bfe:	f003 f903 	bl	8004e08 <arm_mat_mult_f32>
	arm_mat_add_f32(&temp12x12_1, &temp12x12_0, &P_curr);	// P(k) = (I - Ki(k)*Hi)*P-(k)*(I - (Ki(k)*Hi)^T + Ki(k)*Ri*Ki(k)^T
 8001c02:	4a07      	ldr	r2, [pc, #28]	; (8001c20 <calculateOptimalEstimationErrorCovariance+0x164>)
 8001c04:	f50d 6192 	add.w	r1, sp, #1168	; 0x490
 8001c08:	a892      	add	r0, sp, #584	; 0x248
 8001c0a:	f002 ffea 	bl	8004be2 <arm_mat_add_f32>
 8001c0e:	e7ca      	b.n	8001ba6 <calculateOptimalEstimationErrorCovariance+0xea>
 8001c10:	20001b7c 	.word	0x20001b7c
 8001c14:	200016fc 	.word	0x200016fc
 8001c18:	20001630 	.word	0x20001630
 8001c1c:	200005f4 	.word	0x200005f4
 8001c20:	20001598 	.word	0x20001598
 8001c24:	200015a0 	.word	0x200015a0

08001c28 <updateFMatrix>:

void updateFMatrix(
		float timeDelta) {

	int i;
	for(i = 0; i < 6; ++i) { // Update specific indices of F matrix
 8001c28:	2300      	movs	r3, #0
 8001c2a:	e00a      	b.n	8001c42 <updateFMatrix+0x1a>
		F_matrix_f32[6 + (13*i)] = timeDelta;
 8001c2c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001c30:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8001c34:	3206      	adds	r2, #6
 8001c36:	4904      	ldr	r1, [pc, #16]	; (8001c48 <updateFMatrix+0x20>)
 8001c38:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001c3c:	ed82 0a00 	vstr	s0, [r2]
	for(i = 0; i < 6; ++i) { // Update specific indices of F matrix
 8001c40:	3301      	adds	r3, #1
 8001c42:	2b05      	cmp	r3, #5
 8001c44:	ddf2      	ble.n	8001c2c <updateFMatrix+0x4>
	}
}
 8001c46:	4770      	bx	lr
 8001c48:	20000174 	.word	0x20000174

08001c4c <updateBMatrix>:

void updateBMatrix(
		float timeDelta) { // TODO Verify this

	float dt2 = timeDelta * timeDelta / 2;
 8001c4c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8001c50:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001c54:	ee67 7a87 	vmul.f32	s15, s15, s14

	int i;
	for(i = 0; i < 6; ++i) { // Update specific indices of B matrix with (timeDelta^2)/2
 8001c58:	2300      	movs	r3, #0
 8001c5a:	e007      	b.n	8001c6c <updateBMatrix+0x20>
		B_matrix_f32[(7*i)] = dt2;
 8001c5c:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8001c60:	4a0b      	ldr	r2, [pc, #44]	; (8001c90 <updateBMatrix+0x44>)
 8001c62:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8001c66:	edc2 7a00 	vstr	s15, [r2]
	for(i = 0; i < 6; ++i) { // Update specific indices of B matrix with (timeDelta^2)/2
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	2b05      	cmp	r3, #5
 8001c6e:	ddf5      	ble.n	8001c5c <updateBMatrix+0x10>
	}

	for(i = 0; i < 6; ++i) { // Update specific indices of B matrix with timeDelta
 8001c70:	2300      	movs	r3, #0
 8001c72:	e009      	b.n	8001c88 <updateBMatrix+0x3c>
		B_matrix_f32[36 + (7*i)] = timeDelta;
 8001c74:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8001c78:	f102 0124 	add.w	r1, r2, #36	; 0x24
 8001c7c:	4a04      	ldr	r2, [pc, #16]	; (8001c90 <updateBMatrix+0x44>)
 8001c7e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8001c82:	ed82 0a00 	vstr	s0, [r2]
	for(i = 0; i < 6; ++i) { // Update specific indices of B matrix with timeDelta
 8001c86:	3301      	adds	r3, #1
 8001c88:	2b05      	cmp	r3, #5
 8001c8a:	ddf3      	ble.n	8001c74 <updateBMatrix+0x28>
	}
}
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20000054 	.word	0x20000054

08001c94 <updatePreviousMatrices>:
	Zi->pData[0] = tempRw_f32[0];
	Zi->pData[1] = tempRw_f32[1];
	Zi->pData[2] = tempRw_f32[2];
}

void updatePreviousMatrices(void) {
 8001c94:	b500      	push	{lr}
	int i;
	int j;
	for (i = 0; i < x_curr.numRows; ++i) {
 8001c96:	2300      	movs	r3, #0
 8001c98:	e00a      	b.n	8001cb0 <updatePreviousMatrices+0x1c>
		x_prev.pData[i] = x_curr.pData[i];
 8001c9a:	4a18      	ldr	r2, [pc, #96]	; (8001cfc <updatePreviousMatrices+0x68>)
 8001c9c:	6851      	ldr	r1, [r2, #4]
 8001c9e:	4a18      	ldr	r2, [pc, #96]	; (8001d00 <updatePreviousMatrices+0x6c>)
 8001ca0:	6852      	ldr	r2, [r2, #4]
 8001ca2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001ca6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001caa:	6809      	ldr	r1, [r1, #0]
 8001cac:	6011      	str	r1, [r2, #0]
	for (i = 0; i < x_curr.numRows; ++i) {
 8001cae:	3301      	adds	r3, #1
 8001cb0:	4a12      	ldr	r2, [pc, #72]	; (8001cfc <updatePreviousMatrices+0x68>)
 8001cb2:	8812      	ldrh	r2, [r2, #0]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	dcf0      	bgt.n	8001c9a <updatePreviousMatrices+0x6>
	}

	for (i = 0; i < P_prev.numRows; ++i) {
 8001cb8:	f04f 0e00 	mov.w	lr, #0
 8001cbc:	e015      	b.n	8001cea <updatePreviousMatrices+0x56>
		for (j = 0; j < P_prev.numCols; ++j) {
			P_prev.pData[(i*P_prev.numCols) + j] = P_curr.pData[(i*P_curr.numCols) + j];
 8001cbe:	4911      	ldr	r1, [pc, #68]	; (8001d04 <updatePreviousMatrices+0x70>)
 8001cc0:	6848      	ldr	r0, [r1, #4]
 8001cc2:	8849      	ldrh	r1, [r1, #2]
 8001cc4:	fb0e 3c01 	mla	ip, lr, r1, r3
 8001cc8:	490f      	ldr	r1, [pc, #60]	; (8001d08 <updatePreviousMatrices+0x74>)
 8001cca:	6849      	ldr	r1, [r1, #4]
 8001ccc:	fb0e 3202 	mla	r2, lr, r2, r3
 8001cd0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001cd4:	eb00 018c 	add.w	r1, r0, ip, lsl #2
 8001cd8:	6809      	ldr	r1, [r1, #0]
 8001cda:	6011      	str	r1, [r2, #0]
		for (j = 0; j < P_prev.numCols; ++j) {
 8001cdc:	3301      	adds	r3, #1
 8001cde:	4a0a      	ldr	r2, [pc, #40]	; (8001d08 <updatePreviousMatrices+0x74>)
 8001ce0:	8852      	ldrh	r2, [r2, #2]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	dceb      	bgt.n	8001cbe <updatePreviousMatrices+0x2a>
	for (i = 0; i < P_prev.numRows; ++i) {
 8001ce6:	f10e 0e01 	add.w	lr, lr, #1
 8001cea:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <updatePreviousMatrices+0x74>)
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	4573      	cmp	r3, lr
 8001cf0:	dd01      	ble.n	8001cf6 <updatePreviousMatrices+0x62>
		for (j = 0; j < P_prev.numCols; ++j) {
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	e7f3      	b.n	8001cde <updatePreviousMatrices+0x4a>
		}
	}
}
 8001cf6:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cfa:	bf00      	nop
 8001cfc:	200024f4 	.word	0x200024f4
 8001d00:	200024fc 	.word	0x200024fc
 8001d04:	20001598 	.word	0x20001598
 8001d08:	200015a8 	.word	0x200015a8

08001d0c <dot_f32>:

float dot_f32(float* a, float* b) {
	return (a[0]*b[0]) + (a[1]*b[1]) + (a[2]*b[2]);
 8001d0c:	edd0 7a00 	vldr	s15, [r0]
 8001d10:	ed91 0a00 	vldr	s0, [r1]
 8001d14:	ee67 7a80 	vmul.f32	s15, s15, s0
 8001d18:	ed90 0a01 	vldr	s0, [r0, #4]
 8001d1c:	ed91 7a01 	vldr	s14, [r1, #4]
 8001d20:	ee20 0a07 	vmul.f32	s0, s0, s14
 8001d24:	ee77 7a80 	vadd.f32	s15, s15, s0
 8001d28:	ed90 0a02 	vldr	s0, [r0, #8]
 8001d2c:	ed91 7a02 	vldr	s14, [r1, #8]
 8001d30:	ee20 0a07 	vmul.f32	s0, s0, s14
}
 8001d34:	ee37 0a80 	vadd.f32	s0, s15, s0
 8001d38:	4770      	bx	lr

08001d3a <cross_f32>:

void cross_f32(float* a, float* b, float* c) {
	c[0] = a[1] * b[2] - a[2] * b[1];
 8001d3a:	edd0 7a01 	vldr	s15, [r0, #4]
 8001d3e:	ed91 7a02 	vldr	s14, [r1, #8]
 8001d42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d46:	ed90 7a02 	vldr	s14, [r0, #8]
 8001d4a:	edd1 6a01 	vldr	s13, [r1, #4]
 8001d4e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001d52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d56:	edc2 7a00 	vstr	s15, [r2]
	c[1] = a[2] * b[0] - a[0] * b[2];
 8001d5a:	edd0 7a02 	vldr	s15, [r0, #8]
 8001d5e:	ed91 7a00 	vldr	s14, [r1]
 8001d62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d66:	ed90 7a00 	vldr	s14, [r0]
 8001d6a:	edd1 6a02 	vldr	s13, [r1, #8]
 8001d6e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001d72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d76:	edc2 7a01 	vstr	s15, [r2, #4]
	c[2] = a[0] * b[1] - a[1] * b[0];
 8001d7a:	edd0 7a00 	vldr	s15, [r0]
 8001d7e:	ed91 7a01 	vldr	s14, [r1, #4]
 8001d82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d86:	ed90 7a01 	vldr	s14, [r0, #4]
 8001d8a:	edd1 6a00 	vldr	s13, [r1]
 8001d8e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001d92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d96:	edc2 7a02 	vstr	s15, [r2, #8]
}
 8001d9a:	4770      	bx	lr

08001d9c <vec_mag_f32>:

float vec_mag_f32(float* vec) {
	float mag = (vec[0]*vec[0]) + (vec[1]*vec[1]) + (vec[2]*vec[2]);
 8001d9c:	ed90 0a00 	vldr	s0, [r0]
 8001da0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8001da4:	edd0 7a01 	vldr	s15, [r0, #4]
 8001da8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001dac:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001db0:	edd0 7a02 	vldr	s15, [r0, #8]
 8001db4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001db8:	ee30 0a27 	vadd.f32	s0, s0, s15
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001dbc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc4:	db03      	blt.n	8001dce <vec_mag_f32+0x32>
float vec_mag_f32(float* vec) {
 8001dc6:	b508      	push	{r3, lr}
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8001dc8:	f004 fb02 	bl	80063d0 <sqrtf>
	arm_sqrt_f32(mag, &mag);
	return mag;
}
 8001dcc:	bd08      	pop	{r3, pc}

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8001dce:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8001dd4 <vec_mag_f32+0x38>
 8001dd2:	4770      	bx	lr
 8001dd4:	00000000 	.word	0x00000000

08001dd8 <cross_product>:

void cross_product(
		arm_matrix_instance_f32* a,
		arm_matrix_instance_f32* b,
		arm_matrix_instance_f32* c) {
 8001dd8:	b500      	push	{lr}
 8001dda:	b087      	sub	sp, #28

	// Make copy to avoid using overwritten data in calculations (ex. if a = c)
	float aData[3] = {a->pData[0], a->pData[1], a->pData[2]};
 8001ddc:	6843      	ldr	r3, [r0, #4]
 8001dde:	6818      	ldr	r0, [r3, #0]
 8001de0:	9003      	str	r0, [sp, #12]
 8001de2:	6858      	ldr	r0, [r3, #4]
 8001de4:	9004      	str	r0, [sp, #16]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	9305      	str	r3, [sp, #20]
	float bData[3] = {b->pData[0], b->pData[1], b->pData[2]};
 8001dea:	684b      	ldr	r3, [r1, #4]
 8001dec:	6819      	ldr	r1, [r3, #0]
 8001dee:	9100      	str	r1, [sp, #0]
 8001df0:	6859      	ldr	r1, [r3, #4]
 8001df2:	9101      	str	r1, [sp, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	9302      	str	r3, [sp, #8]

	cross_f32(aData, bData, c->pData);
 8001df8:	6852      	ldr	r2, [r2, #4]
 8001dfa:	4669      	mov	r1, sp
 8001dfc:	a803      	add	r0, sp, #12
 8001dfe:	f7ff ff9c 	bl	8001d3a <cross_f32>
}
 8001e02:	b007      	add	sp, #28
 8001e04:	f85d fb04 	ldr.w	pc, [sp], #4

08001e08 <updateZiVector>:
		arm_matrix_instance_f32* Zi) { // TODO Verify this
 8001e08:	b530      	push	{r4, r5, lr}
 8001e0a:	b08b      	sub	sp, #44	; 0x2c
 8001e0c:	4604      	mov	r4, r0
	arm_mat_init_f32(&tempRm, 3, 1, tempRm_f32);
 8001e0e:	ab07      	add	r3, sp, #28
 8001e10:	2201      	movs	r2, #1
 8001e12:	2103      	movs	r1, #3
 8001e14:	a805      	add	r0, sp, #20
 8001e16:	f002 fefc 	bl	8004c12 <arm_mat_init_f32>
	arm_mat_init_f32(&tempRw, 3, 1, tempRw_f32);
 8001e1a:	ab02      	add	r3, sp, #8
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	2103      	movs	r1, #3
 8001e20:	4668      	mov	r0, sp
 8001e22:	f002 fef6 	bl	8004c12 <arm_mat_init_f32>
	arm_mat_mult_f32(&rotation_b0_n, &w_avg_b0, &tempRw);	// R_b0_n*w_avg_b0 --> (3x3) * (3x1)
 8001e26:	4d12      	ldr	r5, [pc, #72]	; (8001e70 <updateZiVector+0x68>)
 8001e28:	466a      	mov	r2, sp
 8001e2a:	4912      	ldr	r1, [pc, #72]	; (8001e74 <updateZiVector+0x6c>)
 8001e2c:	4628      	mov	r0, r5
 8001e2e:	f002 ffeb 	bl	8004e08 <arm_mat_mult_f32>
	arm_mat_mult_f32(&rotation_b0_n, &m_b0, &tempRm);	// R_b0_n*m_b0 --> (3x3) * (3x1)
 8001e32:	aa05      	add	r2, sp, #20
 8001e34:	4910      	ldr	r1, [pc, #64]	; (8001e78 <updateZiVector+0x70>)
 8001e36:	4628      	mov	r0, r5
 8001e38:	f002 ffe6 	bl	8004e08 <arm_mat_mult_f32>
	Zi->pData[3] = tempRm_f32[0];
 8001e3c:	6863      	ldr	r3, [r4, #4]
 8001e3e:	9a07      	ldr	r2, [sp, #28]
 8001e40:	60da      	str	r2, [r3, #12]
	Zi->pData[4] = tempRm_f32[1];
 8001e42:	6863      	ldr	r3, [r4, #4]
 8001e44:	9a08      	ldr	r2, [sp, #32]
 8001e46:	611a      	str	r2, [r3, #16]
	Zi->pData[5] = tempRm_f32[2];
 8001e48:	6863      	ldr	r3, [r4, #4]
 8001e4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001e4c:	615a      	str	r2, [r3, #20]
	cross_product(&tempRw, &tempRm, &tempRw);
 8001e4e:	466a      	mov	r2, sp
 8001e50:	a905      	add	r1, sp, #20
 8001e52:	4668      	mov	r0, sp
 8001e54:	f7ff ffc0 	bl	8001dd8 <cross_product>
	Zi->pData[0] = tempRw_f32[0];
 8001e58:	6863      	ldr	r3, [r4, #4]
 8001e5a:	9a02      	ldr	r2, [sp, #8]
 8001e5c:	601a      	str	r2, [r3, #0]
	Zi->pData[1] = tempRw_f32[1];
 8001e5e:	6863      	ldr	r3, [r4, #4]
 8001e60:	9a03      	ldr	r2, [sp, #12]
 8001e62:	605a      	str	r2, [r3, #4]
	Zi->pData[2] = tempRw_f32[2];
 8001e64:	6863      	ldr	r3, [r4, #4]
 8001e66:	9a04      	ldr	r2, [sp, #16]
 8001e68:	609a      	str	r2, [r3, #8]
}
 8001e6a:	b00b      	add	sp, #44	; 0x2c
 8001e6c:	bd30      	pop	{r4, r5, pc}
 8001e6e:	bf00      	nop
 8001e70:	20001670 	.word	0x20001670
 8001e74:	2000249c 	.word	0x2000249c
 8001e78:	20001648 	.word	0x20001648

08001e7c <initRingBuffers>:

void initRingBuffers(SensorData* IMU0_data, SensorData* IMU1_data) {
 8001e7c:	b084      	sub	sp, #16
	float w_avg_tmp[3];
	w_avg_tmp[0] = (IMU0_data->G_X + IMU1_data->G_X) / 2;
 8001e7e:	edd0 6a03 	vldr	s13, [r0, #12]
 8001e82:	edd1 7a03 	vldr	s15, [r1, #12]
 8001e86:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e8a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001e8e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8001e92:	edcd 6a01 	vstr	s13, [sp, #4]
	w_avg_tmp[1] = (IMU0_data->G_Y + IMU1_data->G_Y) / 2;
 8001e96:	ed90 7a04 	vldr	s14, [r0, #16]
 8001e9a:	edd1 7a04 	vldr	s15, [r1, #16]
 8001e9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ea2:	ee27 7a06 	vmul.f32	s14, s14, s12
 8001ea6:	ed8d 7a02 	vstr	s14, [sp, #8]
	w_avg_tmp[2] = (IMU0_data->G_Z + IMU1_data->G_Z) / 2;
 8001eaa:	edd0 7a05 	vldr	s15, [r0, #20]
 8001eae:	edd1 5a05 	vldr	s11, [r1, #20]
 8001eb2:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8001eb6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001eba:	edcd 7a03 	vstr	s15, [sp, #12]

	int i;
	for(i = 0; i < RING_SIZE; ++i) {
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e039      	b.n	8001f36 <initRingBuffers+0xba>
		w_avg_x_ring[i] = w_avg_tmp[0];
 8001ec2:	4a1f      	ldr	r2, [pc, #124]	; (8001f40 <initRingBuffers+0xc4>)
 8001ec4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001ec8:	edc2 6a00 	vstr	s13, [r2]
		w_avg_y_ring[i] = w_avg_tmp[1];
 8001ecc:	4a1d      	ldr	r2, [pc, #116]	; (8001f44 <initRingBuffers+0xc8>)
 8001ece:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001ed2:	ed82 7a00 	vstr	s14, [r2]
		w_avg_z_ring[i] = w_avg_tmp[2];
 8001ed6:	4a1c      	ldr	r2, [pc, #112]	; (8001f48 <initRingBuffers+0xcc>)
 8001ed8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001edc:	edc2 7a00 	vstr	s15, [r2]
		xl0_avg_x_ring[i] = IMU0_data->XL_X;
 8001ee0:	f8d0 c000 	ldr.w	ip, [r0]
 8001ee4:	4a19      	ldr	r2, [pc, #100]	; (8001f4c <initRingBuffers+0xd0>)
 8001ee6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001eea:	f8c2 c000 	str.w	ip, [r2]
		xl0_avg_y_ring[i] = IMU0_data->XL_Y;
 8001eee:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8001ef2:	4a17      	ldr	r2, [pc, #92]	; (8001f50 <initRingBuffers+0xd4>)
 8001ef4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001ef8:	f8c2 c000 	str.w	ip, [r2]
		xl0_avg_z_ring[i] = IMU0_data->XL_Z;
 8001efc:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8001f00:	4a14      	ldr	r2, [pc, #80]	; (8001f54 <initRingBuffers+0xd8>)
 8001f02:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001f06:	f8c2 c000 	str.w	ip, [r2]
		xl1_avg_x_ring[i] = IMU1_data->XL_X;
 8001f0a:	f8d1 c000 	ldr.w	ip, [r1]
 8001f0e:	4a12      	ldr	r2, [pc, #72]	; (8001f58 <initRingBuffers+0xdc>)
 8001f10:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001f14:	f8c2 c000 	str.w	ip, [r2]
		xl1_avg_y_ring[i] = IMU1_data->XL_Y;
 8001f18:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8001f1c:	4a0f      	ldr	r2, [pc, #60]	; (8001f5c <initRingBuffers+0xe0>)
 8001f1e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001f22:	f8c2 c000 	str.w	ip, [r2]
		xl1_avg_z_ring[i] = IMU1_data->XL_Z;
 8001f26:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8001f2a:	4a0d      	ldr	r2, [pc, #52]	; (8001f60 <initRingBuffers+0xe4>)
 8001f2c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001f30:	f8c2 c000 	str.w	ip, [r2]
	for(i = 0; i < RING_SIZE; ++i) {
 8001f34:	3301      	adds	r3, #1
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	ddc3      	ble.n	8001ec2 <initRingBuffers+0x46>
	}
}
 8001f3a:	b004      	add	sp, #16
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	200024b4 	.word	0x200024b4
 8001f44:	200024c8 	.word	0x200024c8
 8001f48:	200024dc 	.word	0x200024dc
 8001f4c:	20002504 	.word	0x20002504
 8001f50:	20002518 	.word	0x20002518
 8001f54:	2000252c 	.word	0x2000252c
 8001f58:	20002540 	.word	0x20002540
 8001f5c:	20002554 	.word	0x20002554
 8001f60:	20002568 	.word	0x20002568
 8001f64:	00000000 	.word	0x00000000

08001f68 <initQuaternion>:

void initQuaternion(SensorData* IMU0_data, SensorData* IMU1_data) {
 8001f68:	b5d0      	push	{r4, r6, r7, lr}
 8001f6a:	ed2d 8b02 	vpush	{d8}
 8001f6e:	b092      	sub	sp, #72	; 0x48
	float avg_XL[3];
	avg_XL[0] = (IMU0_data->XL_X + IMU1_data->XL_X) / 2;
 8001f70:	ed90 7a00 	vldr	s14, [r0]
 8001f74:	edd1 7a00 	vldr	s15, [r1]
 8001f78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f7c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001f80:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001f84:	ed8d 7a0f 	vstr	s14, [sp, #60]	; 0x3c
	avg_XL[1] = (IMU0_data->XL_Y + IMU1_data->XL_Y) / 2;
 8001f88:	ed90 7a01 	vldr	s14, [r0, #4]
 8001f8c:	edd1 7a01 	vldr	s15, [r1, #4]
 8001f90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f94:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001f98:	ed8d 7a10 	vstr	s14, [sp, #64]	; 0x40
	avg_XL[2] = (IMU0_data->XL_Z + IMU1_data->XL_Z) / 2;
 8001f9c:	edd0 7a02 	vldr	s15, [r0, #8]
 8001fa0:	ed91 7a02 	vldr	s14, [r1, #8]
 8001fa4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fa8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fac:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44

	float mag_avg_XL = vec_mag_f32(avg_XL);
 8001fb0:	a80f      	add	r0, sp, #60	; 0x3c
 8001fb2:	f7ff fef3 	bl	8001d9c <vec_mag_f32>

	// Normalize average acceleration vector
	avg_XL[0] /= mag_avg_XL;
 8001fb6:	ed9d 7a0f 	vldr	s14, [sp, #60]	; 0x3c
 8001fba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8001fbe:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
	avg_XL[1] /= mag_avg_XL;
 8001fc2:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
 8001fc6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8001fca:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
	avg_XL[2] /= mag_avg_XL;
 8001fce:	ed9d 7a11 	vldr	s14, [sp, #68]	; 0x44
 8001fd2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8001fd6:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44

	float norm_g[3] = {0,0,1}; // Normalized vector for g_nav
 8001fda:	2300      	movs	r3, #0
 8001fdc:	930c      	str	r3, [sp, #48]	; 0x30
 8001fde:	930d      	str	r3, [sp, #52]	; 0x34
 8001fe0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001fe4:	930e      	str	r3, [sp, #56]	; 0x38

	// q = [1+dot(r, r') cross(r, r') --> From conjugation: r' = q x [0 r] x q*

	float dot_prod = dot_f32(avg_XL, norm_g);
 8001fe6:	a90c      	add	r1, sp, #48	; 0x30
 8001fe8:	a80f      	add	r0, sp, #60	; 0x3c
 8001fea:	f7ff fe8f 	bl	8001d0c <dot_f32>
 8001fee:	ee10 4a10 	vmov	r4, s0
	float cross_prod[3];
	cross_f32(avg_XL, norm_g, cross_prod);
 8001ff2:	aa09      	add	r2, sp, #36	; 0x24
 8001ff4:	a90c      	add	r1, sp, #48	; 0x30
 8001ff6:	a80f      	add	r0, sp, #60	; 0x3c
 8001ff8:	f7ff fe9f 	bl	8001d3a <cross_f32>

	if (dot_prod > 0.999999) {
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	f7fe fa9b 	bl	8000538 <__aeabi_f2d>
 8002002:	4606      	mov	r6, r0
 8002004:	460f      	mov	r7, r1
 8002006:	a339      	add	r3, pc, #228	; (adr r3, 80020ec <initQuaternion+0x184>)
 8002008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200c:	f7fe fd7c 	bl	8000b08 <__aeabi_dcmpgt>
 8002010:	b9f0      	cbnz	r0, 8002050 <initQuaternion+0xe8>
		q_f32[2] = 0;
		q_f32[3] = 0;

		return;

	} else if (dot_prod < -0.999999) {
 8002012:	a338      	add	r3, pc, #224	; (adr r3, 80020f4 <initQuaternion+0x18c>)
 8002014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002018:	4630      	mov	r0, r6
 800201a:	4639      	mov	r1, r7
 800201c:	f7fe fd56 	bl	8000acc <__aeabi_dcmplt>
 8002020:	b9f8      	cbnz	r0, 8002062 <initQuaternion+0xfa>
        q_f32[2] = tempVec[1] / tempVecMag;
        q_f32[3] = tempVec[2] / tempVecMag;
        return;
    }

	q_f32[0] = 1 + dot_prod;
 8002022:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002026:	ee07 4a90 	vmov	s15, r4
 800202a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800202e:	482e      	ldr	r0, [pc, #184]	; (80020e8 <initQuaternion+0x180>)
 8002030:	ed80 0a00 	vstr	s0, [r0]
	q_f32[1] = cross_prod[0];
 8002034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002036:	6043      	str	r3, [r0, #4]
	q_f32[2] = cross_prod[1];
 8002038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800203a:	6083      	str	r3, [r0, #8]
	q_f32[3] = cross_prod[2];
 800203c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800203e:	60c3      	str	r3, [r0, #12]

	arm_quaternion_normalize_f32(q_f32, q_f32, 1); // normalize initial quaternion
 8002040:	2201      	movs	r2, #1
 8002042:	4601      	mov	r1, r0
 8002044:	f002 ffcf 	bl	8004fe6 <arm_quaternion_normalize_f32>

}
 8002048:	b012      	add	sp, #72	; 0x48
 800204a:	ecbd 8b02 	vpop	{d8}
 800204e:	bdd0      	pop	{r4, r6, r7, pc}
		q_f32[0] = 1;
 8002050:	4b25      	ldr	r3, [pc, #148]	; (80020e8 <initQuaternion+0x180>)
 8002052:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002056:	601a      	str	r2, [r3, #0]
		q_f32[1] = 0;
 8002058:	2200      	movs	r2, #0
 800205a:	605a      	str	r2, [r3, #4]
		q_f32[2] = 0;
 800205c:	609a      	str	r2, [r3, #8]
		q_f32[3] = 0;
 800205e:	60da      	str	r2, [r3, #12]
		return;
 8002060:	e7f2      	b.n	8002048 <initQuaternion+0xe0>
		float xUnit[3] = {1,0,0};
 8002062:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002066:	9200      	str	r2, [sp, #0]
 8002068:	2300      	movs	r3, #0
 800206a:	9301      	str	r3, [sp, #4]
 800206c:	9302      	str	r3, [sp, #8]
		float yUnit[3] = {0,1,0};
 800206e:	9303      	str	r3, [sp, #12]
 8002070:	9204      	str	r2, [sp, #16]
 8002072:	9305      	str	r3, [sp, #20]
        cross_f32(xUnit, avg_XL, tempVec);
 8002074:	aa06      	add	r2, sp, #24
 8002076:	a90f      	add	r1, sp, #60	; 0x3c
 8002078:	4668      	mov	r0, sp
 800207a:	f7ff fe5e 	bl	8001d3a <cross_f32>
        float tempVecMag = vec_mag_f32(tempVec);
 800207e:	a806      	add	r0, sp, #24
 8002080:	f7ff fe8c 	bl	8001d9c <vec_mag_f32>
 8002084:	eeb0 8a40 	vmov.f32	s16, s0
        if (tempVecMag < 0.000001) {
 8002088:	ee10 0a10 	vmov	r0, s0
 800208c:	f7fe fa54 	bl	8000538 <__aeabi_f2d>
 8002090:	a313      	add	r3, pc, #76	; (adr r3, 80020e0 <initQuaternion+0x178>)
 8002092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002096:	f7fe fd19 	bl	8000acc <__aeabi_dcmplt>
 800209a:	b9a8      	cbnz	r0, 80020c8 <initQuaternion+0x160>
        q_f32[0] = 0;
 800209c:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <initQuaternion+0x180>)
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
        q_f32[1] = tempVec[0] / tempVecMag;
 80020a2:	ed9d 7a06 	vldr	s14, [sp, #24]
 80020a6:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80020aa:	edc3 7a01 	vstr	s15, [r3, #4]
        q_f32[2] = tempVec[1] / tempVecMag;
 80020ae:	ed9d 7a07 	vldr	s14, [sp, #28]
 80020b2:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80020b6:	edc3 7a02 	vstr	s15, [r3, #8]
        q_f32[3] = tempVec[2] / tempVecMag;
 80020ba:	ed9d 7a08 	vldr	s14, [sp, #32]
 80020be:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80020c2:	edc3 7a03 	vstr	s15, [r3, #12]
        return;
 80020c6:	e7bf      	b.n	8002048 <initQuaternion+0xe0>
            cross_f32(yUnit, avg_XL, tempVec);
 80020c8:	aa06      	add	r2, sp, #24
 80020ca:	a90f      	add	r1, sp, #60	; 0x3c
 80020cc:	a803      	add	r0, sp, #12
 80020ce:	f7ff fe34 	bl	8001d3a <cross_f32>
			tempVecMag = vec_mag_f32(tempVec);
 80020d2:	a806      	add	r0, sp, #24
 80020d4:	f7ff fe62 	bl	8001d9c <vec_mag_f32>
 80020d8:	eeb0 8a40 	vmov.f32	s16, s0
 80020dc:	e7de      	b.n	800209c <initQuaternion+0x134>
 80020de:	bf00      	nop
 80020e0:	a0b5ed8d 	.word	0xa0b5ed8d
 80020e4:	3eb0c6f7 	.word	0x3eb0c6f7
 80020e8:	20000ef8 	.word	0x20000ef8
 80020ec:	e7210be9 	.word	0xe7210be9
 80020f0:	3feffffd 	.word	0x3feffffd
 80020f4:	e7210be9 	.word	0xe7210be9
 80020f8:	bfeffffd 	.word	0xbfeffffd

080020fc <getNextGyroReading>:

void getNextGyroReading(SensorData* IMU0_data, SensorData* IMU1_data, float* gyroOut) {
 80020fc:	b430      	push	{r4, r5}
	w_avg_x_ring[w_oldest] = (IMU0_data->G_X + IMU1_data->G_X) / 2;
 80020fe:	ed90 7a03 	vldr	s14, [r0, #12]
 8002102:	edd1 7a03 	vldr	s15, [r1, #12]
 8002106:	ee37 7a27 	vadd.f32	s14, s14, s15
 800210a:	4d37      	ldr	r5, [pc, #220]	; (80021e8 <getNextGyroReading+0xec>)
 800210c:	782b      	ldrb	r3, [r5, #0]
 800210e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002112:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002116:	4c35      	ldr	r4, [pc, #212]	; (80021ec <getNextGyroReading+0xf0>)
 8002118:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800211c:	ed84 7a00 	vstr	s14, [r4]
	w_avg_y_ring[w_oldest] = (IMU0_data->G_Y + IMU1_data->G_Y) / 2;
 8002120:	ed90 7a04 	vldr	s14, [r0, #16]
 8002124:	edd1 7a04 	vldr	s15, [r1, #16]
 8002128:	ee37 7a27 	vadd.f32	s14, s14, s15
 800212c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002130:	4c2f      	ldr	r4, [pc, #188]	; (80021f0 <getNextGyroReading+0xf4>)
 8002132:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 8002136:	ed8c 7a00 	vstr	s14, [ip]
	w_avg_z_ring[w_oldest] = (IMU0_data->G_Z + IMU1_data->G_Z) / 2;
 800213a:	edd0 7a05 	vldr	s15, [r0, #20]
 800213e:	ed91 7a05 	vldr	s14, [r1, #20]
 8002142:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002146:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800214a:	492a      	ldr	r1, [pc, #168]	; (80021f4 <getNextGyroReading+0xf8>)
 800214c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8002150:	edc1 7a00 	vstr	s15, [r1]

	w_oldest = (w_oldest + 1) % RING_SIZE;
 8002154:	1c59      	adds	r1, r3, #1
 8002156:	4b28      	ldr	r3, [pc, #160]	; (80021f8 <getNextGyroReading+0xfc>)
 8002158:	fb83 0301 	smull	r0, r3, r3, r1
 800215c:	105b      	asrs	r3, r3, #1
 800215e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002162:	1acb      	subs	r3, r1, r3
 8002164:	702b      	strb	r3, [r5, #0]

	gyroOut[0] = 0;
 8002166:	2300      	movs	r3, #0
 8002168:	6013      	str	r3, [r2, #0]
	gyroOut[1] = 0;
 800216a:	6053      	str	r3, [r2, #4]
	gyroOut[2] = 0;
 800216c:	6093      	str	r3, [r2, #8]

	int i;
	for(i = 0; i < RING_SIZE; ++i) {
 800216e:	2300      	movs	r3, #0
 8002170:	e021      	b.n	80021b6 <getNextGyroReading+0xba>
		gyroOut[0] += w_avg_x_ring[i];
 8002172:	491e      	ldr	r1, [pc, #120]	; (80021ec <getNextGyroReading+0xf0>)
 8002174:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8002178:	ed91 7a00 	vldr	s14, [r1]
 800217c:	edd2 7a00 	vldr	s15, [r2]
 8002180:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002184:	edc2 7a00 	vstr	s15, [r2]
		gyroOut[1] += w_avg_y_ring[i];
 8002188:	4919      	ldr	r1, [pc, #100]	; (80021f0 <getNextGyroReading+0xf4>)
 800218a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800218e:	ed91 7a00 	vldr	s14, [r1]
 8002192:	edd2 7a01 	vldr	s15, [r2, #4]
 8002196:	ee77 7a87 	vadd.f32	s15, s15, s14
 800219a:	edc2 7a01 	vstr	s15, [r2, #4]
		gyroOut[2] += w_avg_z_ring[i];
 800219e:	4915      	ldr	r1, [pc, #84]	; (80021f4 <getNextGyroReading+0xf8>)
 80021a0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80021a4:	ed91 7a00 	vldr	s14, [r1]
 80021a8:	edd2 7a02 	vldr	s15, [r2, #8]
 80021ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80021b0:	edc2 7a02 	vstr	s15, [r2, #8]
	for(i = 0; i < RING_SIZE; ++i) {
 80021b4:	3301      	adds	r3, #1
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	dddb      	ble.n	8002172 <getNextGyroReading+0x76>
	}

	gyroOut[0] /= RING_SIZE;
 80021ba:	edd2 6a00 	vldr	s13, [r2]
 80021be:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 80021c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021c6:	ed82 7a00 	vstr	s14, [r2]
	gyroOut[1] /= RING_SIZE;
 80021ca:	edd2 6a01 	vldr	s13, [r2, #4]
 80021ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021d2:	ed82 7a01 	vstr	s14, [r2, #4]
	gyroOut[2] /= RING_SIZE;
 80021d6:	edd2 6a02 	vldr	s13, [r2, #8]
 80021da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021de:	ed82 7a02 	vstr	s14, [r2, #8]
}
 80021e2:	bc30      	pop	{r4, r5}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	200024f0 	.word	0x200024f0
 80021ec:	200024b4 	.word	0x200024b4
 80021f0:	200024c8 	.word	0x200024c8
 80021f4:	200024dc 	.word	0x200024dc
 80021f8:	66666667 	.word	0x66666667

080021fc <calculateAvgAngularRate>:
		SensorData* IMU1_data) {
 80021fc:	b510      	push	{r4, lr}
	getNextGyroReading(IMU0_data, IMU1_data, w_avg_b0_f32);
 80021fe:	4c05      	ldr	r4, [pc, #20]	; (8002214 <calculateAvgAngularRate+0x18>)
 8002200:	4622      	mov	r2, r4
 8002202:	f7ff ff7b 	bl	80020fc <getNextGyroReading>
	w_avg_b0_mag = vec_mag_f32(w_avg_b0_f32);
 8002206:	4620      	mov	r0, r4
 8002208:	f7ff fdc8 	bl	8001d9c <vec_mag_f32>
 800220c:	4b02      	ldr	r3, [pc, #8]	; (8002218 <calculateAvgAngularRate+0x1c>)
 800220e:	ed83 0a00 	vstr	s0, [r3]
}
 8002212:	bd10      	pop	{r4, pc}
 8002214:	200024a4 	.word	0x200024a4
 8002218:	200024b0 	.word	0x200024b0

0800221c <getNextXLReading>:

void getNextXLReading(SensorData* IMU0_data, SensorData* IMU1_data, float* xl0Out, float* xl1Out) {
 800221c:	b530      	push	{r4, r5, lr}
	xl0_avg_x_ring[xl_oldest] = IMU0_data->XL_X;
 800221e:	4c52      	ldr	r4, [pc, #328]	; (8002368 <getNextXLReading+0x14c>)
 8002220:	f894 c000 	ldrb.w	ip, [r4]
 8002224:	f8d0 e000 	ldr.w	lr, [r0]
 8002228:	4d50      	ldr	r5, [pc, #320]	; (800236c <getNextXLReading+0x150>)
 800222a:	eb05 058c 	add.w	r5, r5, ip, lsl #2
 800222e:	f8c5 e000 	str.w	lr, [r5]
	xl0_avg_y_ring[xl_oldest] = IMU0_data->XL_Y;
 8002232:	edd0 7a01 	vldr	s15, [r0, #4]
 8002236:	4d4e      	ldr	r5, [pc, #312]	; (8002370 <getNextXLReading+0x154>)
 8002238:	eb05 0e8c 	add.w	lr, r5, ip, lsl #2
 800223c:	edce 7a00 	vstr	s15, [lr]
	xl0_avg_z_ring[xl_oldest] = IMU0_data->XL_Z;
 8002240:	6885      	ldr	r5, [r0, #8]
 8002242:	484c      	ldr	r0, [pc, #304]	; (8002374 <getNextXLReading+0x158>)
 8002244:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8002248:	6005      	str	r5, [r0, #0]
	xl1_avg_x_ring[xl_oldest] = IMU1_data->XL_X;
 800224a:	680d      	ldr	r5, [r1, #0]
 800224c:	484a      	ldr	r0, [pc, #296]	; (8002378 <getNextXLReading+0x15c>)
 800224e:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8002252:	6005      	str	r5, [r0, #0]
	xl1_avg_y_ring[xl_oldest] = IMU1_data->XL_Y;
 8002254:	684d      	ldr	r5, [r1, #4]
 8002256:	4849      	ldr	r0, [pc, #292]	; (800237c <getNextXLReading+0x160>)
 8002258:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 800225c:	6005      	str	r5, [r0, #0]
	xl1_avg_z_ring[xl_oldest] = IMU1_data->XL_Z;
 800225e:	6888      	ldr	r0, [r1, #8]
 8002260:	4947      	ldr	r1, [pc, #284]	; (8002380 <getNextXLReading+0x164>)
 8002262:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 8002266:	6008      	str	r0, [r1, #0]

	xl_oldest = (xl_oldest + 1) % RING_SIZE;
 8002268:	f10c 0c01 	add.w	ip, ip, #1
 800226c:	4945      	ldr	r1, [pc, #276]	; (8002384 <getNextXLReading+0x168>)
 800226e:	fb81 010c 	smull	r0, r1, r1, ip
 8002272:	1049      	asrs	r1, r1, #1
 8002274:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002278:	ebac 0101 	sub.w	r1, ip, r1
 800227c:	7021      	strb	r1, [r4, #0]

	xl0Out[0] = 0;
 800227e:	2100      	movs	r1, #0
 8002280:	6011      	str	r1, [r2, #0]
	xl0Out[1] = 0;
 8002282:	6051      	str	r1, [r2, #4]
	xl0Out[2] = 0;
 8002284:	6091      	str	r1, [r2, #8]
	xl1Out[0] = 0;
 8002286:	6019      	str	r1, [r3, #0]
	xl1Out[1] = 0;
 8002288:	6059      	str	r1, [r3, #4]
	xl1Out[2] = 0;
 800228a:	6099      	str	r1, [r3, #8]

	int i;
	for(i = 0; i < RING_SIZE; ++i) {
 800228c:	2100      	movs	r1, #0
 800228e:	e042      	b.n	8002316 <getNextXLReading+0xfa>
		xl0Out[0] += xl0_avg_x_ring[i];
 8002290:	4836      	ldr	r0, [pc, #216]	; (800236c <getNextXLReading+0x150>)
 8002292:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8002296:	ed90 7a00 	vldr	s14, [r0]
 800229a:	edd2 7a00 	vldr	s15, [r2]
 800229e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022a2:	edc2 7a00 	vstr	s15, [r2]
		xl0Out[1] += xl0_avg_y_ring[i];
 80022a6:	4832      	ldr	r0, [pc, #200]	; (8002370 <getNextXLReading+0x154>)
 80022a8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80022ac:	ed90 7a00 	vldr	s14, [r0]
 80022b0:	edd2 7a01 	vldr	s15, [r2, #4]
 80022b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022b8:	edc2 7a01 	vstr	s15, [r2, #4]
		xl0Out[2] += xl0_avg_z_ring[i];
 80022bc:	482d      	ldr	r0, [pc, #180]	; (8002374 <getNextXLReading+0x158>)
 80022be:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80022c2:	ed90 7a00 	vldr	s14, [r0]
 80022c6:	edd2 7a02 	vldr	s15, [r2, #8]
 80022ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022ce:	edc2 7a02 	vstr	s15, [r2, #8]
		xl1Out[0] += xl1_avg_x_ring[i];
 80022d2:	4829      	ldr	r0, [pc, #164]	; (8002378 <getNextXLReading+0x15c>)
 80022d4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80022d8:	ed90 7a00 	vldr	s14, [r0]
 80022dc:	edd3 7a00 	vldr	s15, [r3]
 80022e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022e4:	edc3 7a00 	vstr	s15, [r3]
		xl1Out[1] += xl1_avg_y_ring[i];
 80022e8:	4824      	ldr	r0, [pc, #144]	; (800237c <getNextXLReading+0x160>)
 80022ea:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80022ee:	ed90 7a00 	vldr	s14, [r0]
 80022f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80022f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022fa:	edc3 7a01 	vstr	s15, [r3, #4]
		xl1Out[2] += xl1_avg_z_ring[i];
 80022fe:	4820      	ldr	r0, [pc, #128]	; (8002380 <getNextXLReading+0x164>)
 8002300:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8002304:	ed90 7a00 	vldr	s14, [r0]
 8002308:	edd3 7a02 	vldr	s15, [r3, #8]
 800230c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002310:	edc3 7a02 	vstr	s15, [r3, #8]
	for(i = 0; i < RING_SIZE; ++i) {
 8002314:	3101      	adds	r1, #1
 8002316:	2904      	cmp	r1, #4
 8002318:	ddba      	ble.n	8002290 <getNextXLReading+0x74>
	}

	xl0Out[0] /= RING_SIZE;
 800231a:	edd2 6a00 	vldr	s13, [r2]
 800231e:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8002322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002326:	ed82 7a00 	vstr	s14, [r2]
	xl0Out[1] /= RING_SIZE;
 800232a:	edd2 6a01 	vldr	s13, [r2, #4]
 800232e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002332:	ed82 7a01 	vstr	s14, [r2, #4]
	xl0Out[2] /= RING_SIZE;
 8002336:	edd2 6a02 	vldr	s13, [r2, #8]
 800233a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800233e:	ed82 7a02 	vstr	s14, [r2, #8]
	xl1Out[0] /= RING_SIZE;
 8002342:	edd3 6a00 	vldr	s13, [r3]
 8002346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800234a:	ed83 7a00 	vstr	s14, [r3]
	xl1Out[1] /= RING_SIZE;
 800234e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002356:	ed83 7a01 	vstr	s14, [r3, #4]
	xl1Out[2] /= RING_SIZE;
 800235a:	edd3 6a02 	vldr	s13, [r3, #8]
 800235e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002362:	ed83 7a02 	vstr	s14, [r3, #8]
}
 8002366:	bd30      	pop	{r4, r5, pc}
 8002368:	20002594 	.word	0x20002594
 800236c:	20002504 	.word	0x20002504
 8002370:	20002518 	.word	0x20002518
 8002374:	2000252c 	.word	0x2000252c
 8002378:	20002540 	.word	0x20002540
 800237c:	20002554 	.word	0x20002554
 8002380:	20002568 	.word	0x20002568
 8002384:	66666667 	.word	0x66666667

08002388 <updateUVector>:
		SensorData* IMU1_data) {
 8002388:	b530      	push	{r4, r5, lr}
 800238a:	b095      	sub	sp, #84	; 0x54
	getNextXLReading(IMU0_data, IMU1_data, xl_b0_f32, xl_b1_f32);
 800238c:	4c2a      	ldr	r4, [pc, #168]	; (8002438 <updateUVector+0xb0>)
 800238e:	4d2b      	ldr	r5, [pc, #172]	; (800243c <updateUVector+0xb4>)
 8002390:	4623      	mov	r3, r4
 8002392:	462a      	mov	r2, r5
 8002394:	f7ff ff42 	bl	800221c <getNextXLReading>
	float temp0_f32[3] = {xl_b0_f32[0], xl_b0_f32[1], xl_b0_f32[2]}; // Init with IMU0 acceleration
 8002398:	682b      	ldr	r3, [r5, #0]
 800239a:	9311      	str	r3, [sp, #68]	; 0x44
 800239c:	686b      	ldr	r3, [r5, #4]
 800239e:	9312      	str	r3, [sp, #72]	; 0x48
 80023a0:	68ab      	ldr	r3, [r5, #8]
 80023a2:	9313      	str	r3, [sp, #76]	; 0x4c
	arm_mat_init_f32(&temp0, 3, 1, temp0_f32); // temp for IMU0 vector
 80023a4:	ab11      	add	r3, sp, #68	; 0x44
 80023a6:	2201      	movs	r2, #1
 80023a8:	2103      	movs	r1, #3
 80023aa:	a80f      	add	r0, sp, #60	; 0x3c
 80023ac:	f002 fc31 	bl	8004c12 <arm_mat_init_f32>
	float temp1_f32[3] = {xl_b1_f32[0], xl_b1_f32[1], xl_b1_f32[2]}; // Init with IMU1 acceleration
 80023b0:	6823      	ldr	r3, [r4, #0]
 80023b2:	930c      	str	r3, [sp, #48]	; 0x30
 80023b4:	6863      	ldr	r3, [r4, #4]
 80023b6:	930d      	str	r3, [sp, #52]	; 0x34
 80023b8:	68a3      	ldr	r3, [r4, #8]
 80023ba:	930e      	str	r3, [sp, #56]	; 0x38
	arm_mat_init_f32(&temp1, 3, 1, temp1_f32); // temp for IMU1 vector
 80023bc:	ab0c      	add	r3, sp, #48	; 0x30
 80023be:	2201      	movs	r2, #1
 80023c0:	2103      	movs	r1, #3
 80023c2:	a80a      	add	r0, sp, #40	; 0x28
 80023c4:	f002 fc25 	bl	8004c12 <arm_mat_init_f32>
	float temp2_f32[3] = {0,0,0};
 80023c8:	2400      	movs	r4, #0
 80023ca:	9407      	str	r4, [sp, #28]
 80023cc:	9408      	str	r4, [sp, #32]
 80023ce:	9409      	str	r4, [sp, #36]	; 0x24
	arm_mat_init_f32(&temp2, 3, 1, temp2_f32); // temp for rotated IMU0 vector
 80023d0:	ab07      	add	r3, sp, #28
 80023d2:	2201      	movs	r2, #1
 80023d4:	2103      	movs	r1, #3
 80023d6:	a805      	add	r0, sp, #20
 80023d8:	f002 fc1b 	bl	8004c12 <arm_mat_init_f32>
	float temp3_f32[3] = {0,0,0};
 80023dc:	9402      	str	r4, [sp, #8]
 80023de:	9403      	str	r4, [sp, #12]
 80023e0:	9404      	str	r4, [sp, #16]
	arm_mat_init_f32(&temp3, 3, 1, temp3_f32); // temp for rotated IMU1 vector
 80023e2:	ab02      	add	r3, sp, #8
 80023e4:	2201      	movs	r2, #1
 80023e6:	2103      	movs	r1, #3
 80023e8:	4668      	mov	r0, sp
 80023ea:	f002 fc12 	bl	8004c12 <arm_mat_init_f32>
	arm_mat_mult_f32(&rotation_b0_n, &temp0, &temp2);	// R_b0_n*a0_b0 --> (3x3) * (3x1)
 80023ee:	4c14      	ldr	r4, [pc, #80]	; (8002440 <updateUVector+0xb8>)
 80023f0:	aa05      	add	r2, sp, #20
 80023f2:	a90f      	add	r1, sp, #60	; 0x3c
 80023f4:	4620      	mov	r0, r4
 80023f6:	f002 fd07 	bl	8004e08 <arm_mat_mult_f32>
	arm_mat_mult_f32(&rotation_b0_n, &temp1, &temp3);	// R_b0_n*a1_b0 --> (3x3) * (3x1)
 80023fa:	466a      	mov	r2, sp
 80023fc:	a90a      	add	r1, sp, #40	; 0x28
 80023fe:	4620      	mov	r0, r4
 8002400:	f002 fd02 	bl	8004e08 <arm_mat_mult_f32>
	arm_mat_sub_f32(&temp2, &g_n, &temp0);
 8002404:	4c0f      	ldr	r4, [pc, #60]	; (8002444 <updateUVector+0xbc>)
 8002406:	aa0f      	add	r2, sp, #60	; 0x3c
 8002408:	4621      	mov	r1, r4
 800240a:	a805      	add	r0, sp, #20
 800240c:	f002 fd36 	bl	8004e7c <arm_mat_sub_f32>
	arm_mat_sub_f32(&temp3, &g_n, &temp1);
 8002410:	aa0a      	add	r2, sp, #40	; 0x28
 8002412:	4621      	mov	r1, r4
 8002414:	4668      	mov	r0, sp
 8002416:	f002 fd31 	bl	8004e7c <arm_mat_sub_f32>
	u_curr_f32[0] = temp0_f32[0];
 800241a:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <updateUVector+0xc0>)
 800241c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800241e:	601a      	str	r2, [r3, #0]
	u_curr_f32[1] = temp0_f32[1];
 8002420:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002422:	605a      	str	r2, [r3, #4]
	u_curr_f32[2] = temp0_f32[2];
 8002424:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8002426:	609a      	str	r2, [r3, #8]
	u_curr_f32[3] = temp1_f32[0];
 8002428:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800242a:	60da      	str	r2, [r3, #12]
	u_curr_f32[4] = temp1_f32[1];
 800242c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800242e:	611a      	str	r2, [r3, #16]
	u_curr_f32[5] = temp1_f32[2];
 8002430:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002432:	615a      	str	r2, [r3, #20]
}
 8002434:	b015      	add	sp, #84	; 0x54
 8002436:	bd30      	pop	{r4, r5, pc}
 8002438:	20002588 	.word	0x20002588
 800243c:	2000257c 	.word	0x2000257c
 8002440:	20001670 	.word	0x20001670
 8002444:	20001634 	.word	0x20001634
 8002448:	20002484 	.word	0x20002484

0800244c <createZUPTNode>:
	}

	return curr_phase;
}

ZUPTNode* createZUPTNode(float w_mag) {
 800244c:	b508      	push	{r3, lr}
 800244e:	ed2d 8b02 	vpush	{d8}
 8002452:	eeb0 8a40 	vmov.f32	s16, s0
	ZUPTNode* node = (ZUPTNode*)malloc(sizeof(ZUPTNode));
 8002456:	2008      	movs	r0, #8
 8002458:	f002 fef8 	bl	800524c <malloc>

	node->next = NULL;
 800245c:	2200      	movs	r2, #0
 800245e:	6002      	str	r2, [r0, #0]
	node->w_mag_sq = w_mag * w_mag;
 8002460:	ee28 8a08 	vmul.f32	s16, s16, s16
 8002464:	ed80 8a01 	vstr	s16, [r0, #4]

	return node;
}
 8002468:	ecbd 8b02 	vpop	{d8}
 800246c:	bd08      	pop	{r3, pc}
	...

08002470 <initZUPT>:
void initZUPT(void) {
 8002470:	b538      	push	{r3, r4, r5, lr}
	ZUPTHead = (ZUPTNode*)createZUPTNode(0.0);
 8002472:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8002498 <initZUPT+0x28>
 8002476:	f7ff ffe9 	bl	800244c <createZUPTNode>
 800247a:	4605      	mov	r5, r0
 800247c:	4b07      	ldr	r3, [pc, #28]	; (800249c <initZUPT+0x2c>)
 800247e:	6018      	str	r0, [r3, #0]
	for(i = 0; i < ZUPT_W-1; ++i) {
 8002480:	2400      	movs	r4, #0
 8002482:	e006      	b.n	8002492 <initZUPT+0x22>
		tempNode->next = (ZUPTNode*)createZUPTNode(0.0);
 8002484:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8002498 <initZUPT+0x28>
 8002488:	f7ff ffe0 	bl	800244c <createZUPTNode>
 800248c:	6028      	str	r0, [r5, #0]
	for(i = 0; i < ZUPT_W-1; ++i) {
 800248e:	3401      	adds	r4, #1
		tempNode = (ZUPTNode*)tempNode->next;
 8002490:	4605      	mov	r5, r0
	for(i = 0; i < ZUPT_W-1; ++i) {
 8002492:	2c12      	cmp	r4, #18
 8002494:	ddf6      	ble.n	8002484 <initZUPT+0x14>
}
 8002496:	bd38      	pop	{r3, r4, r5, pc}
 8002498:	00000000 	.word	0x00000000
 800249c:	200015c8 	.word	0x200015c8

080024a0 <init_processing>:
void init_processing(SensorData* IMU0_data, SensorData* IMU1_data) {
 80024a0:	b538      	push	{r3, r4, r5, lr}
 80024a2:	4604      	mov	r4, r0
 80024a4:	460d      	mov	r5, r1
	arm_mat_init_f32(&m_b0, numRows, numCols, m_b0_f32);
 80024a6:	4b44      	ldr	r3, [pc, #272]	; (80025b8 <init_processing+0x118>)
 80024a8:	2201      	movs	r2, #1
 80024aa:	2103      	movs	r1, #3
 80024ac:	4843      	ldr	r0, [pc, #268]	; (80025bc <init_processing+0x11c>)
 80024ae:	f002 fbb0 	bl	8004c12 <arm_mat_init_f32>
	arm_mat_init_f32(&g_n, numRows, numCols, g_n_f32);
 80024b2:	4b43      	ldr	r3, [pc, #268]	; (80025c0 <init_processing+0x120>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	2103      	movs	r1, #3
 80024b8:	4842      	ldr	r0, [pc, #264]	; (80025c4 <init_processing+0x124>)
 80024ba:	f002 fbaa 	bl	8004c12 <arm_mat_init_f32>
	arm_mat_init_f32(&w_avg_b0, numRows, numCols, w_avg_b0_f32);
 80024be:	4b42      	ldr	r3, [pc, #264]	; (80025c8 <init_processing+0x128>)
 80024c0:	2201      	movs	r2, #1
 80024c2:	2103      	movs	r1, #3
 80024c4:	4841      	ldr	r0, [pc, #260]	; (80025cc <init_processing+0x12c>)
 80024c6:	f002 fba4 	bl	8004c12 <arm_mat_init_f32>
	arm_mat_init_f32(&rotation_b0_n, numRows, numCols, rotation_b0_n_f32);
 80024ca:	4b41      	ldr	r3, [pc, #260]	; (80025d0 <init_processing+0x130>)
 80024cc:	2203      	movs	r2, #3
 80024ce:	4611      	mov	r1, r2
 80024d0:	4840      	ldr	r0, [pc, #256]	; (80025d4 <init_processing+0x134>)
 80024d2:	f002 fb9e 	bl	8004c12 <arm_mat_init_f32>
	arm_mat_init_f32(&x_prev, numRows, numCols, x_prev_f32);
 80024d6:	4b40      	ldr	r3, [pc, #256]	; (80025d8 <init_processing+0x138>)
 80024d8:	2201      	movs	r2, #1
 80024da:	210c      	movs	r1, #12
 80024dc:	483f      	ldr	r0, [pc, #252]	; (80025dc <init_processing+0x13c>)
 80024de:	f002 fb98 	bl	8004c12 <arm_mat_init_f32>
	arm_mat_init_f32(&x_curr, numRows, numCols, x_curr_f32);
 80024e2:	4b3f      	ldr	r3, [pc, #252]	; (80025e0 <init_processing+0x140>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	210c      	movs	r1, #12
 80024e8:	483e      	ldr	r0, [pc, #248]	; (80025e4 <init_processing+0x144>)
 80024ea:	f002 fb92 	bl	8004c12 <arm_mat_init_f32>
	arm_mat_init_f32(&F_matrix, numRows, numCols, F_matrix_f32);
 80024ee:	4b3e      	ldr	r3, [pc, #248]	; (80025e8 <init_processing+0x148>)
 80024f0:	220c      	movs	r2, #12
 80024f2:	4611      	mov	r1, r2
 80024f4:	483d      	ldr	r0, [pc, #244]	; (80025ec <init_processing+0x14c>)
 80024f6:	f002 fb8c 	bl	8004c12 <arm_mat_init_f32>
	arm_mat_init_f32(&B_matrix, numRows, numCols, B_matrix_f32);
 80024fa:	4b3d      	ldr	r3, [pc, #244]	; (80025f0 <init_processing+0x150>)
 80024fc:	2206      	movs	r2, #6
 80024fe:	210c      	movs	r1, #12
 8002500:	483c      	ldr	r0, [pc, #240]	; (80025f4 <init_processing+0x154>)
 8002502:	f002 fb86 	bl	8004c12 <arm_mat_init_f32>
	arm_mat_init_f32(&u_curr, numRows, numCols, u_curr_f32);
 8002506:	4b3c      	ldr	r3, [pc, #240]	; (80025f8 <init_processing+0x158>)
 8002508:	2201      	movs	r2, #1
 800250a:	2106      	movs	r1, #6
 800250c:	483b      	ldr	r0, [pc, #236]	; (80025fc <init_processing+0x15c>)
 800250e:	f002 fb80 	bl	8004c12 <arm_mat_init_f32>
	arm_mat_init_f32(&H_swing, numRows, numCols, H_swing_f32);
 8002512:	4b3b      	ldr	r3, [pc, #236]	; (8002600 <init_processing+0x160>)
 8002514:	220c      	movs	r2, #12
 8002516:	2106      	movs	r1, #6
 8002518:	483a      	ldr	r0, [pc, #232]	; (8002604 <init_processing+0x164>)
 800251a:	f002 fb7a 	bl	8004c12 <arm_mat_init_f32>
	arm_mat_init_f32(&H_stance, numRows, numCols, H_stance_f32);
 800251e:	4b3a      	ldr	r3, [pc, #232]	; (8002608 <init_processing+0x168>)
 8002520:	220c      	movs	r2, #12
 8002522:	4611      	mov	r1, r2
 8002524:	4839      	ldr	r0, [pc, #228]	; (800260c <init_processing+0x16c>)
 8002526:	f002 fb74 	bl	8004c12 <arm_mat_init_f32>
	arm_mat_init_f32(&Z_swing, numRows, numCols, Z_swing_f32);
 800252a:	4b39      	ldr	r3, [pc, #228]	; (8002610 <init_processing+0x170>)
 800252c:	2201      	movs	r2, #1
 800252e:	2106      	movs	r1, #6
 8002530:	4838      	ldr	r0, [pc, #224]	; (8002614 <init_processing+0x174>)
 8002532:	f002 fb6e 	bl	8004c12 <arm_mat_init_f32>
	arm_mat_init_f32(&Z_stance, numRows, numCols, Z_stance_f32);
 8002536:	4b38      	ldr	r3, [pc, #224]	; (8002618 <init_processing+0x178>)
 8002538:	2201      	movs	r2, #1
 800253a:	210c      	movs	r1, #12
 800253c:	4837      	ldr	r0, [pc, #220]	; (800261c <init_processing+0x17c>)
 800253e:	f002 fb68 	bl	8004c12 <arm_mat_init_f32>
	arm_mat_init_f32(&K_swing, numRows, numCols, K_swing_f32);
 8002542:	4b37      	ldr	r3, [pc, #220]	; (8002620 <init_processing+0x180>)
 8002544:	2206      	movs	r2, #6
 8002546:	210c      	movs	r1, #12
 8002548:	4836      	ldr	r0, [pc, #216]	; (8002624 <init_processing+0x184>)
 800254a:	f002 fb62 	bl	8004c12 <arm_mat_init_f32>
	arm_mat_init_f32(&K_stance, numRows, numCols, K_stance_f32);
 800254e:	4b36      	ldr	r3, [pc, #216]	; (8002628 <init_processing+0x188>)
 8002550:	220c      	movs	r2, #12
 8002552:	4611      	mov	r1, r2
 8002554:	4835      	ldr	r0, [pc, #212]	; (800262c <init_processing+0x18c>)
 8002556:	f002 fb5c 	bl	8004c12 <arm_mat_init_f32>
	arm_mat_init_f32(&R_swing, numRows, numCols, R_swing_f32);
 800255a:	4b35      	ldr	r3, [pc, #212]	; (8002630 <init_processing+0x190>)
 800255c:	2206      	movs	r2, #6
 800255e:	4611      	mov	r1, r2
 8002560:	4834      	ldr	r0, [pc, #208]	; (8002634 <init_processing+0x194>)
 8002562:	f002 fb56 	bl	8004c12 <arm_mat_init_f32>
	arm_mat_init_f32(&R_stance, numRows, numCols, R_stance_f32);
 8002566:	4b34      	ldr	r3, [pc, #208]	; (8002638 <init_processing+0x198>)
 8002568:	220c      	movs	r2, #12
 800256a:	4611      	mov	r1, r2
 800256c:	4833      	ldr	r0, [pc, #204]	; (800263c <init_processing+0x19c>)
 800256e:	f002 fb50 	bl	8004c12 <arm_mat_init_f32>
	arm_mat_init_f32(&P_prev, numRows, numCols, P_prev_f32);
 8002572:	4b33      	ldr	r3, [pc, #204]	; (8002640 <init_processing+0x1a0>)
 8002574:	220c      	movs	r2, #12
 8002576:	4611      	mov	r1, r2
 8002578:	4832      	ldr	r0, [pc, #200]	; (8002644 <init_processing+0x1a4>)
 800257a:	f002 fb4a 	bl	8004c12 <arm_mat_init_f32>
	arm_mat_init_f32(&P_curr, numRows, numCols, P_curr_f32);
 800257e:	4b32      	ldr	r3, [pc, #200]	; (8002648 <init_processing+0x1a8>)
 8002580:	220c      	movs	r2, #12
 8002582:	4611      	mov	r1, r2
 8002584:	4831      	ldr	r0, [pc, #196]	; (800264c <init_processing+0x1ac>)
 8002586:	f002 fb44 	bl	8004c12 <arm_mat_init_f32>
	arm_mat_init_f32(&P_minus, numRows, numCols, P_minus_f32);
 800258a:	4b31      	ldr	r3, [pc, #196]	; (8002650 <init_processing+0x1b0>)
 800258c:	220c      	movs	r2, #12
 800258e:	4611      	mov	r1, r2
 8002590:	4830      	ldr	r0, [pc, #192]	; (8002654 <init_processing+0x1b4>)
 8002592:	f002 fb3e 	bl	8004c12 <arm_mat_init_f32>
	arm_mat_init_f32(&Q_prev, numRows, numCols, Q_prev_f32);
 8002596:	4b30      	ldr	r3, [pc, #192]	; (8002658 <init_processing+0x1b8>)
 8002598:	220c      	movs	r2, #12
 800259a:	4611      	mov	r1, r2
 800259c:	482f      	ldr	r0, [pc, #188]	; (800265c <init_processing+0x1bc>)
 800259e:	f002 fb38 	bl	8004c12 <arm_mat_init_f32>
	initZUPT(); // Initialize ZUPT phase detector
 80025a2:	f7ff ff65 	bl	8002470 <initZUPT>
	initRingBuffers(IMU0_data, IMU1_data);
 80025a6:	4629      	mov	r1, r5
 80025a8:	4620      	mov	r0, r4
 80025aa:	f7ff fc67 	bl	8001e7c <initRingBuffers>
	initQuaternion(IMU0_data, IMU1_data);
 80025ae:	4629      	mov	r1, r5
 80025b0:	4620      	mov	r0, r4
 80025b2:	f7ff fcd9 	bl	8001f68 <initQuaternion>
}
 80025b6:	bd38      	pop	{r3, r4, r5, pc}
 80025b8:	08007c64 	.word	0x08007c64
 80025bc:	20001648 	.word	0x20001648
 80025c0:	08007c58 	.word	0x08007c58
 80025c4:	20001634 	.word	0x20001634
 80025c8:	200024a4 	.word	0x200024a4
 80025cc:	2000249c 	.word	0x2000249c
 80025d0:	20001678 	.word	0x20001678
 80025d4:	20001670 	.word	0x20001670
 80025d8:	20000f38 	.word	0x20000f38
 80025dc:	200024fc 	.word	0x200024fc
 80025e0:	20000f08 	.word	0x20000f08
 80025e4:	200024f4 	.word	0x200024f4
 80025e8:	20000174 	.word	0x20000174
 80025ec:	20001210 	.word	0x20001210
 80025f0:	20000054 	.word	0x20000054
 80025f4:	20001208 	.word	0x20001208
 80025f8:	20002484 	.word	0x20002484
 80025fc:	2000247c 	.word	0x2000247c
 8002600:	08007858 	.word	0x08007858
 8002604:	20001220 	.word	0x20001220
 8002608:	08007618 	.word	0x08007618
 800260c:	20001218 	.word	0x20001218
 8002610:	2000160c 	.word	0x2000160c
 8002614:	20001604 	.word	0x20001604
 8002618:	200015d4 	.word	0x200015d4
 800261c:	200015cc 	.word	0x200015cc
 8002620:	20001478 	.word	0x20001478
 8002624:	20001470 	.word	0x20001470
 8002628:	20001230 	.word	0x20001230
 800262c:	20001228 	.word	0x20001228
 8002630:	08007bb8 	.word	0x08007bb8
 8002634:	200015c0 	.word	0x200015c0
 8002638:	08007978 	.word	0x08007978
 800263c:	200015b8 	.word	0x200015b8
 8002640:	20000a74 	.word	0x20000a74
 8002644:	200015a8 	.word	0x200015a8
 8002648:	200003b4 	.word	0x200003b4
 800264c:	20001598 	.word	0x20001598
 8002650:	20000834 	.word	0x20000834
 8002654:	200015a0 	.word	0x200015a0
 8002658:	20000cb4 	.word	0x20000cb4
 800265c:	200015b0 	.word	0x200015b0

08002660 <detectZUPTPhase>:
enum PHASE detectZUPTPhase(void) {
 8002660:	b510      	push	{r4, lr}
 8002662:	ed2d 8b02 	vpush	{d8}
	assert(ZUPTHead != NULL);
 8002666:	4b40      	ldr	r3, [pc, #256]	; (8002768 <detectZUPTPhase+0x108>)
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	b140      	cbz	r0, 800267e <detectZUPTPhase+0x1e>
	ZUPTNode* tempNode = (ZUPTNode*)ZUPTHead->next;
 800266c:	6804      	ldr	r4, [r0, #0]
	free(ZUPTHead);
 800266e:	f002 fdf5 	bl	800525c <free>
	ZUPTHead = tempNode;
 8002672:	4b3d      	ldr	r3, [pc, #244]	; (8002768 <detectZUPTPhase+0x108>)
 8002674:	601c      	str	r4, [r3, #0]
	for(i = 0; i < ZUPT_W-2; ++i) {
 8002676:	2300      	movs	r3, #0
	float sum = 0;
 8002678:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800276c <detectZUPTPhase+0x10c>
	for(i = 0; i < ZUPT_W-2; ++i) {
 800267c:	e00c      	b.n	8002698 <detectZUPTPhase+0x38>
	assert(ZUPTHead != NULL);
 800267e:	4b3c      	ldr	r3, [pc, #240]	; (8002770 <detectZUPTPhase+0x110>)
 8002680:	4a3c      	ldr	r2, [pc, #240]	; (8002774 <detectZUPTPhase+0x114>)
 8002682:	f44f 61af 	mov.w	r1, #1400	; 0x578
 8002686:	483c      	ldr	r0, [pc, #240]	; (8002778 <detectZUPTPhase+0x118>)
 8002688:	f002 fd86 	bl	8005198 <__assert_func>
		sum += tempNode->w_mag_sq;
 800268c:	ed94 7a01 	vldr	s14, [r4, #4]
 8002690:	ee77 7a87 	vadd.f32	s15, s15, s14
		tempNode = (ZUPTNode*)tempNode->next;
 8002694:	6824      	ldr	r4, [r4, #0]
	for(i = 0; i < ZUPT_W-2; ++i) {
 8002696:	3301      	adds	r3, #1
 8002698:	2b11      	cmp	r3, #17
 800269a:	dc08      	bgt.n	80026ae <detectZUPTPhase+0x4e>
		assert(tempNode != NULL);
 800269c:	2c00      	cmp	r4, #0
 800269e:	d1f5      	bne.n	800268c <detectZUPTPhase+0x2c>
 80026a0:	4b36      	ldr	r3, [pc, #216]	; (800277c <detectZUPTPhase+0x11c>)
 80026a2:	4a34      	ldr	r2, [pc, #208]	; (8002774 <detectZUPTPhase+0x114>)
 80026a4:	f240 5181 	movw	r1, #1409	; 0x581
 80026a8:	4833      	ldr	r0, [pc, #204]	; (8002778 <detectZUPTPhase+0x118>)
 80026aa:	f002 fd75 	bl	8005198 <__assert_func>
	assert(tempNode != NULL);
 80026ae:	2c00      	cmp	r4, #0
 80026b0:	d03d      	beq.n	800272e <detectZUPTPhase+0xce>
	sum += tempNode->w_mag_sq; // last node
 80026b2:	ed94 8a01 	vldr	s16, [r4, #4]
 80026b6:	ee38 8a27 	vadd.f32	s16, s16, s15
	tempNode->next = (ZUPTNode*)createZUPTNode(w_avg_b0_mag);
 80026ba:	4b31      	ldr	r3, [pc, #196]	; (8002780 <detectZUPTPhase+0x120>)
 80026bc:	ed93 0a00 	vldr	s0, [r3]
 80026c0:	f7ff fec4 	bl	800244c <createZUPTNode>
 80026c4:	6020      	str	r0, [r4, #0]
	assert(tempNode->next != NULL);
 80026c6:	2800      	cmp	r0, #0
 80026c8:	d038      	beq.n	800273c <detectZUPTPhase+0xdc>
	sum += tempNode->w_mag_sq;
 80026ca:	edd0 7a01 	vldr	s15, [r0, #4]
	float Tw = sum * ZUPT_SCALE_FACTOR;
 80026ce:	ee77 7a88 	vadd.f32	s15, s15, s16
 80026d2:	ee17 0a90 	vmov	r0, s15
 80026d6:	f7fd ff2f 	bl	8000538 <__aeabi_f2d>
 80026da:	a321      	add	r3, pc, #132	; (adr r3, 8002760 <detectZUPTPhase+0x100>)
 80026dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e0:	f7fe f8ac 	bl	800083c <__aeabi_ddiv>
 80026e4:	f7fe fa58 	bl	8000b98 <__aeabi_d2f>
 80026e8:	ee07 0a90 	vmov	s15, r0
	enum PHASE detected_phase = (Tw < ZUPT_THRESHOLD) ? STANCE : SWING;
 80026ec:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002784 <detectZUPTPhase+0x124>
 80026f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f8:	bf4c      	ite	mi
 80026fa:	2301      	movmi	r3, #1
 80026fc:	2300      	movpl	r3, #0
	if (detected_phase != curr_phase) {
 80026fe:	4a22      	ldr	r2, [pc, #136]	; (8002788 <detectZUPTPhase+0x128>)
 8002700:	7812      	ldrb	r2, [r2, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d00e      	beq.n	8002724 <detectZUPTPhase+0xc4>
		if (detected_phase == SWING) {
 8002706:	eef4 7ac7 	vcmpe.f32	s15, s14
 800270a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800270e:	d41c      	bmi.n	800274a <detectZUPTPhase+0xea>
			++phase_counter;
 8002710:	4a1e      	ldr	r2, [pc, #120]	; (800278c <detectZUPTPhase+0x12c>)
 8002712:	7813      	ldrb	r3, [r2, #0]
 8002714:	3301      	adds	r3, #1
 8002716:	b2db      	uxtb	r3, r3
 8002718:	7013      	strb	r3, [r2, #0]
			curr_phase = (phase_counter == PHASE_INTERVAL_THRESHOLD) ? SWING : STANCE;
 800271a:	3b0a      	subs	r3, #10
 800271c:	bf18      	it	ne
 800271e:	2301      	movne	r3, #1
 8002720:	4a19      	ldr	r2, [pc, #100]	; (8002788 <detectZUPTPhase+0x128>)
 8002722:	7013      	strb	r3, [r2, #0]
}
 8002724:	4b18      	ldr	r3, [pc, #96]	; (8002788 <detectZUPTPhase+0x128>)
 8002726:	7818      	ldrb	r0, [r3, #0]
 8002728:	ecbd 8b02 	vpop	{d8}
 800272c:	bd10      	pop	{r4, pc}
	assert(tempNode != NULL);
 800272e:	4b13      	ldr	r3, [pc, #76]	; (800277c <detectZUPTPhase+0x11c>)
 8002730:	4a10      	ldr	r2, [pc, #64]	; (8002774 <detectZUPTPhase+0x114>)
 8002732:	f240 5185 	movw	r1, #1413	; 0x585
 8002736:	4810      	ldr	r0, [pc, #64]	; (8002778 <detectZUPTPhase+0x118>)
 8002738:	f002 fd2e 	bl	8005198 <__assert_func>
	assert(tempNode->next != NULL);
 800273c:	4b14      	ldr	r3, [pc, #80]	; (8002790 <detectZUPTPhase+0x130>)
 800273e:	4a0d      	ldr	r2, [pc, #52]	; (8002774 <detectZUPTPhase+0x114>)
 8002740:	f240 518a 	movw	r1, #1418	; 0x58a
 8002744:	480c      	ldr	r0, [pc, #48]	; (8002778 <detectZUPTPhase+0x118>)
 8002746:	f002 fd27 	bl	8005198 <__assert_func>
			--phase_counter;
 800274a:	4a10      	ldr	r2, [pc, #64]	; (800278c <detectZUPTPhase+0x12c>)
 800274c:	7813      	ldrb	r3, [r2, #0]
 800274e:	3b01      	subs	r3, #1
 8002750:	b2db      	uxtb	r3, r3
 8002752:	7013      	strb	r3, [r2, #0]
			curr_phase = (phase_counter == 0) ? STANCE : SWING;
 8002754:	fab3 f383 	clz	r3, r3
 8002758:	095b      	lsrs	r3, r3, #5
 800275a:	4a0b      	ldr	r2, [pc, #44]	; (8002788 <detectZUPTPhase+0x128>)
 800275c:	7013      	strb	r3, [r2, #0]
 800275e:	e7e1      	b.n	8002724 <detectZUPTPhase+0xc4>
 8002760:	cccccccd 	.word	0xcccccccd
 8002764:	3f60624d 	.word	0x3f60624d
 8002768:	200015c8 	.word	0x200015c8
 800276c:	00000000 	.word	0x00000000
 8002770:	080075bc 	.word	0x080075bc
 8002774:	08007c48 	.word	0x08007c48
 8002778:	080075d0 	.word	0x080075d0
 800277c:	080075ec 	.word	0x080075ec
 8002780:	200024b0 	.word	0x200024b0
 8002784:	479c4000 	.word	0x479c4000
 8002788:	20000ef4 	.word	0x20000ef4
 800278c:	2000165c 	.word	0x2000165c
 8002790:	08007600 	.word	0x08007600

08002794 <calculateCorrectedState>:
		float timeDelta) { // TODO Verify this
 8002794:	b530      	push	{r4, r5, lr}
 8002796:	ed2d 8b02 	vpush	{d8}
 800279a:	b089      	sub	sp, #36	; 0x24
 800279c:	4604      	mov	r4, r0
 800279e:	460d      	mov	r5, r1
 80027a0:	eeb0 8a40 	vmov.f32	s16, s0
	calculateAvgAngularRate(IMU0_data, IMU1_data); // w_avg_b0
 80027a4:	f7ff fd2a 	bl	80021fc <calculateAvgAngularRate>
	calculateRotationMatrix(timeDelta);	// R_b0_n
 80027a8:	eeb0 0a48 	vmov.f32	s0, s16
 80027ac:	f7fe ff14 	bl	80015d8 <calculateRotationMatrix>
	updateFMatrix(timeDelta);	// Update F with new timeDelta
 80027b0:	eeb0 0a48 	vmov.f32	s0, s16
 80027b4:	f7ff fa38 	bl	8001c28 <updateFMatrix>
	updateBMatrix(timeDelta);	// Update B with new timeDelta
 80027b8:	eeb0 0a48 	vmov.f32	s0, s16
 80027bc:	f7ff fa46 	bl	8001c4c <updateBMatrix>
	updateUVector(IMU0_data, IMU1_data);	// Update u_curr with IMU data
 80027c0:	4629      	mov	r1, r5
 80027c2:	4620      	mov	r0, r4
 80027c4:	f7ff fde0 	bl	8002388 <updateUVector>
	calculateStateEstimation();	// x(k) = F*x(k-1) + B*u(k)
 80027c8:	f7fe ff70 	bl	80016ac <calculateStateEstimation>
	calculateStateEstimationErrorCovariance();	// P-(k) = F*P(k-1)*F^T + Q(k-1)
 80027cc:	f7fe ffb6 	bl	800173c <calculateStateEstimationErrorCovariance>
	phase = detectZUPTPhase();
 80027d0:	f7ff ff46 	bl	8002660 <detectZUPTPhase>
	if (phase == SWING) {
 80027d4:	4604      	mov	r4, r0
 80027d6:	2800      	cmp	r0, #0
 80027d8:	f040 8082 	bne.w	80028e0 <calculateCorrectedState+0x14c>
		Hi = H_swing;
 80027dc:	4b52      	ldr	r3, [pc, #328]	; (8002928 <calculateCorrectedState+0x194>)
 80027de:	e893 0003 	ldmia.w	r3, {r0, r1}
 80027e2:	ab08      	add	r3, sp, #32
 80027e4:	e903 0003 	stmdb	r3, {r0, r1}
		Zi = Z_swing;
 80027e8:	4a50      	ldr	r2, [pc, #320]	; (800292c <calculateCorrectedState+0x198>)
 80027ea:	ab04      	add	r3, sp, #16
 80027ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027f0:	e883 0003 	stmia.w	r3, {r0, r1}
		Ri = R_swing;
 80027f4:	4a4e      	ldr	r2, [pc, #312]	; (8002930 <calculateCorrectedState+0x19c>)
 80027f6:	ab02      	add	r3, sp, #8
 80027f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027fc:	e883 0003 	stmia.w	r3, {r0, r1}
		Ki = K_swing;
 8002800:	4a4c      	ldr	r2, [pc, #304]	; (8002934 <calculateCorrectedState+0x1a0>)
 8002802:	466b      	mov	r3, sp
 8002804:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002808:	e883 0003 	stmia.w	r3, {r0, r1}
	updateZiVector(&Zi);	// Update Observation Vector Z for optimal state estimation
 800280c:	a804      	add	r0, sp, #16
 800280e:	f7ff fafb 	bl	8001e08 <updateZiVector>
	calculateGainMatrix(&Ki, &Hi, &Ri); // Ki(k) = P-(k)*Hi^T * (Hi*P-(k)*Hi^T + Ri(k))^-1
 8002812:	aa02      	add	r2, sp, #8
 8002814:	a906      	add	r1, sp, #24
 8002816:	4668      	mov	r0, sp
 8002818:	f7fe ffbe 	bl	8001798 <calculateGainMatrix>
	calculateOptimalStateEstimation(&Ki, &Zi, &Hi);	// x(k) <-- x_best(k) = x(k) + Ki(k)*(Zi(k) - Hi*x(k))
 800281c:	aa06      	add	r2, sp, #24
 800281e:	a904      	add	r1, sp, #16
 8002820:	4668      	mov	r0, sp
 8002822:	f7ff f8fd 	bl	8001a20 <calculateOptimalStateEstimation>
	if (phase == STANCE) {
 8002826:	2c01      	cmp	r4, #1
 8002828:	d073      	beq.n	8002912 <calculateCorrectedState+0x17e>
	if (fabs(x_curr_f32[8]) > v_gate) {
 800282a:	4b43      	ldr	r3, [pc, #268]	; (8002938 <calculateCorrectedState+0x1a4>)
 800282c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002830:	eef0 6ae7 	vabs.f32	s13, s15
 8002834:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002838:	eef4 6ac7 	vcmpe.f32	s13, s14
 800283c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002840:	dd0d      	ble.n	800285e <calculateCorrectedState+0xca>
		x_curr_f32[8] = v_gate * (x_curr_f32[8] > 0 ? 1 : -1);
 8002842:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800284a:	dd67      	ble.n	800291c <calculateCorrectedState+0x188>
 800284c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002850:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002854:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002858:	4b37      	ldr	r3, [pc, #220]	; (8002938 <calculateCorrectedState+0x1a4>)
 800285a:	edc3 7a08 	vstr	s15, [r3, #32]
	if (fabs(x_curr_f32[11]) > v_gate) {
 800285e:	4b36      	ldr	r3, [pc, #216]	; (8002938 <calculateCorrectedState+0x1a4>)
 8002860:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002864:	eef0 6ae7 	vabs.f32	s13, s15
 8002868:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800286c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8002870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002874:	dd0d      	ble.n	8002892 <calculateCorrectedState+0xfe>
		x_curr_f32[11] = v_gate * (x_curr_f32[11] > 0 ? 1 : -1);
 8002876:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800287a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800287e:	dd50      	ble.n	8002922 <calculateCorrectedState+0x18e>
 8002880:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002884:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002888:	ee67 7a87 	vmul.f32	s15, s15, s14
 800288c:	4b2a      	ldr	r3, [pc, #168]	; (8002938 <calculateCorrectedState+0x1a4>)
 800288e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	optimal_f32[0] = (x_curr_f32[0]);
 8002892:	4b29      	ldr	r3, [pc, #164]	; (8002938 <calculateCorrectedState+0x1a4>)
 8002894:	6819      	ldr	r1, [r3, #0]
 8002896:	4a29      	ldr	r2, [pc, #164]	; (800293c <calculateCorrectedState+0x1a8>)
 8002898:	6011      	str	r1, [r2, #0]
	optimal_f32[1] = (x_curr_f32[1] + x_curr_f32[4]) / 2;
 800289a:	ed93 7a01 	vldr	s14, [r3, #4]
 800289e:	edd3 7a04 	vldr	s15, [r3, #16]
 80028a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028a6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80028aa:	ee27 7a26 	vmul.f32	s14, s14, s13
 80028ae:	ed82 7a01 	vstr	s14, [r2, #4]
	optimal_f32[2] = (x_curr_f32[2] + x_curr_f32[5]) / 2;
 80028b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80028b6:	ed93 7a05 	vldr	s14, [r3, #20]
 80028ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028c2:	edc2 7a02 	vstr	s15, [r2, #8]
	calculateOptimalEstimationErrorCovariance(&Ki, &Hi, &Ri);	// P(k) = (I - Ki(k)*Hi)*P-(k)
 80028c6:	aa02      	add	r2, sp, #8
 80028c8:	a906      	add	r1, sp, #24
 80028ca:	4668      	mov	r0, sp
 80028cc:	f7ff f8f6 	bl	8001abc <calculateOptimalEstimationErrorCovariance>
	updatePreviousMatrices();	// update x_prev, P_prev, (Q_prev?) // TODO Add Q_prev to this?
 80028d0:	f7ff f9e0 	bl	8001c94 <updatePreviousMatrices>
	phase_out = phase;
 80028d4:	4b1a      	ldr	r3, [pc, #104]	; (8002940 <calculateCorrectedState+0x1ac>)
 80028d6:	601c      	str	r4, [r3, #0]
}
 80028d8:	b009      	add	sp, #36	; 0x24
 80028da:	ecbd 8b02 	vpop	{d8}
 80028de:	bd30      	pop	{r4, r5, pc}
		Hi = H_stance;
 80028e0:	4b18      	ldr	r3, [pc, #96]	; (8002944 <calculateCorrectedState+0x1b0>)
 80028e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80028e6:	ab08      	add	r3, sp, #32
 80028e8:	e903 0003 	stmdb	r3, {r0, r1}
		Zi = Z_stance;
 80028ec:	4a16      	ldr	r2, [pc, #88]	; (8002948 <calculateCorrectedState+0x1b4>)
 80028ee:	ab04      	add	r3, sp, #16
 80028f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028f4:	e883 0003 	stmia.w	r3, {r0, r1}
		Ri = R_stance;
 80028f8:	4a14      	ldr	r2, [pc, #80]	; (800294c <calculateCorrectedState+0x1b8>)
 80028fa:	ab02      	add	r3, sp, #8
 80028fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002900:	e883 0003 	stmia.w	r3, {r0, r1}
		Ki = K_stance;
 8002904:	4a12      	ldr	r2, [pc, #72]	; (8002950 <calculateCorrectedState+0x1bc>)
 8002906:	466b      	mov	r3, sp
 8002908:	e892 0003 	ldmia.w	r2, {r0, r1}
 800290c:	e883 0003 	stmia.w	r3, {r0, r1}
 8002910:	e77c      	b.n	800280c <calculateCorrectedState+0x78>
		x_curr_f32[2] = 0;
 8002912:	4b09      	ldr	r3, [pc, #36]	; (8002938 <calculateCorrectedState+0x1a4>)
 8002914:	2200      	movs	r2, #0
 8002916:	609a      	str	r2, [r3, #8]
		x_curr_f32[5] = 0;
 8002918:	615a      	str	r2, [r3, #20]
 800291a:	e786      	b.n	800282a <calculateCorrectedState+0x96>
		x_curr_f32[8] = v_gate * (x_curr_f32[8] > 0 ? 1 : -1);
 800291c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8002920:	e796      	b.n	8002850 <calculateCorrectedState+0xbc>
		x_curr_f32[11] = v_gate * (x_curr_f32[11] > 0 ? 1 : -1);
 8002922:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8002926:	e7ad      	b.n	8002884 <calculateCorrectedState+0xf0>
 8002928:	20001220 	.word	0x20001220
 800292c:	20001604 	.word	0x20001604
 8002930:	200015c0 	.word	0x200015c0
 8002934:	20001470 	.word	0x20001470
 8002938:	20000f08 	.word	0x20000f08
 800293c:	20001650 	.word	0x20001650
 8002940:	20001660 	.word	0x20001660
 8002944:	20001218 	.word	0x20001218
 8002948:	200015cc 	.word	0x200015cc
 800294c:	200015b8 	.word	0x200015b8
 8002950:	20001228 	.word	0x20001228

08002954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002954:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002956:	4b0a      	ldr	r3, [pc, #40]	; (8002980 <HAL_MspInit+0x2c>)
 8002958:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800295a:	f042 0201 	orr.w	r2, r2, #1
 800295e:	661a      	str	r2, [r3, #96]	; 0x60
 8002960:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002962:	f002 0201 	and.w	r2, r2, #1
 8002966:	9200      	str	r2, [sp, #0]
 8002968:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800296a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800296c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002970:	659a      	str	r2, [r3, #88]	; 0x58
 8002972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002978:	9301      	str	r3, [sp, #4]
 800297a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800297c:	b002      	add	sp, #8
 800297e:	4770      	bx	lr
 8002980:	40021000 	.word	0x40021000

08002984 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002984:	b500      	push	{lr}
 8002986:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002988:	2300      	movs	r3, #0
 800298a:	9305      	str	r3, [sp, #20]
 800298c:	9306      	str	r3, [sp, #24]
 800298e:	9307      	str	r3, [sp, #28]
 8002990:	9308      	str	r3, [sp, #32]
 8002992:	9309      	str	r3, [sp, #36]	; 0x24
  if(hspi->Instance==SPI1)
 8002994:	6803      	ldr	r3, [r0, #0]
 8002996:	4a25      	ldr	r2, [pc, #148]	; (8002a2c <HAL_SPI_MspInit+0xa8>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d005      	beq.n	80029a8 <HAL_SPI_MspInit+0x24>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 800299c:	4a24      	ldr	r2, [pc, #144]	; (8002a30 <HAL_SPI_MspInit+0xac>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d023      	beq.n	80029ea <HAL_SPI_MspInit+0x66>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80029a2:	b00b      	add	sp, #44	; 0x2c
 80029a4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029a8:	4b22      	ldr	r3, [pc, #136]	; (8002a34 <HAL_SPI_MspInit+0xb0>)
 80029aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80029b0:	661a      	str	r2, [r3, #96]	; 0x60
 80029b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029b4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80029b8:	9201      	str	r2, [sp, #4]
 80029ba:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029be:	f042 0201 	orr.w	r2, r2, #1
 80029c2:	64da      	str	r2, [r3, #76]	; 0x4c
 80029c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	9302      	str	r3, [sp, #8]
 80029cc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80029ce:	23c2      	movs	r3, #194	; 0xc2
 80029d0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d2:	2302      	movs	r3, #2
 80029d4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d6:	2303      	movs	r3, #3
 80029d8:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029da:	2305      	movs	r3, #5
 80029dc:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029de:	a905      	add	r1, sp, #20
 80029e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029e4:	f000 f9fa 	bl	8002ddc <HAL_GPIO_Init>
 80029e8:	e7db      	b.n	80029a2 <HAL_SPI_MspInit+0x1e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80029ea:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <HAL_SPI_MspInit+0xb0>)
 80029ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029f2:	659a      	str	r2, [r3, #88]	; 0x58
 80029f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029f6:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80029fa:	9203      	str	r2, [sp, #12]
 80029fc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a00:	f042 0202 	orr.w	r2, r2, #2
 8002a04:	64da      	str	r2, [r3, #76]	; 0x4c
 8002a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	9304      	str	r3, [sp, #16]
 8002a0e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002a10:	2338      	movs	r3, #56	; 0x38
 8002a12:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a14:	2302      	movs	r3, #2
 8002a16:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a1c:	2306      	movs	r3, #6
 8002a1e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a20:	a905      	add	r1, sp, #20
 8002a22:	4805      	ldr	r0, [pc, #20]	; (8002a38 <HAL_SPI_MspInit+0xb4>)
 8002a24:	f000 f9da 	bl	8002ddc <HAL_GPIO_Init>
}
 8002a28:	e7bb      	b.n	80029a2 <HAL_SPI_MspInit+0x1e>
 8002a2a:	bf00      	nop
 8002a2c:	40013000 	.word	0x40013000
 8002a30:	40003c00 	.word	0x40003c00
 8002a34:	40021000 	.word	0x40021000
 8002a38:	48000400 	.word	0x48000400

08002a3c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8002a3c:	6803      	ldr	r3, [r0, #0]
 8002a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a42:	d000      	beq.n	8002a46 <HAL_TIM_Base_MspInit+0xa>
 8002a44:	4770      	bx	lr
{
 8002a46:	b500      	push	{lr}
 8002a48:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a4a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002a4e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a50:	f042 0201 	orr.w	r2, r2, #1
 8002a54:	659a      	str	r2, [r3, #88]	; 0x58
 8002a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	9301      	str	r3, [sp, #4]
 8002a5e:	9b01      	ldr	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a60:	2200      	movs	r2, #0
 8002a62:	4611      	mov	r1, r2
 8002a64:	201c      	movs	r0, #28
 8002a66:	f000 f95f 	bl	8002d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a6a:	201c      	movs	r0, #28
 8002a6c:	f000 f994 	bl	8002d98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002a70:	b003      	add	sp, #12
 8002a72:	f85d fb04 	ldr.w	pc, [sp], #4

08002a76 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a76:	e7fe      	b.n	8002a76 <NMI_Handler>

08002a78 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a78:	e7fe      	b.n	8002a78 <HardFault_Handler>

08002a7a <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a7a:	e7fe      	b.n	8002a7a <MemManage_Handler>

08002a7c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a7c:	e7fe      	b.n	8002a7c <BusFault_Handler>

08002a7e <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a7e:	e7fe      	b.n	8002a7e <UsageFault_Handler>

08002a80 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a80:	4770      	bx	lr

08002a82 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a82:	4770      	bx	lr

08002a84 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a84:	4770      	bx	lr

08002a86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a86:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a88:	f000 f916 	bl	8002cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a8c:	bd08      	pop	{r3, pc}

08002a8e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002a8e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MAG_INT_Pin);
 8002a90:	2001      	movs	r0, #1
 8002a92:	f000 fa8d 	bl	8002fb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002a96:	bd08      	pop	{r3, pc}

08002a98 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002a98:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU3_INT1_Pin);
 8002a9a:	2008      	movs	r0, #8
 8002a9c:	f000 fa88 	bl	8002fb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  DRDY_flag = 1;
 8002aa0:	4b01      	ldr	r3, [pc, #4]	; (8002aa8 <EXTI3_IRQHandler+0x10>)
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI3_IRQn 1 */
}
 8002aa6:	bd08      	pop	{r3, pc}
 8002aa8:	20000ff4 	.word	0x20000ff4

08002aac <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002aac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU3_INT2_Pin);
 8002aae:	2010      	movs	r0, #16
 8002ab0:	f000 fa7e 	bl	8002fb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  DRDY_flag = 1;
 8002ab4:	4b01      	ldr	r3, [pc, #4]	; (8002abc <EXTI4_IRQHandler+0x10>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI4_IRQn 1 */
}
 8002aba:	bd08      	pop	{r3, pc}
 8002abc:	20000ff4 	.word	0x20000ff4

08002ac0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002ac0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU2_INT1_Pin);
 8002ac2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002ac6:	f000 fa73 	bl	8002fb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  DRDY_flag = 1;
 8002aca:	4b02      	ldr	r3, [pc, #8]	; (8002ad4 <EXTI9_5_IRQHandler+0x14>)
 8002acc:	2201      	movs	r2, #1
 8002ace:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002ad0:	bd08      	pop	{r3, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000ff4 	.word	0x20000ff4

08002ad8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ad8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ada:	4803      	ldr	r0, [pc, #12]	; (8002ae8 <TIM2_IRQHandler+0x10>)
 8002adc:	f001 fdda 	bl	8004694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  periodic_tx_flag = 1;
 8002ae0:	4b02      	ldr	r3, [pc, #8]	; (8002aec <TIM2_IRQHandler+0x14>)
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 8002ae6:	bd08      	pop	{r3, pc}
 8002ae8:	200011b8 	.word	0x200011b8
 8002aec:	2000004c 	.word	0x2000004c

08002af0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002af0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU2_INT2_Pin);
 8002af2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002af6:	f000 fa5b 	bl	8002fb0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IMU1_INT1_Pin);
 8002afa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002afe:	f000 fa57 	bl	8002fb0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IMU1_INT2_Pin);
 8002b02:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002b06:	f000 fa53 	bl	8002fb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  DRDY_flag = 1;
 8002b0a:	4b02      	ldr	r3, [pc, #8]	; (8002b14 <EXTI15_10_IRQHandler+0x24>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002b10:	bd08      	pop	{r3, pc}
 8002b12:	bf00      	nop
 8002b14:	20000ff4 	.word	0x20000ff4

08002b18 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8002b18:	2001      	movs	r0, #1
 8002b1a:	4770      	bx	lr

08002b1c <_kill>:

int _kill(int pid, int sig)
{
 8002b1c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b1e:	f002 fb59 	bl	80051d4 <__errno>
 8002b22:	2316      	movs	r3, #22
 8002b24:	6003      	str	r3, [r0, #0]
  return -1;
}
 8002b26:	f04f 30ff 	mov.w	r0, #4294967295
 8002b2a:	bd08      	pop	{r3, pc}

08002b2c <_exit>:

void _exit (int status)
{
 8002b2c:	b508      	push	{r3, lr}
  _kill(status, -1);
 8002b2e:	f04f 31ff 	mov.w	r1, #4294967295
 8002b32:	f7ff fff3 	bl	8002b1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b36:	e7fe      	b.n	8002b36 <_exit+0xa>

08002b38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b38:	b570      	push	{r4, r5, r6, lr}
 8002b3a:	460c      	mov	r4, r1
 8002b3c:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b3e:	2500      	movs	r5, #0
 8002b40:	e006      	b.n	8002b50 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8002b42:	f3af 8000 	nop.w
 8002b46:	4621      	mov	r1, r4
 8002b48:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b4c:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8002b4e:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b50:	42b5      	cmp	r5, r6
 8002b52:	dbf6      	blt.n	8002b42 <_read+0xa>
  }

  return len;
}
 8002b54:	4630      	mov	r0, r6
 8002b56:	bd70      	pop	{r4, r5, r6, pc}

08002b58 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b58:	b570      	push	{r4, r5, r6, lr}
 8002b5a:	460c      	mov	r4, r1
 8002b5c:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b5e:	2500      	movs	r5, #0
 8002b60:	e004      	b.n	8002b6c <_write+0x14>
  {
    __io_putchar(*ptr++);
 8002b62:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002b66:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b6a:	3501      	adds	r5, #1
 8002b6c:	42b5      	cmp	r5, r6
 8002b6e:	dbf8      	blt.n	8002b62 <_write+0xa>
  }
  return len;
}
 8002b70:	4630      	mov	r0, r6
 8002b72:	bd70      	pop	{r4, r5, r6, pc}

08002b74 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8002b74:	f04f 30ff 	mov.w	r0, #4294967295
 8002b78:	4770      	bx	lr

08002b7a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002b7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b7e:	604b      	str	r3, [r1, #4]
  return 0;
}
 8002b80:	2000      	movs	r0, #0
 8002b82:	4770      	bx	lr

08002b84 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002b84:	2001      	movs	r0, #1
 8002b86:	4770      	bx	lr

08002b88 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002b88:	2000      	movs	r0, #0
 8002b8a:	4770      	bx	lr

08002b8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b8c:	b510      	push	{r4, lr}
 8002b8e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b90:	4a0c      	ldr	r2, [pc, #48]	; (8002bc4 <_sbrk+0x38>)
 8002b92:	490d      	ldr	r1, [pc, #52]	; (8002bc8 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b94:	480d      	ldr	r0, [pc, #52]	; (8002bcc <_sbrk+0x40>)
 8002b96:	6800      	ldr	r0, [r0, #0]
 8002b98:	b140      	cbz	r0, 8002bac <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b9a:	480c      	ldr	r0, [pc, #48]	; (8002bcc <_sbrk+0x40>)
 8002b9c:	6800      	ldr	r0, [r0, #0]
 8002b9e:	4403      	add	r3, r0
 8002ba0:	1a52      	subs	r2, r2, r1
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d806      	bhi.n	8002bb4 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002ba6:	4a09      	ldr	r2, [pc, #36]	; (8002bcc <_sbrk+0x40>)
 8002ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002baa:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002bac:	4807      	ldr	r0, [pc, #28]	; (8002bcc <_sbrk+0x40>)
 8002bae:	4c08      	ldr	r4, [pc, #32]	; (8002bd0 <_sbrk+0x44>)
 8002bb0:	6004      	str	r4, [r0, #0]
 8002bb2:	e7f2      	b.n	8002b9a <_sbrk+0xe>
    errno = ENOMEM;
 8002bb4:	f002 fb0e 	bl	80051d4 <__errno>
 8002bb8:	230c      	movs	r3, #12
 8002bba:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc0:	e7f3      	b.n	8002baa <_sbrk+0x1e>
 8002bc2:	bf00      	nop
 8002bc4:	20010000 	.word	0x20010000
 8002bc8:	00000400 	.word	0x00000400
 8002bcc:	20002598 	.word	0x20002598
 8002bd0:	200025b0 	.word	0x200025b0

08002bd4 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002bd4:	4a03      	ldr	r2, [pc, #12]	; (8002be4 <SystemInit+0x10>)
 8002bd6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002bda:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bde:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002be2:	4770      	bx	lr
 8002be4:	e000ed00 	.word	0xe000ed00

08002be8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002be8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002bec:	f7ff fff2 	bl	8002bd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bf0:	480c      	ldr	r0, [pc, #48]	; (8002c24 <LoopForever+0x6>)
  ldr r1, =_edata
 8002bf2:	490d      	ldr	r1, [pc, #52]	; (8002c28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bf4:	4a0d      	ldr	r2, [pc, #52]	; (8002c2c <LoopForever+0xe>)
  movs r3, #0
 8002bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bf8:	e002      	b.n	8002c00 <LoopCopyDataInit>

08002bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bfe:	3304      	adds	r3, #4

08002c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c04:	d3f9      	bcc.n	8002bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c06:	4a0a      	ldr	r2, [pc, #40]	; (8002c30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c08:	4c0a      	ldr	r4, [pc, #40]	; (8002c34 <LoopForever+0x16>)
  movs r3, #0
 8002c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c0c:	e001      	b.n	8002c12 <LoopFillZerobss>

08002c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c10:	3204      	adds	r2, #4

08002c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c14:	d3fb      	bcc.n	8002c0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c16:	f002 faf5 	bl	8005204 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c1a:	f7fe fbf1 	bl	8001400 <main>

08002c1e <LoopForever>:

LoopForever:
    b LoopForever
 8002c1e:	e7fe      	b.n	8002c1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002c20:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c28:	20000fd8 	.word	0x20000fd8
  ldr r2, =_sidata
 8002c2c:	08007f68 	.word	0x08007f68
  ldr r2, =_sbss
 8002c30:	20000fd8 	.word	0x20000fd8
  ldr r4, =_ebss
 8002c34:	200025b0 	.word	0x200025b0

08002c38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c38:	e7fe      	b.n	8002c38 <ADC1_IRQHandler>
	...

08002c3c <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002c3c:	4b10      	ldr	r3, [pc, #64]	; (8002c80 <HAL_InitTick+0x44>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	b90b      	cbnz	r3, 8002c46 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c42:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8002c44:	4770      	bx	lr
{
 8002c46:	b510      	push	{r4, lr}
 8002c48:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002c4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c52:	4a0c      	ldr	r2, [pc, #48]	; (8002c84 <HAL_InitTick+0x48>)
 8002c54:	6810      	ldr	r0, [r2, #0]
 8002c56:	fbb0 f0f3 	udiv	r0, r0, r3
 8002c5a:	f000 f8ab 	bl	8002db4 <HAL_SYSTICK_Config>
 8002c5e:	b968      	cbnz	r0, 8002c7c <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c60:	2c0f      	cmp	r4, #15
 8002c62:	d901      	bls.n	8002c68 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8002c64:	2001      	movs	r0, #1
 8002c66:	e00a      	b.n	8002c7e <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c68:	2200      	movs	r2, #0
 8002c6a:	4621      	mov	r1, r4
 8002c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c70:	f000 f85a 	bl	8002d28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c74:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <HAL_InitTick+0x4c>)
 8002c76:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c78:	2000      	movs	r0, #0
 8002c7a:	e000      	b.n	8002c7e <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8002c7c:	2001      	movs	r0, #1
}
 8002c7e:	bd10      	pop	{r4, pc}
 8002c80:	20000f6c 	.word	0x20000f6c
 8002c84:	20000f68 	.word	0x20000f68
 8002c88:	20000f70 	.word	0x20000f70

08002c8c <HAL_Init>:
{
 8002c8c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c8e:	4a09      	ldr	r2, [pc, #36]	; (8002cb4 <HAL_Init+0x28>)
 8002c90:	6813      	ldr	r3, [r2, #0]
 8002c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c96:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c98:	2003      	movs	r0, #3
 8002c9a:	f000 f833 	bl	8002d04 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c9e:	200f      	movs	r0, #15
 8002ca0:	f7ff ffcc 	bl	8002c3c <HAL_InitTick>
 8002ca4:	b110      	cbz	r0, 8002cac <HAL_Init+0x20>
    status = HAL_ERROR;
 8002ca6:	2401      	movs	r4, #1
}
 8002ca8:	4620      	mov	r0, r4
 8002caa:	bd10      	pop	{r4, pc}
 8002cac:	4604      	mov	r4, r0
    HAL_MspInit();
 8002cae:	f7ff fe51 	bl	8002954 <HAL_MspInit>
 8002cb2:	e7f9      	b.n	8002ca8 <HAL_Init+0x1c>
 8002cb4:	40022000 	.word	0x40022000

08002cb8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002cb8:	4b03      	ldr	r3, [pc, #12]	; (8002cc8 <HAL_IncTick+0x10>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	4a03      	ldr	r2, [pc, #12]	; (8002ccc <HAL_IncTick+0x14>)
 8002cbe:	6811      	ldr	r1, [r2, #0]
 8002cc0:	440b      	add	r3, r1
 8002cc2:	6013      	str	r3, [r2, #0]
}
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	20000f6c 	.word	0x20000f6c
 8002ccc:	2000259c 	.word	0x2000259c

08002cd0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002cd0:	4b01      	ldr	r3, [pc, #4]	; (8002cd8 <HAL_GetTick+0x8>)
 8002cd2:	6818      	ldr	r0, [r3, #0]
}
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	2000259c 	.word	0x2000259c

08002cdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cdc:	b538      	push	{r3, r4, r5, lr}
 8002cde:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002ce0:	f7ff fff6 	bl	8002cd0 <HAL_GetTick>
 8002ce4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ce6:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002cea:	d002      	beq.n	8002cf2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 8002cec:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <HAL_Delay+0x24>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cf2:	f7ff ffed 	bl	8002cd0 <HAL_GetTick>
 8002cf6:	1b40      	subs	r0, r0, r5
 8002cf8:	42a0      	cmp	r0, r4
 8002cfa:	d3fa      	bcc.n	8002cf2 <HAL_Delay+0x16>
  {
  }
}
 8002cfc:	bd38      	pop	{r3, r4, r5, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000f6c 	.word	0x20000f6c

08002d04 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d04:	4a07      	ldr	r2, [pc, #28]	; (8002d24 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002d06:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d08:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002d0c:	041b      	lsls	r3, r3, #16
 8002d0e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d10:	0200      	lsls	r0, r0, #8
 8002d12:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d16:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002d18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002d20:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002d22:	4770      	bx	lr
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d28:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d2a:	4b19      	ldr	r3, [pc, #100]	; (8002d90 <HAL_NVIC_SetPriority+0x68>)
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d32:	f1c3 0c07 	rsb	ip, r3, #7
 8002d36:	f1bc 0f04 	cmp.w	ip, #4
 8002d3a:	bf28      	it	cs
 8002d3c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d40:	f103 0e04 	add.w	lr, r3, #4
 8002d44:	f1be 0f06 	cmp.w	lr, #6
 8002d48:	d918      	bls.n	8002d7c <HAL_NVIC_SetPriority+0x54>
 8002d4a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d4c:	f04f 3eff 	mov.w	lr, #4294967295
 8002d50:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002d54:	ea21 010c 	bic.w	r1, r1, ip
 8002d58:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d5a:	fa0e f303 	lsl.w	r3, lr, r3
 8002d5e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d62:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002d64:	2800      	cmp	r0, #0
 8002d66:	db0b      	blt.n	8002d80 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d68:	0109      	lsls	r1, r1, #4
 8002d6a:	b2c9      	uxtb	r1, r1
 8002d6c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002d70:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002d74:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002d78:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	e7e5      	b.n	8002d4c <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d80:	f000 000f 	and.w	r0, r0, #15
 8002d84:	0109      	lsls	r1, r1, #4
 8002d86:	b2c9      	uxtb	r1, r1
 8002d88:	4b02      	ldr	r3, [pc, #8]	; (8002d94 <HAL_NVIC_SetPriority+0x6c>)
 8002d8a:	5419      	strb	r1, [r3, r0]
 8002d8c:	e7f4      	b.n	8002d78 <HAL_NVIC_SetPriority+0x50>
 8002d8e:	bf00      	nop
 8002d90:	e000ed00 	.word	0xe000ed00
 8002d94:	e000ed14 	.word	0xe000ed14

08002d98 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002d98:	2800      	cmp	r0, #0
 8002d9a:	db07      	blt.n	8002dac <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d9c:	f000 021f 	and.w	r2, r0, #31
 8002da0:	0940      	lsrs	r0, r0, #5
 8002da2:	2301      	movs	r3, #1
 8002da4:	4093      	lsls	r3, r2
 8002da6:	4a02      	ldr	r2, [pc, #8]	; (8002db0 <HAL_NVIC_EnableIRQ+0x18>)
 8002da8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	e000e100 	.word	0xe000e100

08002db4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002db4:	3801      	subs	r0, #1
 8002db6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002dba:	d20b      	bcs.n	8002dd4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dbc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002dc0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc2:	4a05      	ldr	r2, [pc, #20]	; (8002dd8 <HAL_SYSTICK_Config+0x24>)
 8002dc4:	21f0      	movs	r1, #240	; 0xf0
 8002dc6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dca:	2000      	movs	r0, #0
 8002dcc:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dce:	2207      	movs	r2, #7
 8002dd0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dd2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002dd4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002dd6:	4770      	bx	lr
 8002dd8:	e000ed00 	.word	0xe000ed00

08002ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dde:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8002de0:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002de2:	e062      	b.n	8002eaa <HAL_GPIO_Init+0xce>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002de4:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002de6:	005e      	lsls	r6, r3, #1
 8002de8:	2403      	movs	r4, #3
 8002dea:	40b4      	lsls	r4, r6
 8002dec:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002df0:	68cc      	ldr	r4, [r1, #12]
 8002df2:	40b4      	lsls	r4, r6
 8002df4:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8002df6:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002df8:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dfa:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dfe:	684c      	ldr	r4, [r1, #4]
 8002e00:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8002e04:	409c      	lsls	r4, r3
 8002e06:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8002e0a:	6044      	str	r4, [r0, #4]
 8002e0c:	e05e      	b.n	8002ecc <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e0e:	08dd      	lsrs	r5, r3, #3
 8002e10:	3508      	adds	r5, #8
 8002e12:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e16:	f003 0407 	and.w	r4, r3, #7
 8002e1a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8002e1e:	240f      	movs	r4, #15
 8002e20:	fa04 f40c 	lsl.w	r4, r4, ip
 8002e24:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e28:	690c      	ldr	r4, [r1, #16]
 8002e2a:	fa04 f40c 	lsl.w	r4, r4, ip
 8002e2e:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8002e32:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8002e36:	e060      	b.n	8002efa <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e38:	2404      	movs	r4, #4
 8002e3a:	e000      	b.n	8002e3e <HAL_GPIO_Init+0x62>
 8002e3c:	2400      	movs	r4, #0
 8002e3e:	fa04 f40e 	lsl.w	r4, r4, lr
 8002e42:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e44:	f10c 0c02 	add.w	ip, ip, #2
 8002e48:	4d52      	ldr	r5, [pc, #328]	; (8002f94 <HAL_GPIO_Init+0x1b8>)
 8002e4a:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e4e:	4c52      	ldr	r4, [pc, #328]	; (8002f98 <HAL_GPIO_Init+0x1bc>)
 8002e50:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8002e52:	43d4      	mvns	r4, r2
 8002e54:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e58:	684f      	ldr	r7, [r1, #4]
 8002e5a:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002e5e:	d001      	beq.n	8002e64 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8002e60:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8002e64:	4d4c      	ldr	r5, [pc, #304]	; (8002f98 <HAL_GPIO_Init+0x1bc>)
 8002e66:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8002e68:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8002e6a:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e6e:	684f      	ldr	r7, [r1, #4]
 8002e70:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8002e74:	d001      	beq.n	8002e7a <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 8002e76:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8002e7a:	4d47      	ldr	r5, [pc, #284]	; (8002f98 <HAL_GPIO_Init+0x1bc>)
 8002e7c:	60ee      	str	r6, [r5, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e7e:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8002e80:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e84:	684f      	ldr	r7, [r1, #4]
 8002e86:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002e8a:	d001      	beq.n	8002e90 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 8002e8c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8002e90:	4d41      	ldr	r5, [pc, #260]	; (8002f98 <HAL_GPIO_Init+0x1bc>)
 8002e92:	606e      	str	r6, [r5, #4]

        temp = EXTI->IMR1;
 8002e94:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8002e96:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e98:	684e      	ldr	r6, [r1, #4]
 8002e9a:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8002e9e:	d001      	beq.n	8002ea4 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 8002ea0:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 8002ea4:	4a3c      	ldr	r2, [pc, #240]	; (8002f98 <HAL_GPIO_Init+0x1bc>)
 8002ea6:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 8002ea8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eaa:	680a      	ldr	r2, [r1, #0]
 8002eac:	fa32 f403 	lsrs.w	r4, r2, r3
 8002eb0:	d06e      	beq.n	8002f90 <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002eb2:	f04f 0c01 	mov.w	ip, #1
 8002eb6:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8002eba:	ea1c 0202 	ands.w	r2, ip, r2
 8002ebe:	d0f3      	beq.n	8002ea8 <HAL_GPIO_Init+0xcc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ec0:	684c      	ldr	r4, [r1, #4]
 8002ec2:	f004 0403 	and.w	r4, r4, #3
 8002ec6:	3c01      	subs	r4, #1
 8002ec8:	2c01      	cmp	r4, #1
 8002eca:	d98b      	bls.n	8002de4 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ecc:	684c      	ldr	r4, [r1, #4]
 8002ece:	f004 0403 	and.w	r4, r4, #3
 8002ed2:	2c03      	cmp	r4, #3
 8002ed4:	d00c      	beq.n	8002ef0 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8002ed6:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ed8:	005d      	lsls	r5, r3, #1
 8002eda:	f04f 0c03 	mov.w	ip, #3
 8002ede:	fa0c fc05 	lsl.w	ip, ip, r5
 8002ee2:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ee6:	688c      	ldr	r4, [r1, #8]
 8002ee8:	40ac      	lsls	r4, r5
 8002eea:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8002eee:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ef0:	684c      	ldr	r4, [r1, #4]
 8002ef2:	f004 0403 	and.w	r4, r4, #3
 8002ef6:	2c02      	cmp	r4, #2
 8002ef8:	d089      	beq.n	8002e0e <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 8002efa:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002efc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002f00:	f04f 0c03 	mov.w	ip, #3
 8002f04:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002f08:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f0c:	684c      	ldr	r4, [r1, #4]
 8002f0e:	f004 0403 	and.w	r4, r4, #3
 8002f12:	fa04 f40e 	lsl.w	r4, r4, lr
 8002f16:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8002f1a:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f1c:	684c      	ldr	r4, [r1, #4]
 8002f1e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8002f22:	d0c1      	beq.n	8002ea8 <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f24:	4c1d      	ldr	r4, [pc, #116]	; (8002f9c <HAL_GPIO_Init+0x1c0>)
 8002f26:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8002f28:	f045 0501 	orr.w	r5, r5, #1
 8002f2c:	6625      	str	r5, [r4, #96]	; 0x60
 8002f2e:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8002f30:	f004 0401 	and.w	r4, r4, #1
 8002f34:	9401      	str	r4, [sp, #4]
 8002f36:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002f38:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8002f3c:	f10c 0502 	add.w	r5, ip, #2
 8002f40:	4c14      	ldr	r4, [pc, #80]	; (8002f94 <HAL_GPIO_Init+0x1b8>)
 8002f42:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f46:	f003 0403 	and.w	r4, r3, #3
 8002f4a:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8002f4e:	240f      	movs	r4, #15
 8002f50:	fa04 f40e 	lsl.w	r4, r4, lr
 8002f54:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f58:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8002f5c:	f43f af6e 	beq.w	8002e3c <HAL_GPIO_Init+0x60>
 8002f60:	4c0f      	ldr	r4, [pc, #60]	; (8002fa0 <HAL_GPIO_Init+0x1c4>)
 8002f62:	42a0      	cmp	r0, r4
 8002f64:	d00e      	beq.n	8002f84 <HAL_GPIO_Init+0x1a8>
 8002f66:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f6a:	42a0      	cmp	r0, r4
 8002f6c:	d00c      	beq.n	8002f88 <HAL_GPIO_Init+0x1ac>
 8002f6e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f72:	42a0      	cmp	r0, r4
 8002f74:	d00a      	beq.n	8002f8c <HAL_GPIO_Init+0x1b0>
 8002f76:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f7a:	42a0      	cmp	r0, r4
 8002f7c:	f43f af5c 	beq.w	8002e38 <HAL_GPIO_Init+0x5c>
 8002f80:	2407      	movs	r4, #7
 8002f82:	e75c      	b.n	8002e3e <HAL_GPIO_Init+0x62>
 8002f84:	2401      	movs	r4, #1
 8002f86:	e75a      	b.n	8002e3e <HAL_GPIO_Init+0x62>
 8002f88:	2402      	movs	r4, #2
 8002f8a:	e758      	b.n	8002e3e <HAL_GPIO_Init+0x62>
 8002f8c:	2403      	movs	r4, #3
 8002f8e:	e756      	b.n	8002e3e <HAL_GPIO_Init+0x62>
  }
}
 8002f90:	b003      	add	sp, #12
 8002f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f94:	40010000 	.word	0x40010000
 8002f98:	40010400 	.word	0x40010400
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	48000400 	.word	0x48000400

08002fa4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fa4:	b10a      	cbz	r2, 8002faa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fa6:	6181      	str	r1, [r0, #24]
 8002fa8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002faa:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002fac:	4770      	bx	lr

08002fae <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002fae:	4770      	bx	lr

08002fb0 <HAL_GPIO_EXTI_IRQHandler>:
{
 8002fb0:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002fb2:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	4203      	tst	r3, r0
 8002fb8:	d100      	bne.n	8002fbc <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8002fba:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fbc:	4b02      	ldr	r3, [pc, #8]	; (8002fc8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002fbe:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fc0:	f7ff fff5 	bl	8002fae <HAL_GPIO_EXTI_Callback>
}
 8002fc4:	e7f9      	b.n	8002fba <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002fc6:	bf00      	nop
 8002fc8:	40010400 	.word	0x40010400

08002fcc <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002fcc:	4b02      	ldr	r3, [pc, #8]	; (8002fd8 <HAL_PWREx_GetVoltageRange+0xc>)
 8002fce:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002fd0:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	40007000 	.word	0x40007000

08002fdc <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fdc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002fe0:	d00f      	beq.n	8003002 <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fe2:	4b1f      	ldr	r3, [pc, #124]	; (8003060 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fee:	d034      	beq.n	800305a <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ff0:	4a1b      	ldr	r2, [pc, #108]	; (8003060 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002ff2:	6813      	ldr	r3, [r2, #0]
 8002ff4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ff8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ffc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ffe:	2000      	movs	r0, #0
 8003000:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003002:	4b17      	ldr	r3, [pc, #92]	; (8003060 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800300a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800300e:	d020      	beq.n	8003052 <HAL_PWREx_ControlVoltageScaling+0x76>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003010:	4a13      	ldr	r2, [pc, #76]	; (8003060 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8003012:	6813      	ldr	r3, [r2, #0]
 8003014:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003018:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800301c:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800301e:	4b11      	ldr	r3, [pc, #68]	; (8003064 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2232      	movs	r2, #50	; 0x32
 8003024:	fb02 f303 	mul.w	r3, r2, r3
 8003028:	4a0f      	ldr	r2, [pc, #60]	; (8003068 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 800302a:	fba2 2303 	umull	r2, r3, r2, r3
 800302e:	0c9b      	lsrs	r3, r3, #18
 8003030:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003032:	e000      	b.n	8003036 <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 8003034:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003036:	4a0a      	ldr	r2, [pc, #40]	; (8003060 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8003038:	6952      	ldr	r2, [r2, #20]
 800303a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800303e:	d001      	beq.n	8003044 <HAL_PWREx_ControlVoltageScaling+0x68>
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1f7      	bne.n	8003034 <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003044:	4b06      	ldr	r3, [pc, #24]	; (8003060 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800304c:	d103      	bne.n	8003056 <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 800304e:	2000      	movs	r0, #0
 8003050:	4770      	bx	lr
 8003052:	2000      	movs	r0, #0
 8003054:	4770      	bx	lr
        return HAL_TIMEOUT;
 8003056:	2003      	movs	r0, #3
 8003058:	4770      	bx	lr
  return HAL_OK;
 800305a:	2000      	movs	r0, #0
}
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	40007000 	.word	0x40007000
 8003064:	20000f68 	.word	0x20000f68
 8003068:	431bde83 	.word	0x431bde83

0800306c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800306c:	b530      	push	{r4, r5, lr}
 800306e:	b083      	sub	sp, #12
 8003070:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003072:	4b20      	ldr	r3, [pc, #128]	; (80030f4 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8003074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003076:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800307a:	d00b      	beq.n	8003094 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800307c:	f7ff ffa6 	bl	8002fcc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003080:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003084:	d017      	beq.n	80030b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003086:	2c80      	cmp	r4, #128	; 0x80
 8003088:	d81f      	bhi.n	80030ca <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800308a:	d02d      	beq.n	80030e8 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 800308c:	2c70      	cmp	r4, #112	; 0x70
 800308e:	d02d      	beq.n	80030ec <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003090:	2100      	movs	r1, #0
 8003092:	e01b      	b.n	80030cc <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 8003094:	4d17      	ldr	r5, [pc, #92]	; (80030f4 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8003096:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800309c:	65ab      	str	r3, [r5, #88]	; 0x58
 800309e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80030a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a4:	9301      	str	r3, [sp, #4]
 80030a6:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80030a8:	f7ff ff90 	bl	8002fcc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80030ac:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80030ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030b2:	65ab      	str	r3, [r5, #88]	; 0x58
 80030b4:	e7e4      	b.n	8003080 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 80030b6:	2c80      	cmp	r4, #128	; 0x80
 80030b8:	d903      	bls.n	80030c2 <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 80030ba:	2ca0      	cmp	r4, #160	; 0xa0
 80030bc:	d903      	bls.n	80030c6 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 80030be:	2102      	movs	r1, #2
 80030c0:	e004      	b.n	80030cc <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80030c2:	2100      	movs	r1, #0
 80030c4:	e002      	b.n	80030cc <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 80030c6:	2101      	movs	r1, #1
 80030c8:	e000      	b.n	80030cc <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 80030ca:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030cc:	4a0a      	ldr	r2, [pc, #40]	; (80030f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 80030ce:	6813      	ldr	r3, [r2, #0]
 80030d0:	f023 0307 	bic.w	r3, r3, #7
 80030d4:	430b      	orrs	r3, r1
 80030d6:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030d8:	6813      	ldr	r3, [r2, #0]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	428b      	cmp	r3, r1
 80030e0:	d106      	bne.n	80030f0 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80030e2:	2000      	movs	r0, #0
}
 80030e4:	b003      	add	sp, #12
 80030e6:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 80030e8:	2102      	movs	r1, #2
 80030ea:	e7ef      	b.n	80030cc <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 80030ec:	2101      	movs	r1, #1
 80030ee:	e7ed      	b.n	80030cc <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 80030f0:	2001      	movs	r0, #1
 80030f2:	e7f7      	b.n	80030e4 <RCC_SetFlashLatencyFromMSIRange+0x78>
 80030f4:	40021000 	.word	0x40021000
 80030f8:	40022000 	.word	0x40022000

080030fc <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030fc:	4a28      	ldr	r2, [pc, #160]	; (80031a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80030fe:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003100:	68d2      	ldr	r2, [r2, #12]
 8003102:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003106:	f013 030c 	ands.w	r3, r3, #12
 800310a:	d00a      	beq.n	8003122 <HAL_RCC_GetSysClockFreq+0x26>
 800310c:	2b0c      	cmp	r3, #12
 800310e:	d006      	beq.n	800311e <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003110:	2b04      	cmp	r3, #4
 8003112:	d01f      	beq.n	8003154 <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003114:	2b08      	cmp	r3, #8
 8003116:	d020      	beq.n	800315a <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003118:	2000      	movs	r0, #0
 800311a:	4602      	mov	r2, r0
 800311c:	e010      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800311e:	2a01      	cmp	r2, #1
 8003120:	d1f6      	bne.n	8003110 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003122:	4a1f      	ldr	r2, [pc, #124]	; (80031a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003124:	6812      	ldr	r2, [r2, #0]
 8003126:	f012 0f08 	tst.w	r2, #8
 800312a:	d10c      	bne.n	8003146 <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800312c:	4a1c      	ldr	r2, [pc, #112]	; (80031a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800312e:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8003132:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8003136:	491b      	ldr	r1, [pc, #108]	; (80031a4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003138:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800313c:	b143      	cbz	r3, 8003150 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800313e:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003140:	2b0c      	cmp	r3, #12
 8003142:	d00d      	beq.n	8003160 <HAL_RCC_GetSysClockFreq+0x64>
}
 8003144:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003146:	4a16      	ldr	r2, [pc, #88]	; (80031a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003148:	6812      	ldr	r2, [r2, #0]
 800314a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800314e:	e7f2      	b.n	8003136 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 8003150:	4610      	mov	r0, r2
 8003152:	e7f5      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 8003154:	4814      	ldr	r0, [pc, #80]	; (80031a8 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003156:	2200      	movs	r2, #0
 8003158:	e7f2      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 800315a:	4814      	ldr	r0, [pc, #80]	; (80031ac <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800315c:	2200      	movs	r2, #0
 800315e:	e7ef      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003160:	4b0f      	ldr	r3, [pc, #60]	; (80031a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8003168:	2b02      	cmp	r3, #2
 800316a:	d016      	beq.n	800319a <HAL_RCC_GetSysClockFreq+0x9e>
 800316c:	2b03      	cmp	r3, #3
 800316e:	d100      	bne.n	8003172 <HAL_RCC_GetSysClockFreq+0x76>
      pllvco = HSE_VALUE;
 8003170:	4a0e      	ldr	r2, [pc, #56]	; (80031ac <HAL_RCC_GetSysClockFreq+0xb0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003172:	490b      	ldr	r1, [pc, #44]	; (80031a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003174:	68c8      	ldr	r0, [r1, #12]
 8003176:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800317a:	1c43      	adds	r3, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800317c:	68c8      	ldr	r0, [r1, #12]
 800317e:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8003182:	fb02 f000 	mul.w	r0, r2, r0
 8003186:	fbb0 f0f3 	udiv	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800318a:	68cb      	ldr	r3, [r1, #12]
 800318c:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8003190:	3301      	adds	r3, #1
 8003192:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 8003194:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8003198:	e7d4      	b.n	8003144 <HAL_RCC_GetSysClockFreq+0x48>
    switch (pllsource)
 800319a:	4a03      	ldr	r2, [pc, #12]	; (80031a8 <HAL_RCC_GetSysClockFreq+0xac>)
 800319c:	e7e9      	b.n	8003172 <HAL_RCC_GetSysClockFreq+0x76>
 800319e:	bf00      	nop
 80031a0:	40021000 	.word	0x40021000
 80031a4:	08007c80 	.word	0x08007c80
 80031a8:	00f42400 	.word	0x00f42400
 80031ac:	007a1200 	.word	0x007a1200

080031b0 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80031b0:	2800      	cmp	r0, #0
 80031b2:	f000 831c 	beq.w	80037ee <HAL_RCC_OscConfig+0x63e>
{
 80031b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031b8:	b083      	sub	sp, #12
 80031ba:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031bc:	4b96      	ldr	r3, [pc, #600]	; (8003418 <HAL_RCC_OscConfig+0x268>)
 80031be:	689d      	ldr	r5, [r3, #8]
 80031c0:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031c4:	68de      	ldr	r6, [r3, #12]
 80031c6:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80031ca:	6803      	ldr	r3, [r0, #0]
 80031cc:	f013 0f10 	tst.w	r3, #16
 80031d0:	d05a      	beq.n	8003288 <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031d2:	b1e5      	cbz	r5, 800320e <HAL_RCC_OscConfig+0x5e>
 80031d4:	2d0c      	cmp	r5, #12
 80031d6:	d018      	beq.n	800320a <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031d8:	69a3      	ldr	r3, [r4, #24]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 80bb 	beq.w	8003356 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 80031e0:	4a8d      	ldr	r2, [pc, #564]	; (8003418 <HAL_RCC_OscConfig+0x268>)
 80031e2:	6813      	ldr	r3, [r2, #0]
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80031ea:	f7ff fd71 	bl	8002cd0 <HAL_GetTick>
 80031ee:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031f0:	4b89      	ldr	r3, [pc, #548]	; (8003418 <HAL_RCC_OscConfig+0x268>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f013 0f02 	tst.w	r3, #2
 80031f8:	f040 809a 	bne.w	8003330 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031fc:	f7ff fd68 	bl	8002cd0 <HAL_GetTick>
 8003200:	1bc0      	subs	r0, r0, r7
 8003202:	2802      	cmp	r0, #2
 8003204:	d9f4      	bls.n	80031f0 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 8003206:	2003      	movs	r0, #3
 8003208:	e2fc      	b.n	8003804 <HAL_RCC_OscConfig+0x654>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800320a:	2e01      	cmp	r6, #1
 800320c:	d1e4      	bne.n	80031d8 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800320e:	4b82      	ldr	r3, [pc, #520]	; (8003418 <HAL_RCC_OscConfig+0x268>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f013 0f02 	tst.w	r3, #2
 8003216:	d003      	beq.n	8003220 <HAL_RCC_OscConfig+0x70>
 8003218:	69a3      	ldr	r3, [r4, #24]
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 82e9 	beq.w	80037f2 <HAL_RCC_OscConfig+0x642>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003220:	6a20      	ldr	r0, [r4, #32]
 8003222:	4b7d      	ldr	r3, [pc, #500]	; (8003418 <HAL_RCC_OscConfig+0x268>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f013 0f08 	tst.w	r3, #8
 800322a:	d05b      	beq.n	80032e4 <HAL_RCC_OscConfig+0x134>
 800322c:	4b7a      	ldr	r3, [pc, #488]	; (8003418 <HAL_RCC_OscConfig+0x268>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003234:	4298      	cmp	r0, r3
 8003236:	d85c      	bhi.n	80032f2 <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003238:	4b77      	ldr	r3, [pc, #476]	; (8003418 <HAL_RCC_OscConfig+0x268>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	f042 0208 	orr.w	r2, r2, #8
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003248:	6a21      	ldr	r1, [r4, #32]
 800324a:	430a      	orrs	r2, r1
 800324c:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003254:	69e1      	ldr	r1, [r4, #28]
 8003256:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800325a:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800325c:	2d00      	cmp	r5, #0
 800325e:	d060      	beq.n	8003322 <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003260:	f7ff ff4c 	bl	80030fc <HAL_RCC_GetSysClockFreq>
 8003264:	4b6c      	ldr	r3, [pc, #432]	; (8003418 <HAL_RCC_OscConfig+0x268>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800326c:	4a6b      	ldr	r2, [pc, #428]	; (800341c <HAL_RCC_OscConfig+0x26c>)
 800326e:	5cd3      	ldrb	r3, [r2, r3]
 8003270:	f003 031f 	and.w	r3, r3, #31
 8003274:	40d8      	lsrs	r0, r3
 8003276:	4b6a      	ldr	r3, [pc, #424]	; (8003420 <HAL_RCC_OscConfig+0x270>)
 8003278:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 800327a:	4b6a      	ldr	r3, [pc, #424]	; (8003424 <HAL_RCC_OscConfig+0x274>)
 800327c:	6818      	ldr	r0, [r3, #0]
 800327e:	f7ff fcdd 	bl	8002c3c <HAL_InitTick>
        if(status != HAL_OK)
 8003282:	2800      	cmp	r0, #0
 8003284:	f040 82be 	bne.w	8003804 <HAL_RCC_OscConfig+0x654>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003288:	6823      	ldr	r3, [r4, #0]
 800328a:	f013 0f01 	tst.w	r3, #1
 800328e:	f000 8081 	beq.w	8003394 <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003292:	2d08      	cmp	r5, #8
 8003294:	d075      	beq.n	8003382 <HAL_RCC_OscConfig+0x1d2>
 8003296:	2d0c      	cmp	r5, #12
 8003298:	d071      	beq.n	800337e <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800329a:	6863      	ldr	r3, [r4, #4]
 800329c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a0:	f000 8097 	beq.w	80033d2 <HAL_RCC_OscConfig+0x222>
 80032a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032a8:	f000 8099 	beq.w	80033de <HAL_RCC_OscConfig+0x22e>
 80032ac:	4b5a      	ldr	r3, [pc, #360]	; (8003418 <HAL_RCC_OscConfig+0x268>)
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032bc:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032be:	6863      	ldr	r3, [r4, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 8099 	beq.w	80033f8 <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 80032c6:	f7ff fd03 	bl	8002cd0 <HAL_GetTick>
 80032ca:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032cc:	4b52      	ldr	r3, [pc, #328]	; (8003418 <HAL_RCC_OscConfig+0x268>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80032d4:	d15e      	bne.n	8003394 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d6:	f7ff fcfb 	bl	8002cd0 <HAL_GetTick>
 80032da:	1bc0      	subs	r0, r0, r7
 80032dc:	2864      	cmp	r0, #100	; 0x64
 80032de:	d9f5      	bls.n	80032cc <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 80032e0:	2003      	movs	r0, #3
 80032e2:	e28f      	b.n	8003804 <HAL_RCC_OscConfig+0x654>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80032e4:	4b4c      	ldr	r3, [pc, #304]	; (8003418 <HAL_RCC_OscConfig+0x268>)
 80032e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ea:	091b      	lsrs	r3, r3, #4
 80032ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032f0:	e7a0      	b.n	8003234 <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032f2:	f7ff febb 	bl	800306c <RCC_SetFlashLatencyFromMSIRange>
 80032f6:	2800      	cmp	r0, #0
 80032f8:	f040 827d 	bne.w	80037f6 <HAL_RCC_OscConfig+0x646>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032fc:	4b46      	ldr	r3, [pc, #280]	; (8003418 <HAL_RCC_OscConfig+0x268>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	f042 0208 	orr.w	r2, r2, #8
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800330c:	6a21      	ldr	r1, [r4, #32]
 800330e:	430a      	orrs	r2, r1
 8003310:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003318:	69e1      	ldr	r1, [r4, #28]
 800331a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800331e:	605a      	str	r2, [r3, #4]
 8003320:	e79e      	b.n	8003260 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003322:	6a20      	ldr	r0, [r4, #32]
 8003324:	f7ff fea2 	bl	800306c <RCC_SetFlashLatencyFromMSIRange>
 8003328:	2800      	cmp	r0, #0
 800332a:	d099      	beq.n	8003260 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 800332c:	2001      	movs	r0, #1
 800332e:	e269      	b.n	8003804 <HAL_RCC_OscConfig+0x654>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003330:	4b39      	ldr	r3, [pc, #228]	; (8003418 <HAL_RCC_OscConfig+0x268>)
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	f042 0208 	orr.w	r2, r2, #8
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003340:	6a21      	ldr	r1, [r4, #32]
 8003342:	430a      	orrs	r2, r1
 8003344:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800334c:	69e1      	ldr	r1, [r4, #28]
 800334e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003352:	605a      	str	r2, [r3, #4]
 8003354:	e798      	b.n	8003288 <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 8003356:	4a30      	ldr	r2, [pc, #192]	; (8003418 <HAL_RCC_OscConfig+0x268>)
 8003358:	6813      	ldr	r3, [r2, #0]
 800335a:	f023 0301 	bic.w	r3, r3, #1
 800335e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003360:	f7ff fcb6 	bl	8002cd0 <HAL_GetTick>
 8003364:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003366:	4b2c      	ldr	r3, [pc, #176]	; (8003418 <HAL_RCC_OscConfig+0x268>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f013 0f02 	tst.w	r3, #2
 800336e:	d08b      	beq.n	8003288 <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003370:	f7ff fcae 	bl	8002cd0 <HAL_GetTick>
 8003374:	1bc0      	subs	r0, r0, r7
 8003376:	2802      	cmp	r0, #2
 8003378:	d9f5      	bls.n	8003366 <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 800337a:	2003      	movs	r0, #3
 800337c:	e242      	b.n	8003804 <HAL_RCC_OscConfig+0x654>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800337e:	2e03      	cmp	r6, #3
 8003380:	d18b      	bne.n	800329a <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003382:	4b25      	ldr	r3, [pc, #148]	; (8003418 <HAL_RCC_OscConfig+0x268>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800338a:	d003      	beq.n	8003394 <HAL_RCC_OscConfig+0x1e4>
 800338c:	6863      	ldr	r3, [r4, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 8233 	beq.w	80037fa <HAL_RCC_OscConfig+0x64a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003394:	6823      	ldr	r3, [r4, #0]
 8003396:	f013 0f02 	tst.w	r3, #2
 800339a:	d058      	beq.n	800344e <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800339c:	2d04      	cmp	r5, #4
 800339e:	d045      	beq.n	800342c <HAL_RCC_OscConfig+0x27c>
 80033a0:	2d0c      	cmp	r5, #12
 80033a2:	d041      	beq.n	8003428 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033a4:	68e3      	ldr	r3, [r4, #12]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d077      	beq.n	800349a <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 80033aa:	4a1b      	ldr	r2, [pc, #108]	; (8003418 <HAL_RCC_OscConfig+0x268>)
 80033ac:	6813      	ldr	r3, [r2, #0]
 80033ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80033b4:	f7ff fc8c 	bl	8002cd0 <HAL_GetTick>
 80033b8:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033ba:	4b17      	ldr	r3, [pc, #92]	; (8003418 <HAL_RCC_OscConfig+0x268>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80033c2:	d161      	bne.n	8003488 <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033c4:	f7ff fc84 	bl	8002cd0 <HAL_GetTick>
 80033c8:	1b80      	subs	r0, r0, r6
 80033ca:	2802      	cmp	r0, #2
 80033cc:	d9f5      	bls.n	80033ba <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 80033ce:	2003      	movs	r0, #3
 80033d0:	e218      	b.n	8003804 <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d2:	4a11      	ldr	r2, [pc, #68]	; (8003418 <HAL_RCC_OscConfig+0x268>)
 80033d4:	6813      	ldr	r3, [r2, #0]
 80033d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033da:	6013      	str	r3, [r2, #0]
 80033dc:	e76f      	b.n	80032be <HAL_RCC_OscConfig+0x10e>
 80033de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80033e2:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	e762      	b.n	80032be <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 80033f8:	f7ff fc6a 	bl	8002cd0 <HAL_GetTick>
 80033fc:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033fe:	4b06      	ldr	r3, [pc, #24]	; (8003418 <HAL_RCC_OscConfig+0x268>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003406:	d0c5      	beq.n	8003394 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003408:	f7ff fc62 	bl	8002cd0 <HAL_GetTick>
 800340c:	1bc0      	subs	r0, r0, r7
 800340e:	2864      	cmp	r0, #100	; 0x64
 8003410:	d9f5      	bls.n	80033fe <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 8003412:	2003      	movs	r0, #3
 8003414:	e1f6      	b.n	8003804 <HAL_RCC_OscConfig+0x654>
 8003416:	bf00      	nop
 8003418:	40021000 	.word	0x40021000
 800341c:	08007c70 	.word	0x08007c70
 8003420:	20000f68 	.word	0x20000f68
 8003424:	20000f70 	.word	0x20000f70
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003428:	2e02      	cmp	r6, #2
 800342a:	d1bb      	bne.n	80033a4 <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800342c:	4ba4      	ldr	r3, [pc, #656]	; (80036c0 <HAL_RCC_OscConfig+0x510>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003434:	d003      	beq.n	800343e <HAL_RCC_OscConfig+0x28e>
 8003436:	68e3      	ldr	r3, [r4, #12]
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 81e0 	beq.w	80037fe <HAL_RCC_OscConfig+0x64e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800343e:	4aa0      	ldr	r2, [pc, #640]	; (80036c0 <HAL_RCC_OscConfig+0x510>)
 8003440:	6853      	ldr	r3, [r2, #4]
 8003442:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8003446:	6921      	ldr	r1, [r4, #16]
 8003448:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800344c:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800344e:	6823      	ldr	r3, [r4, #0]
 8003450:	f013 0f08 	tst.w	r3, #8
 8003454:	d04c      	beq.n	80034f0 <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003456:	6963      	ldr	r3, [r4, #20]
 8003458:	b39b      	cbz	r3, 80034c2 <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 800345a:	4a99      	ldr	r2, [pc, #612]	; (80036c0 <HAL_RCC_OscConfig+0x510>)
 800345c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003460:	f043 0301 	orr.w	r3, r3, #1
 8003464:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003468:	f7ff fc32 	bl	8002cd0 <HAL_GetTick>
 800346c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800346e:	4b94      	ldr	r3, [pc, #592]	; (80036c0 <HAL_RCC_OscConfig+0x510>)
 8003470:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003474:	f013 0f02 	tst.w	r3, #2
 8003478:	d13a      	bne.n	80034f0 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800347a:	f7ff fc29 	bl	8002cd0 <HAL_GetTick>
 800347e:	1b80      	subs	r0, r0, r6
 8003480:	2802      	cmp	r0, #2
 8003482:	d9f4      	bls.n	800346e <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 8003484:	2003      	movs	r0, #3
 8003486:	e1bd      	b.n	8003804 <HAL_RCC_OscConfig+0x654>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003488:	4a8d      	ldr	r2, [pc, #564]	; (80036c0 <HAL_RCC_OscConfig+0x510>)
 800348a:	6853      	ldr	r3, [r2, #4]
 800348c:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8003490:	6921      	ldr	r1, [r4, #16]
 8003492:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003496:	6053      	str	r3, [r2, #4]
 8003498:	e7d9      	b.n	800344e <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 800349a:	4a89      	ldr	r2, [pc, #548]	; (80036c0 <HAL_RCC_OscConfig+0x510>)
 800349c:	6813      	ldr	r3, [r2, #0]
 800349e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034a2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80034a4:	f7ff fc14 	bl	8002cd0 <HAL_GetTick>
 80034a8:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034aa:	4b85      	ldr	r3, [pc, #532]	; (80036c0 <HAL_RCC_OscConfig+0x510>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80034b2:	d0cc      	beq.n	800344e <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034b4:	f7ff fc0c 	bl	8002cd0 <HAL_GetTick>
 80034b8:	1b80      	subs	r0, r0, r6
 80034ba:	2802      	cmp	r0, #2
 80034bc:	d9f5      	bls.n	80034aa <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 80034be:	2003      	movs	r0, #3
 80034c0:	e1a0      	b.n	8003804 <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_LSI_DISABLE();
 80034c2:	4a7f      	ldr	r2, [pc, #508]	; (80036c0 <HAL_RCC_OscConfig+0x510>)
 80034c4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80034c8:	f023 0301 	bic.w	r3, r3, #1
 80034cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80034d0:	f7ff fbfe 	bl	8002cd0 <HAL_GetTick>
 80034d4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034d6:	4b7a      	ldr	r3, [pc, #488]	; (80036c0 <HAL_RCC_OscConfig+0x510>)
 80034d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034dc:	f013 0f02 	tst.w	r3, #2
 80034e0:	d006      	beq.n	80034f0 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034e2:	f7ff fbf5 	bl	8002cd0 <HAL_GetTick>
 80034e6:	1b80      	subs	r0, r0, r6
 80034e8:	2802      	cmp	r0, #2
 80034ea:	d9f4      	bls.n	80034d6 <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 80034ec:	2003      	movs	r0, #3
 80034ee:	e189      	b.n	8003804 <HAL_RCC_OscConfig+0x654>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034f0:	6823      	ldr	r3, [r4, #0]
 80034f2:	f013 0f04 	tst.w	r3, #4
 80034f6:	d07a      	beq.n	80035ee <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80034f8:	4b71      	ldr	r3, [pc, #452]	; (80036c0 <HAL_RCC_OscConfig+0x510>)
 80034fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003500:	d136      	bne.n	8003570 <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003502:	4b6f      	ldr	r3, [pc, #444]	; (80036c0 <HAL_RCC_OscConfig+0x510>)
 8003504:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003506:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800350a:	659a      	str	r2, [r3, #88]	; 0x58
 800350c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003512:	9301      	str	r3, [sp, #4]
 8003514:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003516:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003518:	4b6a      	ldr	r3, [pc, #424]	; (80036c4 <HAL_RCC_OscConfig+0x514>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003520:	d028      	beq.n	8003574 <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003522:	68a3      	ldr	r3, [r4, #8]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d039      	beq.n	800359c <HAL_RCC_OscConfig+0x3ec>
 8003528:	2b05      	cmp	r3, #5
 800352a:	d03f      	beq.n	80035ac <HAL_RCC_OscConfig+0x3fc>
 800352c:	4b64      	ldr	r3, [pc, #400]	; (80036c0 <HAL_RCC_OscConfig+0x510>)
 800352e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003532:	f022 0201 	bic.w	r2, r2, #1
 8003536:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800353a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800353e:	f022 0204 	bic.w	r2, r2, #4
 8003542:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003546:	68a3      	ldr	r3, [r4, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d03d      	beq.n	80035c8 <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 800354c:	f7ff fbc0 	bl	8002cd0 <HAL_GetTick>
 8003550:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003552:	4b5b      	ldr	r3, [pc, #364]	; (80036c0 <HAL_RCC_OscConfig+0x510>)
 8003554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003558:	f013 0f02 	tst.w	r3, #2
 800355c:	d146      	bne.n	80035ec <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355e:	f7ff fbb7 	bl	8002cd0 <HAL_GetTick>
 8003562:	1bc0      	subs	r0, r0, r7
 8003564:	f241 3388 	movw	r3, #5000	; 0x1388
 8003568:	4298      	cmp	r0, r3
 800356a:	d9f2      	bls.n	8003552 <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 800356c:	2003      	movs	r0, #3
 800356e:	e149      	b.n	8003804 <HAL_RCC_OscConfig+0x654>
    FlagStatus       pwrclkchanged = RESET;
 8003570:	2600      	movs	r6, #0
 8003572:	e7d1      	b.n	8003518 <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003574:	4a53      	ldr	r2, [pc, #332]	; (80036c4 <HAL_RCC_OscConfig+0x514>)
 8003576:	6813      	ldr	r3, [r2, #0]
 8003578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800357c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800357e:	f7ff fba7 	bl	8002cd0 <HAL_GetTick>
 8003582:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003584:	4b4f      	ldr	r3, [pc, #316]	; (80036c4 <HAL_RCC_OscConfig+0x514>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f413 7f80 	tst.w	r3, #256	; 0x100
 800358c:	d1c9      	bne.n	8003522 <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800358e:	f7ff fb9f 	bl	8002cd0 <HAL_GetTick>
 8003592:	1bc0      	subs	r0, r0, r7
 8003594:	2802      	cmp	r0, #2
 8003596:	d9f5      	bls.n	8003584 <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 8003598:	2003      	movs	r0, #3
 800359a:	e133      	b.n	8003804 <HAL_RCC_OscConfig+0x654>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800359c:	4a48      	ldr	r2, [pc, #288]	; (80036c0 <HAL_RCC_OscConfig+0x510>)
 800359e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80035a2:	f043 0301 	orr.w	r3, r3, #1
 80035a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035aa:	e7cc      	b.n	8003546 <HAL_RCC_OscConfig+0x396>
 80035ac:	4b44      	ldr	r3, [pc, #272]	; (80036c0 <HAL_RCC_OscConfig+0x510>)
 80035ae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80035b2:	f042 0204 	orr.w	r2, r2, #4
 80035b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80035ba:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80035be:	f042 0201 	orr.w	r2, r2, #1
 80035c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80035c6:	e7be      	b.n	8003546 <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 80035c8:	f7ff fb82 	bl	8002cd0 <HAL_GetTick>
 80035cc:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035ce:	4b3c      	ldr	r3, [pc, #240]	; (80036c0 <HAL_RCC_OscConfig+0x510>)
 80035d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d4:	f013 0f02 	tst.w	r3, #2
 80035d8:	d008      	beq.n	80035ec <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035da:	f7ff fb79 	bl	8002cd0 <HAL_GetTick>
 80035de:	1bc0      	subs	r0, r0, r7
 80035e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80035e4:	4298      	cmp	r0, r3
 80035e6:	d9f2      	bls.n	80035ce <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 80035e8:	2003      	movs	r0, #3
 80035ea:	e10b      	b.n	8003804 <HAL_RCC_OscConfig+0x654>
    if(pwrclkchanged == SET)
 80035ec:	b9e6      	cbnz	r6, 8003628 <HAL_RCC_OscConfig+0x478>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035ee:	6823      	ldr	r3, [r4, #0]
 80035f0:	f013 0f20 	tst.w	r3, #32
 80035f4:	d035      	beq.n	8003662 <HAL_RCC_OscConfig+0x4b2>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80035f8:	b1e3      	cbz	r3, 8003634 <HAL_RCC_OscConfig+0x484>
      __HAL_RCC_HSI48_ENABLE();
 80035fa:	4a31      	ldr	r2, [pc, #196]	; (80036c0 <HAL_RCC_OscConfig+0x510>)
 80035fc:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8003600:	f043 0301 	orr.w	r3, r3, #1
 8003604:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003608:	f7ff fb62 	bl	8002cd0 <HAL_GetTick>
 800360c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800360e:	4b2c      	ldr	r3, [pc, #176]	; (80036c0 <HAL_RCC_OscConfig+0x510>)
 8003610:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003614:	f013 0f02 	tst.w	r3, #2
 8003618:	d123      	bne.n	8003662 <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800361a:	f7ff fb59 	bl	8002cd0 <HAL_GetTick>
 800361e:	1b80      	subs	r0, r0, r6
 8003620:	2802      	cmp	r0, #2
 8003622:	d9f4      	bls.n	800360e <HAL_RCC_OscConfig+0x45e>
          return HAL_TIMEOUT;
 8003624:	2003      	movs	r0, #3
 8003626:	e0ed      	b.n	8003804 <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003628:	4a25      	ldr	r2, [pc, #148]	; (80036c0 <HAL_RCC_OscConfig+0x510>)
 800362a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800362c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003630:	6593      	str	r3, [r2, #88]	; 0x58
 8003632:	e7dc      	b.n	80035ee <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_HSI48_DISABLE();
 8003634:	4a22      	ldr	r2, [pc, #136]	; (80036c0 <HAL_RCC_OscConfig+0x510>)
 8003636:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 800363a:	f023 0301 	bic.w	r3, r3, #1
 800363e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003642:	f7ff fb45 	bl	8002cd0 <HAL_GetTick>
 8003646:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003648:	4b1d      	ldr	r3, [pc, #116]	; (80036c0 <HAL_RCC_OscConfig+0x510>)
 800364a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800364e:	f013 0f02 	tst.w	r3, #2
 8003652:	d006      	beq.n	8003662 <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003654:	f7ff fb3c 	bl	8002cd0 <HAL_GetTick>
 8003658:	1b80      	subs	r0, r0, r6
 800365a:	2802      	cmp	r0, #2
 800365c:	d9f4      	bls.n	8003648 <HAL_RCC_OscConfig+0x498>
          return HAL_TIMEOUT;
 800365e:	2003      	movs	r0, #3
 8003660:	e0d0      	b.n	8003804 <HAL_RCC_OscConfig+0x654>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003662:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 80cc 	beq.w	8003802 <HAL_RCC_OscConfig+0x652>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800366a:	2b02      	cmp	r3, #2
 800366c:	d017      	beq.n	800369e <HAL_RCC_OscConfig+0x4ee>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800366e:	2d0c      	cmp	r5, #12
 8003670:	f000 80cc 	beq.w	800380c <HAL_RCC_OscConfig+0x65c>
        __HAL_RCC_PLL_DISABLE();
 8003674:	4a12      	ldr	r2, [pc, #72]	; (80036c0 <HAL_RCC_OscConfig+0x510>)
 8003676:	6813      	ldr	r3, [r2, #0]
 8003678:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800367c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800367e:	f7ff fb27 	bl	8002cd0 <HAL_GetTick>
 8003682:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003684:	4b0e      	ldr	r3, [pc, #56]	; (80036c0 <HAL_RCC_OscConfig+0x510>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800368c:	f000 80a8 	beq.w	80037e0 <HAL_RCC_OscConfig+0x630>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003690:	f7ff fb1e 	bl	8002cd0 <HAL_GetTick>
 8003694:	1b00      	subs	r0, r0, r4
 8003696:	2802      	cmp	r0, #2
 8003698:	d9f4      	bls.n	8003684 <HAL_RCC_OscConfig+0x4d4>
            return HAL_TIMEOUT;
 800369a:	2003      	movs	r0, #3
 800369c:	e0b2      	b.n	8003804 <HAL_RCC_OscConfig+0x654>
      pll_config = RCC->PLLCFGR;
 800369e:	4b08      	ldr	r3, [pc, #32]	; (80036c0 <HAL_RCC_OscConfig+0x510>)
 80036a0:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a2:	f003 0103 	and.w	r1, r3, #3
 80036a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80036a8:	4291      	cmp	r1, r2
 80036aa:	d00d      	beq.n	80036c8 <HAL_RCC_OscConfig+0x518>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036ac:	2d0c      	cmp	r5, #12
 80036ae:	f000 80ab 	beq.w	8003808 <HAL_RCC_OscConfig+0x658>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80036b2:	4b03      	ldr	r3, [pc, #12]	; (80036c0 <HAL_RCC_OscConfig+0x510>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 80036ba:	d02f      	beq.n	800371c <HAL_RCC_OscConfig+0x56c>
            return HAL_ERROR;
 80036bc:	2001      	movs	r0, #1
 80036be:	e0a1      	b.n	8003804 <HAL_RCC_OscConfig+0x654>
 80036c0:	40021000 	.word	0x40021000
 80036c4:	40007000 	.word	0x40007000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80036cc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80036ce:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d0:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80036d4:	d1ea      	bne.n	80036ac <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036d6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80036da:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036dc:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80036e0:	d1e4      	bne.n	80036ac <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036e2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80036e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036e8:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80036ec:	d1de      	bne.n	80036ac <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036ee:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80036f2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80036f4:	0852      	lsrs	r2, r2, #1
 80036f6:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036f8:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80036fc:	d1d6      	bne.n	80036ac <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036fe:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003702:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003704:	0852      	lsrs	r2, r2, #1
 8003706:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003708:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800370c:	d1ce      	bne.n	80036ac <HAL_RCC_OscConfig+0x4fc>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800370e:	4b40      	ldr	r3, [pc, #256]	; (8003810 <HAL_RCC_OscConfig+0x660>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003716:	d049      	beq.n	80037ac <HAL_RCC_OscConfig+0x5fc>
  return HAL_OK;
 8003718:	2000      	movs	r0, #0
 800371a:	e073      	b.n	8003804 <HAL_RCC_OscConfig+0x654>
            __HAL_RCC_PLL_DISABLE();
 800371c:	4a3c      	ldr	r2, [pc, #240]	; (8003810 <HAL_RCC_OscConfig+0x660>)
 800371e:	6813      	ldr	r3, [r2, #0]
 8003720:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003724:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8003726:	f7ff fad3 	bl	8002cd0 <HAL_GetTick>
 800372a:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800372c:	4b38      	ldr	r3, [pc, #224]	; (8003810 <HAL_RCC_OscConfig+0x660>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003734:	d006      	beq.n	8003744 <HAL_RCC_OscConfig+0x594>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003736:	f7ff facb 	bl	8002cd0 <HAL_GetTick>
 800373a:	1b40      	subs	r0, r0, r5
 800373c:	2802      	cmp	r0, #2
 800373e:	d9f5      	bls.n	800372c <HAL_RCC_OscConfig+0x57c>
                return HAL_TIMEOUT;
 8003740:	2003      	movs	r0, #3
 8003742:	e05f      	b.n	8003804 <HAL_RCC_OscConfig+0x654>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003744:	4a32      	ldr	r2, [pc, #200]	; (8003810 <HAL_RCC_OscConfig+0x660>)
 8003746:	68d3      	ldr	r3, [r2, #12]
 8003748:	4932      	ldr	r1, [pc, #200]	; (8003814 <HAL_RCC_OscConfig+0x664>)
 800374a:	4019      	ands	r1, r3
 800374c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800374e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003750:	3801      	subs	r0, #1
 8003752:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8003756:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003758:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800375c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800375e:	0840      	lsrs	r0, r0, #1
 8003760:	3801      	subs	r0, #1
 8003762:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8003766:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003768:	0840      	lsrs	r0, r0, #1
 800376a:	3801      	subs	r0, #1
 800376c:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8003770:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003772:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8003776:	430b      	orrs	r3, r1
 8003778:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 800377a:	6813      	ldr	r3, [r2, #0]
 800377c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003780:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003782:	68d3      	ldr	r3, [r2, #12]
 8003784:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003788:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 800378a:	f7ff faa1 	bl	8002cd0 <HAL_GetTick>
 800378e:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003790:	4b1f      	ldr	r3, [pc, #124]	; (8003810 <HAL_RCC_OscConfig+0x660>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003798:	d106      	bne.n	80037a8 <HAL_RCC_OscConfig+0x5f8>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800379a:	f7ff fa99 	bl	8002cd0 <HAL_GetTick>
 800379e:	1b00      	subs	r0, r0, r4
 80037a0:	2802      	cmp	r0, #2
 80037a2:	d9f5      	bls.n	8003790 <HAL_RCC_OscConfig+0x5e0>
                return HAL_TIMEOUT;
 80037a4:	2003      	movs	r0, #3
 80037a6:	e02d      	b.n	8003804 <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 80037a8:	2000      	movs	r0, #0
 80037aa:	e02b      	b.n	8003804 <HAL_RCC_OscConfig+0x654>
          __HAL_RCC_PLL_ENABLE();
 80037ac:	4b18      	ldr	r3, [pc, #96]	; (8003810 <HAL_RCC_OscConfig+0x660>)
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80037b4:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037b6:	68da      	ldr	r2, [r3, #12]
 80037b8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80037bc:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 80037be:	f7ff fa87 	bl	8002cd0 <HAL_GetTick>
 80037c2:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037c4:	4b12      	ldr	r3, [pc, #72]	; (8003810 <HAL_RCC_OscConfig+0x660>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80037cc:	d106      	bne.n	80037dc <HAL_RCC_OscConfig+0x62c>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ce:	f7ff fa7f 	bl	8002cd0 <HAL_GetTick>
 80037d2:	1b03      	subs	r3, r0, r4
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d9f5      	bls.n	80037c4 <HAL_RCC_OscConfig+0x614>
              return HAL_TIMEOUT;
 80037d8:	2003      	movs	r0, #3
 80037da:	e013      	b.n	8003804 <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 80037dc:	2000      	movs	r0, #0
 80037de:	e011      	b.n	8003804 <HAL_RCC_OscConfig+0x654>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80037e0:	4a0b      	ldr	r2, [pc, #44]	; (8003810 <HAL_RCC_OscConfig+0x660>)
 80037e2:	68d1      	ldr	r1, [r2, #12]
 80037e4:	4b0c      	ldr	r3, [pc, #48]	; (8003818 <HAL_RCC_OscConfig+0x668>)
 80037e6:	400b      	ands	r3, r1
 80037e8:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 80037ea:	2000      	movs	r0, #0
 80037ec:	e00a      	b.n	8003804 <HAL_RCC_OscConfig+0x654>
    return HAL_ERROR;
 80037ee:	2001      	movs	r0, #1
}
 80037f0:	4770      	bx	lr
        return HAL_ERROR;
 80037f2:	2001      	movs	r0, #1
 80037f4:	e006      	b.n	8003804 <HAL_RCC_OscConfig+0x654>
            return HAL_ERROR;
 80037f6:	2001      	movs	r0, #1
 80037f8:	e004      	b.n	8003804 <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 80037fa:	2001      	movs	r0, #1
 80037fc:	e002      	b.n	8003804 <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 80037fe:	2001      	movs	r0, #1
 8003800:	e000      	b.n	8003804 <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 8003802:	2000      	movs	r0, #0
}
 8003804:	b003      	add	sp, #12
 8003806:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8003808:	2001      	movs	r0, #1
 800380a:	e7fb      	b.n	8003804 <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 800380c:	2001      	movs	r0, #1
 800380e:	e7f9      	b.n	8003804 <HAL_RCC_OscConfig+0x654>
 8003810:	40021000 	.word	0x40021000
 8003814:	019d808c 	.word	0x019d808c
 8003818:	feeefffc 	.word	0xfeeefffc

0800381c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800381c:	2800      	cmp	r0, #0
 800381e:	f000 80af 	beq.w	8003980 <HAL_RCC_ClockConfig+0x164>
{
 8003822:	b570      	push	{r4, r5, r6, lr}
 8003824:	460d      	mov	r5, r1
 8003826:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003828:	4b59      	ldr	r3, [pc, #356]	; (8003990 <HAL_RCC_ClockConfig+0x174>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	428b      	cmp	r3, r1
 8003832:	d20b      	bcs.n	800384c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003834:	4a56      	ldr	r2, [pc, #344]	; (8003990 <HAL_RCC_ClockConfig+0x174>)
 8003836:	6813      	ldr	r3, [r2, #0]
 8003838:	f023 0307 	bic.w	r3, r3, #7
 800383c:	430b      	orrs	r3, r1
 800383e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003840:	6813      	ldr	r3, [r2, #0]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	428b      	cmp	r3, r1
 8003848:	f040 809c 	bne.w	8003984 <HAL_RCC_ClockConfig+0x168>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800384c:	6823      	ldr	r3, [r4, #0]
 800384e:	f013 0f02 	tst.w	r3, #2
 8003852:	d00c      	beq.n	800386e <HAL_RCC_ClockConfig+0x52>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003854:	68a2      	ldr	r2, [r4, #8]
 8003856:	4b4f      	ldr	r3, [pc, #316]	; (8003994 <HAL_RCC_ClockConfig+0x178>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800385e:	429a      	cmp	r2, r3
 8003860:	d905      	bls.n	800386e <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003862:	494c      	ldr	r1, [pc, #304]	; (8003994 <HAL_RCC_ClockConfig+0x178>)
 8003864:	688b      	ldr	r3, [r1, #8]
 8003866:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800386a:	431a      	orrs	r2, r3
 800386c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800386e:	6823      	ldr	r3, [r4, #0]
 8003870:	f013 0f01 	tst.w	r3, #1
 8003874:	d039      	beq.n	80038ea <HAL_RCC_ClockConfig+0xce>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003876:	6863      	ldr	r3, [r4, #4]
 8003878:	2b03      	cmp	r3, #3
 800387a:	d009      	beq.n	8003890 <HAL_RCC_ClockConfig+0x74>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800387c:	2b02      	cmp	r3, #2
 800387e:	d026      	beq.n	80038ce <HAL_RCC_ClockConfig+0xb2>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003880:	bb63      	cbnz	r3, 80038dc <HAL_RCC_ClockConfig+0xc0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003882:	4a44      	ldr	r2, [pc, #272]	; (8003994 <HAL_RCC_ClockConfig+0x178>)
 8003884:	6812      	ldr	r2, [r2, #0]
 8003886:	f012 0f02 	tst.w	r2, #2
 800388a:	d106      	bne.n	800389a <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 800388c:	2001      	movs	r0, #1
 800388e:	e076      	b.n	800397e <HAL_RCC_ClockConfig+0x162>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003890:	4a40      	ldr	r2, [pc, #256]	; (8003994 <HAL_RCC_ClockConfig+0x178>)
 8003892:	6812      	ldr	r2, [r2, #0]
 8003894:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003898:	d076      	beq.n	8003988 <HAL_RCC_ClockConfig+0x16c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800389a:	493e      	ldr	r1, [pc, #248]	; (8003994 <HAL_RCC_ClockConfig+0x178>)
 800389c:	688a      	ldr	r2, [r1, #8]
 800389e:	f022 0203 	bic.w	r2, r2, #3
 80038a2:	4313      	orrs	r3, r2
 80038a4:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80038a6:	f7ff fa13 	bl	8002cd0 <HAL_GetTick>
 80038aa:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ac:	4b39      	ldr	r3, [pc, #228]	; (8003994 <HAL_RCC_ClockConfig+0x178>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f003 030c 	and.w	r3, r3, #12
 80038b4:	6862      	ldr	r2, [r4, #4]
 80038b6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80038ba:	d016      	beq.n	80038ea <HAL_RCC_ClockConfig+0xce>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038bc:	f7ff fa08 	bl	8002cd0 <HAL_GetTick>
 80038c0:	1b80      	subs	r0, r0, r6
 80038c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80038c6:	4298      	cmp	r0, r3
 80038c8:	d9f0      	bls.n	80038ac <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 80038ca:	2003      	movs	r0, #3
 80038cc:	e057      	b.n	800397e <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038ce:	4a31      	ldr	r2, [pc, #196]	; (8003994 <HAL_RCC_ClockConfig+0x178>)
 80038d0:	6812      	ldr	r2, [r2, #0]
 80038d2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80038d6:	d1e0      	bne.n	800389a <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 80038d8:	2001      	movs	r0, #1
 80038da:	e050      	b.n	800397e <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038dc:	4a2d      	ldr	r2, [pc, #180]	; (8003994 <HAL_RCC_ClockConfig+0x178>)
 80038de:	6812      	ldr	r2, [r2, #0]
 80038e0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80038e4:	d1d9      	bne.n	800389a <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 80038e6:	2001      	movs	r0, #1
 80038e8:	e049      	b.n	800397e <HAL_RCC_ClockConfig+0x162>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038ea:	6823      	ldr	r3, [r4, #0]
 80038ec:	f013 0f02 	tst.w	r3, #2
 80038f0:	d00c      	beq.n	800390c <HAL_RCC_ClockConfig+0xf0>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80038f2:	68a2      	ldr	r2, [r4, #8]
 80038f4:	4b27      	ldr	r3, [pc, #156]	; (8003994 <HAL_RCC_ClockConfig+0x178>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d205      	bcs.n	800390c <HAL_RCC_ClockConfig+0xf0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003900:	4924      	ldr	r1, [pc, #144]	; (8003994 <HAL_RCC_ClockConfig+0x178>)
 8003902:	688b      	ldr	r3, [r1, #8]
 8003904:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003908:	431a      	orrs	r2, r3
 800390a:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800390c:	4b20      	ldr	r3, [pc, #128]	; (8003990 <HAL_RCC_ClockConfig+0x174>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	42ab      	cmp	r3, r5
 8003916:	d90a      	bls.n	800392e <HAL_RCC_ClockConfig+0x112>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003918:	4a1d      	ldr	r2, [pc, #116]	; (8003990 <HAL_RCC_ClockConfig+0x174>)
 800391a:	6813      	ldr	r3, [r2, #0]
 800391c:	f023 0307 	bic.w	r3, r3, #7
 8003920:	432b      	orrs	r3, r5
 8003922:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003924:	6813      	ldr	r3, [r2, #0]
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	42ab      	cmp	r3, r5
 800392c:	d12e      	bne.n	800398c <HAL_RCC_ClockConfig+0x170>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800392e:	6823      	ldr	r3, [r4, #0]
 8003930:	f013 0f04 	tst.w	r3, #4
 8003934:	d006      	beq.n	8003944 <HAL_RCC_ClockConfig+0x128>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003936:	4a17      	ldr	r2, [pc, #92]	; (8003994 <HAL_RCC_ClockConfig+0x178>)
 8003938:	6893      	ldr	r3, [r2, #8]
 800393a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800393e:	68e1      	ldr	r1, [r4, #12]
 8003940:	430b      	orrs	r3, r1
 8003942:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003944:	6823      	ldr	r3, [r4, #0]
 8003946:	f013 0f08 	tst.w	r3, #8
 800394a:	d007      	beq.n	800395c <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800394c:	4a11      	ldr	r2, [pc, #68]	; (8003994 <HAL_RCC_ClockConfig+0x178>)
 800394e:	6893      	ldr	r3, [r2, #8]
 8003950:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003954:	6921      	ldr	r1, [r4, #16]
 8003956:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800395a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800395c:	f7ff fbce 	bl	80030fc <HAL_RCC_GetSysClockFreq>
 8003960:	4b0c      	ldr	r3, [pc, #48]	; (8003994 <HAL_RCC_ClockConfig+0x178>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003968:	4a0b      	ldr	r2, [pc, #44]	; (8003998 <HAL_RCC_ClockConfig+0x17c>)
 800396a:	5cd3      	ldrb	r3, [r2, r3]
 800396c:	f003 031f 	and.w	r3, r3, #31
 8003970:	40d8      	lsrs	r0, r3
 8003972:	4b0a      	ldr	r3, [pc, #40]	; (800399c <HAL_RCC_ClockConfig+0x180>)
 8003974:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8003976:	4b0a      	ldr	r3, [pc, #40]	; (80039a0 <HAL_RCC_ClockConfig+0x184>)
 8003978:	6818      	ldr	r0, [r3, #0]
 800397a:	f7ff f95f 	bl	8002c3c <HAL_InitTick>
}
 800397e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003980:	2001      	movs	r0, #1
}
 8003982:	4770      	bx	lr
      return HAL_ERROR;
 8003984:	2001      	movs	r0, #1
 8003986:	e7fa      	b.n	800397e <HAL_RCC_ClockConfig+0x162>
        return HAL_ERROR;
 8003988:	2001      	movs	r0, #1
 800398a:	e7f8      	b.n	800397e <HAL_RCC_ClockConfig+0x162>
      return HAL_ERROR;
 800398c:	2001      	movs	r0, #1
 800398e:	e7f6      	b.n	800397e <HAL_RCC_ClockConfig+0x162>
 8003990:	40022000 	.word	0x40022000
 8003994:	40021000 	.word	0x40021000
 8003998:	08007c70 	.word	0x08007c70
 800399c:	20000f68 	.word	0x20000f68
 80039a0:	20000f70 	.word	0x20000f70

080039a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039a8:	b082      	sub	sp, #8
 80039aa:	4605      	mov	r5, r0
 80039ac:	4688      	mov	r8, r1
 80039ae:	4617      	mov	r7, r2
 80039b0:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039b2:	f7ff f98d 	bl	8002cd0 <HAL_GetTick>
 80039b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039b8:	1a1b      	subs	r3, r3, r0
 80039ba:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 80039be:	f7ff f987 	bl	8002cd0 <HAL_GetTick>
 80039c2:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039c4:	4b2b      	ldr	r3, [pc, #172]	; (8003a74 <SPI_WaitFlagStateUntilTimeout+0xd0>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80039cc:	fb09 f303 	mul.w	r3, r9, r3
 80039d0:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039d2:	682b      	ldr	r3, [r5, #0]
 80039d4:	689c      	ldr	r4, [r3, #8]
 80039d6:	ea38 0304 	bics.w	r3, r8, r4
 80039da:	bf0c      	ite	eq
 80039dc:	f04f 0c01 	moveq.w	ip, #1
 80039e0:	f04f 0c00 	movne.w	ip, #0
 80039e4:	45bc      	cmp	ip, r7
 80039e6:	d040      	beq.n	8003a6a <SPI_WaitFlagStateUntilTimeout+0xc6>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039e8:	f1b6 3fff 	cmp.w	r6, #4294967295
 80039ec:	d0f1      	beq.n	80039d2 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039ee:	f7ff f96f 	bl	8002cd0 <HAL_GetTick>
 80039f2:	eba0 000a 	sub.w	r0, r0, sl
 80039f6:	4548      	cmp	r0, r9
 80039f8:	d20a      	bcs.n	8003a10 <SPI_WaitFlagStateUntilTimeout+0x6c>
 80039fa:	f1b9 0f00 	cmp.w	r9, #0
 80039fe:	d007      	beq.n	8003a10 <SPI_WaitFlagStateUntilTimeout+0x6c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a00:	9a01      	ldr	r2, [sp, #4]
 8003a02:	b102      	cbz	r2, 8003a06 <SPI_WaitFlagStateUntilTimeout+0x62>
 8003a04:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8003a06:	9b01      	ldr	r3, [sp, #4]
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	9301      	str	r3, [sp, #4]
 8003a0c:	4691      	mov	r9, r2
 8003a0e:	e7e0      	b.n	80039d2 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a10:	682a      	ldr	r2, [r5, #0]
 8003a12:	6853      	ldr	r3, [r2, #4]
 8003a14:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003a18:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a1a:	686b      	ldr	r3, [r5, #4]
 8003a1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a20:	d00b      	beq.n	8003a3a <SPI_WaitFlagStateUntilTimeout+0x96>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a22:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003a24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a28:	d014      	beq.n	8003a54 <SPI_WaitFlagStateUntilTimeout+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8003a30:	2300      	movs	r3, #0
 8003a32:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 8003a36:	2003      	movs	r0, #3
 8003a38:	e018      	b.n	8003a6c <SPI_WaitFlagStateUntilTimeout+0xc8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a3a:	68ab      	ldr	r3, [r5, #8]
 8003a3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a40:	d002      	beq.n	8003a48 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a46:	d1ec      	bne.n	8003a22 <SPI_WaitFlagStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 8003a48:	682a      	ldr	r2, [r5, #0]
 8003a4a:	6813      	ldr	r3, [r2, #0]
 8003a4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	e7e6      	b.n	8003a22 <SPI_WaitFlagStateUntilTimeout+0x7e>
          SPI_RESET_CRC(hspi);
 8003a54:	682a      	ldr	r2, [r5, #0]
 8003a56:	6813      	ldr	r3, [r2, #0]
 8003a58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	682a      	ldr	r2, [r5, #0]
 8003a60:	6813      	ldr	r3, [r2, #0]
 8003a62:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a66:	6013      	str	r3, [r2, #0]
 8003a68:	e7df      	b.n	8003a2a <SPI_WaitFlagStateUntilTimeout+0x86>
    }
  }

  return HAL_OK;
 8003a6a:	2000      	movs	r0, #0
}
 8003a6c:	b002      	add	sp, #8
 8003a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a72:	bf00      	nop
 8003a74:	20000f68 	.word	0x20000f68

08003a78 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a7c:	b082      	sub	sp, #8
 8003a7e:	4606      	mov	r6, r0
 8003a80:	460c      	mov	r4, r1
 8003a82:	4615      	mov	r5, r2
 8003a84:	461f      	mov	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003a86:	2300      	movs	r3, #0
 8003a88:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003a8c:	f7ff f920 	bl	8002cd0 <HAL_GetTick>
 8003a90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a92:	1a1b      	subs	r3, r3, r0
 8003a94:	eb03 0807 	add.w	r8, r3, r7
  tmp_tickstart = HAL_GetTick();
 8003a98:	f7ff f91a 	bl	8002cd0 <HAL_GetTick>
 8003a9c:	4681      	mov	r9, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003a9e:	f8d6 a000 	ldr.w	sl, [r6]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003aa2:	4b31      	ldr	r3, [pc, #196]	; (8003b68 <SPI_WaitFifoStateUntilTimeout+0xf0>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003aaa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003aae:	0d1b      	lsrs	r3, r3, #20
 8003ab0:	fb08 f303 	mul.w	r3, r8, r3
 8003ab4:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8003ab6:	e002      	b.n	8003abe <SPI_WaitFifoStateUntilTimeout+0x46>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8003ab8:	f1b7 3fff 	cmp.w	r7, #4294967295
 8003abc:	d112      	bne.n	8003ae4 <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 8003abe:	6833      	ldr	r3, [r6, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	ea03 0c04 	and.w	ip, r3, r4
 8003ac6:	45ac      	cmp	ip, r5
 8003ac8:	d04a      	beq.n	8003b60 <SPI_WaitFifoStateUntilTimeout+0xe8>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003aca:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8003ace:	d1f3      	bne.n	8003ab8 <SPI_WaitFifoStateUntilTimeout+0x40>
 8003ad0:	2d00      	cmp	r5, #0
 8003ad2:	d1f1      	bne.n	8003ab8 <SPI_WaitFifoStateUntilTimeout+0x40>
      tmpreg8 = *ptmpreg8;
 8003ad4:	f89a 300c 	ldrb.w	r3, [sl, #12]
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8003ade:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003ae2:	e7e9      	b.n	8003ab8 <SPI_WaitFifoStateUntilTimeout+0x40>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ae4:	f7ff f8f4 	bl	8002cd0 <HAL_GetTick>
 8003ae8:	eba0 0009 	sub.w	r0, r0, r9
 8003aec:	4540      	cmp	r0, r8
 8003aee:	d20a      	bcs.n	8003b06 <SPI_WaitFifoStateUntilTimeout+0x8e>
 8003af0:	f1b8 0f00 	cmp.w	r8, #0
 8003af4:	d007      	beq.n	8003b06 <SPI_WaitFifoStateUntilTimeout+0x8e>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003af6:	9a01      	ldr	r2, [sp, #4]
 8003af8:	b102      	cbz	r2, 8003afc <SPI_WaitFifoStateUntilTimeout+0x84>
 8003afa:	4642      	mov	r2, r8
      {
        tmp_timeout = 0U;
      }
      count--;
 8003afc:	9b01      	ldr	r3, [sp, #4]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	9301      	str	r3, [sp, #4]
 8003b02:	4690      	mov	r8, r2
 8003b04:	e7db      	b.n	8003abe <SPI_WaitFifoStateUntilTimeout+0x46>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b06:	6832      	ldr	r2, [r6, #0]
 8003b08:	6853      	ldr	r3, [r2, #4]
 8003b0a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003b0e:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b10:	6873      	ldr	r3, [r6, #4]
 8003b12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b16:	d00b      	beq.n	8003b30 <SPI_WaitFifoStateUntilTimeout+0xb8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b18:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003b1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b1e:	d014      	beq.n	8003b4a <SPI_WaitFifoStateUntilTimeout+0xd2>
        hspi->State = HAL_SPI_STATE_READY;
 8003b20:	2301      	movs	r3, #1
 8003b22:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8003b26:	2300      	movs	r3, #0
 8003b28:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 8003b2c:	2003      	movs	r0, #3
 8003b2e:	e018      	b.n	8003b62 <SPI_WaitFifoStateUntilTimeout+0xea>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b30:	68b3      	ldr	r3, [r6, #8]
 8003b32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b36:	d002      	beq.n	8003b3e <SPI_WaitFifoStateUntilTimeout+0xc6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b3c:	d1ec      	bne.n	8003b18 <SPI_WaitFifoStateUntilTimeout+0xa0>
          __HAL_SPI_DISABLE(hspi);
 8003b3e:	6832      	ldr	r2, [r6, #0]
 8003b40:	6813      	ldr	r3, [r2, #0]
 8003b42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b46:	6013      	str	r3, [r2, #0]
 8003b48:	e7e6      	b.n	8003b18 <SPI_WaitFifoStateUntilTimeout+0xa0>
          SPI_RESET_CRC(hspi);
 8003b4a:	6832      	ldr	r2, [r6, #0]
 8003b4c:	6813      	ldr	r3, [r2, #0]
 8003b4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b52:	6013      	str	r3, [r2, #0]
 8003b54:	6832      	ldr	r2, [r6, #0]
 8003b56:	6813      	ldr	r3, [r2, #0]
 8003b58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	e7df      	b.n	8003b20 <SPI_WaitFifoStateUntilTimeout+0xa8>
    }
  }

  return HAL_OK;
 8003b60:	2000      	movs	r0, #0
}
 8003b62:	b002      	add	sp, #8
 8003b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b68:	20000f68 	.word	0x20000f68

08003b6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b6c:	b570      	push	{r4, r5, r6, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	4604      	mov	r4, r0
 8003b72:	460d      	mov	r5, r1
 8003b74:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b76:	9200      	str	r2, [sp, #0]
 8003b78:	460b      	mov	r3, r1
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003b80:	f7ff ff7a 	bl	8003a78 <SPI_WaitFifoStateUntilTimeout>
 8003b84:	b9b0      	cbnz	r0, 8003bb4 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b86:	9600      	str	r6, [sp, #0]
 8003b88:	462b      	mov	r3, r5
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2180      	movs	r1, #128	; 0x80
 8003b8e:	4620      	mov	r0, r4
 8003b90:	f7ff ff08 	bl	80039a4 <SPI_WaitFlagStateUntilTimeout>
 8003b94:	b9a8      	cbnz	r0, 8003bc2 <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b96:	9600      	str	r6, [sp, #0]
 8003b98:	462b      	mov	r3, r5
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	f7ff ff69 	bl	8003a78 <SPI_WaitFifoStateUntilTimeout>
 8003ba6:	b150      	cbz	r0, 8003bbe <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ba8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003baa:	f043 0320 	orr.w	r3, r3, #32
 8003bae:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003bb0:	2003      	movs	r0, #3
 8003bb2:	e004      	b.n	8003bbe <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bb4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003bb6:	f043 0320 	orr.w	r3, r3, #32
 8003bba:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003bbc:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8003bbe:	b002      	add	sp, #8
 8003bc0:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bc2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003bc4:	f043 0320 	orr.w	r3, r3, #32
 8003bc8:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003bca:	2003      	movs	r0, #3
 8003bcc:	e7f7      	b.n	8003bbe <SPI_EndRxTxTransaction+0x52>

08003bce <SPI_EndRxTransaction>:
{
 8003bce:	b570      	push	{r4, r5, r6, lr}
 8003bd0:	b082      	sub	sp, #8
 8003bd2:	4604      	mov	r4, r0
 8003bd4:	460d      	mov	r5, r1
 8003bd6:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bd8:	6843      	ldr	r3, [r0, #4]
 8003bda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bde:	d00d      	beq.n	8003bfc <SPI_EndRxTransaction+0x2e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003be0:	9600      	str	r6, [sp, #0]
 8003be2:	462b      	mov	r3, r5
 8003be4:	2200      	movs	r2, #0
 8003be6:	2180      	movs	r1, #128	; 0x80
 8003be8:	4620      	mov	r0, r4
 8003bea:	f7ff fedb 	bl	80039a4 <SPI_WaitFlagStateUntilTimeout>
 8003bee:	b990      	cbnz	r0, 8003c16 <SPI_EndRxTransaction+0x48>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bf0:	6863      	ldr	r3, [r4, #4]
 8003bf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bf6:	d014      	beq.n	8003c22 <SPI_EndRxTransaction+0x54>
}
 8003bf8:	b002      	add	sp, #8
 8003bfa:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bfc:	6883      	ldr	r3, [r0, #8]
 8003bfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c02:	d002      	beq.n	8003c0a <SPI_EndRxTransaction+0x3c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c08:	d1ea      	bne.n	8003be0 <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 8003c0a:	6822      	ldr	r2, [r4, #0]
 8003c0c:	6813      	ldr	r3, [r2, #0]
 8003c0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c12:	6013      	str	r3, [r2, #0]
 8003c14:	e7e4      	b.n	8003be0 <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c16:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003c18:	f043 0320 	orr.w	r3, r3, #32
 8003c1c:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c1e:	2003      	movs	r0, #3
 8003c20:	e7ea      	b.n	8003bf8 <SPI_EndRxTransaction+0x2a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c22:	68a3      	ldr	r3, [r4, #8]
 8003c24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c28:	d002      	beq.n	8003c30 <SPI_EndRxTransaction+0x62>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c2e:	d1e3      	bne.n	8003bf8 <SPI_EndRxTransaction+0x2a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c30:	9600      	str	r6, [sp, #0]
 8003c32:	462b      	mov	r3, r5
 8003c34:	2200      	movs	r2, #0
 8003c36:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003c3a:	4620      	mov	r0, r4
 8003c3c:	f7ff ff1c 	bl	8003a78 <SPI_WaitFifoStateUntilTimeout>
 8003c40:	2800      	cmp	r0, #0
 8003c42:	d0d9      	beq.n	8003bf8 <SPI_EndRxTransaction+0x2a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c44:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003c46:	f043 0320 	orr.w	r3, r3, #32
 8003c4a:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8003c4c:	2003      	movs	r0, #3
 8003c4e:	e7d3      	b.n	8003bf8 <SPI_EndRxTransaction+0x2a>

08003c50 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003c50:	2800      	cmp	r0, #0
 8003c52:	d06a      	beq.n	8003d2a <HAL_SPI_Init+0xda>
{
 8003c54:	b510      	push	{r4, lr}
 8003c56:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c58:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003c5a:	b933      	cbnz	r3, 8003c6a <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c5c:	6843      	ldr	r3, [r0, #4]
 8003c5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c62:	d005      	beq.n	8003c70 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c64:	2300      	movs	r3, #0
 8003c66:	61c3      	str	r3, [r0, #28]
 8003c68:	e002      	b.n	8003c70 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c6e:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c70:	2300      	movs	r3, #0
 8003c72:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c74:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d04d      	beq.n	8003d18 <HAL_SPI_Init+0xc8>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8003c82:	6822      	ldr	r2, [r4, #0]
 8003c84:	6813      	ldr	r3, [r2, #0]
 8003c86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c8a:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c8c:	68e3      	ldr	r3, [r4, #12]
 8003c8e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c92:	d947      	bls.n	8003d24 <HAL_SPI_Init+0xd4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c94:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c96:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003c9a:	d004      	beq.n	8003ca6 <HAL_SPI_Init+0x56>
 8003c9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ca0:	d001      	beq.n	8003ca6 <HAL_SPI_Init+0x56>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ca6:	6863      	ldr	r3, [r4, #4]
 8003ca8:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003cac:	68a1      	ldr	r1, [r4, #8]
 8003cae:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8003cb2:	430b      	orrs	r3, r1
 8003cb4:	6921      	ldr	r1, [r4, #16]
 8003cb6:	f001 0102 	and.w	r1, r1, #2
 8003cba:	430b      	orrs	r3, r1
 8003cbc:	6961      	ldr	r1, [r4, #20]
 8003cbe:	f001 0101 	and.w	r1, r1, #1
 8003cc2:	430b      	orrs	r3, r1
 8003cc4:	69a1      	ldr	r1, [r4, #24]
 8003cc6:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8003cca:	430b      	orrs	r3, r1
 8003ccc:	69e1      	ldr	r1, [r4, #28]
 8003cce:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8003cd2:	430b      	orrs	r3, r1
 8003cd4:	6a21      	ldr	r1, [r4, #32]
 8003cd6:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003cda:	430b      	orrs	r3, r1
 8003cdc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003cde:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8003ce2:	6820      	ldr	r0, [r4, #0]
 8003ce4:	430b      	orrs	r3, r1
 8003ce6:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003ce8:	8b63      	ldrh	r3, [r4, #26]
 8003cea:	f003 0304 	and.w	r3, r3, #4
 8003cee:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003cf0:	f001 0110 	and.w	r1, r1, #16
 8003cf4:	430b      	orrs	r3, r1
 8003cf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cf8:	f001 0108 	and.w	r1, r1, #8
 8003cfc:	430b      	orrs	r3, r1
 8003cfe:	68e1      	ldr	r1, [r4, #12]
 8003d00:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8003d04:	430b      	orrs	r3, r1
 8003d06:	6821      	ldr	r1, [r4, #0]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	604b      	str	r3, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d0c:	2000      	movs	r0, #0
 8003d0e:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d10:	2301      	movs	r3, #1
 8003d12:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8003d16:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003d18:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8003d1c:	4620      	mov	r0, r4
 8003d1e:	f7fe fe31 	bl	8002984 <HAL_SPI_MspInit>
 8003d22:	e7ab      	b.n	8003c7c <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d28:	e7b5      	b.n	8003c96 <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8003d2a:	2001      	movs	r0, #1
}
 8003d2c:	4770      	bx	lr

08003d2e <HAL_SPI_Transmit>:
{
 8003d2e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d32:	b083      	sub	sp, #12
 8003d34:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8003d36:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	f000 80f6 	beq.w	8003f2c <HAL_SPI_Transmit+0x1fe>
 8003d40:	4604      	mov	r4, r0
 8003d42:	4688      	mov	r8, r1
 8003d44:	4691      	mov	r9, r2
 8003d46:	2301      	movs	r3, #1
 8003d48:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003d4c:	f7fe ffc0 	bl	8002cd0 <HAL_GetTick>
 8003d50:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003d52:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 8003d56:	b2f6      	uxtb	r6, r6
 8003d58:	2e01      	cmp	r6, #1
 8003d5a:	f040 80d4 	bne.w	8003f06 <HAL_SPI_Transmit+0x1d8>
  if ((pData == NULL) || (Size == 0U))
 8003d5e:	f1b8 0f00 	cmp.w	r8, #0
 8003d62:	f000 80d1 	beq.w	8003f08 <HAL_SPI_Transmit+0x1da>
 8003d66:	f1b9 0f00 	cmp.w	r9, #0
 8003d6a:	f000 80cd 	beq.w	8003f08 <HAL_SPI_Transmit+0x1da>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d74:	2300      	movs	r3, #0
 8003d76:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d78:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003d7c:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003d80:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d84:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003d86:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003d8a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003d8e:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003d90:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d92:	68a3      	ldr	r3, [r4, #8]
 8003d94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d98:	d01e      	beq.n	8003dd8 <HAL_SPI_Transmit+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d9a:	6823      	ldr	r3, [r4, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003da2:	d103      	bne.n	8003dac <HAL_SPI_Transmit+0x7e>
    __HAL_SPI_ENABLE(hspi);
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003daa:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003dac:	68e3      	ldr	r3, [r4, #12]
 8003dae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003db2:	d942      	bls.n	8003e3a <HAL_SPI_Transmit+0x10c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003db4:	6863      	ldr	r3, [r4, #4]
 8003db6:	b113      	cbz	r3, 8003dbe <HAL_SPI_Transmit+0x90>
 8003db8:	f1b9 0f01 	cmp.w	r9, #1
 8003dbc:	d123      	bne.n	8003e06 <HAL_SPI_Transmit+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dbe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003dc0:	6823      	ldr	r3, [r4, #0]
 8003dc2:	8812      	ldrh	r2, [r2, #0]
 8003dc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dc6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003dc8:	3302      	adds	r3, #2
 8003dca:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003dcc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003dd6:	e016      	b.n	8003e06 <HAL_SPI_Transmit+0xd8>
    __HAL_SPI_DISABLE(hspi);
 8003dd8:	6822      	ldr	r2, [r4, #0]
 8003dda:	6813      	ldr	r3, [r2, #0]
 8003ddc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003de0:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8003de2:	6822      	ldr	r2, [r4, #0]
 8003de4:	6813      	ldr	r3, [r2, #0]
 8003de6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dea:	6013      	str	r3, [r2, #0]
 8003dec:	e7d5      	b.n	8003d9a <HAL_SPI_Transmit+0x6c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dee:	f7fe ff6f 	bl	8002cd0 <HAL_GetTick>
 8003df2:	1bc0      	subs	r0, r0, r7
 8003df4:	42a8      	cmp	r0, r5
 8003df6:	d303      	bcc.n	8003e00 <HAL_SPI_Transmit+0xd2>
 8003df8:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003dfc:	f040 808e 	bne.w	8003f1c <HAL_SPI_Transmit+0x1ee>
 8003e00:	2d00      	cmp	r5, #0
 8003e02:	f000 808d 	beq.w	8003f20 <HAL_SPI_Transmit+0x1f2>
    while (hspi->TxXferCount > 0U)
 8003e06:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d066      	beq.n	8003edc <HAL_SPI_Transmit+0x1ae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e0e:	6823      	ldr	r3, [r4, #0]
 8003e10:	689a      	ldr	r2, [r3, #8]
 8003e12:	f012 0f02 	tst.w	r2, #2
 8003e16:	d0ea      	beq.n	8003dee <HAL_SPI_Transmit+0xc0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e18:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003e1a:	8812      	ldrh	r2, [r2, #0]
 8003e1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e20:	3302      	adds	r3, #2
 8003e22:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003e24:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 8003e28:	fa1f fc8c 	uxth.w	ip, ip
 8003e2c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003e30:	fa1f fc8c 	uxth.w	ip, ip
 8003e34:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 8003e38:	e7e5      	b.n	8003e06 <HAL_SPI_Transmit+0xd8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e3a:	6863      	ldr	r3, [r4, #4]
 8003e3c:	b113      	cbz	r3, 8003e44 <HAL_SPI_Transmit+0x116>
 8003e3e:	f1b9 0f01 	cmp.w	r9, #1
 8003e42:	d133      	bne.n	8003eac <HAL_SPI_Transmit+0x17e>
      if (hspi->TxXferCount > 1U)
 8003e44:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d90c      	bls.n	8003e66 <HAL_SPI_Transmit+0x138>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e4c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003e4e:	6823      	ldr	r3, [r4, #0]
 8003e50:	8812      	ldrh	r2, [r2, #0]
 8003e52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e56:	3302      	adds	r3, #2
 8003e58:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003e5a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	3b02      	subs	r3, #2
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003e64:	e022      	b.n	8003eac <HAL_SPI_Transmit+0x17e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e66:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003e68:	6823      	ldr	r3, [r4, #0]
 8003e6a:	7812      	ldrb	r2, [r2, #0]
 8003e6c:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8003e6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e70:	3301      	adds	r3, #1
 8003e72:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003e74:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003e7e:	e015      	b.n	8003eac <HAL_SPI_Transmit+0x17e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8003e86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e88:	3301      	adds	r3, #1
 8003e8a:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8003e8c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	3b01      	subs	r3, #1
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003e96:	e009      	b.n	8003eac <HAL_SPI_Transmit+0x17e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e98:	f7fe ff1a 	bl	8002cd0 <HAL_GetTick>
 8003e9c:	1bc0      	subs	r0, r0, r7
 8003e9e:	42a8      	cmp	r0, r5
 8003ea0:	d302      	bcc.n	8003ea8 <HAL_SPI_Transmit+0x17a>
 8003ea2:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003ea6:	d13d      	bne.n	8003f24 <HAL_SPI_Transmit+0x1f6>
 8003ea8:	2d00      	cmp	r5, #0
 8003eaa:	d03d      	beq.n	8003f28 <HAL_SPI_Transmit+0x1fa>
    while (hspi->TxXferCount > 0U)
 8003eac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	b1a3      	cbz	r3, 8003edc <HAL_SPI_Transmit+0x1ae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003eb2:	6822      	ldr	r2, [r4, #0]
 8003eb4:	6893      	ldr	r3, [r2, #8]
 8003eb6:	f013 0f02 	tst.w	r3, #2
 8003eba:	d0ed      	beq.n	8003e98 <HAL_SPI_Transmit+0x16a>
        if (hspi->TxXferCount > 1U)
 8003ebc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d9dd      	bls.n	8003e80 <HAL_SPI_Transmit+0x152>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ec4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003ec6:	881b      	ldrh	r3, [r3, #0]
 8003ec8:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003ecc:	3302      	adds	r3, #2
 8003ece:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003ed0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	3b02      	subs	r3, #2
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003eda:	e7e7      	b.n	8003eac <HAL_SPI_Transmit+0x17e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003edc:	463a      	mov	r2, r7
 8003ede:	4629      	mov	r1, r5
 8003ee0:	4620      	mov	r0, r4
 8003ee2:	f7ff fe43 	bl	8003b6c <SPI_EndRxTxTransaction>
 8003ee6:	b108      	cbz	r0, 8003eec <HAL_SPI_Transmit+0x1be>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ee8:	2320      	movs	r3, #32
 8003eea:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003eec:	68a3      	ldr	r3, [r4, #8]
 8003eee:	b933      	cbnz	r3, 8003efe <HAL_SPI_Transmit+0x1d0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ef0:	9301      	str	r3, [sp, #4]
 8003ef2:	6823      	ldr	r3, [r4, #0]
 8003ef4:	68da      	ldr	r2, [r3, #12]
 8003ef6:	9201      	str	r2, [sp, #4]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	9301      	str	r3, [sp, #4]
 8003efc:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003efe:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003f00:	b913      	cbnz	r3, 8003f08 <HAL_SPI_Transmit+0x1da>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f02:	2600      	movs	r6, #0
 8003f04:	e000      	b.n	8003f08 <HAL_SPI_Transmit+0x1da>
    errorcode = HAL_BUSY;
 8003f06:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003f0e:	2300      	movs	r3, #0
 8003f10:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8003f14:	4630      	mov	r0, r6
 8003f16:	b003      	add	sp, #12
 8003f18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8003f1c:	2603      	movs	r6, #3
 8003f1e:	e7f3      	b.n	8003f08 <HAL_SPI_Transmit+0x1da>
 8003f20:	2603      	movs	r6, #3
 8003f22:	e7f1      	b.n	8003f08 <HAL_SPI_Transmit+0x1da>
          errorcode = HAL_TIMEOUT;
 8003f24:	2603      	movs	r6, #3
 8003f26:	e7ef      	b.n	8003f08 <HAL_SPI_Transmit+0x1da>
 8003f28:	2603      	movs	r6, #3
 8003f2a:	e7ed      	b.n	8003f08 <HAL_SPI_Transmit+0x1da>
  __HAL_LOCK(hspi);
 8003f2c:	2602      	movs	r6, #2
 8003f2e:	e7f1      	b.n	8003f14 <HAL_SPI_Transmit+0x1e6>

08003f30 <HAL_SPI_TransmitReceive>:
{
 8003f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f34:	461f      	mov	r7, r3
 8003f36:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 8003f38:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	f000 8164 	beq.w	800420a <HAL_SPI_TransmitReceive+0x2da>
 8003f42:	4604      	mov	r4, r0
 8003f44:	4688      	mov	r8, r1
 8003f46:	4691      	mov	r9, r2
 8003f48:	2301      	movs	r3, #1
 8003f4a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003f4e:	f7fe febf 	bl	8002cd0 <HAL_GetTick>
 8003f52:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8003f54:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003f58:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8003f5a:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d00a      	beq.n	8003f76 <HAL_SPI_TransmitReceive+0x46>
 8003f60:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003f64:	f040 8138 	bne.w	80041d8 <HAL_SPI_TransmitReceive+0x2a8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f68:	68a2      	ldr	r2, [r4, #8]
 8003f6a:	2a00      	cmp	r2, #0
 8003f6c:	f040 813d 	bne.w	80041ea <HAL_SPI_TransmitReceive+0x2ba>
 8003f70:	2b04      	cmp	r3, #4
 8003f72:	f040 813c 	bne.w	80041ee <HAL_SPI_TransmitReceive+0x2be>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f76:	f1b8 0f00 	cmp.w	r8, #0
 8003f7a:	f000 813a 	beq.w	80041f2 <HAL_SPI_TransmitReceive+0x2c2>
 8003f7e:	f1b9 0f00 	cmp.w	r9, #0
 8003f82:	f000 8138 	beq.w	80041f6 <HAL_SPI_TransmitReceive+0x2c6>
 8003f86:	2f00      	cmp	r7, #0
 8003f88:	f000 8137 	beq.w	80041fa <HAL_SPI_TransmitReceive+0x2ca>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f8c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	d002      	beq.n	8003f9c <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f96:	2305      	movs	r3, #5
 8003f98:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003fa0:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003fa4:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003fa8:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003fac:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003fb0:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003fb2:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8003fb4:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003fb6:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003fb8:	68e3      	ldr	r3, [r4, #12]
 8003fba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fbe:	d801      	bhi.n	8003fc4 <HAL_SPI_TransmitReceive+0x94>
 8003fc0:	2f01      	cmp	r7, #1
 8003fc2:	d923      	bls.n	800400c <HAL_SPI_TransmitReceive+0xdc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fc4:	6822      	ldr	r2, [r4, #0]
 8003fc6:	6853      	ldr	r3, [r2, #4]
 8003fc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fcc:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003fd6:	d103      	bne.n	8003fe0 <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fde:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fe0:	68e3      	ldr	r3, [r4, #12]
 8003fe2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fe6:	d958      	bls.n	800409a <HAL_SPI_TransmitReceive+0x16a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fe8:	6863      	ldr	r3, [r4, #4]
 8003fea:	b10b      	cbz	r3, 8003ff0 <HAL_SPI_TransmitReceive+0xc0>
 8003fec:	2f01      	cmp	r7, #1
 8003fee:	d10b      	bne.n	8004008 <HAL_SPI_TransmitReceive+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ff0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003ff2:	6823      	ldr	r3, [r4, #0]
 8003ff4:	8812      	ldrh	r2, [r2, #0]
 8003ff6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ff8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003ffa:	3302      	adds	r3, #2
 8003ffc:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003ffe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004000:	b29b      	uxth	r3, r3
 8004002:	3b01      	subs	r3, #1
 8004004:	b29b      	uxth	r3, r3
 8004006:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004008:	2701      	movs	r7, #1
 800400a:	e031      	b.n	8004070 <HAL_SPI_TransmitReceive+0x140>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800400c:	6822      	ldr	r2, [r4, #0]
 800400e:	6853      	ldr	r3, [r2, #4]
 8004010:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004014:	6053      	str	r3, [r2, #4]
 8004016:	e7da      	b.n	8003fce <HAL_SPI_TransmitReceive+0x9e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004018:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800401a:	8812      	ldrh	r2, [r2, #0]
 800401c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800401e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004020:	3302      	adds	r3, #2
 8004022:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004024:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004026:	b29b      	uxth	r3, r3
 8004028:	3b01      	subs	r3, #1
 800402a:	b29b      	uxth	r3, r3
 800402c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800402e:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004030:	6823      	ldr	r3, [r4, #0]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	f012 0f01 	tst.w	r2, #1
 8004038:	d011      	beq.n	800405e <HAL_SPI_TransmitReceive+0x12e>
 800403a:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800403e:	b292      	uxth	r2, r2
 8004040:	b16a      	cbz	r2, 800405e <HAL_SPI_TransmitReceive+0x12e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004042:	68da      	ldr	r2, [r3, #12]
 8004044:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004046:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004048:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800404a:	3302      	adds	r3, #2
 800404c:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800404e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004052:	b29b      	uxth	r3, r3
 8004054:	3b01      	subs	r3, #1
 8004056:	b29b      	uxth	r3, r3
 8004058:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800405c:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800405e:	f7fe fe37 	bl	8002cd0 <HAL_GetTick>
 8004062:	1b83      	subs	r3, r0, r6
 8004064:	42ab      	cmp	r3, r5
 8004066:	d303      	bcc.n	8004070 <HAL_SPI_TransmitReceive+0x140>
 8004068:	f1b5 3fff 	cmp.w	r5, #4294967295
 800406c:	f040 80c7 	bne.w	80041fe <HAL_SPI_TransmitReceive+0x2ce>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004070:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004072:	b29b      	uxth	r3, r3
 8004074:	b92b      	cbnz	r3, 8004082 <HAL_SPI_TransmitReceive+0x152>
 8004076:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800407a:	b29b      	uxth	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 80a1 	beq.w	80041c4 <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004082:	6823      	ldr	r3, [r4, #0]
 8004084:	689a      	ldr	r2, [r3, #8]
 8004086:	f012 0f02 	tst.w	r2, #2
 800408a:	d0d1      	beq.n	8004030 <HAL_SPI_TransmitReceive+0x100>
 800408c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800408e:	b292      	uxth	r2, r2
 8004090:	2a00      	cmp	r2, #0
 8004092:	d0cd      	beq.n	8004030 <HAL_SPI_TransmitReceive+0x100>
 8004094:	2f00      	cmp	r7, #0
 8004096:	d0cb      	beq.n	8004030 <HAL_SPI_TransmitReceive+0x100>
 8004098:	e7be      	b.n	8004018 <HAL_SPI_TransmitReceive+0xe8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800409a:	6863      	ldr	r3, [r4, #4]
 800409c:	b10b      	cbz	r3, 80040a2 <HAL_SPI_TransmitReceive+0x172>
 800409e:	2f01      	cmp	r7, #1
 80040a0:	d10f      	bne.n	80040c2 <HAL_SPI_TransmitReceive+0x192>
      if (hspi->TxXferCount > 1U)
 80040a2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d90d      	bls.n	80040c6 <HAL_SPI_TransmitReceive+0x196>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040aa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80040ac:	6823      	ldr	r3, [r4, #0]
 80040ae:	8812      	ldrh	r2, [r2, #0]
 80040b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80040b4:	3302      	adds	r3, #2
 80040b6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80040b8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b02      	subs	r3, #2
 80040be:	b29b      	uxth	r3, r3
 80040c0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80040c2:	2701      	movs	r7, #1
 80040c4:	e049      	b.n	800415a <HAL_SPI_TransmitReceive+0x22a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80040c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80040c8:	6823      	ldr	r3, [r4, #0]
 80040ca:	7812      	ldrb	r2, [r2, #0]
 80040cc:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80040ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80040d0:	3301      	adds	r3, #1
 80040d2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80040d4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29b      	uxth	r3, r3
 80040dc:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80040de:	e7f0      	b.n	80040c2 <HAL_SPI_TransmitReceive+0x192>
        if (hspi->TxXferCount > 1U)
 80040e0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80040e2:	b292      	uxth	r2, r2
 80040e4:	2a01      	cmp	r2, #1
 80040e6:	d90c      	bls.n	8004102 <HAL_SPI_TransmitReceive+0x1d2>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80040ea:	8812      	ldrh	r2, [r2, #0]
 80040ec:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80040ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80040f0:	3302      	adds	r3, #2
 80040f2:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80040f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	3b02      	subs	r3, #2
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80040fe:	2700      	movs	r7, #0
 8004100:	e03d      	b.n	800417e <HAL_SPI_TransmitReceive+0x24e>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004102:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004104:	7812      	ldrb	r2, [r2, #0]
 8004106:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 8004108:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800410a:	3301      	adds	r3, #1
 800410c:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800410e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004110:	b29b      	uxth	r3, r3
 8004112:	3b01      	subs	r3, #1
 8004114:	b29b      	uxth	r3, r3
 8004116:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8004118:	2700      	movs	r7, #0
 800411a:	e030      	b.n	800417e <HAL_SPI_TransmitReceive+0x24e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800411c:	6822      	ldr	r2, [r4, #0]
 800411e:	6853      	ldr	r3, [r2, #4]
 8004120:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004124:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8004126:	2701      	movs	r7, #1
 8004128:	e00d      	b.n	8004146 <HAL_SPI_TransmitReceive+0x216>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800412a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800412c:	7b1b      	ldrb	r3, [r3, #12]
 800412e:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 8004130:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004132:	3301      	adds	r3, #1
 8004134:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8004136:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800413a:	b29b      	uxth	r3, r3
 800413c:	3b01      	subs	r3, #1
 800413e:	b29b      	uxth	r3, r3
 8004140:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8004144:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004146:	f7fe fdc3 	bl	8002cd0 <HAL_GetTick>
 800414a:	1b80      	subs	r0, r0, r6
 800414c:	42a8      	cmp	r0, r5
 800414e:	d302      	bcc.n	8004156 <HAL_SPI_TransmitReceive+0x226>
 8004150:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004154:	d155      	bne.n	8004202 <HAL_SPI_TransmitReceive+0x2d2>
 8004156:	2d00      	cmp	r5, #0
 8004158:	d055      	beq.n	8004206 <HAL_SPI_TransmitReceive+0x2d6>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800415a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800415c:	b29b      	uxth	r3, r3
 800415e:	b923      	cbnz	r3, 800416a <HAL_SPI_TransmitReceive+0x23a>
 8004160:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004164:	b29b      	uxth	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d02c      	beq.n	80041c4 <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800416a:	6823      	ldr	r3, [r4, #0]
 800416c:	689a      	ldr	r2, [r3, #8]
 800416e:	f012 0f02 	tst.w	r2, #2
 8004172:	d004      	beq.n	800417e <HAL_SPI_TransmitReceive+0x24e>
 8004174:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004176:	b292      	uxth	r2, r2
 8004178:	b10a      	cbz	r2, 800417e <HAL_SPI_TransmitReceive+0x24e>
 800417a:	2f00      	cmp	r7, #0
 800417c:	d1b0      	bne.n	80040e0 <HAL_SPI_TransmitReceive+0x1b0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800417e:	6823      	ldr	r3, [r4, #0]
 8004180:	689a      	ldr	r2, [r3, #8]
 8004182:	f012 0f01 	tst.w	r2, #1
 8004186:	d0de      	beq.n	8004146 <HAL_SPI_TransmitReceive+0x216>
 8004188:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800418c:	b292      	uxth	r2, r2
 800418e:	2a00      	cmp	r2, #0
 8004190:	d0d9      	beq.n	8004146 <HAL_SPI_TransmitReceive+0x216>
        if (hspi->RxXferCount > 1U)
 8004192:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8004196:	b292      	uxth	r2, r2
 8004198:	2a01      	cmp	r2, #1
 800419a:	d9c6      	bls.n	800412a <HAL_SPI_TransmitReceive+0x1fa>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800419c:	68da      	ldr	r2, [r3, #12]
 800419e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041a0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80041a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041a4:	3302      	adds	r3, #2
 80041a6:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80041a8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	3b02      	subs	r3, #2
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80041b6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d9ad      	bls.n	800411c <HAL_SPI_TransmitReceive+0x1ec>
        txallowed = 1U;
 80041c0:	2701      	movs	r7, #1
 80041c2:	e7c0      	b.n	8004146 <HAL_SPI_TransmitReceive+0x216>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041c4:	4632      	mov	r2, r6
 80041c6:	4629      	mov	r1, r5
 80041c8:	4620      	mov	r0, r4
 80041ca:	f7ff fccf 	bl	8003b6c <SPI_EndRxTxTransaction>
 80041ce:	b120      	cbz	r0, 80041da <HAL_SPI_TransmitReceive+0x2aa>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041d0:	2320      	movs	r3, #32
 80041d2:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 80041d4:	2001      	movs	r0, #1
 80041d6:	e000      	b.n	80041da <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_BUSY;
 80041d8:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80041da:	2301      	movs	r3, #1
 80041dc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80041e0:	2300      	movs	r3, #0
 80041e2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80041e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 80041ea:	2002      	movs	r0, #2
 80041ec:	e7f5      	b.n	80041da <HAL_SPI_TransmitReceive+0x2aa>
 80041ee:	2002      	movs	r0, #2
 80041f0:	e7f3      	b.n	80041da <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_ERROR;
 80041f2:	2001      	movs	r0, #1
 80041f4:	e7f1      	b.n	80041da <HAL_SPI_TransmitReceive+0x2aa>
 80041f6:	2001      	movs	r0, #1
 80041f8:	e7ef      	b.n	80041da <HAL_SPI_TransmitReceive+0x2aa>
 80041fa:	2001      	movs	r0, #1
 80041fc:	e7ed      	b.n	80041da <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 80041fe:	2003      	movs	r0, #3
 8004200:	e7eb      	b.n	80041da <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 8004202:	2003      	movs	r0, #3
 8004204:	e7e9      	b.n	80041da <HAL_SPI_TransmitReceive+0x2aa>
 8004206:	2003      	movs	r0, #3
 8004208:	e7e7      	b.n	80041da <HAL_SPI_TransmitReceive+0x2aa>
  __HAL_LOCK(hspi);
 800420a:	2002      	movs	r0, #2
 800420c:	e7eb      	b.n	80041e6 <HAL_SPI_TransmitReceive+0x2b6>

0800420e <HAL_SPI_Receive>:
{
 800420e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004212:	b083      	sub	sp, #12
 8004214:	4604      	mov	r4, r0
 8004216:	4688      	mov	r8, r1
 8004218:	4691      	mov	r9, r2
 800421a:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800421c:	6840      	ldr	r0, [r0, #4]
 800421e:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8004222:	d043      	beq.n	80042ac <HAL_SPI_Receive+0x9e>
  __HAL_LOCK(hspi);
 8004224:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8004228:	2b01      	cmp	r3, #1
 800422a:	f000 80c3 	beq.w	80043b4 <HAL_SPI_Receive+0x1a6>
 800422e:	2301      	movs	r3, #1
 8004230:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8004234:	f7fe fd4c 	bl	8002cd0 <HAL_GetTick>
 8004238:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800423a:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 800423e:	b2f6      	uxtb	r6, r6
 8004240:	2e01      	cmp	r6, #1
 8004242:	f040 80a4 	bne.w	800438e <HAL_SPI_Receive+0x180>
  if ((pData == NULL) || (Size == 0U))
 8004246:	f1b8 0f00 	cmp.w	r8, #0
 800424a:	f000 80a1 	beq.w	8004390 <HAL_SPI_Receive+0x182>
 800424e:	f1b9 0f00 	cmp.w	r9, #0
 8004252:	f000 809d 	beq.w	8004390 <HAL_SPI_Receive+0x182>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004256:	2304      	movs	r3, #4
 8004258:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800425c:	2300      	movs	r3, #0
 800425e:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004260:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004264:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004268:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800426c:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800426e:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004270:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004272:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004274:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004276:	68e3      	ldr	r3, [r4, #12]
 8004278:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800427c:	d924      	bls.n	80042c8 <HAL_SPI_Receive+0xba>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800427e:	6822      	ldr	r2, [r4, #0]
 8004280:	6853      	ldr	r3, [r2, #4]
 8004282:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004286:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004288:	68a3      	ldr	r3, [r4, #8]
 800428a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800428e:	d021      	beq.n	80042d4 <HAL_SPI_Receive+0xc6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004290:	6823      	ldr	r3, [r4, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004298:	d103      	bne.n	80042a2 <HAL_SPI_Receive+0x94>
    __HAL_SPI_ENABLE(hspi);
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042a0:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80042a2:	68e3      	ldr	r3, [r4, #12]
 80042a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042a8:	d929      	bls.n	80042fe <HAL_SPI_Receive+0xf0>
 80042aa:	e04a      	b.n	8004342 <HAL_SPI_Receive+0x134>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80042ac:	68a3      	ldr	r3, [r4, #8]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1b8      	bne.n	8004224 <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80042b2:	2304      	movs	r3, #4
 80042b4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80042b8:	9500      	str	r5, [sp, #0]
 80042ba:	4613      	mov	r3, r2
 80042bc:	460a      	mov	r2, r1
 80042be:	4620      	mov	r0, r4
 80042c0:	f7ff fe36 	bl	8003f30 <HAL_SPI_TransmitReceive>
 80042c4:	4606      	mov	r6, r0
 80042c6:	e069      	b.n	800439c <HAL_SPI_Receive+0x18e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042c8:	6822      	ldr	r2, [r4, #0]
 80042ca:	6853      	ldr	r3, [r2, #4]
 80042cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042d0:	6053      	str	r3, [r2, #4]
 80042d2:	e7d9      	b.n	8004288 <HAL_SPI_Receive+0x7a>
    __HAL_SPI_DISABLE(hspi);
 80042d4:	6822      	ldr	r2, [r4, #0]
 80042d6:	6813      	ldr	r3, [r2, #0]
 80042d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042dc:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 80042de:	6822      	ldr	r2, [r4, #0]
 80042e0:	6813      	ldr	r3, [r2, #0]
 80042e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042e6:	6013      	str	r3, [r2, #0]
 80042e8:	e7d2      	b.n	8004290 <HAL_SPI_Receive+0x82>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042ea:	f7fe fcf1 	bl	8002cd0 <HAL_GetTick>
 80042ee:	1bc0      	subs	r0, r0, r7
 80042f0:	42a8      	cmp	r0, r5
 80042f2:	d302      	bcc.n	80042fa <HAL_SPI_Receive+0xec>
 80042f4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80042f8:	d154      	bne.n	80043a4 <HAL_SPI_Receive+0x196>
 80042fa:	2d00      	cmp	r5, #0
 80042fc:	d054      	beq.n	80043a8 <HAL_SPI_Receive+0x19a>
    while (hspi->RxXferCount > 0U)
 80042fe:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004302:	b29b      	uxth	r3, r3
 8004304:	2b00      	cmp	r3, #0
 8004306:	d036      	beq.n	8004376 <HAL_SPI_Receive+0x168>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004308:	6823      	ldr	r3, [r4, #0]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	f012 0f01 	tst.w	r2, #1
 8004310:	d0eb      	beq.n	80042ea <HAL_SPI_Receive+0xdc>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004312:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004314:	7b1b      	ldrb	r3, [r3, #12]
 8004316:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004318:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800431a:	3301      	adds	r3, #1
 800431c:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800431e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004322:	b29b      	uxth	r3, r3
 8004324:	3b01      	subs	r3, #1
 8004326:	b29b      	uxth	r3, r3
 8004328:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800432c:	e7e7      	b.n	80042fe <HAL_SPI_Receive+0xf0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800432e:	f7fe fccf 	bl	8002cd0 <HAL_GetTick>
 8004332:	1bc0      	subs	r0, r0, r7
 8004334:	42a8      	cmp	r0, r5
 8004336:	d302      	bcc.n	800433e <HAL_SPI_Receive+0x130>
 8004338:	f1b5 3fff 	cmp.w	r5, #4294967295
 800433c:	d136      	bne.n	80043ac <HAL_SPI_Receive+0x19e>
 800433e:	2d00      	cmp	r5, #0
 8004340:	d036      	beq.n	80043b0 <HAL_SPI_Receive+0x1a2>
    while (hspi->RxXferCount > 0U)
 8004342:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004346:	b29b      	uxth	r3, r3
 8004348:	b1ab      	cbz	r3, 8004376 <HAL_SPI_Receive+0x168>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800434a:	6823      	ldr	r3, [r4, #0]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	f012 0f01 	tst.w	r2, #1
 8004352:	d0ec      	beq.n	800432e <HAL_SPI_Receive+0x120>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004358:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800435a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800435c:	3302      	adds	r3, #2
 800435e:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8004360:	f8b4 c046 	ldrh.w	ip, [r4, #70]	; 0x46
 8004364:	fa1f fc8c 	uxth.w	ip, ip
 8004368:	f10c 3cff 	add.w	ip, ip, #4294967295
 800436c:	fa1f fc8c 	uxth.w	ip, ip
 8004370:	f8a4 c046 	strh.w	ip, [r4, #70]	; 0x46
 8004374:	e7e5      	b.n	8004342 <HAL_SPI_Receive+0x134>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004376:	463a      	mov	r2, r7
 8004378:	4629      	mov	r1, r5
 800437a:	4620      	mov	r0, r4
 800437c:	f7ff fc27 	bl	8003bce <SPI_EndRxTransaction>
 8004380:	b108      	cbz	r0, 8004386 <HAL_SPI_Receive+0x178>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004382:	2320      	movs	r3, #32
 8004384:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004386:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004388:	b913      	cbnz	r3, 8004390 <HAL_SPI_Receive+0x182>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800438a:	2600      	movs	r6, #0
 800438c:	e000      	b.n	8004390 <HAL_SPI_Receive+0x182>
    errorcode = HAL_BUSY;
 800438e:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004390:	2301      	movs	r3, #1
 8004392:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004396:	2300      	movs	r3, #0
 8004398:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800439c:	4630      	mov	r0, r6
 800439e:	b003      	add	sp, #12
 80043a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 80043a4:	2603      	movs	r6, #3
 80043a6:	e7f3      	b.n	8004390 <HAL_SPI_Receive+0x182>
 80043a8:	2603      	movs	r6, #3
 80043aa:	e7f1      	b.n	8004390 <HAL_SPI_Receive+0x182>
          errorcode = HAL_TIMEOUT;
 80043ac:	2603      	movs	r6, #3
 80043ae:	e7ef      	b.n	8004390 <HAL_SPI_Receive+0x182>
 80043b0:	2603      	movs	r6, #3
 80043b2:	e7ed      	b.n	8004390 <HAL_SPI_Receive+0x182>
  __HAL_LOCK(hspi);
 80043b4:	2602      	movs	r6, #2
 80043b6:	e7f1      	b.n	800439c <HAL_SPI_Receive+0x18e>

080043b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043b8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ba:	6a03      	ldr	r3, [r0, #32]
 80043bc:	f023 0301 	bic.w	r3, r3, #1
 80043c0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043c2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c4:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043c6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80043cc:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043d0:	680c      	ldr	r4, [r1, #0]
 80043d2:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043d4:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043d8:	688c      	ldr	r4, [r1, #8]
 80043da:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043dc:	4c15      	ldr	r4, [pc, #84]	; (8004434 <TIM_OC1_SetConfig+0x7c>)
 80043de:	42a0      	cmp	r0, r4
 80043e0:	d007      	beq.n	80043f2 <TIM_OC1_SetConfig+0x3a>
 80043e2:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 80043e6:	42a0      	cmp	r0, r4
 80043e8:	d003      	beq.n	80043f2 <TIM_OC1_SetConfig+0x3a>
 80043ea:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80043ee:	42a0      	cmp	r0, r4
 80043f0:	d105      	bne.n	80043fe <TIM_OC1_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043f2:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043f6:	68cc      	ldr	r4, [r1, #12]
 80043f8:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043fa:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043fe:	4c0d      	ldr	r4, [pc, #52]	; (8004434 <TIM_OC1_SetConfig+0x7c>)
 8004400:	42a0      	cmp	r0, r4
 8004402:	d007      	beq.n	8004414 <TIM_OC1_SetConfig+0x5c>
 8004404:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 8004408:	42a0      	cmp	r0, r4
 800440a:	d003      	beq.n	8004414 <TIM_OC1_SetConfig+0x5c>
 800440c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004410:	42a0      	cmp	r0, r4
 8004412:	d107      	bne.n	8004424 <TIM_OC1_SetConfig+0x6c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004414:	f425 7c40 	bic.w	ip, r5, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004418:	694c      	ldr	r4, [r1, #20]
 800441a:	ea44 0c0c 	orr.w	ip, r4, ip
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800441e:	698d      	ldr	r5, [r1, #24]
 8004420:	ea45 050c 	orr.w	r5, r5, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004424:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004426:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004428:	684a      	ldr	r2, [r1, #4]
 800442a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800442c:	6203      	str	r3, [r0, #32]
}
 800442e:	bc30      	pop	{r4, r5}
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	40012c00 	.word	0x40012c00

08004438 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004438:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800443a:	6a03      	ldr	r3, [r0, #32]
 800443c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004440:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004442:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004444:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004446:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004448:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800444c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004450:	680d      	ldr	r5, [r1, #0]
 8004452:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004454:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004458:	688d      	ldr	r5, [r1, #8]
 800445a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800445e:	4d12      	ldr	r5, [pc, #72]	; (80044a8 <TIM_OC3_SetConfig+0x70>)
 8004460:	42a8      	cmp	r0, r5
 8004462:	d019      	beq.n	8004498 <TIM_OC3_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004464:	4d10      	ldr	r5, [pc, #64]	; (80044a8 <TIM_OC3_SetConfig+0x70>)
 8004466:	42a8      	cmp	r0, r5
 8004468:	d007      	beq.n	800447a <TIM_OC3_SetConfig+0x42>
 800446a:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800446e:	42a8      	cmp	r0, r5
 8004470:	d003      	beq.n	800447a <TIM_OC3_SetConfig+0x42>
 8004472:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004476:	42a8      	cmp	r0, r5
 8004478:	d107      	bne.n	800448a <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800447a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800447e:	694d      	ldr	r5, [r1, #20]
 8004480:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004484:	698d      	ldr	r5, [r1, #24]
 8004486:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800448a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800448c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800448e:	684a      	ldr	r2, [r1, #4]
 8004490:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004492:	6203      	str	r3, [r0, #32]
}
 8004494:	bc30      	pop	{r4, r5}
 8004496:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8004498:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800449c:	68cd      	ldr	r5, [r1, #12]
 800449e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80044a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044a6:	e7dd      	b.n	8004464 <TIM_OC3_SetConfig+0x2c>
 80044a8:	40012c00 	.word	0x40012c00

080044ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044ac:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044ae:	6a03      	ldr	r3, [r0, #32]
 80044b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044b4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044b6:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044ba:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044c0:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044c4:	680d      	ldr	r5, [r1, #0]
 80044c6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044ce:	688d      	ldr	r5, [r1, #8]
 80044d0:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044d4:	4d0b      	ldr	r5, [pc, #44]	; (8004504 <TIM_OC4_SetConfig+0x58>)
 80044d6:	42a8      	cmp	r0, r5
 80044d8:	d007      	beq.n	80044ea <TIM_OC4_SetConfig+0x3e>
 80044da:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80044de:	42a8      	cmp	r0, r5
 80044e0:	d003      	beq.n	80044ea <TIM_OC4_SetConfig+0x3e>
 80044e2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80044e6:	42a8      	cmp	r0, r5
 80044e8:	d104      	bne.n	80044f4 <TIM_OC4_SetConfig+0x48>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044ea:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044ee:	694d      	ldr	r5, [r1, #20]
 80044f0:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044f4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044f6:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044f8:	684b      	ldr	r3, [r1, #4]
 80044fa:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044fc:	6202      	str	r2, [r0, #32]
}
 80044fe:	bc30      	pop	{r4, r5}
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	40012c00 	.word	0x40012c00

08004508 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004508:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800450a:	6a03      	ldr	r3, [r0, #32]
 800450c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004510:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004512:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004514:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004516:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004518:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800451c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004520:	680d      	ldr	r5, [r1, #0]
 8004522:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004524:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004528:	688d      	ldr	r5, [r1, #8]
 800452a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800452e:	4d0b      	ldr	r5, [pc, #44]	; (800455c <TIM_OC5_SetConfig+0x54>)
 8004530:	42a8      	cmp	r0, r5
 8004532:	d007      	beq.n	8004544 <TIM_OC5_SetConfig+0x3c>
 8004534:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8004538:	42a8      	cmp	r0, r5
 800453a:	d003      	beq.n	8004544 <TIM_OC5_SetConfig+0x3c>
 800453c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004540:	42a8      	cmp	r0, r5
 8004542:	d104      	bne.n	800454e <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004544:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004548:	694d      	ldr	r5, [r1, #20]
 800454a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800454e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004550:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004552:	684a      	ldr	r2, [r1, #4]
 8004554:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004556:	6203      	str	r3, [r0, #32]
}
 8004558:	bc30      	pop	{r4, r5}
 800455a:	4770      	bx	lr
 800455c:	40012c00 	.word	0x40012c00

08004560 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004560:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004562:	6a03      	ldr	r3, [r0, #32]
 8004564:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004568:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800456a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800456c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800456e:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004570:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004574:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004578:	680d      	ldr	r5, [r1, #0]
 800457a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800457e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004582:	688d      	ldr	r5, [r1, #8]
 8004584:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004588:	4d0b      	ldr	r5, [pc, #44]	; (80045b8 <TIM_OC6_SetConfig+0x58>)
 800458a:	42a8      	cmp	r0, r5
 800458c:	d007      	beq.n	800459e <TIM_OC6_SetConfig+0x3e>
 800458e:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8004592:	42a8      	cmp	r0, r5
 8004594:	d003      	beq.n	800459e <TIM_OC6_SetConfig+0x3e>
 8004596:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800459a:	42a8      	cmp	r0, r5
 800459c:	d104      	bne.n	80045a8 <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800459e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80045a2:	694d      	ldr	r5, [r1, #20]
 80045a4:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045a8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045aa:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80045ac:	684b      	ldr	r3, [r1, #4]
 80045ae:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045b0:	6202      	str	r2, [r0, #32]
}
 80045b2:	bc30      	pop	{r4, r5}
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	40012c00 	.word	0x40012c00

080045bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045bc:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045be:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045c0:	6a04      	ldr	r4, [r0, #32]
 80045c2:	f024 0401 	bic.w	r4, r4, #1
 80045c6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045c8:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045ca:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045ce:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045d2:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80045d6:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045d8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80045da:	6203      	str	r3, [r0, #32]
}
 80045dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045e2:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045e4:	6a04      	ldr	r4, [r0, #32]
 80045e6:	f024 0410 	bic.w	r4, r4, #16
 80045ea:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ec:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80045ee:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045f0:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045f4:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80045fc:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004600:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004602:	6203      	str	r3, [r0, #32]
}
 8004604:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004608:	4770      	bx	lr

0800460a <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800460a:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800460c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004610:	430b      	orrs	r3, r1
 8004612:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004616:	6083      	str	r3, [r0, #8]
}
 8004618:	4770      	bx	lr
	...

0800461c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800461c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b01      	cmp	r3, #1
 8004624:	d126      	bne.n	8004674 <HAL_TIM_Base_Start_IT+0x58>
  htim->State = HAL_TIM_STATE_BUSY;
 8004626:	2302      	movs	r3, #2
 8004628:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800462c:	6802      	ldr	r2, [r0, #0]
 800462e:	68d3      	ldr	r3, [r2, #12]
 8004630:	f043 0301 	orr.w	r3, r3, #1
 8004634:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004636:	6803      	ldr	r3, [r0, #0]
 8004638:	4a11      	ldr	r2, [pc, #68]	; (8004680 <HAL_TIM_Base_Start_IT+0x64>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d00c      	beq.n	8004658 <HAL_TIM_Base_Start_IT+0x3c>
 800463e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004642:	d009      	beq.n	8004658 <HAL_TIM_Base_Start_IT+0x3c>
 8004644:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8004648:	4293      	cmp	r3, r2
 800464a:	d005      	beq.n	8004658 <HAL_TIM_Base_Start_IT+0x3c>
    __HAL_TIM_ENABLE(htim);
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	f042 0201 	orr.w	r2, r2, #1
 8004652:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004654:	2000      	movs	r0, #0
 8004656:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004658:	6899      	ldr	r1, [r3, #8]
 800465a:	4a0a      	ldr	r2, [pc, #40]	; (8004684 <HAL_TIM_Base_Start_IT+0x68>)
 800465c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800465e:	2a06      	cmp	r2, #6
 8004660:	d00a      	beq.n	8004678 <HAL_TIM_Base_Start_IT+0x5c>
 8004662:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004666:	d009      	beq.n	800467c <HAL_TIM_Base_Start_IT+0x60>
      __HAL_TIM_ENABLE(htim);
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	f042 0201 	orr.w	r2, r2, #1
 800466e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004670:	2000      	movs	r0, #0
 8004672:	4770      	bx	lr
    return HAL_ERROR;
 8004674:	2001      	movs	r0, #1
 8004676:	4770      	bx	lr
  return HAL_OK;
 8004678:	2000      	movs	r0, #0
 800467a:	4770      	bx	lr
 800467c:	2000      	movs	r0, #0
}
 800467e:	4770      	bx	lr
 8004680:	40012c00 	.word	0x40012c00
 8004684:	00010007 	.word	0x00010007

08004688 <HAL_TIM_OC_MspInit>:
}
 8004688:	4770      	bx	lr

0800468a <HAL_TIM_PeriodElapsedCallback>:
}
 800468a:	4770      	bx	lr

0800468c <HAL_TIM_OC_DelayElapsedCallback>:
}
 800468c:	4770      	bx	lr

0800468e <HAL_TIM_IC_CaptureCallback>:
}
 800468e:	4770      	bx	lr

08004690 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8004690:	4770      	bx	lr

08004692 <HAL_TIM_TriggerCallback>:
}
 8004692:	4770      	bx	lr

08004694 <HAL_TIM_IRQHandler>:
{
 8004694:	b510      	push	{r4, lr}
 8004696:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004698:	6803      	ldr	r3, [r0, #0]
 800469a:	691a      	ldr	r2, [r3, #16]
 800469c:	f012 0f02 	tst.w	r2, #2
 80046a0:	d011      	beq.n	80046c6 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	f012 0f02 	tst.w	r2, #2
 80046a8:	d00d      	beq.n	80046c6 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046aa:	f06f 0202 	mvn.w	r2, #2
 80046ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046b0:	2301      	movs	r3, #1
 80046b2:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046b4:	6803      	ldr	r3, [r0, #0]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	f013 0f03 	tst.w	r3, #3
 80046bc:	d079      	beq.n	80047b2 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 80046be:	f7ff ffe6 	bl	800468e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046c2:	2300      	movs	r3, #0
 80046c4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046c6:	6823      	ldr	r3, [r4, #0]
 80046c8:	691a      	ldr	r2, [r3, #16]
 80046ca:	f012 0f04 	tst.w	r2, #4
 80046ce:	d012      	beq.n	80046f6 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046d0:	68da      	ldr	r2, [r3, #12]
 80046d2:	f012 0f04 	tst.w	r2, #4
 80046d6:	d00e      	beq.n	80046f6 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046d8:	f06f 0204 	mvn.w	r2, #4
 80046dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046de:	2302      	movs	r3, #2
 80046e0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046e2:	6823      	ldr	r3, [r4, #0]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80046ea:	d068      	beq.n	80047be <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80046ec:	4620      	mov	r0, r4
 80046ee:	f7ff ffce 	bl	800468e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f2:	2300      	movs	r3, #0
 80046f4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046f6:	6823      	ldr	r3, [r4, #0]
 80046f8:	691a      	ldr	r2, [r3, #16]
 80046fa:	f012 0f08 	tst.w	r2, #8
 80046fe:	d012      	beq.n	8004726 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	f012 0f08 	tst.w	r2, #8
 8004706:	d00e      	beq.n	8004726 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004708:	f06f 0208 	mvn.w	r2, #8
 800470c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800470e:	2304      	movs	r3, #4
 8004710:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	f013 0f03 	tst.w	r3, #3
 800471a:	d057      	beq.n	80047cc <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800471c:	4620      	mov	r0, r4
 800471e:	f7ff ffb6 	bl	800468e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004722:	2300      	movs	r3, #0
 8004724:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004726:	6823      	ldr	r3, [r4, #0]
 8004728:	691a      	ldr	r2, [r3, #16]
 800472a:	f012 0f10 	tst.w	r2, #16
 800472e:	d012      	beq.n	8004756 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	f012 0f10 	tst.w	r2, #16
 8004736:	d00e      	beq.n	8004756 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004738:	f06f 0210 	mvn.w	r2, #16
 800473c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800473e:	2308      	movs	r3, #8
 8004740:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	f413 7f40 	tst.w	r3, #768	; 0x300
 800474a:	d046      	beq.n	80047da <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800474c:	4620      	mov	r0, r4
 800474e:	f7ff ff9e 	bl	800468e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004752:	2300      	movs	r3, #0
 8004754:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	691a      	ldr	r2, [r3, #16]
 800475a:	f012 0f01 	tst.w	r2, #1
 800475e:	d003      	beq.n	8004768 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	f012 0f01 	tst.w	r2, #1
 8004766:	d13f      	bne.n	80047e8 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004768:	6823      	ldr	r3, [r4, #0]
 800476a:	691a      	ldr	r2, [r3, #16]
 800476c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004770:	d003      	beq.n	800477a <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004772:	68da      	ldr	r2, [r3, #12]
 8004774:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004778:	d13d      	bne.n	80047f6 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	691a      	ldr	r2, [r3, #16]
 800477e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004782:	d003      	beq.n	800478c <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	f012 0f80 	tst.w	r2, #128	; 0x80
 800478a:	d13b      	bne.n	8004804 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800478c:	6823      	ldr	r3, [r4, #0]
 800478e:	691a      	ldr	r2, [r3, #16]
 8004790:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004794:	d003      	beq.n	800479e <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004796:	68da      	ldr	r2, [r3, #12]
 8004798:	f012 0f40 	tst.w	r2, #64	; 0x40
 800479c:	d139      	bne.n	8004812 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800479e:	6823      	ldr	r3, [r4, #0]
 80047a0:	691a      	ldr	r2, [r3, #16]
 80047a2:	f012 0f20 	tst.w	r2, #32
 80047a6:	d003      	beq.n	80047b0 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047a8:	68da      	ldr	r2, [r3, #12]
 80047aa:	f012 0f20 	tst.w	r2, #32
 80047ae:	d137      	bne.n	8004820 <HAL_TIM_IRQHandler+0x18c>
}
 80047b0:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047b2:	f7ff ff6b 	bl	800468c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047b6:	4620      	mov	r0, r4
 80047b8:	f7ff ff6a 	bl	8004690 <HAL_TIM_PWM_PulseFinishedCallback>
 80047bc:	e781      	b.n	80046c2 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047be:	4620      	mov	r0, r4
 80047c0:	f7ff ff64 	bl	800468c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c4:	4620      	mov	r0, r4
 80047c6:	f7ff ff63 	bl	8004690 <HAL_TIM_PWM_PulseFinishedCallback>
 80047ca:	e792      	b.n	80046f2 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047cc:	4620      	mov	r0, r4
 80047ce:	f7ff ff5d 	bl	800468c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d2:	4620      	mov	r0, r4
 80047d4:	f7ff ff5c 	bl	8004690 <HAL_TIM_PWM_PulseFinishedCallback>
 80047d8:	e7a3      	b.n	8004722 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047da:	4620      	mov	r0, r4
 80047dc:	f7ff ff56 	bl	800468c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e0:	4620      	mov	r0, r4
 80047e2:	f7ff ff55 	bl	8004690 <HAL_TIM_PWM_PulseFinishedCallback>
 80047e6:	e7b4      	b.n	8004752 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047e8:	f06f 0201 	mvn.w	r2, #1
 80047ec:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80047ee:	4620      	mov	r0, r4
 80047f0:	f7ff ff4b 	bl	800468a <HAL_TIM_PeriodElapsedCallback>
 80047f4:	e7b8      	b.n	8004768 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047f6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047fa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80047fc:	4620      	mov	r0, r4
 80047fe:	f000 f9ee 	bl	8004bde <HAL_TIMEx_BreakCallback>
 8004802:	e7ba      	b.n	800477a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004804:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004808:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800480a:	4620      	mov	r0, r4
 800480c:	f000 f9e8 	bl	8004be0 <HAL_TIMEx_Break2Callback>
 8004810:	e7bc      	b.n	800478c <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004812:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004816:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004818:	4620      	mov	r0, r4
 800481a:	f7ff ff3a 	bl	8004692 <HAL_TIM_TriggerCallback>
 800481e:	e7be      	b.n	800479e <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004820:	f06f 0220 	mvn.w	r2, #32
 8004824:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004826:	4620      	mov	r0, r4
 8004828:	f000 f9d8 	bl	8004bdc <HAL_TIMEx_CommutCallback>
}
 800482c:	e7c0      	b.n	80047b0 <HAL_TIM_IRQHandler+0x11c>
	...

08004830 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8004830:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004832:	4a1a      	ldr	r2, [pc, #104]	; (800489c <TIM_Base_SetConfig+0x6c>)
 8004834:	4290      	cmp	r0, r2
 8004836:	d002      	beq.n	800483e <TIM_Base_SetConfig+0xe>
 8004838:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800483c:	d103      	bne.n	8004846 <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800483e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004842:	684a      	ldr	r2, [r1, #4]
 8004844:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004846:	4a15      	ldr	r2, [pc, #84]	; (800489c <TIM_Base_SetConfig+0x6c>)
 8004848:	4290      	cmp	r0, r2
 800484a:	d00a      	beq.n	8004862 <TIM_Base_SetConfig+0x32>
 800484c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004850:	d007      	beq.n	8004862 <TIM_Base_SetConfig+0x32>
 8004852:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8004856:	4290      	cmp	r0, r2
 8004858:	d003      	beq.n	8004862 <TIM_Base_SetConfig+0x32>
 800485a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800485e:	4290      	cmp	r0, r2
 8004860:	d103      	bne.n	800486a <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004866:	68ca      	ldr	r2, [r1, #12]
 8004868:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800486a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800486e:	694a      	ldr	r2, [r1, #20]
 8004870:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004872:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004874:	688b      	ldr	r3, [r1, #8]
 8004876:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004878:	680b      	ldr	r3, [r1, #0]
 800487a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800487c:	4b07      	ldr	r3, [pc, #28]	; (800489c <TIM_Base_SetConfig+0x6c>)
 800487e:	4298      	cmp	r0, r3
 8004880:	d007      	beq.n	8004892 <TIM_Base_SetConfig+0x62>
 8004882:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8004886:	4298      	cmp	r0, r3
 8004888:	d003      	beq.n	8004892 <TIM_Base_SetConfig+0x62>
 800488a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800488e:	4298      	cmp	r0, r3
 8004890:	d101      	bne.n	8004896 <TIM_Base_SetConfig+0x66>
    TIMx->RCR = Structure->RepetitionCounter;
 8004892:	690b      	ldr	r3, [r1, #16]
 8004894:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004896:	2301      	movs	r3, #1
 8004898:	6143      	str	r3, [r0, #20]
}
 800489a:	4770      	bx	lr
 800489c:	40012c00 	.word	0x40012c00

080048a0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80048a0:	b360      	cbz	r0, 80048fc <HAL_TIM_Base_Init+0x5c>
{
 80048a2:	b510      	push	{r4, lr}
 80048a4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80048a6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80048aa:	b313      	cbz	r3, 80048f2 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80048ac:	2302      	movs	r3, #2
 80048ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048b2:	4621      	mov	r1, r4
 80048b4:	f851 0b04 	ldr.w	r0, [r1], #4
 80048b8:	f7ff ffba 	bl	8004830 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048bc:	2301      	movs	r3, #1
 80048be:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048c2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80048c6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80048ca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80048ce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80048d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048da:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80048de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048e2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80048e6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80048ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80048ee:	2000      	movs	r0, #0
}
 80048f0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80048f2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80048f6:	f7fe f8a1 	bl	8002a3c <HAL_TIM_Base_MspInit>
 80048fa:	e7d7      	b.n	80048ac <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80048fc:	2001      	movs	r0, #1
}
 80048fe:	4770      	bx	lr

08004900 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8004900:	b360      	cbz	r0, 800495c <HAL_TIM_OC_Init+0x5c>
{
 8004902:	b510      	push	{r4, lr}
 8004904:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004906:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800490a:	b313      	cbz	r3, 8004952 <HAL_TIM_OC_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800490c:	2302      	movs	r3, #2
 800490e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004912:	4621      	mov	r1, r4
 8004914:	f851 0b04 	ldr.w	r0, [r1], #4
 8004918:	f7ff ff8a 	bl	8004830 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800491c:	2301      	movs	r3, #1
 800491e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004922:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004926:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800492a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800492e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004932:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004936:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800493a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800493e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004942:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004946:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800494a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800494e:	2000      	movs	r0, #0
}
 8004950:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004952:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8004956:	f7ff fe97 	bl	8004688 <HAL_TIM_OC_MspInit>
 800495a:	e7d7      	b.n	800490c <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 800495c:	2001      	movs	r0, #1
}
 800495e:	4770      	bx	lr

08004960 <TIM_OC2_SetConfig>:
{
 8004960:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004962:	6a03      	ldr	r3, [r0, #32]
 8004964:	f023 0310 	bic.w	r3, r3, #16
 8004968:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800496a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800496c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800496e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004970:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004974:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004978:	680d      	ldr	r5, [r1, #0]
 800497a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800497e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004982:	688d      	ldr	r5, [r1, #8]
 8004984:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004988:	4d12      	ldr	r5, [pc, #72]	; (80049d4 <TIM_OC2_SetConfig+0x74>)
 800498a:	42a8      	cmp	r0, r5
 800498c:	d019      	beq.n	80049c2 <TIM_OC2_SetConfig+0x62>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800498e:	4d11      	ldr	r5, [pc, #68]	; (80049d4 <TIM_OC2_SetConfig+0x74>)
 8004990:	42a8      	cmp	r0, r5
 8004992:	d007      	beq.n	80049a4 <TIM_OC2_SetConfig+0x44>
 8004994:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8004998:	42a8      	cmp	r0, r5
 800499a:	d003      	beq.n	80049a4 <TIM_OC2_SetConfig+0x44>
 800499c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80049a0:	42a8      	cmp	r0, r5
 80049a2:	d107      	bne.n	80049b4 <TIM_OC2_SetConfig+0x54>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049a4:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049a8:	694d      	ldr	r5, [r1, #20]
 80049aa:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049ae:	698d      	ldr	r5, [r1, #24]
 80049b0:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80049b4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80049b6:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80049b8:	684a      	ldr	r2, [r1, #4]
 80049ba:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80049bc:	6203      	str	r3, [r0, #32]
}
 80049be:	bc30      	pop	{r4, r5}
 80049c0:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80049c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049c6:	68cd      	ldr	r5, [r1, #12]
 80049c8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80049cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049d0:	e7dd      	b.n	800498e <TIM_OC2_SetConfig+0x2e>
 80049d2:	bf00      	nop
 80049d4:	40012c00 	.word	0x40012c00

080049d8 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 80049d8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d036      	beq.n	8004a4e <HAL_TIM_OC_ConfigChannel+0x76>
{
 80049e0:	b510      	push	{r4, lr}
 80049e2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80049e4:	2301      	movs	r3, #1
 80049e6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80049ea:	2a14      	cmp	r2, #20
 80049ec:	d82a      	bhi.n	8004a44 <HAL_TIM_OC_ConfigChannel+0x6c>
 80049ee:	e8df f002 	tbb	[pc, r2]
 80049f2:	290b      	.short	0x290b
 80049f4:	29102929 	.word	0x29102929
 80049f8:	29152929 	.word	0x29152929
 80049fc:	291a2929 	.word	0x291a2929
 8004a00:	291f2929 	.word	0x291f2929
 8004a04:	2929      	.short	0x2929
 8004a06:	24          	.byte	0x24
 8004a07:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a08:	6800      	ldr	r0, [r0, #0]
 8004a0a:	f7ff fcd5 	bl	80043b8 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004a0e:	2000      	movs	r0, #0
      break;
 8004a10:	e019      	b.n	8004a46 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a12:	6800      	ldr	r0, [r0, #0]
 8004a14:	f7ff ffa4 	bl	8004960 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004a18:	2000      	movs	r0, #0
      break;
 8004a1a:	e014      	b.n	8004a46 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a1c:	6800      	ldr	r0, [r0, #0]
 8004a1e:	f7ff fd0b 	bl	8004438 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004a22:	2000      	movs	r0, #0
      break;
 8004a24:	e00f      	b.n	8004a46 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a26:	6800      	ldr	r0, [r0, #0]
 8004a28:	f7ff fd40 	bl	80044ac <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004a2c:	2000      	movs	r0, #0
      break;
 8004a2e:	e00a      	b.n	8004a46 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004a30:	6800      	ldr	r0, [r0, #0]
 8004a32:	f7ff fd69 	bl	8004508 <TIM_OC5_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004a36:	2000      	movs	r0, #0
      break;
 8004a38:	e005      	b.n	8004a46 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004a3a:	6800      	ldr	r0, [r0, #0]
 8004a3c:	f7ff fd90 	bl	8004560 <TIM_OC6_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004a40:	2000      	movs	r0, #0
      break;
 8004a42:	e000      	b.n	8004a46 <HAL_TIM_OC_ConfigChannel+0x6e>
  switch (Channel)
 8004a44:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8004a46:	2300      	movs	r3, #0
 8004a48:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004a4c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8004a4e:	2002      	movs	r0, #2
}
 8004a50:	4770      	bx	lr

08004a52 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a52:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a54:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a56:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a5a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a64:	6082      	str	r2, [r0, #8]
}
 8004a66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004a6c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d076      	beq.n	8004b62 <HAL_TIM_ConfigClockSource+0xf6>
{
 8004a74:	b510      	push	{r4, lr}
 8004a76:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004a78:	2301      	movs	r3, #1
 8004a7a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004a7e:	2302      	movs	r3, #2
 8004a80:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004a84:	6802      	ldr	r2, [r0, #0]
 8004a86:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a88:	4b37      	ldr	r3, [pc, #220]	; (8004b68 <HAL_TIM_ConfigClockSource+0xfc>)
 8004a8a:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8004a8c:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004a8e:	680b      	ldr	r3, [r1, #0]
 8004a90:	2b60      	cmp	r3, #96	; 0x60
 8004a92:	d04c      	beq.n	8004b2e <HAL_TIM_ConfigClockSource+0xc2>
 8004a94:	d829      	bhi.n	8004aea <HAL_TIM_ConfigClockSource+0x7e>
 8004a96:	2b40      	cmp	r3, #64	; 0x40
 8004a98:	d054      	beq.n	8004b44 <HAL_TIM_ConfigClockSource+0xd8>
 8004a9a:	d90c      	bls.n	8004ab6 <HAL_TIM_ConfigClockSource+0x4a>
 8004a9c:	2b50      	cmp	r3, #80	; 0x50
 8004a9e:	d122      	bne.n	8004ae6 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aa0:	68ca      	ldr	r2, [r1, #12]
 8004aa2:	6849      	ldr	r1, [r1, #4]
 8004aa4:	6820      	ldr	r0, [r4, #0]
 8004aa6:	f7ff fd89 	bl	80045bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004aaa:	2150      	movs	r1, #80	; 0x50
 8004aac:	6820      	ldr	r0, [r4, #0]
 8004aae:	f7ff fdac 	bl	800460a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004ab2:	2000      	movs	r0, #0
      break;
 8004ab4:	e005      	b.n	8004ac2 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8004ab6:	2b20      	cmp	r3, #32
 8004ab8:	d00d      	beq.n	8004ad6 <HAL_TIM_ConfigClockSource+0x6a>
 8004aba:	d909      	bls.n	8004ad0 <HAL_TIM_ConfigClockSource+0x64>
 8004abc:	2b30      	cmp	r3, #48	; 0x30
 8004abe:	d00a      	beq.n	8004ad6 <HAL_TIM_ConfigClockSource+0x6a>
      status = HAL_ERROR;
 8004ac0:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004ac8:	2300      	movs	r3, #0
 8004aca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004ace:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8004ad0:	b10b      	cbz	r3, 8004ad6 <HAL_TIM_ConfigClockSource+0x6a>
 8004ad2:	2b10      	cmp	r3, #16
 8004ad4:	d105      	bne.n	8004ae2 <HAL_TIM_ConfigClockSource+0x76>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	6820      	ldr	r0, [r4, #0]
 8004ada:	f7ff fd96 	bl	800460a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004ade:	2000      	movs	r0, #0
      break;
 8004ae0:	e7ef      	b.n	8004ac2 <HAL_TIM_ConfigClockSource+0x56>
      status = HAL_ERROR;
 8004ae2:	2001      	movs	r0, #1
 8004ae4:	e7ed      	b.n	8004ac2 <HAL_TIM_ConfigClockSource+0x56>
 8004ae6:	2001      	movs	r0, #1
 8004ae8:	e7eb      	b.n	8004ac2 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8004aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aee:	d034      	beq.n	8004b5a <HAL_TIM_ConfigClockSource+0xee>
 8004af0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004af4:	d10c      	bne.n	8004b10 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ETR_SetConfig(htim->Instance,
 8004af6:	68cb      	ldr	r3, [r1, #12]
 8004af8:	684a      	ldr	r2, [r1, #4]
 8004afa:	6889      	ldr	r1, [r1, #8]
 8004afc:	6820      	ldr	r0, [r4, #0]
 8004afe:	f7ff ffa8 	bl	8004a52 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b02:	6822      	ldr	r2, [r4, #0]
 8004b04:	6893      	ldr	r3, [r2, #8]
 8004b06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b0a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004b0c:	2000      	movs	r0, #0
      break;
 8004b0e:	e7d8      	b.n	8004ac2 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8004b10:	2b70      	cmp	r3, #112	; 0x70
 8004b12:	d124      	bne.n	8004b5e <HAL_TIM_ConfigClockSource+0xf2>
      TIM_ETR_SetConfig(htim->Instance,
 8004b14:	68cb      	ldr	r3, [r1, #12]
 8004b16:	684a      	ldr	r2, [r1, #4]
 8004b18:	6889      	ldr	r1, [r1, #8]
 8004b1a:	6820      	ldr	r0, [r4, #0]
 8004b1c:	f7ff ff99 	bl	8004a52 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004b20:	6822      	ldr	r2, [r4, #0]
 8004b22:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004b28:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004b2a:	2000      	movs	r0, #0
      break;
 8004b2c:	e7c9      	b.n	8004ac2 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b2e:	68ca      	ldr	r2, [r1, #12]
 8004b30:	6849      	ldr	r1, [r1, #4]
 8004b32:	6820      	ldr	r0, [r4, #0]
 8004b34:	f7ff fd55 	bl	80045e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b38:	2160      	movs	r1, #96	; 0x60
 8004b3a:	6820      	ldr	r0, [r4, #0]
 8004b3c:	f7ff fd65 	bl	800460a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004b40:	2000      	movs	r0, #0
      break;
 8004b42:	e7be      	b.n	8004ac2 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b44:	68ca      	ldr	r2, [r1, #12]
 8004b46:	6849      	ldr	r1, [r1, #4]
 8004b48:	6820      	ldr	r0, [r4, #0]
 8004b4a:	f7ff fd37 	bl	80045bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b4e:	2140      	movs	r1, #64	; 0x40
 8004b50:	6820      	ldr	r0, [r4, #0]
 8004b52:	f7ff fd5a 	bl	800460a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004b56:	2000      	movs	r0, #0
      break;
 8004b58:	e7b3      	b.n	8004ac2 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8004b5a:	2000      	movs	r0, #0
 8004b5c:	e7b1      	b.n	8004ac2 <HAL_TIM_ConfigClockSource+0x56>
      status = HAL_ERROR;
 8004b5e:	2001      	movs	r0, #1
 8004b60:	e7af      	b.n	8004ac2 <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 8004b62:	2002      	movs	r0, #2
}
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	fffe0088 	.word	0xfffe0088

08004b6c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b6c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d02f      	beq.n	8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
{
 8004b74:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8004b76:	2301      	movs	r3, #1
 8004b78:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b82:	6802      	ldr	r2, [r0, #0]
 8004b84:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b86:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b88:	4d13      	ldr	r5, [pc, #76]	; (8004bd8 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8004b8a:	42aa      	cmp	r2, r5
 8004b8c:	d01d      	beq.n	8004bca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b92:	680d      	ldr	r5, [r1, #0]
 8004b94:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b96:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b98:	6803      	ldr	r3, [r0, #0]
 8004b9a:	4a0f      	ldr	r2, [pc, #60]	; (8004bd8 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d006      	beq.n	8004bae <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8004ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba4:	d003      	beq.n	8004bae <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8004ba6:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d104      	bne.n	8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bae:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bb2:	688a      	ldr	r2, [r1, #8]
 8004bb4:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bb6:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8004bc4:	4618      	mov	r0, r3
}
 8004bc6:	bc30      	pop	{r4, r5}
 8004bc8:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004bca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004bce:	684d      	ldr	r5, [r1, #4]
 8004bd0:	432b      	orrs	r3, r5
 8004bd2:	e7dc      	b.n	8004b8e <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 8004bd4:	2002      	movs	r0, #2
}
 8004bd6:	4770      	bx	lr
 8004bd8:	40012c00 	.word	0x40012c00

08004bdc <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bdc:	4770      	bx	lr

08004bde <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bde:	4770      	bx	lr

08004be0 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004be0:	4770      	bx	lr

08004be2 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8004be2:	468c      	mov	ip, r1
 8004be4:	4613      	mov	r3, r2
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8004be6:	6841      	ldr	r1, [r0, #4]
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8004be8:	f8dc 2004 	ldr.w	r2, [ip, #4]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8004bec:	685b      	ldr	r3, [r3, #4]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8004bee:	f8b0 c000 	ldrh.w	ip, [r0]
 8004bf2:	8840      	ldrh	r0, [r0, #2]
 8004bf4:	fb00 f00c 	mul.w	r0, r0, ip
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8004bf8:	e008      	b.n	8004c0c <arm_mat_add_f32+0x2a>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 8004bfa:	ecf1 7a01 	vldmia	r1!, {s15}
 8004bfe:	ecb2 7a01 	vldmia	r2!, {s14}
 8004c02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c06:	ece3 7a01 	vstmia	r3!, {s15}

      /* Decrement loop counter */
      blkCnt--;
 8004c0a:	3801      	subs	r0, #1
    while (blkCnt > 0U)
 8004c0c:	2800      	cmp	r0, #0
 8004c0e:	d1f4      	bne.n	8004bfa <arm_mat_add_f32+0x18>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
 8004c10:	4770      	bx	lr

08004c12 <arm_mat_init_f32>:
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
  /* Assign Number of Rows */
  S->numRows = nRows;
 8004c12:	8001      	strh	r1, [r0, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8004c14:	8042      	strh	r2, [r0, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8004c16:	6043      	str	r3, [r0, #4]
}
 8004c18:	4770      	bx	lr
	...

08004c1c <arm_mat_inverse_f32>:
}
#else
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8004c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c20:	b085      	sub	sp, #20
 8004c22:	9003      	str	r0, [sp, #12]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8004c24:	f8d0 b004 	ldr.w	fp, [r0, #4]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8004c28:	684b      	ldr	r3, [r1, #4]
 8004c2a:	9301      	str	r3, [sp, #4]
  float32_t *pInT1, *pInT2;                      /* Temporary input data matrix pointer */
  float32_t *pOutT1, *pOutT2;                    /* Temporary output data matrix pointer */
  float32_t *pPivotRowIn, *pPRT_in, *pPivotRowDst, *pPRT_pDst;  /* Temporary input and output data matrix pointer */
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8004c2c:	f8b0 9000 	ldrh.w	r9, [r0]
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 8004c30:	f8b0 e002 	ldrh.w	lr, [r0, #2]

    /* Loop over the number of rows */
    rowCnt = numRows;

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 8004c34:	4648      	mov	r0, r9
 8004c36:	e012      	b.n	8004c5e <arm_mat_inverse_f32+0x42>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
      while (j > 0U)
      {
        *pOutT1++ = 0.0f;
 8004c38:	2100      	movs	r1, #0
 8004c3a:	f843 1b04 	str.w	r1, [r3], #4
        j--;
 8004c3e:	3a01      	subs	r2, #1
      while (j > 0U)
 8004c40:	2a00      	cmp	r2, #0
 8004c42:	d1f9      	bne.n	8004c38 <arm_mat_inverse_f32+0x1c>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pOutT1++ = 1.0f;
 8004c44:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004c48:	f843 2b04 	str.w	r2, [r3], #4

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 8004c4c:	3801      	subs	r0, #1
 8004c4e:	4602      	mov	r2, r0
      while (j > 0U)
 8004c50:	e003      	b.n	8004c5a <arm_mat_inverse_f32+0x3e>
      {
        *pOutT1++ = 0.0f;
 8004c52:	2100      	movs	r1, #0
 8004c54:	f843 1b04 	str.w	r1, [r3], #4
        j--;
 8004c58:	3a01      	subs	r2, #1
      while (j > 0U)
 8004c5a:	2a00      	cmp	r2, #0
 8004c5c:	d1f9      	bne.n	8004c52 <arm_mat_inverse_f32+0x36>
    while (rowCnt > 0U)
 8004c5e:	b110      	cbz	r0, 8004c66 <arm_mat_inverse_f32+0x4a>
      j = numRows - rowCnt;
 8004c60:	eba9 0200 	sub.w	r2, r9, r0
      while (j > 0U)
 8004c64:	e7ec      	b.n	8004c40 <arm_mat_inverse_f32+0x24>
    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */
    loopCnt = numCols;

    /* Index modifier to navigate through the columns */
    l = 0U;
 8004c66:	4684      	mov	ip, r0
    loopCnt = numCols;
 8004c68:	46f2      	mov	sl, lr
  float32_t Xchg, in = 0.0f, in1;                /* Temporary input values  */
 8004c6a:	eddf 6a66 	vldr	s13, [pc, #408]	; 8004e04 <arm_mat_inverse_f32+0x1e8>
 8004c6e:	9002      	str	r0, [sp, #8]
 8004c70:	e07c      	b.n	8004d6c <arm_mat_inverse_f32+0x150>
           * replace in the rows below */
          if (*pInT2 != 0.0f)
          {
            /* Loop over number of columns
             * to the right of the pilot element */
            j = numCols - l;
 8004c72:	ebae 000c 	sub.w	r0, lr, ip
      pInT1 = pIn + (l * numCols);
 8004c76:	4632      	mov	r2, r6

            while (j > 0U)
 8004c78:	e006      	b.n	8004c88 <arm_mat_inverse_f32+0x6c>
            {
              /* Exchange the row elements of the input matrix */
              Xchg = *pInT2;
 8004c7a:	681c      	ldr	r4, [r3, #0]
              *pInT2++ = *pInT1;
 8004c7c:	6815      	ldr	r5, [r2, #0]
 8004c7e:	f843 5b04 	str.w	r5, [r3], #4
              *pInT1++ = Xchg;
 8004c82:	f842 4b04 	str.w	r4, [r2], #4

              /* Decrement the loop counter */
              j--;
 8004c86:	3801      	subs	r0, #1
            while (j > 0U)
 8004c88:	2800      	cmp	r0, #0
 8004c8a:	d1f6      	bne.n	8004c7a <arm_mat_inverse_f32+0x5e>
            }

            /* Loop over number of columns of the destination matrix */
            j = numCols;
 8004c8c:	4672      	mov	r2, lr
      pOutT1 = pOut + (l * numCols);
 8004c8e:	4643      	mov	r3, r8
 8004c90:	e006      	b.n	8004ca0 <arm_mat_inverse_f32+0x84>

            while (j > 0U)
            {
              /* Exchange the row elements of the destination matrix */
              Xchg = *pOutT2;
 8004c92:	6808      	ldr	r0, [r1, #0]
              *pOutT2++ = *pOutT1;
 8004c94:	681c      	ldr	r4, [r3, #0]
 8004c96:	f841 4b04 	str.w	r4, [r1], #4
              *pOutT1++ = Xchg;
 8004c9a:	f843 0b04 	str.w	r0, [r3], #4

              /* Decrement loop counter */
              j--;
 8004c9e:	3a01      	subs	r2, #1
            while (j > 0U)
 8004ca0:	2a00      	cmp	r2, #0
 8004ca2:	d1f6      	bne.n	8004c92 <arm_mat_inverse_f32+0x76>
            }

            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	9302      	str	r3, [sp, #8]
 8004ca8:	e071      	b.n	8004d8e <arm_mat_inverse_f32+0x172>
        for (i = 1U; i < numRows - l; i++)
 8004caa:	2201      	movs	r2, #1
 8004cac:	eba9 030c 	sub.w	r3, r9, ip
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d96c      	bls.n	8004d8e <arm_mat_inverse_f32+0x172>
          pInT2 = pInT1 + (numCols * i);
 8004cb4:	fb0e f102 	mul.w	r1, lr, r2
 8004cb8:	eb06 0381 	add.w	r3, r6, r1, lsl #2
          pOutT2 = pOutT1 + (numCols * i);
 8004cbc:	eb08 0181 	add.w	r1, r8, r1, lsl #2
          if (*pInT2 != 0.0f)
 8004cc0:	edd3 7a00 	vldr	s15, [r3]
 8004cc4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ccc:	d1d1      	bne.n	8004c72 <arm_mat_inverse_f32+0x56>
        for (i = 1U; i < numRows - l; i++)
 8004cce:	3201      	adds	r2, #1
 8004cd0:	e7ec      	b.n	8004cac <arm_mat_inverse_f32+0x90>

      while (j > 0U)
      {
        /* Divide each element of the row of the input matrix
         * by the pivot element */
        in1 = *pInT1;
 8004cd2:	ed93 7a00 	vldr	s14, [r3]
        *pInT1++ = in1 / in;
 8004cd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cda:	ece3 7a01 	vstmia	r3!, {s15}

        /* Decrement the loop counter */
        j--;
 8004cde:	3a01      	subs	r2, #1
      while (j > 0U)
 8004ce0:	2a00      	cmp	r2, #0
 8004ce2:	d1f6      	bne.n	8004cd2 <arm_mat_inverse_f32+0xb6>
      }

      /* Loop over number of columns of the destination matrix */
      j = numCols;
 8004ce4:	4670      	mov	r0, lr
      pInT2 = pPivotRowDst;
 8004ce6:	4643      	mov	r3, r8
 8004ce8:	e006      	b.n	8004cf8 <arm_mat_inverse_f32+0xdc>

      while (j > 0U)
      {
        /* Divide each element of the row of the destination matrix
         * by the pivot element */
        in1 = *pInT2;
 8004cea:	ed93 7a00 	vldr	s14, [r3]
        *pInT2++ = in1 / in;
 8004cee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cf2:	ece3 7a01 	vstmia	r3!, {s15}

        /* Decrement the loop counter */
        j--;
 8004cf6:	3801      	subs	r0, #1
      while (j > 0U)
 8004cf8:	2800      	cmp	r0, #0
 8004cfa:	d1f6      	bne.n	8004cea <arm_mat_inverse_f32+0xce>
      /* index used to check for pivot element */
      i = 0U;

      /* Loop over number of rows */
      /*  to be replaced by the sum of that row and a multiple of row i */
      k = numRows;
 8004cfc:	464c      	mov	r4, r9
      pInT2 = pOut;
 8004cfe:	9a01      	ldr	r2, [sp, #4]
      pInT1 = pIn;
 8004d00:	465b      	mov	r3, fp
 8004d02:	e025      	b.n	8004d50 <arm_mat_inverse_f32+0x134>
        /* Check for the pivot element */
        if (i == l)
        {
          /* If the processing element is the pivot element,
             only the columns to the right are to be processed */
          pInT1 += numCols - l;
 8004d04:	eb03 0387 	add.w	r3, r3, r7, lsl #2

          pInT2 += numCols;
 8004d08:	eb02 028e 	add.w	r2, r2, lr, lsl #2
 8004d0c:	e01c      	b.n	8004d48 <arm_mat_inverse_f32+0x12c>

          while (j > 0U)
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT1;
 8004d0e:	edd3 7a00 	vldr	s15, [r3]
            *pInT1++ = in1 - (in * *pPRT_in++);
 8004d12:	ecb1 7a01 	vldmia	r1!, {s14}
 8004d16:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004d1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d1e:	ece3 7a01 	vstmia	r3!, {s15}

            /* Decrement the loop counter */
            j--;
 8004d22:	3d01      	subs	r5, #1
          while (j > 0U)
 8004d24:	2d00      	cmp	r5, #0
 8004d26:	d1f2      	bne.n	8004d0e <arm_mat_inverse_f32+0xf2>
          }

          /* Loop over the number of columns to
             replace the elements in the destination matrix */
          j = numCols;
 8004d28:	4675      	mov	r5, lr
          pPRT_pDst = pPivotRowDst;
 8004d2a:	4641      	mov	r1, r8
 8004d2c:	e00a      	b.n	8004d44 <arm_mat_inverse_f32+0x128>

          while (j > 0U)
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT2;
 8004d2e:	edd2 7a00 	vldr	s15, [r2]
            *pInT2++ = in1 - (in * *pPRT_pDst++);
 8004d32:	ecb1 7a01 	vldmia	r1!, {s14}
 8004d36:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004d3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d3e:	ece2 7a01 	vstmia	r2!, {s15}

            /* Decrement loop counter */
            j--;
 8004d42:	3d01      	subs	r5, #1
          while (j > 0U)
 8004d44:	2d00      	cmp	r5, #0
 8004d46:	d1f2      	bne.n	8004d2e <arm_mat_inverse_f32+0x112>
          }

        }

        /* Increment temporary input pointer */
        pInT1 = pInT1 + l;
 8004d48:	eb03 038c 	add.w	r3, r3, ip, lsl #2

        /* Decrement loop counter */
        k--;
 8004d4c:	3c01      	subs	r4, #1

        /* Increment pivot index */
        i++;
 8004d4e:	3001      	adds	r0, #1
      while (k > 0U)
 8004d50:	b134      	cbz	r4, 8004d60 <arm_mat_inverse_f32+0x144>
        if (i == l)
 8004d52:	4560      	cmp	r0, ip
 8004d54:	d0d6      	beq.n	8004d04 <arm_mat_inverse_f32+0xe8>
          in = *pInT1;
 8004d56:	edd3 6a00 	vldr	s13, [r3]
          j = (numCols - l);
 8004d5a:	463d      	mov	r5, r7
          pPRT_in = pPivotRowIn;
 8004d5c:	4631      	mov	r1, r6
          while (j > 0U)
 8004d5e:	e7e1      	b.n	8004d24 <arm_mat_inverse_f32+0x108>
      }

      /* Increment the input pointer */
      pIn++;
 8004d60:	f10b 0b04 	add.w	fp, fp, #4

      /* Decrement the loop counter */
      loopCnt--;
 8004d64:	f10a 3aff 	add.w	sl, sl, #4294967295

      /* Increment the index modifier */
      l++;
 8004d68:	f10c 0c01 	add.w	ip, ip, #1
    while (loopCnt > 0U)
 8004d6c:	f1ba 0f00 	cmp.w	sl, #0
 8004d70:	d01c      	beq.n	8004dac <arm_mat_inverse_f32+0x190>
      pInT1 = pIn + (l * numCols);
 8004d72:	fb0e f50c 	mul.w	r5, lr, ip
 8004d76:	eb0b 0685 	add.w	r6, fp, r5, lsl #2
      pOutT1 = pOut + (l * numCols);
 8004d7a:	9b01      	ldr	r3, [sp, #4]
 8004d7c:	eb03 0885 	add.w	r8, r3, r5, lsl #2
      in = *pInT1;
 8004d80:	ed96 7a00 	vldr	s14, [r6]
      if (*pInT1 == 0.0f)
 8004d84:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8004d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d8c:	d08d      	beq.n	8004caa <arm_mat_inverse_f32+0x8e>
      if ((flag != 1U) && (in == 0.0f))
 8004d8e:	9b02      	ldr	r3, [sp, #8]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d004      	beq.n	8004d9e <arm_mat_inverse_f32+0x182>
 8004d94:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8004d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d9c:	d026      	beq.n	8004dec <arm_mat_inverse_f32+0x1d0>
      in = *pPivotRowIn;
 8004d9e:	edd6 6a00 	vldr	s13, [r6]
      j = (numCols - l);
 8004da2:	ebae 070c 	sub.w	r7, lr, ip
 8004da6:	463a      	mov	r2, r7
      pInT1 = pPivotRowIn;
 8004da8:	4633      	mov	r3, r6
      while (j > 0U)
 8004daa:	e799      	b.n	8004ce0 <arm_mat_inverse_f32+0xc4>
#endif /* #if defined (ARM_MATH_DSP) */

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;

    if ((flag != 1U) && (in == 0.0f))
 8004dac:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004db0:	f1b8 0f01 	cmp.w	r8, #1
 8004db4:	d01f      	beq.n	8004df6 <arm_mat_inverse_f32+0x1da>
 8004db6:	eef5 6a40 	vcmp.f32	s13, #0.0
 8004dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dbe:	d11c      	bne.n	8004dfa <arm_mat_inverse_f32+0x1de>
    {
      pIn = pSrc->pData;
 8004dc0:	9b03      	ldr	r3, [sp, #12]
 8004dc2:	6859      	ldr	r1, [r3, #4]
      for (i = 0; i < numRows * numCols; i++)
 8004dc4:	fb0e f309 	mul.w	r3, lr, r9
 8004dc8:	4543      	cmp	r3, r8
 8004dca:	d90b      	bls.n	8004de4 <arm_mat_inverse_f32+0x1c8>
      {
        if (pIn[i] != 0.0f)
 8004dcc:	eb01 0288 	add.w	r2, r1, r8, lsl #2
 8004dd0:	edd2 7a00 	vldr	s15, [r2]
 8004dd4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ddc:	d102      	bne.n	8004de4 <arm_mat_inverse_f32+0x1c8>
      for (i = 0; i < numRows * numCols; i++)
 8004dde:	f108 0801 	add.w	r8, r8, #1
 8004de2:	e7ef      	b.n	8004dc4 <arm_mat_inverse_f32+0x1a8>
            break;
      }

      if (i == numRows * numCols)
 8004de4:	4543      	cmp	r3, r8
 8004de6:	d00a      	beq.n	8004dfe <arm_mat_inverse_f32+0x1e2>
    status = ARM_MATH_SUCCESS;
 8004de8:	2000      	movs	r0, #0
 8004dea:	e001      	b.n	8004df0 <arm_mat_inverse_f32+0x1d4>
        return ARM_MATH_SINGULAR;
 8004dec:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return to application */
  return (status);
}
 8004df0:	b005      	add	sp, #20
 8004df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    status = ARM_MATH_SUCCESS;
 8004df6:	2000      	movs	r0, #0
 8004df8:	e7fa      	b.n	8004df0 <arm_mat_inverse_f32+0x1d4>
 8004dfa:	2000      	movs	r0, #0
 8004dfc:	e7f8      	b.n	8004df0 <arm_mat_inverse_f32+0x1d4>
        status = ARM_MATH_SINGULAR;
 8004dfe:	f06f 0004 	mvn.w	r0, #4
 8004e02:	e7f5      	b.n	8004df0 <arm_mat_inverse_f32+0x1d4>
 8004e04:	00000000 	.word	0x00000000

08004e08 <arm_mat_mult_f32>:
#else
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8004e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	4688      	mov	r8, r1
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 8004e10:	f8d0 c004 	ldr.w	ip, [r0, #4]
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 8004e14:	684d      	ldr	r5, [r1, #4]
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8004e16:	f8d2 9004 	ldr.w	r9, [r2, #4]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 8004e1a:	8848      	ldrh	r0, [r1, #2]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 8004e1c:	f8b3 e002 	ldrh.w	lr, [r3, #2]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 8004e20:	881f      	ldrh	r7, [r3, #0]
 8004e22:	2600      	movs	r6, #0
 8004e24:	e01f      	b.n	8004e66 <arm_mat_mult_f32+0x5e>
        while (colCnt > 0U)
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 8004e26:	ecf3 7a01 	vldmia	r3!, {s15}
 8004e2a:	edd2 6a00 	vldr	s13, [r2]
 8004e2e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004e32:	ee37 7a27 	vadd.f32	s14, s14, s15
          pIn2 += numColsB;
 8004e36:	eb02 0280 	add.w	r2, r2, r0, lsl #2

          /* Decrement loop counter */
          colCnt--;
 8004e3a:	3901      	subs	r1, #1
        while (colCnt > 0U)
 8004e3c:	2900      	cmp	r1, #0
 8004e3e:	d1f2      	bne.n	8004e26 <arm_mat_mult_f32+0x1e>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 8004e40:	4653      	mov	r3, sl
 8004e42:	eca3 7a01 	vstmia	r3!, {s14}

        /* Decrement column loop counter */
        col--;
 8004e46:	3c01      	subs	r4, #1

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 8004e48:	1b02      	subs	r2, r0, r4
 8004e4a:	eb05 0282 	add.w	r2, r5, r2, lsl #2

      } while (col > 0U);
 8004e4e:	b12c      	cbz	r4, 8004e5c <arm_mat_mult_f32+0x54>
        *px++ = sum;
 8004e50:	469a      	mov	sl, r3
        colCnt = numColsA;
 8004e52:	4671      	mov	r1, lr
        pIn1 = pInA;
 8004e54:	4663      	mov	r3, ip
        sum = 0.0f;
 8004e56:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004e78 <arm_mat_mult_f32+0x70>
        while (colCnt > 0U)
 8004e5a:	e7ef      	b.n	8004e3c <arm_mat_mult_f32+0x34>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 8004e5c:	4406      	add	r6, r0
      pInA = pInA + numColsA;
 8004e5e:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2

      /* Decrement row loop counter */
      row--;

    } while (row > 0U);
 8004e62:	3f01      	subs	r7, #1
 8004e64:	d005      	beq.n	8004e72 <arm_mat_mult_f32+0x6a>
      px = pOut + i;
 8004e66:	eb09 0a86 	add.w	sl, r9, r6, lsl #2
      pIn2 = pSrcB->pData;
 8004e6a:	f8d8 2004 	ldr.w	r2, [r8, #4]
      col = numColsB;
 8004e6e:	4604      	mov	r4, r0
 8004e70:	e7ef      	b.n	8004e52 <arm_mat_mult_f32+0x4a>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
 8004e72:	2000      	movs	r0, #0
 8004e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e78:	00000000 	.word	0x00000000

08004e7c <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8004e7c:	468c      	mov	ip, r1
 8004e7e:	4613      	mov	r3, r2
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8004e80:	6841      	ldr	r1, [r0, #4]
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8004e82:	f8dc 2004 	ldr.w	r2, [ip, #4]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8004e86:	685b      	ldr	r3, [r3, #4]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8004e88:	f8b0 c000 	ldrh.w	ip, [r0]
 8004e8c:	8840      	ldrh	r0, [r0, #2]
 8004e8e:	fb00 f00c 	mul.w	r0, r0, ip
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8004e92:	e008      	b.n	8004ea6 <arm_mat_sub_f32+0x2a>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 8004e94:	ecf1 7a01 	vldmia	r1!, {s15}
 8004e98:	ecb2 7a01 	vldmia	r2!, {s14}
 8004e9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004ea0:	ece3 7a01 	vstmia	r3!, {s15}

      /* Decrement loop counter */
      blkCnt--;
 8004ea4:	3801      	subs	r0, #1
    while (blkCnt > 0U)
 8004ea6:	2800      	cmp	r0, #0
 8004ea8:	d1f4      	bne.n	8004e94 <arm_mat_sub_f32+0x18>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
 8004eaa:	4770      	bx	lr

08004eac <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8004eac:	b570      	push	{r4, r5, r6, lr}
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8004eae:	6843      	ldr	r3, [r0, #4]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8004eb0:	684e      	ldr	r6, [r1, #4]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8004eb2:	f8b0 c000 	ldrh.w	ip, [r0]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8004eb6:	8845      	ldrh	r5, [r0, #2]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8004eb8:	4664      	mov	r4, ip
 8004eba:	f04f 0e00 	mov.w	lr, #0
 8004ebe:	e00b      	b.n	8004ed8 <arm_mat_trans_f32+0x2c>
#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8004ec0:	f853 0b04 	ldr.w	r0, [r3], #4
 8004ec4:	6008      	str	r0, [r1, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8004ec6:	eb01 018c 	add.w	r1, r1, ip, lsl #2

        /* Decrement column loop counter */
        col--;
 8004eca:	3a01      	subs	r2, #1
      while (col > 0U)
 8004ecc:	2a00      	cmp	r2, #0
 8004ece:	d1f7      	bne.n	8004ec0 <arm_mat_trans_f32+0x14>
      }

      i++;
 8004ed0:	f10e 0e01 	add.w	lr, lr, #1

      /* Decrement row loop counter */
      row--;

    } while (row > 0U);          /* row loop end */
 8004ed4:	3c01      	subs	r4, #1
 8004ed6:	d003      	beq.n	8004ee0 <arm_mat_trans_f32+0x34>
      px = pOut + i;
 8004ed8:	eb06 018e 	add.w	r1, r6, lr, lsl #2
      col = nCols;
 8004edc:	462a      	mov	r2, r5
      while (col > 0U)
 8004ede:	e7f5      	b.n	8004ecc <arm_mat_trans_f32+0x20>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
 8004ee0:	2000      	movs	r0, #0
 8004ee2:	bd70      	pop	{r4, r5, r6, pc}

08004ee4 <arm_quaternion2rotation_f32>:
#else
void arm_quaternion2rotation_f32(const float32_t *pInputQuaternions, 
    float32_t *pOutputRotations, 
    uint32_t nbQuaternions)
{
   for(uint32_t nb=0; nb < nbQuaternions; nb++)
 8004ee4:	f04f 0c00 	mov.w	ip, #0
 8004ee8:	4594      	cmp	ip, r2
 8004eea:	d27b      	bcs.n	8004fe4 <arm_quaternion2rotation_f32+0x100>
{
 8004eec:	b500      	push	{lr}
   {
        float32_t q00 = SQ(pInputQuaternions[0 + nb * 4]);
 8004eee:	eb00 130c 	add.w	r3, r0, ip, lsl #4
 8004ef2:	ed93 7a00 	vldr	s14, [r3]
 8004ef6:	ee67 6a07 	vmul.f32	s13, s14, s14
        float32_t q11 = SQ(pInputQuaternions[1 + nb * 4]);
 8004efa:	edd3 7a01 	vldr	s15, [r3, #4]
 8004efe:	ee67 3aa7 	vmul.f32	s7, s15, s15
        float32_t q22 = SQ(pInputQuaternions[2 + nb * 4]);
 8004f02:	ed93 6a02 	vldr	s12, [r3, #8]
 8004f06:	ee26 4a06 	vmul.f32	s8, s12, s12
        float32_t q33 = SQ(pInputQuaternions[3 + nb * 4]);
 8004f0a:	ed93 5a03 	vldr	s10, [r3, #12]
 8004f0e:	ee65 4a05 	vmul.f32	s9, s10, s10
        float32_t q01 =  pInputQuaternions[0 + nb * 4]*pInputQuaternions[1 + nb * 4];
 8004f12:	ee67 5a27 	vmul.f32	s11, s14, s15
        float32_t q02 =  pInputQuaternions[0 + nb * 4]*pInputQuaternions[2 + nb * 4];
 8004f16:	ee67 2a06 	vmul.f32	s5, s14, s12
        float32_t q03 =  pInputQuaternions[0 + nb * 4]*pInputQuaternions[3 + nb * 4];
 8004f1a:	ee27 7a05 	vmul.f32	s14, s14, s10
        float32_t q12 =  pInputQuaternions[1 + nb * 4]*pInputQuaternions[2 + nb * 4];
 8004f1e:	ee27 2a86 	vmul.f32	s4, s15, s12
        float32_t q13 =  pInputQuaternions[1 + nb * 4]*pInputQuaternions[3 + nb * 4];
 8004f22:	ee67 7a85 	vmul.f32	s15, s15, s10
        float32_t q23 =  pInputQuaternions[2 + nb * 4]*pInputQuaternions[3 + nb * 4];
 8004f26:	ee26 6a05 	vmul.f32	s12, s12, s10

        float32_t xx = q00 + q11 - q22 - q33;
 8004f2a:	ee36 5aa3 	vadd.f32	s10, s13, s7
 8004f2e:	ee35 5a44 	vsub.f32	s10, s10, s8
 8004f32:	ee35 5a64 	vsub.f32	s10, s10, s9
        float32_t yy = q00 - q11 + q22 - q33;
 8004f36:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8004f3a:	ee36 3a84 	vadd.f32	s6, s13, s8
 8004f3e:	ee33 3a64 	vsub.f32	s6, s6, s9
        float32_t zz = q00 - q11 - q22 + q33;
 8004f42:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8004f46:	ee76 6aa4 	vadd.f32	s13, s13, s9
        float32_t xy = 2*(q12 - q03);
 8004f4a:	ee72 4a47 	vsub.f32	s9, s4, s14
 8004f4e:	ee74 3aa4 	vadd.f32	s7, s9, s9
        float32_t xz = 2*(q13 + q02);
 8004f52:	ee72 4aa7 	vadd.f32	s9, s5, s15
 8004f56:	ee34 4aa4 	vadd.f32	s8, s9, s9
        float32_t yx = 2*(q12 + q03);
 8004f5a:	ee37 7a02 	vadd.f32	s14, s14, s4
 8004f5e:	ee37 7a07 	vadd.f32	s14, s14, s14
        float32_t yz = 2*(q23 - q01);
 8004f62:	ee76 4a65 	vsub.f32	s9, s12, s11
 8004f66:	ee74 4aa4 	vadd.f32	s9, s9, s9
        float32_t zx = 2*(q13 - q02);
 8004f6a:	ee77 7ae2 	vsub.f32	s15, s15, s5
 8004f6e:	ee77 7aa7 	vadd.f32	s15, s15, s15
        float32_t zy = 2*(q23 + q01);
 8004f72:	ee35 6a86 	vadd.f32	s12, s11, s12
 8004f76:	ee36 6a06 	vadd.f32	s12, s12, s12

        pOutputRotations[0 + nb * 9] = xx; pOutputRotations[1 + nb * 9] = xy; pOutputRotations[2 + nb * 9] = xz;
 8004f7a:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 8004f7e:	ea4f 038e 	mov.w	r3, lr, lsl #2
 8004f82:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
 8004f86:	ed8e 5a00 	vstr	s10, [lr]
 8004f8a:	f103 0e04 	add.w	lr, r3, #4
 8004f8e:	448e      	add	lr, r1
 8004f90:	edce 3a00 	vstr	s7, [lr]
 8004f94:	f103 0e08 	add.w	lr, r3, #8
 8004f98:	448e      	add	lr, r1
 8004f9a:	ed8e 4a00 	vstr	s8, [lr]
        pOutputRotations[3 + nb * 9] = yx; pOutputRotations[4 + nb * 9] = yy; pOutputRotations[5 + nb * 9] = yz;
 8004f9e:	f103 0e0c 	add.w	lr, r3, #12
 8004fa2:	448e      	add	lr, r1
 8004fa4:	ed8e 7a00 	vstr	s14, [lr]
 8004fa8:	f103 0e10 	add.w	lr, r3, #16
 8004fac:	448e      	add	lr, r1
 8004fae:	ed8e 3a00 	vstr	s6, [lr]
 8004fb2:	f103 0e14 	add.w	lr, r3, #20
 8004fb6:	448e      	add	lr, r1
 8004fb8:	edce 4a00 	vstr	s9, [lr]
        pOutputRotations[6 + nb * 9] = zx; pOutputRotations[7 + nb * 9] = zy; pOutputRotations[8 + nb * 9] = zz;
 8004fbc:	f103 0e18 	add.w	lr, r3, #24
 8004fc0:	448e      	add	lr, r1
 8004fc2:	edce 7a00 	vstr	s15, [lr]
 8004fc6:	f103 0e1c 	add.w	lr, r3, #28
 8004fca:	448e      	add	lr, r1
 8004fcc:	ed8e 6a00 	vstr	s12, [lr]
 8004fd0:	3320      	adds	r3, #32
 8004fd2:	440b      	add	r3, r1
 8004fd4:	edc3 6a00 	vstr	s13, [r3]
   for(uint32_t nb=0; nb < nbQuaternions; nb++)
 8004fd8:	f10c 0c01 	add.w	ip, ip, #1
 8004fdc:	4594      	cmp	ip, r2
 8004fde:	d386      	bcc.n	8004eee <arm_quaternion2rotation_f32+0xa>
   }
}
 8004fe0:	f85d fb04 	ldr.w	pc, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <arm_quaternion_normalize_f32>:

#else
void arm_quaternion_normalize_f32(const float32_t *pInputQuaternions, 
    float32_t *pNormalizedQuaternions, 
    uint32_t nbQuaternions)
{
 8004fe6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fea:	b085      	sub	sp, #20
 8004fec:	4607      	mov	r7, r0
 8004fee:	460e      	mov	r6, r1
 8004ff0:	9203      	str	r2, [sp, #12]
   float32_t temp;

   for(uint32_t i=0; i < nbQuaternions; i++)
 8004ff2:	2500      	movs	r5, #0
 8004ff4:	e048      	b.n	8005088 <arm_quaternion_normalize_f32+0xa2>
   {
      temp = SQ(pInputQuaternions[4 * i + 0]) +
 8004ff6:	012c      	lsls	r4, r5, #4
 8004ff8:	eb07 1b05 	add.w	fp, r7, r5, lsl #4
 8004ffc:	ed9b 0a00 	vldr	s0, [fp]
 8005000:	ee20 0a00 	vmul.f32	s0, s0, s0
             SQ(pInputQuaternions[4 * i + 1]) +
 8005004:	1d23      	adds	r3, r4, #4
 8005006:	9300      	str	r3, [sp, #0]
 8005008:	eb07 0a03 	add.w	sl, r7, r3
 800500c:	edda 7a00 	vldr	s15, [sl]
 8005010:	ee67 7aa7 	vmul.f32	s15, s15, s15
      temp = SQ(pInputQuaternions[4 * i + 0]) +
 8005014:	ee30 0a27 	vadd.f32	s0, s0, s15
             SQ(pInputQuaternions[4 * i + 2]) +
 8005018:	f104 0208 	add.w	r2, r4, #8
 800501c:	9201      	str	r2, [sp, #4]
 800501e:	eb07 0902 	add.w	r9, r7, r2
 8005022:	edd9 7a00 	vldr	s15, [r9]
 8005026:	ee67 7aa7 	vmul.f32	s15, s15, s15
             SQ(pInputQuaternions[4 * i + 1]) +
 800502a:	ee30 0a27 	vadd.f32	s0, s0, s15
             SQ(pInputQuaternions[4 * i + 3]);
 800502e:	f104 010c 	add.w	r1, r4, #12
 8005032:	9102      	str	r1, [sp, #8]
 8005034:	eb07 0801 	add.w	r8, r7, r1
 8005038:	edd8 7a00 	vldr	s15, [r8]
 800503c:	ee67 7aa7 	vmul.f32	s15, s15, s15
      temp = sqrtf(temp);
 8005040:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005044:	f001 f9c4 	bl	80063d0 <sqrtf>

      pNormalizedQuaternions[4 * i + 0] = pInputQuaternions[4 * i + 0] / temp;
 8005048:	ed9b 7a00 	vldr	s14, [fp]
 800504c:	4434      	add	r4, r6
 800504e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005052:	edc4 7a00 	vstr	s15, [r4]
      pNormalizedQuaternions[4 * i + 1] = pInputQuaternions[4 * i + 1] / temp;
 8005056:	ed9a 7a00 	vldr	s14, [sl]
 800505a:	9b00      	ldr	r3, [sp, #0]
 800505c:	18f3      	adds	r3, r6, r3
 800505e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005062:	edc3 7a00 	vstr	s15, [r3]
      pNormalizedQuaternions[4 * i + 2] = pInputQuaternions[4 * i + 2] / temp;
 8005066:	ed99 7a00 	vldr	s14, [r9]
 800506a:	9a01      	ldr	r2, [sp, #4]
 800506c:	18b3      	adds	r3, r6, r2
 800506e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005072:	edc3 7a00 	vstr	s15, [r3]
      pNormalizedQuaternions[4 * i + 3] = pInputQuaternions[4 * i + 3] / temp;
 8005076:	ed98 7a00 	vldr	s14, [r8]
 800507a:	9902      	ldr	r1, [sp, #8]
 800507c:	1873      	adds	r3, r6, r1
 800507e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005082:	edc3 7a00 	vstr	s15, [r3]
   for(uint32_t i=0; i < nbQuaternions; i++)
 8005086:	3501      	adds	r5, #1
 8005088:	9b03      	ldr	r3, [sp, #12]
 800508a:	429d      	cmp	r5, r3
 800508c:	d3b3      	bcc.n	8004ff6 <arm_quaternion_normalize_f32+0x10>
   }
}
 800508e:	b005      	add	sp, #20
 8005090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005094 <arm_quaternion_product_single_f32>:
#else
void arm_quaternion_product_single_f32(const float32_t *qa, 
    const float32_t *qb, 
    float32_t *qr)
{
    qr[0] = qa[0] * qb[0] - qa[1] * qb[1] - qa[2] * qb[2] - qa[3] * qb[3];
 8005094:	edd0 7a00 	vldr	s15, [r0]
 8005098:	ed91 7a00 	vldr	s14, [r1]
 800509c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050a0:	ed90 7a01 	vldr	s14, [r0, #4]
 80050a4:	edd1 6a01 	vldr	s13, [r1, #4]
 80050a8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80050ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80050b0:	ed90 7a02 	vldr	s14, [r0, #8]
 80050b4:	edd1 6a02 	vldr	s13, [r1, #8]
 80050b8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80050bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80050c0:	ed90 7a03 	vldr	s14, [r0, #12]
 80050c4:	edd1 6a03 	vldr	s13, [r1, #12]
 80050c8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80050cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80050d0:	edc2 7a00 	vstr	s15, [r2]
    qr[1] = qa[0] * qb[1] + qa[1] * qb[0] + qa[2] * qb[3] - qa[3] * qb[2];
 80050d4:	edd0 7a00 	vldr	s15, [r0]
 80050d8:	ed91 7a01 	vldr	s14, [r1, #4]
 80050dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050e0:	ed90 7a01 	vldr	s14, [r0, #4]
 80050e4:	edd1 6a00 	vldr	s13, [r1]
 80050e8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80050ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80050f0:	ed90 7a02 	vldr	s14, [r0, #8]
 80050f4:	edd1 6a03 	vldr	s13, [r1, #12]
 80050f8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80050fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005100:	ed90 7a03 	vldr	s14, [r0, #12]
 8005104:	edd1 6a02 	vldr	s13, [r1, #8]
 8005108:	ee27 7a26 	vmul.f32	s14, s14, s13
 800510c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005110:	edc2 7a01 	vstr	s15, [r2, #4]
    qr[2] = qa[0] * qb[2] + qa[2] * qb[0] + qa[3] * qb[1] - qa[1] * qb[3];
 8005114:	edd0 7a00 	vldr	s15, [r0]
 8005118:	ed91 7a02 	vldr	s14, [r1, #8]
 800511c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005120:	ed90 7a02 	vldr	s14, [r0, #8]
 8005124:	edd1 6a00 	vldr	s13, [r1]
 8005128:	ee27 7a26 	vmul.f32	s14, s14, s13
 800512c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005130:	ed90 7a03 	vldr	s14, [r0, #12]
 8005134:	edd1 6a01 	vldr	s13, [r1, #4]
 8005138:	ee27 7a26 	vmul.f32	s14, s14, s13
 800513c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005140:	ed90 7a01 	vldr	s14, [r0, #4]
 8005144:	edd1 6a03 	vldr	s13, [r1, #12]
 8005148:	ee27 7a26 	vmul.f32	s14, s14, s13
 800514c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005150:	edc2 7a02 	vstr	s15, [r2, #8]
    qr[3] = qa[0] * qb[3] + qa[3] * qb[0] + qa[1] * qb[2] - qa[2] * qb[1];
 8005154:	edd0 7a00 	vldr	s15, [r0]
 8005158:	ed91 7a03 	vldr	s14, [r1, #12]
 800515c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005160:	ed90 7a03 	vldr	s14, [r0, #12]
 8005164:	edd1 6a00 	vldr	s13, [r1]
 8005168:	ee27 7a26 	vmul.f32	s14, s14, s13
 800516c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005170:	ed90 7a01 	vldr	s14, [r0, #4]
 8005174:	edd1 6a02 	vldr	s13, [r1, #8]
 8005178:	ee27 7a26 	vmul.f32	s14, s14, s13
 800517c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005180:	ed90 7a02 	vldr	s14, [r0, #8]
 8005184:	edd1 6a01 	vldr	s13, [r1, #4]
 8005188:	ee27 7a26 	vmul.f32	s14, s14, s13
 800518c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005190:	edc2 7a03 	vstr	s15, [r2, #12]
}
 8005194:	4770      	bx	lr
	...

08005198 <__assert_func>:
 8005198:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800519a:	4614      	mov	r4, r2
 800519c:	461a      	mov	r2, r3
 800519e:	4b09      	ldr	r3, [pc, #36]	; (80051c4 <__assert_func+0x2c>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4605      	mov	r5, r0
 80051a4:	68d8      	ldr	r0, [r3, #12]
 80051a6:	b14c      	cbz	r4, 80051bc <__assert_func+0x24>
 80051a8:	4b07      	ldr	r3, [pc, #28]	; (80051c8 <__assert_func+0x30>)
 80051aa:	9100      	str	r1, [sp, #0]
 80051ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80051b0:	4906      	ldr	r1, [pc, #24]	; (80051cc <__assert_func+0x34>)
 80051b2:	462b      	mov	r3, r5
 80051b4:	f000 f814 	bl	80051e0 <fiprintf>
 80051b8:	f000 fd0c 	bl	8005bd4 <abort>
 80051bc:	4b04      	ldr	r3, [pc, #16]	; (80051d0 <__assert_func+0x38>)
 80051be:	461c      	mov	r4, r3
 80051c0:	e7f3      	b.n	80051aa <__assert_func+0x12>
 80051c2:	bf00      	nop
 80051c4:	20000f74 	.word	0x20000f74
 80051c8:	08007cb0 	.word	0x08007cb0
 80051cc:	08007cbd 	.word	0x08007cbd
 80051d0:	08007ceb 	.word	0x08007ceb

080051d4 <__errno>:
 80051d4:	4b01      	ldr	r3, [pc, #4]	; (80051dc <__errno+0x8>)
 80051d6:	6818      	ldr	r0, [r3, #0]
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	20000f74 	.word	0x20000f74

080051e0 <fiprintf>:
 80051e0:	b40e      	push	{r1, r2, r3}
 80051e2:	b503      	push	{r0, r1, lr}
 80051e4:	4601      	mov	r1, r0
 80051e6:	ab03      	add	r3, sp, #12
 80051e8:	4805      	ldr	r0, [pc, #20]	; (8005200 <fiprintf+0x20>)
 80051ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80051ee:	6800      	ldr	r0, [r0, #0]
 80051f0:	9301      	str	r3, [sp, #4]
 80051f2:	f000 f95b 	bl	80054ac <_vfiprintf_r>
 80051f6:	b002      	add	sp, #8
 80051f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80051fc:	b003      	add	sp, #12
 80051fe:	4770      	bx	lr
 8005200:	20000f74 	.word	0x20000f74

08005204 <__libc_init_array>:
 8005204:	b570      	push	{r4, r5, r6, lr}
 8005206:	4d0d      	ldr	r5, [pc, #52]	; (800523c <__libc_init_array+0x38>)
 8005208:	4c0d      	ldr	r4, [pc, #52]	; (8005240 <__libc_init_array+0x3c>)
 800520a:	1b64      	subs	r4, r4, r5
 800520c:	10a4      	asrs	r4, r4, #2
 800520e:	2600      	movs	r6, #0
 8005210:	42a6      	cmp	r6, r4
 8005212:	d109      	bne.n	8005228 <__libc_init_array+0x24>
 8005214:	4d0b      	ldr	r5, [pc, #44]	; (8005244 <__libc_init_array+0x40>)
 8005216:	4c0c      	ldr	r4, [pc, #48]	; (8005248 <__libc_init_array+0x44>)
 8005218:	f002 f9a4 	bl	8007564 <_init>
 800521c:	1b64      	subs	r4, r4, r5
 800521e:	10a4      	asrs	r4, r4, #2
 8005220:	2600      	movs	r6, #0
 8005222:	42a6      	cmp	r6, r4
 8005224:	d105      	bne.n	8005232 <__libc_init_array+0x2e>
 8005226:	bd70      	pop	{r4, r5, r6, pc}
 8005228:	f855 3b04 	ldr.w	r3, [r5], #4
 800522c:	4798      	blx	r3
 800522e:	3601      	adds	r6, #1
 8005230:	e7ee      	b.n	8005210 <__libc_init_array+0xc>
 8005232:	f855 3b04 	ldr.w	r3, [r5], #4
 8005236:	4798      	blx	r3
 8005238:	3601      	adds	r6, #1
 800523a:	e7f2      	b.n	8005222 <__libc_init_array+0x1e>
 800523c:	08007f60 	.word	0x08007f60
 8005240:	08007f60 	.word	0x08007f60
 8005244:	08007f60 	.word	0x08007f60
 8005248:	08007f64 	.word	0x08007f64

0800524c <malloc>:
 800524c:	4b02      	ldr	r3, [pc, #8]	; (8005258 <malloc+0xc>)
 800524e:	4601      	mov	r1, r0
 8005250:	6818      	ldr	r0, [r3, #0]
 8005252:	f000 b88d 	b.w	8005370 <_malloc_r>
 8005256:	bf00      	nop
 8005258:	20000f74 	.word	0x20000f74

0800525c <free>:
 800525c:	4b02      	ldr	r3, [pc, #8]	; (8005268 <free+0xc>)
 800525e:	4601      	mov	r1, r0
 8005260:	6818      	ldr	r0, [r3, #0]
 8005262:	f000 b819 	b.w	8005298 <_free_r>
 8005266:	bf00      	nop
 8005268:	20000f74 	.word	0x20000f74

0800526c <memcpy>:
 800526c:	440a      	add	r2, r1
 800526e:	4291      	cmp	r1, r2
 8005270:	f100 33ff 	add.w	r3, r0, #4294967295
 8005274:	d100      	bne.n	8005278 <memcpy+0xc>
 8005276:	4770      	bx	lr
 8005278:	b510      	push	{r4, lr}
 800527a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800527e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005282:	4291      	cmp	r1, r2
 8005284:	d1f9      	bne.n	800527a <memcpy+0xe>
 8005286:	bd10      	pop	{r4, pc}

08005288 <memset>:
 8005288:	4402      	add	r2, r0
 800528a:	4603      	mov	r3, r0
 800528c:	4293      	cmp	r3, r2
 800528e:	d100      	bne.n	8005292 <memset+0xa>
 8005290:	4770      	bx	lr
 8005292:	f803 1b01 	strb.w	r1, [r3], #1
 8005296:	e7f9      	b.n	800528c <memset+0x4>

08005298 <_free_r>:
 8005298:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800529a:	2900      	cmp	r1, #0
 800529c:	d044      	beq.n	8005328 <_free_r+0x90>
 800529e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052a2:	9001      	str	r0, [sp, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f1a1 0404 	sub.w	r4, r1, #4
 80052aa:	bfb8      	it	lt
 80052ac:	18e4      	addlt	r4, r4, r3
 80052ae:	f000 feb9 	bl	8006024 <__malloc_lock>
 80052b2:	4a1e      	ldr	r2, [pc, #120]	; (800532c <_free_r+0x94>)
 80052b4:	9801      	ldr	r0, [sp, #4]
 80052b6:	6813      	ldr	r3, [r2, #0]
 80052b8:	b933      	cbnz	r3, 80052c8 <_free_r+0x30>
 80052ba:	6063      	str	r3, [r4, #4]
 80052bc:	6014      	str	r4, [r2, #0]
 80052be:	b003      	add	sp, #12
 80052c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052c4:	f000 beb4 	b.w	8006030 <__malloc_unlock>
 80052c8:	42a3      	cmp	r3, r4
 80052ca:	d908      	bls.n	80052de <_free_r+0x46>
 80052cc:	6825      	ldr	r5, [r4, #0]
 80052ce:	1961      	adds	r1, r4, r5
 80052d0:	428b      	cmp	r3, r1
 80052d2:	bf01      	itttt	eq
 80052d4:	6819      	ldreq	r1, [r3, #0]
 80052d6:	685b      	ldreq	r3, [r3, #4]
 80052d8:	1949      	addeq	r1, r1, r5
 80052da:	6021      	streq	r1, [r4, #0]
 80052dc:	e7ed      	b.n	80052ba <_free_r+0x22>
 80052de:	461a      	mov	r2, r3
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	b10b      	cbz	r3, 80052e8 <_free_r+0x50>
 80052e4:	42a3      	cmp	r3, r4
 80052e6:	d9fa      	bls.n	80052de <_free_r+0x46>
 80052e8:	6811      	ldr	r1, [r2, #0]
 80052ea:	1855      	adds	r5, r2, r1
 80052ec:	42a5      	cmp	r5, r4
 80052ee:	d10b      	bne.n	8005308 <_free_r+0x70>
 80052f0:	6824      	ldr	r4, [r4, #0]
 80052f2:	4421      	add	r1, r4
 80052f4:	1854      	adds	r4, r2, r1
 80052f6:	42a3      	cmp	r3, r4
 80052f8:	6011      	str	r1, [r2, #0]
 80052fa:	d1e0      	bne.n	80052be <_free_r+0x26>
 80052fc:	681c      	ldr	r4, [r3, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	6053      	str	r3, [r2, #4]
 8005302:	4421      	add	r1, r4
 8005304:	6011      	str	r1, [r2, #0]
 8005306:	e7da      	b.n	80052be <_free_r+0x26>
 8005308:	d902      	bls.n	8005310 <_free_r+0x78>
 800530a:	230c      	movs	r3, #12
 800530c:	6003      	str	r3, [r0, #0]
 800530e:	e7d6      	b.n	80052be <_free_r+0x26>
 8005310:	6825      	ldr	r5, [r4, #0]
 8005312:	1961      	adds	r1, r4, r5
 8005314:	428b      	cmp	r3, r1
 8005316:	bf04      	itt	eq
 8005318:	6819      	ldreq	r1, [r3, #0]
 800531a:	685b      	ldreq	r3, [r3, #4]
 800531c:	6063      	str	r3, [r4, #4]
 800531e:	bf04      	itt	eq
 8005320:	1949      	addeq	r1, r1, r5
 8005322:	6021      	streq	r1, [r4, #0]
 8005324:	6054      	str	r4, [r2, #4]
 8005326:	e7ca      	b.n	80052be <_free_r+0x26>
 8005328:	b003      	add	sp, #12
 800532a:	bd30      	pop	{r4, r5, pc}
 800532c:	200025a0 	.word	0x200025a0

08005330 <sbrk_aligned>:
 8005330:	b570      	push	{r4, r5, r6, lr}
 8005332:	4e0e      	ldr	r6, [pc, #56]	; (800536c <sbrk_aligned+0x3c>)
 8005334:	460c      	mov	r4, r1
 8005336:	6831      	ldr	r1, [r6, #0]
 8005338:	4605      	mov	r5, r0
 800533a:	b911      	cbnz	r1, 8005342 <sbrk_aligned+0x12>
 800533c:	f000 fb7a 	bl	8005a34 <_sbrk_r>
 8005340:	6030      	str	r0, [r6, #0]
 8005342:	4621      	mov	r1, r4
 8005344:	4628      	mov	r0, r5
 8005346:	f000 fb75 	bl	8005a34 <_sbrk_r>
 800534a:	1c43      	adds	r3, r0, #1
 800534c:	d00a      	beq.n	8005364 <sbrk_aligned+0x34>
 800534e:	1cc4      	adds	r4, r0, #3
 8005350:	f024 0403 	bic.w	r4, r4, #3
 8005354:	42a0      	cmp	r0, r4
 8005356:	d007      	beq.n	8005368 <sbrk_aligned+0x38>
 8005358:	1a21      	subs	r1, r4, r0
 800535a:	4628      	mov	r0, r5
 800535c:	f000 fb6a 	bl	8005a34 <_sbrk_r>
 8005360:	3001      	adds	r0, #1
 8005362:	d101      	bne.n	8005368 <sbrk_aligned+0x38>
 8005364:	f04f 34ff 	mov.w	r4, #4294967295
 8005368:	4620      	mov	r0, r4
 800536a:	bd70      	pop	{r4, r5, r6, pc}
 800536c:	200025a4 	.word	0x200025a4

08005370 <_malloc_r>:
 8005370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005374:	1ccd      	adds	r5, r1, #3
 8005376:	f025 0503 	bic.w	r5, r5, #3
 800537a:	3508      	adds	r5, #8
 800537c:	2d0c      	cmp	r5, #12
 800537e:	bf38      	it	cc
 8005380:	250c      	movcc	r5, #12
 8005382:	2d00      	cmp	r5, #0
 8005384:	4607      	mov	r7, r0
 8005386:	db01      	blt.n	800538c <_malloc_r+0x1c>
 8005388:	42a9      	cmp	r1, r5
 800538a:	d905      	bls.n	8005398 <_malloc_r+0x28>
 800538c:	230c      	movs	r3, #12
 800538e:	603b      	str	r3, [r7, #0]
 8005390:	2600      	movs	r6, #0
 8005392:	4630      	mov	r0, r6
 8005394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005398:	4e2e      	ldr	r6, [pc, #184]	; (8005454 <_malloc_r+0xe4>)
 800539a:	f000 fe43 	bl	8006024 <__malloc_lock>
 800539e:	6833      	ldr	r3, [r6, #0]
 80053a0:	461c      	mov	r4, r3
 80053a2:	bb34      	cbnz	r4, 80053f2 <_malloc_r+0x82>
 80053a4:	4629      	mov	r1, r5
 80053a6:	4638      	mov	r0, r7
 80053a8:	f7ff ffc2 	bl	8005330 <sbrk_aligned>
 80053ac:	1c43      	adds	r3, r0, #1
 80053ae:	4604      	mov	r4, r0
 80053b0:	d14d      	bne.n	800544e <_malloc_r+0xde>
 80053b2:	6834      	ldr	r4, [r6, #0]
 80053b4:	4626      	mov	r6, r4
 80053b6:	2e00      	cmp	r6, #0
 80053b8:	d140      	bne.n	800543c <_malloc_r+0xcc>
 80053ba:	6823      	ldr	r3, [r4, #0]
 80053bc:	4631      	mov	r1, r6
 80053be:	4638      	mov	r0, r7
 80053c0:	eb04 0803 	add.w	r8, r4, r3
 80053c4:	f000 fb36 	bl	8005a34 <_sbrk_r>
 80053c8:	4580      	cmp	r8, r0
 80053ca:	d13a      	bne.n	8005442 <_malloc_r+0xd2>
 80053cc:	6821      	ldr	r1, [r4, #0]
 80053ce:	3503      	adds	r5, #3
 80053d0:	1a6d      	subs	r5, r5, r1
 80053d2:	f025 0503 	bic.w	r5, r5, #3
 80053d6:	3508      	adds	r5, #8
 80053d8:	2d0c      	cmp	r5, #12
 80053da:	bf38      	it	cc
 80053dc:	250c      	movcc	r5, #12
 80053de:	4629      	mov	r1, r5
 80053e0:	4638      	mov	r0, r7
 80053e2:	f7ff ffa5 	bl	8005330 <sbrk_aligned>
 80053e6:	3001      	adds	r0, #1
 80053e8:	d02b      	beq.n	8005442 <_malloc_r+0xd2>
 80053ea:	6823      	ldr	r3, [r4, #0]
 80053ec:	442b      	add	r3, r5
 80053ee:	6023      	str	r3, [r4, #0]
 80053f0:	e00e      	b.n	8005410 <_malloc_r+0xa0>
 80053f2:	6822      	ldr	r2, [r4, #0]
 80053f4:	1b52      	subs	r2, r2, r5
 80053f6:	d41e      	bmi.n	8005436 <_malloc_r+0xc6>
 80053f8:	2a0b      	cmp	r2, #11
 80053fa:	d916      	bls.n	800542a <_malloc_r+0xba>
 80053fc:	1961      	adds	r1, r4, r5
 80053fe:	42a3      	cmp	r3, r4
 8005400:	6025      	str	r5, [r4, #0]
 8005402:	bf18      	it	ne
 8005404:	6059      	strne	r1, [r3, #4]
 8005406:	6863      	ldr	r3, [r4, #4]
 8005408:	bf08      	it	eq
 800540a:	6031      	streq	r1, [r6, #0]
 800540c:	5162      	str	r2, [r4, r5]
 800540e:	604b      	str	r3, [r1, #4]
 8005410:	4638      	mov	r0, r7
 8005412:	f104 060b 	add.w	r6, r4, #11
 8005416:	f000 fe0b 	bl	8006030 <__malloc_unlock>
 800541a:	f026 0607 	bic.w	r6, r6, #7
 800541e:	1d23      	adds	r3, r4, #4
 8005420:	1af2      	subs	r2, r6, r3
 8005422:	d0b6      	beq.n	8005392 <_malloc_r+0x22>
 8005424:	1b9b      	subs	r3, r3, r6
 8005426:	50a3      	str	r3, [r4, r2]
 8005428:	e7b3      	b.n	8005392 <_malloc_r+0x22>
 800542a:	6862      	ldr	r2, [r4, #4]
 800542c:	42a3      	cmp	r3, r4
 800542e:	bf0c      	ite	eq
 8005430:	6032      	streq	r2, [r6, #0]
 8005432:	605a      	strne	r2, [r3, #4]
 8005434:	e7ec      	b.n	8005410 <_malloc_r+0xa0>
 8005436:	4623      	mov	r3, r4
 8005438:	6864      	ldr	r4, [r4, #4]
 800543a:	e7b2      	b.n	80053a2 <_malloc_r+0x32>
 800543c:	4634      	mov	r4, r6
 800543e:	6876      	ldr	r6, [r6, #4]
 8005440:	e7b9      	b.n	80053b6 <_malloc_r+0x46>
 8005442:	230c      	movs	r3, #12
 8005444:	603b      	str	r3, [r7, #0]
 8005446:	4638      	mov	r0, r7
 8005448:	f000 fdf2 	bl	8006030 <__malloc_unlock>
 800544c:	e7a1      	b.n	8005392 <_malloc_r+0x22>
 800544e:	6025      	str	r5, [r4, #0]
 8005450:	e7de      	b.n	8005410 <_malloc_r+0xa0>
 8005452:	bf00      	nop
 8005454:	200025a0 	.word	0x200025a0

08005458 <__sfputc_r>:
 8005458:	6893      	ldr	r3, [r2, #8]
 800545a:	3b01      	subs	r3, #1
 800545c:	2b00      	cmp	r3, #0
 800545e:	b410      	push	{r4}
 8005460:	6093      	str	r3, [r2, #8]
 8005462:	da08      	bge.n	8005476 <__sfputc_r+0x1e>
 8005464:	6994      	ldr	r4, [r2, #24]
 8005466:	42a3      	cmp	r3, r4
 8005468:	db01      	blt.n	800546e <__sfputc_r+0x16>
 800546a:	290a      	cmp	r1, #10
 800546c:	d103      	bne.n	8005476 <__sfputc_r+0x1e>
 800546e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005472:	f000 baef 	b.w	8005a54 <__swbuf_r>
 8005476:	6813      	ldr	r3, [r2, #0]
 8005478:	1c58      	adds	r0, r3, #1
 800547a:	6010      	str	r0, [r2, #0]
 800547c:	7019      	strb	r1, [r3, #0]
 800547e:	4608      	mov	r0, r1
 8005480:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005484:	4770      	bx	lr

08005486 <__sfputs_r>:
 8005486:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005488:	4606      	mov	r6, r0
 800548a:	460f      	mov	r7, r1
 800548c:	4614      	mov	r4, r2
 800548e:	18d5      	adds	r5, r2, r3
 8005490:	42ac      	cmp	r4, r5
 8005492:	d101      	bne.n	8005498 <__sfputs_r+0x12>
 8005494:	2000      	movs	r0, #0
 8005496:	e007      	b.n	80054a8 <__sfputs_r+0x22>
 8005498:	f814 1b01 	ldrb.w	r1, [r4], #1
 800549c:	463a      	mov	r2, r7
 800549e:	4630      	mov	r0, r6
 80054a0:	f7ff ffda 	bl	8005458 <__sfputc_r>
 80054a4:	1c43      	adds	r3, r0, #1
 80054a6:	d1f3      	bne.n	8005490 <__sfputs_r+0xa>
 80054a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080054ac <_vfiprintf_r>:
 80054ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054b0:	460d      	mov	r5, r1
 80054b2:	b09d      	sub	sp, #116	; 0x74
 80054b4:	4614      	mov	r4, r2
 80054b6:	4698      	mov	r8, r3
 80054b8:	4606      	mov	r6, r0
 80054ba:	b118      	cbz	r0, 80054c4 <_vfiprintf_r+0x18>
 80054bc:	6983      	ldr	r3, [r0, #24]
 80054be:	b90b      	cbnz	r3, 80054c4 <_vfiprintf_r+0x18>
 80054c0:	f000 fcaa 	bl	8005e18 <__sinit>
 80054c4:	4b89      	ldr	r3, [pc, #548]	; (80056ec <_vfiprintf_r+0x240>)
 80054c6:	429d      	cmp	r5, r3
 80054c8:	d11b      	bne.n	8005502 <_vfiprintf_r+0x56>
 80054ca:	6875      	ldr	r5, [r6, #4]
 80054cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054ce:	07d9      	lsls	r1, r3, #31
 80054d0:	d405      	bmi.n	80054de <_vfiprintf_r+0x32>
 80054d2:	89ab      	ldrh	r3, [r5, #12]
 80054d4:	059a      	lsls	r2, r3, #22
 80054d6:	d402      	bmi.n	80054de <_vfiprintf_r+0x32>
 80054d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054da:	f000 fd3b 	bl	8005f54 <__retarget_lock_acquire_recursive>
 80054de:	89ab      	ldrh	r3, [r5, #12]
 80054e0:	071b      	lsls	r3, r3, #28
 80054e2:	d501      	bpl.n	80054e8 <_vfiprintf_r+0x3c>
 80054e4:	692b      	ldr	r3, [r5, #16]
 80054e6:	b9eb      	cbnz	r3, 8005524 <_vfiprintf_r+0x78>
 80054e8:	4629      	mov	r1, r5
 80054ea:	4630      	mov	r0, r6
 80054ec:	f000 fb04 	bl	8005af8 <__swsetup_r>
 80054f0:	b1c0      	cbz	r0, 8005524 <_vfiprintf_r+0x78>
 80054f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054f4:	07dc      	lsls	r4, r3, #31
 80054f6:	d50e      	bpl.n	8005516 <_vfiprintf_r+0x6a>
 80054f8:	f04f 30ff 	mov.w	r0, #4294967295
 80054fc:	b01d      	add	sp, #116	; 0x74
 80054fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005502:	4b7b      	ldr	r3, [pc, #492]	; (80056f0 <_vfiprintf_r+0x244>)
 8005504:	429d      	cmp	r5, r3
 8005506:	d101      	bne.n	800550c <_vfiprintf_r+0x60>
 8005508:	68b5      	ldr	r5, [r6, #8]
 800550a:	e7df      	b.n	80054cc <_vfiprintf_r+0x20>
 800550c:	4b79      	ldr	r3, [pc, #484]	; (80056f4 <_vfiprintf_r+0x248>)
 800550e:	429d      	cmp	r5, r3
 8005510:	bf08      	it	eq
 8005512:	68f5      	ldreq	r5, [r6, #12]
 8005514:	e7da      	b.n	80054cc <_vfiprintf_r+0x20>
 8005516:	89ab      	ldrh	r3, [r5, #12]
 8005518:	0598      	lsls	r0, r3, #22
 800551a:	d4ed      	bmi.n	80054f8 <_vfiprintf_r+0x4c>
 800551c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800551e:	f000 fd1a 	bl	8005f56 <__retarget_lock_release_recursive>
 8005522:	e7e9      	b.n	80054f8 <_vfiprintf_r+0x4c>
 8005524:	2300      	movs	r3, #0
 8005526:	9309      	str	r3, [sp, #36]	; 0x24
 8005528:	2320      	movs	r3, #32
 800552a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800552e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005532:	2330      	movs	r3, #48	; 0x30
 8005534:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80056f8 <_vfiprintf_r+0x24c>
 8005538:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800553c:	f04f 0901 	mov.w	r9, #1
 8005540:	4623      	mov	r3, r4
 8005542:	469a      	mov	sl, r3
 8005544:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005548:	b10a      	cbz	r2, 800554e <_vfiprintf_r+0xa2>
 800554a:	2a25      	cmp	r2, #37	; 0x25
 800554c:	d1f9      	bne.n	8005542 <_vfiprintf_r+0x96>
 800554e:	ebba 0b04 	subs.w	fp, sl, r4
 8005552:	d00b      	beq.n	800556c <_vfiprintf_r+0xc0>
 8005554:	465b      	mov	r3, fp
 8005556:	4622      	mov	r2, r4
 8005558:	4629      	mov	r1, r5
 800555a:	4630      	mov	r0, r6
 800555c:	f7ff ff93 	bl	8005486 <__sfputs_r>
 8005560:	3001      	adds	r0, #1
 8005562:	f000 80aa 	beq.w	80056ba <_vfiprintf_r+0x20e>
 8005566:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005568:	445a      	add	r2, fp
 800556a:	9209      	str	r2, [sp, #36]	; 0x24
 800556c:	f89a 3000 	ldrb.w	r3, [sl]
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 80a2 	beq.w	80056ba <_vfiprintf_r+0x20e>
 8005576:	2300      	movs	r3, #0
 8005578:	f04f 32ff 	mov.w	r2, #4294967295
 800557c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005580:	f10a 0a01 	add.w	sl, sl, #1
 8005584:	9304      	str	r3, [sp, #16]
 8005586:	9307      	str	r3, [sp, #28]
 8005588:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800558c:	931a      	str	r3, [sp, #104]	; 0x68
 800558e:	4654      	mov	r4, sl
 8005590:	2205      	movs	r2, #5
 8005592:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005596:	4858      	ldr	r0, [pc, #352]	; (80056f8 <_vfiprintf_r+0x24c>)
 8005598:	f7fa fe1a 	bl	80001d0 <memchr>
 800559c:	9a04      	ldr	r2, [sp, #16]
 800559e:	b9d8      	cbnz	r0, 80055d8 <_vfiprintf_r+0x12c>
 80055a0:	06d1      	lsls	r1, r2, #27
 80055a2:	bf44      	itt	mi
 80055a4:	2320      	movmi	r3, #32
 80055a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055aa:	0713      	lsls	r3, r2, #28
 80055ac:	bf44      	itt	mi
 80055ae:	232b      	movmi	r3, #43	; 0x2b
 80055b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055b4:	f89a 3000 	ldrb.w	r3, [sl]
 80055b8:	2b2a      	cmp	r3, #42	; 0x2a
 80055ba:	d015      	beq.n	80055e8 <_vfiprintf_r+0x13c>
 80055bc:	9a07      	ldr	r2, [sp, #28]
 80055be:	4654      	mov	r4, sl
 80055c0:	2000      	movs	r0, #0
 80055c2:	f04f 0c0a 	mov.w	ip, #10
 80055c6:	4621      	mov	r1, r4
 80055c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055cc:	3b30      	subs	r3, #48	; 0x30
 80055ce:	2b09      	cmp	r3, #9
 80055d0:	d94e      	bls.n	8005670 <_vfiprintf_r+0x1c4>
 80055d2:	b1b0      	cbz	r0, 8005602 <_vfiprintf_r+0x156>
 80055d4:	9207      	str	r2, [sp, #28]
 80055d6:	e014      	b.n	8005602 <_vfiprintf_r+0x156>
 80055d8:	eba0 0308 	sub.w	r3, r0, r8
 80055dc:	fa09 f303 	lsl.w	r3, r9, r3
 80055e0:	4313      	orrs	r3, r2
 80055e2:	9304      	str	r3, [sp, #16]
 80055e4:	46a2      	mov	sl, r4
 80055e6:	e7d2      	b.n	800558e <_vfiprintf_r+0xe2>
 80055e8:	9b03      	ldr	r3, [sp, #12]
 80055ea:	1d19      	adds	r1, r3, #4
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	9103      	str	r1, [sp, #12]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	bfbb      	ittet	lt
 80055f4:	425b      	neglt	r3, r3
 80055f6:	f042 0202 	orrlt.w	r2, r2, #2
 80055fa:	9307      	strge	r3, [sp, #28]
 80055fc:	9307      	strlt	r3, [sp, #28]
 80055fe:	bfb8      	it	lt
 8005600:	9204      	strlt	r2, [sp, #16]
 8005602:	7823      	ldrb	r3, [r4, #0]
 8005604:	2b2e      	cmp	r3, #46	; 0x2e
 8005606:	d10c      	bne.n	8005622 <_vfiprintf_r+0x176>
 8005608:	7863      	ldrb	r3, [r4, #1]
 800560a:	2b2a      	cmp	r3, #42	; 0x2a
 800560c:	d135      	bne.n	800567a <_vfiprintf_r+0x1ce>
 800560e:	9b03      	ldr	r3, [sp, #12]
 8005610:	1d1a      	adds	r2, r3, #4
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	9203      	str	r2, [sp, #12]
 8005616:	2b00      	cmp	r3, #0
 8005618:	bfb8      	it	lt
 800561a:	f04f 33ff 	movlt.w	r3, #4294967295
 800561e:	3402      	adds	r4, #2
 8005620:	9305      	str	r3, [sp, #20]
 8005622:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005708 <_vfiprintf_r+0x25c>
 8005626:	7821      	ldrb	r1, [r4, #0]
 8005628:	2203      	movs	r2, #3
 800562a:	4650      	mov	r0, sl
 800562c:	f7fa fdd0 	bl	80001d0 <memchr>
 8005630:	b140      	cbz	r0, 8005644 <_vfiprintf_r+0x198>
 8005632:	2340      	movs	r3, #64	; 0x40
 8005634:	eba0 000a 	sub.w	r0, r0, sl
 8005638:	fa03 f000 	lsl.w	r0, r3, r0
 800563c:	9b04      	ldr	r3, [sp, #16]
 800563e:	4303      	orrs	r3, r0
 8005640:	3401      	adds	r4, #1
 8005642:	9304      	str	r3, [sp, #16]
 8005644:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005648:	482c      	ldr	r0, [pc, #176]	; (80056fc <_vfiprintf_r+0x250>)
 800564a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800564e:	2206      	movs	r2, #6
 8005650:	f7fa fdbe 	bl	80001d0 <memchr>
 8005654:	2800      	cmp	r0, #0
 8005656:	d03f      	beq.n	80056d8 <_vfiprintf_r+0x22c>
 8005658:	4b29      	ldr	r3, [pc, #164]	; (8005700 <_vfiprintf_r+0x254>)
 800565a:	bb1b      	cbnz	r3, 80056a4 <_vfiprintf_r+0x1f8>
 800565c:	9b03      	ldr	r3, [sp, #12]
 800565e:	3307      	adds	r3, #7
 8005660:	f023 0307 	bic.w	r3, r3, #7
 8005664:	3308      	adds	r3, #8
 8005666:	9303      	str	r3, [sp, #12]
 8005668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800566a:	443b      	add	r3, r7
 800566c:	9309      	str	r3, [sp, #36]	; 0x24
 800566e:	e767      	b.n	8005540 <_vfiprintf_r+0x94>
 8005670:	fb0c 3202 	mla	r2, ip, r2, r3
 8005674:	460c      	mov	r4, r1
 8005676:	2001      	movs	r0, #1
 8005678:	e7a5      	b.n	80055c6 <_vfiprintf_r+0x11a>
 800567a:	2300      	movs	r3, #0
 800567c:	3401      	adds	r4, #1
 800567e:	9305      	str	r3, [sp, #20]
 8005680:	4619      	mov	r1, r3
 8005682:	f04f 0c0a 	mov.w	ip, #10
 8005686:	4620      	mov	r0, r4
 8005688:	f810 2b01 	ldrb.w	r2, [r0], #1
 800568c:	3a30      	subs	r2, #48	; 0x30
 800568e:	2a09      	cmp	r2, #9
 8005690:	d903      	bls.n	800569a <_vfiprintf_r+0x1ee>
 8005692:	2b00      	cmp	r3, #0
 8005694:	d0c5      	beq.n	8005622 <_vfiprintf_r+0x176>
 8005696:	9105      	str	r1, [sp, #20]
 8005698:	e7c3      	b.n	8005622 <_vfiprintf_r+0x176>
 800569a:	fb0c 2101 	mla	r1, ip, r1, r2
 800569e:	4604      	mov	r4, r0
 80056a0:	2301      	movs	r3, #1
 80056a2:	e7f0      	b.n	8005686 <_vfiprintf_r+0x1da>
 80056a4:	ab03      	add	r3, sp, #12
 80056a6:	9300      	str	r3, [sp, #0]
 80056a8:	462a      	mov	r2, r5
 80056aa:	4b16      	ldr	r3, [pc, #88]	; (8005704 <_vfiprintf_r+0x258>)
 80056ac:	a904      	add	r1, sp, #16
 80056ae:	4630      	mov	r0, r6
 80056b0:	f3af 8000 	nop.w
 80056b4:	4607      	mov	r7, r0
 80056b6:	1c78      	adds	r0, r7, #1
 80056b8:	d1d6      	bne.n	8005668 <_vfiprintf_r+0x1bc>
 80056ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056bc:	07d9      	lsls	r1, r3, #31
 80056be:	d405      	bmi.n	80056cc <_vfiprintf_r+0x220>
 80056c0:	89ab      	ldrh	r3, [r5, #12]
 80056c2:	059a      	lsls	r2, r3, #22
 80056c4:	d402      	bmi.n	80056cc <_vfiprintf_r+0x220>
 80056c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056c8:	f000 fc45 	bl	8005f56 <__retarget_lock_release_recursive>
 80056cc:	89ab      	ldrh	r3, [r5, #12]
 80056ce:	065b      	lsls	r3, r3, #25
 80056d0:	f53f af12 	bmi.w	80054f8 <_vfiprintf_r+0x4c>
 80056d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056d6:	e711      	b.n	80054fc <_vfiprintf_r+0x50>
 80056d8:	ab03      	add	r3, sp, #12
 80056da:	9300      	str	r3, [sp, #0]
 80056dc:	462a      	mov	r2, r5
 80056de:	4b09      	ldr	r3, [pc, #36]	; (8005704 <_vfiprintf_r+0x258>)
 80056e0:	a904      	add	r1, sp, #16
 80056e2:	4630      	mov	r0, r6
 80056e4:	f000 f880 	bl	80057e8 <_printf_i>
 80056e8:	e7e4      	b.n	80056b4 <_vfiprintf_r+0x208>
 80056ea:	bf00      	nop
 80056ec:	08007d44 	.word	0x08007d44
 80056f0:	08007d64 	.word	0x08007d64
 80056f4:	08007d24 	.word	0x08007d24
 80056f8:	08007cf0 	.word	0x08007cf0
 80056fc:	08007cfa 	.word	0x08007cfa
 8005700:	00000000 	.word	0x00000000
 8005704:	08005487 	.word	0x08005487
 8005708:	08007cf6 	.word	0x08007cf6

0800570c <_printf_common>:
 800570c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005710:	4616      	mov	r6, r2
 8005712:	4699      	mov	r9, r3
 8005714:	688a      	ldr	r2, [r1, #8]
 8005716:	690b      	ldr	r3, [r1, #16]
 8005718:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800571c:	4293      	cmp	r3, r2
 800571e:	bfb8      	it	lt
 8005720:	4613      	movlt	r3, r2
 8005722:	6033      	str	r3, [r6, #0]
 8005724:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005728:	4607      	mov	r7, r0
 800572a:	460c      	mov	r4, r1
 800572c:	b10a      	cbz	r2, 8005732 <_printf_common+0x26>
 800572e:	3301      	adds	r3, #1
 8005730:	6033      	str	r3, [r6, #0]
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	0699      	lsls	r1, r3, #26
 8005736:	bf42      	ittt	mi
 8005738:	6833      	ldrmi	r3, [r6, #0]
 800573a:	3302      	addmi	r3, #2
 800573c:	6033      	strmi	r3, [r6, #0]
 800573e:	6825      	ldr	r5, [r4, #0]
 8005740:	f015 0506 	ands.w	r5, r5, #6
 8005744:	d106      	bne.n	8005754 <_printf_common+0x48>
 8005746:	f104 0a19 	add.w	sl, r4, #25
 800574a:	68e3      	ldr	r3, [r4, #12]
 800574c:	6832      	ldr	r2, [r6, #0]
 800574e:	1a9b      	subs	r3, r3, r2
 8005750:	42ab      	cmp	r3, r5
 8005752:	dc26      	bgt.n	80057a2 <_printf_common+0x96>
 8005754:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005758:	1e13      	subs	r3, r2, #0
 800575a:	6822      	ldr	r2, [r4, #0]
 800575c:	bf18      	it	ne
 800575e:	2301      	movne	r3, #1
 8005760:	0692      	lsls	r2, r2, #26
 8005762:	d42b      	bmi.n	80057bc <_printf_common+0xb0>
 8005764:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005768:	4649      	mov	r1, r9
 800576a:	4638      	mov	r0, r7
 800576c:	47c0      	blx	r8
 800576e:	3001      	adds	r0, #1
 8005770:	d01e      	beq.n	80057b0 <_printf_common+0xa4>
 8005772:	6823      	ldr	r3, [r4, #0]
 8005774:	68e5      	ldr	r5, [r4, #12]
 8005776:	6832      	ldr	r2, [r6, #0]
 8005778:	f003 0306 	and.w	r3, r3, #6
 800577c:	2b04      	cmp	r3, #4
 800577e:	bf08      	it	eq
 8005780:	1aad      	subeq	r5, r5, r2
 8005782:	68a3      	ldr	r3, [r4, #8]
 8005784:	6922      	ldr	r2, [r4, #16]
 8005786:	bf0c      	ite	eq
 8005788:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800578c:	2500      	movne	r5, #0
 800578e:	4293      	cmp	r3, r2
 8005790:	bfc4      	itt	gt
 8005792:	1a9b      	subgt	r3, r3, r2
 8005794:	18ed      	addgt	r5, r5, r3
 8005796:	2600      	movs	r6, #0
 8005798:	341a      	adds	r4, #26
 800579a:	42b5      	cmp	r5, r6
 800579c:	d11a      	bne.n	80057d4 <_printf_common+0xc8>
 800579e:	2000      	movs	r0, #0
 80057a0:	e008      	b.n	80057b4 <_printf_common+0xa8>
 80057a2:	2301      	movs	r3, #1
 80057a4:	4652      	mov	r2, sl
 80057a6:	4649      	mov	r1, r9
 80057a8:	4638      	mov	r0, r7
 80057aa:	47c0      	blx	r8
 80057ac:	3001      	adds	r0, #1
 80057ae:	d103      	bne.n	80057b8 <_printf_common+0xac>
 80057b0:	f04f 30ff 	mov.w	r0, #4294967295
 80057b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057b8:	3501      	adds	r5, #1
 80057ba:	e7c6      	b.n	800574a <_printf_common+0x3e>
 80057bc:	18e1      	adds	r1, r4, r3
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	2030      	movs	r0, #48	; 0x30
 80057c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057c6:	4422      	add	r2, r4
 80057c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057d0:	3302      	adds	r3, #2
 80057d2:	e7c7      	b.n	8005764 <_printf_common+0x58>
 80057d4:	2301      	movs	r3, #1
 80057d6:	4622      	mov	r2, r4
 80057d8:	4649      	mov	r1, r9
 80057da:	4638      	mov	r0, r7
 80057dc:	47c0      	blx	r8
 80057de:	3001      	adds	r0, #1
 80057e0:	d0e6      	beq.n	80057b0 <_printf_common+0xa4>
 80057e2:	3601      	adds	r6, #1
 80057e4:	e7d9      	b.n	800579a <_printf_common+0x8e>
	...

080057e8 <_printf_i>:
 80057e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057ec:	7e0f      	ldrb	r7, [r1, #24]
 80057ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057f0:	2f78      	cmp	r7, #120	; 0x78
 80057f2:	4691      	mov	r9, r2
 80057f4:	4680      	mov	r8, r0
 80057f6:	460c      	mov	r4, r1
 80057f8:	469a      	mov	sl, r3
 80057fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057fe:	d807      	bhi.n	8005810 <_printf_i+0x28>
 8005800:	2f62      	cmp	r7, #98	; 0x62
 8005802:	d80a      	bhi.n	800581a <_printf_i+0x32>
 8005804:	2f00      	cmp	r7, #0
 8005806:	f000 80d8 	beq.w	80059ba <_printf_i+0x1d2>
 800580a:	2f58      	cmp	r7, #88	; 0x58
 800580c:	f000 80a3 	beq.w	8005956 <_printf_i+0x16e>
 8005810:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005814:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005818:	e03a      	b.n	8005890 <_printf_i+0xa8>
 800581a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800581e:	2b15      	cmp	r3, #21
 8005820:	d8f6      	bhi.n	8005810 <_printf_i+0x28>
 8005822:	a101      	add	r1, pc, #4	; (adr r1, 8005828 <_printf_i+0x40>)
 8005824:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005828:	08005881 	.word	0x08005881
 800582c:	08005895 	.word	0x08005895
 8005830:	08005811 	.word	0x08005811
 8005834:	08005811 	.word	0x08005811
 8005838:	08005811 	.word	0x08005811
 800583c:	08005811 	.word	0x08005811
 8005840:	08005895 	.word	0x08005895
 8005844:	08005811 	.word	0x08005811
 8005848:	08005811 	.word	0x08005811
 800584c:	08005811 	.word	0x08005811
 8005850:	08005811 	.word	0x08005811
 8005854:	080059a1 	.word	0x080059a1
 8005858:	080058c5 	.word	0x080058c5
 800585c:	08005983 	.word	0x08005983
 8005860:	08005811 	.word	0x08005811
 8005864:	08005811 	.word	0x08005811
 8005868:	080059c3 	.word	0x080059c3
 800586c:	08005811 	.word	0x08005811
 8005870:	080058c5 	.word	0x080058c5
 8005874:	08005811 	.word	0x08005811
 8005878:	08005811 	.word	0x08005811
 800587c:	0800598b 	.word	0x0800598b
 8005880:	682b      	ldr	r3, [r5, #0]
 8005882:	1d1a      	adds	r2, r3, #4
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	602a      	str	r2, [r5, #0]
 8005888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800588c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005890:	2301      	movs	r3, #1
 8005892:	e0a3      	b.n	80059dc <_printf_i+0x1f4>
 8005894:	6820      	ldr	r0, [r4, #0]
 8005896:	6829      	ldr	r1, [r5, #0]
 8005898:	0606      	lsls	r6, r0, #24
 800589a:	f101 0304 	add.w	r3, r1, #4
 800589e:	d50a      	bpl.n	80058b6 <_printf_i+0xce>
 80058a0:	680e      	ldr	r6, [r1, #0]
 80058a2:	602b      	str	r3, [r5, #0]
 80058a4:	2e00      	cmp	r6, #0
 80058a6:	da03      	bge.n	80058b0 <_printf_i+0xc8>
 80058a8:	232d      	movs	r3, #45	; 0x2d
 80058aa:	4276      	negs	r6, r6
 80058ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058b0:	485e      	ldr	r0, [pc, #376]	; (8005a2c <_printf_i+0x244>)
 80058b2:	230a      	movs	r3, #10
 80058b4:	e019      	b.n	80058ea <_printf_i+0x102>
 80058b6:	680e      	ldr	r6, [r1, #0]
 80058b8:	602b      	str	r3, [r5, #0]
 80058ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80058be:	bf18      	it	ne
 80058c0:	b236      	sxthne	r6, r6
 80058c2:	e7ef      	b.n	80058a4 <_printf_i+0xbc>
 80058c4:	682b      	ldr	r3, [r5, #0]
 80058c6:	6820      	ldr	r0, [r4, #0]
 80058c8:	1d19      	adds	r1, r3, #4
 80058ca:	6029      	str	r1, [r5, #0]
 80058cc:	0601      	lsls	r1, r0, #24
 80058ce:	d501      	bpl.n	80058d4 <_printf_i+0xec>
 80058d0:	681e      	ldr	r6, [r3, #0]
 80058d2:	e002      	b.n	80058da <_printf_i+0xf2>
 80058d4:	0646      	lsls	r6, r0, #25
 80058d6:	d5fb      	bpl.n	80058d0 <_printf_i+0xe8>
 80058d8:	881e      	ldrh	r6, [r3, #0]
 80058da:	4854      	ldr	r0, [pc, #336]	; (8005a2c <_printf_i+0x244>)
 80058dc:	2f6f      	cmp	r7, #111	; 0x6f
 80058de:	bf0c      	ite	eq
 80058e0:	2308      	moveq	r3, #8
 80058e2:	230a      	movne	r3, #10
 80058e4:	2100      	movs	r1, #0
 80058e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058ea:	6865      	ldr	r5, [r4, #4]
 80058ec:	60a5      	str	r5, [r4, #8]
 80058ee:	2d00      	cmp	r5, #0
 80058f0:	bfa2      	ittt	ge
 80058f2:	6821      	ldrge	r1, [r4, #0]
 80058f4:	f021 0104 	bicge.w	r1, r1, #4
 80058f8:	6021      	strge	r1, [r4, #0]
 80058fa:	b90e      	cbnz	r6, 8005900 <_printf_i+0x118>
 80058fc:	2d00      	cmp	r5, #0
 80058fe:	d04d      	beq.n	800599c <_printf_i+0x1b4>
 8005900:	4615      	mov	r5, r2
 8005902:	fbb6 f1f3 	udiv	r1, r6, r3
 8005906:	fb03 6711 	mls	r7, r3, r1, r6
 800590a:	5dc7      	ldrb	r7, [r0, r7]
 800590c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005910:	4637      	mov	r7, r6
 8005912:	42bb      	cmp	r3, r7
 8005914:	460e      	mov	r6, r1
 8005916:	d9f4      	bls.n	8005902 <_printf_i+0x11a>
 8005918:	2b08      	cmp	r3, #8
 800591a:	d10b      	bne.n	8005934 <_printf_i+0x14c>
 800591c:	6823      	ldr	r3, [r4, #0]
 800591e:	07de      	lsls	r6, r3, #31
 8005920:	d508      	bpl.n	8005934 <_printf_i+0x14c>
 8005922:	6923      	ldr	r3, [r4, #16]
 8005924:	6861      	ldr	r1, [r4, #4]
 8005926:	4299      	cmp	r1, r3
 8005928:	bfde      	ittt	le
 800592a:	2330      	movle	r3, #48	; 0x30
 800592c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005930:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005934:	1b52      	subs	r2, r2, r5
 8005936:	6122      	str	r2, [r4, #16]
 8005938:	f8cd a000 	str.w	sl, [sp]
 800593c:	464b      	mov	r3, r9
 800593e:	aa03      	add	r2, sp, #12
 8005940:	4621      	mov	r1, r4
 8005942:	4640      	mov	r0, r8
 8005944:	f7ff fee2 	bl	800570c <_printf_common>
 8005948:	3001      	adds	r0, #1
 800594a:	d14c      	bne.n	80059e6 <_printf_i+0x1fe>
 800594c:	f04f 30ff 	mov.w	r0, #4294967295
 8005950:	b004      	add	sp, #16
 8005952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005956:	4835      	ldr	r0, [pc, #212]	; (8005a2c <_printf_i+0x244>)
 8005958:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800595c:	6829      	ldr	r1, [r5, #0]
 800595e:	6823      	ldr	r3, [r4, #0]
 8005960:	f851 6b04 	ldr.w	r6, [r1], #4
 8005964:	6029      	str	r1, [r5, #0]
 8005966:	061d      	lsls	r5, r3, #24
 8005968:	d514      	bpl.n	8005994 <_printf_i+0x1ac>
 800596a:	07df      	lsls	r7, r3, #31
 800596c:	bf44      	itt	mi
 800596e:	f043 0320 	orrmi.w	r3, r3, #32
 8005972:	6023      	strmi	r3, [r4, #0]
 8005974:	b91e      	cbnz	r6, 800597e <_printf_i+0x196>
 8005976:	6823      	ldr	r3, [r4, #0]
 8005978:	f023 0320 	bic.w	r3, r3, #32
 800597c:	6023      	str	r3, [r4, #0]
 800597e:	2310      	movs	r3, #16
 8005980:	e7b0      	b.n	80058e4 <_printf_i+0xfc>
 8005982:	6823      	ldr	r3, [r4, #0]
 8005984:	f043 0320 	orr.w	r3, r3, #32
 8005988:	6023      	str	r3, [r4, #0]
 800598a:	2378      	movs	r3, #120	; 0x78
 800598c:	4828      	ldr	r0, [pc, #160]	; (8005a30 <_printf_i+0x248>)
 800598e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005992:	e7e3      	b.n	800595c <_printf_i+0x174>
 8005994:	0659      	lsls	r1, r3, #25
 8005996:	bf48      	it	mi
 8005998:	b2b6      	uxthmi	r6, r6
 800599a:	e7e6      	b.n	800596a <_printf_i+0x182>
 800599c:	4615      	mov	r5, r2
 800599e:	e7bb      	b.n	8005918 <_printf_i+0x130>
 80059a0:	682b      	ldr	r3, [r5, #0]
 80059a2:	6826      	ldr	r6, [r4, #0]
 80059a4:	6961      	ldr	r1, [r4, #20]
 80059a6:	1d18      	adds	r0, r3, #4
 80059a8:	6028      	str	r0, [r5, #0]
 80059aa:	0635      	lsls	r5, r6, #24
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	d501      	bpl.n	80059b4 <_printf_i+0x1cc>
 80059b0:	6019      	str	r1, [r3, #0]
 80059b2:	e002      	b.n	80059ba <_printf_i+0x1d2>
 80059b4:	0670      	lsls	r0, r6, #25
 80059b6:	d5fb      	bpl.n	80059b0 <_printf_i+0x1c8>
 80059b8:	8019      	strh	r1, [r3, #0]
 80059ba:	2300      	movs	r3, #0
 80059bc:	6123      	str	r3, [r4, #16]
 80059be:	4615      	mov	r5, r2
 80059c0:	e7ba      	b.n	8005938 <_printf_i+0x150>
 80059c2:	682b      	ldr	r3, [r5, #0]
 80059c4:	1d1a      	adds	r2, r3, #4
 80059c6:	602a      	str	r2, [r5, #0]
 80059c8:	681d      	ldr	r5, [r3, #0]
 80059ca:	6862      	ldr	r2, [r4, #4]
 80059cc:	2100      	movs	r1, #0
 80059ce:	4628      	mov	r0, r5
 80059d0:	f7fa fbfe 	bl	80001d0 <memchr>
 80059d4:	b108      	cbz	r0, 80059da <_printf_i+0x1f2>
 80059d6:	1b40      	subs	r0, r0, r5
 80059d8:	6060      	str	r0, [r4, #4]
 80059da:	6863      	ldr	r3, [r4, #4]
 80059dc:	6123      	str	r3, [r4, #16]
 80059de:	2300      	movs	r3, #0
 80059e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059e4:	e7a8      	b.n	8005938 <_printf_i+0x150>
 80059e6:	6923      	ldr	r3, [r4, #16]
 80059e8:	462a      	mov	r2, r5
 80059ea:	4649      	mov	r1, r9
 80059ec:	4640      	mov	r0, r8
 80059ee:	47d0      	blx	sl
 80059f0:	3001      	adds	r0, #1
 80059f2:	d0ab      	beq.n	800594c <_printf_i+0x164>
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	079b      	lsls	r3, r3, #30
 80059f8:	d413      	bmi.n	8005a22 <_printf_i+0x23a>
 80059fa:	68e0      	ldr	r0, [r4, #12]
 80059fc:	9b03      	ldr	r3, [sp, #12]
 80059fe:	4298      	cmp	r0, r3
 8005a00:	bfb8      	it	lt
 8005a02:	4618      	movlt	r0, r3
 8005a04:	e7a4      	b.n	8005950 <_printf_i+0x168>
 8005a06:	2301      	movs	r3, #1
 8005a08:	4632      	mov	r2, r6
 8005a0a:	4649      	mov	r1, r9
 8005a0c:	4640      	mov	r0, r8
 8005a0e:	47d0      	blx	sl
 8005a10:	3001      	adds	r0, #1
 8005a12:	d09b      	beq.n	800594c <_printf_i+0x164>
 8005a14:	3501      	adds	r5, #1
 8005a16:	68e3      	ldr	r3, [r4, #12]
 8005a18:	9903      	ldr	r1, [sp, #12]
 8005a1a:	1a5b      	subs	r3, r3, r1
 8005a1c:	42ab      	cmp	r3, r5
 8005a1e:	dcf2      	bgt.n	8005a06 <_printf_i+0x21e>
 8005a20:	e7eb      	b.n	80059fa <_printf_i+0x212>
 8005a22:	2500      	movs	r5, #0
 8005a24:	f104 0619 	add.w	r6, r4, #25
 8005a28:	e7f5      	b.n	8005a16 <_printf_i+0x22e>
 8005a2a:	bf00      	nop
 8005a2c:	08007d01 	.word	0x08007d01
 8005a30:	08007d12 	.word	0x08007d12

08005a34 <_sbrk_r>:
 8005a34:	b538      	push	{r3, r4, r5, lr}
 8005a36:	4d06      	ldr	r5, [pc, #24]	; (8005a50 <_sbrk_r+0x1c>)
 8005a38:	2300      	movs	r3, #0
 8005a3a:	4604      	mov	r4, r0
 8005a3c:	4608      	mov	r0, r1
 8005a3e:	602b      	str	r3, [r5, #0]
 8005a40:	f7fd f8a4 	bl	8002b8c <_sbrk>
 8005a44:	1c43      	adds	r3, r0, #1
 8005a46:	d102      	bne.n	8005a4e <_sbrk_r+0x1a>
 8005a48:	682b      	ldr	r3, [r5, #0]
 8005a4a:	b103      	cbz	r3, 8005a4e <_sbrk_r+0x1a>
 8005a4c:	6023      	str	r3, [r4, #0]
 8005a4e:	bd38      	pop	{r3, r4, r5, pc}
 8005a50:	200025ac 	.word	0x200025ac

08005a54 <__swbuf_r>:
 8005a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a56:	460e      	mov	r6, r1
 8005a58:	4614      	mov	r4, r2
 8005a5a:	4605      	mov	r5, r0
 8005a5c:	b118      	cbz	r0, 8005a66 <__swbuf_r+0x12>
 8005a5e:	6983      	ldr	r3, [r0, #24]
 8005a60:	b90b      	cbnz	r3, 8005a66 <__swbuf_r+0x12>
 8005a62:	f000 f9d9 	bl	8005e18 <__sinit>
 8005a66:	4b21      	ldr	r3, [pc, #132]	; (8005aec <__swbuf_r+0x98>)
 8005a68:	429c      	cmp	r4, r3
 8005a6a:	d12b      	bne.n	8005ac4 <__swbuf_r+0x70>
 8005a6c:	686c      	ldr	r4, [r5, #4]
 8005a6e:	69a3      	ldr	r3, [r4, #24]
 8005a70:	60a3      	str	r3, [r4, #8]
 8005a72:	89a3      	ldrh	r3, [r4, #12]
 8005a74:	071a      	lsls	r2, r3, #28
 8005a76:	d52f      	bpl.n	8005ad8 <__swbuf_r+0x84>
 8005a78:	6923      	ldr	r3, [r4, #16]
 8005a7a:	b36b      	cbz	r3, 8005ad8 <__swbuf_r+0x84>
 8005a7c:	6923      	ldr	r3, [r4, #16]
 8005a7e:	6820      	ldr	r0, [r4, #0]
 8005a80:	1ac0      	subs	r0, r0, r3
 8005a82:	6963      	ldr	r3, [r4, #20]
 8005a84:	b2f6      	uxtb	r6, r6
 8005a86:	4283      	cmp	r3, r0
 8005a88:	4637      	mov	r7, r6
 8005a8a:	dc04      	bgt.n	8005a96 <__swbuf_r+0x42>
 8005a8c:	4621      	mov	r1, r4
 8005a8e:	4628      	mov	r0, r5
 8005a90:	f000 f92e 	bl	8005cf0 <_fflush_r>
 8005a94:	bb30      	cbnz	r0, 8005ae4 <__swbuf_r+0x90>
 8005a96:	68a3      	ldr	r3, [r4, #8]
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	60a3      	str	r3, [r4, #8]
 8005a9c:	6823      	ldr	r3, [r4, #0]
 8005a9e:	1c5a      	adds	r2, r3, #1
 8005aa0:	6022      	str	r2, [r4, #0]
 8005aa2:	701e      	strb	r6, [r3, #0]
 8005aa4:	6963      	ldr	r3, [r4, #20]
 8005aa6:	3001      	adds	r0, #1
 8005aa8:	4283      	cmp	r3, r0
 8005aaa:	d004      	beq.n	8005ab6 <__swbuf_r+0x62>
 8005aac:	89a3      	ldrh	r3, [r4, #12]
 8005aae:	07db      	lsls	r3, r3, #31
 8005ab0:	d506      	bpl.n	8005ac0 <__swbuf_r+0x6c>
 8005ab2:	2e0a      	cmp	r6, #10
 8005ab4:	d104      	bne.n	8005ac0 <__swbuf_r+0x6c>
 8005ab6:	4621      	mov	r1, r4
 8005ab8:	4628      	mov	r0, r5
 8005aba:	f000 f919 	bl	8005cf0 <_fflush_r>
 8005abe:	b988      	cbnz	r0, 8005ae4 <__swbuf_r+0x90>
 8005ac0:	4638      	mov	r0, r7
 8005ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ac4:	4b0a      	ldr	r3, [pc, #40]	; (8005af0 <__swbuf_r+0x9c>)
 8005ac6:	429c      	cmp	r4, r3
 8005ac8:	d101      	bne.n	8005ace <__swbuf_r+0x7a>
 8005aca:	68ac      	ldr	r4, [r5, #8]
 8005acc:	e7cf      	b.n	8005a6e <__swbuf_r+0x1a>
 8005ace:	4b09      	ldr	r3, [pc, #36]	; (8005af4 <__swbuf_r+0xa0>)
 8005ad0:	429c      	cmp	r4, r3
 8005ad2:	bf08      	it	eq
 8005ad4:	68ec      	ldreq	r4, [r5, #12]
 8005ad6:	e7ca      	b.n	8005a6e <__swbuf_r+0x1a>
 8005ad8:	4621      	mov	r1, r4
 8005ada:	4628      	mov	r0, r5
 8005adc:	f000 f80c 	bl	8005af8 <__swsetup_r>
 8005ae0:	2800      	cmp	r0, #0
 8005ae2:	d0cb      	beq.n	8005a7c <__swbuf_r+0x28>
 8005ae4:	f04f 37ff 	mov.w	r7, #4294967295
 8005ae8:	e7ea      	b.n	8005ac0 <__swbuf_r+0x6c>
 8005aea:	bf00      	nop
 8005aec:	08007d44 	.word	0x08007d44
 8005af0:	08007d64 	.word	0x08007d64
 8005af4:	08007d24 	.word	0x08007d24

08005af8 <__swsetup_r>:
 8005af8:	4b32      	ldr	r3, [pc, #200]	; (8005bc4 <__swsetup_r+0xcc>)
 8005afa:	b570      	push	{r4, r5, r6, lr}
 8005afc:	681d      	ldr	r5, [r3, #0]
 8005afe:	4606      	mov	r6, r0
 8005b00:	460c      	mov	r4, r1
 8005b02:	b125      	cbz	r5, 8005b0e <__swsetup_r+0x16>
 8005b04:	69ab      	ldr	r3, [r5, #24]
 8005b06:	b913      	cbnz	r3, 8005b0e <__swsetup_r+0x16>
 8005b08:	4628      	mov	r0, r5
 8005b0a:	f000 f985 	bl	8005e18 <__sinit>
 8005b0e:	4b2e      	ldr	r3, [pc, #184]	; (8005bc8 <__swsetup_r+0xd0>)
 8005b10:	429c      	cmp	r4, r3
 8005b12:	d10f      	bne.n	8005b34 <__swsetup_r+0x3c>
 8005b14:	686c      	ldr	r4, [r5, #4]
 8005b16:	89a3      	ldrh	r3, [r4, #12]
 8005b18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b1c:	0719      	lsls	r1, r3, #28
 8005b1e:	d42c      	bmi.n	8005b7a <__swsetup_r+0x82>
 8005b20:	06dd      	lsls	r5, r3, #27
 8005b22:	d411      	bmi.n	8005b48 <__swsetup_r+0x50>
 8005b24:	2309      	movs	r3, #9
 8005b26:	6033      	str	r3, [r6, #0]
 8005b28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b2c:	81a3      	strh	r3, [r4, #12]
 8005b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b32:	e03e      	b.n	8005bb2 <__swsetup_r+0xba>
 8005b34:	4b25      	ldr	r3, [pc, #148]	; (8005bcc <__swsetup_r+0xd4>)
 8005b36:	429c      	cmp	r4, r3
 8005b38:	d101      	bne.n	8005b3e <__swsetup_r+0x46>
 8005b3a:	68ac      	ldr	r4, [r5, #8]
 8005b3c:	e7eb      	b.n	8005b16 <__swsetup_r+0x1e>
 8005b3e:	4b24      	ldr	r3, [pc, #144]	; (8005bd0 <__swsetup_r+0xd8>)
 8005b40:	429c      	cmp	r4, r3
 8005b42:	bf08      	it	eq
 8005b44:	68ec      	ldreq	r4, [r5, #12]
 8005b46:	e7e6      	b.n	8005b16 <__swsetup_r+0x1e>
 8005b48:	0758      	lsls	r0, r3, #29
 8005b4a:	d512      	bpl.n	8005b72 <__swsetup_r+0x7a>
 8005b4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b4e:	b141      	cbz	r1, 8005b62 <__swsetup_r+0x6a>
 8005b50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b54:	4299      	cmp	r1, r3
 8005b56:	d002      	beq.n	8005b5e <__swsetup_r+0x66>
 8005b58:	4630      	mov	r0, r6
 8005b5a:	f7ff fb9d 	bl	8005298 <_free_r>
 8005b5e:	2300      	movs	r3, #0
 8005b60:	6363      	str	r3, [r4, #52]	; 0x34
 8005b62:	89a3      	ldrh	r3, [r4, #12]
 8005b64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b68:	81a3      	strh	r3, [r4, #12]
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	6063      	str	r3, [r4, #4]
 8005b6e:	6923      	ldr	r3, [r4, #16]
 8005b70:	6023      	str	r3, [r4, #0]
 8005b72:	89a3      	ldrh	r3, [r4, #12]
 8005b74:	f043 0308 	orr.w	r3, r3, #8
 8005b78:	81a3      	strh	r3, [r4, #12]
 8005b7a:	6923      	ldr	r3, [r4, #16]
 8005b7c:	b94b      	cbnz	r3, 8005b92 <__swsetup_r+0x9a>
 8005b7e:	89a3      	ldrh	r3, [r4, #12]
 8005b80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b88:	d003      	beq.n	8005b92 <__swsetup_r+0x9a>
 8005b8a:	4621      	mov	r1, r4
 8005b8c:	4630      	mov	r0, r6
 8005b8e:	f000 fa09 	bl	8005fa4 <__smakebuf_r>
 8005b92:	89a0      	ldrh	r0, [r4, #12]
 8005b94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b98:	f010 0301 	ands.w	r3, r0, #1
 8005b9c:	d00a      	beq.n	8005bb4 <__swsetup_r+0xbc>
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	60a3      	str	r3, [r4, #8]
 8005ba2:	6963      	ldr	r3, [r4, #20]
 8005ba4:	425b      	negs	r3, r3
 8005ba6:	61a3      	str	r3, [r4, #24]
 8005ba8:	6923      	ldr	r3, [r4, #16]
 8005baa:	b943      	cbnz	r3, 8005bbe <__swsetup_r+0xc6>
 8005bac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005bb0:	d1ba      	bne.n	8005b28 <__swsetup_r+0x30>
 8005bb2:	bd70      	pop	{r4, r5, r6, pc}
 8005bb4:	0781      	lsls	r1, r0, #30
 8005bb6:	bf58      	it	pl
 8005bb8:	6963      	ldrpl	r3, [r4, #20]
 8005bba:	60a3      	str	r3, [r4, #8]
 8005bbc:	e7f4      	b.n	8005ba8 <__swsetup_r+0xb0>
 8005bbe:	2000      	movs	r0, #0
 8005bc0:	e7f7      	b.n	8005bb2 <__swsetup_r+0xba>
 8005bc2:	bf00      	nop
 8005bc4:	20000f74 	.word	0x20000f74
 8005bc8:	08007d44 	.word	0x08007d44
 8005bcc:	08007d64 	.word	0x08007d64
 8005bd0:	08007d24 	.word	0x08007d24

08005bd4 <abort>:
 8005bd4:	b508      	push	{r3, lr}
 8005bd6:	2006      	movs	r0, #6
 8005bd8:	f000 fa58 	bl	800608c <raise>
 8005bdc:	2001      	movs	r0, #1
 8005bde:	f7fc ffa5 	bl	8002b2c <_exit>
	...

08005be4 <__sflush_r>:
 8005be4:	898a      	ldrh	r2, [r1, #12]
 8005be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bea:	4605      	mov	r5, r0
 8005bec:	0710      	lsls	r0, r2, #28
 8005bee:	460c      	mov	r4, r1
 8005bf0:	d458      	bmi.n	8005ca4 <__sflush_r+0xc0>
 8005bf2:	684b      	ldr	r3, [r1, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	dc05      	bgt.n	8005c04 <__sflush_r+0x20>
 8005bf8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	dc02      	bgt.n	8005c04 <__sflush_r+0x20>
 8005bfe:	2000      	movs	r0, #0
 8005c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c06:	2e00      	cmp	r6, #0
 8005c08:	d0f9      	beq.n	8005bfe <__sflush_r+0x1a>
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c10:	682f      	ldr	r7, [r5, #0]
 8005c12:	602b      	str	r3, [r5, #0]
 8005c14:	d032      	beq.n	8005c7c <__sflush_r+0x98>
 8005c16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c18:	89a3      	ldrh	r3, [r4, #12]
 8005c1a:	075a      	lsls	r2, r3, #29
 8005c1c:	d505      	bpl.n	8005c2a <__sflush_r+0x46>
 8005c1e:	6863      	ldr	r3, [r4, #4]
 8005c20:	1ac0      	subs	r0, r0, r3
 8005c22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c24:	b10b      	cbz	r3, 8005c2a <__sflush_r+0x46>
 8005c26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c28:	1ac0      	subs	r0, r0, r3
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c30:	6a21      	ldr	r1, [r4, #32]
 8005c32:	4628      	mov	r0, r5
 8005c34:	47b0      	blx	r6
 8005c36:	1c43      	adds	r3, r0, #1
 8005c38:	89a3      	ldrh	r3, [r4, #12]
 8005c3a:	d106      	bne.n	8005c4a <__sflush_r+0x66>
 8005c3c:	6829      	ldr	r1, [r5, #0]
 8005c3e:	291d      	cmp	r1, #29
 8005c40:	d82c      	bhi.n	8005c9c <__sflush_r+0xb8>
 8005c42:	4a2a      	ldr	r2, [pc, #168]	; (8005cec <__sflush_r+0x108>)
 8005c44:	40ca      	lsrs	r2, r1
 8005c46:	07d6      	lsls	r6, r2, #31
 8005c48:	d528      	bpl.n	8005c9c <__sflush_r+0xb8>
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	6062      	str	r2, [r4, #4]
 8005c4e:	04d9      	lsls	r1, r3, #19
 8005c50:	6922      	ldr	r2, [r4, #16]
 8005c52:	6022      	str	r2, [r4, #0]
 8005c54:	d504      	bpl.n	8005c60 <__sflush_r+0x7c>
 8005c56:	1c42      	adds	r2, r0, #1
 8005c58:	d101      	bne.n	8005c5e <__sflush_r+0x7a>
 8005c5a:	682b      	ldr	r3, [r5, #0]
 8005c5c:	b903      	cbnz	r3, 8005c60 <__sflush_r+0x7c>
 8005c5e:	6560      	str	r0, [r4, #84]	; 0x54
 8005c60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c62:	602f      	str	r7, [r5, #0]
 8005c64:	2900      	cmp	r1, #0
 8005c66:	d0ca      	beq.n	8005bfe <__sflush_r+0x1a>
 8005c68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c6c:	4299      	cmp	r1, r3
 8005c6e:	d002      	beq.n	8005c76 <__sflush_r+0x92>
 8005c70:	4628      	mov	r0, r5
 8005c72:	f7ff fb11 	bl	8005298 <_free_r>
 8005c76:	2000      	movs	r0, #0
 8005c78:	6360      	str	r0, [r4, #52]	; 0x34
 8005c7a:	e7c1      	b.n	8005c00 <__sflush_r+0x1c>
 8005c7c:	6a21      	ldr	r1, [r4, #32]
 8005c7e:	2301      	movs	r3, #1
 8005c80:	4628      	mov	r0, r5
 8005c82:	47b0      	blx	r6
 8005c84:	1c41      	adds	r1, r0, #1
 8005c86:	d1c7      	bne.n	8005c18 <__sflush_r+0x34>
 8005c88:	682b      	ldr	r3, [r5, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d0c4      	beq.n	8005c18 <__sflush_r+0x34>
 8005c8e:	2b1d      	cmp	r3, #29
 8005c90:	d001      	beq.n	8005c96 <__sflush_r+0xb2>
 8005c92:	2b16      	cmp	r3, #22
 8005c94:	d101      	bne.n	8005c9a <__sflush_r+0xb6>
 8005c96:	602f      	str	r7, [r5, #0]
 8005c98:	e7b1      	b.n	8005bfe <__sflush_r+0x1a>
 8005c9a:	89a3      	ldrh	r3, [r4, #12]
 8005c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ca0:	81a3      	strh	r3, [r4, #12]
 8005ca2:	e7ad      	b.n	8005c00 <__sflush_r+0x1c>
 8005ca4:	690f      	ldr	r7, [r1, #16]
 8005ca6:	2f00      	cmp	r7, #0
 8005ca8:	d0a9      	beq.n	8005bfe <__sflush_r+0x1a>
 8005caa:	0793      	lsls	r3, r2, #30
 8005cac:	680e      	ldr	r6, [r1, #0]
 8005cae:	bf08      	it	eq
 8005cb0:	694b      	ldreq	r3, [r1, #20]
 8005cb2:	600f      	str	r7, [r1, #0]
 8005cb4:	bf18      	it	ne
 8005cb6:	2300      	movne	r3, #0
 8005cb8:	eba6 0807 	sub.w	r8, r6, r7
 8005cbc:	608b      	str	r3, [r1, #8]
 8005cbe:	f1b8 0f00 	cmp.w	r8, #0
 8005cc2:	dd9c      	ble.n	8005bfe <__sflush_r+0x1a>
 8005cc4:	6a21      	ldr	r1, [r4, #32]
 8005cc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005cc8:	4643      	mov	r3, r8
 8005cca:	463a      	mov	r2, r7
 8005ccc:	4628      	mov	r0, r5
 8005cce:	47b0      	blx	r6
 8005cd0:	2800      	cmp	r0, #0
 8005cd2:	dc06      	bgt.n	8005ce2 <__sflush_r+0xfe>
 8005cd4:	89a3      	ldrh	r3, [r4, #12]
 8005cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cda:	81a3      	strh	r3, [r4, #12]
 8005cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ce0:	e78e      	b.n	8005c00 <__sflush_r+0x1c>
 8005ce2:	4407      	add	r7, r0
 8005ce4:	eba8 0800 	sub.w	r8, r8, r0
 8005ce8:	e7e9      	b.n	8005cbe <__sflush_r+0xda>
 8005cea:	bf00      	nop
 8005cec:	20400001 	.word	0x20400001

08005cf0 <_fflush_r>:
 8005cf0:	b538      	push	{r3, r4, r5, lr}
 8005cf2:	690b      	ldr	r3, [r1, #16]
 8005cf4:	4605      	mov	r5, r0
 8005cf6:	460c      	mov	r4, r1
 8005cf8:	b913      	cbnz	r3, 8005d00 <_fflush_r+0x10>
 8005cfa:	2500      	movs	r5, #0
 8005cfc:	4628      	mov	r0, r5
 8005cfe:	bd38      	pop	{r3, r4, r5, pc}
 8005d00:	b118      	cbz	r0, 8005d0a <_fflush_r+0x1a>
 8005d02:	6983      	ldr	r3, [r0, #24]
 8005d04:	b90b      	cbnz	r3, 8005d0a <_fflush_r+0x1a>
 8005d06:	f000 f887 	bl	8005e18 <__sinit>
 8005d0a:	4b14      	ldr	r3, [pc, #80]	; (8005d5c <_fflush_r+0x6c>)
 8005d0c:	429c      	cmp	r4, r3
 8005d0e:	d11b      	bne.n	8005d48 <_fflush_r+0x58>
 8005d10:	686c      	ldr	r4, [r5, #4]
 8005d12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d0ef      	beq.n	8005cfa <_fflush_r+0xa>
 8005d1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d1c:	07d0      	lsls	r0, r2, #31
 8005d1e:	d404      	bmi.n	8005d2a <_fflush_r+0x3a>
 8005d20:	0599      	lsls	r1, r3, #22
 8005d22:	d402      	bmi.n	8005d2a <_fflush_r+0x3a>
 8005d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d26:	f000 f915 	bl	8005f54 <__retarget_lock_acquire_recursive>
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	4621      	mov	r1, r4
 8005d2e:	f7ff ff59 	bl	8005be4 <__sflush_r>
 8005d32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d34:	07da      	lsls	r2, r3, #31
 8005d36:	4605      	mov	r5, r0
 8005d38:	d4e0      	bmi.n	8005cfc <_fflush_r+0xc>
 8005d3a:	89a3      	ldrh	r3, [r4, #12]
 8005d3c:	059b      	lsls	r3, r3, #22
 8005d3e:	d4dd      	bmi.n	8005cfc <_fflush_r+0xc>
 8005d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d42:	f000 f908 	bl	8005f56 <__retarget_lock_release_recursive>
 8005d46:	e7d9      	b.n	8005cfc <_fflush_r+0xc>
 8005d48:	4b05      	ldr	r3, [pc, #20]	; (8005d60 <_fflush_r+0x70>)
 8005d4a:	429c      	cmp	r4, r3
 8005d4c:	d101      	bne.n	8005d52 <_fflush_r+0x62>
 8005d4e:	68ac      	ldr	r4, [r5, #8]
 8005d50:	e7df      	b.n	8005d12 <_fflush_r+0x22>
 8005d52:	4b04      	ldr	r3, [pc, #16]	; (8005d64 <_fflush_r+0x74>)
 8005d54:	429c      	cmp	r4, r3
 8005d56:	bf08      	it	eq
 8005d58:	68ec      	ldreq	r4, [r5, #12]
 8005d5a:	e7da      	b.n	8005d12 <_fflush_r+0x22>
 8005d5c:	08007d44 	.word	0x08007d44
 8005d60:	08007d64 	.word	0x08007d64
 8005d64:	08007d24 	.word	0x08007d24

08005d68 <std>:
 8005d68:	2300      	movs	r3, #0
 8005d6a:	b510      	push	{r4, lr}
 8005d6c:	4604      	mov	r4, r0
 8005d6e:	e9c0 3300 	strd	r3, r3, [r0]
 8005d72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d76:	6083      	str	r3, [r0, #8]
 8005d78:	8181      	strh	r1, [r0, #12]
 8005d7a:	6643      	str	r3, [r0, #100]	; 0x64
 8005d7c:	81c2      	strh	r2, [r0, #14]
 8005d7e:	6183      	str	r3, [r0, #24]
 8005d80:	4619      	mov	r1, r3
 8005d82:	2208      	movs	r2, #8
 8005d84:	305c      	adds	r0, #92	; 0x5c
 8005d86:	f7ff fa7f 	bl	8005288 <memset>
 8005d8a:	4b05      	ldr	r3, [pc, #20]	; (8005da0 <std+0x38>)
 8005d8c:	6263      	str	r3, [r4, #36]	; 0x24
 8005d8e:	4b05      	ldr	r3, [pc, #20]	; (8005da4 <std+0x3c>)
 8005d90:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d92:	4b05      	ldr	r3, [pc, #20]	; (8005da8 <std+0x40>)
 8005d94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d96:	4b05      	ldr	r3, [pc, #20]	; (8005dac <std+0x44>)
 8005d98:	6224      	str	r4, [r4, #32]
 8005d9a:	6323      	str	r3, [r4, #48]	; 0x30
 8005d9c:	bd10      	pop	{r4, pc}
 8005d9e:	bf00      	nop
 8005da0:	080060c5 	.word	0x080060c5
 8005da4:	080060e7 	.word	0x080060e7
 8005da8:	0800611f 	.word	0x0800611f
 8005dac:	08006143 	.word	0x08006143

08005db0 <_cleanup_r>:
 8005db0:	4901      	ldr	r1, [pc, #4]	; (8005db8 <_cleanup_r+0x8>)
 8005db2:	f000 b8af 	b.w	8005f14 <_fwalk_reent>
 8005db6:	bf00      	nop
 8005db8:	08005cf1 	.word	0x08005cf1

08005dbc <__sfmoreglue>:
 8005dbc:	b570      	push	{r4, r5, r6, lr}
 8005dbe:	2268      	movs	r2, #104	; 0x68
 8005dc0:	1e4d      	subs	r5, r1, #1
 8005dc2:	4355      	muls	r5, r2
 8005dc4:	460e      	mov	r6, r1
 8005dc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005dca:	f7ff fad1 	bl	8005370 <_malloc_r>
 8005dce:	4604      	mov	r4, r0
 8005dd0:	b140      	cbz	r0, 8005de4 <__sfmoreglue+0x28>
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	e9c0 1600 	strd	r1, r6, [r0]
 8005dd8:	300c      	adds	r0, #12
 8005dda:	60a0      	str	r0, [r4, #8]
 8005ddc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005de0:	f7ff fa52 	bl	8005288 <memset>
 8005de4:	4620      	mov	r0, r4
 8005de6:	bd70      	pop	{r4, r5, r6, pc}

08005de8 <__sfp_lock_acquire>:
 8005de8:	4801      	ldr	r0, [pc, #4]	; (8005df0 <__sfp_lock_acquire+0x8>)
 8005dea:	f000 b8b3 	b.w	8005f54 <__retarget_lock_acquire_recursive>
 8005dee:	bf00      	nop
 8005df0:	200025a9 	.word	0x200025a9

08005df4 <__sfp_lock_release>:
 8005df4:	4801      	ldr	r0, [pc, #4]	; (8005dfc <__sfp_lock_release+0x8>)
 8005df6:	f000 b8ae 	b.w	8005f56 <__retarget_lock_release_recursive>
 8005dfa:	bf00      	nop
 8005dfc:	200025a9 	.word	0x200025a9

08005e00 <__sinit_lock_acquire>:
 8005e00:	4801      	ldr	r0, [pc, #4]	; (8005e08 <__sinit_lock_acquire+0x8>)
 8005e02:	f000 b8a7 	b.w	8005f54 <__retarget_lock_acquire_recursive>
 8005e06:	bf00      	nop
 8005e08:	200025aa 	.word	0x200025aa

08005e0c <__sinit_lock_release>:
 8005e0c:	4801      	ldr	r0, [pc, #4]	; (8005e14 <__sinit_lock_release+0x8>)
 8005e0e:	f000 b8a2 	b.w	8005f56 <__retarget_lock_release_recursive>
 8005e12:	bf00      	nop
 8005e14:	200025aa 	.word	0x200025aa

08005e18 <__sinit>:
 8005e18:	b510      	push	{r4, lr}
 8005e1a:	4604      	mov	r4, r0
 8005e1c:	f7ff fff0 	bl	8005e00 <__sinit_lock_acquire>
 8005e20:	69a3      	ldr	r3, [r4, #24]
 8005e22:	b11b      	cbz	r3, 8005e2c <__sinit+0x14>
 8005e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e28:	f7ff bff0 	b.w	8005e0c <__sinit_lock_release>
 8005e2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005e30:	6523      	str	r3, [r4, #80]	; 0x50
 8005e32:	4b13      	ldr	r3, [pc, #76]	; (8005e80 <__sinit+0x68>)
 8005e34:	4a13      	ldr	r2, [pc, #76]	; (8005e84 <__sinit+0x6c>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	62a2      	str	r2, [r4, #40]	; 0x28
 8005e3a:	42a3      	cmp	r3, r4
 8005e3c:	bf04      	itt	eq
 8005e3e:	2301      	moveq	r3, #1
 8005e40:	61a3      	streq	r3, [r4, #24]
 8005e42:	4620      	mov	r0, r4
 8005e44:	f000 f820 	bl	8005e88 <__sfp>
 8005e48:	6060      	str	r0, [r4, #4]
 8005e4a:	4620      	mov	r0, r4
 8005e4c:	f000 f81c 	bl	8005e88 <__sfp>
 8005e50:	60a0      	str	r0, [r4, #8]
 8005e52:	4620      	mov	r0, r4
 8005e54:	f000 f818 	bl	8005e88 <__sfp>
 8005e58:	2200      	movs	r2, #0
 8005e5a:	60e0      	str	r0, [r4, #12]
 8005e5c:	2104      	movs	r1, #4
 8005e5e:	6860      	ldr	r0, [r4, #4]
 8005e60:	f7ff ff82 	bl	8005d68 <std>
 8005e64:	68a0      	ldr	r0, [r4, #8]
 8005e66:	2201      	movs	r2, #1
 8005e68:	2109      	movs	r1, #9
 8005e6a:	f7ff ff7d 	bl	8005d68 <std>
 8005e6e:	68e0      	ldr	r0, [r4, #12]
 8005e70:	2202      	movs	r2, #2
 8005e72:	2112      	movs	r1, #18
 8005e74:	f7ff ff78 	bl	8005d68 <std>
 8005e78:	2301      	movs	r3, #1
 8005e7a:	61a3      	str	r3, [r4, #24]
 8005e7c:	e7d2      	b.n	8005e24 <__sinit+0xc>
 8005e7e:	bf00      	nop
 8005e80:	08007cec 	.word	0x08007cec
 8005e84:	08005db1 	.word	0x08005db1

08005e88 <__sfp>:
 8005e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8a:	4607      	mov	r7, r0
 8005e8c:	f7ff ffac 	bl	8005de8 <__sfp_lock_acquire>
 8005e90:	4b1e      	ldr	r3, [pc, #120]	; (8005f0c <__sfp+0x84>)
 8005e92:	681e      	ldr	r6, [r3, #0]
 8005e94:	69b3      	ldr	r3, [r6, #24]
 8005e96:	b913      	cbnz	r3, 8005e9e <__sfp+0x16>
 8005e98:	4630      	mov	r0, r6
 8005e9a:	f7ff ffbd 	bl	8005e18 <__sinit>
 8005e9e:	3648      	adds	r6, #72	; 0x48
 8005ea0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	d503      	bpl.n	8005eb0 <__sfp+0x28>
 8005ea8:	6833      	ldr	r3, [r6, #0]
 8005eaa:	b30b      	cbz	r3, 8005ef0 <__sfp+0x68>
 8005eac:	6836      	ldr	r6, [r6, #0]
 8005eae:	e7f7      	b.n	8005ea0 <__sfp+0x18>
 8005eb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005eb4:	b9d5      	cbnz	r5, 8005eec <__sfp+0x64>
 8005eb6:	4b16      	ldr	r3, [pc, #88]	; (8005f10 <__sfp+0x88>)
 8005eb8:	60e3      	str	r3, [r4, #12]
 8005eba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005ebe:	6665      	str	r5, [r4, #100]	; 0x64
 8005ec0:	f000 f847 	bl	8005f52 <__retarget_lock_init_recursive>
 8005ec4:	f7ff ff96 	bl	8005df4 <__sfp_lock_release>
 8005ec8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ecc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ed0:	6025      	str	r5, [r4, #0]
 8005ed2:	61a5      	str	r5, [r4, #24]
 8005ed4:	2208      	movs	r2, #8
 8005ed6:	4629      	mov	r1, r5
 8005ed8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005edc:	f7ff f9d4 	bl	8005288 <memset>
 8005ee0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ee4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ee8:	4620      	mov	r0, r4
 8005eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005eec:	3468      	adds	r4, #104	; 0x68
 8005eee:	e7d9      	b.n	8005ea4 <__sfp+0x1c>
 8005ef0:	2104      	movs	r1, #4
 8005ef2:	4638      	mov	r0, r7
 8005ef4:	f7ff ff62 	bl	8005dbc <__sfmoreglue>
 8005ef8:	4604      	mov	r4, r0
 8005efa:	6030      	str	r0, [r6, #0]
 8005efc:	2800      	cmp	r0, #0
 8005efe:	d1d5      	bne.n	8005eac <__sfp+0x24>
 8005f00:	f7ff ff78 	bl	8005df4 <__sfp_lock_release>
 8005f04:	230c      	movs	r3, #12
 8005f06:	603b      	str	r3, [r7, #0]
 8005f08:	e7ee      	b.n	8005ee8 <__sfp+0x60>
 8005f0a:	bf00      	nop
 8005f0c:	08007cec 	.word	0x08007cec
 8005f10:	ffff0001 	.word	0xffff0001

08005f14 <_fwalk_reent>:
 8005f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f18:	4606      	mov	r6, r0
 8005f1a:	4688      	mov	r8, r1
 8005f1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005f20:	2700      	movs	r7, #0
 8005f22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f26:	f1b9 0901 	subs.w	r9, r9, #1
 8005f2a:	d505      	bpl.n	8005f38 <_fwalk_reent+0x24>
 8005f2c:	6824      	ldr	r4, [r4, #0]
 8005f2e:	2c00      	cmp	r4, #0
 8005f30:	d1f7      	bne.n	8005f22 <_fwalk_reent+0xe>
 8005f32:	4638      	mov	r0, r7
 8005f34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f38:	89ab      	ldrh	r3, [r5, #12]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d907      	bls.n	8005f4e <_fwalk_reent+0x3a>
 8005f3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f42:	3301      	adds	r3, #1
 8005f44:	d003      	beq.n	8005f4e <_fwalk_reent+0x3a>
 8005f46:	4629      	mov	r1, r5
 8005f48:	4630      	mov	r0, r6
 8005f4a:	47c0      	blx	r8
 8005f4c:	4307      	orrs	r7, r0
 8005f4e:	3568      	adds	r5, #104	; 0x68
 8005f50:	e7e9      	b.n	8005f26 <_fwalk_reent+0x12>

08005f52 <__retarget_lock_init_recursive>:
 8005f52:	4770      	bx	lr

08005f54 <__retarget_lock_acquire_recursive>:
 8005f54:	4770      	bx	lr

08005f56 <__retarget_lock_release_recursive>:
 8005f56:	4770      	bx	lr

08005f58 <__swhatbuf_r>:
 8005f58:	b570      	push	{r4, r5, r6, lr}
 8005f5a:	460e      	mov	r6, r1
 8005f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f60:	2900      	cmp	r1, #0
 8005f62:	b096      	sub	sp, #88	; 0x58
 8005f64:	4614      	mov	r4, r2
 8005f66:	461d      	mov	r5, r3
 8005f68:	da08      	bge.n	8005f7c <__swhatbuf_r+0x24>
 8005f6a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	602a      	str	r2, [r5, #0]
 8005f72:	061a      	lsls	r2, r3, #24
 8005f74:	d410      	bmi.n	8005f98 <__swhatbuf_r+0x40>
 8005f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f7a:	e00e      	b.n	8005f9a <__swhatbuf_r+0x42>
 8005f7c:	466a      	mov	r2, sp
 8005f7e:	f000 f907 	bl	8006190 <_fstat_r>
 8005f82:	2800      	cmp	r0, #0
 8005f84:	dbf1      	blt.n	8005f6a <__swhatbuf_r+0x12>
 8005f86:	9a01      	ldr	r2, [sp, #4]
 8005f88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005f8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f90:	425a      	negs	r2, r3
 8005f92:	415a      	adcs	r2, r3
 8005f94:	602a      	str	r2, [r5, #0]
 8005f96:	e7ee      	b.n	8005f76 <__swhatbuf_r+0x1e>
 8005f98:	2340      	movs	r3, #64	; 0x40
 8005f9a:	2000      	movs	r0, #0
 8005f9c:	6023      	str	r3, [r4, #0]
 8005f9e:	b016      	add	sp, #88	; 0x58
 8005fa0:	bd70      	pop	{r4, r5, r6, pc}
	...

08005fa4 <__smakebuf_r>:
 8005fa4:	898b      	ldrh	r3, [r1, #12]
 8005fa6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005fa8:	079d      	lsls	r5, r3, #30
 8005faa:	4606      	mov	r6, r0
 8005fac:	460c      	mov	r4, r1
 8005fae:	d507      	bpl.n	8005fc0 <__smakebuf_r+0x1c>
 8005fb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005fb4:	6023      	str	r3, [r4, #0]
 8005fb6:	6123      	str	r3, [r4, #16]
 8005fb8:	2301      	movs	r3, #1
 8005fba:	6163      	str	r3, [r4, #20]
 8005fbc:	b002      	add	sp, #8
 8005fbe:	bd70      	pop	{r4, r5, r6, pc}
 8005fc0:	ab01      	add	r3, sp, #4
 8005fc2:	466a      	mov	r2, sp
 8005fc4:	f7ff ffc8 	bl	8005f58 <__swhatbuf_r>
 8005fc8:	9900      	ldr	r1, [sp, #0]
 8005fca:	4605      	mov	r5, r0
 8005fcc:	4630      	mov	r0, r6
 8005fce:	f7ff f9cf 	bl	8005370 <_malloc_r>
 8005fd2:	b948      	cbnz	r0, 8005fe8 <__smakebuf_r+0x44>
 8005fd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fd8:	059a      	lsls	r2, r3, #22
 8005fda:	d4ef      	bmi.n	8005fbc <__smakebuf_r+0x18>
 8005fdc:	f023 0303 	bic.w	r3, r3, #3
 8005fe0:	f043 0302 	orr.w	r3, r3, #2
 8005fe4:	81a3      	strh	r3, [r4, #12]
 8005fe6:	e7e3      	b.n	8005fb0 <__smakebuf_r+0xc>
 8005fe8:	4b0d      	ldr	r3, [pc, #52]	; (8006020 <__smakebuf_r+0x7c>)
 8005fea:	62b3      	str	r3, [r6, #40]	; 0x28
 8005fec:	89a3      	ldrh	r3, [r4, #12]
 8005fee:	6020      	str	r0, [r4, #0]
 8005ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff4:	81a3      	strh	r3, [r4, #12]
 8005ff6:	9b00      	ldr	r3, [sp, #0]
 8005ff8:	6163      	str	r3, [r4, #20]
 8005ffa:	9b01      	ldr	r3, [sp, #4]
 8005ffc:	6120      	str	r0, [r4, #16]
 8005ffe:	b15b      	cbz	r3, 8006018 <__smakebuf_r+0x74>
 8006000:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006004:	4630      	mov	r0, r6
 8006006:	f000 f8d5 	bl	80061b4 <_isatty_r>
 800600a:	b128      	cbz	r0, 8006018 <__smakebuf_r+0x74>
 800600c:	89a3      	ldrh	r3, [r4, #12]
 800600e:	f023 0303 	bic.w	r3, r3, #3
 8006012:	f043 0301 	orr.w	r3, r3, #1
 8006016:	81a3      	strh	r3, [r4, #12]
 8006018:	89a0      	ldrh	r0, [r4, #12]
 800601a:	4305      	orrs	r5, r0
 800601c:	81a5      	strh	r5, [r4, #12]
 800601e:	e7cd      	b.n	8005fbc <__smakebuf_r+0x18>
 8006020:	08005db1 	.word	0x08005db1

08006024 <__malloc_lock>:
 8006024:	4801      	ldr	r0, [pc, #4]	; (800602c <__malloc_lock+0x8>)
 8006026:	f7ff bf95 	b.w	8005f54 <__retarget_lock_acquire_recursive>
 800602a:	bf00      	nop
 800602c:	200025a8 	.word	0x200025a8

08006030 <__malloc_unlock>:
 8006030:	4801      	ldr	r0, [pc, #4]	; (8006038 <__malloc_unlock+0x8>)
 8006032:	f7ff bf90 	b.w	8005f56 <__retarget_lock_release_recursive>
 8006036:	bf00      	nop
 8006038:	200025a8 	.word	0x200025a8

0800603c <_raise_r>:
 800603c:	291f      	cmp	r1, #31
 800603e:	b538      	push	{r3, r4, r5, lr}
 8006040:	4604      	mov	r4, r0
 8006042:	460d      	mov	r5, r1
 8006044:	d904      	bls.n	8006050 <_raise_r+0x14>
 8006046:	2316      	movs	r3, #22
 8006048:	6003      	str	r3, [r0, #0]
 800604a:	f04f 30ff 	mov.w	r0, #4294967295
 800604e:	bd38      	pop	{r3, r4, r5, pc}
 8006050:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006052:	b112      	cbz	r2, 800605a <_raise_r+0x1e>
 8006054:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006058:	b94b      	cbnz	r3, 800606e <_raise_r+0x32>
 800605a:	4620      	mov	r0, r4
 800605c:	f000 f830 	bl	80060c0 <_getpid_r>
 8006060:	462a      	mov	r2, r5
 8006062:	4601      	mov	r1, r0
 8006064:	4620      	mov	r0, r4
 8006066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800606a:	f000 b817 	b.w	800609c <_kill_r>
 800606e:	2b01      	cmp	r3, #1
 8006070:	d00a      	beq.n	8006088 <_raise_r+0x4c>
 8006072:	1c59      	adds	r1, r3, #1
 8006074:	d103      	bne.n	800607e <_raise_r+0x42>
 8006076:	2316      	movs	r3, #22
 8006078:	6003      	str	r3, [r0, #0]
 800607a:	2001      	movs	r0, #1
 800607c:	e7e7      	b.n	800604e <_raise_r+0x12>
 800607e:	2400      	movs	r4, #0
 8006080:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006084:	4628      	mov	r0, r5
 8006086:	4798      	blx	r3
 8006088:	2000      	movs	r0, #0
 800608a:	e7e0      	b.n	800604e <_raise_r+0x12>

0800608c <raise>:
 800608c:	4b02      	ldr	r3, [pc, #8]	; (8006098 <raise+0xc>)
 800608e:	4601      	mov	r1, r0
 8006090:	6818      	ldr	r0, [r3, #0]
 8006092:	f7ff bfd3 	b.w	800603c <_raise_r>
 8006096:	bf00      	nop
 8006098:	20000f74 	.word	0x20000f74

0800609c <_kill_r>:
 800609c:	b538      	push	{r3, r4, r5, lr}
 800609e:	4d07      	ldr	r5, [pc, #28]	; (80060bc <_kill_r+0x20>)
 80060a0:	2300      	movs	r3, #0
 80060a2:	4604      	mov	r4, r0
 80060a4:	4608      	mov	r0, r1
 80060a6:	4611      	mov	r1, r2
 80060a8:	602b      	str	r3, [r5, #0]
 80060aa:	f7fc fd37 	bl	8002b1c <_kill>
 80060ae:	1c43      	adds	r3, r0, #1
 80060b0:	d102      	bne.n	80060b8 <_kill_r+0x1c>
 80060b2:	682b      	ldr	r3, [r5, #0]
 80060b4:	b103      	cbz	r3, 80060b8 <_kill_r+0x1c>
 80060b6:	6023      	str	r3, [r4, #0]
 80060b8:	bd38      	pop	{r3, r4, r5, pc}
 80060ba:	bf00      	nop
 80060bc:	200025ac 	.word	0x200025ac

080060c0 <_getpid_r>:
 80060c0:	f7fc bd2a 	b.w	8002b18 <_getpid>

080060c4 <__sread>:
 80060c4:	b510      	push	{r4, lr}
 80060c6:	460c      	mov	r4, r1
 80060c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060cc:	f000 f894 	bl	80061f8 <_read_r>
 80060d0:	2800      	cmp	r0, #0
 80060d2:	bfab      	itete	ge
 80060d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80060d6:	89a3      	ldrhlt	r3, [r4, #12]
 80060d8:	181b      	addge	r3, r3, r0
 80060da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80060de:	bfac      	ite	ge
 80060e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80060e2:	81a3      	strhlt	r3, [r4, #12]
 80060e4:	bd10      	pop	{r4, pc}

080060e6 <__swrite>:
 80060e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060ea:	461f      	mov	r7, r3
 80060ec:	898b      	ldrh	r3, [r1, #12]
 80060ee:	05db      	lsls	r3, r3, #23
 80060f0:	4605      	mov	r5, r0
 80060f2:	460c      	mov	r4, r1
 80060f4:	4616      	mov	r6, r2
 80060f6:	d505      	bpl.n	8006104 <__swrite+0x1e>
 80060f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060fc:	2302      	movs	r3, #2
 80060fe:	2200      	movs	r2, #0
 8006100:	f000 f868 	bl	80061d4 <_lseek_r>
 8006104:	89a3      	ldrh	r3, [r4, #12]
 8006106:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800610a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800610e:	81a3      	strh	r3, [r4, #12]
 8006110:	4632      	mov	r2, r6
 8006112:	463b      	mov	r3, r7
 8006114:	4628      	mov	r0, r5
 8006116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800611a:	f000 b817 	b.w	800614c <_write_r>

0800611e <__sseek>:
 800611e:	b510      	push	{r4, lr}
 8006120:	460c      	mov	r4, r1
 8006122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006126:	f000 f855 	bl	80061d4 <_lseek_r>
 800612a:	1c43      	adds	r3, r0, #1
 800612c:	89a3      	ldrh	r3, [r4, #12]
 800612e:	bf15      	itete	ne
 8006130:	6560      	strne	r0, [r4, #84]	; 0x54
 8006132:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006136:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800613a:	81a3      	strheq	r3, [r4, #12]
 800613c:	bf18      	it	ne
 800613e:	81a3      	strhne	r3, [r4, #12]
 8006140:	bd10      	pop	{r4, pc}

08006142 <__sclose>:
 8006142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006146:	f000 b813 	b.w	8006170 <_close_r>
	...

0800614c <_write_r>:
 800614c:	b538      	push	{r3, r4, r5, lr}
 800614e:	4d07      	ldr	r5, [pc, #28]	; (800616c <_write_r+0x20>)
 8006150:	4604      	mov	r4, r0
 8006152:	4608      	mov	r0, r1
 8006154:	4611      	mov	r1, r2
 8006156:	2200      	movs	r2, #0
 8006158:	602a      	str	r2, [r5, #0]
 800615a:	461a      	mov	r2, r3
 800615c:	f7fc fcfc 	bl	8002b58 <_write>
 8006160:	1c43      	adds	r3, r0, #1
 8006162:	d102      	bne.n	800616a <_write_r+0x1e>
 8006164:	682b      	ldr	r3, [r5, #0]
 8006166:	b103      	cbz	r3, 800616a <_write_r+0x1e>
 8006168:	6023      	str	r3, [r4, #0]
 800616a:	bd38      	pop	{r3, r4, r5, pc}
 800616c:	200025ac 	.word	0x200025ac

08006170 <_close_r>:
 8006170:	b538      	push	{r3, r4, r5, lr}
 8006172:	4d06      	ldr	r5, [pc, #24]	; (800618c <_close_r+0x1c>)
 8006174:	2300      	movs	r3, #0
 8006176:	4604      	mov	r4, r0
 8006178:	4608      	mov	r0, r1
 800617a:	602b      	str	r3, [r5, #0]
 800617c:	f7fc fcfa 	bl	8002b74 <_close>
 8006180:	1c43      	adds	r3, r0, #1
 8006182:	d102      	bne.n	800618a <_close_r+0x1a>
 8006184:	682b      	ldr	r3, [r5, #0]
 8006186:	b103      	cbz	r3, 800618a <_close_r+0x1a>
 8006188:	6023      	str	r3, [r4, #0]
 800618a:	bd38      	pop	{r3, r4, r5, pc}
 800618c:	200025ac 	.word	0x200025ac

08006190 <_fstat_r>:
 8006190:	b538      	push	{r3, r4, r5, lr}
 8006192:	4d07      	ldr	r5, [pc, #28]	; (80061b0 <_fstat_r+0x20>)
 8006194:	2300      	movs	r3, #0
 8006196:	4604      	mov	r4, r0
 8006198:	4608      	mov	r0, r1
 800619a:	4611      	mov	r1, r2
 800619c:	602b      	str	r3, [r5, #0]
 800619e:	f7fc fcec 	bl	8002b7a <_fstat>
 80061a2:	1c43      	adds	r3, r0, #1
 80061a4:	d102      	bne.n	80061ac <_fstat_r+0x1c>
 80061a6:	682b      	ldr	r3, [r5, #0]
 80061a8:	b103      	cbz	r3, 80061ac <_fstat_r+0x1c>
 80061aa:	6023      	str	r3, [r4, #0]
 80061ac:	bd38      	pop	{r3, r4, r5, pc}
 80061ae:	bf00      	nop
 80061b0:	200025ac 	.word	0x200025ac

080061b4 <_isatty_r>:
 80061b4:	b538      	push	{r3, r4, r5, lr}
 80061b6:	4d06      	ldr	r5, [pc, #24]	; (80061d0 <_isatty_r+0x1c>)
 80061b8:	2300      	movs	r3, #0
 80061ba:	4604      	mov	r4, r0
 80061bc:	4608      	mov	r0, r1
 80061be:	602b      	str	r3, [r5, #0]
 80061c0:	f7fc fce0 	bl	8002b84 <_isatty>
 80061c4:	1c43      	adds	r3, r0, #1
 80061c6:	d102      	bne.n	80061ce <_isatty_r+0x1a>
 80061c8:	682b      	ldr	r3, [r5, #0]
 80061ca:	b103      	cbz	r3, 80061ce <_isatty_r+0x1a>
 80061cc:	6023      	str	r3, [r4, #0]
 80061ce:	bd38      	pop	{r3, r4, r5, pc}
 80061d0:	200025ac 	.word	0x200025ac

080061d4 <_lseek_r>:
 80061d4:	b538      	push	{r3, r4, r5, lr}
 80061d6:	4d07      	ldr	r5, [pc, #28]	; (80061f4 <_lseek_r+0x20>)
 80061d8:	4604      	mov	r4, r0
 80061da:	4608      	mov	r0, r1
 80061dc:	4611      	mov	r1, r2
 80061de:	2200      	movs	r2, #0
 80061e0:	602a      	str	r2, [r5, #0]
 80061e2:	461a      	mov	r2, r3
 80061e4:	f7fc fcd0 	bl	8002b88 <_lseek>
 80061e8:	1c43      	adds	r3, r0, #1
 80061ea:	d102      	bne.n	80061f2 <_lseek_r+0x1e>
 80061ec:	682b      	ldr	r3, [r5, #0]
 80061ee:	b103      	cbz	r3, 80061f2 <_lseek_r+0x1e>
 80061f0:	6023      	str	r3, [r4, #0]
 80061f2:	bd38      	pop	{r3, r4, r5, pc}
 80061f4:	200025ac 	.word	0x200025ac

080061f8 <_read_r>:
 80061f8:	b538      	push	{r3, r4, r5, lr}
 80061fa:	4d07      	ldr	r5, [pc, #28]	; (8006218 <_read_r+0x20>)
 80061fc:	4604      	mov	r4, r0
 80061fe:	4608      	mov	r0, r1
 8006200:	4611      	mov	r1, r2
 8006202:	2200      	movs	r2, #0
 8006204:	602a      	str	r2, [r5, #0]
 8006206:	461a      	mov	r2, r3
 8006208:	f7fc fc96 	bl	8002b38 <_read>
 800620c:	1c43      	adds	r3, r0, #1
 800620e:	d102      	bne.n	8006216 <_read_r+0x1e>
 8006210:	682b      	ldr	r3, [r5, #0]
 8006212:	b103      	cbz	r3, 8006216 <_read_r+0x1e>
 8006214:	6023      	str	r3, [r4, #0]
 8006216:	bd38      	pop	{r3, r4, r5, pc}
 8006218:	200025ac 	.word	0x200025ac
 800621c:	00000000 	.word	0x00000000

08006220 <cos>:
 8006220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006222:	ec53 2b10 	vmov	r2, r3, d0
 8006226:	4826      	ldr	r0, [pc, #152]	; (80062c0 <cos+0xa0>)
 8006228:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800622c:	4281      	cmp	r1, r0
 800622e:	dc06      	bgt.n	800623e <cos+0x1e>
 8006230:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80062b8 <cos+0x98>
 8006234:	b005      	add	sp, #20
 8006236:	f85d eb04 	ldr.w	lr, [sp], #4
 800623a:	f000 bbad 	b.w	8006998 <__kernel_cos>
 800623e:	4821      	ldr	r0, [pc, #132]	; (80062c4 <cos+0xa4>)
 8006240:	4281      	cmp	r1, r0
 8006242:	dd09      	ble.n	8006258 <cos+0x38>
 8006244:	ee10 0a10 	vmov	r0, s0
 8006248:	4619      	mov	r1, r3
 800624a:	f7fa f815 	bl	8000278 <__aeabi_dsub>
 800624e:	ec41 0b10 	vmov	d0, r0, r1
 8006252:	b005      	add	sp, #20
 8006254:	f85d fb04 	ldr.w	pc, [sp], #4
 8006258:	4668      	mov	r0, sp
 800625a:	f000 f8d9 	bl	8006410 <__ieee754_rem_pio2>
 800625e:	f000 0003 	and.w	r0, r0, #3
 8006262:	2801      	cmp	r0, #1
 8006264:	d00b      	beq.n	800627e <cos+0x5e>
 8006266:	2802      	cmp	r0, #2
 8006268:	d016      	beq.n	8006298 <cos+0x78>
 800626a:	b9e0      	cbnz	r0, 80062a6 <cos+0x86>
 800626c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006270:	ed9d 0b00 	vldr	d0, [sp]
 8006274:	f000 fb90 	bl	8006998 <__kernel_cos>
 8006278:	ec51 0b10 	vmov	r0, r1, d0
 800627c:	e7e7      	b.n	800624e <cos+0x2e>
 800627e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006282:	ed9d 0b00 	vldr	d0, [sp]
 8006286:	f000 ff9f 	bl	80071c8 <__kernel_sin>
 800628a:	ec53 2b10 	vmov	r2, r3, d0
 800628e:	ee10 0a10 	vmov	r0, s0
 8006292:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006296:	e7da      	b.n	800624e <cos+0x2e>
 8006298:	ed9d 1b02 	vldr	d1, [sp, #8]
 800629c:	ed9d 0b00 	vldr	d0, [sp]
 80062a0:	f000 fb7a 	bl	8006998 <__kernel_cos>
 80062a4:	e7f1      	b.n	800628a <cos+0x6a>
 80062a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80062aa:	ed9d 0b00 	vldr	d0, [sp]
 80062ae:	2001      	movs	r0, #1
 80062b0:	f000 ff8a 	bl	80071c8 <__kernel_sin>
 80062b4:	e7e0      	b.n	8006278 <cos+0x58>
 80062b6:	bf00      	nop
	...
 80062c0:	3fe921fb 	.word	0x3fe921fb
 80062c4:	7fefffff 	.word	0x7fefffff

080062c8 <sin>:
 80062c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80062ca:	ec53 2b10 	vmov	r2, r3, d0
 80062ce:	4828      	ldr	r0, [pc, #160]	; (8006370 <sin+0xa8>)
 80062d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80062d4:	4281      	cmp	r1, r0
 80062d6:	dc07      	bgt.n	80062e8 <sin+0x20>
 80062d8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8006368 <sin+0xa0>
 80062dc:	2000      	movs	r0, #0
 80062de:	b005      	add	sp, #20
 80062e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80062e4:	f000 bf70 	b.w	80071c8 <__kernel_sin>
 80062e8:	4822      	ldr	r0, [pc, #136]	; (8006374 <sin+0xac>)
 80062ea:	4281      	cmp	r1, r0
 80062ec:	dd09      	ble.n	8006302 <sin+0x3a>
 80062ee:	ee10 0a10 	vmov	r0, s0
 80062f2:	4619      	mov	r1, r3
 80062f4:	f7f9 ffc0 	bl	8000278 <__aeabi_dsub>
 80062f8:	ec41 0b10 	vmov	d0, r0, r1
 80062fc:	b005      	add	sp, #20
 80062fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8006302:	4668      	mov	r0, sp
 8006304:	f000 f884 	bl	8006410 <__ieee754_rem_pio2>
 8006308:	f000 0003 	and.w	r0, r0, #3
 800630c:	2801      	cmp	r0, #1
 800630e:	d00c      	beq.n	800632a <sin+0x62>
 8006310:	2802      	cmp	r0, #2
 8006312:	d011      	beq.n	8006338 <sin+0x70>
 8006314:	b9f0      	cbnz	r0, 8006354 <sin+0x8c>
 8006316:	ed9d 1b02 	vldr	d1, [sp, #8]
 800631a:	ed9d 0b00 	vldr	d0, [sp]
 800631e:	2001      	movs	r0, #1
 8006320:	f000 ff52 	bl	80071c8 <__kernel_sin>
 8006324:	ec51 0b10 	vmov	r0, r1, d0
 8006328:	e7e6      	b.n	80062f8 <sin+0x30>
 800632a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800632e:	ed9d 0b00 	vldr	d0, [sp]
 8006332:	f000 fb31 	bl	8006998 <__kernel_cos>
 8006336:	e7f5      	b.n	8006324 <sin+0x5c>
 8006338:	ed9d 1b02 	vldr	d1, [sp, #8]
 800633c:	ed9d 0b00 	vldr	d0, [sp]
 8006340:	2001      	movs	r0, #1
 8006342:	f000 ff41 	bl	80071c8 <__kernel_sin>
 8006346:	ec53 2b10 	vmov	r2, r3, d0
 800634a:	ee10 0a10 	vmov	r0, s0
 800634e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006352:	e7d1      	b.n	80062f8 <sin+0x30>
 8006354:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006358:	ed9d 0b00 	vldr	d0, [sp]
 800635c:	f000 fb1c 	bl	8006998 <__kernel_cos>
 8006360:	e7f1      	b.n	8006346 <sin+0x7e>
 8006362:	bf00      	nop
 8006364:	f3af 8000 	nop.w
	...
 8006370:	3fe921fb 	.word	0x3fe921fb
 8006374:	7fefffff 	.word	0x7fefffff

08006378 <sqrt>:
 8006378:	b538      	push	{r3, r4, r5, lr}
 800637a:	ed2d 8b02 	vpush	{d8}
 800637e:	ec55 4b10 	vmov	r4, r5, d0
 8006382:	f000 fa51 	bl	8006828 <__ieee754_sqrt>
 8006386:	4622      	mov	r2, r4
 8006388:	462b      	mov	r3, r5
 800638a:	4620      	mov	r0, r4
 800638c:	4629      	mov	r1, r5
 800638e:	eeb0 8a40 	vmov.f32	s16, s0
 8006392:	eef0 8a60 	vmov.f32	s17, s1
 8006396:	f7fa fbc1 	bl	8000b1c <__aeabi_dcmpun>
 800639a:	b990      	cbnz	r0, 80063c2 <sqrt+0x4a>
 800639c:	2200      	movs	r2, #0
 800639e:	2300      	movs	r3, #0
 80063a0:	4620      	mov	r0, r4
 80063a2:	4629      	mov	r1, r5
 80063a4:	f7fa fb92 	bl	8000acc <__aeabi_dcmplt>
 80063a8:	b158      	cbz	r0, 80063c2 <sqrt+0x4a>
 80063aa:	f7fe ff13 	bl	80051d4 <__errno>
 80063ae:	2321      	movs	r3, #33	; 0x21
 80063b0:	6003      	str	r3, [r0, #0]
 80063b2:	2200      	movs	r2, #0
 80063b4:	2300      	movs	r3, #0
 80063b6:	4610      	mov	r0, r2
 80063b8:	4619      	mov	r1, r3
 80063ba:	f7fa fa3f 	bl	800083c <__aeabi_ddiv>
 80063be:	ec41 0b18 	vmov	d8, r0, r1
 80063c2:	eeb0 0a48 	vmov.f32	s0, s16
 80063c6:	eef0 0a68 	vmov.f32	s1, s17
 80063ca:	ecbd 8b02 	vpop	{d8}
 80063ce:	bd38      	pop	{r3, r4, r5, pc}

080063d0 <sqrtf>:
 80063d0:	b508      	push	{r3, lr}
 80063d2:	ed2d 8b02 	vpush	{d8}
 80063d6:	eeb0 8a40 	vmov.f32	s16, s0
 80063da:	f000 fad7 	bl	800698c <__ieee754_sqrtf>
 80063de:	eeb4 8a48 	vcmp.f32	s16, s16
 80063e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063e6:	d60c      	bvs.n	8006402 <sqrtf+0x32>
 80063e8:	eddf 8a07 	vldr	s17, [pc, #28]	; 8006408 <sqrtf+0x38>
 80063ec:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80063f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063f4:	d505      	bpl.n	8006402 <sqrtf+0x32>
 80063f6:	f7fe feed 	bl	80051d4 <__errno>
 80063fa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80063fe:	2321      	movs	r3, #33	; 0x21
 8006400:	6003      	str	r3, [r0, #0]
 8006402:	ecbd 8b02 	vpop	{d8}
 8006406:	bd08      	pop	{r3, pc}
	...

08006410 <__ieee754_rem_pio2>:
 8006410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006414:	ed2d 8b02 	vpush	{d8}
 8006418:	ec55 4b10 	vmov	r4, r5, d0
 800641c:	4bca      	ldr	r3, [pc, #808]	; (8006748 <__ieee754_rem_pio2+0x338>)
 800641e:	b08b      	sub	sp, #44	; 0x2c
 8006420:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006424:	4598      	cmp	r8, r3
 8006426:	4682      	mov	sl, r0
 8006428:	9502      	str	r5, [sp, #8]
 800642a:	dc08      	bgt.n	800643e <__ieee754_rem_pio2+0x2e>
 800642c:	2200      	movs	r2, #0
 800642e:	2300      	movs	r3, #0
 8006430:	ed80 0b00 	vstr	d0, [r0]
 8006434:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006438:	f04f 0b00 	mov.w	fp, #0
 800643c:	e028      	b.n	8006490 <__ieee754_rem_pio2+0x80>
 800643e:	4bc3      	ldr	r3, [pc, #780]	; (800674c <__ieee754_rem_pio2+0x33c>)
 8006440:	4598      	cmp	r8, r3
 8006442:	dc78      	bgt.n	8006536 <__ieee754_rem_pio2+0x126>
 8006444:	9b02      	ldr	r3, [sp, #8]
 8006446:	4ec2      	ldr	r6, [pc, #776]	; (8006750 <__ieee754_rem_pio2+0x340>)
 8006448:	2b00      	cmp	r3, #0
 800644a:	ee10 0a10 	vmov	r0, s0
 800644e:	a3b0      	add	r3, pc, #704	; (adr r3, 8006710 <__ieee754_rem_pio2+0x300>)
 8006450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006454:	4629      	mov	r1, r5
 8006456:	dd39      	ble.n	80064cc <__ieee754_rem_pio2+0xbc>
 8006458:	f7f9 ff0e 	bl	8000278 <__aeabi_dsub>
 800645c:	45b0      	cmp	r8, r6
 800645e:	4604      	mov	r4, r0
 8006460:	460d      	mov	r5, r1
 8006462:	d01b      	beq.n	800649c <__ieee754_rem_pio2+0x8c>
 8006464:	a3ac      	add	r3, pc, #688	; (adr r3, 8006718 <__ieee754_rem_pio2+0x308>)
 8006466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646a:	f7f9 ff05 	bl	8000278 <__aeabi_dsub>
 800646e:	4602      	mov	r2, r0
 8006470:	460b      	mov	r3, r1
 8006472:	e9ca 2300 	strd	r2, r3, [sl]
 8006476:	4620      	mov	r0, r4
 8006478:	4629      	mov	r1, r5
 800647a:	f7f9 fefd 	bl	8000278 <__aeabi_dsub>
 800647e:	a3a6      	add	r3, pc, #664	; (adr r3, 8006718 <__ieee754_rem_pio2+0x308>)
 8006480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006484:	f7f9 fef8 	bl	8000278 <__aeabi_dsub>
 8006488:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800648c:	f04f 0b01 	mov.w	fp, #1
 8006490:	4658      	mov	r0, fp
 8006492:	b00b      	add	sp, #44	; 0x2c
 8006494:	ecbd 8b02 	vpop	{d8}
 8006498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800649c:	a3a0      	add	r3, pc, #640	; (adr r3, 8006720 <__ieee754_rem_pio2+0x310>)
 800649e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a2:	f7f9 fee9 	bl	8000278 <__aeabi_dsub>
 80064a6:	a3a0      	add	r3, pc, #640	; (adr r3, 8006728 <__ieee754_rem_pio2+0x318>)
 80064a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ac:	4604      	mov	r4, r0
 80064ae:	460d      	mov	r5, r1
 80064b0:	f7f9 fee2 	bl	8000278 <__aeabi_dsub>
 80064b4:	4602      	mov	r2, r0
 80064b6:	460b      	mov	r3, r1
 80064b8:	e9ca 2300 	strd	r2, r3, [sl]
 80064bc:	4620      	mov	r0, r4
 80064be:	4629      	mov	r1, r5
 80064c0:	f7f9 feda 	bl	8000278 <__aeabi_dsub>
 80064c4:	a398      	add	r3, pc, #608	; (adr r3, 8006728 <__ieee754_rem_pio2+0x318>)
 80064c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ca:	e7db      	b.n	8006484 <__ieee754_rem_pio2+0x74>
 80064cc:	f7f9 fed6 	bl	800027c <__adddf3>
 80064d0:	45b0      	cmp	r8, r6
 80064d2:	4604      	mov	r4, r0
 80064d4:	460d      	mov	r5, r1
 80064d6:	d016      	beq.n	8006506 <__ieee754_rem_pio2+0xf6>
 80064d8:	a38f      	add	r3, pc, #572	; (adr r3, 8006718 <__ieee754_rem_pio2+0x308>)
 80064da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064de:	f7f9 fecd 	bl	800027c <__adddf3>
 80064e2:	4602      	mov	r2, r0
 80064e4:	460b      	mov	r3, r1
 80064e6:	e9ca 2300 	strd	r2, r3, [sl]
 80064ea:	4620      	mov	r0, r4
 80064ec:	4629      	mov	r1, r5
 80064ee:	f7f9 fec3 	bl	8000278 <__aeabi_dsub>
 80064f2:	a389      	add	r3, pc, #548	; (adr r3, 8006718 <__ieee754_rem_pio2+0x308>)
 80064f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f8:	f7f9 fec0 	bl	800027c <__adddf3>
 80064fc:	f04f 3bff 	mov.w	fp, #4294967295
 8006500:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006504:	e7c4      	b.n	8006490 <__ieee754_rem_pio2+0x80>
 8006506:	a386      	add	r3, pc, #536	; (adr r3, 8006720 <__ieee754_rem_pio2+0x310>)
 8006508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650c:	f7f9 feb6 	bl	800027c <__adddf3>
 8006510:	a385      	add	r3, pc, #532	; (adr r3, 8006728 <__ieee754_rem_pio2+0x318>)
 8006512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006516:	4604      	mov	r4, r0
 8006518:	460d      	mov	r5, r1
 800651a:	f7f9 feaf 	bl	800027c <__adddf3>
 800651e:	4602      	mov	r2, r0
 8006520:	460b      	mov	r3, r1
 8006522:	e9ca 2300 	strd	r2, r3, [sl]
 8006526:	4620      	mov	r0, r4
 8006528:	4629      	mov	r1, r5
 800652a:	f7f9 fea5 	bl	8000278 <__aeabi_dsub>
 800652e:	a37e      	add	r3, pc, #504	; (adr r3, 8006728 <__ieee754_rem_pio2+0x318>)
 8006530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006534:	e7e0      	b.n	80064f8 <__ieee754_rem_pio2+0xe8>
 8006536:	4b87      	ldr	r3, [pc, #540]	; (8006754 <__ieee754_rem_pio2+0x344>)
 8006538:	4598      	cmp	r8, r3
 800653a:	f300 80d9 	bgt.w	80066f0 <__ieee754_rem_pio2+0x2e0>
 800653e:	f000 ff01 	bl	8007344 <fabs>
 8006542:	ec55 4b10 	vmov	r4, r5, d0
 8006546:	ee10 0a10 	vmov	r0, s0
 800654a:	a379      	add	r3, pc, #484	; (adr r3, 8006730 <__ieee754_rem_pio2+0x320>)
 800654c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006550:	4629      	mov	r1, r5
 8006552:	f7fa f849 	bl	80005e8 <__aeabi_dmul>
 8006556:	4b80      	ldr	r3, [pc, #512]	; (8006758 <__ieee754_rem_pio2+0x348>)
 8006558:	2200      	movs	r2, #0
 800655a:	f7f9 fe8f 	bl	800027c <__adddf3>
 800655e:	f7fa faf3 	bl	8000b48 <__aeabi_d2iz>
 8006562:	4683      	mov	fp, r0
 8006564:	f7f9 ffd6 	bl	8000514 <__aeabi_i2d>
 8006568:	4602      	mov	r2, r0
 800656a:	460b      	mov	r3, r1
 800656c:	ec43 2b18 	vmov	d8, r2, r3
 8006570:	a367      	add	r3, pc, #412	; (adr r3, 8006710 <__ieee754_rem_pio2+0x300>)
 8006572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006576:	f7fa f837 	bl	80005e8 <__aeabi_dmul>
 800657a:	4602      	mov	r2, r0
 800657c:	460b      	mov	r3, r1
 800657e:	4620      	mov	r0, r4
 8006580:	4629      	mov	r1, r5
 8006582:	f7f9 fe79 	bl	8000278 <__aeabi_dsub>
 8006586:	a364      	add	r3, pc, #400	; (adr r3, 8006718 <__ieee754_rem_pio2+0x308>)
 8006588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658c:	4606      	mov	r6, r0
 800658e:	460f      	mov	r7, r1
 8006590:	ec51 0b18 	vmov	r0, r1, d8
 8006594:	f7fa f828 	bl	80005e8 <__aeabi_dmul>
 8006598:	f1bb 0f1f 	cmp.w	fp, #31
 800659c:	4604      	mov	r4, r0
 800659e:	460d      	mov	r5, r1
 80065a0:	dc0d      	bgt.n	80065be <__ieee754_rem_pio2+0x1ae>
 80065a2:	4b6e      	ldr	r3, [pc, #440]	; (800675c <__ieee754_rem_pio2+0x34c>)
 80065a4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80065a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ac:	4543      	cmp	r3, r8
 80065ae:	d006      	beq.n	80065be <__ieee754_rem_pio2+0x1ae>
 80065b0:	4622      	mov	r2, r4
 80065b2:	462b      	mov	r3, r5
 80065b4:	4630      	mov	r0, r6
 80065b6:	4639      	mov	r1, r7
 80065b8:	f7f9 fe5e 	bl	8000278 <__aeabi_dsub>
 80065bc:	e00f      	b.n	80065de <__ieee754_rem_pio2+0x1ce>
 80065be:	462b      	mov	r3, r5
 80065c0:	4622      	mov	r2, r4
 80065c2:	4630      	mov	r0, r6
 80065c4:	4639      	mov	r1, r7
 80065c6:	f7f9 fe57 	bl	8000278 <__aeabi_dsub>
 80065ca:	ea4f 5328 	mov.w	r3, r8, asr #20
 80065ce:	9303      	str	r3, [sp, #12]
 80065d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80065d4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80065d8:	f1b8 0f10 	cmp.w	r8, #16
 80065dc:	dc02      	bgt.n	80065e4 <__ieee754_rem_pio2+0x1d4>
 80065de:	e9ca 0100 	strd	r0, r1, [sl]
 80065e2:	e039      	b.n	8006658 <__ieee754_rem_pio2+0x248>
 80065e4:	a34e      	add	r3, pc, #312	; (adr r3, 8006720 <__ieee754_rem_pio2+0x310>)
 80065e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ea:	ec51 0b18 	vmov	r0, r1, d8
 80065ee:	f7f9 fffb 	bl	80005e8 <__aeabi_dmul>
 80065f2:	4604      	mov	r4, r0
 80065f4:	460d      	mov	r5, r1
 80065f6:	4602      	mov	r2, r0
 80065f8:	460b      	mov	r3, r1
 80065fa:	4630      	mov	r0, r6
 80065fc:	4639      	mov	r1, r7
 80065fe:	f7f9 fe3b 	bl	8000278 <__aeabi_dsub>
 8006602:	4602      	mov	r2, r0
 8006604:	460b      	mov	r3, r1
 8006606:	4680      	mov	r8, r0
 8006608:	4689      	mov	r9, r1
 800660a:	4630      	mov	r0, r6
 800660c:	4639      	mov	r1, r7
 800660e:	f7f9 fe33 	bl	8000278 <__aeabi_dsub>
 8006612:	4622      	mov	r2, r4
 8006614:	462b      	mov	r3, r5
 8006616:	f7f9 fe2f 	bl	8000278 <__aeabi_dsub>
 800661a:	a343      	add	r3, pc, #268	; (adr r3, 8006728 <__ieee754_rem_pio2+0x318>)
 800661c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006620:	4604      	mov	r4, r0
 8006622:	460d      	mov	r5, r1
 8006624:	ec51 0b18 	vmov	r0, r1, d8
 8006628:	f7f9 ffde 	bl	80005e8 <__aeabi_dmul>
 800662c:	4622      	mov	r2, r4
 800662e:	462b      	mov	r3, r5
 8006630:	f7f9 fe22 	bl	8000278 <__aeabi_dsub>
 8006634:	4602      	mov	r2, r0
 8006636:	460b      	mov	r3, r1
 8006638:	4604      	mov	r4, r0
 800663a:	460d      	mov	r5, r1
 800663c:	4640      	mov	r0, r8
 800663e:	4649      	mov	r1, r9
 8006640:	f7f9 fe1a 	bl	8000278 <__aeabi_dsub>
 8006644:	9a03      	ldr	r2, [sp, #12]
 8006646:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	2b31      	cmp	r3, #49	; 0x31
 800664e:	dc24      	bgt.n	800669a <__ieee754_rem_pio2+0x28a>
 8006650:	e9ca 0100 	strd	r0, r1, [sl]
 8006654:	4646      	mov	r6, r8
 8006656:	464f      	mov	r7, r9
 8006658:	e9da 8900 	ldrd	r8, r9, [sl]
 800665c:	4630      	mov	r0, r6
 800665e:	4642      	mov	r2, r8
 8006660:	464b      	mov	r3, r9
 8006662:	4639      	mov	r1, r7
 8006664:	f7f9 fe08 	bl	8000278 <__aeabi_dsub>
 8006668:	462b      	mov	r3, r5
 800666a:	4622      	mov	r2, r4
 800666c:	f7f9 fe04 	bl	8000278 <__aeabi_dsub>
 8006670:	9b02      	ldr	r3, [sp, #8]
 8006672:	2b00      	cmp	r3, #0
 8006674:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006678:	f6bf af0a 	bge.w	8006490 <__ieee754_rem_pio2+0x80>
 800667c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006680:	f8ca 3004 	str.w	r3, [sl, #4]
 8006684:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006688:	f8ca 8000 	str.w	r8, [sl]
 800668c:	f8ca 0008 	str.w	r0, [sl, #8]
 8006690:	f8ca 300c 	str.w	r3, [sl, #12]
 8006694:	f1cb 0b00 	rsb	fp, fp, #0
 8006698:	e6fa      	b.n	8006490 <__ieee754_rem_pio2+0x80>
 800669a:	a327      	add	r3, pc, #156	; (adr r3, 8006738 <__ieee754_rem_pio2+0x328>)
 800669c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a0:	ec51 0b18 	vmov	r0, r1, d8
 80066a4:	f7f9 ffa0 	bl	80005e8 <__aeabi_dmul>
 80066a8:	4604      	mov	r4, r0
 80066aa:	460d      	mov	r5, r1
 80066ac:	4602      	mov	r2, r0
 80066ae:	460b      	mov	r3, r1
 80066b0:	4640      	mov	r0, r8
 80066b2:	4649      	mov	r1, r9
 80066b4:	f7f9 fde0 	bl	8000278 <__aeabi_dsub>
 80066b8:	4602      	mov	r2, r0
 80066ba:	460b      	mov	r3, r1
 80066bc:	4606      	mov	r6, r0
 80066be:	460f      	mov	r7, r1
 80066c0:	4640      	mov	r0, r8
 80066c2:	4649      	mov	r1, r9
 80066c4:	f7f9 fdd8 	bl	8000278 <__aeabi_dsub>
 80066c8:	4622      	mov	r2, r4
 80066ca:	462b      	mov	r3, r5
 80066cc:	f7f9 fdd4 	bl	8000278 <__aeabi_dsub>
 80066d0:	a31b      	add	r3, pc, #108	; (adr r3, 8006740 <__ieee754_rem_pio2+0x330>)
 80066d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d6:	4604      	mov	r4, r0
 80066d8:	460d      	mov	r5, r1
 80066da:	ec51 0b18 	vmov	r0, r1, d8
 80066de:	f7f9 ff83 	bl	80005e8 <__aeabi_dmul>
 80066e2:	4622      	mov	r2, r4
 80066e4:	462b      	mov	r3, r5
 80066e6:	f7f9 fdc7 	bl	8000278 <__aeabi_dsub>
 80066ea:	4604      	mov	r4, r0
 80066ec:	460d      	mov	r5, r1
 80066ee:	e75f      	b.n	80065b0 <__ieee754_rem_pio2+0x1a0>
 80066f0:	4b1b      	ldr	r3, [pc, #108]	; (8006760 <__ieee754_rem_pio2+0x350>)
 80066f2:	4598      	cmp	r8, r3
 80066f4:	dd36      	ble.n	8006764 <__ieee754_rem_pio2+0x354>
 80066f6:	ee10 2a10 	vmov	r2, s0
 80066fa:	462b      	mov	r3, r5
 80066fc:	4620      	mov	r0, r4
 80066fe:	4629      	mov	r1, r5
 8006700:	f7f9 fdba 	bl	8000278 <__aeabi_dsub>
 8006704:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006708:	e9ca 0100 	strd	r0, r1, [sl]
 800670c:	e694      	b.n	8006438 <__ieee754_rem_pio2+0x28>
 800670e:	bf00      	nop
 8006710:	54400000 	.word	0x54400000
 8006714:	3ff921fb 	.word	0x3ff921fb
 8006718:	1a626331 	.word	0x1a626331
 800671c:	3dd0b461 	.word	0x3dd0b461
 8006720:	1a600000 	.word	0x1a600000
 8006724:	3dd0b461 	.word	0x3dd0b461
 8006728:	2e037073 	.word	0x2e037073
 800672c:	3ba3198a 	.word	0x3ba3198a
 8006730:	6dc9c883 	.word	0x6dc9c883
 8006734:	3fe45f30 	.word	0x3fe45f30
 8006738:	2e000000 	.word	0x2e000000
 800673c:	3ba3198a 	.word	0x3ba3198a
 8006740:	252049c1 	.word	0x252049c1
 8006744:	397b839a 	.word	0x397b839a
 8006748:	3fe921fb 	.word	0x3fe921fb
 800674c:	4002d97b 	.word	0x4002d97b
 8006750:	3ff921fb 	.word	0x3ff921fb
 8006754:	413921fb 	.word	0x413921fb
 8006758:	3fe00000 	.word	0x3fe00000
 800675c:	08007d84 	.word	0x08007d84
 8006760:	7fefffff 	.word	0x7fefffff
 8006764:	ea4f 5428 	mov.w	r4, r8, asr #20
 8006768:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800676c:	ee10 0a10 	vmov	r0, s0
 8006770:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8006774:	ee10 6a10 	vmov	r6, s0
 8006778:	460f      	mov	r7, r1
 800677a:	f7fa f9e5 	bl	8000b48 <__aeabi_d2iz>
 800677e:	f7f9 fec9 	bl	8000514 <__aeabi_i2d>
 8006782:	4602      	mov	r2, r0
 8006784:	460b      	mov	r3, r1
 8006786:	4630      	mov	r0, r6
 8006788:	4639      	mov	r1, r7
 800678a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800678e:	f7f9 fd73 	bl	8000278 <__aeabi_dsub>
 8006792:	4b23      	ldr	r3, [pc, #140]	; (8006820 <__ieee754_rem_pio2+0x410>)
 8006794:	2200      	movs	r2, #0
 8006796:	f7f9 ff27 	bl	80005e8 <__aeabi_dmul>
 800679a:	460f      	mov	r7, r1
 800679c:	4606      	mov	r6, r0
 800679e:	f7fa f9d3 	bl	8000b48 <__aeabi_d2iz>
 80067a2:	f7f9 feb7 	bl	8000514 <__aeabi_i2d>
 80067a6:	4602      	mov	r2, r0
 80067a8:	460b      	mov	r3, r1
 80067aa:	4630      	mov	r0, r6
 80067ac:	4639      	mov	r1, r7
 80067ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80067b2:	f7f9 fd61 	bl	8000278 <__aeabi_dsub>
 80067b6:	4b1a      	ldr	r3, [pc, #104]	; (8006820 <__ieee754_rem_pio2+0x410>)
 80067b8:	2200      	movs	r2, #0
 80067ba:	f7f9 ff15 	bl	80005e8 <__aeabi_dmul>
 80067be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80067c2:	ad04      	add	r5, sp, #16
 80067c4:	f04f 0803 	mov.w	r8, #3
 80067c8:	46a9      	mov	r9, r5
 80067ca:	2600      	movs	r6, #0
 80067cc:	2700      	movs	r7, #0
 80067ce:	4632      	mov	r2, r6
 80067d0:	463b      	mov	r3, r7
 80067d2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80067d6:	46c3      	mov	fp, r8
 80067d8:	3d08      	subs	r5, #8
 80067da:	f108 38ff 	add.w	r8, r8, #4294967295
 80067de:	f7fa f96b 	bl	8000ab8 <__aeabi_dcmpeq>
 80067e2:	2800      	cmp	r0, #0
 80067e4:	d1f3      	bne.n	80067ce <__ieee754_rem_pio2+0x3be>
 80067e6:	4b0f      	ldr	r3, [pc, #60]	; (8006824 <__ieee754_rem_pio2+0x414>)
 80067e8:	9301      	str	r3, [sp, #4]
 80067ea:	2302      	movs	r3, #2
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	4622      	mov	r2, r4
 80067f0:	465b      	mov	r3, fp
 80067f2:	4651      	mov	r1, sl
 80067f4:	4648      	mov	r0, r9
 80067f6:	f000 f997 	bl	8006b28 <__kernel_rem_pio2>
 80067fa:	9b02      	ldr	r3, [sp, #8]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	4683      	mov	fp, r0
 8006800:	f6bf ae46 	bge.w	8006490 <__ieee754_rem_pio2+0x80>
 8006804:	e9da 2100 	ldrd	r2, r1, [sl]
 8006808:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800680c:	e9ca 2300 	strd	r2, r3, [sl]
 8006810:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8006814:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006818:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800681c:	e73a      	b.n	8006694 <__ieee754_rem_pio2+0x284>
 800681e:	bf00      	nop
 8006820:	41700000 	.word	0x41700000
 8006824:	08007e04 	.word	0x08007e04

08006828 <__ieee754_sqrt>:
 8006828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800682c:	ec55 4b10 	vmov	r4, r5, d0
 8006830:	4e55      	ldr	r6, [pc, #340]	; (8006988 <__ieee754_sqrt+0x160>)
 8006832:	43ae      	bics	r6, r5
 8006834:	ee10 0a10 	vmov	r0, s0
 8006838:	ee10 3a10 	vmov	r3, s0
 800683c:	462a      	mov	r2, r5
 800683e:	4629      	mov	r1, r5
 8006840:	d110      	bne.n	8006864 <__ieee754_sqrt+0x3c>
 8006842:	ee10 2a10 	vmov	r2, s0
 8006846:	462b      	mov	r3, r5
 8006848:	f7f9 fece 	bl	80005e8 <__aeabi_dmul>
 800684c:	4602      	mov	r2, r0
 800684e:	460b      	mov	r3, r1
 8006850:	4620      	mov	r0, r4
 8006852:	4629      	mov	r1, r5
 8006854:	f7f9 fd12 	bl	800027c <__adddf3>
 8006858:	4604      	mov	r4, r0
 800685a:	460d      	mov	r5, r1
 800685c:	ec45 4b10 	vmov	d0, r4, r5
 8006860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006864:	2d00      	cmp	r5, #0
 8006866:	dc10      	bgt.n	800688a <__ieee754_sqrt+0x62>
 8006868:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800686c:	4330      	orrs	r0, r6
 800686e:	d0f5      	beq.n	800685c <__ieee754_sqrt+0x34>
 8006870:	b15d      	cbz	r5, 800688a <__ieee754_sqrt+0x62>
 8006872:	ee10 2a10 	vmov	r2, s0
 8006876:	462b      	mov	r3, r5
 8006878:	ee10 0a10 	vmov	r0, s0
 800687c:	f7f9 fcfc 	bl	8000278 <__aeabi_dsub>
 8006880:	4602      	mov	r2, r0
 8006882:	460b      	mov	r3, r1
 8006884:	f7f9 ffda 	bl	800083c <__aeabi_ddiv>
 8006888:	e7e6      	b.n	8006858 <__ieee754_sqrt+0x30>
 800688a:	1512      	asrs	r2, r2, #20
 800688c:	d074      	beq.n	8006978 <__ieee754_sqrt+0x150>
 800688e:	07d4      	lsls	r4, r2, #31
 8006890:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006894:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8006898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800689c:	bf5e      	ittt	pl
 800689e:	0fda      	lsrpl	r2, r3, #31
 80068a0:	005b      	lslpl	r3, r3, #1
 80068a2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80068a6:	2400      	movs	r4, #0
 80068a8:	0fda      	lsrs	r2, r3, #31
 80068aa:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80068ae:	107f      	asrs	r7, r7, #1
 80068b0:	005b      	lsls	r3, r3, #1
 80068b2:	2516      	movs	r5, #22
 80068b4:	4620      	mov	r0, r4
 80068b6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80068ba:	1886      	adds	r6, r0, r2
 80068bc:	428e      	cmp	r6, r1
 80068be:	bfde      	ittt	le
 80068c0:	1b89      	suble	r1, r1, r6
 80068c2:	18b0      	addle	r0, r6, r2
 80068c4:	18a4      	addle	r4, r4, r2
 80068c6:	0049      	lsls	r1, r1, #1
 80068c8:	3d01      	subs	r5, #1
 80068ca:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80068ce:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80068d2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80068d6:	d1f0      	bne.n	80068ba <__ieee754_sqrt+0x92>
 80068d8:	462a      	mov	r2, r5
 80068da:	f04f 0e20 	mov.w	lr, #32
 80068de:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80068e2:	4281      	cmp	r1, r0
 80068e4:	eb06 0c05 	add.w	ip, r6, r5
 80068e8:	dc02      	bgt.n	80068f0 <__ieee754_sqrt+0xc8>
 80068ea:	d113      	bne.n	8006914 <__ieee754_sqrt+0xec>
 80068ec:	459c      	cmp	ip, r3
 80068ee:	d811      	bhi.n	8006914 <__ieee754_sqrt+0xec>
 80068f0:	f1bc 0f00 	cmp.w	ip, #0
 80068f4:	eb0c 0506 	add.w	r5, ip, r6
 80068f8:	da43      	bge.n	8006982 <__ieee754_sqrt+0x15a>
 80068fa:	2d00      	cmp	r5, #0
 80068fc:	db41      	blt.n	8006982 <__ieee754_sqrt+0x15a>
 80068fe:	f100 0801 	add.w	r8, r0, #1
 8006902:	1a09      	subs	r1, r1, r0
 8006904:	459c      	cmp	ip, r3
 8006906:	bf88      	it	hi
 8006908:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800690c:	eba3 030c 	sub.w	r3, r3, ip
 8006910:	4432      	add	r2, r6
 8006912:	4640      	mov	r0, r8
 8006914:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006918:	f1be 0e01 	subs.w	lr, lr, #1
 800691c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8006920:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006924:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006928:	d1db      	bne.n	80068e2 <__ieee754_sqrt+0xba>
 800692a:	430b      	orrs	r3, r1
 800692c:	d006      	beq.n	800693c <__ieee754_sqrt+0x114>
 800692e:	1c50      	adds	r0, r2, #1
 8006930:	bf13      	iteet	ne
 8006932:	3201      	addne	r2, #1
 8006934:	3401      	addeq	r4, #1
 8006936:	4672      	moveq	r2, lr
 8006938:	f022 0201 	bicne.w	r2, r2, #1
 800693c:	1063      	asrs	r3, r4, #1
 800693e:	0852      	lsrs	r2, r2, #1
 8006940:	07e1      	lsls	r1, r4, #31
 8006942:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006946:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800694a:	bf48      	it	mi
 800694c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006950:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006954:	4614      	mov	r4, r2
 8006956:	e781      	b.n	800685c <__ieee754_sqrt+0x34>
 8006958:	0ad9      	lsrs	r1, r3, #11
 800695a:	3815      	subs	r0, #21
 800695c:	055b      	lsls	r3, r3, #21
 800695e:	2900      	cmp	r1, #0
 8006960:	d0fa      	beq.n	8006958 <__ieee754_sqrt+0x130>
 8006962:	02cd      	lsls	r5, r1, #11
 8006964:	d50a      	bpl.n	800697c <__ieee754_sqrt+0x154>
 8006966:	f1c2 0420 	rsb	r4, r2, #32
 800696a:	fa23 f404 	lsr.w	r4, r3, r4
 800696e:	1e55      	subs	r5, r2, #1
 8006970:	4093      	lsls	r3, r2
 8006972:	4321      	orrs	r1, r4
 8006974:	1b42      	subs	r2, r0, r5
 8006976:	e78a      	b.n	800688e <__ieee754_sqrt+0x66>
 8006978:	4610      	mov	r0, r2
 800697a:	e7f0      	b.n	800695e <__ieee754_sqrt+0x136>
 800697c:	0049      	lsls	r1, r1, #1
 800697e:	3201      	adds	r2, #1
 8006980:	e7ef      	b.n	8006962 <__ieee754_sqrt+0x13a>
 8006982:	4680      	mov	r8, r0
 8006984:	e7bd      	b.n	8006902 <__ieee754_sqrt+0xda>
 8006986:	bf00      	nop
 8006988:	7ff00000 	.word	0x7ff00000

0800698c <__ieee754_sqrtf>:
 800698c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006990:	4770      	bx	lr
 8006992:	0000      	movs	r0, r0
 8006994:	0000      	movs	r0, r0
	...

08006998 <__kernel_cos>:
 8006998:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800699c:	ec57 6b10 	vmov	r6, r7, d0
 80069a0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80069a4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80069a8:	ed8d 1b00 	vstr	d1, [sp]
 80069ac:	da07      	bge.n	80069be <__kernel_cos+0x26>
 80069ae:	ee10 0a10 	vmov	r0, s0
 80069b2:	4639      	mov	r1, r7
 80069b4:	f7fa f8c8 	bl	8000b48 <__aeabi_d2iz>
 80069b8:	2800      	cmp	r0, #0
 80069ba:	f000 8088 	beq.w	8006ace <__kernel_cos+0x136>
 80069be:	4632      	mov	r2, r6
 80069c0:	463b      	mov	r3, r7
 80069c2:	4630      	mov	r0, r6
 80069c4:	4639      	mov	r1, r7
 80069c6:	f7f9 fe0f 	bl	80005e8 <__aeabi_dmul>
 80069ca:	4b51      	ldr	r3, [pc, #324]	; (8006b10 <__kernel_cos+0x178>)
 80069cc:	2200      	movs	r2, #0
 80069ce:	4604      	mov	r4, r0
 80069d0:	460d      	mov	r5, r1
 80069d2:	f7f9 fe09 	bl	80005e8 <__aeabi_dmul>
 80069d6:	a340      	add	r3, pc, #256	; (adr r3, 8006ad8 <__kernel_cos+0x140>)
 80069d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069dc:	4682      	mov	sl, r0
 80069de:	468b      	mov	fp, r1
 80069e0:	4620      	mov	r0, r4
 80069e2:	4629      	mov	r1, r5
 80069e4:	f7f9 fe00 	bl	80005e8 <__aeabi_dmul>
 80069e8:	a33d      	add	r3, pc, #244	; (adr r3, 8006ae0 <__kernel_cos+0x148>)
 80069ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ee:	f7f9 fc45 	bl	800027c <__adddf3>
 80069f2:	4622      	mov	r2, r4
 80069f4:	462b      	mov	r3, r5
 80069f6:	f7f9 fdf7 	bl	80005e8 <__aeabi_dmul>
 80069fa:	a33b      	add	r3, pc, #236	; (adr r3, 8006ae8 <__kernel_cos+0x150>)
 80069fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a00:	f7f9 fc3a 	bl	8000278 <__aeabi_dsub>
 8006a04:	4622      	mov	r2, r4
 8006a06:	462b      	mov	r3, r5
 8006a08:	f7f9 fdee 	bl	80005e8 <__aeabi_dmul>
 8006a0c:	a338      	add	r3, pc, #224	; (adr r3, 8006af0 <__kernel_cos+0x158>)
 8006a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a12:	f7f9 fc33 	bl	800027c <__adddf3>
 8006a16:	4622      	mov	r2, r4
 8006a18:	462b      	mov	r3, r5
 8006a1a:	f7f9 fde5 	bl	80005e8 <__aeabi_dmul>
 8006a1e:	a336      	add	r3, pc, #216	; (adr r3, 8006af8 <__kernel_cos+0x160>)
 8006a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a24:	f7f9 fc28 	bl	8000278 <__aeabi_dsub>
 8006a28:	4622      	mov	r2, r4
 8006a2a:	462b      	mov	r3, r5
 8006a2c:	f7f9 fddc 	bl	80005e8 <__aeabi_dmul>
 8006a30:	a333      	add	r3, pc, #204	; (adr r3, 8006b00 <__kernel_cos+0x168>)
 8006a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a36:	f7f9 fc21 	bl	800027c <__adddf3>
 8006a3a:	4622      	mov	r2, r4
 8006a3c:	462b      	mov	r3, r5
 8006a3e:	f7f9 fdd3 	bl	80005e8 <__aeabi_dmul>
 8006a42:	4622      	mov	r2, r4
 8006a44:	462b      	mov	r3, r5
 8006a46:	f7f9 fdcf 	bl	80005e8 <__aeabi_dmul>
 8006a4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a4e:	4604      	mov	r4, r0
 8006a50:	460d      	mov	r5, r1
 8006a52:	4630      	mov	r0, r6
 8006a54:	4639      	mov	r1, r7
 8006a56:	f7f9 fdc7 	bl	80005e8 <__aeabi_dmul>
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	4629      	mov	r1, r5
 8006a60:	4620      	mov	r0, r4
 8006a62:	f7f9 fc09 	bl	8000278 <__aeabi_dsub>
 8006a66:	4b2b      	ldr	r3, [pc, #172]	; (8006b14 <__kernel_cos+0x17c>)
 8006a68:	4598      	cmp	r8, r3
 8006a6a:	4606      	mov	r6, r0
 8006a6c:	460f      	mov	r7, r1
 8006a6e:	dc10      	bgt.n	8006a92 <__kernel_cos+0xfa>
 8006a70:	4602      	mov	r2, r0
 8006a72:	460b      	mov	r3, r1
 8006a74:	4650      	mov	r0, sl
 8006a76:	4659      	mov	r1, fp
 8006a78:	f7f9 fbfe 	bl	8000278 <__aeabi_dsub>
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	4926      	ldr	r1, [pc, #152]	; (8006b18 <__kernel_cos+0x180>)
 8006a80:	4602      	mov	r2, r0
 8006a82:	2000      	movs	r0, #0
 8006a84:	f7f9 fbf8 	bl	8000278 <__aeabi_dsub>
 8006a88:	ec41 0b10 	vmov	d0, r0, r1
 8006a8c:	b003      	add	sp, #12
 8006a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a92:	4b22      	ldr	r3, [pc, #136]	; (8006b1c <__kernel_cos+0x184>)
 8006a94:	4920      	ldr	r1, [pc, #128]	; (8006b18 <__kernel_cos+0x180>)
 8006a96:	4598      	cmp	r8, r3
 8006a98:	bfcc      	ite	gt
 8006a9a:	4d21      	ldrgt	r5, [pc, #132]	; (8006b20 <__kernel_cos+0x188>)
 8006a9c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8006aa0:	2400      	movs	r4, #0
 8006aa2:	4622      	mov	r2, r4
 8006aa4:	462b      	mov	r3, r5
 8006aa6:	2000      	movs	r0, #0
 8006aa8:	f7f9 fbe6 	bl	8000278 <__aeabi_dsub>
 8006aac:	4622      	mov	r2, r4
 8006aae:	4680      	mov	r8, r0
 8006ab0:	4689      	mov	r9, r1
 8006ab2:	462b      	mov	r3, r5
 8006ab4:	4650      	mov	r0, sl
 8006ab6:	4659      	mov	r1, fp
 8006ab8:	f7f9 fbde 	bl	8000278 <__aeabi_dsub>
 8006abc:	4632      	mov	r2, r6
 8006abe:	463b      	mov	r3, r7
 8006ac0:	f7f9 fbda 	bl	8000278 <__aeabi_dsub>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	4640      	mov	r0, r8
 8006aca:	4649      	mov	r1, r9
 8006acc:	e7da      	b.n	8006a84 <__kernel_cos+0xec>
 8006ace:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006b08 <__kernel_cos+0x170>
 8006ad2:	e7db      	b.n	8006a8c <__kernel_cos+0xf4>
 8006ad4:	f3af 8000 	nop.w
 8006ad8:	be8838d4 	.word	0xbe8838d4
 8006adc:	bda8fae9 	.word	0xbda8fae9
 8006ae0:	bdb4b1c4 	.word	0xbdb4b1c4
 8006ae4:	3e21ee9e 	.word	0x3e21ee9e
 8006ae8:	809c52ad 	.word	0x809c52ad
 8006aec:	3e927e4f 	.word	0x3e927e4f
 8006af0:	19cb1590 	.word	0x19cb1590
 8006af4:	3efa01a0 	.word	0x3efa01a0
 8006af8:	16c15177 	.word	0x16c15177
 8006afc:	3f56c16c 	.word	0x3f56c16c
 8006b00:	5555554c 	.word	0x5555554c
 8006b04:	3fa55555 	.word	0x3fa55555
 8006b08:	00000000 	.word	0x00000000
 8006b0c:	3ff00000 	.word	0x3ff00000
 8006b10:	3fe00000 	.word	0x3fe00000
 8006b14:	3fd33332 	.word	0x3fd33332
 8006b18:	3ff00000 	.word	0x3ff00000
 8006b1c:	3fe90000 	.word	0x3fe90000
 8006b20:	3fd20000 	.word	0x3fd20000
 8006b24:	00000000 	.word	0x00000000

08006b28 <__kernel_rem_pio2>:
 8006b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b2c:	ed2d 8b02 	vpush	{d8}
 8006b30:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006b34:	f112 0f14 	cmn.w	r2, #20
 8006b38:	9308      	str	r3, [sp, #32]
 8006b3a:	9101      	str	r1, [sp, #4]
 8006b3c:	4bc4      	ldr	r3, [pc, #784]	; (8006e50 <__kernel_rem_pio2+0x328>)
 8006b3e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8006b40:	900b      	str	r0, [sp, #44]	; 0x2c
 8006b42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b46:	9302      	str	r3, [sp, #8]
 8006b48:	9b08      	ldr	r3, [sp, #32]
 8006b4a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b4e:	bfa8      	it	ge
 8006b50:	1ed4      	subge	r4, r2, #3
 8006b52:	9306      	str	r3, [sp, #24]
 8006b54:	bfb2      	itee	lt
 8006b56:	2400      	movlt	r4, #0
 8006b58:	2318      	movge	r3, #24
 8006b5a:	fb94 f4f3 	sdivge	r4, r4, r3
 8006b5e:	f06f 0317 	mvn.w	r3, #23
 8006b62:	fb04 3303 	mla	r3, r4, r3, r3
 8006b66:	eb03 0a02 	add.w	sl, r3, r2
 8006b6a:	9b02      	ldr	r3, [sp, #8]
 8006b6c:	9a06      	ldr	r2, [sp, #24]
 8006b6e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8006e40 <__kernel_rem_pio2+0x318>
 8006b72:	eb03 0802 	add.w	r8, r3, r2
 8006b76:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006b78:	1aa7      	subs	r7, r4, r2
 8006b7a:	ae22      	add	r6, sp, #136	; 0x88
 8006b7c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006b80:	2500      	movs	r5, #0
 8006b82:	4545      	cmp	r5, r8
 8006b84:	dd13      	ble.n	8006bae <__kernel_rem_pio2+0x86>
 8006b86:	9b08      	ldr	r3, [sp, #32]
 8006b88:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8006e40 <__kernel_rem_pio2+0x318>
 8006b8c:	aa22      	add	r2, sp, #136	; 0x88
 8006b8e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006b92:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8006b96:	f04f 0800 	mov.w	r8, #0
 8006b9a:	9b02      	ldr	r3, [sp, #8]
 8006b9c:	4598      	cmp	r8, r3
 8006b9e:	dc2f      	bgt.n	8006c00 <__kernel_rem_pio2+0xd8>
 8006ba0:	ed8d 8b04 	vstr	d8, [sp, #16]
 8006ba4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8006ba8:	462f      	mov	r7, r5
 8006baa:	2600      	movs	r6, #0
 8006bac:	e01b      	b.n	8006be6 <__kernel_rem_pio2+0xbe>
 8006bae:	42ef      	cmn	r7, r5
 8006bb0:	d407      	bmi.n	8006bc2 <__kernel_rem_pio2+0x9a>
 8006bb2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006bb6:	f7f9 fcad 	bl	8000514 <__aeabi_i2d>
 8006bba:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006bbe:	3501      	adds	r5, #1
 8006bc0:	e7df      	b.n	8006b82 <__kernel_rem_pio2+0x5a>
 8006bc2:	ec51 0b18 	vmov	r0, r1, d8
 8006bc6:	e7f8      	b.n	8006bba <__kernel_rem_pio2+0x92>
 8006bc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bcc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006bd0:	f7f9 fd0a 	bl	80005e8 <__aeabi_dmul>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bdc:	f7f9 fb4e 	bl	800027c <__adddf3>
 8006be0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006be4:	3601      	adds	r6, #1
 8006be6:	9b06      	ldr	r3, [sp, #24]
 8006be8:	429e      	cmp	r6, r3
 8006bea:	f1a7 0708 	sub.w	r7, r7, #8
 8006bee:	ddeb      	ble.n	8006bc8 <__kernel_rem_pio2+0xa0>
 8006bf0:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006bf4:	f108 0801 	add.w	r8, r8, #1
 8006bf8:	ecab 7b02 	vstmia	fp!, {d7}
 8006bfc:	3508      	adds	r5, #8
 8006bfe:	e7cc      	b.n	8006b9a <__kernel_rem_pio2+0x72>
 8006c00:	9b02      	ldr	r3, [sp, #8]
 8006c02:	aa0e      	add	r2, sp, #56	; 0x38
 8006c04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006c08:	930d      	str	r3, [sp, #52]	; 0x34
 8006c0a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006c0c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006c10:	9c02      	ldr	r4, [sp, #8]
 8006c12:	930c      	str	r3, [sp, #48]	; 0x30
 8006c14:	00e3      	lsls	r3, r4, #3
 8006c16:	930a      	str	r3, [sp, #40]	; 0x28
 8006c18:	ab9a      	add	r3, sp, #616	; 0x268
 8006c1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006c1e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8006c22:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8006c26:	ab72      	add	r3, sp, #456	; 0x1c8
 8006c28:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8006c2c:	46c3      	mov	fp, r8
 8006c2e:	46a1      	mov	r9, r4
 8006c30:	f1b9 0f00 	cmp.w	r9, #0
 8006c34:	f1a5 0508 	sub.w	r5, r5, #8
 8006c38:	dc77      	bgt.n	8006d2a <__kernel_rem_pio2+0x202>
 8006c3a:	ec47 6b10 	vmov	d0, r6, r7
 8006c3e:	4650      	mov	r0, sl
 8006c40:	f000 fc0a 	bl	8007458 <scalbn>
 8006c44:	ec57 6b10 	vmov	r6, r7, d0
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006c4e:	ee10 0a10 	vmov	r0, s0
 8006c52:	4639      	mov	r1, r7
 8006c54:	f7f9 fcc8 	bl	80005e8 <__aeabi_dmul>
 8006c58:	ec41 0b10 	vmov	d0, r0, r1
 8006c5c:	f000 fb7c 	bl	8007358 <floor>
 8006c60:	4b7c      	ldr	r3, [pc, #496]	; (8006e54 <__kernel_rem_pio2+0x32c>)
 8006c62:	ec51 0b10 	vmov	r0, r1, d0
 8006c66:	2200      	movs	r2, #0
 8006c68:	f7f9 fcbe 	bl	80005e8 <__aeabi_dmul>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	460b      	mov	r3, r1
 8006c70:	4630      	mov	r0, r6
 8006c72:	4639      	mov	r1, r7
 8006c74:	f7f9 fb00 	bl	8000278 <__aeabi_dsub>
 8006c78:	460f      	mov	r7, r1
 8006c7a:	4606      	mov	r6, r0
 8006c7c:	f7f9 ff64 	bl	8000b48 <__aeabi_d2iz>
 8006c80:	9004      	str	r0, [sp, #16]
 8006c82:	f7f9 fc47 	bl	8000514 <__aeabi_i2d>
 8006c86:	4602      	mov	r2, r0
 8006c88:	460b      	mov	r3, r1
 8006c8a:	4630      	mov	r0, r6
 8006c8c:	4639      	mov	r1, r7
 8006c8e:	f7f9 faf3 	bl	8000278 <__aeabi_dsub>
 8006c92:	f1ba 0f00 	cmp.w	sl, #0
 8006c96:	4606      	mov	r6, r0
 8006c98:	460f      	mov	r7, r1
 8006c9a:	dd6d      	ble.n	8006d78 <__kernel_rem_pio2+0x250>
 8006c9c:	1e62      	subs	r2, r4, #1
 8006c9e:	ab0e      	add	r3, sp, #56	; 0x38
 8006ca0:	9d04      	ldr	r5, [sp, #16]
 8006ca2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006ca6:	f1ca 0118 	rsb	r1, sl, #24
 8006caa:	fa40 f301 	asr.w	r3, r0, r1
 8006cae:	441d      	add	r5, r3
 8006cb0:	408b      	lsls	r3, r1
 8006cb2:	1ac0      	subs	r0, r0, r3
 8006cb4:	ab0e      	add	r3, sp, #56	; 0x38
 8006cb6:	9504      	str	r5, [sp, #16]
 8006cb8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006cbc:	f1ca 0317 	rsb	r3, sl, #23
 8006cc0:	fa40 fb03 	asr.w	fp, r0, r3
 8006cc4:	f1bb 0f00 	cmp.w	fp, #0
 8006cc8:	dd65      	ble.n	8006d96 <__kernel_rem_pio2+0x26e>
 8006cca:	9b04      	ldr	r3, [sp, #16]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	3301      	adds	r3, #1
 8006cd0:	9304      	str	r3, [sp, #16]
 8006cd2:	4615      	mov	r5, r2
 8006cd4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006cd8:	4294      	cmp	r4, r2
 8006cda:	f300 809c 	bgt.w	8006e16 <__kernel_rem_pio2+0x2ee>
 8006cde:	f1ba 0f00 	cmp.w	sl, #0
 8006ce2:	dd07      	ble.n	8006cf4 <__kernel_rem_pio2+0x1cc>
 8006ce4:	f1ba 0f01 	cmp.w	sl, #1
 8006ce8:	f000 80c0 	beq.w	8006e6c <__kernel_rem_pio2+0x344>
 8006cec:	f1ba 0f02 	cmp.w	sl, #2
 8006cf0:	f000 80c6 	beq.w	8006e80 <__kernel_rem_pio2+0x358>
 8006cf4:	f1bb 0f02 	cmp.w	fp, #2
 8006cf8:	d14d      	bne.n	8006d96 <__kernel_rem_pio2+0x26e>
 8006cfa:	4632      	mov	r2, r6
 8006cfc:	463b      	mov	r3, r7
 8006cfe:	4956      	ldr	r1, [pc, #344]	; (8006e58 <__kernel_rem_pio2+0x330>)
 8006d00:	2000      	movs	r0, #0
 8006d02:	f7f9 fab9 	bl	8000278 <__aeabi_dsub>
 8006d06:	4606      	mov	r6, r0
 8006d08:	460f      	mov	r7, r1
 8006d0a:	2d00      	cmp	r5, #0
 8006d0c:	d043      	beq.n	8006d96 <__kernel_rem_pio2+0x26e>
 8006d0e:	4650      	mov	r0, sl
 8006d10:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8006e48 <__kernel_rem_pio2+0x320>
 8006d14:	f000 fba0 	bl	8007458 <scalbn>
 8006d18:	4630      	mov	r0, r6
 8006d1a:	4639      	mov	r1, r7
 8006d1c:	ec53 2b10 	vmov	r2, r3, d0
 8006d20:	f7f9 faaa 	bl	8000278 <__aeabi_dsub>
 8006d24:	4606      	mov	r6, r0
 8006d26:	460f      	mov	r7, r1
 8006d28:	e035      	b.n	8006d96 <__kernel_rem_pio2+0x26e>
 8006d2a:	4b4c      	ldr	r3, [pc, #304]	; (8006e5c <__kernel_rem_pio2+0x334>)
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	4630      	mov	r0, r6
 8006d30:	4639      	mov	r1, r7
 8006d32:	f7f9 fc59 	bl	80005e8 <__aeabi_dmul>
 8006d36:	f7f9 ff07 	bl	8000b48 <__aeabi_d2iz>
 8006d3a:	f7f9 fbeb 	bl	8000514 <__aeabi_i2d>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	460b      	mov	r3, r1
 8006d42:	ec43 2b18 	vmov	d8, r2, r3
 8006d46:	4b46      	ldr	r3, [pc, #280]	; (8006e60 <__kernel_rem_pio2+0x338>)
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f7f9 fc4d 	bl	80005e8 <__aeabi_dmul>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	460b      	mov	r3, r1
 8006d52:	4630      	mov	r0, r6
 8006d54:	4639      	mov	r1, r7
 8006d56:	f7f9 fa8f 	bl	8000278 <__aeabi_dsub>
 8006d5a:	f7f9 fef5 	bl	8000b48 <__aeabi_d2iz>
 8006d5e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006d62:	f84b 0b04 	str.w	r0, [fp], #4
 8006d66:	ec51 0b18 	vmov	r0, r1, d8
 8006d6a:	f7f9 fa87 	bl	800027c <__adddf3>
 8006d6e:	f109 39ff 	add.w	r9, r9, #4294967295
 8006d72:	4606      	mov	r6, r0
 8006d74:	460f      	mov	r7, r1
 8006d76:	e75b      	b.n	8006c30 <__kernel_rem_pio2+0x108>
 8006d78:	d106      	bne.n	8006d88 <__kernel_rem_pio2+0x260>
 8006d7a:	1e63      	subs	r3, r4, #1
 8006d7c:	aa0e      	add	r2, sp, #56	; 0x38
 8006d7e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006d82:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8006d86:	e79d      	b.n	8006cc4 <__kernel_rem_pio2+0x19c>
 8006d88:	4b36      	ldr	r3, [pc, #216]	; (8006e64 <__kernel_rem_pio2+0x33c>)
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f7f9 feb2 	bl	8000af4 <__aeabi_dcmpge>
 8006d90:	2800      	cmp	r0, #0
 8006d92:	d13d      	bne.n	8006e10 <__kernel_rem_pio2+0x2e8>
 8006d94:	4683      	mov	fp, r0
 8006d96:	2200      	movs	r2, #0
 8006d98:	2300      	movs	r3, #0
 8006d9a:	4630      	mov	r0, r6
 8006d9c:	4639      	mov	r1, r7
 8006d9e:	f7f9 fe8b 	bl	8000ab8 <__aeabi_dcmpeq>
 8006da2:	2800      	cmp	r0, #0
 8006da4:	f000 80c0 	beq.w	8006f28 <__kernel_rem_pio2+0x400>
 8006da8:	1e65      	subs	r5, r4, #1
 8006daa:	462b      	mov	r3, r5
 8006dac:	2200      	movs	r2, #0
 8006dae:	9902      	ldr	r1, [sp, #8]
 8006db0:	428b      	cmp	r3, r1
 8006db2:	da6c      	bge.n	8006e8e <__kernel_rem_pio2+0x366>
 8006db4:	2a00      	cmp	r2, #0
 8006db6:	f000 8089 	beq.w	8006ecc <__kernel_rem_pio2+0x3a4>
 8006dba:	ab0e      	add	r3, sp, #56	; 0x38
 8006dbc:	f1aa 0a18 	sub.w	sl, sl, #24
 8006dc0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f000 80ad 	beq.w	8006f24 <__kernel_rem_pio2+0x3fc>
 8006dca:	4650      	mov	r0, sl
 8006dcc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8006e48 <__kernel_rem_pio2+0x320>
 8006dd0:	f000 fb42 	bl	8007458 <scalbn>
 8006dd4:	ab9a      	add	r3, sp, #616	; 0x268
 8006dd6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006dda:	ec57 6b10 	vmov	r6, r7, d0
 8006dde:	00ec      	lsls	r4, r5, #3
 8006de0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8006de4:	46aa      	mov	sl, r5
 8006de6:	f1ba 0f00 	cmp.w	sl, #0
 8006dea:	f280 80d6 	bge.w	8006f9a <__kernel_rem_pio2+0x472>
 8006dee:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8006e40 <__kernel_rem_pio2+0x318>
 8006df2:	462e      	mov	r6, r5
 8006df4:	2e00      	cmp	r6, #0
 8006df6:	f2c0 8104 	blt.w	8007002 <__kernel_rem_pio2+0x4da>
 8006dfa:	ab72      	add	r3, sp, #456	; 0x1c8
 8006dfc:	ed8d 8b06 	vstr	d8, [sp, #24]
 8006e00:	f8df a064 	ldr.w	sl, [pc, #100]	; 8006e68 <__kernel_rem_pio2+0x340>
 8006e04:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8006e08:	f04f 0800 	mov.w	r8, #0
 8006e0c:	1baf      	subs	r7, r5, r6
 8006e0e:	e0ea      	b.n	8006fe6 <__kernel_rem_pio2+0x4be>
 8006e10:	f04f 0b02 	mov.w	fp, #2
 8006e14:	e759      	b.n	8006cca <__kernel_rem_pio2+0x1a2>
 8006e16:	f8d8 3000 	ldr.w	r3, [r8]
 8006e1a:	b955      	cbnz	r5, 8006e32 <__kernel_rem_pio2+0x30a>
 8006e1c:	b123      	cbz	r3, 8006e28 <__kernel_rem_pio2+0x300>
 8006e1e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006e22:	f8c8 3000 	str.w	r3, [r8]
 8006e26:	2301      	movs	r3, #1
 8006e28:	3201      	adds	r2, #1
 8006e2a:	f108 0804 	add.w	r8, r8, #4
 8006e2e:	461d      	mov	r5, r3
 8006e30:	e752      	b.n	8006cd8 <__kernel_rem_pio2+0x1b0>
 8006e32:	1acb      	subs	r3, r1, r3
 8006e34:	f8c8 3000 	str.w	r3, [r8]
 8006e38:	462b      	mov	r3, r5
 8006e3a:	e7f5      	b.n	8006e28 <__kernel_rem_pio2+0x300>
 8006e3c:	f3af 8000 	nop.w
	...
 8006e4c:	3ff00000 	.word	0x3ff00000
 8006e50:	08007f50 	.word	0x08007f50
 8006e54:	40200000 	.word	0x40200000
 8006e58:	3ff00000 	.word	0x3ff00000
 8006e5c:	3e700000 	.word	0x3e700000
 8006e60:	41700000 	.word	0x41700000
 8006e64:	3fe00000 	.word	0x3fe00000
 8006e68:	08007f10 	.word	0x08007f10
 8006e6c:	1e62      	subs	r2, r4, #1
 8006e6e:	ab0e      	add	r3, sp, #56	; 0x38
 8006e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e74:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006e78:	a90e      	add	r1, sp, #56	; 0x38
 8006e7a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006e7e:	e739      	b.n	8006cf4 <__kernel_rem_pio2+0x1cc>
 8006e80:	1e62      	subs	r2, r4, #1
 8006e82:	ab0e      	add	r3, sp, #56	; 0x38
 8006e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e88:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006e8c:	e7f4      	b.n	8006e78 <__kernel_rem_pio2+0x350>
 8006e8e:	a90e      	add	r1, sp, #56	; 0x38
 8006e90:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006e94:	3b01      	subs	r3, #1
 8006e96:	430a      	orrs	r2, r1
 8006e98:	e789      	b.n	8006dae <__kernel_rem_pio2+0x286>
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006ea0:	2900      	cmp	r1, #0
 8006ea2:	d0fa      	beq.n	8006e9a <__kernel_rem_pio2+0x372>
 8006ea4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ea6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8006eaa:	446a      	add	r2, sp
 8006eac:	3a98      	subs	r2, #152	; 0x98
 8006eae:	920a      	str	r2, [sp, #40]	; 0x28
 8006eb0:	9a08      	ldr	r2, [sp, #32]
 8006eb2:	18e3      	adds	r3, r4, r3
 8006eb4:	18a5      	adds	r5, r4, r2
 8006eb6:	aa22      	add	r2, sp, #136	; 0x88
 8006eb8:	f104 0801 	add.w	r8, r4, #1
 8006ebc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8006ec0:	9304      	str	r3, [sp, #16]
 8006ec2:	9b04      	ldr	r3, [sp, #16]
 8006ec4:	4543      	cmp	r3, r8
 8006ec6:	da04      	bge.n	8006ed2 <__kernel_rem_pio2+0x3aa>
 8006ec8:	461c      	mov	r4, r3
 8006eca:	e6a3      	b.n	8006c14 <__kernel_rem_pio2+0xec>
 8006ecc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e7e4      	b.n	8006e9c <__kernel_rem_pio2+0x374>
 8006ed2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ed4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006ed8:	f7f9 fb1c 	bl	8000514 <__aeabi_i2d>
 8006edc:	e8e5 0102 	strd	r0, r1, [r5], #8
 8006ee0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ee2:	46ab      	mov	fp, r5
 8006ee4:	461c      	mov	r4, r3
 8006ee6:	f04f 0900 	mov.w	r9, #0
 8006eea:	2600      	movs	r6, #0
 8006eec:	2700      	movs	r7, #0
 8006eee:	9b06      	ldr	r3, [sp, #24]
 8006ef0:	4599      	cmp	r9, r3
 8006ef2:	dd06      	ble.n	8006f02 <__kernel_rem_pio2+0x3da>
 8006ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ef6:	e8e3 6702 	strd	r6, r7, [r3], #8
 8006efa:	f108 0801 	add.w	r8, r8, #1
 8006efe:	930a      	str	r3, [sp, #40]	; 0x28
 8006f00:	e7df      	b.n	8006ec2 <__kernel_rem_pio2+0x39a>
 8006f02:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006f06:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006f0a:	f7f9 fb6d 	bl	80005e8 <__aeabi_dmul>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	460b      	mov	r3, r1
 8006f12:	4630      	mov	r0, r6
 8006f14:	4639      	mov	r1, r7
 8006f16:	f7f9 f9b1 	bl	800027c <__adddf3>
 8006f1a:	f109 0901 	add.w	r9, r9, #1
 8006f1e:	4606      	mov	r6, r0
 8006f20:	460f      	mov	r7, r1
 8006f22:	e7e4      	b.n	8006eee <__kernel_rem_pio2+0x3c6>
 8006f24:	3d01      	subs	r5, #1
 8006f26:	e748      	b.n	8006dba <__kernel_rem_pio2+0x292>
 8006f28:	ec47 6b10 	vmov	d0, r6, r7
 8006f2c:	f1ca 0000 	rsb	r0, sl, #0
 8006f30:	f000 fa92 	bl	8007458 <scalbn>
 8006f34:	ec57 6b10 	vmov	r6, r7, d0
 8006f38:	4ba0      	ldr	r3, [pc, #640]	; (80071bc <__kernel_rem_pio2+0x694>)
 8006f3a:	ee10 0a10 	vmov	r0, s0
 8006f3e:	2200      	movs	r2, #0
 8006f40:	4639      	mov	r1, r7
 8006f42:	f7f9 fdd7 	bl	8000af4 <__aeabi_dcmpge>
 8006f46:	b1f8      	cbz	r0, 8006f88 <__kernel_rem_pio2+0x460>
 8006f48:	4b9d      	ldr	r3, [pc, #628]	; (80071c0 <__kernel_rem_pio2+0x698>)
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	4630      	mov	r0, r6
 8006f4e:	4639      	mov	r1, r7
 8006f50:	f7f9 fb4a 	bl	80005e8 <__aeabi_dmul>
 8006f54:	f7f9 fdf8 	bl	8000b48 <__aeabi_d2iz>
 8006f58:	4680      	mov	r8, r0
 8006f5a:	f7f9 fadb 	bl	8000514 <__aeabi_i2d>
 8006f5e:	4b97      	ldr	r3, [pc, #604]	; (80071bc <__kernel_rem_pio2+0x694>)
 8006f60:	2200      	movs	r2, #0
 8006f62:	f7f9 fb41 	bl	80005e8 <__aeabi_dmul>
 8006f66:	460b      	mov	r3, r1
 8006f68:	4602      	mov	r2, r0
 8006f6a:	4639      	mov	r1, r7
 8006f6c:	4630      	mov	r0, r6
 8006f6e:	f7f9 f983 	bl	8000278 <__aeabi_dsub>
 8006f72:	f7f9 fde9 	bl	8000b48 <__aeabi_d2iz>
 8006f76:	1c65      	adds	r5, r4, #1
 8006f78:	ab0e      	add	r3, sp, #56	; 0x38
 8006f7a:	f10a 0a18 	add.w	sl, sl, #24
 8006f7e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006f82:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006f86:	e720      	b.n	8006dca <__kernel_rem_pio2+0x2a2>
 8006f88:	4630      	mov	r0, r6
 8006f8a:	4639      	mov	r1, r7
 8006f8c:	f7f9 fddc 	bl	8000b48 <__aeabi_d2iz>
 8006f90:	ab0e      	add	r3, sp, #56	; 0x38
 8006f92:	4625      	mov	r5, r4
 8006f94:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006f98:	e717      	b.n	8006dca <__kernel_rem_pio2+0x2a2>
 8006f9a:	ab0e      	add	r3, sp, #56	; 0x38
 8006f9c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8006fa0:	f7f9 fab8 	bl	8000514 <__aeabi_i2d>
 8006fa4:	4632      	mov	r2, r6
 8006fa6:	463b      	mov	r3, r7
 8006fa8:	f7f9 fb1e 	bl	80005e8 <__aeabi_dmul>
 8006fac:	4b84      	ldr	r3, [pc, #528]	; (80071c0 <__kernel_rem_pio2+0x698>)
 8006fae:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	4630      	mov	r0, r6
 8006fb6:	4639      	mov	r1, r7
 8006fb8:	f7f9 fb16 	bl	80005e8 <__aeabi_dmul>
 8006fbc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006fc0:	4606      	mov	r6, r0
 8006fc2:	460f      	mov	r7, r1
 8006fc4:	e70f      	b.n	8006de6 <__kernel_rem_pio2+0x2be>
 8006fc6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8006fca:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8006fce:	f7f9 fb0b 	bl	80005e8 <__aeabi_dmul>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fda:	f7f9 f94f 	bl	800027c <__adddf3>
 8006fde:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006fe2:	f108 0801 	add.w	r8, r8, #1
 8006fe6:	9b02      	ldr	r3, [sp, #8]
 8006fe8:	4598      	cmp	r8, r3
 8006fea:	dc01      	bgt.n	8006ff0 <__kernel_rem_pio2+0x4c8>
 8006fec:	45b8      	cmp	r8, r7
 8006fee:	ddea      	ble.n	8006fc6 <__kernel_rem_pio2+0x49e>
 8006ff0:	ed9d 7b06 	vldr	d7, [sp, #24]
 8006ff4:	ab4a      	add	r3, sp, #296	; 0x128
 8006ff6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006ffa:	ed87 7b00 	vstr	d7, [r7]
 8006ffe:	3e01      	subs	r6, #1
 8007000:	e6f8      	b.n	8006df4 <__kernel_rem_pio2+0x2cc>
 8007002:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007004:	2b02      	cmp	r3, #2
 8007006:	dc0b      	bgt.n	8007020 <__kernel_rem_pio2+0x4f8>
 8007008:	2b00      	cmp	r3, #0
 800700a:	dc35      	bgt.n	8007078 <__kernel_rem_pio2+0x550>
 800700c:	d059      	beq.n	80070c2 <__kernel_rem_pio2+0x59a>
 800700e:	9b04      	ldr	r3, [sp, #16]
 8007010:	f003 0007 	and.w	r0, r3, #7
 8007014:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007018:	ecbd 8b02 	vpop	{d8}
 800701c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007020:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007022:	2b03      	cmp	r3, #3
 8007024:	d1f3      	bne.n	800700e <__kernel_rem_pio2+0x4e6>
 8007026:	ab4a      	add	r3, sp, #296	; 0x128
 8007028:	4423      	add	r3, r4
 800702a:	9306      	str	r3, [sp, #24]
 800702c:	461c      	mov	r4, r3
 800702e:	469a      	mov	sl, r3
 8007030:	9502      	str	r5, [sp, #8]
 8007032:	9b02      	ldr	r3, [sp, #8]
 8007034:	2b00      	cmp	r3, #0
 8007036:	f1aa 0a08 	sub.w	sl, sl, #8
 800703a:	dc6b      	bgt.n	8007114 <__kernel_rem_pio2+0x5ec>
 800703c:	46aa      	mov	sl, r5
 800703e:	f1ba 0f01 	cmp.w	sl, #1
 8007042:	f1a4 0408 	sub.w	r4, r4, #8
 8007046:	f300 8085 	bgt.w	8007154 <__kernel_rem_pio2+0x62c>
 800704a:	9c06      	ldr	r4, [sp, #24]
 800704c:	2000      	movs	r0, #0
 800704e:	3408      	adds	r4, #8
 8007050:	2100      	movs	r1, #0
 8007052:	2d01      	cmp	r5, #1
 8007054:	f300 809d 	bgt.w	8007192 <__kernel_rem_pio2+0x66a>
 8007058:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800705c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8007060:	f1bb 0f00 	cmp.w	fp, #0
 8007064:	f040 809b 	bne.w	800719e <__kernel_rem_pio2+0x676>
 8007068:	9b01      	ldr	r3, [sp, #4]
 800706a:	e9c3 5600 	strd	r5, r6, [r3]
 800706e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007072:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007076:	e7ca      	b.n	800700e <__kernel_rem_pio2+0x4e6>
 8007078:	3408      	adds	r4, #8
 800707a:	ab4a      	add	r3, sp, #296	; 0x128
 800707c:	441c      	add	r4, r3
 800707e:	462e      	mov	r6, r5
 8007080:	2000      	movs	r0, #0
 8007082:	2100      	movs	r1, #0
 8007084:	2e00      	cmp	r6, #0
 8007086:	da36      	bge.n	80070f6 <__kernel_rem_pio2+0x5ce>
 8007088:	f1bb 0f00 	cmp.w	fp, #0
 800708c:	d039      	beq.n	8007102 <__kernel_rem_pio2+0x5da>
 800708e:	4602      	mov	r2, r0
 8007090:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007094:	9c01      	ldr	r4, [sp, #4]
 8007096:	e9c4 2300 	strd	r2, r3, [r4]
 800709a:	4602      	mov	r2, r0
 800709c:	460b      	mov	r3, r1
 800709e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80070a2:	f7f9 f8e9 	bl	8000278 <__aeabi_dsub>
 80070a6:	ae4c      	add	r6, sp, #304	; 0x130
 80070a8:	2401      	movs	r4, #1
 80070aa:	42a5      	cmp	r5, r4
 80070ac:	da2c      	bge.n	8007108 <__kernel_rem_pio2+0x5e0>
 80070ae:	f1bb 0f00 	cmp.w	fp, #0
 80070b2:	d002      	beq.n	80070ba <__kernel_rem_pio2+0x592>
 80070b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80070b8:	4619      	mov	r1, r3
 80070ba:	9b01      	ldr	r3, [sp, #4]
 80070bc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80070c0:	e7a5      	b.n	800700e <__kernel_rem_pio2+0x4e6>
 80070c2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80070c6:	eb0d 0403 	add.w	r4, sp, r3
 80070ca:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80070ce:	2000      	movs	r0, #0
 80070d0:	2100      	movs	r1, #0
 80070d2:	2d00      	cmp	r5, #0
 80070d4:	da09      	bge.n	80070ea <__kernel_rem_pio2+0x5c2>
 80070d6:	f1bb 0f00 	cmp.w	fp, #0
 80070da:	d002      	beq.n	80070e2 <__kernel_rem_pio2+0x5ba>
 80070dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80070e0:	4619      	mov	r1, r3
 80070e2:	9b01      	ldr	r3, [sp, #4]
 80070e4:	e9c3 0100 	strd	r0, r1, [r3]
 80070e8:	e791      	b.n	800700e <__kernel_rem_pio2+0x4e6>
 80070ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80070ee:	f7f9 f8c5 	bl	800027c <__adddf3>
 80070f2:	3d01      	subs	r5, #1
 80070f4:	e7ed      	b.n	80070d2 <__kernel_rem_pio2+0x5aa>
 80070f6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80070fa:	f7f9 f8bf 	bl	800027c <__adddf3>
 80070fe:	3e01      	subs	r6, #1
 8007100:	e7c0      	b.n	8007084 <__kernel_rem_pio2+0x55c>
 8007102:	4602      	mov	r2, r0
 8007104:	460b      	mov	r3, r1
 8007106:	e7c5      	b.n	8007094 <__kernel_rem_pio2+0x56c>
 8007108:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800710c:	f7f9 f8b6 	bl	800027c <__adddf3>
 8007110:	3401      	adds	r4, #1
 8007112:	e7ca      	b.n	80070aa <__kernel_rem_pio2+0x582>
 8007114:	e9da 8900 	ldrd	r8, r9, [sl]
 8007118:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800711c:	9b02      	ldr	r3, [sp, #8]
 800711e:	3b01      	subs	r3, #1
 8007120:	9302      	str	r3, [sp, #8]
 8007122:	4632      	mov	r2, r6
 8007124:	463b      	mov	r3, r7
 8007126:	4640      	mov	r0, r8
 8007128:	4649      	mov	r1, r9
 800712a:	f7f9 f8a7 	bl	800027c <__adddf3>
 800712e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007132:	4602      	mov	r2, r0
 8007134:	460b      	mov	r3, r1
 8007136:	4640      	mov	r0, r8
 8007138:	4649      	mov	r1, r9
 800713a:	f7f9 f89d 	bl	8000278 <__aeabi_dsub>
 800713e:	4632      	mov	r2, r6
 8007140:	463b      	mov	r3, r7
 8007142:	f7f9 f89b 	bl	800027c <__adddf3>
 8007146:	ed9d 7b08 	vldr	d7, [sp, #32]
 800714a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800714e:	ed8a 7b00 	vstr	d7, [sl]
 8007152:	e76e      	b.n	8007032 <__kernel_rem_pio2+0x50a>
 8007154:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007158:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800715c:	4640      	mov	r0, r8
 800715e:	4632      	mov	r2, r6
 8007160:	463b      	mov	r3, r7
 8007162:	4649      	mov	r1, r9
 8007164:	f7f9 f88a 	bl	800027c <__adddf3>
 8007168:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800716c:	4602      	mov	r2, r0
 800716e:	460b      	mov	r3, r1
 8007170:	4640      	mov	r0, r8
 8007172:	4649      	mov	r1, r9
 8007174:	f7f9 f880 	bl	8000278 <__aeabi_dsub>
 8007178:	4632      	mov	r2, r6
 800717a:	463b      	mov	r3, r7
 800717c:	f7f9 f87e 	bl	800027c <__adddf3>
 8007180:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007184:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007188:	ed84 7b00 	vstr	d7, [r4]
 800718c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007190:	e755      	b.n	800703e <__kernel_rem_pio2+0x516>
 8007192:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007196:	f7f9 f871 	bl	800027c <__adddf3>
 800719a:	3d01      	subs	r5, #1
 800719c:	e759      	b.n	8007052 <__kernel_rem_pio2+0x52a>
 800719e:	9b01      	ldr	r3, [sp, #4]
 80071a0:	9a01      	ldr	r2, [sp, #4]
 80071a2:	601d      	str	r5, [r3, #0]
 80071a4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80071a8:	605c      	str	r4, [r3, #4]
 80071aa:	609f      	str	r7, [r3, #8]
 80071ac:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80071b0:	60d3      	str	r3, [r2, #12]
 80071b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071b6:	6110      	str	r0, [r2, #16]
 80071b8:	6153      	str	r3, [r2, #20]
 80071ba:	e728      	b.n	800700e <__kernel_rem_pio2+0x4e6>
 80071bc:	41700000 	.word	0x41700000
 80071c0:	3e700000 	.word	0x3e700000
 80071c4:	00000000 	.word	0x00000000

080071c8 <__kernel_sin>:
 80071c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071cc:	ed2d 8b04 	vpush	{d8-d9}
 80071d0:	eeb0 8a41 	vmov.f32	s16, s2
 80071d4:	eef0 8a61 	vmov.f32	s17, s3
 80071d8:	ec55 4b10 	vmov	r4, r5, d0
 80071dc:	b083      	sub	sp, #12
 80071de:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80071e2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80071e6:	9001      	str	r0, [sp, #4]
 80071e8:	da06      	bge.n	80071f8 <__kernel_sin+0x30>
 80071ea:	ee10 0a10 	vmov	r0, s0
 80071ee:	4629      	mov	r1, r5
 80071f0:	f7f9 fcaa 	bl	8000b48 <__aeabi_d2iz>
 80071f4:	2800      	cmp	r0, #0
 80071f6:	d051      	beq.n	800729c <__kernel_sin+0xd4>
 80071f8:	4622      	mov	r2, r4
 80071fa:	462b      	mov	r3, r5
 80071fc:	4620      	mov	r0, r4
 80071fe:	4629      	mov	r1, r5
 8007200:	f7f9 f9f2 	bl	80005e8 <__aeabi_dmul>
 8007204:	4682      	mov	sl, r0
 8007206:	468b      	mov	fp, r1
 8007208:	4602      	mov	r2, r0
 800720a:	460b      	mov	r3, r1
 800720c:	4620      	mov	r0, r4
 800720e:	4629      	mov	r1, r5
 8007210:	f7f9 f9ea 	bl	80005e8 <__aeabi_dmul>
 8007214:	a341      	add	r3, pc, #260	; (adr r3, 800731c <__kernel_sin+0x154>)
 8007216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721a:	4680      	mov	r8, r0
 800721c:	4689      	mov	r9, r1
 800721e:	4650      	mov	r0, sl
 8007220:	4659      	mov	r1, fp
 8007222:	f7f9 f9e1 	bl	80005e8 <__aeabi_dmul>
 8007226:	a33f      	add	r3, pc, #252	; (adr r3, 8007324 <__kernel_sin+0x15c>)
 8007228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722c:	f7f9 f824 	bl	8000278 <__aeabi_dsub>
 8007230:	4652      	mov	r2, sl
 8007232:	465b      	mov	r3, fp
 8007234:	f7f9 f9d8 	bl	80005e8 <__aeabi_dmul>
 8007238:	a33c      	add	r3, pc, #240	; (adr r3, 800732c <__kernel_sin+0x164>)
 800723a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723e:	f7f9 f81d 	bl	800027c <__adddf3>
 8007242:	4652      	mov	r2, sl
 8007244:	465b      	mov	r3, fp
 8007246:	f7f9 f9cf 	bl	80005e8 <__aeabi_dmul>
 800724a:	a33a      	add	r3, pc, #232	; (adr r3, 8007334 <__kernel_sin+0x16c>)
 800724c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007250:	f7f9 f812 	bl	8000278 <__aeabi_dsub>
 8007254:	4652      	mov	r2, sl
 8007256:	465b      	mov	r3, fp
 8007258:	f7f9 f9c6 	bl	80005e8 <__aeabi_dmul>
 800725c:	a337      	add	r3, pc, #220	; (adr r3, 800733c <__kernel_sin+0x174>)
 800725e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007262:	f7f9 f80b 	bl	800027c <__adddf3>
 8007266:	9b01      	ldr	r3, [sp, #4]
 8007268:	4606      	mov	r6, r0
 800726a:	460f      	mov	r7, r1
 800726c:	b9eb      	cbnz	r3, 80072aa <__kernel_sin+0xe2>
 800726e:	4602      	mov	r2, r0
 8007270:	460b      	mov	r3, r1
 8007272:	4650      	mov	r0, sl
 8007274:	4659      	mov	r1, fp
 8007276:	f7f9 f9b7 	bl	80005e8 <__aeabi_dmul>
 800727a:	a325      	add	r3, pc, #148	; (adr r3, 8007310 <__kernel_sin+0x148>)
 800727c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007280:	f7f8 fffa 	bl	8000278 <__aeabi_dsub>
 8007284:	4642      	mov	r2, r8
 8007286:	464b      	mov	r3, r9
 8007288:	f7f9 f9ae 	bl	80005e8 <__aeabi_dmul>
 800728c:	4602      	mov	r2, r0
 800728e:	460b      	mov	r3, r1
 8007290:	4620      	mov	r0, r4
 8007292:	4629      	mov	r1, r5
 8007294:	f7f8 fff2 	bl	800027c <__adddf3>
 8007298:	4604      	mov	r4, r0
 800729a:	460d      	mov	r5, r1
 800729c:	ec45 4b10 	vmov	d0, r4, r5
 80072a0:	b003      	add	sp, #12
 80072a2:	ecbd 8b04 	vpop	{d8-d9}
 80072a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072aa:	4b1b      	ldr	r3, [pc, #108]	; (8007318 <__kernel_sin+0x150>)
 80072ac:	ec51 0b18 	vmov	r0, r1, d8
 80072b0:	2200      	movs	r2, #0
 80072b2:	f7f9 f999 	bl	80005e8 <__aeabi_dmul>
 80072b6:	4632      	mov	r2, r6
 80072b8:	ec41 0b19 	vmov	d9, r0, r1
 80072bc:	463b      	mov	r3, r7
 80072be:	4640      	mov	r0, r8
 80072c0:	4649      	mov	r1, r9
 80072c2:	f7f9 f991 	bl	80005e8 <__aeabi_dmul>
 80072c6:	4602      	mov	r2, r0
 80072c8:	460b      	mov	r3, r1
 80072ca:	ec51 0b19 	vmov	r0, r1, d9
 80072ce:	f7f8 ffd3 	bl	8000278 <__aeabi_dsub>
 80072d2:	4652      	mov	r2, sl
 80072d4:	465b      	mov	r3, fp
 80072d6:	f7f9 f987 	bl	80005e8 <__aeabi_dmul>
 80072da:	ec53 2b18 	vmov	r2, r3, d8
 80072de:	f7f8 ffcb 	bl	8000278 <__aeabi_dsub>
 80072e2:	a30b      	add	r3, pc, #44	; (adr r3, 8007310 <__kernel_sin+0x148>)
 80072e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e8:	4606      	mov	r6, r0
 80072ea:	460f      	mov	r7, r1
 80072ec:	4640      	mov	r0, r8
 80072ee:	4649      	mov	r1, r9
 80072f0:	f7f9 f97a 	bl	80005e8 <__aeabi_dmul>
 80072f4:	4602      	mov	r2, r0
 80072f6:	460b      	mov	r3, r1
 80072f8:	4630      	mov	r0, r6
 80072fa:	4639      	mov	r1, r7
 80072fc:	f7f8 ffbe 	bl	800027c <__adddf3>
 8007300:	4602      	mov	r2, r0
 8007302:	460b      	mov	r3, r1
 8007304:	4620      	mov	r0, r4
 8007306:	4629      	mov	r1, r5
 8007308:	f7f8 ffb6 	bl	8000278 <__aeabi_dsub>
 800730c:	e7c4      	b.n	8007298 <__kernel_sin+0xd0>
 800730e:	bf00      	nop
 8007310:	55555549 	.word	0x55555549
 8007314:	3fc55555 	.word	0x3fc55555
 8007318:	3fe00000 	.word	0x3fe00000
 800731c:	5acfd57c 	.word	0x5acfd57c
 8007320:	3de5d93a 	.word	0x3de5d93a
 8007324:	8a2b9ceb 	.word	0x8a2b9ceb
 8007328:	3e5ae5e6 	.word	0x3e5ae5e6
 800732c:	57b1fe7d 	.word	0x57b1fe7d
 8007330:	3ec71de3 	.word	0x3ec71de3
 8007334:	19c161d5 	.word	0x19c161d5
 8007338:	3f2a01a0 	.word	0x3f2a01a0
 800733c:	1110f8a6 	.word	0x1110f8a6
 8007340:	3f811111 	.word	0x3f811111

08007344 <fabs>:
 8007344:	ec51 0b10 	vmov	r0, r1, d0
 8007348:	ee10 2a10 	vmov	r2, s0
 800734c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007350:	ec43 2b10 	vmov	d0, r2, r3
 8007354:	4770      	bx	lr
	...

08007358 <floor>:
 8007358:	ec51 0b10 	vmov	r0, r1, d0
 800735c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007360:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007364:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007368:	2e13      	cmp	r6, #19
 800736a:	ee10 5a10 	vmov	r5, s0
 800736e:	ee10 8a10 	vmov	r8, s0
 8007372:	460c      	mov	r4, r1
 8007374:	dc32      	bgt.n	80073dc <floor+0x84>
 8007376:	2e00      	cmp	r6, #0
 8007378:	da14      	bge.n	80073a4 <floor+0x4c>
 800737a:	a333      	add	r3, pc, #204	; (adr r3, 8007448 <floor+0xf0>)
 800737c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007380:	f7f8 ff7c 	bl	800027c <__adddf3>
 8007384:	2200      	movs	r2, #0
 8007386:	2300      	movs	r3, #0
 8007388:	f7f9 fbbe 	bl	8000b08 <__aeabi_dcmpgt>
 800738c:	b138      	cbz	r0, 800739e <floor+0x46>
 800738e:	2c00      	cmp	r4, #0
 8007390:	da57      	bge.n	8007442 <floor+0xea>
 8007392:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007396:	431d      	orrs	r5, r3
 8007398:	d001      	beq.n	800739e <floor+0x46>
 800739a:	4c2d      	ldr	r4, [pc, #180]	; (8007450 <floor+0xf8>)
 800739c:	2500      	movs	r5, #0
 800739e:	4621      	mov	r1, r4
 80073a0:	4628      	mov	r0, r5
 80073a2:	e025      	b.n	80073f0 <floor+0x98>
 80073a4:	4f2b      	ldr	r7, [pc, #172]	; (8007454 <floor+0xfc>)
 80073a6:	4137      	asrs	r7, r6
 80073a8:	ea01 0307 	and.w	r3, r1, r7
 80073ac:	4303      	orrs	r3, r0
 80073ae:	d01f      	beq.n	80073f0 <floor+0x98>
 80073b0:	a325      	add	r3, pc, #148	; (adr r3, 8007448 <floor+0xf0>)
 80073b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b6:	f7f8 ff61 	bl	800027c <__adddf3>
 80073ba:	2200      	movs	r2, #0
 80073bc:	2300      	movs	r3, #0
 80073be:	f7f9 fba3 	bl	8000b08 <__aeabi_dcmpgt>
 80073c2:	2800      	cmp	r0, #0
 80073c4:	d0eb      	beq.n	800739e <floor+0x46>
 80073c6:	2c00      	cmp	r4, #0
 80073c8:	bfbe      	ittt	lt
 80073ca:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80073ce:	fa43 f606 	asrlt.w	r6, r3, r6
 80073d2:	19a4      	addlt	r4, r4, r6
 80073d4:	ea24 0407 	bic.w	r4, r4, r7
 80073d8:	2500      	movs	r5, #0
 80073da:	e7e0      	b.n	800739e <floor+0x46>
 80073dc:	2e33      	cmp	r6, #51	; 0x33
 80073de:	dd0b      	ble.n	80073f8 <floor+0xa0>
 80073e0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80073e4:	d104      	bne.n	80073f0 <floor+0x98>
 80073e6:	ee10 2a10 	vmov	r2, s0
 80073ea:	460b      	mov	r3, r1
 80073ec:	f7f8 ff46 	bl	800027c <__adddf3>
 80073f0:	ec41 0b10 	vmov	d0, r0, r1
 80073f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073f8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80073fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007400:	fa23 f707 	lsr.w	r7, r3, r7
 8007404:	4207      	tst	r7, r0
 8007406:	d0f3      	beq.n	80073f0 <floor+0x98>
 8007408:	a30f      	add	r3, pc, #60	; (adr r3, 8007448 <floor+0xf0>)
 800740a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740e:	f7f8 ff35 	bl	800027c <__adddf3>
 8007412:	2200      	movs	r2, #0
 8007414:	2300      	movs	r3, #0
 8007416:	f7f9 fb77 	bl	8000b08 <__aeabi_dcmpgt>
 800741a:	2800      	cmp	r0, #0
 800741c:	d0bf      	beq.n	800739e <floor+0x46>
 800741e:	2c00      	cmp	r4, #0
 8007420:	da02      	bge.n	8007428 <floor+0xd0>
 8007422:	2e14      	cmp	r6, #20
 8007424:	d103      	bne.n	800742e <floor+0xd6>
 8007426:	3401      	adds	r4, #1
 8007428:	ea25 0507 	bic.w	r5, r5, r7
 800742c:	e7b7      	b.n	800739e <floor+0x46>
 800742e:	2301      	movs	r3, #1
 8007430:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007434:	fa03 f606 	lsl.w	r6, r3, r6
 8007438:	4435      	add	r5, r6
 800743a:	4545      	cmp	r5, r8
 800743c:	bf38      	it	cc
 800743e:	18e4      	addcc	r4, r4, r3
 8007440:	e7f2      	b.n	8007428 <floor+0xd0>
 8007442:	2500      	movs	r5, #0
 8007444:	462c      	mov	r4, r5
 8007446:	e7aa      	b.n	800739e <floor+0x46>
 8007448:	8800759c 	.word	0x8800759c
 800744c:	7e37e43c 	.word	0x7e37e43c
 8007450:	bff00000 	.word	0xbff00000
 8007454:	000fffff 	.word	0x000fffff

08007458 <scalbn>:
 8007458:	b570      	push	{r4, r5, r6, lr}
 800745a:	ec55 4b10 	vmov	r4, r5, d0
 800745e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007462:	4606      	mov	r6, r0
 8007464:	462b      	mov	r3, r5
 8007466:	b99a      	cbnz	r2, 8007490 <scalbn+0x38>
 8007468:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800746c:	4323      	orrs	r3, r4
 800746e:	d036      	beq.n	80074de <scalbn+0x86>
 8007470:	4b39      	ldr	r3, [pc, #228]	; (8007558 <scalbn+0x100>)
 8007472:	4629      	mov	r1, r5
 8007474:	ee10 0a10 	vmov	r0, s0
 8007478:	2200      	movs	r2, #0
 800747a:	f7f9 f8b5 	bl	80005e8 <__aeabi_dmul>
 800747e:	4b37      	ldr	r3, [pc, #220]	; (800755c <scalbn+0x104>)
 8007480:	429e      	cmp	r6, r3
 8007482:	4604      	mov	r4, r0
 8007484:	460d      	mov	r5, r1
 8007486:	da10      	bge.n	80074aa <scalbn+0x52>
 8007488:	a32b      	add	r3, pc, #172	; (adr r3, 8007538 <scalbn+0xe0>)
 800748a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748e:	e03a      	b.n	8007506 <scalbn+0xae>
 8007490:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007494:	428a      	cmp	r2, r1
 8007496:	d10c      	bne.n	80074b2 <scalbn+0x5a>
 8007498:	ee10 2a10 	vmov	r2, s0
 800749c:	4620      	mov	r0, r4
 800749e:	4629      	mov	r1, r5
 80074a0:	f7f8 feec 	bl	800027c <__adddf3>
 80074a4:	4604      	mov	r4, r0
 80074a6:	460d      	mov	r5, r1
 80074a8:	e019      	b.n	80074de <scalbn+0x86>
 80074aa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80074ae:	460b      	mov	r3, r1
 80074b0:	3a36      	subs	r2, #54	; 0x36
 80074b2:	4432      	add	r2, r6
 80074b4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80074b8:	428a      	cmp	r2, r1
 80074ba:	dd08      	ble.n	80074ce <scalbn+0x76>
 80074bc:	2d00      	cmp	r5, #0
 80074be:	a120      	add	r1, pc, #128	; (adr r1, 8007540 <scalbn+0xe8>)
 80074c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074c4:	da1c      	bge.n	8007500 <scalbn+0xa8>
 80074c6:	a120      	add	r1, pc, #128	; (adr r1, 8007548 <scalbn+0xf0>)
 80074c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074cc:	e018      	b.n	8007500 <scalbn+0xa8>
 80074ce:	2a00      	cmp	r2, #0
 80074d0:	dd08      	ble.n	80074e4 <scalbn+0x8c>
 80074d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80074d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80074da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80074de:	ec45 4b10 	vmov	d0, r4, r5
 80074e2:	bd70      	pop	{r4, r5, r6, pc}
 80074e4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80074e8:	da19      	bge.n	800751e <scalbn+0xc6>
 80074ea:	f24c 3350 	movw	r3, #50000	; 0xc350
 80074ee:	429e      	cmp	r6, r3
 80074f0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80074f4:	dd0a      	ble.n	800750c <scalbn+0xb4>
 80074f6:	a112      	add	r1, pc, #72	; (adr r1, 8007540 <scalbn+0xe8>)
 80074f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1e2      	bne.n	80074c6 <scalbn+0x6e>
 8007500:	a30f      	add	r3, pc, #60	; (adr r3, 8007540 <scalbn+0xe8>)
 8007502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007506:	f7f9 f86f 	bl	80005e8 <__aeabi_dmul>
 800750a:	e7cb      	b.n	80074a4 <scalbn+0x4c>
 800750c:	a10a      	add	r1, pc, #40	; (adr r1, 8007538 <scalbn+0xe0>)
 800750e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d0b8      	beq.n	8007488 <scalbn+0x30>
 8007516:	a10e      	add	r1, pc, #56	; (adr r1, 8007550 <scalbn+0xf8>)
 8007518:	e9d1 0100 	ldrd	r0, r1, [r1]
 800751c:	e7b4      	b.n	8007488 <scalbn+0x30>
 800751e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007522:	3236      	adds	r2, #54	; 0x36
 8007524:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007528:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800752c:	4620      	mov	r0, r4
 800752e:	4b0c      	ldr	r3, [pc, #48]	; (8007560 <scalbn+0x108>)
 8007530:	2200      	movs	r2, #0
 8007532:	e7e8      	b.n	8007506 <scalbn+0xae>
 8007534:	f3af 8000 	nop.w
 8007538:	c2f8f359 	.word	0xc2f8f359
 800753c:	01a56e1f 	.word	0x01a56e1f
 8007540:	8800759c 	.word	0x8800759c
 8007544:	7e37e43c 	.word	0x7e37e43c
 8007548:	8800759c 	.word	0x8800759c
 800754c:	fe37e43c 	.word	0xfe37e43c
 8007550:	c2f8f359 	.word	0xc2f8f359
 8007554:	81a56e1f 	.word	0x81a56e1f
 8007558:	43500000 	.word	0x43500000
 800755c:	ffff3cb0 	.word	0xffff3cb0
 8007560:	3c900000 	.word	0x3c900000

08007564 <_init>:
 8007564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007566:	bf00      	nop
 8007568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800756a:	bc08      	pop	{r3}
 800756c:	469e      	mov	lr, r3
 800756e:	4770      	bx	lr

08007570 <_fini>:
 8007570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007572:	bf00      	nop
 8007574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007576:	bc08      	pop	{r3}
 8007578:	469e      	mov	lr, r3
 800757a:	4770      	bx	lr
