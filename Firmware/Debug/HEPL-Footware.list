
HEPL-Footware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08007df8  08007df8  00017df8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081f0  080081f0  00020494  2**0
                  CONTENTS
  4 .ARM          00000000  080081f0  080081f0  00020494  2**0
                  CONTENTS
  5 .preinit_array 00000000  080081f0  080081f0  00020494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081f0  080081f0  000181f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081f4  080081f4  000181f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000494  20000000  080081f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000394  20000494  0800868c  00020494  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000828  0800868c  00020828  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020494  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001503e  00000000  00000000  000204c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ccd  00000000  00000000  00035502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000dc1e  00000000  00000000  000381cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd8  00000000  00000000  00045df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f30  00000000  00000000  00046dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000257a7  00000000  00000000  00047cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001903a  00000000  00000000  0006d49f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9f89  00000000  00000000  000864d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00160462  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003990  00000000  00000000  001604b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000494 	.word	0x20000494
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ddc 	.word	0x08007ddc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000498 	.word	0x20000498
 80001cc:	08007ddc 	.word	0x08007ddc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <IMU_convertAccel>:
		IMU_writeRegister(IMU, buf, 1);
	}
}

float IMU_convertAccel(uint8_t H_byte, uint8_t L_byte) {
	int16_t reading = (int16_t)(H_byte << 8) + L_byte;
 8000c38:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8000c3c:	b209      	sxth	r1, r1

	// (Full-scale val / Max LSB val) * reading (LSB) = Accel (g)
	return XL_SCALE_FACTOR * reading;
 8000c3e:	ee07 1a90 	vmov	s15, r1
 8000c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8000c46:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8000c50 <IMU_convertAccel+0x18>
 8000c4a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8000c4e:	4770      	bx	lr
 8000c50:	3b1cd806 	.word	0x3b1cd806

08000c54 <IMU_convertGyro>:

float IMU_convertGyro(uint8_t H_byte, uint8_t L_byte) {
	int16_t reading = (int16_t)(H_byte << 8) + L_byte;
 8000c54:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8000c58:	b209      	sxth	r1, r1

	// (Full-scale val / Max LSB val) * reading (LSB) = Accel (g)
	return GYRO_SCALE_FACTOR * reading;
 8000c5a:	ee07 1a90 	vmov	s15, r1
 8000c5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8000c62:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8000c6c <IMU_convertGyro+0x18>
 8000c66:	ee27 0a80 	vmul.f32	s0, s15, s0
 8000c6a:	4770      	bx	lr
 8000c6c:	3d0f5dff 	.word	0x3d0f5dff

08000c70 <IMU_chipSelect>:
	__enable_irq();

	return status;
}

void IMU_chipSelect(uint8_t chipID) {
 8000c70:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOB, (1 << chipID), 0); // PB0,1,2 for IMU 0,1,2
 8000c72:	2101      	movs	r1, #1
 8000c74:	4081      	lsls	r1, r0
 8000c76:	2200      	movs	r2, #0
 8000c78:	b289      	uxth	r1, r1
 8000c7a:	4802      	ldr	r0, [pc, #8]	; (8000c84 <IMU_chipSelect+0x14>)
 8000c7c:	f002 f85a 	bl	8002d34 <HAL_GPIO_WritePin>
}
 8000c80:	bd08      	pop	{r3, pc}
 8000c82:	bf00      	nop
 8000c84:	48000400 	.word	0x48000400

08000c88 <IMU_chipRelease>:

void IMU_chipRelease(uint8_t chipID) {
 8000c88:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOB, (1 << chipID), 1); // PB0,1,2 for IMU 0,1,2
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	fa02 f100 	lsl.w	r1, r2, r0
 8000c90:	b289      	uxth	r1, r1
 8000c92:	4802      	ldr	r0, [pc, #8]	; (8000c9c <IMU_chipRelease+0x14>)
 8000c94:	f002 f84e 	bl	8002d34 <HAL_GPIO_WritePin>
}
 8000c98:	bd08      	pop	{r3, pc}
 8000c9a:	bf00      	nop
 8000c9c:	48000400 	.word	0x48000400

08000ca0 <IMU_readRegister>:
HAL_StatusTypeDef IMU_readRegister(IMU* IMU, uint8_t reg_addr, uint8_t* rx_buf, int num_bytes) {
 8000ca0:	b570      	push	{r4, r5, r6, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	4604      	mov	r4, r0
 8000ca6:	4615      	mov	r5, r2
 8000ca8:	461e      	mov	r6, r3
	uint8_t reg_buffer[1] = {reg_addr | 0x80};
 8000caa:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8000cae:	f88d 1004 	strb.w	r1, [sp, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb2:	b672      	cpsid	i
	IMU_chipSelect(IMU->chipID);
 8000cb4:	7f00      	ldrb	r0, [r0, #28]
 8000cb6:	f7ff ffdb 	bl	8000c70 <IMU_chipSelect>
	HAL_SPI_Transmit(IMU->hspi, (uint8_t *)reg_buffer, 1, SPI_TIMEOUT);
 8000cba:	2301      	movs	r3, #1
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	a901      	add	r1, sp, #4
 8000cc0:	6820      	ldr	r0, [r4, #0]
 8000cc2:	f002 fefc 	bl	8003abe <HAL_SPI_Transmit>
	status = HAL_SPI_Receive(IMU->hspi, (uint8_t *)rx_buf, num_bytes, SPI_TIMEOUT);
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	b2b2      	uxth	r2, r6
 8000cca:	4629      	mov	r1, r5
 8000ccc:	6820      	ldr	r0, [r4, #0]
 8000cce:	f003 f966 	bl	8003f9e <HAL_SPI_Receive>
 8000cd2:	4605      	mov	r5, r0
	IMU_chipRelease(IMU->chipID);
 8000cd4:	7f20      	ldrb	r0, [r4, #28]
 8000cd6:	f7ff ffd7 	bl	8000c88 <IMU_chipRelease>
  __ASM volatile ("cpsie i" : : : "memory");
 8000cda:	b662      	cpsie	i
}
 8000cdc:	4628      	mov	r0, r5
 8000cde:	b002      	add	sp, #8
 8000ce0:	bd70      	pop	{r4, r5, r6, pc}

08000ce2 <IMU_readSensorData>:
void IMU_readSensorData(IMU* IMU, SensorData* data) {
 8000ce2:	b530      	push	{r4, r5, lr}
 8000ce4:	b085      	sub	sp, #20
 8000ce6:	4605      	mov	r5, r0
 8000ce8:	460c      	mov	r4, r1
	IMU_readRegister(IMU, OUTX_L_G, buf, 12);
 8000cea:	230c      	movs	r3, #12
 8000cec:	aa01      	add	r2, sp, #4
 8000cee:	2122      	movs	r1, #34	; 0x22
 8000cf0:	f7ff ffd6 	bl	8000ca0 <IMU_readRegister>
	data->G_X = IMU_convertGyro(buf[1], buf[0]) - IMU->GX_offset;
 8000cf4:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8000cf8:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8000cfc:	f7ff ffaa 	bl	8000c54 <IMU_convertGyro>
 8000d00:	edd5 7a04 	vldr	s15, [r5, #16]
 8000d04:	ee30 0a67 	vsub.f32	s0, s0, s15
 8000d08:	ed84 0a03 	vstr	s0, [r4, #12]
	data->G_Y = IMU_convertGyro(buf[3], buf[2]) - IMU->GY_offset;
 8000d0c:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8000d10:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000d14:	f7ff ff9e 	bl	8000c54 <IMU_convertGyro>
 8000d18:	edd5 7a05 	vldr	s15, [r5, #20]
 8000d1c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8000d20:	ed84 0a04 	vstr	s0, [r4, #16]
	data->G_Z = IMU_convertGyro(buf[5], buf[4]) - IMU->GZ_offset;
 8000d24:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8000d28:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8000d2c:	f7ff ff92 	bl	8000c54 <IMU_convertGyro>
 8000d30:	edd5 7a06 	vldr	s15, [r5, #24]
 8000d34:	ee30 0a67 	vsub.f32	s0, s0, s15
 8000d38:	ed84 0a05 	vstr	s0, [r4, #20]
	data->XL_X = IMU_convertAccel(buf[7], buf[6]) + IMU->X_offset;
 8000d3c:	f89d 100a 	ldrb.w	r1, [sp, #10]
 8000d40:	f89d 000b 	ldrb.w	r0, [sp, #11]
 8000d44:	f7ff ff78 	bl	8000c38 <IMU_convertAccel>
 8000d48:	edd5 7a01 	vldr	s15, [r5, #4]
 8000d4c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000d50:	ed84 0a00 	vstr	s0, [r4]
	data->XL_Y = IMU_convertAccel(buf[9], buf[8]) + IMU->Y_offset;
 8000d54:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8000d58:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8000d5c:	f7ff ff6c 	bl	8000c38 <IMU_convertAccel>
 8000d60:	edd5 7a02 	vldr	s15, [r5, #8]
 8000d64:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000d68:	ed84 0a01 	vstr	s0, [r4, #4]
	data->XL_Z = IMU_convertAccel(buf[11], buf[10]) - IMU->Z_offset;
 8000d6c:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8000d70:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8000d74:	f7ff ff60 	bl	8000c38 <IMU_convertAccel>
 8000d78:	edd5 7a03 	vldr	s15, [r5, #12]
 8000d7c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8000d80:	ed84 0a02 	vstr	s0, [r4, #8]
}
 8000d84:	b005      	add	sp, #20
 8000d86:	bd30      	pop	{r4, r5, pc}

08000d88 <IMU_writeRegister>:
HAL_StatusTypeDef IMU_writeRegister(IMU* IMU, uint8_t* tx_buf, int num_bytes) {
 8000d88:	b570      	push	{r4, r5, r6, lr}
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	460e      	mov	r6, r1
 8000d8e:	4615      	mov	r5, r2
  __ASM volatile ("cpsid i" : : : "memory");
 8000d90:	b672      	cpsid	i
	IMU_chipSelect(IMU->chipID);
 8000d92:	7f00      	ldrb	r0, [r0, #28]
 8000d94:	f7ff ff6c 	bl	8000c70 <IMU_chipSelect>
	status = HAL_SPI_Transmit(IMU->hspi, (uint8_t *)tx_buf, num_bytes + 1, SPI_TIMEOUT);
 8000d98:	1c6a      	adds	r2, r5, #1
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	b292      	uxth	r2, r2
 8000d9e:	4631      	mov	r1, r6
 8000da0:	6820      	ldr	r0, [r4, #0]
 8000da2:	f002 fe8c 	bl	8003abe <HAL_SPI_Transmit>
 8000da6:	4605      	mov	r5, r0
	IMU_chipRelease(IMU->chipID);
 8000da8:	7f20      	ldrb	r0, [r4, #28]
 8000daa:	f7ff ff6d 	bl	8000c88 <IMU_chipRelease>
  __ASM volatile ("cpsie i" : : : "memory");
 8000dae:	b662      	cpsie	i
}
 8000db0:	4628      	mov	r0, r5
 8000db2:	bd70      	pop	{r4, r5, r6, pc}

08000db4 <IMU_init>:
void IMU_init(SPI_HandleTypeDef* hspi, IMU* IMU, uint8_t chipID) {
 8000db4:	b510      	push	{r4, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	460c      	mov	r4, r1
	IMU->hspi = hspi;
 8000dba:	6008      	str	r0, [r1, #0]
	IMU->X_offset = IMU_offsets[3*chipID + 0];
 8000dbc:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8000dc0:	4869      	ldr	r0, [pc, #420]	; (8000f68 <IMU_init+0x1b4>)
 8000dc2:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8000dc6:	6809      	ldr	r1, [r1, #0]
 8000dc8:	6061      	str	r1, [r4, #4]
	IMU->Y_offset = IMU_offsets[3*chipID + 1];
 8000dca:	f103 0c01 	add.w	ip, r3, #1
 8000dce:	eb00 018c 	add.w	r1, r0, ip, lsl #2
 8000dd2:	6809      	ldr	r1, [r1, #0]
 8000dd4:	60a1      	str	r1, [r4, #8]
	IMU->Z_offset = IMU_offsets[3*chipID + 2];
 8000dd6:	f103 0e02 	add.w	lr, r3, #2
 8000dda:	eb00 008e 	add.w	r0, r0, lr, lsl #2
 8000dde:	6801      	ldr	r1, [r0, #0]
 8000de0:	60e1      	str	r1, [r4, #12]
	IMU->GX_offset = IMU_Goffsets[3*chipID + 0];
 8000de2:	4962      	ldr	r1, [pc, #392]	; (8000f6c <IMU_init+0x1b8>)
 8000de4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	6123      	str	r3, [r4, #16]
	IMU->GY_offset = IMU_Goffsets[3*chipID + 1];
 8000dec:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 8000df0:	f8dc 3000 	ldr.w	r3, [ip]
 8000df4:	6163      	str	r3, [r4, #20]
	IMU->GZ_offset = IMU_Goffsets[3*chipID + 2];
 8000df6:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8000dfa:	680b      	ldr	r3, [r1, #0]
 8000dfc:	61a3      	str	r3, [r4, #24]
	IMU->chipID = chipID;
 8000dfe:	7722      	strb	r2, [r4, #28]
	buf[0] = CTRL3_C;
 8000e00:	2312      	movs	r3, #18
 8000e02:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = 0x04;
 8000e06:	2304      	movs	r3, #4
 8000e08:	f88d 3005 	strb.w	r3, [sp, #5]
	IMU_writeRegister(IMU, buf, 1);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	eb0d 0103 	add.w	r1, sp, r3
 8000e12:	4620      	mov	r0, r4
 8000e14:	f7ff ffb8 	bl	8000d88 <IMU_writeRegister>
	IMU_readRegister(IMU, WHO_AM_I, buf, 1);
 8000e18:	2301      	movs	r3, #1
 8000e1a:	aa01      	add	r2, sp, #4
 8000e1c:	210f      	movs	r1, #15
 8000e1e:	4620      	mov	r0, r4
 8000e20:	f7ff ff3e 	bl	8000ca0 <IMU_readRegister>
	assert(buf[0] == WHO_I_AM_ID); // Crash if not connected properly
 8000e24:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000e28:	2b6a      	cmp	r3, #106	; 0x6a
 8000e2a:	d153      	bne.n	8000ed4 <IMU_init+0x120>
	if (IS_COMP_FILTER) { // Complementary Filter Setup
 8000e2c:	4b50      	ldr	r3, [pc, #320]	; (8000f70 <IMU_init+0x1bc>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d055      	beq.n	8000ee0 <IMU_init+0x12c>
		buf[0] = CTRL1_XL;
 8000e34:	2310      	movs	r3, #16
 8000e36:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x3E;
 8000e3a:	233e      	movs	r3, #62	; 0x3e
 8000e3c:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000e40:	2201      	movs	r2, #1
 8000e42:	a901      	add	r1, sp, #4
 8000e44:	4620      	mov	r0, r4
 8000e46:	f7ff ff9f 	bl	8000d88 <IMU_writeRegister>
		buf[0] = CTRL2_G;
 8000e4a:	2311      	movs	r3, #17
 8000e4c:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x38;
 8000e50:	2338      	movs	r3, #56	; 0x38
 8000e52:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000e56:	2201      	movs	r2, #1
 8000e58:	a901      	add	r1, sp, #4
 8000e5a:	4620      	mov	r0, r4
 8000e5c:	f7ff ff94 	bl	8000d88 <IMU_writeRegister>
		buf[0] = INT2_CTRL;
 8000e60:	230e      	movs	r3, #14
 8000e62:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x03;
 8000e66:	2303      	movs	r3, #3
 8000e68:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	a901      	add	r1, sp, #4
 8000e70:	4620      	mov	r0, r4
 8000e72:	f7ff ff89 	bl	8000d88 <IMU_writeRegister>
		buf[0] = CTRL5_C;
 8000e76:	2314      	movs	r3, #20
 8000e78:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x60;
 8000e7c:	2360      	movs	r3, #96	; 0x60
 8000e7e:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000e82:	2201      	movs	r2, #1
 8000e84:	a901      	add	r1, sp, #4
 8000e86:	4620      	mov	r0, r4
 8000e88:	f7ff ff7e 	bl	8000d88 <IMU_writeRegister>
		buf[0] = CTRL6_C;
 8000e8c:	2315      	movs	r3, #21
 8000e8e:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x04;
 8000e92:	2304      	movs	r3, #4
 8000e94:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	eb0d 0103 	add.w	r1, sp, r3
 8000e9e:	4620      	mov	r0, r4
 8000ea0:	f7ff ff72 	bl	8000d88 <IMU_writeRegister>
		buf[0] = CTRL7_G;
 8000ea4:	2316      	movs	r3, #22
 8000ea6:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x70;
 8000eaa:	2370      	movs	r3, #112	; 0x70
 8000eac:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	a901      	add	r1, sp, #4
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	f7ff ff67 	bl	8000d88 <IMU_writeRegister>
		buf[0] = CTRL8_XL;
 8000eba:	2317      	movs	r3, #23
 8000ebc:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x00;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	a901      	add	r1, sp, #4
 8000eca:	4620      	mov	r0, r4
 8000ecc:	f7ff ff5c 	bl	8000d88 <IMU_writeRegister>
}
 8000ed0:	b004      	add	sp, #16
 8000ed2:	bd10      	pop	{r4, pc}
	assert(buf[0] == WHO_I_AM_ID); // Crash if not connected properly
 8000ed4:	4b27      	ldr	r3, [pc, #156]	; (8000f74 <IMU_init+0x1c0>)
 8000ed6:	4a28      	ldr	r2, [pc, #160]	; (8000f78 <IMU_init+0x1c4>)
 8000ed8:	212c      	movs	r1, #44	; 0x2c
 8000eda:	4828      	ldr	r0, [pc, #160]	; (8000f7c <IMU_init+0x1c8>)
 8000edc:	f003 ff12 	bl	8004d04 <__assert_func>
		buf[0] = CTRL1_XL;
 8000ee0:	2310      	movs	r3, #16
 8000ee2:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x3C;
 8000ee6:	233c      	movs	r3, #60	; 0x3c
 8000ee8:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000eec:	2201      	movs	r2, #1
 8000eee:	a901      	add	r1, sp, #4
 8000ef0:	4620      	mov	r0, r4
 8000ef2:	f7ff ff49 	bl	8000d88 <IMU_writeRegister>
		buf[0] = CTRL2_G;
 8000ef6:	2311      	movs	r3, #17
 8000ef8:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x38;
 8000efc:	2338      	movs	r3, #56	; 0x38
 8000efe:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000f02:	2201      	movs	r2, #1
 8000f04:	a901      	add	r1, sp, #4
 8000f06:	4620      	mov	r0, r4
 8000f08:	f7ff ff3e 	bl	8000d88 <IMU_writeRegister>
		buf[0] = INT2_CTRL;
 8000f0c:	230e      	movs	r3, #14
 8000f0e:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x03;
 8000f12:	2303      	movs	r3, #3
 8000f14:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	a901      	add	r1, sp, #4
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	f7ff ff33 	bl	8000d88 <IMU_writeRegister>
		buf[0] = CTRL5_C;
 8000f22:	2314      	movs	r3, #20
 8000f24:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x60;
 8000f28:	2360      	movs	r3, #96	; 0x60
 8000f2a:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	a901      	add	r1, sp, #4
 8000f32:	4620      	mov	r0, r4
 8000f34:	f7ff ff28 	bl	8000d88 <IMU_writeRegister>
		buf[0] = CTRL6_C;
 8000f38:	2315      	movs	r3, #21
 8000f3a:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x04;
 8000f3e:	2304      	movs	r3, #4
 8000f40:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000f44:	2201      	movs	r2, #1
 8000f46:	eb0d 0103 	add.w	r1, sp, r3
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	f7ff ff1c 	bl	8000d88 <IMU_writeRegister>
		buf[0] = CTRL7_G;
 8000f50:	2316      	movs	r3, #22
 8000f52:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x00;
 8000f56:	2300      	movs	r3, #0
 8000f58:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	a901      	add	r1, sp, #4
 8000f60:	4620      	mov	r0, r4
 8000f62:	f7ff ff11 	bl	8000d88 <IMU_writeRegister>
}
 8000f66:	e7b3      	b.n	8000ed0 <IMU_init+0x11c>
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	200004b0 	.word	0x200004b0
 8000f70:	08007eb8 	.word	0x08007eb8
 8000f74:	08007df8 	.word	0x08007df8
 8000f78:	08007e24 	.word	0x08007e24
 8000f7c:	08007e10 	.word	0x08007e10

08000f80 <XBeeChecksum>:
// modifies frame[]. pass payload to be sent in data[].
uint8_t XBeeChecksum(uint8_t frame[], uint8_t frame_size)
{
	uint8_t checksum = 0;
	uint8_t ret = 0;
	for (int i = 0; i < frame_size; i++) // skip bytes 0-2, and last
 8000f80:	2200      	movs	r2, #0
	uint8_t checksum = 0;
 8000f82:	4613      	mov	r3, r2
	for (int i = 0; i < frame_size; i++) // skip bytes 0-2, and last
 8000f84:	e006      	b.n	8000f94 <XBeeChecksum+0x14>
	{
		uint8_t temp = frame[i+3];
 8000f86:	f102 0c03 	add.w	ip, r2, #3
 8000f8a:	f810 c00c 	ldrb.w	ip, [r0, ip]
		checksum += temp;
 8000f8e:	4463      	add	r3, ip
 8000f90:	b2db      	uxtb	r3, r3
	for (int i = 0; i < frame_size; i++) // skip bytes 0-2, and last
 8000f92:	3201      	adds	r2, #1
 8000f94:	4291      	cmp	r1, r2
 8000f96:	dcf6      	bgt.n	8000f86 <XBeeChecksum+0x6>
	}
	checksum = 0x00FF - checksum;
 8000f98:	43d8      	mvns	r0, r3
	ret = (uint8_t)(checksum & 0x00FF);
	return ret;
}
 8000f9a:	b2c0      	uxtb	r0, r0
 8000f9c:	4770      	bx	lr

08000f9e <makeXBeeFrame>:
			uint8_t frame_id,
			uint8_t data_size, // in bytes
			uint8_t data[],
			uint8_t frame[],
			uint64_t dest_addr
){
 8000f9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fa0:	468c      	mov	ip, r1
 8000fa2:	4615      	mov	r5, r2
 8000fa4:	9c06      	ldr	r4, [sp, #24]
 8000fa6:	9f08      	ldr	r7, [sp, #32]
 8000fa8:	9e09      	ldr	r6, [sp, #36]	; 0x24
	// only do 14 bytes of data to avoid exceeding x-byte frame size
	if (data_size > 20) { data_size = 20; }
 8000faa:	2a14      	cmp	r2, #20
 8000fac:	d900      	bls.n	8000fb0 <makeXBeeFrame+0x12>
 8000fae:	2514      	movs	r5, #20

	uint16_t frame_size = 0x0E + data_size;
 8000fb0:	f105 020e 	add.w	r2, r5, #14
	uint32_t checksum = 0;

	frame[0] = XBEE_START;
 8000fb4:	217e      	movs	r1, #126	; 0x7e
 8000fb6:	7021      	strb	r1, [r4, #0]
	frame[1] = ((frame_size) >> 8) & 0x00FF; // length upper byte
 8000fb8:	0a12      	lsrs	r2, r2, #8
 8000fba:	7062      	strb	r2, [r4, #1]
	frame[2] = ((frame_size) >> 0) & 0x00FF; // length lower byte
 8000fbc:	f105 010e 	add.w	r1, r5, #14
 8000fc0:	b2c9      	uxtb	r1, r1
 8000fc2:	70a1      	strb	r1, [r4, #2]
	frame[3] = frame_type;
 8000fc4:	70e0      	strb	r0, [r4, #3]
	frame[4] = frame_id;
 8000fc6:	f884 c004 	strb.w	ip, [r4, #4]
	for (int i = 0; i < 8; i++) // write 64-bit dest
 8000fca:	f04f 0c00 	mov.w	ip, #0
 8000fce:	e014      	b.n	8000ffa <makeXBeeFrame+0x5c>
	{
		uint8_t temp = (dest_addr >> 8*(7-i));
 8000fd0:	f1cc 0007 	rsb	r0, ip, #7
 8000fd4:	00c0      	lsls	r0, r0, #3
 8000fd6:	f1c0 0e20 	rsb	lr, r0, #32
 8000fda:	f1a0 0220 	sub.w	r2, r0, #32
 8000fde:	fa27 f000 	lsr.w	r0, r7, r0
 8000fe2:	fa06 fe0e 	lsl.w	lr, r6, lr
 8000fe6:	ea40 000e 	orr.w	r0, r0, lr
 8000fea:	fa26 f202 	lsr.w	r2, r6, r2
 8000fee:	4310      	orrs	r0, r2
		frame[i + 5] = temp;
 8000ff0:	f10c 0205 	add.w	r2, ip, #5
 8000ff4:	54a0      	strb	r0, [r4, r2]
	for (int i = 0; i < 8; i++) // write 64-bit dest
 8000ff6:	f10c 0c01 	add.w	ip, ip, #1
 8000ffa:	f1bc 0f07 	cmp.w	ip, #7
 8000ffe:	dde7      	ble.n	8000fd0 <makeXBeeFrame+0x32>
	}
	frame[13] = 0xFF; // 16-bit addr upper
 8001000:	22ff      	movs	r2, #255	; 0xff
 8001002:	7362      	strb	r2, [r4, #13]
	frame[14] = 0xFE; // 16-bit addr lower
 8001004:	22fe      	movs	r2, #254	; 0xfe
 8001006:	73a2      	strb	r2, [r4, #14]
	frame[15] = 0x00; // broadcast_radius
 8001008:	2000      	movs	r0, #0
 800100a:	73e0      	strb	r0, [r4, #15]
	frame[16] = 0x00; // options
 800100c:	7420      	strb	r0, [r4, #16]
	for (int i = 0; i < data_size; i++) // add data payload to frame
 800100e:	e004      	b.n	800101a <makeXBeeFrame+0x7c>
	{
		uint8_t temp = data[i];
 8001010:	5c1e      	ldrb	r6, [r3, r0]
		frame[i + 17] = temp;
 8001012:	f100 0211 	add.w	r2, r0, #17
 8001016:	54a6      	strb	r6, [r4, r2]
	for (int i = 0; i < data_size; i++) // add data payload to frame
 8001018:	3001      	adds	r0, #1
 800101a:	4285      	cmp	r5, r0
 800101c:	dcf8      	bgt.n	8001010 <makeXBeeFrame+0x72>
	}

	// update checksum
	checksum = XBeeChecksum(frame, frame_size);
 800101e:	4620      	mov	r0, r4
 8001020:	f7ff ffae 	bl	8000f80 <XBeeChecksum>
	frame[data_size + 17] = checksum;
 8001024:	f105 0311 	add.w	r3, r5, #17
 8001028:	54e0      	strb	r0, [r4, r3]
	return frame_size + 4;
 800102a:	f105 0012 	add.w	r0, r5, #18
}
 800102e:	b2c0      	uxtb	r0, r0
 8001030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001034 <XBeeTransmitReceive>:
void XBeeTransmitReceive(uint8_t* data_buf, uint8_t* xbee_rx_buf, uint8_t tx_data_size, uint64_t dest_addr) {
 8001034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001038:	b08c      	sub	sp, #48	; 0x30
 800103a:	4603      	mov	r3, r0
 800103c:	460c      	mov	r4, r1
	uint8_t tx_size = makeXBeeFrame(XBEE_TRANSMIT_FRAME, 0x01, tx_data_size, data_buf, xbee_tx_buf, dest_addr);
 800103e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8001042:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001046:	f10d 0810 	add.w	r8, sp, #16
 800104a:	f8cd 8000 	str.w	r8, [sp]
 800104e:	2101      	movs	r1, #1
 8001050:	2010      	movs	r0, #16
 8001052:	f7ff ffa4 	bl	8000f9e <makeXBeeFrame>
 8001056:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(XBEE_CS_PORT, XBEE_CS_PIN, 0);
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <XBeeTransmitReceive+0x58>)
 800105a:	881f      	ldrh	r7, [r3, #0]
 800105c:	4e0c      	ldr	r6, [pc, #48]	; (8001090 <XBeeTransmitReceive+0x5c>)
 800105e:	2200      	movs	r2, #0
 8001060:	4639      	mov	r1, r7
 8001062:	6830      	ldr	r0, [r6, #0]
 8001064:	f001 fe66 	bl	8002d34 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsid i" : : : "memory");
 8001068:	b672      	cpsid	i
	HAL_SPI_TransmitReceive(&XBEE_SPI, xbee_tx_buf, xbee_rx_buf, tx_size, 7);
 800106a:	2307      	movs	r3, #7
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	b2ab      	uxth	r3, r5
 8001070:	4622      	mov	r2, r4
 8001072:	4641      	mov	r1, r8
 8001074:	4807      	ldr	r0, [pc, #28]	; (8001094 <XBeeTransmitReceive+0x60>)
 8001076:	f002 fe23 	bl	8003cc0 <HAL_SPI_TransmitReceive>
  __ASM volatile ("cpsie i" : : : "memory");
 800107a:	b662      	cpsie	i
	HAL_GPIO_WritePin(XBEE_CS_PORT, XBEE_CS_PIN, 1);
 800107c:	2201      	movs	r2, #1
 800107e:	4639      	mov	r1, r7
 8001080:	6830      	ldr	r0, [r6, #0]
 8001082:	f001 fe57 	bl	8002d34 <HAL_GPIO_WritePin>
}
 8001086:	b00c      	add	sp, #48	; 0x30
 8001088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800108c:	08007ebc 	.word	0x08007ebc
 8001090:	20000418 	.word	0x20000418
 8001094:	20000690 	.word	0x20000690

08001098 <euler_to_quaternion>:
	updatePreviousMatrices();	// update x_prev, P_prev, (Q_prev?) // TODO Add Q_prev to this?
	phase_out = phase;

}

void euler_to_quaternion(float* XL_angles, float* quat) {
 8001098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800109c:	ed2d 8b06 	vpush	{d8-d10}
 80010a0:	b095      	sub	sp, #84	; 0x54
 80010a2:	9107      	str	r1, [sp, #28]

	float yaw = XL_angles[0];
 80010a4:	edd0 8a00 	vldr	s17, [r0]
	float pitch = XL_angles[1];
 80010a8:	ed90 9a01 	vldr	s18, [r0, #4]
	float roll = XL_angles[2];
 80010ac:	edd0 7a02 	vldr	s15, [r0, #8]

	// Determine change in rotation as quaternion
	float delta_q_f32[4];
	delta_q_f32[0] = cos(roll/2) * cos(pitch/2) * cos(yaw/2) + sin(roll/2) * sin(pitch/2) * sin(yaw/2);	// qw
 80010b0:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80010b4:	ee67 7a88 	vmul.f32	s15, s15, s16
 80010b8:	ee17 0a90 	vmov	r0, s15
 80010bc:	f7ff fa3c 	bl	8000538 <__aeabi_f2d>
 80010c0:	ec41 0b1a 	vmov	d10, r0, r1
 80010c4:	ec41 0b10 	vmov	d0, r0, r1
 80010c8:	f004 fffe 	bl	80060c8 <cos>
 80010cc:	ec55 4b10 	vmov	r4, r5, d0
 80010d0:	ee69 7a08 	vmul.f32	s15, s18, s16
 80010d4:	ee17 0a90 	vmov	r0, s15
 80010d8:	f7ff fa2e 	bl	8000538 <__aeabi_f2d>
 80010dc:	ec41 0b19 	vmov	d9, r0, r1
 80010e0:	ec41 0b10 	vmov	d0, r0, r1
 80010e4:	f004 fff0 	bl	80060c8 <cos>
 80010e8:	ec57 6b10 	vmov	r6, r7, d0
 80010ec:	ee10 2a10 	vmov	r2, s0
 80010f0:	463b      	mov	r3, r7
 80010f2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80010f6:	4620      	mov	r0, r4
 80010f8:	4629      	mov	r1, r5
 80010fa:	f7ff fa75 	bl	80005e8 <__aeabi_dmul>
 80010fe:	4604      	mov	r4, r0
 8001100:	460d      	mov	r5, r1
 8001102:	ee68 7a88 	vmul.f32	s15, s17, s16
 8001106:	ee17 0a90 	vmov	r0, s15
 800110a:	f7ff fa15 	bl	8000538 <__aeabi_f2d>
 800110e:	ec41 0b18 	vmov	d8, r0, r1
 8001112:	ec41 0b10 	vmov	d0, r0, r1
 8001116:	f004 ffd7 	bl	80060c8 <cos>
 800111a:	ec59 8b10 	vmov	r8, r9, d0
 800111e:	ee10 2a10 	vmov	r2, s0
 8001122:	464b      	mov	r3, r9
 8001124:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8001128:	4620      	mov	r0, r4
 800112a:	4629      	mov	r1, r5
 800112c:	f7ff fa5c 	bl	80005e8 <__aeabi_dmul>
 8001130:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8001134:	eeb0 0a4a 	vmov.f32	s0, s20
 8001138:	eef0 0a6a 	vmov.f32	s1, s21
 800113c:	f005 f824 	bl	8006188 <sin>
 8001140:	ec55 4b10 	vmov	r4, r5, d0
 8001144:	eeb0 0a49 	vmov.f32	s0, s18
 8001148:	eef0 0a69 	vmov.f32	s1, s19
 800114c:	f005 f81c 	bl	8006188 <sin>
 8001150:	ec53 2b10 	vmov	r2, r3, d0
 8001154:	ed8d 0b04 	vstr	d0, [sp, #16]
 8001158:	4620      	mov	r0, r4
 800115a:	4629      	mov	r1, r5
 800115c:	f7ff fa44 	bl	80005e8 <__aeabi_dmul>
 8001160:	e9cd 0100 	strd	r0, r1, [sp]
 8001164:	eeb0 0a48 	vmov.f32	s0, s16
 8001168:	eef0 0a68 	vmov.f32	s1, s17
 800116c:	f005 f80c 	bl	8006188 <sin>
 8001170:	ec5b ab10 	vmov	sl, fp, d0
 8001174:	ee10 2a10 	vmov	r2, s0
 8001178:	465b      	mov	r3, fp
 800117a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800117e:	f7ff fa33 	bl	80005e8 <__aeabi_dmul>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800118a:	f7ff f877 	bl	800027c <__adddf3>
 800118e:	f7ff fd03 	bl	8000b98 <__aeabi_d2f>
 8001192:	9010      	str	r0, [sp, #64]	; 0x40

	delta_q_f32[1] = sin(roll/2) * cos(pitch/2) * cos(yaw/2) - cos(roll/2) * sin(pitch/2) * sin(yaw/2);	// qx
 8001194:	4622      	mov	r2, r4
 8001196:	462b      	mov	r3, r5
 8001198:	4630      	mov	r0, r6
 800119a:	4639      	mov	r1, r7
 800119c:	f7ff fa24 	bl	80005e8 <__aeabi_dmul>
 80011a0:	4604      	mov	r4, r0
 80011a2:	460d      	mov	r5, r1
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4640      	mov	r0, r8
 80011aa:	4649      	mov	r1, r9
 80011ac:	f7ff fa1c 	bl	80005e8 <__aeabi_dmul>
 80011b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80011b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80011b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80011bc:	f7ff fa14 	bl	80005e8 <__aeabi_dmul>
 80011c0:	4606      	mov	r6, r0
 80011c2:	460f      	mov	r7, r1
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4650      	mov	r0, sl
 80011ca:	4659      	mov	r1, fp
 80011cc:	f7ff fa0c 	bl	80005e8 <__aeabi_dmul>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80011d8:	f7ff f84e 	bl	8000278 <__aeabi_dsub>
 80011dc:	f7ff fcdc 	bl	8000b98 <__aeabi_d2f>
 80011e0:	9011      	str	r0, [sp, #68]	; 0x44

	delta_q_f32[2] = cos(roll/2) * sin(pitch/2) * cos(yaw/2) + sin(roll/2) * cos(pitch/2) * sin(yaw/2);	// qy
 80011e2:	4632      	mov	r2, r6
 80011e4:	463b      	mov	r3, r7
 80011e6:	4640      	mov	r0, r8
 80011e8:	4649      	mov	r1, r9
 80011ea:	f7ff f9fd 	bl	80005e8 <__aeabi_dmul>
 80011ee:	4606      	mov	r6, r0
 80011f0:	460f      	mov	r7, r1
 80011f2:	4622      	mov	r2, r4
 80011f4:	462b      	mov	r3, r5
 80011f6:	4650      	mov	r0, sl
 80011f8:	4659      	mov	r1, fp
 80011fa:	f7ff f9f5 	bl	80005e8 <__aeabi_dmul>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4630      	mov	r0, r6
 8001204:	4639      	mov	r1, r7
 8001206:	f7ff f839 	bl	800027c <__adddf3>
 800120a:	f7ff fcc5 	bl	8000b98 <__aeabi_d2f>
 800120e:	9012      	str	r0, [sp, #72]	; 0x48

	delta_q_f32[3] = cos(roll/2) * cos(pitch/2) * sin(yaw/2) - sin(roll/2) * sin(pitch/2) * cos(yaw/2);	// qz
 8001210:	4652      	mov	r2, sl
 8001212:	465b      	mov	r3, fp
 8001214:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8001218:	f7ff f9e6 	bl	80005e8 <__aeabi_dmul>
 800121c:	4604      	mov	r4, r0
 800121e:	460d      	mov	r5, r1
 8001220:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001224:	4640      	mov	r0, r8
 8001226:	4649      	mov	r1, r9
 8001228:	f7ff f9de 	bl	80005e8 <__aeabi_dmul>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	4620      	mov	r0, r4
 8001232:	4629      	mov	r1, r5
 8001234:	f7ff f820 	bl	8000278 <__aeabi_dsub>
 8001238:	f7ff fcae 	bl	8000b98 <__aeabi_d2f>
 800123c:	9013      	str	r0, [sp, #76]	; 0x4c

	arm_quaternion_normalize_f32(delta_q_f32, delta_q_f32, 1);	// q = q / |q|a
 800123e:	2201      	movs	r2, #1
 8001240:	ab10      	add	r3, sp, #64	; 0x40
 8001242:	4619      	mov	r1, r3
 8001244:	4618      	mov	r0, r3
 8001246:	f003 fc84 	bl	8004b52 <arm_quaternion_normalize_f32>

	// Shallow copy of prev q_gyro
	float temp_q_f32[4];
	temp_q_f32[0] = q_true_f32[0];
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <euler_to_quaternion+0x1e4>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	920c      	str	r2, [sp, #48]	; 0x30
	temp_q_f32[1] = q_true_f32[1];
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	920d      	str	r2, [sp, #52]	; 0x34
	temp_q_f32[2] = q_true_f32[2];
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	920e      	str	r2, [sp, #56]	; 0x38
	temp_q_f32[3] = q_true_f32[3];
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	930f      	str	r3, [sp, #60]	; 0x3c

	// Calculate new normalized quaternion
	arm_quaternion_product_single_f32(temp_q_f32, delta_q_f32, quat); // q = q x delta_q
 800125c:	9c07      	ldr	r4, [sp, #28]
 800125e:	4622      	mov	r2, r4
 8001260:	a910      	add	r1, sp, #64	; 0x40
 8001262:	a80c      	add	r0, sp, #48	; 0x30
 8001264:	f003 fccc 	bl	8004c00 <arm_quaternion_product_single_f32>
	arm_quaternion_normalize_f32(quat, quat, 1);	// q = q / |q|
 8001268:	2201      	movs	r2, #1
 800126a:	4621      	mov	r1, r4
 800126c:	4620      	mov	r0, r4
 800126e:	f003 fc70 	bl	8004b52 <arm_quaternion_normalize_f32>

}
 8001272:	b015      	add	sp, #84	; 0x54
 8001274:	ecbd 8b06 	vpop	{d8-d10}
 8001278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800127c:	200003a8 	.word	0x200003a8

08001280 <getAccelAngles>:

	// Determine |w_avg_b0|
	w_avg_b0_mag = vec_mag_f32(w_avg_b0_f32);
}

void getAccelAngles(float* XL_angles) {
 8001280:	b538      	push	{r3, r4, r5, lr}
 8001282:	ed2d 8b02 	vpush	{d8}
 8001286:	4604      	mov	r4, r0

	// Uses u_curr --> Nav. Frame Accelerations

	// XL_angles: yaw, pitch, roll

	float ax = (u_curr_f32[0] + u_curr_f32[3]) / 2;
 8001288:	4b20      	ldr	r3, [pc, #128]	; (800130c <getAccelAngles+0x8c>)
 800128a:	edd3 7a00 	vldr	s15, [r3]
 800128e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001292:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001296:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800129a:	ee67 7a87 	vmul.f32	s15, s15, s14
	float ay = (u_curr_f32[1] + u_curr_f32[4]) / 2;
 800129e:	edd3 8a01 	vldr	s17, [r3, #4]
 80012a2:	edd3 6a04 	vldr	s13, [r3, #16]
 80012a6:	ee78 8aa6 	vadd.f32	s17, s17, s13
 80012aa:	ee68 8a87 	vmul.f32	s17, s17, s14
	float az = (u_curr_f32[2] + u_curr_f32[5]) / 2;
 80012ae:	ed93 8a02 	vldr	s16, [r3, #8]
 80012b2:	edd3 6a05 	vldr	s13, [r3, #20]
 80012b6:	ee38 8a26 	vadd.f32	s16, s16, s13
 80012ba:	ee28 8a07 	vmul.f32	s16, s16, s14

	float pitch = asin(ax / g);
 80012be:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001310 <getAccelAngles+0x90>
 80012c2:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80012c6:	ee17 0a90 	vmov	r0, s15
 80012ca:	f7ff f935 	bl	8000538 <__aeabi_f2d>
 80012ce:	ec41 0b10 	vmov	d0, r0, r1
 80012d2:	f004 ffe5 	bl	80062a0 <asin>
 80012d6:	ec51 0b10 	vmov	r0, r1, d0
 80012da:	f7ff fc5d 	bl	8000b98 <__aeabi_d2f>
 80012de:	4605      	mov	r5, r0
	float roll = atan(ay / az);
 80012e0:	eec8 7a88 	vdiv.f32	s15, s17, s16
 80012e4:	ee17 0a90 	vmov	r0, s15
 80012e8:	f7ff f926 	bl	8000538 <__aeabi_f2d>
 80012ec:	ec41 0b10 	vmov	d0, r0, r1
 80012f0:	f004 fd4a 	bl	8005d88 <atan>
 80012f4:	ec51 0b10 	vmov	r0, r1, d0
 80012f8:	f7ff fc4e 	bl	8000b98 <__aeabi_d2f>

	XL_angles[0] = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	6023      	str	r3, [r4, #0]
	XL_angles[1] = pitch;
 8001300:	6065      	str	r5, [r4, #4]
	XL_angles[2] = roll;
 8001302:	60a0      	str	r0, [r4, #8]
}
 8001304:	ecbd 8b02 	vpop	{d8}
 8001308:	bd38      	pop	{r3, r4, r5, pc}
 800130a:	bf00      	nop
 800130c:	20000564 	.word	0x20000564
 8001310:	411cd806 	.word	0x411cd806

08001314 <updateGyroQuat>:
	}

	arm_quaternion_normalize_f32(q3, q3, 1);
}

void updateGyroQuat(float timeDelta) {
 8001314:	b510      	push	{r4, lr}
 8001316:	ed2d 8b02 	vpush	{d8}
 800131a:	b088      	sub	sp, #32
	// Determine change in rotation angle / 2 (units of radians)
	float rotation_angle_div_2 = w_avg_b0_mag * timeDelta * deg2rad / 2;
 800131c:	4b2f      	ldr	r3, [pc, #188]	; (80013dc <updateGyroQuat+0xc8>)
 800131e:	ed93 8a00 	vldr	s16, [r3]
 8001322:	ee28 0a00 	vmul.f32	s0, s16, s0
 8001326:	eddf 7a2e 	vldr	s15, [pc, #184]	; 80013e0 <updateGyroQuat+0xcc>
 800132a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800132e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001332:	ee60 7a27 	vmul.f32	s15, s0, s15
 8001336:	ee17 4a90 	vmov	r4, s15

	float q1_3_scaling_term = (w_avg_b0_mag) ?
			(float)sin(rotation_angle_div_2) / w_avg_b0_mag : w_avg_b0_mag; // reduce number of calculations
 800133a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800133e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001342:	d00f      	beq.n	8001364 <updateGyroQuat+0x50>
 8001344:	ee17 0a90 	vmov	r0, s15
 8001348:	f7ff f8f6 	bl	8000538 <__aeabi_f2d>
 800134c:	ec41 0b10 	vmov	d0, r0, r1
 8001350:	f004 ff1a 	bl	8006188 <sin>
 8001354:	ec51 0b10 	vmov	r0, r1, d0
 8001358:	f7ff fc1e 	bl	8000b98 <__aeabi_d2f>
 800135c:	ee07 0a90 	vmov	s15, r0
 8001360:	ee87 8a88 	vdiv.f32	s16, s15, s16

	// Determine change in rotation as quaternion
	float delta_q_f32[4];
	delta_q_f32[0] = (float)cos(rotation_angle_div_2);
 8001364:	4620      	mov	r0, r4
 8001366:	f7ff f8e7 	bl	8000538 <__aeabi_f2d>
 800136a:	ec41 0b10 	vmov	d0, r0, r1
 800136e:	f004 feab 	bl	80060c8 <cos>
 8001372:	ec51 0b10 	vmov	r0, r1, d0
 8001376:	f7ff fc0f 	bl	8000b98 <__aeabi_d2f>
 800137a:	9004      	str	r0, [sp, #16]
	delta_q_f32[1] = w_avg_b0_f32[0] * q1_3_scaling_term;
 800137c:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <updateGyroQuat+0xd0>)
 800137e:	edd3 7a00 	vldr	s15, [r3]
 8001382:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001386:	edcd 7a05 	vstr	s15, [sp, #20]
	delta_q_f32[2] = w_avg_b0_f32[1] * q1_3_scaling_term;
 800138a:	edd3 7a01 	vldr	s15, [r3, #4]
 800138e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001392:	edcd 7a06 	vstr	s15, [sp, #24]
	delta_q_f32[3] = w_avg_b0_f32[2] * q1_3_scaling_term;
 8001396:	edd3 7a02 	vldr	s15, [r3, #8]
 800139a:	ee27 8a88 	vmul.f32	s16, s15, s16
 800139e:	ed8d 8a07 	vstr	s16, [sp, #28]

	arm_quaternion_normalize_f32(delta_q_f32, delta_q_f32, 1);	// q = q / |q|a
 80013a2:	2201      	movs	r2, #1
 80013a4:	a904      	add	r1, sp, #16
 80013a6:	4608      	mov	r0, r1
 80013a8:	f003 fbd3 	bl	8004b52 <arm_quaternion_normalize_f32>

	// Shallow copy of prev q_gyro
	float temp_q_f32[4];
	temp_q_f32[0] = q_true_f32[0];
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <updateGyroQuat+0xd4>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	9200      	str	r2, [sp, #0]
	temp_q_f32[1] = q_true_f32[1];
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	9201      	str	r2, [sp, #4]
	temp_q_f32[2] = q_true_f32[2];
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	9202      	str	r2, [sp, #8]
	temp_q_f32[3] = q_true_f32[3];
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	9303      	str	r3, [sp, #12]

	// Calculate new normalized quaternion
	arm_quaternion_product_single_f32(temp_q_f32, delta_q_f32, q_gyro_f32); // q = q x delta_q
 80013be:	4c0b      	ldr	r4, [pc, #44]	; (80013ec <updateGyroQuat+0xd8>)
 80013c0:	4622      	mov	r2, r4
 80013c2:	a904      	add	r1, sp, #16
 80013c4:	4668      	mov	r0, sp
 80013c6:	f003 fc1b 	bl	8004c00 <arm_quaternion_product_single_f32>
	arm_quaternion_normalize_f32(q_gyro_f32, q_gyro_f32, 1);	// q = q / |q|
 80013ca:	2201      	movs	r2, #1
 80013cc:	4621      	mov	r1, r4
 80013ce:	4620      	mov	r0, r4
 80013d0:	f003 fbbf 	bl	8004b52 <arm_quaternion_normalize_f32>
}
 80013d4:	b008      	add	sp, #32
 80013d6:	ecbd 8b02 	vpop	{d8}
 80013da:	bd10      	pop	{r4, pc}
 80013dc:	20000590 	.word	0x20000590
 80013e0:	3c8efa35 	.word	0x3c8efa35
 80013e4:	20000584 	.word	0x20000584
 80013e8:	200003a8 	.word	0x200003a8
 80013ec:	20000398 	.word	0x20000398

080013f0 <updateAccelQuat>:

void updateAccelQuat(float timeDelta) {
 80013f0:	b500      	push	{lr}
 80013f2:	b085      	sub	sp, #20
	float XL_angles[3];

	getAccelAngles(XL_angles);
 80013f4:	a801      	add	r0, sp, #4
 80013f6:	f7ff ff43 	bl	8001280 <getAccelAngles>

	euler_to_quaternion(XL_angles, q_accel_f32);
 80013fa:	4903      	ldr	r1, [pc, #12]	; (8001408 <updateAccelQuat+0x18>)
 80013fc:	a801      	add	r0, sp, #4
 80013fe:	f7ff fe4b 	bl	8001098 <euler_to_quaternion>
}
 8001402:	b005      	add	sp, #20
 8001404:	f85d fb04 	ldr.w	pc, [sp], #4
 8001408:	20000388 	.word	0x20000388

0800140c <calculateRotationMatrix>:

void calculateRotationMatrix(void) {
 800140c:	b508      	push	{r3, lr}

	// Calculate rotation matrix from board frame to nav frame using quaternion
	arm_quaternion2rotation_f32(q_true_f32, rotation_b0_n_f32, 1);
 800140e:	2201      	movs	r2, #1
 8001410:	4902      	ldr	r1, [pc, #8]	; (800141c <calculateRotationMatrix+0x10>)
 8001412:	4803      	ldr	r0, [pc, #12]	; (8001420 <calculateRotationMatrix+0x14>)
 8001414:	f003 fb1c 	bl	8004a50 <arm_quaternion2rotation_f32>

}
 8001418:	bd08      	pop	{r3, pc}
 800141a:	bf00      	nop
 800141c:	20000538 	.word	0x20000538
 8001420:	200003a8 	.word	0x200003a8

08001424 <calculateStateEstimation>:

void calculateStateEstimation(void) { // TODO Verify this
 8001424:	b500      	push	{lr}
 8001426:	b09d      	sub	sp, #116	; 0x74
	 *  Define Temporary Objects
	 */

	float temp1_f32[12];
	arm_matrix_instance_f32 temp1;
	arm_mat_init_f32(&temp1, 12, 1, temp1_f32); // temp for first term of sum, 12x1
 8001428:	ab10      	add	r3, sp, #64	; 0x40
 800142a:	2201      	movs	r2, #1
 800142c:	210c      	movs	r1, #12
 800142e:	a80e      	add	r0, sp, #56	; 0x38
 8001430:	f003 fab7 	bl	80049a2 <arm_mat_init_f32>

	float temp2_f32[12];
	arm_matrix_instance_f32 temp2;
	arm_mat_init_f32(&temp2, 12, 1, temp2_f32); // temp for second term of sum, 12x1
 8001434:	ab02      	add	r3, sp, #8
 8001436:	2201      	movs	r2, #1
 8001438:	210c      	movs	r1, #12
 800143a:	4668      	mov	r0, sp
 800143c:	f003 fab1 	bl	80049a2 <arm_mat_init_f32>

	/*
	 *  Calculation Section
	 */

	arm_mat_mult_f32(&F_matrix, &x_prev, &temp1); // F*x(k-1) --> (12x12) * (12x1)
 8001440:	aa0e      	add	r2, sp, #56	; 0x38
 8001442:	4915      	ldr	r1, [pc, #84]	; (8001498 <calculateStateEstimation+0x74>)
 8001444:	4815      	ldr	r0, [pc, #84]	; (800149c <calculateStateEstimation+0x78>)
 8001446:	f003 fab1 	bl	80049ac <arm_mat_mult_f32>

	arm_mat_mult_f32(&B_matrix, &u_curr, &temp2); // B*u(k) --> (12x6) * (6x1)
 800144a:	466a      	mov	r2, sp
 800144c:	4914      	ldr	r1, [pc, #80]	; (80014a0 <calculateStateEstimation+0x7c>)
 800144e:	4815      	ldr	r0, [pc, #84]	; (80014a4 <calculateStateEstimation+0x80>)
 8001450:	f003 faac 	bl	80049ac <arm_mat_mult_f32>

	arm_mat_add_f32(&temp1, &temp2, &x_curr); // x(k) = F*x(k-1) + B*u(k)
 8001454:	4a14      	ldr	r2, [pc, #80]	; (80014a8 <calculateStateEstimation+0x84>)
 8001456:	4669      	mov	r1, sp
 8001458:	a80e      	add	r0, sp, #56	; 0x38
 800145a:	f003 fa8a 	bl	8004972 <arm_mat_add_f32>

	prediction_f32[0] = (x_curr_f32[0]);
 800145e:	4b13      	ldr	r3, [pc, #76]	; (80014ac <calculateStateEstimation+0x88>)
 8001460:	6819      	ldr	r1, [r3, #0]
 8001462:	4a13      	ldr	r2, [pc, #76]	; (80014b0 <calculateStateEstimation+0x8c>)
 8001464:	6011      	str	r1, [r2, #0]
	prediction_f32[1] = (x_curr_f32[1] + x_curr_f32[4]) / 2;
 8001466:	ed93 7a01 	vldr	s14, [r3, #4]
 800146a:	edd3 7a04 	vldr	s15, [r3, #16]
 800146e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001472:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001476:	ee27 7a26 	vmul.f32	s14, s14, s13
 800147a:	ed82 7a01 	vstr	s14, [r2, #4]
	prediction_f32[2] = (x_curr_f32[2] + x_curr_f32[5]) / 2;
 800147e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001482:	ed93 7a05 	vldr	s14, [r3, #20]
 8001486:	ee77 7a87 	vadd.f32	s15, s15, s14
 800148a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800148e:	edc2 7a02 	vstr	s15, [r2, #8]
}
 8001492:	b01d      	add	sp, #116	; 0x74
 8001494:	f85d fb04 	ldr.w	pc, [sp], #4
 8001498:	200005ac 	.word	0x200005ac
 800149c:	200004dc 	.word	0x200004dc
 80014a0:	2000055c 	.word	0x2000055c
 80014a4:	200004d4 	.word	0x200004d4
 80014a8:	200005a4 	.word	0x200005a4
 80014ac:	200003b8 	.word	0x200003b8
 80014b0:	20000524 	.word	0x20000524

080014b4 <returnCompDebugOutput>:
		q_true_f32[i] = q_f32[i];
	}

}

float returnCompDebugOutput(Position* corr, Position* pred, Position* optimal_pos, Position* K_gain, Position* w_avg, Quaternion* quat, Position* ZUPT) {
 80014b4:	b4f0      	push	{r4, r5, r6, r7}
 80014b6:	9d04      	ldr	r5, [sp, #16]
 80014b8:	9c05      	ldr	r4, [sp, #20]
 80014ba:	9e06      	ldr	r6, [sp, #24]
	corr->X = correction_f32[0];
 80014bc:	4f22      	ldr	r7, [pc, #136]	; (8001548 <returnCompDebugOutput+0x94>)
 80014be:	f8d7 c000 	ldr.w	ip, [r7]
 80014c2:	f8c0 c000 	str.w	ip, [r0]
	corr->Y = correction_f32[1];
 80014c6:	f8d7 c004 	ldr.w	ip, [r7, #4]
 80014ca:	f8c0 c004 	str.w	ip, [r0, #4]
	corr->Z = correction_f32[2];
 80014ce:	68bf      	ldr	r7, [r7, #8]
 80014d0:	6087      	str	r7, [r0, #8]

	//*pred = (Position){0,0,0};
	pred->X = prediction_f32[0];
 80014d2:	481e      	ldr	r0, [pc, #120]	; (800154c <returnCompDebugOutput+0x98>)
 80014d4:	6807      	ldr	r7, [r0, #0]
 80014d6:	600f      	str	r7, [r1, #0]
	pred->Y = prediction_f32[1];
 80014d8:	6847      	ldr	r7, [r0, #4]
 80014da:	604f      	str	r7, [r1, #4]
	pred->Z = prediction_f32[2];
 80014dc:	6880      	ldr	r0, [r0, #8]
 80014de:	6088      	str	r0, [r1, #8]

	optimal_pos->X = optimal_f32[0];
 80014e0:	491b      	ldr	r1, [pc, #108]	; (8001550 <returnCompDebugOutput+0x9c>)
 80014e2:	6808      	ldr	r0, [r1, #0]
 80014e4:	6010      	str	r0, [r2, #0]
	optimal_pos->Y = optimal_f32[1];
 80014e6:	6848      	ldr	r0, [r1, #4]
 80014e8:	6050      	str	r0, [r2, #4]
	optimal_pos->Z = optimal_f32[2];
 80014ea:	6889      	ldr	r1, [r1, #8]
 80014ec:	6091      	str	r1, [r2, #8]

	K_gain->X = gain_f32[0];
 80014ee:	4a19      	ldr	r2, [pc, #100]	; (8001554 <returnCompDebugOutput+0xa0>)
 80014f0:	6811      	ldr	r1, [r2, #0]
 80014f2:	6019      	str	r1, [r3, #0]
	K_gain->Y = gain_f32[1];
 80014f4:	6851      	ldr	r1, [r2, #4]
 80014f6:	6059      	str	r1, [r3, #4]
	K_gain->Z = gain_f32[2];
 80014f8:	6892      	ldr	r2, [r2, #8]
 80014fa:	609a      	str	r2, [r3, #8]

	w_avg->X = w_avg_b0_f32[0];
 80014fc:	4b16      	ldr	r3, [pc, #88]	; (8001558 <returnCompDebugOutput+0xa4>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	602a      	str	r2, [r5, #0]
	w_avg->Y = w_avg_b0_f32[1];
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	606a      	str	r2, [r5, #4]
	w_avg->Z = w_avg_b0_f32[2];
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	60ab      	str	r3, [r5, #8]

	quat->W = q_true_f32[0];
 800150a:	4b14      	ldr	r3, [pc, #80]	; (800155c <returnCompDebugOutput+0xa8>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	6022      	str	r2, [r4, #0]
	quat->X = q_true_f32[1];
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	6062      	str	r2, [r4, #4]
	quat->Y = q_true_f32[2];
 8001514:	689a      	ldr	r2, [r3, #8]
 8001516:	60a2      	str	r2, [r4, #8]
	quat->Z = q_true_f32[3];
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	60e3      	str	r3, [r4, #12]

	ZUPT->X = (float)curr_phase; // Phase
 800151c:	4b10      	ldr	r3, [pc, #64]	; (8001560 <returnCompDebugOutput+0xac>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	ee07 3a90 	vmov	s15, r3
 8001524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001528:	edc6 7a00 	vstr	s15, [r6]
	ZUPT->Y = (float)phase_counter;
 800152c:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <returnCompDebugOutput+0xb0>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	ee07 3a90 	vmov	s15, r3
 8001534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001538:	edc6 7a01 	vstr	s15, [r6, #4]

	return w_avg_b0_mag;

}
 800153c:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <returnCompDebugOutput+0xb4>)
 800153e:	ed93 0a00 	vldr	s0, [r3]
 8001542:	bcf0      	pop	{r4, r5, r6, r7}
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	200004e8 	.word	0x200004e8
 800154c:	20000524 	.word	0x20000524
 8001550:	20000510 	.word	0x20000510
 8001554:	200004fc 	.word	0x200004fc
 8001558:	20000584 	.word	0x20000584
 800155c:	200003a8 	.word	0x200003a8
 8001560:	20000384 	.word	0x20000384
 8001564:	2000051c 	.word	0x2000051c
 8001568:	20000590 	.word	0x20000590

0800156c <getNextGyroReading>:
	initRingBuffers(IMU0_data, IMU1_data);

	initQuaternions(IMU0_data, IMU1_data);
}

void getNextGyroReading(SensorData* IMU0_data, SensorData* IMU1_data, float* gyroOut) {
 800156c:	b410      	push	{r4}
	w_avg_x_ring[w_oldest] = (IMU0_data->G_X + IMU1_data->G_X) / 2;
 800156e:	ed90 7a03 	vldr	s14, [r0, #12]
 8001572:	edd1 7a03 	vldr	s15, [r1, #12]
 8001576:	ee37 7a27 	vadd.f32	s14, s14, s15
 800157a:	4c2a      	ldr	r4, [pc, #168]	; (8001624 <getNextGyroReading+0xb8>)
 800157c:	f894 c000 	ldrb.w	ip, [r4]
 8001580:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001584:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001588:	4b27      	ldr	r3, [pc, #156]	; (8001628 <getNextGyroReading+0xbc>)
 800158a:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800158e:	ed83 7a00 	vstr	s14, [r3]
	w_avg_y_ring[w_oldest] = (IMU0_data->G_Y + IMU1_data->G_Y) / 2;
 8001592:	ed90 7a04 	vldr	s14, [r0, #16]
 8001596:	edd1 7a04 	vldr	s15, [r1, #16]
 800159a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800159e:	ee27 7a26 	vmul.f32	s14, s14, s13
 80015a2:	4b22      	ldr	r3, [pc, #136]	; (800162c <getNextGyroReading+0xc0>)
 80015a4:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 80015a8:	ed83 7a00 	vstr	s14, [r3]
	w_avg_z_ring[w_oldest] = (IMU0_data->G_Z + IMU1_data->G_Z) / 2;
 80015ac:	edd0 7a05 	vldr	s15, [r0, #20]
 80015b0:	ed91 7a05 	vldr	s14, [r1, #20]
 80015b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80015bc:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <getNextGyroReading+0xc4>)
 80015be:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 80015c2:	edc3 7a00 	vstr	s15, [r3]

	w_oldest = (w_oldest + 1) % RING_SIZE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	7023      	strb	r3, [r4, #0]

	gyroOut[0] = 0;
 80015ca:	2100      	movs	r1, #0
 80015cc:	6011      	str	r1, [r2, #0]
	gyroOut[1] = 0;
 80015ce:	6051      	str	r1, [r2, #4]
	gyroOut[2] = 0;
 80015d0:	6091      	str	r1, [r2, #8]

	int i;
	for(i = 0; i < RING_SIZE; ++i) {
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	dd02      	ble.n	80015dc <getNextGyroReading+0x70>
	}

	gyroOut[0] /= RING_SIZE;
	gyroOut[1] /= RING_SIZE;
	gyroOut[2] /= RING_SIZE;
}
 80015d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80015da:	4770      	bx	lr
		gyroOut[0] += w_avg_x_ring[i];
 80015dc:	4912      	ldr	r1, [pc, #72]	; (8001628 <getNextGyroReading+0xbc>)
 80015de:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80015e2:	ed91 7a00 	vldr	s14, [r1]
 80015e6:	edd2 7a00 	vldr	s15, [r2]
 80015ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015ee:	edc2 7a00 	vstr	s15, [r2]
		gyroOut[1] += w_avg_y_ring[i];
 80015f2:	490e      	ldr	r1, [pc, #56]	; (800162c <getNextGyroReading+0xc0>)
 80015f4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80015f8:	ed91 7a00 	vldr	s14, [r1]
 80015fc:	edd2 7a01 	vldr	s15, [r2, #4]
 8001600:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001604:	edc2 7a01 	vstr	s15, [r2, #4]
		gyroOut[2] += w_avg_z_ring[i];
 8001608:	4909      	ldr	r1, [pc, #36]	; (8001630 <getNextGyroReading+0xc4>)
 800160a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800160e:	ed91 7a00 	vldr	s14, [r1]
 8001612:	edd2 7a02 	vldr	s15, [r2, #8]
 8001616:	ee77 7a87 	vadd.f32	s15, s15, s14
 800161a:	edc2 7a02 	vstr	s15, [r2, #8]
	for(i = 0; i < RING_SIZE; ++i) {
 800161e:	3301      	adds	r3, #1
 8001620:	e7d7      	b.n	80015d2 <getNextGyroReading+0x66>
 8001622:	bf00      	nop
 8001624:	200005a0 	.word	0x200005a0
 8001628:	20000594 	.word	0x20000594
 800162c:	20000598 	.word	0x20000598
 8001630:	2000059c 	.word	0x2000059c

08001634 <getNextXLReading>:

void getNextXLReading(SensorData* IMU0_data, SensorData* IMU1_data, float* xl0Out, float* xl1Out) {
 8001634:	b530      	push	{r4, r5, lr}
	xl0_avg_x_ring[xl_oldest] = IMU0_data->XL_X;
 8001636:	4c3b      	ldr	r4, [pc, #236]	; (8001724 <getNextXLReading+0xf0>)
 8001638:	f894 c000 	ldrb.w	ip, [r4]
 800163c:	f8d0 e000 	ldr.w	lr, [r0]
 8001640:	4d39      	ldr	r5, [pc, #228]	; (8001728 <getNextXLReading+0xf4>)
 8001642:	eb05 058c 	add.w	r5, r5, ip, lsl #2
 8001646:	f8c5 e000 	str.w	lr, [r5]
	xl0_avg_y_ring[xl_oldest] = IMU0_data->XL_Y;
 800164a:	edd0 7a01 	vldr	s15, [r0, #4]
 800164e:	4d37      	ldr	r5, [pc, #220]	; (800172c <getNextXLReading+0xf8>)
 8001650:	eb05 0e8c 	add.w	lr, r5, ip, lsl #2
 8001654:	edce 7a00 	vstr	s15, [lr]
	xl0_avg_z_ring[xl_oldest] = IMU0_data->XL_Z;
 8001658:	6885      	ldr	r5, [r0, #8]
 800165a:	4835      	ldr	r0, [pc, #212]	; (8001730 <getNextXLReading+0xfc>)
 800165c:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8001660:	6005      	str	r5, [r0, #0]
	xl1_avg_x_ring[xl_oldest] = IMU1_data->XL_X;
 8001662:	680d      	ldr	r5, [r1, #0]
 8001664:	4833      	ldr	r0, [pc, #204]	; (8001734 <getNextXLReading+0x100>)
 8001666:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 800166a:	6005      	str	r5, [r0, #0]
	xl1_avg_y_ring[xl_oldest] = IMU1_data->XL_Y;
 800166c:	684d      	ldr	r5, [r1, #4]
 800166e:	4832      	ldr	r0, [pc, #200]	; (8001738 <getNextXLReading+0x104>)
 8001670:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8001674:	6005      	str	r5, [r0, #0]
	xl1_avg_z_ring[xl_oldest] = IMU1_data->XL_Z;
 8001676:	6888      	ldr	r0, [r1, #8]
 8001678:	4930      	ldr	r1, [pc, #192]	; (800173c <getNextXLReading+0x108>)
 800167a:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 800167e:	f8cc 0000 	str.w	r0, [ip]

	xl_oldest = (xl_oldest + 1) % RING_SIZE;
 8001682:	2100      	movs	r1, #0
 8001684:	7021      	strb	r1, [r4, #0]

	xl0Out[0] = 0;
 8001686:	2000      	movs	r0, #0
 8001688:	6010      	str	r0, [r2, #0]
	xl0Out[1] = 0;
 800168a:	6050      	str	r0, [r2, #4]
	xl0Out[2] = 0;
 800168c:	6090      	str	r0, [r2, #8]
	xl1Out[0] = 0;
 800168e:	6018      	str	r0, [r3, #0]
	xl1Out[1] = 0;
 8001690:	6058      	str	r0, [r3, #4]
	xl1Out[2] = 0;
 8001692:	6098      	str	r0, [r3, #8]

	int i;
	for(i = 0; i < RING_SIZE; ++i) {
 8001694:	2900      	cmp	r1, #0
 8001696:	dd00      	ble.n	800169a <getNextXLReading+0x66>
	xl0Out[1] /= RING_SIZE;
	xl0Out[2] /= RING_SIZE;
	xl1Out[0] /= RING_SIZE;
	xl1Out[1] /= RING_SIZE;
	xl1Out[2] /= RING_SIZE;
}
 8001698:	bd30      	pop	{r4, r5, pc}
		xl0Out[0] += xl0_avg_x_ring[i];
 800169a:	4823      	ldr	r0, [pc, #140]	; (8001728 <getNextXLReading+0xf4>)
 800169c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80016a0:	ed90 7a00 	vldr	s14, [r0]
 80016a4:	edd2 7a00 	vldr	s15, [r2]
 80016a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016ac:	edc2 7a00 	vstr	s15, [r2]
		xl0Out[1] += xl0_avg_y_ring[i];
 80016b0:	481e      	ldr	r0, [pc, #120]	; (800172c <getNextXLReading+0xf8>)
 80016b2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80016b6:	ed90 7a00 	vldr	s14, [r0]
 80016ba:	edd2 7a01 	vldr	s15, [r2, #4]
 80016be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016c2:	edc2 7a01 	vstr	s15, [r2, #4]
		xl0Out[2] += xl0_avg_z_ring[i];
 80016c6:	481a      	ldr	r0, [pc, #104]	; (8001730 <getNextXLReading+0xfc>)
 80016c8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80016cc:	ed90 7a00 	vldr	s14, [r0]
 80016d0:	edd2 7a02 	vldr	s15, [r2, #8]
 80016d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016d8:	edc2 7a02 	vstr	s15, [r2, #8]
		xl1Out[0] += xl1_avg_x_ring[i];
 80016dc:	4815      	ldr	r0, [pc, #84]	; (8001734 <getNextXLReading+0x100>)
 80016de:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80016e2:	ed90 7a00 	vldr	s14, [r0]
 80016e6:	edd3 7a00 	vldr	s15, [r3]
 80016ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016ee:	edc3 7a00 	vstr	s15, [r3]
		xl1Out[1] += xl1_avg_y_ring[i];
 80016f2:	4811      	ldr	r0, [pc, #68]	; (8001738 <getNextXLReading+0x104>)
 80016f4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80016f8:	ed90 7a00 	vldr	s14, [r0]
 80016fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001700:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001704:	edc3 7a01 	vstr	s15, [r3, #4]
		xl1Out[2] += xl1_avg_z_ring[i];
 8001708:	480c      	ldr	r0, [pc, #48]	; (800173c <getNextXLReading+0x108>)
 800170a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800170e:	ed90 7a00 	vldr	s14, [r0]
 8001712:	edd3 7a02 	vldr	s15, [r3, #8]
 8001716:	ee77 7a87 	vadd.f32	s15, s15, s14
 800171a:	edc3 7a02 	vstr	s15, [r3, #8]
	for(i = 0; i < RING_SIZE; ++i) {
 800171e:	3101      	adds	r1, #1
 8001720:	e7b8      	b.n	8001694 <getNextXLReading+0x60>
 8001722:	bf00      	nop
 8001724:	200005e4 	.word	0x200005e4
 8001728:	200005b4 	.word	0x200005b4
 800172c:	200005b8 	.word	0x200005b8
 8001730:	200005bc 	.word	0x200005bc
 8001734:	200005c0 	.word	0x200005c0
 8001738:	200005c4 	.word	0x200005c4
 800173c:	200005c8 	.word	0x200005c8

08001740 <createZUPTNode>:
	}

	return curr_phase;
}

ZUPTNode* createZUPTNode(float w_mag) {
 8001740:	b508      	push	{r3, lr}
 8001742:	ed2d 8b02 	vpush	{d8}
 8001746:	eeb0 8a40 	vmov.f32	s16, s0
	ZUPTNode* node = (ZUPTNode*)malloc(sizeof(ZUPTNode));
 800174a:	2008      	movs	r0, #8
 800174c:	f003 fb34 	bl	8004db8 <malloc>

	node->next = NULL;
 8001750:	2200      	movs	r2, #0
 8001752:	6002      	str	r2, [r0, #0]
	node->w_mag_sq = w_mag * w_mag;
 8001754:	ee28 8a08 	vmul.f32	s16, s16, s16
 8001758:	ed80 8a01 	vstr	s16, [r0, #4]

	return node;
}
 800175c:	ecbd 8b02 	vpop	{d8}
 8001760:	bd08      	pop	{r3, pc}
	...

08001764 <initZUPT>:
void initZUPT(void) {
 8001764:	b538      	push	{r3, r4, r5, lr}
	ZUPTHead = (ZUPTNode*)createZUPTNode(0.0);
 8001766:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800178c <initZUPT+0x28>
 800176a:	f7ff ffe9 	bl	8001740 <createZUPTNode>
 800176e:	4605      	mov	r5, r0
 8001770:	4b07      	ldr	r3, [pc, #28]	; (8001790 <initZUPT+0x2c>)
 8001772:	6018      	str	r0, [r3, #0]
	for(i = 0; i < ZUPT_W-1; ++i) {
 8001774:	2400      	movs	r4, #0
 8001776:	e006      	b.n	8001786 <initZUPT+0x22>
		tempNode->next = (ZUPTNode*)createZUPTNode(0.0);
 8001778:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800178c <initZUPT+0x28>
 800177c:	f7ff ffe0 	bl	8001740 <createZUPTNode>
 8001780:	6028      	str	r0, [r5, #0]
	for(i = 0; i < ZUPT_W-1; ++i) {
 8001782:	3401      	adds	r4, #1
		tempNode = (ZUPTNode*)tempNode->next;
 8001784:	4605      	mov	r5, r0
	for(i = 0; i < ZUPT_W-1; ++i) {
 8001786:	2c12      	cmp	r4, #18
 8001788:	ddf6      	ble.n	8001778 <initZUPT+0x14>
}
 800178a:	bd38      	pop	{r3, r4, r5, pc}
 800178c:	00000000 	.word	0x00000000
 8001790:	200004e4 	.word	0x200004e4
 8001794:	00000000 	.word	0x00000000

08001798 <detectZUPTPhase>:
enum PHASE detectZUPTPhase(void) {
 8001798:	b510      	push	{r4, lr}
 800179a:	ed2d 8b02 	vpush	{d8}
	assert(ZUPTHead != NULL);
 800179e:	4b40      	ldr	r3, [pc, #256]	; (80018a0 <detectZUPTPhase+0x108>)
 80017a0:	6818      	ldr	r0, [r3, #0]
 80017a2:	b140      	cbz	r0, 80017b6 <detectZUPTPhase+0x1e>
	ZUPTNode* tempNode = (ZUPTNode*)ZUPTHead->next;
 80017a4:	6804      	ldr	r4, [r0, #0]
	free(ZUPTHead);
 80017a6:	f003 fb0f 	bl	8004dc8 <free>
	ZUPTHead = tempNode;
 80017aa:	4b3d      	ldr	r3, [pc, #244]	; (80018a0 <detectZUPTPhase+0x108>)
 80017ac:	601c      	str	r4, [r3, #0]
	for(i = 0; i < ZUPT_W-2; ++i) {
 80017ae:	2300      	movs	r3, #0
	float sum = 0;
 80017b0:	eddf 7a3c 	vldr	s15, [pc, #240]	; 80018a4 <detectZUPTPhase+0x10c>
	for(i = 0; i < ZUPT_W-2; ++i) {
 80017b4:	e00c      	b.n	80017d0 <detectZUPTPhase+0x38>
	assert(ZUPTHead != NULL);
 80017b6:	4b3c      	ldr	r3, [pc, #240]	; (80018a8 <detectZUPTPhase+0x110>)
 80017b8:	4a3c      	ldr	r2, [pc, #240]	; (80018ac <detectZUPTPhase+0x114>)
 80017ba:	f240 21c7 	movw	r1, #711	; 0x2c7
 80017be:	483c      	ldr	r0, [pc, #240]	; (80018b0 <detectZUPTPhase+0x118>)
 80017c0:	f003 faa0 	bl	8004d04 <__assert_func>
		sum += tempNode->w_mag_sq;
 80017c4:	ed94 7a01 	vldr	s14, [r4, #4]
 80017c8:	ee77 7a87 	vadd.f32	s15, s15, s14
		tempNode = (ZUPTNode*)tempNode->next;
 80017cc:	6824      	ldr	r4, [r4, #0]
	for(i = 0; i < ZUPT_W-2; ++i) {
 80017ce:	3301      	adds	r3, #1
 80017d0:	2b11      	cmp	r3, #17
 80017d2:	dc08      	bgt.n	80017e6 <detectZUPTPhase+0x4e>
		assert(tempNode != NULL);
 80017d4:	2c00      	cmp	r4, #0
 80017d6:	d1f5      	bne.n	80017c4 <detectZUPTPhase+0x2c>
 80017d8:	4b36      	ldr	r3, [pc, #216]	; (80018b4 <detectZUPTPhase+0x11c>)
 80017da:	4a34      	ldr	r2, [pc, #208]	; (80018ac <detectZUPTPhase+0x114>)
 80017dc:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 80017e0:	4833      	ldr	r0, [pc, #204]	; (80018b0 <detectZUPTPhase+0x118>)
 80017e2:	f003 fa8f 	bl	8004d04 <__assert_func>
	assert(tempNode != NULL);
 80017e6:	2c00      	cmp	r4, #0
 80017e8:	d03d      	beq.n	8001866 <detectZUPTPhase+0xce>
	sum += tempNode->w_mag_sq; // last node
 80017ea:	ed94 8a01 	vldr	s16, [r4, #4]
 80017ee:	ee38 8a27 	vadd.f32	s16, s16, s15
	tempNode->next = (ZUPTNode*)createZUPTNode(w_avg_b0_mag);
 80017f2:	4b31      	ldr	r3, [pc, #196]	; (80018b8 <detectZUPTPhase+0x120>)
 80017f4:	ed93 0a00 	vldr	s0, [r3]
 80017f8:	f7ff ffa2 	bl	8001740 <createZUPTNode>
 80017fc:	6020      	str	r0, [r4, #0]
	assert(tempNode->next != NULL);
 80017fe:	2800      	cmp	r0, #0
 8001800:	d038      	beq.n	8001874 <detectZUPTPhase+0xdc>
	sum += tempNode->w_mag_sq;
 8001802:	edd0 7a01 	vldr	s15, [r0, #4]
	float Tw = sum * ZUPT_SCALE_FACTOR;
 8001806:	ee77 7a88 	vadd.f32	s15, s15, s16
 800180a:	ee17 0a90 	vmov	r0, s15
 800180e:	f7fe fe93 	bl	8000538 <__aeabi_f2d>
 8001812:	a321      	add	r3, pc, #132	; (adr r3, 8001898 <detectZUPTPhase+0x100>)
 8001814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001818:	f7ff f810 	bl	800083c <__aeabi_ddiv>
 800181c:	f7ff f9bc 	bl	8000b98 <__aeabi_d2f>
 8001820:	ee07 0a90 	vmov	s15, r0
	enum PHASE detected_phase = (Tw < ZUPT_THRESHOLD) ? STANCE : SWING;
 8001824:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80018bc <detectZUPTPhase+0x124>
 8001828:	eef4 7ac7 	vcmpe.f32	s15, s14
 800182c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001830:	bf4c      	ite	mi
 8001832:	2301      	movmi	r3, #1
 8001834:	2300      	movpl	r3, #0
	if (detected_phase != curr_phase) {
 8001836:	4a22      	ldr	r2, [pc, #136]	; (80018c0 <detectZUPTPhase+0x128>)
 8001838:	7812      	ldrb	r2, [r2, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d00e      	beq.n	800185c <detectZUPTPhase+0xc4>
		if (detected_phase == SWING) {
 800183e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001846:	d41c      	bmi.n	8001882 <detectZUPTPhase+0xea>
			++phase_counter;
 8001848:	4a1e      	ldr	r2, [pc, #120]	; (80018c4 <detectZUPTPhase+0x12c>)
 800184a:	7813      	ldrb	r3, [r2, #0]
 800184c:	3301      	adds	r3, #1
 800184e:	b2db      	uxtb	r3, r3
 8001850:	7013      	strb	r3, [r2, #0]
			curr_phase = (phase_counter == PHASE_INTERVAL_THRESHOLD) ? SWING : STANCE;
 8001852:	3b0a      	subs	r3, #10
 8001854:	bf18      	it	ne
 8001856:	2301      	movne	r3, #1
 8001858:	4a19      	ldr	r2, [pc, #100]	; (80018c0 <detectZUPTPhase+0x128>)
 800185a:	7013      	strb	r3, [r2, #0]
}
 800185c:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <detectZUPTPhase+0x128>)
 800185e:	7818      	ldrb	r0, [r3, #0]
 8001860:	ecbd 8b02 	vpop	{d8}
 8001864:	bd10      	pop	{r4, pc}
	assert(tempNode != NULL);
 8001866:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <detectZUPTPhase+0x11c>)
 8001868:	4a10      	ldr	r2, [pc, #64]	; (80018ac <detectZUPTPhase+0x114>)
 800186a:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 800186e:	4810      	ldr	r0, [pc, #64]	; (80018b0 <detectZUPTPhase+0x118>)
 8001870:	f003 fa48 	bl	8004d04 <__assert_func>
	assert(tempNode->next != NULL);
 8001874:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <detectZUPTPhase+0x130>)
 8001876:	4a0d      	ldr	r2, [pc, #52]	; (80018ac <detectZUPTPhase+0x114>)
 8001878:	f240 21d9 	movw	r1, #729	; 0x2d9
 800187c:	480c      	ldr	r0, [pc, #48]	; (80018b0 <detectZUPTPhase+0x118>)
 800187e:	f003 fa41 	bl	8004d04 <__assert_func>
			--phase_counter;
 8001882:	4a10      	ldr	r2, [pc, #64]	; (80018c4 <detectZUPTPhase+0x12c>)
 8001884:	7813      	ldrb	r3, [r2, #0]
 8001886:	3b01      	subs	r3, #1
 8001888:	b2db      	uxtb	r3, r3
 800188a:	7013      	strb	r3, [r2, #0]
			curr_phase = (phase_counter == 0) ? STANCE : SWING;
 800188c:	fab3 f383 	clz	r3, r3
 8001890:	095b      	lsrs	r3, r3, #5
 8001892:	4a0b      	ldr	r2, [pc, #44]	; (80018c0 <detectZUPTPhase+0x128>)
 8001894:	7013      	strb	r3, [r2, #0]
 8001896:	e7e1      	b.n	800185c <detectZUPTPhase+0xc4>
 8001898:	cccccccd 	.word	0xcccccccd
 800189c:	3f60624d 	.word	0x3f60624d
 80018a0:	200004e4 	.word	0x200004e4
 80018a4:	00000000 	.word	0x00000000
 80018a8:	08007e30 	.word	0x08007e30
 80018ac:	08007e90 	.word	0x08007e90
 80018b0:	08007e44 	.word	0x08007e44
 80018b4:	08007e64 	.word	0x08007e64
 80018b8:	20000590 	.word	0x20000590
 80018bc:	479c4000 	.word	0x479c4000
 80018c0:	20000384 	.word	0x20000384
 80018c4:	2000051c 	.word	0x2000051c
 80018c8:	08007e78 	.word	0x08007e78

080018cc <updatePreviousMatrices>:

void updatePreviousMatrices(void) {
	int i;
	int j;
	for (i = 0; i < x_curr.numRows; ++i) {
 80018cc:	2300      	movs	r3, #0
 80018ce:	e00a      	b.n	80018e6 <updatePreviousMatrices+0x1a>
		x_prev.pData[i] = x_curr.pData[i];
 80018d0:	4a07      	ldr	r2, [pc, #28]	; (80018f0 <updatePreviousMatrices+0x24>)
 80018d2:	6851      	ldr	r1, [r2, #4]
 80018d4:	4a07      	ldr	r2, [pc, #28]	; (80018f4 <updatePreviousMatrices+0x28>)
 80018d6:	6852      	ldr	r2, [r2, #4]
 80018d8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80018dc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80018e0:	6809      	ldr	r1, [r1, #0]
 80018e2:	6011      	str	r1, [r2, #0]
	for (i = 0; i < x_curr.numRows; ++i) {
 80018e4:	3301      	adds	r3, #1
 80018e6:	4a02      	ldr	r2, [pc, #8]	; (80018f0 <updatePreviousMatrices+0x24>)
 80018e8:	8812      	ldrh	r2, [r2, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	dcf0      	bgt.n	80018d0 <updatePreviousMatrices+0x4>
	}
}
 80018ee:	4770      	bx	lr
 80018f0:	200005a4 	.word	0x200005a4
 80018f4:	200005ac 	.word	0x200005ac

080018f8 <dot_f32>:

float dot_f32(float* a, float* b) {
	return (a[0]*b[0]) + (a[1]*b[1]) + (a[2]*b[2]);
 80018f8:	edd0 7a00 	vldr	s15, [r0]
 80018fc:	ed91 0a00 	vldr	s0, [r1]
 8001900:	ee67 7a80 	vmul.f32	s15, s15, s0
 8001904:	ed90 0a01 	vldr	s0, [r0, #4]
 8001908:	ed91 7a01 	vldr	s14, [r1, #4]
 800190c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8001910:	ee77 7a80 	vadd.f32	s15, s15, s0
 8001914:	ed90 0a02 	vldr	s0, [r0, #8]
 8001918:	ed91 7a02 	vldr	s14, [r1, #8]
 800191c:	ee20 0a07 	vmul.f32	s0, s0, s14
}
 8001920:	ee37 0a80 	vadd.f32	s0, s15, s0
 8001924:	4770      	bx	lr
	...

08001928 <quatSLERP>:
void quatSLERP(float* q1, float* q2, float* q3, float t) {
 8001928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800192c:	ed2d 8b02 	vpush	{d8}
 8001930:	b085      	sub	sp, #20
 8001932:	4607      	mov	r7, r0
 8001934:	460d      	mov	r5, r1
 8001936:	4614      	mov	r4, r2
 8001938:	eeb0 8a40 	vmov.f32	s16, s0
	float dot_prod = dot_f32(q1, q2) + (q1[3]*q2[3]);
 800193c:	f7ff ffdc 	bl	80018f8 <dot_f32>
 8001940:	edd7 7a03 	vldr	s15, [r7, #12]
 8001944:	ed95 7a03 	vldr	s14, [r5, #12]
 8001948:	ee67 7a87 	vmul.f32	s15, s15, s14
	float angle = acos(dot_prod);
 800194c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8001950:	ee17 0a90 	vmov	r0, s15
 8001954:	f7fe fdf0 	bl	8000538 <__aeabi_f2d>
 8001958:	4680      	mov	r8, r0
 800195a:	4689      	mov	r9, r1
 800195c:	ec49 8b10 	vmov	d0, r8, r9
 8001960:	f004 fc6a 	bl	8006238 <acos>
 8001964:	ec51 0b10 	vmov	r0, r1, d0
 8001968:	f7ff f916 	bl	8000b98 <__aeabi_d2f>
 800196c:	ee08 0a90 	vmov	s17, r0
	float denom = sin(angle);
 8001970:	f7fe fde2 	bl	8000538 <__aeabi_f2d>
 8001974:	ec41 0b10 	vmov	d0, r0, r1
 8001978:	f004 fc06 	bl	8006188 <sin>
 800197c:	ec51 0b10 	vmov	r0, r1, d0
 8001980:	f7ff f90a 	bl	8000b98 <__aeabi_d2f>
 8001984:	4606      	mov	r6, r0
	if (dot_prod > 0.99999) {
 8001986:	a364      	add	r3, pc, #400	; (adr r3, 8001b18 <quatSLERP+0x1f0>)
 8001988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198c:	4640      	mov	r0, r8
 800198e:	4649      	mov	r1, r9
 8001990:	f7ff f8ba 	bl	8000b08 <__aeabi_dcmpgt>
 8001994:	b188      	cbz	r0, 80019ba <quatSLERP+0x92>
		q3[0] = q2[0];
 8001996:	682b      	ldr	r3, [r5, #0]
 8001998:	6023      	str	r3, [r4, #0]
		q3[1] = q2[1];
 800199a:	686b      	ldr	r3, [r5, #4]
 800199c:	6063      	str	r3, [r4, #4]
		q3[2] = q2[2];
 800199e:	68ab      	ldr	r3, [r5, #8]
 80019a0:	60a3      	str	r3, [r4, #8]
		q3[3] = q2[3];
 80019a2:	68eb      	ldr	r3, [r5, #12]
 80019a4:	60e3      	str	r3, [r4, #12]
	arm_quaternion_normalize_f32(q3, q3, 1);
 80019a6:	2201      	movs	r2, #1
 80019a8:	4621      	mov	r1, r4
 80019aa:	4620      	mov	r0, r4
 80019ac:	f003 f8d1 	bl	8004b52 <arm_quaternion_normalize_f32>
}
 80019b0:	b005      	add	sp, #20
 80019b2:	ecbd 8b02 	vpop	{d8}
 80019b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		q3[0] = (q1[0]*sin((1-t)*angle) + q2[0]*sin(t*angle)) / denom;
 80019ba:	6838      	ldr	r0, [r7, #0]
 80019bc:	f7fe fdbc 	bl	8000538 <__aeabi_f2d>
 80019c0:	4680      	mov	r8, r0
 80019c2:	4689      	mov	r9, r1
 80019c4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80019c8:	ee77 7ac8 	vsub.f32	s15, s15, s16
 80019cc:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80019d0:	ee17 0a90 	vmov	r0, s15
 80019d4:	f7fe fdb0 	bl	8000538 <__aeabi_f2d>
 80019d8:	ec41 0b10 	vmov	d0, r0, r1
 80019dc:	f004 fbd4 	bl	8006188 <sin>
 80019e0:	ec53 2b10 	vmov	r2, r3, d0
 80019e4:	ed8d 0b00 	vstr	d0, [sp]
 80019e8:	4640      	mov	r0, r8
 80019ea:	4649      	mov	r1, r9
 80019ec:	f7fe fdfc 	bl	80005e8 <__aeabi_dmul>
 80019f0:	4682      	mov	sl, r0
 80019f2:	468b      	mov	fp, r1
 80019f4:	6828      	ldr	r0, [r5, #0]
 80019f6:	f7fe fd9f 	bl	8000538 <__aeabi_f2d>
 80019fa:	4680      	mov	r8, r0
 80019fc:	4689      	mov	r9, r1
 80019fe:	ee68 7a88 	vmul.f32	s15, s17, s16
 8001a02:	ee17 0a90 	vmov	r0, s15
 8001a06:	f7fe fd97 	bl	8000538 <__aeabi_f2d>
 8001a0a:	ec41 0b10 	vmov	d0, r0, r1
 8001a0e:	f004 fbbb 	bl	8006188 <sin>
 8001a12:	ec53 2b10 	vmov	r2, r3, d0
 8001a16:	ed8d 0b02 	vstr	d0, [sp, #8]
 8001a1a:	4640      	mov	r0, r8
 8001a1c:	4649      	mov	r1, r9
 8001a1e:	f7fe fde3 	bl	80005e8 <__aeabi_dmul>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4650      	mov	r0, sl
 8001a28:	4659      	mov	r1, fp
 8001a2a:	f7fe fc27 	bl	800027c <__adddf3>
 8001a2e:	4680      	mov	r8, r0
 8001a30:	4689      	mov	r9, r1
 8001a32:	4630      	mov	r0, r6
 8001a34:	f7fe fd80 	bl	8000538 <__aeabi_f2d>
 8001a38:	4682      	mov	sl, r0
 8001a3a:	468b      	mov	fp, r1
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4640      	mov	r0, r8
 8001a42:	4649      	mov	r1, r9
 8001a44:	f7fe fefa 	bl	800083c <__aeabi_ddiv>
 8001a48:	f7ff f8a6 	bl	8000b98 <__aeabi_d2f>
 8001a4c:	6020      	str	r0, [r4, #0]
		q3[1] = (q1[1]*sin((1-t)*angle) + q2[1]*sin(t*angle)) / denom;
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7fe fd72 	bl	8000538 <__aeabi_f2d>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001a5c:	f7fe fdc4 	bl	80005e8 <__aeabi_dmul>
 8001a60:	4680      	mov	r8, r0
 8001a62:	4689      	mov	r9, r1
 8001a64:	6868      	ldr	r0, [r5, #4]
 8001a66:	f7fe fd67 	bl	8000538 <__aeabi_f2d>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001a72:	f7fe fdb9 	bl	80005e8 <__aeabi_dmul>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4640      	mov	r0, r8
 8001a7c:	4649      	mov	r1, r9
 8001a7e:	f7fe fbfd 	bl	800027c <__adddf3>
 8001a82:	4652      	mov	r2, sl
 8001a84:	465b      	mov	r3, fp
 8001a86:	f7fe fed9 	bl	800083c <__aeabi_ddiv>
 8001a8a:	f7ff f885 	bl	8000b98 <__aeabi_d2f>
 8001a8e:	6060      	str	r0, [r4, #4]
		q3[2] = (q1[2]*sin((1-t)*angle) + q2[2]*sin(t*angle)) / denom;
 8001a90:	68b8      	ldr	r0, [r7, #8]
 8001a92:	f7fe fd51 	bl	8000538 <__aeabi_f2d>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001a9e:	f7fe fda3 	bl	80005e8 <__aeabi_dmul>
 8001aa2:	4680      	mov	r8, r0
 8001aa4:	4689      	mov	r9, r1
 8001aa6:	68a8      	ldr	r0, [r5, #8]
 8001aa8:	f7fe fd46 	bl	8000538 <__aeabi_f2d>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001ab4:	f7fe fd98 	bl	80005e8 <__aeabi_dmul>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4640      	mov	r0, r8
 8001abe:	4649      	mov	r1, r9
 8001ac0:	f7fe fbdc 	bl	800027c <__adddf3>
 8001ac4:	4652      	mov	r2, sl
 8001ac6:	465b      	mov	r3, fp
 8001ac8:	f7fe feb8 	bl	800083c <__aeabi_ddiv>
 8001acc:	f7ff f864 	bl	8000b98 <__aeabi_d2f>
 8001ad0:	60a0      	str	r0, [r4, #8]
		q3[3] = (q1[3]*sin((1-t)*angle) + q2[3]*sin(t*angle)) / denom;
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f7fe fd30 	bl	8000538 <__aeabi_f2d>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001ae0:	f7fe fd82 	bl	80005e8 <__aeabi_dmul>
 8001ae4:	4606      	mov	r6, r0
 8001ae6:	460f      	mov	r7, r1
 8001ae8:	68e8      	ldr	r0, [r5, #12]
 8001aea:	f7fe fd25 	bl	8000538 <__aeabi_f2d>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001af6:	f7fe fd77 	bl	80005e8 <__aeabi_dmul>
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	4630      	mov	r0, r6
 8001b00:	4639      	mov	r1, r7
 8001b02:	f7fe fbbb 	bl	800027c <__adddf3>
 8001b06:	4652      	mov	r2, sl
 8001b08:	465b      	mov	r3, fp
 8001b0a:	f7fe fe97 	bl	800083c <__aeabi_ddiv>
 8001b0e:	f7ff f843 	bl	8000b98 <__aeabi_d2f>
 8001b12:	60e0      	str	r0, [r4, #12]
 8001b14:	e747      	b.n	80019a6 <quatSLERP+0x7e>
 8001b16:	bf00      	nop
 8001b18:	074a771d 	.word	0x074a771d
 8001b1c:	3fefffeb 	.word	0x3fefffeb

08001b20 <cross_f32>:

void cross_f32(float* a, float* b, float* c) {
	c[0] = a[1] * b[2] - a[2] * b[1];
 8001b20:	edd0 7a01 	vldr	s15, [r0, #4]
 8001b24:	ed91 7a02 	vldr	s14, [r1, #8]
 8001b28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b2c:	ed90 7a02 	vldr	s14, [r0, #8]
 8001b30:	edd1 6a01 	vldr	s13, [r1, #4]
 8001b34:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001b38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b3c:	edc2 7a00 	vstr	s15, [r2]
	c[1] = a[2] * b[0] - a[0] * b[2];
 8001b40:	edd0 7a02 	vldr	s15, [r0, #8]
 8001b44:	ed91 7a00 	vldr	s14, [r1]
 8001b48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b4c:	ed90 7a00 	vldr	s14, [r0]
 8001b50:	edd1 6a02 	vldr	s13, [r1, #8]
 8001b54:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001b58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b5c:	edc2 7a01 	vstr	s15, [r2, #4]
	c[2] = a[0] * b[1] - a[1] * b[0];
 8001b60:	edd0 7a00 	vldr	s15, [r0]
 8001b64:	ed91 7a01 	vldr	s14, [r1, #4]
 8001b68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b6c:	ed90 7a01 	vldr	s14, [r0, #4]
 8001b70:	edd1 6a00 	vldr	s13, [r1]
 8001b74:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001b78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b7c:	edc2 7a02 	vstr	s15, [r2, #8]
}
 8001b80:	4770      	bx	lr
	...

08001b84 <vec_mag_f32>:

float vec_mag_f32(float* vec) {
	float mag = (vec[0]*vec[0]) + (vec[1]*vec[1]) + (vec[2]*vec[2]);
 8001b84:	ed90 0a00 	vldr	s0, [r0]
 8001b88:	ee20 0a00 	vmul.f32	s0, s0, s0
 8001b8c:	edd0 7a01 	vldr	s15, [r0, #4]
 8001b90:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b94:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001b98:	edd0 7a02 	vldr	s15, [r0, #8]
 8001b9c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ba0:	ee30 0a27 	vadd.f32	s0, s0, s15
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001ba4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bac:	db03      	blt.n	8001bb6 <vec_mag_f32+0x32>
float vec_mag_f32(float* vec) {
 8001bae:	b508      	push	{r3, lr}
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8001bb0:	f004 fbd6 	bl	8006360 <sqrtf>
	arm_sqrt_f32(mag, &mag);
	return mag;
}
 8001bb4:	bd08      	pop	{r3, pc}

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8001bb6:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8001bbc <vec_mag_f32+0x38>
 8001bba:	4770      	bx	lr
 8001bbc:	00000000 	.word	0x00000000

08001bc0 <calculateAvgAngularRate>:
		SensorData* IMU1_data) {
 8001bc0:	b510      	push	{r4, lr}
	getNextGyroReading(IMU0_data, IMU1_data, w_avg_b0_f32);
 8001bc2:	4c05      	ldr	r4, [pc, #20]	; (8001bd8 <calculateAvgAngularRate+0x18>)
 8001bc4:	4622      	mov	r2, r4
 8001bc6:	f7ff fcd1 	bl	800156c <getNextGyroReading>
	w_avg_b0_mag = vec_mag_f32(w_avg_b0_f32);
 8001bca:	4620      	mov	r0, r4
 8001bcc:	f7ff ffda 	bl	8001b84 <vec_mag_f32>
 8001bd0:	4b02      	ldr	r3, [pc, #8]	; (8001bdc <calculateAvgAngularRate+0x1c>)
 8001bd2:	ed83 0a00 	vstr	s0, [r3]
}
 8001bd6:	bd10      	pop	{r4, pc}
 8001bd8:	20000584 	.word	0x20000584
 8001bdc:	20000590 	.word	0x20000590

08001be0 <initQuaternions>:
void initQuaternions(SensorData* IMU0_data, SensorData* IMU1_data) {
 8001be0:	b5d0      	push	{r4, r6, r7, lr}
 8001be2:	ed2d 8b02 	vpush	{d8}
 8001be6:	b096      	sub	sp, #88	; 0x58
	avg_XL[0] = (IMU0_data->XL_X + IMU1_data->XL_X) / 2;
 8001be8:	ed90 7a00 	vldr	s14, [r0]
 8001bec:	edd1 7a00 	vldr	s15, [r1]
 8001bf0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bf4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001bf8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001bfc:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
	avg_XL[1] = (IMU0_data->XL_Y + IMU1_data->XL_Y) / 2;
 8001c00:	ed90 7a01 	vldr	s14, [r0, #4]
 8001c04:	edd1 7a01 	vldr	s15, [r1, #4]
 8001c08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c0c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001c10:	ed8d 7a14 	vstr	s14, [sp, #80]	; 0x50
	avg_XL[2] = (IMU0_data->XL_Z + IMU1_data->XL_Z) / 2;
 8001c14:	edd0 7a02 	vldr	s15, [r0, #8]
 8001c18:	ed91 7a02 	vldr	s14, [r1, #8]
 8001c1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c20:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c24:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
	float mag_avg_XL = vec_mag_f32(avg_XL);
 8001c28:	a813      	add	r0, sp, #76	; 0x4c
 8001c2a:	f7ff ffab 	bl	8001b84 <vec_mag_f32>
	avg_XL[0] /= mag_avg_XL;
 8001c2e:	ed9d 7a13 	vldr	s14, [sp, #76]	; 0x4c
 8001c32:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8001c36:	edcd 7a13 	vstr	s15, [sp, #76]	; 0x4c
	avg_XL[1] /= mag_avg_XL;
 8001c3a:	ed9d 7a14 	vldr	s14, [sp, #80]	; 0x50
 8001c3e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8001c42:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
	avg_XL[2] /= mag_avg_XL;
 8001c46:	ed9d 7a15 	vldr	s14, [sp, #84]	; 0x54
 8001c4a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8001c4e:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
	float norm_g[3] = {0,0,1}; // Normalized vector for g_nav
 8001c52:	2300      	movs	r3, #0
 8001c54:	9310      	str	r3, [sp, #64]	; 0x40
 8001c56:	9311      	str	r3, [sp, #68]	; 0x44
 8001c58:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001c5c:	9312      	str	r3, [sp, #72]	; 0x48
	float dot_prod = dot_f32(avg_XL, norm_g);
 8001c5e:	a910      	add	r1, sp, #64	; 0x40
 8001c60:	a813      	add	r0, sp, #76	; 0x4c
 8001c62:	f7ff fe49 	bl	80018f8 <dot_f32>
 8001c66:	ee10 4a10 	vmov	r4, s0
	cross_f32(avg_XL, norm_g, cross_prod);
 8001c6a:	aa09      	add	r2, sp, #36	; 0x24
 8001c6c:	a910      	add	r1, sp, #64	; 0x40
 8001c6e:	a813      	add	r0, sp, #76	; 0x4c
 8001c70:	f7ff ff56 	bl	8001b20 <cross_f32>
	if (dot_prod > 0.999999) {
 8001c74:	4620      	mov	r0, r4
 8001c76:	f7fe fc5f 	bl	8000538 <__aeabi_f2d>
 8001c7a:	4606      	mov	r6, r0
 8001c7c:	460f      	mov	r7, r1
 8001c7e:	a343      	add	r3, pc, #268	; (adr r3, 8001d8c <initQuaternions+0x1ac>)
 8001c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c84:	f7fe ff40 	bl	8000b08 <__aeabi_dcmpgt>
 8001c88:	b168      	cbz	r0, 8001ca6 <initQuaternions+0xc6>
		q_f32[0] = 1;
 8001c8a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001c8e:	930c      	str	r3, [sp, #48]	; 0x30
		q_f32[1] = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	930d      	str	r3, [sp, #52]	; 0x34
		q_f32[2] = 0;
 8001c94:	930e      	str	r3, [sp, #56]	; 0x38
		q_f32[3] = 0;
 8001c96:	930f      	str	r3, [sp, #60]	; 0x3c
	arm_quaternion_normalize_f32(q_f32, q_f32, 1); // normalize initial quaternion
 8001c98:	2201      	movs	r2, #1
 8001c9a:	a90c      	add	r1, sp, #48	; 0x30
 8001c9c:	4608      	mov	r0, r1
 8001c9e:	f002 ff58 	bl	8004b52 <arm_quaternion_normalize_f32>
	for(i = 0; i < 4; ++i) {
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	e065      	b.n	8001d72 <initQuaternions+0x192>
	} else if (dot_prod < -0.999999) {
 8001ca6:	a33b      	add	r3, pc, #236	; (adr r3, 8001d94 <initQuaternions+0x1b4>)
 8001ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cac:	4630      	mov	r0, r6
 8001cae:	4639      	mov	r1, r7
 8001cb0:	f7fe ff0c 	bl	8000acc <__aeabi_dcmplt>
 8001cb4:	b970      	cbnz	r0, 8001cd4 <initQuaternions+0xf4>
		q_f32[0] = 1 + dot_prod;
 8001cb6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001cba:	ee07 4a10 	vmov	s14, r4
 8001cbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc2:	edcd 7a0c 	vstr	s15, [sp, #48]	; 0x30
		q_f32[1] = cross_prod[0];
 8001cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001cc8:	930d      	str	r3, [sp, #52]	; 0x34
		q_f32[2] = cross_prod[1];
 8001cca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001ccc:	930e      	str	r3, [sp, #56]	; 0x38
		q_f32[3] = cross_prod[2];
 8001cce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001cd0:	930f      	str	r3, [sp, #60]	; 0x3c
 8001cd2:	e7e1      	b.n	8001c98 <initQuaternions+0xb8>
		float xUnit[3] = {1,0,0};
 8001cd4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001cd8:	9200      	str	r2, [sp, #0]
 8001cda:	2300      	movs	r3, #0
 8001cdc:	9301      	str	r3, [sp, #4]
 8001cde:	9302      	str	r3, [sp, #8]
		float yUnit[3] = {0,1,0};
 8001ce0:	9303      	str	r3, [sp, #12]
 8001ce2:	9204      	str	r2, [sp, #16]
 8001ce4:	9305      	str	r3, [sp, #20]
        cross_f32(xUnit, avg_XL, tempVec);
 8001ce6:	aa06      	add	r2, sp, #24
 8001ce8:	a913      	add	r1, sp, #76	; 0x4c
 8001cea:	4668      	mov	r0, sp
 8001cec:	f7ff ff18 	bl	8001b20 <cross_f32>
        float tempVecMag = vec_mag_f32(tempVec);
 8001cf0:	a806      	add	r0, sp, #24
 8001cf2:	f7ff ff47 	bl	8001b84 <vec_mag_f32>
 8001cf6:	eeb0 8a40 	vmov.f32	s16, s0
        if (tempVecMag < 0.000001) {
 8001cfa:	ee10 0a10 	vmov	r0, s0
 8001cfe:	f7fe fc1b 	bl	8000538 <__aeabi_f2d>
 8001d02:	a326      	add	r3, pc, #152	; (adr r3, 8001d9c <initQuaternions+0x1bc>)
 8001d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d08:	f7fe fee0 	bl	8000acc <__aeabi_dcmplt>
 8001d0c:	b9a0      	cbnz	r0, 8001d38 <initQuaternions+0x158>
        q_f32[0] = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	930c      	str	r3, [sp, #48]	; 0x30
        q_f32[1] = tempVec[0] / tempVecMag;
 8001d12:	ed9d 7a06 	vldr	s14, [sp, #24]
 8001d16:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8001d1a:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
        q_f32[2] = tempVec[1] / tempVecMag;
 8001d1e:	ed9d 7a07 	vldr	s14, [sp, #28]
 8001d22:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8001d26:	edcd 7a0e 	vstr	s15, [sp, #56]	; 0x38
        q_f32[3] = tempVec[2] / tempVecMag;
 8001d2a:	ed9d 7a08 	vldr	s14, [sp, #32]
 8001d2e:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8001d32:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 8001d36:	e7af      	b.n	8001c98 <initQuaternions+0xb8>
            cross_f32(yUnit, avg_XL, tempVec);
 8001d38:	aa06      	add	r2, sp, #24
 8001d3a:	a913      	add	r1, sp, #76	; 0x4c
 8001d3c:	a803      	add	r0, sp, #12
 8001d3e:	f7ff feef 	bl	8001b20 <cross_f32>
			tempVecMag = vec_mag_f32(tempVec);
 8001d42:	a806      	add	r0, sp, #24
 8001d44:	f7ff ff1e 	bl	8001b84 <vec_mag_f32>
 8001d48:	eeb0 8a40 	vmov.f32	s16, s0
 8001d4c:	e7df      	b.n	8001d0e <initQuaternions+0x12e>
		q_gyro_f32[i] = q_f32[i];
 8001d4e:	aa16      	add	r2, sp, #88	; 0x58
 8001d50:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001d54:	f852 1c28 	ldr.w	r1, [r2, #-40]
 8001d58:	4a09      	ldr	r2, [pc, #36]	; (8001d80 <initQuaternions+0x1a0>)
 8001d5a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001d5e:	6011      	str	r1, [r2, #0]
		q_accel_f32[i] = q_f32[i];
 8001d60:	4a08      	ldr	r2, [pc, #32]	; (8001d84 <initQuaternions+0x1a4>)
 8001d62:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001d66:	6011      	str	r1, [r2, #0]
		q_true_f32[i] = q_f32[i];
 8001d68:	4a07      	ldr	r2, [pc, #28]	; (8001d88 <initQuaternions+0x1a8>)
 8001d6a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001d6e:	6011      	str	r1, [r2, #0]
	for(i = 0; i < 4; ++i) {
 8001d70:	3301      	adds	r3, #1
 8001d72:	2b03      	cmp	r3, #3
 8001d74:	ddeb      	ble.n	8001d4e <initQuaternions+0x16e>
}
 8001d76:	b016      	add	sp, #88	; 0x58
 8001d78:	ecbd 8b02 	vpop	{d8}
 8001d7c:	bdd0      	pop	{r4, r6, r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000398 	.word	0x20000398
 8001d84:	20000388 	.word	0x20000388
 8001d88:	200003a8 	.word	0x200003a8
 8001d8c:	e7210be9 	.word	0xe7210be9
 8001d90:	3feffffd 	.word	0x3feffffd
 8001d94:	e7210be9 	.word	0xe7210be9
 8001d98:	bfeffffd 	.word	0xbfeffffd
 8001d9c:	a0b5ed8d 	.word	0xa0b5ed8d
 8001da0:	3eb0c6f7 	.word	0x3eb0c6f7

08001da4 <initRingBuffers>:
	float bData[3] = {b->pData[0], b->pData[1], b->pData[2]};

	cross_f32(aData, bData, c->pData);
}

void initRingBuffers(SensorData* IMU0_data, SensorData* IMU1_data) {
 8001da4:	b084      	sub	sp, #16
	float w_avg_tmp[3];
	w_avg_tmp[0] = (IMU0_data->G_X + IMU1_data->G_X) / 2;
 8001da6:	edd0 6a03 	vldr	s13, [r0, #12]
 8001daa:	edd1 7a03 	vldr	s15, [r1, #12]
 8001dae:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001db2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001db6:	ee66 6a86 	vmul.f32	s13, s13, s12
 8001dba:	edcd 6a01 	vstr	s13, [sp, #4]
	w_avg_tmp[1] = (IMU0_data->G_Y + IMU1_data->G_Y) / 2;
 8001dbe:	ed90 7a04 	vldr	s14, [r0, #16]
 8001dc2:	edd1 7a04 	vldr	s15, [r1, #16]
 8001dc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dca:	ee27 7a06 	vmul.f32	s14, s14, s12
 8001dce:	ed8d 7a02 	vstr	s14, [sp, #8]
	w_avg_tmp[2] = (IMU0_data->G_Z + IMU1_data->G_Z) / 2;
 8001dd2:	edd0 7a05 	vldr	s15, [r0, #20]
 8001dd6:	edd1 5a05 	vldr	s11, [r1, #20]
 8001dda:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8001dde:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001de2:	edcd 7a03 	vstr	s15, [sp, #12]

	int i;
	for(i = 0; i < RING_SIZE; ++i) {
 8001de6:	2300      	movs	r3, #0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	dd01      	ble.n	8001df0 <initRingBuffers+0x4c>
		xl0_avg_z_ring[i] = IMU0_data->XL_Z;
		xl1_avg_x_ring[i] = IMU1_data->XL_X;
		xl1_avg_y_ring[i] = IMU1_data->XL_Y;
		xl1_avg_z_ring[i] = IMU1_data->XL_Z;
	}
}
 8001dec:	b004      	add	sp, #16
 8001dee:	4770      	bx	lr
		w_avg_x_ring[i] = w_avg_tmp[0];
 8001df0:	4a1d      	ldr	r2, [pc, #116]	; (8001e68 <initRingBuffers+0xc4>)
 8001df2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001df6:	edc2 6a00 	vstr	s13, [r2]
		w_avg_y_ring[i] = w_avg_tmp[1];
 8001dfa:	4a1c      	ldr	r2, [pc, #112]	; (8001e6c <initRingBuffers+0xc8>)
 8001dfc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001e00:	ed82 7a00 	vstr	s14, [r2]
		w_avg_z_ring[i] = w_avg_tmp[2];
 8001e04:	4a1a      	ldr	r2, [pc, #104]	; (8001e70 <initRingBuffers+0xcc>)
 8001e06:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001e0a:	edc2 7a00 	vstr	s15, [r2]
		xl0_avg_x_ring[i] = IMU0_data->XL_X;
 8001e0e:	f8d0 c000 	ldr.w	ip, [r0]
 8001e12:	4a18      	ldr	r2, [pc, #96]	; (8001e74 <initRingBuffers+0xd0>)
 8001e14:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001e18:	f8c2 c000 	str.w	ip, [r2]
		xl0_avg_y_ring[i] = IMU0_data->XL_Y;
 8001e1c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8001e20:	4a15      	ldr	r2, [pc, #84]	; (8001e78 <initRingBuffers+0xd4>)
 8001e22:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001e26:	f8c2 c000 	str.w	ip, [r2]
		xl0_avg_z_ring[i] = IMU0_data->XL_Z;
 8001e2a:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8001e2e:	4a13      	ldr	r2, [pc, #76]	; (8001e7c <initRingBuffers+0xd8>)
 8001e30:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001e34:	f8c2 c000 	str.w	ip, [r2]
		xl1_avg_x_ring[i] = IMU1_data->XL_X;
 8001e38:	f8d1 c000 	ldr.w	ip, [r1]
 8001e3c:	4a10      	ldr	r2, [pc, #64]	; (8001e80 <initRingBuffers+0xdc>)
 8001e3e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001e42:	f8c2 c000 	str.w	ip, [r2]
		xl1_avg_y_ring[i] = IMU1_data->XL_Y;
 8001e46:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8001e4a:	4a0e      	ldr	r2, [pc, #56]	; (8001e84 <initRingBuffers+0xe0>)
 8001e4c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001e50:	f8c2 c000 	str.w	ip, [r2]
		xl1_avg_z_ring[i] = IMU1_data->XL_Z;
 8001e54:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8001e58:	4a0b      	ldr	r2, [pc, #44]	; (8001e88 <initRingBuffers+0xe4>)
 8001e5a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001e5e:	f8c2 c000 	str.w	ip, [r2]
	for(i = 0; i < RING_SIZE; ++i) {
 8001e62:	3301      	adds	r3, #1
 8001e64:	e7c0      	b.n	8001de8 <initRingBuffers+0x44>
 8001e66:	bf00      	nop
 8001e68:	20000594 	.word	0x20000594
 8001e6c:	20000598 	.word	0x20000598
 8001e70:	2000059c 	.word	0x2000059c
 8001e74:	200005b4 	.word	0x200005b4
 8001e78:	200005b8 	.word	0x200005b8
 8001e7c:	200005bc 	.word	0x200005bc
 8001e80:	200005c0 	.word	0x200005c0
 8001e84:	200005c4 	.word	0x200005c4
 8001e88:	200005c8 	.word	0x200005c8

08001e8c <init_comp_processing>:
void init_comp_processing(SensorData* IMU0_data, SensorData* IMU1_data) {
 8001e8c:	b538      	push	{r3, r4, r5, lr}
 8001e8e:	4604      	mov	r4, r0
 8001e90:	460d      	mov	r5, r1
	arm_mat_init_f32(&m_b0, numRows, numCols, m_b0_f32);
 8001e92:	4b20      	ldr	r3, [pc, #128]	; (8001f14 <init_comp_processing+0x88>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	2103      	movs	r1, #3
 8001e98:	481f      	ldr	r0, [pc, #124]	; (8001f18 <init_comp_processing+0x8c>)
 8001e9a:	f002 fd82 	bl	80049a2 <arm_mat_init_f32>
	arm_mat_init_f32(&g_n, numRows, numCols, g_n_f32);
 8001e9e:	4b1f      	ldr	r3, [pc, #124]	; (8001f1c <init_comp_processing+0x90>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	2103      	movs	r1, #3
 8001ea4:	481e      	ldr	r0, [pc, #120]	; (8001f20 <init_comp_processing+0x94>)
 8001ea6:	f002 fd7c 	bl	80049a2 <arm_mat_init_f32>
	arm_mat_init_f32(&w_avg_b0, numRows, numCols, w_avg_b0_f32);
 8001eaa:	4b1e      	ldr	r3, [pc, #120]	; (8001f24 <init_comp_processing+0x98>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	2103      	movs	r1, #3
 8001eb0:	481d      	ldr	r0, [pc, #116]	; (8001f28 <init_comp_processing+0x9c>)
 8001eb2:	f002 fd76 	bl	80049a2 <arm_mat_init_f32>
	arm_mat_init_f32(&rotation_b0_n, numRows, numCols, rotation_b0_n_f32);
 8001eb6:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <init_comp_processing+0xa0>)
 8001eb8:	2203      	movs	r2, #3
 8001eba:	4611      	mov	r1, r2
 8001ebc:	481c      	ldr	r0, [pc, #112]	; (8001f30 <init_comp_processing+0xa4>)
 8001ebe:	f002 fd70 	bl	80049a2 <arm_mat_init_f32>
	arm_mat_init_f32(&x_prev, numRows, numCols, x_prev_f32);
 8001ec2:	4b1c      	ldr	r3, [pc, #112]	; (8001f34 <init_comp_processing+0xa8>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	210c      	movs	r1, #12
 8001ec8:	481b      	ldr	r0, [pc, #108]	; (8001f38 <init_comp_processing+0xac>)
 8001eca:	f002 fd6a 	bl	80049a2 <arm_mat_init_f32>
	arm_mat_init_f32(&x_curr, numRows, numCols, x_curr_f32);
 8001ece:	4b1b      	ldr	r3, [pc, #108]	; (8001f3c <init_comp_processing+0xb0>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	210c      	movs	r1, #12
 8001ed4:	481a      	ldr	r0, [pc, #104]	; (8001f40 <init_comp_processing+0xb4>)
 8001ed6:	f002 fd64 	bl	80049a2 <arm_mat_init_f32>
	arm_mat_init_f32(&F_matrix, numRows, numCols, F_matrix_f32);
 8001eda:	4b1a      	ldr	r3, [pc, #104]	; (8001f44 <init_comp_processing+0xb8>)
 8001edc:	220c      	movs	r2, #12
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4819      	ldr	r0, [pc, #100]	; (8001f48 <init_comp_processing+0xbc>)
 8001ee2:	f002 fd5e 	bl	80049a2 <arm_mat_init_f32>
	arm_mat_init_f32(&B_matrix, numRows, numCols, B_matrix_f32);
 8001ee6:	4b19      	ldr	r3, [pc, #100]	; (8001f4c <init_comp_processing+0xc0>)
 8001ee8:	2206      	movs	r2, #6
 8001eea:	210c      	movs	r1, #12
 8001eec:	4818      	ldr	r0, [pc, #96]	; (8001f50 <init_comp_processing+0xc4>)
 8001eee:	f002 fd58 	bl	80049a2 <arm_mat_init_f32>
	arm_mat_init_f32(&u_curr, numRows, numCols, u_curr_f32);
 8001ef2:	4b18      	ldr	r3, [pc, #96]	; (8001f54 <init_comp_processing+0xc8>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	2106      	movs	r1, #6
 8001ef8:	4817      	ldr	r0, [pc, #92]	; (8001f58 <init_comp_processing+0xcc>)
 8001efa:	f002 fd52 	bl	80049a2 <arm_mat_init_f32>
	initZUPT(); // Initialize ZUPT phase detector
 8001efe:	f7ff fc31 	bl	8001764 <initZUPT>
	initRingBuffers(IMU0_data, IMU1_data);
 8001f02:	4629      	mov	r1, r5
 8001f04:	4620      	mov	r0, r4
 8001f06:	f7ff ff4d 	bl	8001da4 <initRingBuffers>
	initQuaternions(IMU0_data, IMU1_data);
 8001f0a:	4629      	mov	r1, r5
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	f7ff fe67 	bl	8001be0 <initQuaternions>
}
 8001f12:	bd38      	pop	{r3, r4, r5, pc}
 8001f14:	08007eac 	.word	0x08007eac
 8001f18:	20000508 	.word	0x20000508
 8001f1c:	08007ea0 	.word	0x08007ea0
 8001f20:	200004f4 	.word	0x200004f4
 8001f24:	20000584 	.word	0x20000584
 8001f28:	2000057c 	.word	0x2000057c
 8001f2c:	20000538 	.word	0x20000538
 8001f30:	20000530 	.word	0x20000530
 8001f34:	200003e8 	.word	0x200003e8
 8001f38:	200005ac 	.word	0x200005ac
 8001f3c:	200003b8 	.word	0x200003b8
 8001f40:	200005a4 	.word	0x200005a4
 8001f44:	20000144 	.word	0x20000144
 8001f48:	200004dc 	.word	0x200004dc
 8001f4c:	20000024 	.word	0x20000024
 8001f50:	200004d4 	.word	0x200004d4
 8001f54:	20000564 	.word	0x20000564
 8001f58:	2000055c 	.word	0x2000055c

08001f5c <updateFMatrix>:

void updateFMatrix(
		float timeDelta) {

	int i;
	for(i = 0; i < 6; ++i) { // Update specific indices of F matrix
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	e00a      	b.n	8001f76 <updateFMatrix+0x1a>
		F_matrix_f32[6 + (13*i)] = timeDelta;
 8001f60:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001f64:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8001f68:	3206      	adds	r2, #6
 8001f6a:	4904      	ldr	r1, [pc, #16]	; (8001f7c <updateFMatrix+0x20>)
 8001f6c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001f70:	ed82 0a00 	vstr	s0, [r2]
	for(i = 0; i < 6; ++i) { // Update specific indices of F matrix
 8001f74:	3301      	adds	r3, #1
 8001f76:	2b05      	cmp	r3, #5
 8001f78:	ddf2      	ble.n	8001f60 <updateFMatrix+0x4>
	}
}
 8001f7a:	4770      	bx	lr
 8001f7c:	20000144 	.word	0x20000144

08001f80 <updateBMatrix>:

void updateBMatrix(
		float timeDelta) { // TODO Verify this

	float dt2 = timeDelta * timeDelta / 2;
 8001f80:	ee60 7a00 	vmul.f32	s15, s0, s0
 8001f84:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001f88:	ee67 7a87 	vmul.f32	s15, s15, s14

	int i;
	for(i = 0; i < 6; ++i) { // Update specific indices of B matrix with (timeDelta^2)/2
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	e007      	b.n	8001fa0 <updateBMatrix+0x20>
		B_matrix_f32[(7*i)] = dt2;
 8001f90:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8001f94:	4a0b      	ldr	r2, [pc, #44]	; (8001fc4 <updateBMatrix+0x44>)
 8001f96:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8001f9a:	edc2 7a00 	vstr	s15, [r2]
	for(i = 0; i < 6; ++i) { // Update specific indices of B matrix with (timeDelta^2)/2
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	2b05      	cmp	r3, #5
 8001fa2:	ddf5      	ble.n	8001f90 <updateBMatrix+0x10>
	}

	for(i = 0; i < 6; ++i) { // Update specific indices of B matrix with timeDelta
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	e009      	b.n	8001fbc <updateBMatrix+0x3c>
		B_matrix_f32[36 + (7*i)] = timeDelta;
 8001fa8:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8001fac:	f102 0124 	add.w	r1, r2, #36	; 0x24
 8001fb0:	4a04      	ldr	r2, [pc, #16]	; (8001fc4 <updateBMatrix+0x44>)
 8001fb2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8001fb6:	ed82 0a00 	vstr	s0, [r2]
	for(i = 0; i < 6; ++i) { // Update specific indices of B matrix with timeDelta
 8001fba:	3301      	adds	r3, #1
 8001fbc:	2b05      	cmp	r3, #5
 8001fbe:	ddf3      	ble.n	8001fa8 <updateBMatrix+0x28>
	}
}
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000024 	.word	0x20000024

08001fc8 <updateUVector>:

void updateUVector(
		SensorData* IMU0_data,
		SensorData* IMU1_data) {
 8001fc8:	b530      	push	{r4, r5, lr}
 8001fca:	b095      	sub	sp, #84	; 0x54

	/*
	 *  Define Temporary Objects
	 */

	getNextXLReading(IMU0_data, IMU1_data, xl_b0_f32, xl_b1_f32);
 8001fcc:	4c2a      	ldr	r4, [pc, #168]	; (8002078 <updateUVector+0xb0>)
 8001fce:	4d2b      	ldr	r5, [pc, #172]	; (800207c <updateUVector+0xb4>)
 8001fd0:	4623      	mov	r3, r4
 8001fd2:	462a      	mov	r2, r5
 8001fd4:	f7ff fb2e 	bl	8001634 <getNextXLReading>

	float temp0_f32[3] = {xl_b0_f32[0], xl_b0_f32[1], xl_b0_f32[2]}; // Init with IMU0 acceleration
 8001fd8:	682b      	ldr	r3, [r5, #0]
 8001fda:	9311      	str	r3, [sp, #68]	; 0x44
 8001fdc:	686b      	ldr	r3, [r5, #4]
 8001fde:	9312      	str	r3, [sp, #72]	; 0x48
 8001fe0:	68ab      	ldr	r3, [r5, #8]
 8001fe2:	9313      	str	r3, [sp, #76]	; 0x4c
	arm_matrix_instance_f32 temp0;
	arm_mat_init_f32(&temp0, 3, 1, temp0_f32); // temp for IMU0 vector
 8001fe4:	ab11      	add	r3, sp, #68	; 0x44
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	2103      	movs	r1, #3
 8001fea:	a80f      	add	r0, sp, #60	; 0x3c
 8001fec:	f002 fcd9 	bl	80049a2 <arm_mat_init_f32>

	float temp1_f32[3] = {xl_b1_f32[0], xl_b1_f32[1], xl_b1_f32[2]}; // Init with IMU1 acceleration
 8001ff0:	6823      	ldr	r3, [r4, #0]
 8001ff2:	930c      	str	r3, [sp, #48]	; 0x30
 8001ff4:	6863      	ldr	r3, [r4, #4]
 8001ff6:	930d      	str	r3, [sp, #52]	; 0x34
 8001ff8:	68a3      	ldr	r3, [r4, #8]
 8001ffa:	930e      	str	r3, [sp, #56]	; 0x38
	arm_matrix_instance_f32 temp1;
	arm_mat_init_f32(&temp1, 3, 1, temp1_f32); // temp for IMU1 vector
 8001ffc:	ab0c      	add	r3, sp, #48	; 0x30
 8001ffe:	2201      	movs	r2, #1
 8002000:	2103      	movs	r1, #3
 8002002:	a80a      	add	r0, sp, #40	; 0x28
 8002004:	f002 fccd 	bl	80049a2 <arm_mat_init_f32>

	float temp2_f32[3] = {0,0,0};
 8002008:	2400      	movs	r4, #0
 800200a:	9407      	str	r4, [sp, #28]
 800200c:	9408      	str	r4, [sp, #32]
 800200e:	9409      	str	r4, [sp, #36]	; 0x24
	arm_matrix_instance_f32 temp2;
	arm_mat_init_f32(&temp2, 3, 1, temp2_f32); // temp for rotated IMU0 vector
 8002010:	ab07      	add	r3, sp, #28
 8002012:	2201      	movs	r2, #1
 8002014:	2103      	movs	r1, #3
 8002016:	a805      	add	r0, sp, #20
 8002018:	f002 fcc3 	bl	80049a2 <arm_mat_init_f32>

	float temp3_f32[3] = {0,0,0};
 800201c:	9402      	str	r4, [sp, #8]
 800201e:	9403      	str	r4, [sp, #12]
 8002020:	9404      	str	r4, [sp, #16]
	arm_matrix_instance_f32 temp3;
	arm_mat_init_f32(&temp3, 3, 1, temp3_f32); // temp for rotated IMU1 vector
 8002022:	ab02      	add	r3, sp, #8
 8002024:	2201      	movs	r2, #1
 8002026:	2103      	movs	r1, #3
 8002028:	4668      	mov	r0, sp
 800202a:	f002 fcba 	bl	80049a2 <arm_mat_init_f32>
	/*
	 *  Calculation Section
	 */

	// Rotate IMU0 XL from board frame to nav frame
	arm_mat_mult_f32(&rotation_b0_n, &temp0, &temp2);	// R_b0_n*a0_b0 --> (3x3) * (3x1)
 800202e:	4c14      	ldr	r4, [pc, #80]	; (8002080 <updateUVector+0xb8>)
 8002030:	aa05      	add	r2, sp, #20
 8002032:	a90f      	add	r1, sp, #60	; 0x3c
 8002034:	4620      	mov	r0, r4
 8002036:	f002 fcb9 	bl	80049ac <arm_mat_mult_f32>

	//printf("%f %f %f \n", temp2_f32[0], temp2_f32[1], temp2_f32[2]);

	// Rotate IMU1 XL from board frame to nav frame
	arm_mat_mult_f32(&rotation_b0_n, &temp1, &temp3);	// R_b0_n*a1_b0 --> (3x3) * (3x1)
 800203a:	466a      	mov	r2, sp
 800203c:	a90a      	add	r1, sp, #40	; 0x28
 800203e:	4620      	mov	r0, r4
 8002040:	f002 fcb4 	bl	80049ac <arm_mat_mult_f32>

	// Subtract gravitation vector from IMU0 XL vector
	arm_mat_sub_f32(&temp2, &g_n, &temp0);
 8002044:	4c0f      	ldr	r4, [pc, #60]	; (8002084 <updateUVector+0xbc>)
 8002046:	aa0f      	add	r2, sp, #60	; 0x3c
 8002048:	4621      	mov	r1, r4
 800204a:	a805      	add	r0, sp, #20
 800204c:	f002 fce8 	bl	8004a20 <arm_mat_sub_f32>

	// Subtract gravitation vector from IMU1 XL vector
	arm_mat_sub_f32(&temp3, &g_n, &temp1);
 8002050:	aa0a      	add	r2, sp, #40	; 0x28
 8002052:	4621      	mov	r1, r4
 8002054:	4668      	mov	r0, sp
 8002056:	f002 fce3 	bl	8004a20 <arm_mat_sub_f32>
	/*
	 *  Update Section
	 */

	// Fill u input vector with IMU0 data
	u_curr_f32[0] = temp0_f32[0];
 800205a:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <updateUVector+0xc0>)
 800205c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800205e:	601a      	str	r2, [r3, #0]
	u_curr_f32[1] = temp0_f32[1];
 8002060:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002062:	605a      	str	r2, [r3, #4]
	u_curr_f32[2] = temp0_f32[2];
 8002064:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8002066:	609a      	str	r2, [r3, #8]

	// Fill u input vector with IMU1 data
	u_curr_f32[3] = temp1_f32[0];
 8002068:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800206a:	60da      	str	r2, [r3, #12]
	u_curr_f32[4] = temp1_f32[1];
 800206c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800206e:	611a      	str	r2, [r3, #16]
	u_curr_f32[5] = temp1_f32[2];
 8002070:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002072:	615a      	str	r2, [r3, #20]
}
 8002074:	b015      	add	sp, #84	; 0x54
 8002076:	bd30      	pop	{r4, r5, pc}
 8002078:	200005d8 	.word	0x200005d8
 800207c:	200005cc 	.word	0x200005cc
 8002080:	20000530 	.word	0x20000530
 8002084:	200004f4 	.word	0x200004f4
 8002088:	20000564 	.word	0x20000564

0800208c <calculateCompCorrectedState>:
void calculateCompCorrectedState(SensorData* IMU0_data, SensorData* IMU1_data, float timeDelta) {
 800208c:	b538      	push	{r3, r4, r5, lr}
 800208e:	ed2d 8b02 	vpush	{d8}
 8002092:	4604      	mov	r4, r0
 8002094:	460d      	mov	r5, r1
 8002096:	eeb0 8a40 	vmov.f32	s16, s0
	updateFMatrix(timeDelta);	// Update F with new timeDelta
 800209a:	f7ff ff5f 	bl	8001f5c <updateFMatrix>
	updateBMatrix(timeDelta);	// Update B with new timeDelta
 800209e:	eeb0 0a48 	vmov.f32	s0, s16
 80020a2:	f7ff ff6d 	bl	8001f80 <updateBMatrix>
	calculateRotationMatrix();	// R_b0_n
 80020a6:	f7ff f9b1 	bl	800140c <calculateRotationMatrix>
	updateUVector(IMU0_data, IMU1_data);	// Update u_curr with IMU data
 80020aa:	4629      	mov	r1, r5
 80020ac:	4620      	mov	r0, r4
 80020ae:	f7ff ff8b 	bl	8001fc8 <updateUVector>
	calculateAvgAngularRate(IMU0_data, IMU1_data); // w_avg_b0
 80020b2:	4629      	mov	r1, r5
 80020b4:	4620      	mov	r0, r4
 80020b6:	f7ff fd83 	bl	8001bc0 <calculateAvgAngularRate>
	updateGyroQuat(timeDelta);
 80020ba:	eeb0 0a48 	vmov.f32	s0, s16
 80020be:	f7ff f929 	bl	8001314 <updateGyroQuat>
	updateAccelQuat(timeDelta);
 80020c2:	eeb0 0a48 	vmov.f32	s0, s16
 80020c6:	f7ff f993 	bl	80013f0 <updateAccelQuat>
	phase = detectZUPTPhase();
 80020ca:	f7ff fb65 	bl	8001798 <detectZUPTPhase>
 80020ce:	4604      	mov	r4, r0
	quatSLERP(q_accel_f32, q_gyro_f32, q_true_f32, alpha); // Weighted interpolation between qX, qG --> qT
 80020d0:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8002128 <calculateCompCorrectedState+0x9c>
 80020d4:	4a15      	ldr	r2, [pc, #84]	; (800212c <calculateCompCorrectedState+0xa0>)
 80020d6:	4916      	ldr	r1, [pc, #88]	; (8002130 <calculateCompCorrectedState+0xa4>)
 80020d8:	4816      	ldr	r0, [pc, #88]	; (8002134 <calculateCompCorrectedState+0xa8>)
 80020da:	f7ff fc25 	bl	8001928 <quatSLERP>
	calculateStateEstimation();	// x(k) = F*x(k-1) + B*u(k)
 80020de:	f7ff f9a1 	bl	8001424 <calculateStateEstimation>
	if (phase == STANCE) {
 80020e2:	2c01      	cmp	r4, #1
 80020e4:	d006      	beq.n	80020f4 <calculateCompCorrectedState+0x68>
	updatePreviousMatrices();	// update x_prev, P_prev, (Q_prev?) // TODO Add Q_prev to this?
 80020e6:	f7ff fbf1 	bl	80018cc <updatePreviousMatrices>
	phase_out = phase;
 80020ea:	4b13      	ldr	r3, [pc, #76]	; (8002138 <calculateCompCorrectedState+0xac>)
 80020ec:	601c      	str	r4, [r3, #0]
}
 80020ee:	ecbd 8b02 	vpop	{d8}
 80020f2:	bd38      	pop	{r3, r4, r5, pc}
		x_curr_f32[2] = 0;
 80020f4:	4b11      	ldr	r3, [pc, #68]	; (800213c <calculateCompCorrectedState+0xb0>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	609a      	str	r2, [r3, #8]
		x_curr_f32[5] = 0;
 80020fa:	615a      	str	r2, [r3, #20]
		for (i = 6; i < 12; ++i) {
 80020fc:	2306      	movs	r3, #6
 80020fe:	e005      	b.n	800210c <calculateCompCorrectedState+0x80>
			x_curr_f32[i] = 0;
 8002100:	4a0e      	ldr	r2, [pc, #56]	; (800213c <calculateCompCorrectedState+0xb0>)
 8002102:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8002106:	2100      	movs	r1, #0
 8002108:	6011      	str	r1, [r2, #0]
		for (i = 6; i < 12; ++i) {
 800210a:	3301      	adds	r3, #1
 800210c:	2b0b      	cmp	r3, #11
 800210e:	ddf7      	ble.n	8002100 <calculateCompCorrectedState+0x74>
			x_curr_f32[0] = x_prev_f32[0];
 8002110:	4a0b      	ldr	r2, [pc, #44]	; (8002140 <calculateCompCorrectedState+0xb4>)
 8002112:	6811      	ldr	r1, [r2, #0]
 8002114:	4b09      	ldr	r3, [pc, #36]	; (800213c <calculateCompCorrectedState+0xb0>)
 8002116:	6019      	str	r1, [r3, #0]
			x_curr_f32[1] = x_prev_f32[1];
 8002118:	6851      	ldr	r1, [r2, #4]
 800211a:	6059      	str	r1, [r3, #4]
			x_curr_f32[3] = x_prev_f32[3];
 800211c:	68d1      	ldr	r1, [r2, #12]
 800211e:	60d9      	str	r1, [r3, #12]
			x_curr_f32[4] = x_prev_f32[4];
 8002120:	6912      	ldr	r2, [r2, #16]
 8002122:	611a      	str	r2, [r3, #16]
 8002124:	e7df      	b.n	80020e6 <calculateCompCorrectedState+0x5a>
 8002126:	bf00      	nop
 8002128:	3f666666 	.word	0x3f666666
 800212c:	200003a8 	.word	0x200003a8
 8002130:	20000398 	.word	0x20000398
 8002134:	20000388 	.word	0x20000388
 8002138:	20000520 	.word	0x20000520
 800213c:	200003b8 	.word	0x200003b8
 8002140:	200003e8 	.word	0x200003e8

08002144 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002144:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002148:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214a:	2400      	movs	r4, #0
 800214c:	9403      	str	r4, [sp, #12]
 800214e:	9404      	str	r4, [sp, #16]
 8002150:	9405      	str	r4, [sp, #20]
 8002152:	9406      	str	r4, [sp, #24]
 8002154:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002156:	4b50      	ldr	r3, [pc, #320]	; (8002298 <MX_GPIO_Init+0x154>)
 8002158:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800215a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800215e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002160:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002162:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002166:	9200      	str	r2, [sp, #0]
 8002168:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800216a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800216c:	f042 0201 	orr.w	r2, r2, #1
 8002170:	64da      	str	r2, [r3, #76]	; 0x4c
 8002172:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002174:	f002 0201 	and.w	r2, r2, #1
 8002178:	9201      	str	r2, [sp, #4]
 800217a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800217c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800217e:	f042 0202 	orr.w	r2, r2, #2
 8002182:	64da      	str	r2, [r3, #76]	; 0x4c
 8002184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	9302      	str	r3, [sp, #8]
 800218c:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU1_CS_Pin|IMU2_CS_Pin|IMU3_CS_Pin|FLASH_CS_Pin, GPIO_PIN_RESET);
 800218e:	4e43      	ldr	r6, [pc, #268]	; (800229c <MX_GPIO_Init+0x158>)
 8002190:	4622      	mov	r2, r4
 8002192:	f242 0107 	movw	r1, #8199	; 0x2007
 8002196:	4630      	mov	r0, r6
 8002198:	f000 fdcc 	bl	8002d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XBEE_CS_GPIO_Port, XBEE_CS_Pin, GPIO_PIN_RESET);
 800219c:	4622      	mov	r2, r4
 800219e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021a6:	f000 fdc5 	bl	8002d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_3, GPIO_PIN_RESET);
 80021aa:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 80022a0 <MX_GPIO_Init+0x15c>
 80021ae:	4622      	mov	r2, r4
 80021b0:	2108      	movs	r1, #8
 80021b2:	4640      	mov	r0, r8
 80021b4:	f000 fdbe 	bl	8002d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MAG_INT_Pin MAG_INT_TRG_Pin IMU3_INT1_Pin IMU3_INT2_Pin
                           IMU2_INT1_Pin IMU2_INT2_Pin IMU1_INT1_Pin IMU1_INT2_Pin */
  GPIO_InitStruct.Pin = MAG_INT_Pin|MAG_INT_TRG_Pin|IMU3_INT1_Pin|IMU3_INT2_Pin
 80021b8:	f641 631d 	movw	r3, #7709	; 0x1e1d
 80021bc:	9303      	str	r3, [sp, #12]
                          |IMU2_INT1_Pin|IMU2_INT2_Pin|IMU1_INT1_Pin|IMU1_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021c2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c6:	a903      	add	r1, sp, #12
 80021c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021cc:	f000 fcce 	bl	8002b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU1_CS_Pin IMU2_CS_Pin IMU3_CS_Pin FLASH_CS_Pin */
  GPIO_InitStruct.Pin = IMU1_CS_Pin|IMU2_CS_Pin|IMU3_CS_Pin|FLASH_CS_Pin;
 80021d0:	f242 0307 	movw	r3, #8199	; 0x2007
 80021d4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d6:	2701      	movs	r7, #1
 80021d8:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021de:	a903      	add	r1, sp, #12
 80021e0:	4630      	mov	r0, r6
 80021e2:	f000 fcc3 	bl	8002b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80021e6:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80021ea:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ec:	f04f 0902 	mov.w	r9, #2
 80021f0:	f8cd 9010 	str.w	r9, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f6:	2503      	movs	r5, #3
 80021f8:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021fa:	2305      	movs	r3, #5
 80021fc:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fe:	a903      	add	r1, sp, #12
 8002200:	4630      	mov	r0, r6
 8002202:	f000 fcb3 	bl	8002b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : XBEE_CS_Pin */
  GPIO_InitStruct.Pin = XBEE_CS_Pin;
 8002206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800220a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800220c:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002210:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(XBEE_CS_GPIO_Port, &GPIO_InitStruct);
 8002212:	a903      	add	r1, sp, #12
 8002214:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002218:	f000 fca8 	bl	8002b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_ATTN_Pin */
  GPIO_InitStruct.Pin = SPI3_ATTN_Pin;
 800221c:	2380      	movs	r3, #128	; 0x80
 800221e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002220:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(SPI3_ATTN_GPIO_Port, &GPIO_InitStruct);
 8002224:	a903      	add	r1, sp, #12
 8002226:	4630      	mov	r0, r6
 8002228:	f000 fca0 	bl	8002b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800222c:	2308      	movs	r3, #8
 800222e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002230:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002232:	f8cd 9014 	str.w	r9, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002236:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002238:	a903      	add	r1, sp, #12
 800223a:	4640      	mov	r0, r8
 800223c:	f000 fc96 	bl	8002b6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 4, 0);
 8002240:	4622      	mov	r2, r4
 8002242:	2104      	movs	r1, #4
 8002244:	2006      	movs	r0, #6
 8002246:	f000 fc37 	bl	8002ab8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800224a:	2006      	movs	r0, #6
 800224c:	f000 fc6c 	bl	8002b28 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 3, 0);
 8002250:	4622      	mov	r2, r4
 8002252:	4629      	mov	r1, r5
 8002254:	2009      	movs	r0, #9
 8002256:	f000 fc2f 	bl	8002ab8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800225a:	2009      	movs	r0, #9
 800225c:	f000 fc64 	bl	8002b28 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 3, 0);
 8002260:	4622      	mov	r2, r4
 8002262:	4629      	mov	r1, r5
 8002264:	200a      	movs	r0, #10
 8002266:	f000 fc27 	bl	8002ab8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800226a:	200a      	movs	r0, #10
 800226c:	f000 fc5c 	bl	8002b28 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8002270:	4622      	mov	r2, r4
 8002272:	4629      	mov	r1, r5
 8002274:	2017      	movs	r0, #23
 8002276:	f000 fc1f 	bl	8002ab8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800227a:	2017      	movs	r0, #23
 800227c:	f000 fc54 	bl	8002b28 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8002280:	4622      	mov	r2, r4
 8002282:	4629      	mov	r1, r5
 8002284:	2028      	movs	r0, #40	; 0x28
 8002286:	f000 fc17 	bl	8002ab8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800228a:	2028      	movs	r0, #40	; 0x28
 800228c:	f000 fc4c 	bl	8002b28 <HAL_NVIC_EnableIRQ>

}
 8002290:	b009      	add	sp, #36	; 0x24
 8002292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002296:	bf00      	nop
 8002298:	40021000 	.word	0x40021000
 800229c:	48000400 	.word	0x48000400
 80022a0:	48001c00 	.word	0x48001c00
 80022a4:	00000000 	.word	0x00000000

080022a8 <sendCurrentPosition>:
uint8_t sendCurrentPosition(uint8_t state) {
 80022a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80022ac:	b0a7      	sub	sp, #156	; 0x9c
	returnCompDebugOutput(&corr, &pred, &opt, &K_gain, &w_avg, &quat, &ZUPT);
 80022ae:	ab10      	add	r3, sp, #64	; 0x40
 80022b0:	9302      	str	r3, [sp, #8]
 80022b2:	ab13      	add	r3, sp, #76	; 0x4c
 80022b4:	9301      	str	r3, [sp, #4]
 80022b6:	ab17      	add	r3, sp, #92	; 0x5c
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	ab1a      	add	r3, sp, #104	; 0x68
 80022bc:	aa1d      	add	r2, sp, #116	; 0x74
 80022be:	a920      	add	r1, sp, #128	; 0x80
 80022c0:	a823      	add	r0, sp, #140	; 0x8c
 80022c2:	f7ff f8f7 	bl	80014b4 <returnCompDebugOutput>
	uint32_t IMUX = *(int*)&IMU0_data.G_Y;
 80022c6:	f8df 9134 	ldr.w	r9, [pc, #308]	; 80023fc <sendCurrentPosition+0x154>
 80022ca:	f8d9 6010 	ldr.w	r6, [r9, #16]
	uint32_t IMUY = *(int*)&IMU1_data.G_Y;
 80022ce:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8002400 <sendCurrentPosition+0x158>
 80022d2:	f8d8 5010 	ldr.w	r5, [r8, #16]
	uint32_t IMUZ = *(int*)&IMU2_data.G_Y;
 80022d6:	4f46      	ldr	r7, [pc, #280]	; (80023f0 <sendCurrentPosition+0x148>)
 80022d8:	693c      	ldr	r4, [r7, #16]
	float K_mag = (float)sqrt(K_gain.X*K_gain.X+K_gain.Y*K_gain.Y+K_gain.Z*K_gain.Z);
 80022da:	eddd 7a1a 	vldr	s15, [sp, #104]	; 0x68
 80022de:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80022e2:	ed9d 7a1b 	vldr	s14, [sp, #108]	; 0x6c
 80022e6:	ee27 7a07 	vmul.f32	s14, s14, s14
 80022ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022ee:	ed9d 7a1c 	vldr	s14, [sp, #112]	; 0x70
 80022f2:	ee27 7a07 	vmul.f32	s14, s14, s14
 80022f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022fa:	ee17 0a90 	vmov	r0, s15
 80022fe:	f7fe f91b 	bl	8000538 <__aeabi_f2d>
 8002302:	ec41 0b10 	vmov	d0, r0, r1
 8002306:	f003 ffff 	bl	8006308 <sqrt>
	float g_avg = ((IMU0_data.G_Y+IMU1_data.G_Y+IMU2_data.G_Y)/2);
 800230a:	edd9 7a04 	vldr	s15, [r9, #16]
 800230e:	ed98 7a04 	vldr	s14, [r8, #16]
 8002312:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002316:	ed97 7a04 	vldr	s14, [r7, #16]
 800231a:	ee77 7a87 	vadd.f32	s15, s15, s14
	uint32_t quatW = *(int*)&g_avg; // x_opt
 800231e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002322:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002326:	ee17 2a90 	vmov	r2, s15
	for (i = 0; i < 3; ++i) {
 800232a:	2100      	movs	r1, #0
 800232c:	e00a      	b.n	8002344 <sendCurrentPosition+0x9c>
	  data_buf[i] = (IMUX >> (3-i)*8) & 0xFF;
 800232e:	f1c1 0303 	rsb	r3, r1, #3
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	fa26 f303 	lsr.w	r3, r6, r3
 8002338:	f101 0098 	add.w	r0, r1, #152	; 0x98
 800233c:	4468      	add	r0, sp
 800233e:	f800 3c68 	strb.w	r3, [r0, #-104]
	for (i = 0; i < 3; ++i) {
 8002342:	3101      	adds	r1, #1
 8002344:	2902      	cmp	r1, #2
 8002346:	ddf2      	ble.n	800232e <sendCurrentPosition+0x86>
	for (i = 0; i < 3; ++i) {
 8002348:	2100      	movs	r1, #0
 800234a:	e00a      	b.n	8002362 <sendCurrentPosition+0xba>
	  data_buf[i+4] = (IMUY >> (3-i)*8) & 0xFF;
 800234c:	f1c1 0303 	rsb	r3, r1, #3
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	fa25 f303 	lsr.w	r3, r5, r3
 8002356:	f101 009c 	add.w	r0, r1, #156	; 0x9c
 800235a:	4468      	add	r0, sp
 800235c:	f800 3c68 	strb.w	r3, [r0, #-104]
	for (i = 0; i < 3; ++i) {
 8002360:	3101      	adds	r1, #1
 8002362:	2902      	cmp	r1, #2
 8002364:	ddf2      	ble.n	800234c <sendCurrentPosition+0xa4>
	for (i = 0; i < 3; ++i) {
 8002366:	2100      	movs	r1, #0
 8002368:	e00a      	b.n	8002380 <sendCurrentPosition+0xd8>
	  data_buf[i+8] = (IMUZ >> (3-i)*8) & 0xFF;
 800236a:	f1c1 0303 	rsb	r3, r1, #3
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	fa24 f303 	lsr.w	r3, r4, r3
 8002374:	f101 00a0 	add.w	r0, r1, #160	; 0xa0
 8002378:	4468      	add	r0, sp
 800237a:	f800 3c68 	strb.w	r3, [r0, #-104]
	for (i = 0; i < 3; ++i) {
 800237e:	3101      	adds	r1, #1
 8002380:	2902      	cmp	r1, #2
 8002382:	ddf2      	ble.n	800236a <sendCurrentPosition+0xc2>
	for (i = 0; i < 3; ++i) {
 8002384:	2100      	movs	r1, #0
 8002386:	e00a      	b.n	800239e <sendCurrentPosition+0xf6>
	  data_buf[i+12] = (quatW >> (3-i)*8) & 0xFF;
 8002388:	f1c1 0303 	rsb	r3, r1, #3
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	fa22 f303 	lsr.w	r3, r2, r3
 8002392:	f101 00a4 	add.w	r0, r1, #164	; 0xa4
 8002396:	4468      	add	r0, sp
 8002398:	f800 3c68 	strb.w	r3, [r0, #-104]
	for (i = 0; i < 3; ++i) {
 800239c:	3101      	adds	r1, #1
 800239e:	2902      	cmp	r1, #2
 80023a0:	ddf2      	ble.n	8002388 <sendCurrentPosition+0xe0>
	if (ctr == 0) {
 80023a2:	4b14      	ldr	r3, [pc, #80]	; (80023f4 <sendCurrentPosition+0x14c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	b18b      	cbz	r3, 80023cc <sendCurrentPosition+0x124>
	ctr = (ctr + 1) % CTR_MOD;
 80023a8:	4812      	ldr	r0, [pc, #72]	; (80023f4 <sendCurrentPosition+0x14c>)
 80023aa:	6802      	ldr	r2, [r0, #0]
 80023ac:	3201      	adds	r2, #1
 80023ae:	4912      	ldr	r1, [pc, #72]	; (80023f8 <sendCurrentPosition+0x150>)
 80023b0:	fb81 3102 	smull	r3, r1, r1, r2
 80023b4:	17d3      	asrs	r3, r2, #31
 80023b6:	ebc3 0361 	rsb	r3, r3, r1, asr #1
 80023ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	6003      	str	r3, [r0, #0]
}
 80023c2:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80023c6:	b027      	add	sp, #156	; 0x9c
 80023c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		XBeeTransmitReceive(data_buf, xbee_rx_buf, TX_DATA_BUF_SZ, COMPUTER_ADDR);
 80023cc:	a306      	add	r3, pc, #24	; (adr r3, 80023e8 <sendCurrentPosition+0x140>)
 80023ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d2:	e9cd 2300 	strd	r2, r3, [sp]
 80023d6:	2210      	movs	r2, #16
 80023d8:	eb0d 0102 	add.w	r1, sp, r2
 80023dc:	a80c      	add	r0, sp, #48	; 0x30
 80023de:	f7fe fe29 	bl	8001034 <XBeeTransmitReceive>
 80023e2:	e7e1      	b.n	80023a8 <sendCurrentPosition+0x100>
 80023e4:	f3af 8000 	nop.w
 80023e8:	4108245c 	.word	0x4108245c
 80023ec:	0013a200 	.word	0x0013a200
 80023f0:	20000678 	.word	0x20000678
 80023f4:	200006f4 	.word	0x200006f4
 80023f8:	66666667 	.word	0x66666667
 80023fc:	20000608 	.word	0x20000608
 8002400:	20000640 	.word	0x20000640

08002404 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002404:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002406:	e7fe      	b.n	8002406 <Error_Handler+0x2>

08002408 <MX_SPI1_Init>:
{
 8002408:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 800240a:	480f      	ldr	r0, [pc, #60]	; (8002448 <MX_SPI1_Init+0x40>)
 800240c:	4b0f      	ldr	r3, [pc, #60]	; (800244c <MX_SPI1_Init+0x44>)
 800240e:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002410:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002414:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002416:	2300      	movs	r3, #0
 8002418:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800241a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800241e:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002420:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002422:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002424:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002428:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800242a:	2210      	movs	r2, #16
 800242c:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800242e:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002430:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002432:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002434:	2207      	movs	r2, #7
 8002436:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002438:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800243a:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800243c:	f001 fad0 	bl	80039e0 <HAL_SPI_Init>
 8002440:	b900      	cbnz	r0, 8002444 <MX_SPI1_Init+0x3c>
}
 8002442:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002444:	f7ff ffde 	bl	8002404 <Error_Handler>
 8002448:	200006f8 	.word	0x200006f8
 800244c:	40013000 	.word	0x40013000

08002450 <MX_SPI3_Init>:
{
 8002450:	b508      	push	{r3, lr}
  hspi3.Instance = SPI3;
 8002452:	4810      	ldr	r0, [pc, #64]	; (8002494 <MX_SPI3_Init+0x44>)
 8002454:	4b10      	ldr	r3, [pc, #64]	; (8002498 <MX_SPI3_Init+0x48>)
 8002456:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002458:	f44f 7382 	mov.w	r3, #260	; 0x104
 800245c:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800245e:	2300      	movs	r3, #0
 8002460:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002462:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002466:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002468:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800246a:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800246c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002470:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002472:	2210      	movs	r2, #16
 8002474:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002476:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002478:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800247a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800247c:	2207      	movs	r2, #7
 800247e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002480:	6303      	str	r3, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002482:	2308      	movs	r3, #8
 8002484:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002486:	f001 faab 	bl	80039e0 <HAL_SPI_Init>
 800248a:	b900      	cbnz	r0, 800248e <MX_SPI3_Init+0x3e>
}
 800248c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800248e:	f7ff ffb9 	bl	8002404 <Error_Handler>
 8002492:	bf00      	nop
 8002494:	2000075c 	.word	0x2000075c
 8002498:	40003c00 	.word	0x40003c00

0800249c <MX_TIM2_Init>:
{
 800249c:	b500      	push	{lr}
 800249e:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024a0:	2300      	movs	r3, #0
 80024a2:	930a      	str	r3, [sp, #40]	; 0x28
 80024a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80024a6:	930c      	str	r3, [sp, #48]	; 0x30
 80024a8:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024aa:	9307      	str	r3, [sp, #28]
 80024ac:	9308      	str	r3, [sp, #32]
 80024ae:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	9301      	str	r3, [sp, #4]
 80024b4:	9302      	str	r3, [sp, #8]
 80024b6:	9303      	str	r3, [sp, #12]
 80024b8:	9304      	str	r3, [sp, #16]
 80024ba:	9305      	str	r3, [sp, #20]
 80024bc:	9306      	str	r3, [sp, #24]
  htim2.Instance = TIM2;
 80024be:	481d      	ldr	r0, [pc, #116]	; (8002534 <MX_TIM2_Init+0x98>)
 80024c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024c4:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 7999;
 80024c6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80024ca:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024cc:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 40;
 80024ce:	2228      	movs	r2, #40	; 0x28
 80024d0:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024d2:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024d4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024d6:	f002 f8ab 	bl	8004630 <HAL_TIM_Base_Init>
 80024da:	bb00      	cbnz	r0, 800251e <MX_TIM2_Init+0x82>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024e0:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024e2:	a90a      	add	r1, sp, #40	; 0x28
 80024e4:	4813      	ldr	r0, [pc, #76]	; (8002534 <MX_TIM2_Init+0x98>)
 80024e6:	f002 f989 	bl	80047fc <HAL_TIM_ConfigClockSource>
 80024ea:	b9d0      	cbnz	r0, 8002522 <MX_TIM2_Init+0x86>
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80024ec:	4811      	ldr	r0, [pc, #68]	; (8002534 <MX_TIM2_Init+0x98>)
 80024ee:	f002 f8cf 	bl	8004690 <HAL_TIM_OC_Init>
 80024f2:	b9c0      	cbnz	r0, 8002526 <MX_TIM2_Init+0x8a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024f4:	2300      	movs	r3, #0
 80024f6:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024f8:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024fa:	a907      	add	r1, sp, #28
 80024fc:	480d      	ldr	r0, [pc, #52]	; (8002534 <MX_TIM2_Init+0x98>)
 80024fe:	f002 f9fd 	bl	80048fc <HAL_TIMEx_MasterConfigSynchronization>
 8002502:	b990      	cbnz	r0, 800252a <MX_TIM2_Init+0x8e>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002504:	2200      	movs	r2, #0
 8002506:	9200      	str	r2, [sp, #0]
  sConfigOC.Pulse = 0;
 8002508:	9201      	str	r2, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800250a:	9202      	str	r2, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800250c:	9204      	str	r2, [sp, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800250e:	4669      	mov	r1, sp
 8002510:	4808      	ldr	r0, [pc, #32]	; (8002534 <MX_TIM2_Init+0x98>)
 8002512:	f002 f929 	bl	8004768 <HAL_TIM_OC_ConfigChannel>
 8002516:	b950      	cbnz	r0, 800252e <MX_TIM2_Init+0x92>
}
 8002518:	b00f      	add	sp, #60	; 0x3c
 800251a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800251e:	f7ff ff71 	bl	8002404 <Error_Handler>
    Error_Handler();
 8002522:	f7ff ff6f 	bl	8002404 <Error_Handler>
    Error_Handler();
 8002526:	f7ff ff6d 	bl	8002404 <Error_Handler>
    Error_Handler();
 800252a:	f7ff ff6b 	bl	8002404 <Error_Handler>
    Error_Handler();
 800252e:	f7ff ff69 	bl	8002404 <Error_Handler>
 8002532:	bf00      	nop
 8002534:	200007c0 	.word	0x200007c0

08002538 <SystemClock_Config>:
{
 8002538:	b500      	push	{lr}
 800253a:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800253c:	2244      	movs	r2, #68	; 0x44
 800253e:	2100      	movs	r1, #0
 8002540:	a805      	add	r0, sp, #20
 8002542:	f002 fc57 	bl	8004df4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002546:	2300      	movs	r3, #0
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	9301      	str	r3, [sp, #4]
 800254c:	9302      	str	r3, [sp, #8]
 800254e:	9303      	str	r3, [sp, #12]
 8002550:	9304      	str	r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002552:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002556:	f000 fc09 	bl	8002d6c <HAL_PWREx_ControlVoltageScaling>
 800255a:	b9d0      	cbnz	r0, 8002592 <SystemClock_Config+0x5a>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800255c:	2310      	movs	r3, #16
 800255e:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002560:	2301      	movs	r3, #1
 8002562:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002564:	2300      	movs	r3, #0
 8002566:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8002568:	2280      	movs	r2, #128	; 0x80
 800256a:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800256c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800256e:	a805      	add	r0, sp, #20
 8002570:	f000 fce6 	bl	8002f40 <HAL_RCC_OscConfig>
 8002574:	b978      	cbnz	r0, 8002596 <SystemClock_Config+0x5e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002576:	230f      	movs	r3, #15
 8002578:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800257a:	2100      	movs	r1, #0
 800257c:	9101      	str	r1, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800257e:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002580:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002582:	9104      	str	r1, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002584:	4668      	mov	r0, sp
 8002586:	f001 f811 	bl	80035ac <HAL_RCC_ClockConfig>
 800258a:	b930      	cbnz	r0, 800259a <SystemClock_Config+0x62>
}
 800258c:	b017      	add	sp, #92	; 0x5c
 800258e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002592:	f7ff ff37 	bl	8002404 <Error_Handler>
    Error_Handler();
 8002596:	f7ff ff35 	bl	8002404 <Error_Handler>
    Error_Handler();
 800259a:	f7ff ff33 	bl	8002404 <Error_Handler>
	...

080025a0 <main>:
{
 80025a0:	b580      	push	{r7, lr}
  HAL_Init();
 80025a2:	f000 fa3b 	bl	8002a1c <HAL_Init>
  SystemClock_Config();
 80025a6:	f7ff ffc7 	bl	8002538 <SystemClock_Config>
  MX_GPIO_Init();
 80025aa:	f7ff fdcb 	bl	8002144 <MX_GPIO_Init>
  MX_SPI1_Init();
 80025ae:	f7ff ff2b 	bl	8002408 <MX_SPI1_Init>
  MX_SPI3_Init();
 80025b2:	f7ff ff4d 	bl	8002450 <MX_SPI3_Init>
  MX_TIM2_Init();
 80025b6:	f7ff ff71 	bl	800249c <MX_TIM2_Init>
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 80025ba:	483c      	ldr	r0, [pc, #240]	; (80026ac <main+0x10c>)
 80025bc:	f001 fef6 	bl	80043ac <HAL_TIM_Base_Start_IT>
 80025c0:	b108      	cbz	r0, 80025c6 <main+0x26>
      Error_Handler();
 80025c2:	f7ff ff1f 	bl	8002404 <Error_Handler>
  XBEE_SPI = hspi3;
 80025c6:	2264      	movs	r2, #100	; 0x64
 80025c8:	4939      	ldr	r1, [pc, #228]	; (80026b0 <main+0x110>)
 80025ca:	483a      	ldr	r0, [pc, #232]	; (80026b4 <main+0x114>)
 80025cc:	f002 fc04 	bl	8004dd8 <memcpy>
  IMU_init(&hspi1, &IMU0, 0);
 80025d0:	f8df 8100 	ldr.w	r8, [pc, #256]	; 80026d4 <main+0x134>
 80025d4:	4c38      	ldr	r4, [pc, #224]	; (80026b8 <main+0x118>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	4641      	mov	r1, r8
 80025da:	4620      	mov	r0, r4
 80025dc:	f7fe fbea 	bl	8000db4 <IMU_init>
  IMU_init(&hspi1, &IMU1, 1);
 80025e0:	4f36      	ldr	r7, [pc, #216]	; (80026bc <main+0x11c>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	4639      	mov	r1, r7
 80025e6:	4620      	mov	r0, r4
 80025e8:	f7fe fbe4 	bl	8000db4 <IMU_init>
  IMU_init(&hspi1, &IMU2, 2);
 80025ec:	4e34      	ldr	r6, [pc, #208]	; (80026c0 <main+0x120>)
 80025ee:	2202      	movs	r2, #2
 80025f0:	4631      	mov	r1, r6
 80025f2:	4620      	mov	r0, r4
 80025f4:	f7fe fbde 	bl	8000db4 <IMU_init>
  HAL_Delay(500);
 80025f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025fc:	f000 fa36 	bl	8002a6c <HAL_Delay>
  IMU_readSensorData(&IMU0, &IMU0_data);
 8002600:	4c30      	ldr	r4, [pc, #192]	; (80026c4 <main+0x124>)
 8002602:	4621      	mov	r1, r4
 8002604:	4640      	mov	r0, r8
 8002606:	f7fe fb6c 	bl	8000ce2 <IMU_readSensorData>
  IMU_readSensorData(&IMU1, &IMU1_data);
 800260a:	4d2f      	ldr	r5, [pc, #188]	; (80026c8 <main+0x128>)
 800260c:	4629      	mov	r1, r5
 800260e:	4638      	mov	r0, r7
 8002610:	f7fe fb67 	bl	8000ce2 <IMU_readSensorData>
  IMU_readSensorData(&IMU2, &IMU2_data);
 8002614:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 80026d8 <main+0x138>
 8002618:	4649      	mov	r1, r9
 800261a:	4630      	mov	r0, r6
 800261c:	f7fe fb61 	bl	8000ce2 <IMU_readSensorData>
  HAL_Delay(500);
 8002620:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002624:	f000 fa22 	bl	8002a6c <HAL_Delay>
  IMU_readSensorData(&IMU0, &IMU0_data);
 8002628:	4621      	mov	r1, r4
 800262a:	4640      	mov	r0, r8
 800262c:	f7fe fb59 	bl	8000ce2 <IMU_readSensorData>
  IMU_readSensorData(&IMU1, &IMU1_data);
 8002630:	4629      	mov	r1, r5
 8002632:	4638      	mov	r0, r7
 8002634:	f7fe fb55 	bl	8000ce2 <IMU_readSensorData>
  IMU_readSensorData(&IMU2, &IMU2_data);
 8002638:	4649      	mov	r1, r9
 800263a:	4630      	mov	r0, r6
 800263c:	f7fe fb51 	bl	8000ce2 <IMU_readSensorData>
  init_comp_processing(&IMU0_data, &IMU1_data);
 8002640:	4629      	mov	r1, r5
 8002642:	4620      	mov	r0, r4
 8002644:	f7ff fc22 	bl	8001e8c <init_comp_processing>
	  if (DRDY_flag || periodic_tx_flag) {
 8002648:	4b20      	ldr	r3, [pc, #128]	; (80026cc <main+0x12c>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	b913      	cbnz	r3, 8002654 <main+0xb4>
 800264e:	4b20      	ldr	r3, [pc, #128]	; (80026d0 <main+0x130>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	b1d3      	cbz	r3, 800268a <main+0xea>
		  IMU_readSensorData(&IMU0, &IMU0_data);
 8002654:	4c1b      	ldr	r4, [pc, #108]	; (80026c4 <main+0x124>)
 8002656:	4621      	mov	r1, r4
 8002658:	481e      	ldr	r0, [pc, #120]	; (80026d4 <main+0x134>)
 800265a:	f7fe fb42 	bl	8000ce2 <IMU_readSensorData>
		  IMU_readSensorData(&IMU1, &IMU1_data);
 800265e:	4d1a      	ldr	r5, [pc, #104]	; (80026c8 <main+0x128>)
 8002660:	4629      	mov	r1, r5
 8002662:	4816      	ldr	r0, [pc, #88]	; (80026bc <main+0x11c>)
 8002664:	f7fe fb3d 	bl	8000ce2 <IMU_readSensorData>
		  IMU_readSensorData(&IMU2, &IMU2_data);
 8002668:	491b      	ldr	r1, [pc, #108]	; (80026d8 <main+0x138>)
 800266a:	4815      	ldr	r0, [pc, #84]	; (80026c0 <main+0x120>)
 800266c:	f7fe fb39 	bl	8000ce2 <IMU_readSensorData>
		  calculateCompCorrectedState(&IMU0_data, &IMU1_data, timeDelta);
 8002670:	4b1a      	ldr	r3, [pc, #104]	; (80026dc <main+0x13c>)
 8002672:	ed93 0a00 	vldr	s0, [r3]
 8002676:	4629      	mov	r1, r5
 8002678:	4620      	mov	r0, r4
 800267a:	f7ff fd07 	bl	800208c <calculateCompCorrectedState>
		  DRDY_flag = 0;
 800267e:	4b13      	ldr	r3, [pc, #76]	; (80026cc <main+0x12c>)
 8002680:	2200      	movs	r2, #0
 8002682:	701a      	strb	r2, [r3, #0]
		  new_data_flag = 1;
 8002684:	4b16      	ldr	r3, [pc, #88]	; (80026e0 <main+0x140>)
 8002686:	2201      	movs	r2, #1
 8002688:	701a      	strb	r2, [r3, #0]
	  if (periodic_tx_flag && new_data_flag) {
 800268a:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <main+0x130>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0da      	beq.n	8002648 <main+0xa8>
 8002692:	4b13      	ldr	r3, [pc, #76]	; (80026e0 <main+0x140>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d0d6      	beq.n	8002648 <main+0xa8>
		  sendCurrentPosition(RUN_STATE);
 800269a:	2001      	movs	r0, #1
 800269c:	f7ff fe04 	bl	80022a8 <sendCurrentPosition>
		  periodic_tx_flag = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	4a0b      	ldr	r2, [pc, #44]	; (80026d0 <main+0x130>)
 80026a4:	7013      	strb	r3, [r2, #0]
		  new_data_flag = 0;
 80026a6:	4a0e      	ldr	r2, [pc, #56]	; (80026e0 <main+0x140>)
 80026a8:	7013      	strb	r3, [r2, #0]
 80026aa:	e7cd      	b.n	8002648 <main+0xa8>
 80026ac:	200007c0 	.word	0x200007c0
 80026b0:	2000075c 	.word	0x2000075c
 80026b4:	20000690 	.word	0x20000690
 80026b8:	200006f8 	.word	0x200006f8
 80026bc:	20000620 	.word	0x20000620
 80026c0:	20000658 	.word	0x20000658
 80026c4:	20000608 	.word	0x20000608
 80026c8:	20000640 	.word	0x20000640
 80026cc:	200005e5 	.word	0x200005e5
 80026d0:	2000041c 	.word	0x2000041c
 80026d4:	200005e8 	.word	0x200005e8
 80026d8:	20000678 	.word	0x20000678
 80026dc:	20000420 	.word	0x20000420
 80026e0:	2000080c 	.word	0x2000080c

080026e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026e4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026e6:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <HAL_MspInit+0x2c>)
 80026e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026ea:	f042 0201 	orr.w	r2, r2, #1
 80026ee:	661a      	str	r2, [r3, #96]	; 0x60
 80026f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026f2:	f002 0201 	and.w	r2, r2, #1
 80026f6:	9200      	str	r2, [sp, #0]
 80026f8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026fa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80026fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002700:	659a      	str	r2, [r3, #88]	; 0x58
 8002702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002708:	9301      	str	r3, [sp, #4]
 800270a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800270c:	b002      	add	sp, #8
 800270e:	4770      	bx	lr
 8002710:	40021000 	.word	0x40021000

08002714 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002714:	b500      	push	{lr}
 8002716:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002718:	2300      	movs	r3, #0
 800271a:	9305      	str	r3, [sp, #20]
 800271c:	9306      	str	r3, [sp, #24]
 800271e:	9307      	str	r3, [sp, #28]
 8002720:	9308      	str	r3, [sp, #32]
 8002722:	9309      	str	r3, [sp, #36]	; 0x24
  if(hspi->Instance==SPI1)
 8002724:	6803      	ldr	r3, [r0, #0]
 8002726:	4a25      	ldr	r2, [pc, #148]	; (80027bc <HAL_SPI_MspInit+0xa8>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d005      	beq.n	8002738 <HAL_SPI_MspInit+0x24>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 800272c:	4a24      	ldr	r2, [pc, #144]	; (80027c0 <HAL_SPI_MspInit+0xac>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d023      	beq.n	800277a <HAL_SPI_MspInit+0x66>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002732:	b00b      	add	sp, #44	; 0x2c
 8002734:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002738:	4b22      	ldr	r3, [pc, #136]	; (80027c4 <HAL_SPI_MspInit+0xb0>)
 800273a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800273c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002740:	661a      	str	r2, [r3, #96]	; 0x60
 8002742:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002744:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002748:	9201      	str	r2, [sp, #4]
 800274a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800274c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800274e:	f042 0201 	orr.w	r2, r2, #1
 8002752:	64da      	str	r2, [r3, #76]	; 0x4c
 8002754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	9302      	str	r3, [sp, #8]
 800275c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800275e:	23c2      	movs	r3, #194	; 0xc2
 8002760:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002762:	2302      	movs	r3, #2
 8002764:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002766:	2303      	movs	r3, #3
 8002768:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800276a:	2305      	movs	r3, #5
 800276c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800276e:	a905      	add	r1, sp, #20
 8002770:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002774:	f000 f9fa 	bl	8002b6c <HAL_GPIO_Init>
 8002778:	e7db      	b.n	8002732 <HAL_SPI_MspInit+0x1e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800277a:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <HAL_SPI_MspInit+0xb0>)
 800277c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800277e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002782:	659a      	str	r2, [r3, #88]	; 0x58
 8002784:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002786:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800278a:	9203      	str	r2, [sp, #12]
 800278c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800278e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002790:	f042 0202 	orr.w	r2, r2, #2
 8002794:	64da      	str	r2, [r3, #76]	; 0x4c
 8002796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	9304      	str	r3, [sp, #16]
 800279e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80027a0:	2338      	movs	r3, #56	; 0x38
 80027a2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a4:	2302      	movs	r3, #2
 80027a6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a8:	2303      	movs	r3, #3
 80027aa:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80027ac:	2306      	movs	r3, #6
 80027ae:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b0:	a905      	add	r1, sp, #20
 80027b2:	4805      	ldr	r0, [pc, #20]	; (80027c8 <HAL_SPI_MspInit+0xb4>)
 80027b4:	f000 f9da 	bl	8002b6c <HAL_GPIO_Init>
}
 80027b8:	e7bb      	b.n	8002732 <HAL_SPI_MspInit+0x1e>
 80027ba:	bf00      	nop
 80027bc:	40013000 	.word	0x40013000
 80027c0:	40003c00 	.word	0x40003c00
 80027c4:	40021000 	.word	0x40021000
 80027c8:	48000400 	.word	0x48000400

080027cc <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80027cc:	6803      	ldr	r3, [r0, #0]
 80027ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d2:	d000      	beq.n	80027d6 <HAL_TIM_Base_MspInit+0xa>
 80027d4:	4770      	bx	lr
{
 80027d6:	b500      	push	{lr}
 80027d8:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027da:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80027de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027e0:	f042 0201 	orr.w	r2, r2, #1
 80027e4:	659a      	str	r2, [r3, #88]	; 0x58
 80027e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	9301      	str	r3, [sp, #4]
 80027ee:	9b01      	ldr	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80027f0:	2200      	movs	r2, #0
 80027f2:	4611      	mov	r1, r2
 80027f4:	201c      	movs	r0, #28
 80027f6:	f000 f95f 	bl	8002ab8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80027fa:	201c      	movs	r0, #28
 80027fc:	f000 f994 	bl	8002b28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002800:	b003      	add	sp, #12
 8002802:	f85d fb04 	ldr.w	pc, [sp], #4

08002806 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002806:	e7fe      	b.n	8002806 <NMI_Handler>

08002808 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002808:	e7fe      	b.n	8002808 <HardFault_Handler>

0800280a <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800280a:	e7fe      	b.n	800280a <MemManage_Handler>

0800280c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800280c:	e7fe      	b.n	800280c <BusFault_Handler>

0800280e <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800280e:	e7fe      	b.n	800280e <UsageFault_Handler>

08002810 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002810:	4770      	bx	lr

08002812 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002812:	4770      	bx	lr

08002814 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002814:	4770      	bx	lr

08002816 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002816:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002818:	f000 f916 	bl	8002a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800281c:	bd08      	pop	{r3, pc}

0800281e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800281e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MAG_INT_Pin);
 8002820:	2001      	movs	r0, #1
 8002822:	f000 fa8d 	bl	8002d40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002826:	bd08      	pop	{r3, pc}

08002828 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002828:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU3_INT1_Pin);
 800282a:	2008      	movs	r0, #8
 800282c:	f000 fa88 	bl	8002d40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  DRDY_flag = 1;
 8002830:	4b01      	ldr	r3, [pc, #4]	; (8002838 <EXTI3_IRQHandler+0x10>)
 8002832:	2201      	movs	r2, #1
 8002834:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI3_IRQn 1 */
}
 8002836:	bd08      	pop	{r3, pc}
 8002838:	200005e5 	.word	0x200005e5

0800283c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800283c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU3_INT2_Pin);
 800283e:	2010      	movs	r0, #16
 8002840:	f000 fa7e 	bl	8002d40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  DRDY_flag = 1;
 8002844:	4b01      	ldr	r3, [pc, #4]	; (800284c <EXTI4_IRQHandler+0x10>)
 8002846:	2201      	movs	r2, #1
 8002848:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI4_IRQn 1 */
}
 800284a:	bd08      	pop	{r3, pc}
 800284c:	200005e5 	.word	0x200005e5

08002850 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002850:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU2_INT1_Pin);
 8002852:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002856:	f000 fa73 	bl	8002d40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  DRDY_flag = 1;
 800285a:	4b02      	ldr	r3, [pc, #8]	; (8002864 <EXTI9_5_IRQHandler+0x14>)
 800285c:	2201      	movs	r2, #1
 800285e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002860:	bd08      	pop	{r3, pc}
 8002862:	bf00      	nop
 8002864:	200005e5 	.word	0x200005e5

08002868 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002868:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800286a:	4803      	ldr	r0, [pc, #12]	; (8002878 <TIM2_IRQHandler+0x10>)
 800286c:	f001 fdda 	bl	8004424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  periodic_tx_flag = 1;
 8002870:	4b02      	ldr	r3, [pc, #8]	; (800287c <TIM2_IRQHandler+0x14>)
 8002872:	2201      	movs	r2, #1
 8002874:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 8002876:	bd08      	pop	{r3, pc}
 8002878:	200007c0 	.word	0x200007c0
 800287c:	2000041c 	.word	0x2000041c

08002880 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002880:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU2_INT2_Pin);
 8002882:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002886:	f000 fa5b 	bl	8002d40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IMU1_INT1_Pin);
 800288a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800288e:	f000 fa57 	bl	8002d40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IMU1_INT2_Pin);
 8002892:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002896:	f000 fa53 	bl	8002d40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  DRDY_flag = 1;
 800289a:	4b02      	ldr	r3, [pc, #8]	; (80028a4 <EXTI15_10_IRQHandler+0x24>)
 800289c:	2201      	movs	r2, #1
 800289e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80028a0:	bd08      	pop	{r3, pc}
 80028a2:	bf00      	nop
 80028a4:	200005e5 	.word	0x200005e5

080028a8 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80028a8:	2001      	movs	r0, #1
 80028aa:	4770      	bx	lr

080028ac <_kill>:

int _kill(int pid, int sig)
{
 80028ac:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028ae:	f002 fa47 	bl	8004d40 <__errno>
 80028b2:	2316      	movs	r3, #22
 80028b4:	6003      	str	r3, [r0, #0]
  return -1;
}
 80028b6:	f04f 30ff 	mov.w	r0, #4294967295
 80028ba:	bd08      	pop	{r3, pc}

080028bc <_exit>:

void _exit (int status)
{
 80028bc:	b508      	push	{r3, lr}
  _kill(status, -1);
 80028be:	f04f 31ff 	mov.w	r1, #4294967295
 80028c2:	f7ff fff3 	bl	80028ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80028c6:	e7fe      	b.n	80028c6 <_exit+0xa>

080028c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028c8:	b570      	push	{r4, r5, r6, lr}
 80028ca:	460c      	mov	r4, r1
 80028cc:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ce:	2500      	movs	r5, #0
 80028d0:	e006      	b.n	80028e0 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 80028d2:	f3af 8000 	nop.w
 80028d6:	4621      	mov	r1, r4
 80028d8:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028dc:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 80028de:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e0:	42b5      	cmp	r5, r6
 80028e2:	dbf6      	blt.n	80028d2 <_read+0xa>
  }

  return len;
}
 80028e4:	4630      	mov	r0, r6
 80028e6:	bd70      	pop	{r4, r5, r6, pc}

080028e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028e8:	b570      	push	{r4, r5, r6, lr}
 80028ea:	460c      	mov	r4, r1
 80028ec:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ee:	2500      	movs	r5, #0
 80028f0:	e004      	b.n	80028fc <_write+0x14>
  {
    __io_putchar(*ptr++);
 80028f2:	f814 0b01 	ldrb.w	r0, [r4], #1
 80028f6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028fa:	3501      	adds	r5, #1
 80028fc:	42b5      	cmp	r5, r6
 80028fe:	dbf8      	blt.n	80028f2 <_write+0xa>
  }
  return len;
}
 8002900:	4630      	mov	r0, r6
 8002902:	bd70      	pop	{r4, r5, r6, pc}

08002904 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8002904:	f04f 30ff 	mov.w	r0, #4294967295
 8002908:	4770      	bx	lr

0800290a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800290a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800290e:	604b      	str	r3, [r1, #4]
  return 0;
}
 8002910:	2000      	movs	r0, #0
 8002912:	4770      	bx	lr

08002914 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002914:	2001      	movs	r0, #1
 8002916:	4770      	bx	lr

08002918 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002918:	2000      	movs	r0, #0
 800291a:	4770      	bx	lr

0800291c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800291c:	b510      	push	{r4, lr}
 800291e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002920:	4a0c      	ldr	r2, [pc, #48]	; (8002954 <_sbrk+0x38>)
 8002922:	490d      	ldr	r1, [pc, #52]	; (8002958 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002924:	480d      	ldr	r0, [pc, #52]	; (800295c <_sbrk+0x40>)
 8002926:	6800      	ldr	r0, [r0, #0]
 8002928:	b140      	cbz	r0, 800293c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800292a:	480c      	ldr	r0, [pc, #48]	; (800295c <_sbrk+0x40>)
 800292c:	6800      	ldr	r0, [r0, #0]
 800292e:	4403      	add	r3, r0
 8002930:	1a52      	subs	r2, r2, r1
 8002932:	4293      	cmp	r3, r2
 8002934:	d806      	bhi.n	8002944 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002936:	4a09      	ldr	r2, [pc, #36]	; (800295c <_sbrk+0x40>)
 8002938:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800293a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800293c:	4807      	ldr	r0, [pc, #28]	; (800295c <_sbrk+0x40>)
 800293e:	4c08      	ldr	r4, [pc, #32]	; (8002960 <_sbrk+0x44>)
 8002940:	6004      	str	r4, [r0, #0]
 8002942:	e7f2      	b.n	800292a <_sbrk+0xe>
    errno = ENOMEM;
 8002944:	f002 f9fc 	bl	8004d40 <__errno>
 8002948:	230c      	movs	r3, #12
 800294a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800294c:	f04f 30ff 	mov.w	r0, #4294967295
 8002950:	e7f3      	b.n	800293a <_sbrk+0x1e>
 8002952:	bf00      	nop
 8002954:	20010000 	.word	0x20010000
 8002958:	00000400 	.word	0x00000400
 800295c:	20000810 	.word	0x20000810
 8002960:	20000828 	.word	0x20000828

08002964 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002964:	4a03      	ldr	r2, [pc, #12]	; (8002974 <SystemInit+0x10>)
 8002966:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800296a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800296e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002972:	4770      	bx	lr
 8002974:	e000ed00 	.word	0xe000ed00

08002978 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002978:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800297c:	f7ff fff2 	bl	8002964 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002980:	480c      	ldr	r0, [pc, #48]	; (80029b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002982:	490d      	ldr	r1, [pc, #52]	; (80029b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002984:	4a0d      	ldr	r2, [pc, #52]	; (80029bc <LoopForever+0xe>)
  movs r3, #0
 8002986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002988:	e002      	b.n	8002990 <LoopCopyDataInit>

0800298a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800298a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800298c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800298e:	3304      	adds	r3, #4

08002990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002994:	d3f9      	bcc.n	800298a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002996:	4a0a      	ldr	r2, [pc, #40]	; (80029c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002998:	4c0a      	ldr	r4, [pc, #40]	; (80029c4 <LoopForever+0x16>)
  movs r3, #0
 800299a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800299c:	e001      	b.n	80029a2 <LoopFillZerobss>

0800299e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800299e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029a0:	3204      	adds	r2, #4

080029a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029a4:	d3fb      	bcc.n	800299e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029a6:	f002 f9e3 	bl	8004d70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029aa:	f7ff fdf9 	bl	80025a0 <main>

080029ae <LoopForever>:

LoopForever:
    b LoopForever
 80029ae:	e7fe      	b.n	80029ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80029b0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80029b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029b8:	20000494 	.word	0x20000494
  ldr r2, =_sidata
 80029bc:	080081f8 	.word	0x080081f8
  ldr r2, =_sbss
 80029c0:	20000494 	.word	0x20000494
  ldr r4, =_ebss
 80029c4:	20000828 	.word	0x20000828

080029c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80029c8:	e7fe      	b.n	80029c8 <ADC1_IRQHandler>
	...

080029cc <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80029cc:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <HAL_InitTick+0x44>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	b90b      	cbnz	r3, 80029d6 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80029d2:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80029d4:	4770      	bx	lr
{
 80029d6:	b510      	push	{r4, lr}
 80029d8:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80029da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029de:	fbb0 f3f3 	udiv	r3, r0, r3
 80029e2:	4a0c      	ldr	r2, [pc, #48]	; (8002a14 <HAL_InitTick+0x48>)
 80029e4:	6810      	ldr	r0, [r2, #0]
 80029e6:	fbb0 f0f3 	udiv	r0, r0, r3
 80029ea:	f000 f8ab 	bl	8002b44 <HAL_SYSTICK_Config>
 80029ee:	b968      	cbnz	r0, 8002a0c <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029f0:	2c0f      	cmp	r4, #15
 80029f2:	d901      	bls.n	80029f8 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 80029f4:	2001      	movs	r0, #1
 80029f6:	e00a      	b.n	8002a0e <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029f8:	2200      	movs	r2, #0
 80029fa:	4621      	mov	r1, r4
 80029fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002a00:	f000 f85a 	bl	8002ab8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a04:	4b04      	ldr	r3, [pc, #16]	; (8002a18 <HAL_InitTick+0x4c>)
 8002a06:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a08:	2000      	movs	r0, #0
 8002a0a:	e000      	b.n	8002a0e <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8002a0c:	2001      	movs	r0, #1
}
 8002a0e:	bd10      	pop	{r4, pc}
 8002a10:	20000428 	.word	0x20000428
 8002a14:	20000424 	.word	0x20000424
 8002a18:	2000042c 	.word	0x2000042c

08002a1c <HAL_Init>:
{
 8002a1c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a1e:	4a09      	ldr	r2, [pc, #36]	; (8002a44 <HAL_Init+0x28>)
 8002a20:	6813      	ldr	r3, [r2, #0]
 8002a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a26:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a28:	2003      	movs	r0, #3
 8002a2a:	f000 f833 	bl	8002a94 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a2e:	200f      	movs	r0, #15
 8002a30:	f7ff ffcc 	bl	80029cc <HAL_InitTick>
 8002a34:	b110      	cbz	r0, 8002a3c <HAL_Init+0x20>
    status = HAL_ERROR;
 8002a36:	2401      	movs	r4, #1
}
 8002a38:	4620      	mov	r0, r4
 8002a3a:	bd10      	pop	{r4, pc}
 8002a3c:	4604      	mov	r4, r0
    HAL_MspInit();
 8002a3e:	f7ff fe51 	bl	80026e4 <HAL_MspInit>
 8002a42:	e7f9      	b.n	8002a38 <HAL_Init+0x1c>
 8002a44:	40022000 	.word	0x40022000

08002a48 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002a48:	4b03      	ldr	r3, [pc, #12]	; (8002a58 <HAL_IncTick+0x10>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	4a03      	ldr	r2, [pc, #12]	; (8002a5c <HAL_IncTick+0x14>)
 8002a4e:	6811      	ldr	r1, [r2, #0]
 8002a50:	440b      	add	r3, r1
 8002a52:	6013      	str	r3, [r2, #0]
}
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	20000428 	.word	0x20000428
 8002a5c:	20000814 	.word	0x20000814

08002a60 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002a60:	4b01      	ldr	r3, [pc, #4]	; (8002a68 <HAL_GetTick+0x8>)
 8002a62:	6818      	ldr	r0, [r3, #0]
}
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	20000814 	.word	0x20000814

08002a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a6c:	b538      	push	{r3, r4, r5, lr}
 8002a6e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002a70:	f7ff fff6 	bl	8002a60 <HAL_GetTick>
 8002a74:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a76:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002a7a:	d002      	beq.n	8002a82 <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 8002a7c:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <HAL_Delay+0x24>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a82:	f7ff ffed 	bl	8002a60 <HAL_GetTick>
 8002a86:	1b40      	subs	r0, r0, r5
 8002a88:	42a0      	cmp	r0, r4
 8002a8a:	d3fa      	bcc.n	8002a82 <HAL_Delay+0x16>
  {
  }
}
 8002a8c:	bd38      	pop	{r3, r4, r5, pc}
 8002a8e:	bf00      	nop
 8002a90:	20000428 	.word	0x20000428

08002a94 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a94:	4a07      	ldr	r2, [pc, #28]	; (8002ab4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002a96:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a98:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a9c:	041b      	lsls	r3, r3, #16
 8002a9e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aa0:	0200      	lsls	r0, r0, #8
 8002aa2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002ab0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002ab2:	4770      	bx	lr
 8002ab4:	e000ed00 	.word	0xe000ed00

08002ab8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ab8:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aba:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <HAL_NVIC_SetPriority+0x68>)
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ac2:	f1c3 0c07 	rsb	ip, r3, #7
 8002ac6:	f1bc 0f04 	cmp.w	ip, #4
 8002aca:	bf28      	it	cs
 8002acc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ad0:	f103 0e04 	add.w	lr, r3, #4
 8002ad4:	f1be 0f06 	cmp.w	lr, #6
 8002ad8:	d918      	bls.n	8002b0c <HAL_NVIC_SetPriority+0x54>
 8002ada:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002adc:	f04f 3eff 	mov.w	lr, #4294967295
 8002ae0:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002ae4:	ea21 010c 	bic.w	r1, r1, ip
 8002ae8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aea:	fa0e f303 	lsl.w	r3, lr, r3
 8002aee:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002af4:	2800      	cmp	r0, #0
 8002af6:	db0b      	blt.n	8002b10 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af8:	0109      	lsls	r1, r1, #4
 8002afa:	b2c9      	uxtb	r1, r1
 8002afc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002b00:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002b04:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002b08:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	e7e5      	b.n	8002adc <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b10:	f000 000f 	and.w	r0, r0, #15
 8002b14:	0109      	lsls	r1, r1, #4
 8002b16:	b2c9      	uxtb	r1, r1
 8002b18:	4b02      	ldr	r3, [pc, #8]	; (8002b24 <HAL_NVIC_SetPriority+0x6c>)
 8002b1a:	5419      	strb	r1, [r3, r0]
 8002b1c:	e7f4      	b.n	8002b08 <HAL_NVIC_SetPriority+0x50>
 8002b1e:	bf00      	nop
 8002b20:	e000ed00 	.word	0xe000ed00
 8002b24:	e000ed14 	.word	0xe000ed14

08002b28 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002b28:	2800      	cmp	r0, #0
 8002b2a:	db07      	blt.n	8002b3c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b2c:	f000 021f 	and.w	r2, r0, #31
 8002b30:	0940      	lsrs	r0, r0, #5
 8002b32:	2301      	movs	r3, #1
 8002b34:	4093      	lsls	r3, r2
 8002b36:	4a02      	ldr	r2, [pc, #8]	; (8002b40 <HAL_NVIC_EnableIRQ+0x18>)
 8002b38:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	e000e100 	.word	0xe000e100

08002b44 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b44:	3801      	subs	r0, #1
 8002b46:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002b4a:	d20b      	bcs.n	8002b64 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b4c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002b50:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b52:	4a05      	ldr	r2, [pc, #20]	; (8002b68 <HAL_SYSTICK_Config+0x24>)
 8002b54:	21f0      	movs	r1, #240	; 0xf0
 8002b56:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b5e:	2207      	movs	r2, #7
 8002b60:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b62:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002b64:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002b66:	4770      	bx	lr
 8002b68:	e000ed00 	.word	0xe000ed00

08002b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b6e:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8002b70:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b72:	e062      	b.n	8002c3a <HAL_GPIO_Init+0xce>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b74:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b76:	005e      	lsls	r6, r3, #1
 8002b78:	2403      	movs	r4, #3
 8002b7a:	40b4      	lsls	r4, r6
 8002b7c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b80:	68cc      	ldr	r4, [r1, #12]
 8002b82:	40b4      	lsls	r4, r6
 8002b84:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8002b86:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b88:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b8a:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b8e:	684c      	ldr	r4, [r1, #4]
 8002b90:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8002b94:	409c      	lsls	r4, r3
 8002b96:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8002b9a:	6044      	str	r4, [r0, #4]
 8002b9c:	e05e      	b.n	8002c5c <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b9e:	08dd      	lsrs	r5, r3, #3
 8002ba0:	3508      	adds	r5, #8
 8002ba2:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ba6:	f003 0407 	and.w	r4, r3, #7
 8002baa:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8002bae:	240f      	movs	r4, #15
 8002bb0:	fa04 f40c 	lsl.w	r4, r4, ip
 8002bb4:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bb8:	690c      	ldr	r4, [r1, #16]
 8002bba:	fa04 f40c 	lsl.w	r4, r4, ip
 8002bbe:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8002bc2:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8002bc6:	e060      	b.n	8002c8a <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bc8:	2404      	movs	r4, #4
 8002bca:	e000      	b.n	8002bce <HAL_GPIO_Init+0x62>
 8002bcc:	2400      	movs	r4, #0
 8002bce:	fa04 f40e 	lsl.w	r4, r4, lr
 8002bd2:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bd4:	f10c 0c02 	add.w	ip, ip, #2
 8002bd8:	4d52      	ldr	r5, [pc, #328]	; (8002d24 <HAL_GPIO_Init+0x1b8>)
 8002bda:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bde:	4c52      	ldr	r4, [pc, #328]	; (8002d28 <HAL_GPIO_Init+0x1bc>)
 8002be0:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8002be2:	43d4      	mvns	r4, r2
 8002be4:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002be8:	684f      	ldr	r7, [r1, #4]
 8002bea:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002bee:	d001      	beq.n	8002bf4 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8002bf0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8002bf4:	4d4c      	ldr	r5, [pc, #304]	; (8002d28 <HAL_GPIO_Init+0x1bc>)
 8002bf6:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8002bf8:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8002bfa:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bfe:	684f      	ldr	r7, [r1, #4]
 8002c00:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8002c04:	d001      	beq.n	8002c0a <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 8002c06:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8002c0a:	4d47      	ldr	r5, [pc, #284]	; (8002d28 <HAL_GPIO_Init+0x1bc>)
 8002c0c:	60ee      	str	r6, [r5, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c0e:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8002c10:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c14:	684f      	ldr	r7, [r1, #4]
 8002c16:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002c1a:	d001      	beq.n	8002c20 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 8002c1c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8002c20:	4d41      	ldr	r5, [pc, #260]	; (8002d28 <HAL_GPIO_Init+0x1bc>)
 8002c22:	606e      	str	r6, [r5, #4]

        temp = EXTI->IMR1;
 8002c24:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8002c26:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c28:	684e      	ldr	r6, [r1, #4]
 8002c2a:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8002c2e:	d001      	beq.n	8002c34 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 8002c30:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 8002c34:	4a3c      	ldr	r2, [pc, #240]	; (8002d28 <HAL_GPIO_Init+0x1bc>)
 8002c36:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 8002c38:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c3a:	680a      	ldr	r2, [r1, #0]
 8002c3c:	fa32 f403 	lsrs.w	r4, r2, r3
 8002c40:	d06e      	beq.n	8002d20 <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c42:	f04f 0c01 	mov.w	ip, #1
 8002c46:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8002c4a:	ea1c 0202 	ands.w	r2, ip, r2
 8002c4e:	d0f3      	beq.n	8002c38 <HAL_GPIO_Init+0xcc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c50:	684c      	ldr	r4, [r1, #4]
 8002c52:	f004 0403 	and.w	r4, r4, #3
 8002c56:	3c01      	subs	r4, #1
 8002c58:	2c01      	cmp	r4, #1
 8002c5a:	d98b      	bls.n	8002b74 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c5c:	684c      	ldr	r4, [r1, #4]
 8002c5e:	f004 0403 	and.w	r4, r4, #3
 8002c62:	2c03      	cmp	r4, #3
 8002c64:	d00c      	beq.n	8002c80 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8002c66:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c68:	005d      	lsls	r5, r3, #1
 8002c6a:	f04f 0c03 	mov.w	ip, #3
 8002c6e:	fa0c fc05 	lsl.w	ip, ip, r5
 8002c72:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c76:	688c      	ldr	r4, [r1, #8]
 8002c78:	40ac      	lsls	r4, r5
 8002c7a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8002c7e:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c80:	684c      	ldr	r4, [r1, #4]
 8002c82:	f004 0403 	and.w	r4, r4, #3
 8002c86:	2c02      	cmp	r4, #2
 8002c88:	d089      	beq.n	8002b9e <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 8002c8a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c8c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002c90:	f04f 0c03 	mov.w	ip, #3
 8002c94:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002c98:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c9c:	684c      	ldr	r4, [r1, #4]
 8002c9e:	f004 0403 	and.w	r4, r4, #3
 8002ca2:	fa04 f40e 	lsl.w	r4, r4, lr
 8002ca6:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8002caa:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cac:	684c      	ldr	r4, [r1, #4]
 8002cae:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8002cb2:	d0c1      	beq.n	8002c38 <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cb4:	4c1d      	ldr	r4, [pc, #116]	; (8002d2c <HAL_GPIO_Init+0x1c0>)
 8002cb6:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8002cb8:	f045 0501 	orr.w	r5, r5, #1
 8002cbc:	6625      	str	r5, [r4, #96]	; 0x60
 8002cbe:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8002cc0:	f004 0401 	and.w	r4, r4, #1
 8002cc4:	9401      	str	r4, [sp, #4]
 8002cc6:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002cc8:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8002ccc:	f10c 0502 	add.w	r5, ip, #2
 8002cd0:	4c14      	ldr	r4, [pc, #80]	; (8002d24 <HAL_GPIO_Init+0x1b8>)
 8002cd2:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002cd6:	f003 0403 	and.w	r4, r3, #3
 8002cda:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8002cde:	240f      	movs	r4, #15
 8002ce0:	fa04 f40e 	lsl.w	r4, r4, lr
 8002ce4:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ce8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8002cec:	f43f af6e 	beq.w	8002bcc <HAL_GPIO_Init+0x60>
 8002cf0:	4c0f      	ldr	r4, [pc, #60]	; (8002d30 <HAL_GPIO_Init+0x1c4>)
 8002cf2:	42a0      	cmp	r0, r4
 8002cf4:	d00e      	beq.n	8002d14 <HAL_GPIO_Init+0x1a8>
 8002cf6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002cfa:	42a0      	cmp	r0, r4
 8002cfc:	d00c      	beq.n	8002d18 <HAL_GPIO_Init+0x1ac>
 8002cfe:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002d02:	42a0      	cmp	r0, r4
 8002d04:	d00a      	beq.n	8002d1c <HAL_GPIO_Init+0x1b0>
 8002d06:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002d0a:	42a0      	cmp	r0, r4
 8002d0c:	f43f af5c 	beq.w	8002bc8 <HAL_GPIO_Init+0x5c>
 8002d10:	2407      	movs	r4, #7
 8002d12:	e75c      	b.n	8002bce <HAL_GPIO_Init+0x62>
 8002d14:	2401      	movs	r4, #1
 8002d16:	e75a      	b.n	8002bce <HAL_GPIO_Init+0x62>
 8002d18:	2402      	movs	r4, #2
 8002d1a:	e758      	b.n	8002bce <HAL_GPIO_Init+0x62>
 8002d1c:	2403      	movs	r4, #3
 8002d1e:	e756      	b.n	8002bce <HAL_GPIO_Init+0x62>
  }
}
 8002d20:	b003      	add	sp, #12
 8002d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d24:	40010000 	.word	0x40010000
 8002d28:	40010400 	.word	0x40010400
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	48000400 	.word	0x48000400

08002d34 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d34:	b10a      	cbz	r2, 8002d3a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d36:	6181      	str	r1, [r0, #24]
 8002d38:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d3a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002d3c:	4770      	bx	lr

08002d3e <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002d3e:	4770      	bx	lr

08002d40 <HAL_GPIO_EXTI_IRQHandler>:
{
 8002d40:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d42:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	4203      	tst	r3, r0
 8002d48:	d100      	bne.n	8002d4c <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8002d4a:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d4c:	4b02      	ldr	r3, [pc, #8]	; (8002d58 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002d4e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d50:	f7ff fff5 	bl	8002d3e <HAL_GPIO_EXTI_Callback>
}
 8002d54:	e7f9      	b.n	8002d4a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002d56:	bf00      	nop
 8002d58:	40010400 	.word	0x40010400

08002d5c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d5c:	4b02      	ldr	r3, [pc, #8]	; (8002d68 <HAL_PWREx_GetVoltageRange+0xc>)
 8002d5e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002d60:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	40007000 	.word	0x40007000

08002d6c <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d6c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002d70:	d00f      	beq.n	8002d92 <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d72:	4b1f      	ldr	r3, [pc, #124]	; (8002df0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d7e:	d034      	beq.n	8002dea <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d80:	4a1b      	ldr	r2, [pc, #108]	; (8002df0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002d82:	6813      	ldr	r3, [r2, #0]
 8002d84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d8c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d8e:	2000      	movs	r0, #0
 8002d90:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d92:	4b17      	ldr	r3, [pc, #92]	; (8002df0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d9e:	d020      	beq.n	8002de2 <HAL_PWREx_ControlVoltageScaling+0x76>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002da0:	4a13      	ldr	r2, [pc, #76]	; (8002df0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002da2:	6813      	ldr	r3, [r2, #0]
 8002da4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002da8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dac:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002dae:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2232      	movs	r2, #50	; 0x32
 8002db4:	fb02 f303 	mul.w	r3, r2, r3
 8002db8:	4a0f      	ldr	r2, [pc, #60]	; (8002df8 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8002dba:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbe:	0c9b      	lsrs	r3, r3, #18
 8002dc0:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dc2:	e000      	b.n	8002dc6 <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 8002dc4:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dc6:	4a0a      	ldr	r2, [pc, #40]	; (8002df0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002dc8:	6952      	ldr	r2, [r2, #20]
 8002dca:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002dce:	d001      	beq.n	8002dd4 <HAL_PWREx_ControlVoltageScaling+0x68>
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1f7      	bne.n	8002dc4 <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002dd4:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002ddc:	d103      	bne.n	8002de6 <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 8002dde:	2000      	movs	r0, #0
 8002de0:	4770      	bx	lr
 8002de2:	2000      	movs	r0, #0
 8002de4:	4770      	bx	lr
        return HAL_TIMEOUT;
 8002de6:	2003      	movs	r0, #3
 8002de8:	4770      	bx	lr
  return HAL_OK;
 8002dea:	2000      	movs	r0, #0
}
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	40007000 	.word	0x40007000
 8002df4:	20000424 	.word	0x20000424
 8002df8:	431bde83 	.word	0x431bde83

08002dfc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002dfc:	b530      	push	{r4, r5, lr}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e02:	4b20      	ldr	r3, [pc, #128]	; (8002e84 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8002e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e06:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002e0a:	d00b      	beq.n	8002e24 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e0c:	f7ff ffa6 	bl	8002d5c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e10:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002e14:	d017      	beq.n	8002e46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e16:	2c80      	cmp	r4, #128	; 0x80
 8002e18:	d81f      	bhi.n	8002e5a <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e1a:	d02d      	beq.n	8002e78 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e1c:	2c70      	cmp	r4, #112	; 0x70
 8002e1e:	d02d      	beq.n	8002e7c <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e20:	2100      	movs	r1, #0
 8002e22:	e01b      	b.n	8002e5c <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e24:	4d17      	ldr	r5, [pc, #92]	; (8002e84 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8002e26:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e2c:	65ab      	str	r3, [r5, #88]	; 0x58
 8002e2e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e34:	9301      	str	r3, [sp, #4]
 8002e36:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002e38:	f7ff ff90 	bl	8002d5c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e3c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002e3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e42:	65ab      	str	r3, [r5, #88]	; 0x58
 8002e44:	e7e4      	b.n	8002e10 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8002e46:	2c80      	cmp	r4, #128	; 0x80
 8002e48:	d903      	bls.n	8002e52 <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8002e4a:	2ca0      	cmp	r4, #160	; 0xa0
 8002e4c:	d903      	bls.n	8002e56 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e4e:	2102      	movs	r1, #2
 8002e50:	e004      	b.n	8002e5c <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e52:	2100      	movs	r1, #0
 8002e54:	e002      	b.n	8002e5c <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e56:	2101      	movs	r1, #1
 8002e58:	e000      	b.n	8002e5c <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e5a:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e5c:	4a0a      	ldr	r2, [pc, #40]	; (8002e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8002e5e:	6813      	ldr	r3, [r2, #0]
 8002e60:	f023 0307 	bic.w	r3, r3, #7
 8002e64:	430b      	orrs	r3, r1
 8002e66:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e68:	6813      	ldr	r3, [r2, #0]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	428b      	cmp	r3, r1
 8002e70:	d106      	bne.n	8002e80 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8002e72:	2000      	movs	r0, #0
}
 8002e74:	b003      	add	sp, #12
 8002e76:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e78:	2102      	movs	r1, #2
 8002e7a:	e7ef      	b.n	8002e5c <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	e7ed      	b.n	8002e5c <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 8002e80:	2001      	movs	r0, #1
 8002e82:	e7f7      	b.n	8002e74 <RCC_SetFlashLatencyFromMSIRange+0x78>
 8002e84:	40021000 	.word	0x40021000
 8002e88:	40022000 	.word	0x40022000

08002e8c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e8c:	4a28      	ldr	r2, [pc, #160]	; (8002f30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e8e:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e90:	68d2      	ldr	r2, [r2, #12]
 8002e92:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e96:	f013 030c 	ands.w	r3, r3, #12
 8002e9a:	d00a      	beq.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x26>
 8002e9c:	2b0c      	cmp	r3, #12
 8002e9e:	d006      	beq.n	8002eae <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d01f      	beq.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d020      	beq.n	8002eea <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ea8:	2000      	movs	r0, #0
 8002eaa:	4602      	mov	r2, r0
 8002eac:	e010      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002eae:	2a01      	cmp	r2, #1
 8002eb0:	d1f6      	bne.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002eb2:	4a1f      	ldr	r2, [pc, #124]	; (8002f30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	f012 0f08 	tst.w	r2, #8
 8002eba:	d10c      	bne.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ebc:	4a1c      	ldr	r2, [pc, #112]	; (8002f30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ebe:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8002ec2:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8002ec6:	491b      	ldr	r1, [pc, #108]	; (8002f34 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002ec8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ecc:	b143      	cbz	r3, 8002ee0 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ece:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ed0:	2b0c      	cmp	r3, #12
 8002ed2:	d00d      	beq.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x64>
}
 8002ed4:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ed6:	4a16      	ldr	r2, [pc, #88]	; (8002f30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ed8:	6812      	ldr	r2, [r2, #0]
 8002eda:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002ede:	e7f2      	b.n	8002ec6 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 8002ee0:	4610      	mov	r0, r2
 8002ee2:	e7f5      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 8002ee4:	4814      	ldr	r0, [pc, #80]	; (8002f38 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	e7f2      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8002eea:	4814      	ldr	r0, [pc, #80]	; (8002f3c <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002eec:	2200      	movs	r2, #0
 8002eee:	e7ef      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ef0:	4b0f      	ldr	r3, [pc, #60]	; (8002f30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d016      	beq.n	8002f2a <HAL_RCC_GetSysClockFreq+0x9e>
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	d100      	bne.n	8002f02 <HAL_RCC_GetSysClockFreq+0x76>
      pllvco = HSE_VALUE;
 8002f00:	4a0e      	ldr	r2, [pc, #56]	; (8002f3c <HAL_RCC_GetSysClockFreq+0xb0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f02:	490b      	ldr	r1, [pc, #44]	; (8002f30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f04:	68c8      	ldr	r0, [r1, #12]
 8002f06:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8002f0a:	1c43      	adds	r3, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f0c:	68c8      	ldr	r0, [r1, #12]
 8002f0e:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8002f12:	fb02 f000 	mul.w	r0, r2, r0
 8002f16:	fbb0 f0f3 	udiv	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f1a:	68cb      	ldr	r3, [r1, #12]
 8002f1c:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8002f20:	3301      	adds	r3, #1
 8002f22:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 8002f24:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8002f28:	e7d4      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x48>
    switch (pllsource)
 8002f2a:	4a03      	ldr	r2, [pc, #12]	; (8002f38 <HAL_RCC_GetSysClockFreq+0xac>)
 8002f2c:	e7e9      	b.n	8002f02 <HAL_RCC_GetSysClockFreq+0x76>
 8002f2e:	bf00      	nop
 8002f30:	40021000 	.word	0x40021000
 8002f34:	08007ed0 	.word	0x08007ed0
 8002f38:	00f42400 	.word	0x00f42400
 8002f3c:	007a1200 	.word	0x007a1200

08002f40 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8002f40:	2800      	cmp	r0, #0
 8002f42:	f000 831c 	beq.w	800357e <HAL_RCC_OscConfig+0x63e>
{
 8002f46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f4c:	4b96      	ldr	r3, [pc, #600]	; (80031a8 <HAL_RCC_OscConfig+0x268>)
 8002f4e:	689d      	ldr	r5, [r3, #8]
 8002f50:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f54:	68de      	ldr	r6, [r3, #12]
 8002f56:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f5a:	6803      	ldr	r3, [r0, #0]
 8002f5c:	f013 0f10 	tst.w	r3, #16
 8002f60:	d05a      	beq.n	8003018 <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f62:	b1e5      	cbz	r5, 8002f9e <HAL_RCC_OscConfig+0x5e>
 8002f64:	2d0c      	cmp	r5, #12
 8002f66:	d018      	beq.n	8002f9a <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f68:	69a3      	ldr	r3, [r4, #24]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 80bb 	beq.w	80030e6 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 8002f70:	4a8d      	ldr	r2, [pc, #564]	; (80031a8 <HAL_RCC_OscConfig+0x268>)
 8002f72:	6813      	ldr	r3, [r2, #0]
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002f7a:	f7ff fd71 	bl	8002a60 <HAL_GetTick>
 8002f7e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f80:	4b89      	ldr	r3, [pc, #548]	; (80031a8 <HAL_RCC_OscConfig+0x268>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f013 0f02 	tst.w	r3, #2
 8002f88:	f040 809a 	bne.w	80030c0 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f8c:	f7ff fd68 	bl	8002a60 <HAL_GetTick>
 8002f90:	1bc0      	subs	r0, r0, r7
 8002f92:	2802      	cmp	r0, #2
 8002f94:	d9f4      	bls.n	8002f80 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 8002f96:	2003      	movs	r0, #3
 8002f98:	e2fc      	b.n	8003594 <HAL_RCC_OscConfig+0x654>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f9a:	2e01      	cmp	r6, #1
 8002f9c:	d1e4      	bne.n	8002f68 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f9e:	4b82      	ldr	r3, [pc, #520]	; (80031a8 <HAL_RCC_OscConfig+0x268>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f013 0f02 	tst.w	r3, #2
 8002fa6:	d003      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x70>
 8002fa8:	69a3      	ldr	r3, [r4, #24]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 82e9 	beq.w	8003582 <HAL_RCC_OscConfig+0x642>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fb0:	6a20      	ldr	r0, [r4, #32]
 8002fb2:	4b7d      	ldr	r3, [pc, #500]	; (80031a8 <HAL_RCC_OscConfig+0x268>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f013 0f08 	tst.w	r3, #8
 8002fba:	d05b      	beq.n	8003074 <HAL_RCC_OscConfig+0x134>
 8002fbc:	4b7a      	ldr	r3, [pc, #488]	; (80031a8 <HAL_RCC_OscConfig+0x268>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fc4:	4298      	cmp	r0, r3
 8002fc6:	d85c      	bhi.n	8003082 <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fc8:	4b77      	ldr	r3, [pc, #476]	; (80031a8 <HAL_RCC_OscConfig+0x268>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	f042 0208 	orr.w	r2, r2, #8
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002fd8:	6a21      	ldr	r1, [r4, #32]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002fe4:	69e1      	ldr	r1, [r4, #28]
 8002fe6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002fea:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fec:	2d00      	cmp	r5, #0
 8002fee:	d060      	beq.n	80030b2 <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ff0:	f7ff ff4c 	bl	8002e8c <HAL_RCC_GetSysClockFreq>
 8002ff4:	4b6c      	ldr	r3, [pc, #432]	; (80031a8 <HAL_RCC_OscConfig+0x268>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002ffc:	4a6b      	ldr	r2, [pc, #428]	; (80031ac <HAL_RCC_OscConfig+0x26c>)
 8002ffe:	5cd3      	ldrb	r3, [r2, r3]
 8003000:	f003 031f 	and.w	r3, r3, #31
 8003004:	40d8      	lsrs	r0, r3
 8003006:	4b6a      	ldr	r3, [pc, #424]	; (80031b0 <HAL_RCC_OscConfig+0x270>)
 8003008:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 800300a:	4b6a      	ldr	r3, [pc, #424]	; (80031b4 <HAL_RCC_OscConfig+0x274>)
 800300c:	6818      	ldr	r0, [r3, #0]
 800300e:	f7ff fcdd 	bl	80029cc <HAL_InitTick>
        if(status != HAL_OK)
 8003012:	2800      	cmp	r0, #0
 8003014:	f040 82be 	bne.w	8003594 <HAL_RCC_OscConfig+0x654>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003018:	6823      	ldr	r3, [r4, #0]
 800301a:	f013 0f01 	tst.w	r3, #1
 800301e:	f000 8081 	beq.w	8003124 <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003022:	2d08      	cmp	r5, #8
 8003024:	d075      	beq.n	8003112 <HAL_RCC_OscConfig+0x1d2>
 8003026:	2d0c      	cmp	r5, #12
 8003028:	d071      	beq.n	800310e <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800302a:	6863      	ldr	r3, [r4, #4]
 800302c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003030:	f000 8097 	beq.w	8003162 <HAL_RCC_OscConfig+0x222>
 8003034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003038:	f000 8099 	beq.w	800316e <HAL_RCC_OscConfig+0x22e>
 800303c:	4b5a      	ldr	r3, [pc, #360]	; (80031a8 <HAL_RCC_OscConfig+0x268>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800304c:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800304e:	6863      	ldr	r3, [r4, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 8099 	beq.w	8003188 <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 8003056:	f7ff fd03 	bl	8002a60 <HAL_GetTick>
 800305a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800305c:	4b52      	ldr	r3, [pc, #328]	; (80031a8 <HAL_RCC_OscConfig+0x268>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003064:	d15e      	bne.n	8003124 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003066:	f7ff fcfb 	bl	8002a60 <HAL_GetTick>
 800306a:	1bc0      	subs	r0, r0, r7
 800306c:	2864      	cmp	r0, #100	; 0x64
 800306e:	d9f5      	bls.n	800305c <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 8003070:	2003      	movs	r0, #3
 8003072:	e28f      	b.n	8003594 <HAL_RCC_OscConfig+0x654>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003074:	4b4c      	ldr	r3, [pc, #304]	; (80031a8 <HAL_RCC_OscConfig+0x268>)
 8003076:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800307a:	091b      	lsrs	r3, r3, #4
 800307c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003080:	e7a0      	b.n	8002fc4 <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003082:	f7ff febb 	bl	8002dfc <RCC_SetFlashLatencyFromMSIRange>
 8003086:	2800      	cmp	r0, #0
 8003088:	f040 827d 	bne.w	8003586 <HAL_RCC_OscConfig+0x646>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800308c:	4b46      	ldr	r3, [pc, #280]	; (80031a8 <HAL_RCC_OscConfig+0x268>)
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	f042 0208 	orr.w	r2, r2, #8
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800309c:	6a21      	ldr	r1, [r4, #32]
 800309e:	430a      	orrs	r2, r1
 80030a0:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80030a8:	69e1      	ldr	r1, [r4, #28]
 80030aa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80030ae:	605a      	str	r2, [r3, #4]
 80030b0:	e79e      	b.n	8002ff0 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030b2:	6a20      	ldr	r0, [r4, #32]
 80030b4:	f7ff fea2 	bl	8002dfc <RCC_SetFlashLatencyFromMSIRange>
 80030b8:	2800      	cmp	r0, #0
 80030ba:	d099      	beq.n	8002ff0 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 80030bc:	2001      	movs	r0, #1
 80030be:	e269      	b.n	8003594 <HAL_RCC_OscConfig+0x654>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030c0:	4b39      	ldr	r3, [pc, #228]	; (80031a8 <HAL_RCC_OscConfig+0x268>)
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	f042 0208 	orr.w	r2, r2, #8
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80030d0:	6a21      	ldr	r1, [r4, #32]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80030dc:	69e1      	ldr	r1, [r4, #28]
 80030de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80030e2:	605a      	str	r2, [r3, #4]
 80030e4:	e798      	b.n	8003018 <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 80030e6:	4a30      	ldr	r2, [pc, #192]	; (80031a8 <HAL_RCC_OscConfig+0x268>)
 80030e8:	6813      	ldr	r3, [r2, #0]
 80030ea:	f023 0301 	bic.w	r3, r3, #1
 80030ee:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80030f0:	f7ff fcb6 	bl	8002a60 <HAL_GetTick>
 80030f4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030f6:	4b2c      	ldr	r3, [pc, #176]	; (80031a8 <HAL_RCC_OscConfig+0x268>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f013 0f02 	tst.w	r3, #2
 80030fe:	d08b      	beq.n	8003018 <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003100:	f7ff fcae 	bl	8002a60 <HAL_GetTick>
 8003104:	1bc0      	subs	r0, r0, r7
 8003106:	2802      	cmp	r0, #2
 8003108:	d9f5      	bls.n	80030f6 <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 800310a:	2003      	movs	r0, #3
 800310c:	e242      	b.n	8003594 <HAL_RCC_OscConfig+0x654>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800310e:	2e03      	cmp	r6, #3
 8003110:	d18b      	bne.n	800302a <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003112:	4b25      	ldr	r3, [pc, #148]	; (80031a8 <HAL_RCC_OscConfig+0x268>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800311a:	d003      	beq.n	8003124 <HAL_RCC_OscConfig+0x1e4>
 800311c:	6863      	ldr	r3, [r4, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 8233 	beq.w	800358a <HAL_RCC_OscConfig+0x64a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003124:	6823      	ldr	r3, [r4, #0]
 8003126:	f013 0f02 	tst.w	r3, #2
 800312a:	d058      	beq.n	80031de <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800312c:	2d04      	cmp	r5, #4
 800312e:	d045      	beq.n	80031bc <HAL_RCC_OscConfig+0x27c>
 8003130:	2d0c      	cmp	r5, #12
 8003132:	d041      	beq.n	80031b8 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003134:	68e3      	ldr	r3, [r4, #12]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d077      	beq.n	800322a <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 800313a:	4a1b      	ldr	r2, [pc, #108]	; (80031a8 <HAL_RCC_OscConfig+0x268>)
 800313c:	6813      	ldr	r3, [r2, #0]
 800313e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003142:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003144:	f7ff fc8c 	bl	8002a60 <HAL_GetTick>
 8003148:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800314a:	4b17      	ldr	r3, [pc, #92]	; (80031a8 <HAL_RCC_OscConfig+0x268>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003152:	d161      	bne.n	8003218 <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003154:	f7ff fc84 	bl	8002a60 <HAL_GetTick>
 8003158:	1b80      	subs	r0, r0, r6
 800315a:	2802      	cmp	r0, #2
 800315c:	d9f5      	bls.n	800314a <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 800315e:	2003      	movs	r0, #3
 8003160:	e218      	b.n	8003594 <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003162:	4a11      	ldr	r2, [pc, #68]	; (80031a8 <HAL_RCC_OscConfig+0x268>)
 8003164:	6813      	ldr	r3, [r2, #0]
 8003166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800316a:	6013      	str	r3, [r2, #0]
 800316c:	e76f      	b.n	800304e <HAL_RCC_OscConfig+0x10e>
 800316e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003172:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	e762      	b.n	800304e <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 8003188:	f7ff fc6a 	bl	8002a60 <HAL_GetTick>
 800318c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800318e:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <HAL_RCC_OscConfig+0x268>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003196:	d0c5      	beq.n	8003124 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003198:	f7ff fc62 	bl	8002a60 <HAL_GetTick>
 800319c:	1bc0      	subs	r0, r0, r7
 800319e:	2864      	cmp	r0, #100	; 0x64
 80031a0:	d9f5      	bls.n	800318e <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 80031a2:	2003      	movs	r0, #3
 80031a4:	e1f6      	b.n	8003594 <HAL_RCC_OscConfig+0x654>
 80031a6:	bf00      	nop
 80031a8:	40021000 	.word	0x40021000
 80031ac:	08007ec0 	.word	0x08007ec0
 80031b0:	20000424 	.word	0x20000424
 80031b4:	2000042c 	.word	0x2000042c
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80031b8:	2e02      	cmp	r6, #2
 80031ba:	d1bb      	bne.n	8003134 <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031bc:	4ba4      	ldr	r3, [pc, #656]	; (8003450 <HAL_RCC_OscConfig+0x510>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80031c4:	d003      	beq.n	80031ce <HAL_RCC_OscConfig+0x28e>
 80031c6:	68e3      	ldr	r3, [r4, #12]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 81e0 	beq.w	800358e <HAL_RCC_OscConfig+0x64e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ce:	4aa0      	ldr	r2, [pc, #640]	; (8003450 <HAL_RCC_OscConfig+0x510>)
 80031d0:	6853      	ldr	r3, [r2, #4]
 80031d2:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80031d6:	6921      	ldr	r1, [r4, #16]
 80031d8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80031dc:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031de:	6823      	ldr	r3, [r4, #0]
 80031e0:	f013 0f08 	tst.w	r3, #8
 80031e4:	d04c      	beq.n	8003280 <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031e6:	6963      	ldr	r3, [r4, #20]
 80031e8:	b39b      	cbz	r3, 8003252 <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 80031ea:	4a99      	ldr	r2, [pc, #612]	; (8003450 <HAL_RCC_OscConfig+0x510>)
 80031ec:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80031f0:	f043 0301 	orr.w	r3, r3, #1
 80031f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80031f8:	f7ff fc32 	bl	8002a60 <HAL_GetTick>
 80031fc:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031fe:	4b94      	ldr	r3, [pc, #592]	; (8003450 <HAL_RCC_OscConfig+0x510>)
 8003200:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003204:	f013 0f02 	tst.w	r3, #2
 8003208:	d13a      	bne.n	8003280 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800320a:	f7ff fc29 	bl	8002a60 <HAL_GetTick>
 800320e:	1b80      	subs	r0, r0, r6
 8003210:	2802      	cmp	r0, #2
 8003212:	d9f4      	bls.n	80031fe <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 8003214:	2003      	movs	r0, #3
 8003216:	e1bd      	b.n	8003594 <HAL_RCC_OscConfig+0x654>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003218:	4a8d      	ldr	r2, [pc, #564]	; (8003450 <HAL_RCC_OscConfig+0x510>)
 800321a:	6853      	ldr	r3, [r2, #4]
 800321c:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8003220:	6921      	ldr	r1, [r4, #16]
 8003222:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003226:	6053      	str	r3, [r2, #4]
 8003228:	e7d9      	b.n	80031de <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 800322a:	4a89      	ldr	r2, [pc, #548]	; (8003450 <HAL_RCC_OscConfig+0x510>)
 800322c:	6813      	ldr	r3, [r2, #0]
 800322e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003232:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003234:	f7ff fc14 	bl	8002a60 <HAL_GetTick>
 8003238:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800323a:	4b85      	ldr	r3, [pc, #532]	; (8003450 <HAL_RCC_OscConfig+0x510>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003242:	d0cc      	beq.n	80031de <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003244:	f7ff fc0c 	bl	8002a60 <HAL_GetTick>
 8003248:	1b80      	subs	r0, r0, r6
 800324a:	2802      	cmp	r0, #2
 800324c:	d9f5      	bls.n	800323a <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 800324e:	2003      	movs	r0, #3
 8003250:	e1a0      	b.n	8003594 <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_LSI_DISABLE();
 8003252:	4a7f      	ldr	r2, [pc, #508]	; (8003450 <HAL_RCC_OscConfig+0x510>)
 8003254:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003258:	f023 0301 	bic.w	r3, r3, #1
 800325c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003260:	f7ff fbfe 	bl	8002a60 <HAL_GetTick>
 8003264:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003266:	4b7a      	ldr	r3, [pc, #488]	; (8003450 <HAL_RCC_OscConfig+0x510>)
 8003268:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800326c:	f013 0f02 	tst.w	r3, #2
 8003270:	d006      	beq.n	8003280 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003272:	f7ff fbf5 	bl	8002a60 <HAL_GetTick>
 8003276:	1b80      	subs	r0, r0, r6
 8003278:	2802      	cmp	r0, #2
 800327a:	d9f4      	bls.n	8003266 <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 800327c:	2003      	movs	r0, #3
 800327e:	e189      	b.n	8003594 <HAL_RCC_OscConfig+0x654>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003280:	6823      	ldr	r3, [r4, #0]
 8003282:	f013 0f04 	tst.w	r3, #4
 8003286:	d07a      	beq.n	800337e <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003288:	4b71      	ldr	r3, [pc, #452]	; (8003450 <HAL_RCC_OscConfig+0x510>)
 800328a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003290:	d136      	bne.n	8003300 <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003292:	4b6f      	ldr	r3, [pc, #444]	; (8003450 <HAL_RCC_OscConfig+0x510>)
 8003294:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003296:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800329a:	659a      	str	r2, [r3, #88]	; 0x58
 800329c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a2:	9301      	str	r3, [sp, #4]
 80032a4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80032a6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032a8:	4b6a      	ldr	r3, [pc, #424]	; (8003454 <HAL_RCC_OscConfig+0x514>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f413 7f80 	tst.w	r3, #256	; 0x100
 80032b0:	d028      	beq.n	8003304 <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032b2:	68a3      	ldr	r3, [r4, #8]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d039      	beq.n	800332c <HAL_RCC_OscConfig+0x3ec>
 80032b8:	2b05      	cmp	r3, #5
 80032ba:	d03f      	beq.n	800333c <HAL_RCC_OscConfig+0x3fc>
 80032bc:	4b64      	ldr	r3, [pc, #400]	; (8003450 <HAL_RCC_OscConfig+0x510>)
 80032be:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80032c2:	f022 0201 	bic.w	r2, r2, #1
 80032c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80032ca:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80032ce:	f022 0204 	bic.w	r2, r2, #4
 80032d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032d6:	68a3      	ldr	r3, [r4, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d03d      	beq.n	8003358 <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 80032dc:	f7ff fbc0 	bl	8002a60 <HAL_GetTick>
 80032e0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032e2:	4b5b      	ldr	r3, [pc, #364]	; (8003450 <HAL_RCC_OscConfig+0x510>)
 80032e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e8:	f013 0f02 	tst.w	r3, #2
 80032ec:	d146      	bne.n	800337c <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ee:	f7ff fbb7 	bl	8002a60 <HAL_GetTick>
 80032f2:	1bc0      	subs	r0, r0, r7
 80032f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80032f8:	4298      	cmp	r0, r3
 80032fa:	d9f2      	bls.n	80032e2 <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 80032fc:	2003      	movs	r0, #3
 80032fe:	e149      	b.n	8003594 <HAL_RCC_OscConfig+0x654>
    FlagStatus       pwrclkchanged = RESET;
 8003300:	2600      	movs	r6, #0
 8003302:	e7d1      	b.n	80032a8 <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003304:	4a53      	ldr	r2, [pc, #332]	; (8003454 <HAL_RCC_OscConfig+0x514>)
 8003306:	6813      	ldr	r3, [r2, #0]
 8003308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800330c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800330e:	f7ff fba7 	bl	8002a60 <HAL_GetTick>
 8003312:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003314:	4b4f      	ldr	r3, [pc, #316]	; (8003454 <HAL_RCC_OscConfig+0x514>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f413 7f80 	tst.w	r3, #256	; 0x100
 800331c:	d1c9      	bne.n	80032b2 <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800331e:	f7ff fb9f 	bl	8002a60 <HAL_GetTick>
 8003322:	1bc0      	subs	r0, r0, r7
 8003324:	2802      	cmp	r0, #2
 8003326:	d9f5      	bls.n	8003314 <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 8003328:	2003      	movs	r0, #3
 800332a:	e133      	b.n	8003594 <HAL_RCC_OscConfig+0x654>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800332c:	4a48      	ldr	r2, [pc, #288]	; (8003450 <HAL_RCC_OscConfig+0x510>)
 800332e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003332:	f043 0301 	orr.w	r3, r3, #1
 8003336:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800333a:	e7cc      	b.n	80032d6 <HAL_RCC_OscConfig+0x396>
 800333c:	4b44      	ldr	r3, [pc, #272]	; (8003450 <HAL_RCC_OscConfig+0x510>)
 800333e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003342:	f042 0204 	orr.w	r2, r2, #4
 8003346:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800334a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800334e:	f042 0201 	orr.w	r2, r2, #1
 8003352:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003356:	e7be      	b.n	80032d6 <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 8003358:	f7ff fb82 	bl	8002a60 <HAL_GetTick>
 800335c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800335e:	4b3c      	ldr	r3, [pc, #240]	; (8003450 <HAL_RCC_OscConfig+0x510>)
 8003360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003364:	f013 0f02 	tst.w	r3, #2
 8003368:	d008      	beq.n	800337c <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336a:	f7ff fb79 	bl	8002a60 <HAL_GetTick>
 800336e:	1bc0      	subs	r0, r0, r7
 8003370:	f241 3388 	movw	r3, #5000	; 0x1388
 8003374:	4298      	cmp	r0, r3
 8003376:	d9f2      	bls.n	800335e <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 8003378:	2003      	movs	r0, #3
 800337a:	e10b      	b.n	8003594 <HAL_RCC_OscConfig+0x654>
    if(pwrclkchanged == SET)
 800337c:	b9e6      	cbnz	r6, 80033b8 <HAL_RCC_OscConfig+0x478>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800337e:	6823      	ldr	r3, [r4, #0]
 8003380:	f013 0f20 	tst.w	r3, #32
 8003384:	d035      	beq.n	80033f2 <HAL_RCC_OscConfig+0x4b2>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003386:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003388:	b1e3      	cbz	r3, 80033c4 <HAL_RCC_OscConfig+0x484>
      __HAL_RCC_HSI48_ENABLE();
 800338a:	4a31      	ldr	r2, [pc, #196]	; (8003450 <HAL_RCC_OscConfig+0x510>)
 800338c:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8003390:	f043 0301 	orr.w	r3, r3, #1
 8003394:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003398:	f7ff fb62 	bl	8002a60 <HAL_GetTick>
 800339c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800339e:	4b2c      	ldr	r3, [pc, #176]	; (8003450 <HAL_RCC_OscConfig+0x510>)
 80033a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033a4:	f013 0f02 	tst.w	r3, #2
 80033a8:	d123      	bne.n	80033f2 <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033aa:	f7ff fb59 	bl	8002a60 <HAL_GetTick>
 80033ae:	1b80      	subs	r0, r0, r6
 80033b0:	2802      	cmp	r0, #2
 80033b2:	d9f4      	bls.n	800339e <HAL_RCC_OscConfig+0x45e>
          return HAL_TIMEOUT;
 80033b4:	2003      	movs	r0, #3
 80033b6:	e0ed      	b.n	8003594 <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_PWR_CLK_DISABLE();
 80033b8:	4a25      	ldr	r2, [pc, #148]	; (8003450 <HAL_RCC_OscConfig+0x510>)
 80033ba:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80033bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033c0:	6593      	str	r3, [r2, #88]	; 0x58
 80033c2:	e7dc      	b.n	800337e <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_HSI48_DISABLE();
 80033c4:	4a22      	ldr	r2, [pc, #136]	; (8003450 <HAL_RCC_OscConfig+0x510>)
 80033c6:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 80033ca:	f023 0301 	bic.w	r3, r3, #1
 80033ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 80033d2:	f7ff fb45 	bl	8002a60 <HAL_GetTick>
 80033d6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033d8:	4b1d      	ldr	r3, [pc, #116]	; (8003450 <HAL_RCC_OscConfig+0x510>)
 80033da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033de:	f013 0f02 	tst.w	r3, #2
 80033e2:	d006      	beq.n	80033f2 <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033e4:	f7ff fb3c 	bl	8002a60 <HAL_GetTick>
 80033e8:	1b80      	subs	r0, r0, r6
 80033ea:	2802      	cmp	r0, #2
 80033ec:	d9f4      	bls.n	80033d8 <HAL_RCC_OscConfig+0x498>
          return HAL_TIMEOUT;
 80033ee:	2003      	movs	r0, #3
 80033f0:	e0d0      	b.n	8003594 <HAL_RCC_OscConfig+0x654>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 80cc 	beq.w	8003592 <HAL_RCC_OscConfig+0x652>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d017      	beq.n	800342e <HAL_RCC_OscConfig+0x4ee>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033fe:	2d0c      	cmp	r5, #12
 8003400:	f000 80cc 	beq.w	800359c <HAL_RCC_OscConfig+0x65c>
        __HAL_RCC_PLL_DISABLE();
 8003404:	4a12      	ldr	r2, [pc, #72]	; (8003450 <HAL_RCC_OscConfig+0x510>)
 8003406:	6813      	ldr	r3, [r2, #0]
 8003408:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800340c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800340e:	f7ff fb27 	bl	8002a60 <HAL_GetTick>
 8003412:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003414:	4b0e      	ldr	r3, [pc, #56]	; (8003450 <HAL_RCC_OscConfig+0x510>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800341c:	f000 80a8 	beq.w	8003570 <HAL_RCC_OscConfig+0x630>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003420:	f7ff fb1e 	bl	8002a60 <HAL_GetTick>
 8003424:	1b00      	subs	r0, r0, r4
 8003426:	2802      	cmp	r0, #2
 8003428:	d9f4      	bls.n	8003414 <HAL_RCC_OscConfig+0x4d4>
            return HAL_TIMEOUT;
 800342a:	2003      	movs	r0, #3
 800342c:	e0b2      	b.n	8003594 <HAL_RCC_OscConfig+0x654>
      pll_config = RCC->PLLCFGR;
 800342e:	4b08      	ldr	r3, [pc, #32]	; (8003450 <HAL_RCC_OscConfig+0x510>)
 8003430:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003432:	f003 0103 	and.w	r1, r3, #3
 8003436:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003438:	4291      	cmp	r1, r2
 800343a:	d00d      	beq.n	8003458 <HAL_RCC_OscConfig+0x518>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800343c:	2d0c      	cmp	r5, #12
 800343e:	f000 80ab 	beq.w	8003598 <HAL_RCC_OscConfig+0x658>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003442:	4b03      	ldr	r3, [pc, #12]	; (8003450 <HAL_RCC_OscConfig+0x510>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 800344a:	d02f      	beq.n	80034ac <HAL_RCC_OscConfig+0x56c>
            return HAL_ERROR;
 800344c:	2001      	movs	r0, #1
 800344e:	e0a1      	b.n	8003594 <HAL_RCC_OscConfig+0x654>
 8003450:	40021000 	.word	0x40021000
 8003454:	40007000 	.word	0x40007000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003458:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800345c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800345e:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003460:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8003464:	d1ea      	bne.n	800343c <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003466:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800346a:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800346c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8003470:	d1e4      	bne.n	800343c <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003472:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003476:	6ba1      	ldr	r1, [r4, #56]	; 0x38
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003478:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800347c:	d1de      	bne.n	800343c <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800347e:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8003482:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003484:	0852      	lsrs	r2, r2, #1
 8003486:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003488:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800348c:	d1d6      	bne.n	800343c <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800348e:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003492:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003494:	0852      	lsrs	r2, r2, #1
 8003496:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003498:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800349c:	d1ce      	bne.n	800343c <HAL_RCC_OscConfig+0x4fc>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800349e:	4b40      	ldr	r3, [pc, #256]	; (80035a0 <HAL_RCC_OscConfig+0x660>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80034a6:	d049      	beq.n	800353c <HAL_RCC_OscConfig+0x5fc>
  return HAL_OK;
 80034a8:	2000      	movs	r0, #0
 80034aa:	e073      	b.n	8003594 <HAL_RCC_OscConfig+0x654>
            __HAL_RCC_PLL_DISABLE();
 80034ac:	4a3c      	ldr	r2, [pc, #240]	; (80035a0 <HAL_RCC_OscConfig+0x660>)
 80034ae:	6813      	ldr	r3, [r2, #0]
 80034b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034b4:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 80034b6:	f7ff fad3 	bl	8002a60 <HAL_GetTick>
 80034ba:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034bc:	4b38      	ldr	r3, [pc, #224]	; (80035a0 <HAL_RCC_OscConfig+0x660>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80034c4:	d006      	beq.n	80034d4 <HAL_RCC_OscConfig+0x594>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c6:	f7ff facb 	bl	8002a60 <HAL_GetTick>
 80034ca:	1b40      	subs	r0, r0, r5
 80034cc:	2802      	cmp	r0, #2
 80034ce:	d9f5      	bls.n	80034bc <HAL_RCC_OscConfig+0x57c>
                return HAL_TIMEOUT;
 80034d0:	2003      	movs	r0, #3
 80034d2:	e05f      	b.n	8003594 <HAL_RCC_OscConfig+0x654>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034d4:	4a32      	ldr	r2, [pc, #200]	; (80035a0 <HAL_RCC_OscConfig+0x660>)
 80034d6:	68d3      	ldr	r3, [r2, #12]
 80034d8:	4932      	ldr	r1, [pc, #200]	; (80035a4 <HAL_RCC_OscConfig+0x664>)
 80034da:	4019      	ands	r1, r3
 80034dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80034de:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80034e0:	3801      	subs	r0, #1
 80034e2:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80034e6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80034e8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80034ec:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80034ee:	0840      	lsrs	r0, r0, #1
 80034f0:	3801      	subs	r0, #1
 80034f2:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 80034f6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80034f8:	0840      	lsrs	r0, r0, #1
 80034fa:	3801      	subs	r0, #1
 80034fc:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8003500:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003502:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8003506:	430b      	orrs	r3, r1
 8003508:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 800350a:	6813      	ldr	r3, [r2, #0]
 800350c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003510:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003512:	68d3      	ldr	r3, [r2, #12]
 8003514:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003518:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 800351a:	f7ff faa1 	bl	8002a60 <HAL_GetTick>
 800351e:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003520:	4b1f      	ldr	r3, [pc, #124]	; (80035a0 <HAL_RCC_OscConfig+0x660>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003528:	d106      	bne.n	8003538 <HAL_RCC_OscConfig+0x5f8>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800352a:	f7ff fa99 	bl	8002a60 <HAL_GetTick>
 800352e:	1b00      	subs	r0, r0, r4
 8003530:	2802      	cmp	r0, #2
 8003532:	d9f5      	bls.n	8003520 <HAL_RCC_OscConfig+0x5e0>
                return HAL_TIMEOUT;
 8003534:	2003      	movs	r0, #3
 8003536:	e02d      	b.n	8003594 <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 8003538:	2000      	movs	r0, #0
 800353a:	e02b      	b.n	8003594 <HAL_RCC_OscConfig+0x654>
          __HAL_RCC_PLL_ENABLE();
 800353c:	4b18      	ldr	r3, [pc, #96]	; (80035a0 <HAL_RCC_OscConfig+0x660>)
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003544:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800354c:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 800354e:	f7ff fa87 	bl	8002a60 <HAL_GetTick>
 8003552:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003554:	4b12      	ldr	r3, [pc, #72]	; (80035a0 <HAL_RCC_OscConfig+0x660>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800355c:	d106      	bne.n	800356c <HAL_RCC_OscConfig+0x62c>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800355e:	f7ff fa7f 	bl	8002a60 <HAL_GetTick>
 8003562:	1b03      	subs	r3, r0, r4
 8003564:	2b02      	cmp	r3, #2
 8003566:	d9f5      	bls.n	8003554 <HAL_RCC_OscConfig+0x614>
              return HAL_TIMEOUT;
 8003568:	2003      	movs	r0, #3
 800356a:	e013      	b.n	8003594 <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 800356c:	2000      	movs	r0, #0
 800356e:	e011      	b.n	8003594 <HAL_RCC_OscConfig+0x654>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003570:	4a0b      	ldr	r2, [pc, #44]	; (80035a0 <HAL_RCC_OscConfig+0x660>)
 8003572:	68d1      	ldr	r1, [r2, #12]
 8003574:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <HAL_RCC_OscConfig+0x668>)
 8003576:	400b      	ands	r3, r1
 8003578:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 800357a:	2000      	movs	r0, #0
 800357c:	e00a      	b.n	8003594 <HAL_RCC_OscConfig+0x654>
    return HAL_ERROR;
 800357e:	2001      	movs	r0, #1
}
 8003580:	4770      	bx	lr
        return HAL_ERROR;
 8003582:	2001      	movs	r0, #1
 8003584:	e006      	b.n	8003594 <HAL_RCC_OscConfig+0x654>
            return HAL_ERROR;
 8003586:	2001      	movs	r0, #1
 8003588:	e004      	b.n	8003594 <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 800358a:	2001      	movs	r0, #1
 800358c:	e002      	b.n	8003594 <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 800358e:	2001      	movs	r0, #1
 8003590:	e000      	b.n	8003594 <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 8003592:	2000      	movs	r0, #0
}
 8003594:	b003      	add	sp, #12
 8003596:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8003598:	2001      	movs	r0, #1
 800359a:	e7fb      	b.n	8003594 <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 800359c:	2001      	movs	r0, #1
 800359e:	e7f9      	b.n	8003594 <HAL_RCC_OscConfig+0x654>
 80035a0:	40021000 	.word	0x40021000
 80035a4:	019d808c 	.word	0x019d808c
 80035a8:	feeefffc 	.word	0xfeeefffc

080035ac <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80035ac:	2800      	cmp	r0, #0
 80035ae:	f000 80af 	beq.w	8003710 <HAL_RCC_ClockConfig+0x164>
{
 80035b2:	b570      	push	{r4, r5, r6, lr}
 80035b4:	460d      	mov	r5, r1
 80035b6:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035b8:	4b59      	ldr	r3, [pc, #356]	; (8003720 <HAL_RCC_ClockConfig+0x174>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	428b      	cmp	r3, r1
 80035c2:	d20b      	bcs.n	80035dc <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c4:	4a56      	ldr	r2, [pc, #344]	; (8003720 <HAL_RCC_ClockConfig+0x174>)
 80035c6:	6813      	ldr	r3, [r2, #0]
 80035c8:	f023 0307 	bic.w	r3, r3, #7
 80035cc:	430b      	orrs	r3, r1
 80035ce:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d0:	6813      	ldr	r3, [r2, #0]
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	428b      	cmp	r3, r1
 80035d8:	f040 809c 	bne.w	8003714 <HAL_RCC_ClockConfig+0x168>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035dc:	6823      	ldr	r3, [r4, #0]
 80035de:	f013 0f02 	tst.w	r3, #2
 80035e2:	d00c      	beq.n	80035fe <HAL_RCC_ClockConfig+0x52>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035e4:	68a2      	ldr	r2, [r4, #8]
 80035e6:	4b4f      	ldr	r3, [pc, #316]	; (8003724 <HAL_RCC_ClockConfig+0x178>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d905      	bls.n	80035fe <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f2:	494c      	ldr	r1, [pc, #304]	; (8003724 <HAL_RCC_ClockConfig+0x178>)
 80035f4:	688b      	ldr	r3, [r1, #8]
 80035f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035fa:	431a      	orrs	r2, r3
 80035fc:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035fe:	6823      	ldr	r3, [r4, #0]
 8003600:	f013 0f01 	tst.w	r3, #1
 8003604:	d039      	beq.n	800367a <HAL_RCC_ClockConfig+0xce>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003606:	6863      	ldr	r3, [r4, #4]
 8003608:	2b03      	cmp	r3, #3
 800360a:	d009      	beq.n	8003620 <HAL_RCC_ClockConfig+0x74>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800360c:	2b02      	cmp	r3, #2
 800360e:	d026      	beq.n	800365e <HAL_RCC_ClockConfig+0xb2>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003610:	bb63      	cbnz	r3, 800366c <HAL_RCC_ClockConfig+0xc0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003612:	4a44      	ldr	r2, [pc, #272]	; (8003724 <HAL_RCC_ClockConfig+0x178>)
 8003614:	6812      	ldr	r2, [r2, #0]
 8003616:	f012 0f02 	tst.w	r2, #2
 800361a:	d106      	bne.n	800362a <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 800361c:	2001      	movs	r0, #1
 800361e:	e076      	b.n	800370e <HAL_RCC_ClockConfig+0x162>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003620:	4a40      	ldr	r2, [pc, #256]	; (8003724 <HAL_RCC_ClockConfig+0x178>)
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003628:	d076      	beq.n	8003718 <HAL_RCC_ClockConfig+0x16c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800362a:	493e      	ldr	r1, [pc, #248]	; (8003724 <HAL_RCC_ClockConfig+0x178>)
 800362c:	688a      	ldr	r2, [r1, #8]
 800362e:	f022 0203 	bic.w	r2, r2, #3
 8003632:	4313      	orrs	r3, r2
 8003634:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003636:	f7ff fa13 	bl	8002a60 <HAL_GetTick>
 800363a:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363c:	4b39      	ldr	r3, [pc, #228]	; (8003724 <HAL_RCC_ClockConfig+0x178>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f003 030c 	and.w	r3, r3, #12
 8003644:	6862      	ldr	r2, [r4, #4]
 8003646:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800364a:	d016      	beq.n	800367a <HAL_RCC_ClockConfig+0xce>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800364c:	f7ff fa08 	bl	8002a60 <HAL_GetTick>
 8003650:	1b80      	subs	r0, r0, r6
 8003652:	f241 3388 	movw	r3, #5000	; 0x1388
 8003656:	4298      	cmp	r0, r3
 8003658:	d9f0      	bls.n	800363c <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 800365a:	2003      	movs	r0, #3
 800365c:	e057      	b.n	800370e <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800365e:	4a31      	ldr	r2, [pc, #196]	; (8003724 <HAL_RCC_ClockConfig+0x178>)
 8003660:	6812      	ldr	r2, [r2, #0]
 8003662:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003666:	d1e0      	bne.n	800362a <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8003668:	2001      	movs	r0, #1
 800366a:	e050      	b.n	800370e <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800366c:	4a2d      	ldr	r2, [pc, #180]	; (8003724 <HAL_RCC_ClockConfig+0x178>)
 800366e:	6812      	ldr	r2, [r2, #0]
 8003670:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003674:	d1d9      	bne.n	800362a <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8003676:	2001      	movs	r0, #1
 8003678:	e049      	b.n	800370e <HAL_RCC_ClockConfig+0x162>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800367a:	6823      	ldr	r3, [r4, #0]
 800367c:	f013 0f02 	tst.w	r3, #2
 8003680:	d00c      	beq.n	800369c <HAL_RCC_ClockConfig+0xf0>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003682:	68a2      	ldr	r2, [r4, #8]
 8003684:	4b27      	ldr	r3, [pc, #156]	; (8003724 <HAL_RCC_ClockConfig+0x178>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800368c:	429a      	cmp	r2, r3
 800368e:	d205      	bcs.n	800369c <HAL_RCC_ClockConfig+0xf0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003690:	4924      	ldr	r1, [pc, #144]	; (8003724 <HAL_RCC_ClockConfig+0x178>)
 8003692:	688b      	ldr	r3, [r1, #8]
 8003694:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003698:	431a      	orrs	r2, r3
 800369a:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800369c:	4b20      	ldr	r3, [pc, #128]	; (8003720 <HAL_RCC_ClockConfig+0x174>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	42ab      	cmp	r3, r5
 80036a6:	d90a      	bls.n	80036be <HAL_RCC_ClockConfig+0x112>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a8:	4a1d      	ldr	r2, [pc, #116]	; (8003720 <HAL_RCC_ClockConfig+0x174>)
 80036aa:	6813      	ldr	r3, [r2, #0]
 80036ac:	f023 0307 	bic.w	r3, r3, #7
 80036b0:	432b      	orrs	r3, r5
 80036b2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b4:	6813      	ldr	r3, [r2, #0]
 80036b6:	f003 0307 	and.w	r3, r3, #7
 80036ba:	42ab      	cmp	r3, r5
 80036bc:	d12e      	bne.n	800371c <HAL_RCC_ClockConfig+0x170>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036be:	6823      	ldr	r3, [r4, #0]
 80036c0:	f013 0f04 	tst.w	r3, #4
 80036c4:	d006      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x128>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036c6:	4a17      	ldr	r2, [pc, #92]	; (8003724 <HAL_RCC_ClockConfig+0x178>)
 80036c8:	6893      	ldr	r3, [r2, #8]
 80036ca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80036ce:	68e1      	ldr	r1, [r4, #12]
 80036d0:	430b      	orrs	r3, r1
 80036d2:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d4:	6823      	ldr	r3, [r4, #0]
 80036d6:	f013 0f08 	tst.w	r3, #8
 80036da:	d007      	beq.n	80036ec <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036dc:	4a11      	ldr	r2, [pc, #68]	; (8003724 <HAL_RCC_ClockConfig+0x178>)
 80036de:	6893      	ldr	r3, [r2, #8]
 80036e0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80036e4:	6921      	ldr	r1, [r4, #16]
 80036e6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80036ea:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036ec:	f7ff fbce 	bl	8002e8c <HAL_RCC_GetSysClockFreq>
 80036f0:	4b0c      	ldr	r3, [pc, #48]	; (8003724 <HAL_RCC_ClockConfig+0x178>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80036f8:	4a0b      	ldr	r2, [pc, #44]	; (8003728 <HAL_RCC_ClockConfig+0x17c>)
 80036fa:	5cd3      	ldrb	r3, [r2, r3]
 80036fc:	f003 031f 	and.w	r3, r3, #31
 8003700:	40d8      	lsrs	r0, r3
 8003702:	4b0a      	ldr	r3, [pc, #40]	; (800372c <HAL_RCC_ClockConfig+0x180>)
 8003704:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8003706:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <HAL_RCC_ClockConfig+0x184>)
 8003708:	6818      	ldr	r0, [r3, #0]
 800370a:	f7ff f95f 	bl	80029cc <HAL_InitTick>
}
 800370e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003710:	2001      	movs	r0, #1
}
 8003712:	4770      	bx	lr
      return HAL_ERROR;
 8003714:	2001      	movs	r0, #1
 8003716:	e7fa      	b.n	800370e <HAL_RCC_ClockConfig+0x162>
        return HAL_ERROR;
 8003718:	2001      	movs	r0, #1
 800371a:	e7f8      	b.n	800370e <HAL_RCC_ClockConfig+0x162>
      return HAL_ERROR;
 800371c:	2001      	movs	r0, #1
 800371e:	e7f6      	b.n	800370e <HAL_RCC_ClockConfig+0x162>
 8003720:	40022000 	.word	0x40022000
 8003724:	40021000 	.word	0x40021000
 8003728:	08007ec0 	.word	0x08007ec0
 800372c:	20000424 	.word	0x20000424
 8003730:	2000042c 	.word	0x2000042c

08003734 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003738:	b082      	sub	sp, #8
 800373a:	4605      	mov	r5, r0
 800373c:	4688      	mov	r8, r1
 800373e:	4617      	mov	r7, r2
 8003740:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003742:	f7ff f98d 	bl	8002a60 <HAL_GetTick>
 8003746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003748:	1a1b      	subs	r3, r3, r0
 800374a:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 800374e:	f7ff f987 	bl	8002a60 <HAL_GetTick>
 8003752:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003754:	4b2b      	ldr	r3, [pc, #172]	; (8003804 <SPI_WaitFlagStateUntilTimeout+0xd0>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800375c:	fb09 f303 	mul.w	r3, r9, r3
 8003760:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003762:	682b      	ldr	r3, [r5, #0]
 8003764:	689c      	ldr	r4, [r3, #8]
 8003766:	ea38 0304 	bics.w	r3, r8, r4
 800376a:	bf0c      	ite	eq
 800376c:	f04f 0c01 	moveq.w	ip, #1
 8003770:	f04f 0c00 	movne.w	ip, #0
 8003774:	45bc      	cmp	ip, r7
 8003776:	d040      	beq.n	80037fa <SPI_WaitFlagStateUntilTimeout+0xc6>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003778:	f1b6 3fff 	cmp.w	r6, #4294967295
 800377c:	d0f1      	beq.n	8003762 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800377e:	f7ff f96f 	bl	8002a60 <HAL_GetTick>
 8003782:	eba0 000a 	sub.w	r0, r0, sl
 8003786:	4548      	cmp	r0, r9
 8003788:	d20a      	bcs.n	80037a0 <SPI_WaitFlagStateUntilTimeout+0x6c>
 800378a:	f1b9 0f00 	cmp.w	r9, #0
 800378e:	d007      	beq.n	80037a0 <SPI_WaitFlagStateUntilTimeout+0x6c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003790:	9a01      	ldr	r2, [sp, #4]
 8003792:	b102      	cbz	r2, 8003796 <SPI_WaitFlagStateUntilTimeout+0x62>
 8003794:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8003796:	9b01      	ldr	r3, [sp, #4]
 8003798:	3b01      	subs	r3, #1
 800379a:	9301      	str	r3, [sp, #4]
 800379c:	4691      	mov	r9, r2
 800379e:	e7e0      	b.n	8003762 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037a0:	682a      	ldr	r2, [r5, #0]
 80037a2:	6853      	ldr	r3, [r2, #4]
 80037a4:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80037a8:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037aa:	686b      	ldr	r3, [r5, #4]
 80037ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037b0:	d00b      	beq.n	80037ca <SPI_WaitFlagStateUntilTimeout+0x96>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037b2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80037b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037b8:	d014      	beq.n	80037e4 <SPI_WaitFlagStateUntilTimeout+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 80037ba:	2301      	movs	r3, #1
 80037bc:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80037c0:	2300      	movs	r3, #0
 80037c2:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 80037c6:	2003      	movs	r0, #3
 80037c8:	e018      	b.n	80037fc <SPI_WaitFlagStateUntilTimeout+0xc8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037ca:	68ab      	ldr	r3, [r5, #8]
 80037cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037d0:	d002      	beq.n	80037d8 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037d6:	d1ec      	bne.n	80037b2 <SPI_WaitFlagStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 80037d8:	682a      	ldr	r2, [r5, #0]
 80037da:	6813      	ldr	r3, [r2, #0]
 80037dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	e7e6      	b.n	80037b2 <SPI_WaitFlagStateUntilTimeout+0x7e>
          SPI_RESET_CRC(hspi);
 80037e4:	682a      	ldr	r2, [r5, #0]
 80037e6:	6813      	ldr	r3, [r2, #0]
 80037e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	682a      	ldr	r2, [r5, #0]
 80037f0:	6813      	ldr	r3, [r2, #0]
 80037f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037f6:	6013      	str	r3, [r2, #0]
 80037f8:	e7df      	b.n	80037ba <SPI_WaitFlagStateUntilTimeout+0x86>
    }
  }

  return HAL_OK;
 80037fa:	2000      	movs	r0, #0
}
 80037fc:	b002      	add	sp, #8
 80037fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003802:	bf00      	nop
 8003804:	20000424 	.word	0x20000424

08003808 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800380c:	b082      	sub	sp, #8
 800380e:	4606      	mov	r6, r0
 8003810:	460c      	mov	r4, r1
 8003812:	4615      	mov	r5, r2
 8003814:	461f      	mov	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003816:	2300      	movs	r3, #0
 8003818:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800381c:	f7ff f920 	bl	8002a60 <HAL_GetTick>
 8003820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003822:	1a1b      	subs	r3, r3, r0
 8003824:	eb03 0807 	add.w	r8, r3, r7
  tmp_tickstart = HAL_GetTick();
 8003828:	f7ff f91a 	bl	8002a60 <HAL_GetTick>
 800382c:	4681      	mov	r9, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800382e:	f8d6 a000 	ldr.w	sl, [r6]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003832:	4b31      	ldr	r3, [pc, #196]	; (80038f8 <SPI_WaitFifoStateUntilTimeout+0xf0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800383a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800383e:	0d1b      	lsrs	r3, r3, #20
 8003840:	fb08 f303 	mul.w	r3, r8, r3
 8003844:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8003846:	e002      	b.n	800384e <SPI_WaitFifoStateUntilTimeout+0x46>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8003848:	f1b7 3fff 	cmp.w	r7, #4294967295
 800384c:	d112      	bne.n	8003874 <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 800384e:	6833      	ldr	r3, [r6, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	ea03 0c04 	and.w	ip, r3, r4
 8003856:	45ac      	cmp	ip, r5
 8003858:	d04a      	beq.n	80038f0 <SPI_WaitFifoStateUntilTimeout+0xe8>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800385a:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 800385e:	d1f3      	bne.n	8003848 <SPI_WaitFifoStateUntilTimeout+0x40>
 8003860:	2d00      	cmp	r5, #0
 8003862:	d1f1      	bne.n	8003848 <SPI_WaitFifoStateUntilTimeout+0x40>
      tmpreg8 = *ptmpreg8;
 8003864:	f89a 300c 	ldrb.w	r3, [sl, #12]
 8003868:	b2db      	uxtb	r3, r3
 800386a:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 800386e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003872:	e7e9      	b.n	8003848 <SPI_WaitFifoStateUntilTimeout+0x40>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003874:	f7ff f8f4 	bl	8002a60 <HAL_GetTick>
 8003878:	eba0 0009 	sub.w	r0, r0, r9
 800387c:	4540      	cmp	r0, r8
 800387e:	d20a      	bcs.n	8003896 <SPI_WaitFifoStateUntilTimeout+0x8e>
 8003880:	f1b8 0f00 	cmp.w	r8, #0
 8003884:	d007      	beq.n	8003896 <SPI_WaitFifoStateUntilTimeout+0x8e>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003886:	9a01      	ldr	r2, [sp, #4]
 8003888:	b102      	cbz	r2, 800388c <SPI_WaitFifoStateUntilTimeout+0x84>
 800388a:	4642      	mov	r2, r8
      {
        tmp_timeout = 0U;
      }
      count--;
 800388c:	9b01      	ldr	r3, [sp, #4]
 800388e:	3b01      	subs	r3, #1
 8003890:	9301      	str	r3, [sp, #4]
 8003892:	4690      	mov	r8, r2
 8003894:	e7db      	b.n	800384e <SPI_WaitFifoStateUntilTimeout+0x46>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003896:	6832      	ldr	r2, [r6, #0]
 8003898:	6853      	ldr	r3, [r2, #4]
 800389a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800389e:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038a0:	6873      	ldr	r3, [r6, #4]
 80038a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038a6:	d00b      	beq.n	80038c0 <SPI_WaitFifoStateUntilTimeout+0xb8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038a8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80038aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ae:	d014      	beq.n	80038da <SPI_WaitFifoStateUntilTimeout+0xd2>
        hspi->State = HAL_SPI_STATE_READY;
 80038b0:	2301      	movs	r3, #1
 80038b2:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80038b6:	2300      	movs	r3, #0
 80038b8:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 80038bc:	2003      	movs	r0, #3
 80038be:	e018      	b.n	80038f2 <SPI_WaitFifoStateUntilTimeout+0xea>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038c0:	68b3      	ldr	r3, [r6, #8]
 80038c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038c6:	d002      	beq.n	80038ce <SPI_WaitFifoStateUntilTimeout+0xc6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038cc:	d1ec      	bne.n	80038a8 <SPI_WaitFifoStateUntilTimeout+0xa0>
          __HAL_SPI_DISABLE(hspi);
 80038ce:	6832      	ldr	r2, [r6, #0]
 80038d0:	6813      	ldr	r3, [r2, #0]
 80038d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038d6:	6013      	str	r3, [r2, #0]
 80038d8:	e7e6      	b.n	80038a8 <SPI_WaitFifoStateUntilTimeout+0xa0>
          SPI_RESET_CRC(hspi);
 80038da:	6832      	ldr	r2, [r6, #0]
 80038dc:	6813      	ldr	r3, [r2, #0]
 80038de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038e2:	6013      	str	r3, [r2, #0]
 80038e4:	6832      	ldr	r2, [r6, #0]
 80038e6:	6813      	ldr	r3, [r2, #0]
 80038e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	e7df      	b.n	80038b0 <SPI_WaitFifoStateUntilTimeout+0xa8>
    }
  }

  return HAL_OK;
 80038f0:	2000      	movs	r0, #0
}
 80038f2:	b002      	add	sp, #8
 80038f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038f8:	20000424 	.word	0x20000424

080038fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038fc:	b570      	push	{r4, r5, r6, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	4604      	mov	r4, r0
 8003902:	460d      	mov	r5, r1
 8003904:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003906:	9200      	str	r2, [sp, #0]
 8003908:	460b      	mov	r3, r1
 800390a:	2200      	movs	r2, #0
 800390c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003910:	f7ff ff7a 	bl	8003808 <SPI_WaitFifoStateUntilTimeout>
 8003914:	b9b0      	cbnz	r0, 8003944 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003916:	9600      	str	r6, [sp, #0]
 8003918:	462b      	mov	r3, r5
 800391a:	2200      	movs	r2, #0
 800391c:	2180      	movs	r1, #128	; 0x80
 800391e:	4620      	mov	r0, r4
 8003920:	f7ff ff08 	bl	8003734 <SPI_WaitFlagStateUntilTimeout>
 8003924:	b9a8      	cbnz	r0, 8003952 <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003926:	9600      	str	r6, [sp, #0]
 8003928:	462b      	mov	r3, r5
 800392a:	2200      	movs	r2, #0
 800392c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003930:	4620      	mov	r0, r4
 8003932:	f7ff ff69 	bl	8003808 <SPI_WaitFifoStateUntilTimeout>
 8003936:	b150      	cbz	r0, 800394e <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003938:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800393a:	f043 0320 	orr.w	r3, r3, #32
 800393e:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003940:	2003      	movs	r0, #3
 8003942:	e004      	b.n	800394e <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003944:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003946:	f043 0320 	orr.w	r3, r3, #32
 800394a:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800394c:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 800394e:	b002      	add	sp, #8
 8003950:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003952:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003954:	f043 0320 	orr.w	r3, r3, #32
 8003958:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800395a:	2003      	movs	r0, #3
 800395c:	e7f7      	b.n	800394e <SPI_EndRxTxTransaction+0x52>

0800395e <SPI_EndRxTransaction>:
{
 800395e:	b570      	push	{r4, r5, r6, lr}
 8003960:	b082      	sub	sp, #8
 8003962:	4604      	mov	r4, r0
 8003964:	460d      	mov	r5, r1
 8003966:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003968:	6843      	ldr	r3, [r0, #4]
 800396a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800396e:	d00d      	beq.n	800398c <SPI_EndRxTransaction+0x2e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003970:	9600      	str	r6, [sp, #0]
 8003972:	462b      	mov	r3, r5
 8003974:	2200      	movs	r2, #0
 8003976:	2180      	movs	r1, #128	; 0x80
 8003978:	4620      	mov	r0, r4
 800397a:	f7ff fedb 	bl	8003734 <SPI_WaitFlagStateUntilTimeout>
 800397e:	b990      	cbnz	r0, 80039a6 <SPI_EndRxTransaction+0x48>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003980:	6863      	ldr	r3, [r4, #4]
 8003982:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003986:	d014      	beq.n	80039b2 <SPI_EndRxTransaction+0x54>
}
 8003988:	b002      	add	sp, #8
 800398a:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800398c:	6883      	ldr	r3, [r0, #8]
 800398e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003992:	d002      	beq.n	800399a <SPI_EndRxTransaction+0x3c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003998:	d1ea      	bne.n	8003970 <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 800399a:	6822      	ldr	r2, [r4, #0]
 800399c:	6813      	ldr	r3, [r2, #0]
 800399e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039a2:	6013      	str	r3, [r2, #0]
 80039a4:	e7e4      	b.n	8003970 <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039a6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80039a8:	f043 0320 	orr.w	r3, r3, #32
 80039ac:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80039ae:	2003      	movs	r0, #3
 80039b0:	e7ea      	b.n	8003988 <SPI_EndRxTransaction+0x2a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039b2:	68a3      	ldr	r3, [r4, #8]
 80039b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039b8:	d002      	beq.n	80039c0 <SPI_EndRxTransaction+0x62>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039be:	d1e3      	bne.n	8003988 <SPI_EndRxTransaction+0x2a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039c0:	9600      	str	r6, [sp, #0]
 80039c2:	462b      	mov	r3, r5
 80039c4:	2200      	movs	r2, #0
 80039c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80039ca:	4620      	mov	r0, r4
 80039cc:	f7ff ff1c 	bl	8003808 <SPI_WaitFifoStateUntilTimeout>
 80039d0:	2800      	cmp	r0, #0
 80039d2:	d0d9      	beq.n	8003988 <SPI_EndRxTransaction+0x2a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039d4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80039d6:	f043 0320 	orr.w	r3, r3, #32
 80039da:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 80039dc:	2003      	movs	r0, #3
 80039de:	e7d3      	b.n	8003988 <SPI_EndRxTransaction+0x2a>

080039e0 <HAL_SPI_Init>:
  if (hspi == NULL)
 80039e0:	2800      	cmp	r0, #0
 80039e2:	d06a      	beq.n	8003aba <HAL_SPI_Init+0xda>
{
 80039e4:	b510      	push	{r4, lr}
 80039e6:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80039ea:	b933      	cbnz	r3, 80039fa <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039ec:	6843      	ldr	r3, [r0, #4]
 80039ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039f2:	d005      	beq.n	8003a00 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039f4:	2300      	movs	r3, #0
 80039f6:	61c3      	str	r3, [r0, #28]
 80039f8:	e002      	b.n	8003a00 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039fa:	2300      	movs	r3, #0
 80039fc:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039fe:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a00:	2300      	movs	r3, #0
 8003a02:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a04:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d04d      	beq.n	8003aa8 <HAL_SPI_Init+0xc8>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8003a12:	6822      	ldr	r2, [r4, #0]
 8003a14:	6813      	ldr	r3, [r2, #0]
 8003a16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a1a:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a1c:	68e3      	ldr	r3, [r4, #12]
 8003a1e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a22:	d947      	bls.n	8003ab4 <HAL_SPI_Init+0xd4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a24:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a26:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003a2a:	d004      	beq.n	8003a36 <HAL_SPI_Init+0x56>
 8003a2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a30:	d001      	beq.n	8003a36 <HAL_SPI_Init+0x56>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a32:	2300      	movs	r3, #0
 8003a34:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a36:	6863      	ldr	r3, [r4, #4]
 8003a38:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003a3c:	68a1      	ldr	r1, [r4, #8]
 8003a3e:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8003a42:	430b      	orrs	r3, r1
 8003a44:	6921      	ldr	r1, [r4, #16]
 8003a46:	f001 0102 	and.w	r1, r1, #2
 8003a4a:	430b      	orrs	r3, r1
 8003a4c:	6961      	ldr	r1, [r4, #20]
 8003a4e:	f001 0101 	and.w	r1, r1, #1
 8003a52:	430b      	orrs	r3, r1
 8003a54:	69a1      	ldr	r1, [r4, #24]
 8003a56:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8003a5a:	430b      	orrs	r3, r1
 8003a5c:	69e1      	ldr	r1, [r4, #28]
 8003a5e:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8003a62:	430b      	orrs	r3, r1
 8003a64:	6a21      	ldr	r1, [r4, #32]
 8003a66:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003a6a:	430b      	orrs	r3, r1
 8003a6c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003a6e:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8003a72:	6820      	ldr	r0, [r4, #0]
 8003a74:	430b      	orrs	r3, r1
 8003a76:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a78:	8b63      	ldrh	r3, [r4, #26]
 8003a7a:	f003 0304 	and.w	r3, r3, #4
 8003a7e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003a80:	f001 0110 	and.w	r1, r1, #16
 8003a84:	430b      	orrs	r3, r1
 8003a86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a88:	f001 0108 	and.w	r1, r1, #8
 8003a8c:	430b      	orrs	r3, r1
 8003a8e:	68e1      	ldr	r1, [r4, #12]
 8003a90:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8003a94:	430b      	orrs	r3, r1
 8003a96:	6821      	ldr	r1, [r4, #0]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	604b      	str	r3, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a9c:	2000      	movs	r0, #0
 8003a9e:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8003aa6:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003aa8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8003aac:	4620      	mov	r0, r4
 8003aae:	f7fe fe31 	bl	8002714 <HAL_SPI_MspInit>
 8003ab2:	e7ab      	b.n	8003a0c <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ab4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ab8:	e7b5      	b.n	8003a26 <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8003aba:	2001      	movs	r0, #1
}
 8003abc:	4770      	bx	lr

08003abe <HAL_SPI_Transmit>:
{
 8003abe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8003ac6:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	f000 80f6 	beq.w	8003cbc <HAL_SPI_Transmit+0x1fe>
 8003ad0:	4604      	mov	r4, r0
 8003ad2:	4688      	mov	r8, r1
 8003ad4:	4691      	mov	r9, r2
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003adc:	f7fe ffc0 	bl	8002a60 <HAL_GetTick>
 8003ae0:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003ae2:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 8003ae6:	b2f6      	uxtb	r6, r6
 8003ae8:	2e01      	cmp	r6, #1
 8003aea:	f040 80d4 	bne.w	8003c96 <HAL_SPI_Transmit+0x1d8>
  if ((pData == NULL) || (Size == 0U))
 8003aee:	f1b8 0f00 	cmp.w	r8, #0
 8003af2:	f000 80d1 	beq.w	8003c98 <HAL_SPI_Transmit+0x1da>
 8003af6:	f1b9 0f00 	cmp.w	r9, #0
 8003afa:	f000 80cd 	beq.w	8003c98 <HAL_SPI_Transmit+0x1da>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003afe:	2303      	movs	r3, #3
 8003b00:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b04:	2300      	movs	r3, #0
 8003b06:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b08:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003b0c:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003b10:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b14:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003b16:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003b1a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003b1e:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003b20:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b22:	68a3      	ldr	r3, [r4, #8]
 8003b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b28:	d01e      	beq.n	8003b68 <HAL_SPI_Transmit+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b2a:	6823      	ldr	r3, [r4, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003b32:	d103      	bne.n	8003b3c <HAL_SPI_Transmit+0x7e>
    __HAL_SPI_ENABLE(hspi);
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b3a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b3c:	68e3      	ldr	r3, [r4, #12]
 8003b3e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b42:	d942      	bls.n	8003bca <HAL_SPI_Transmit+0x10c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b44:	6863      	ldr	r3, [r4, #4]
 8003b46:	b113      	cbz	r3, 8003b4e <HAL_SPI_Transmit+0x90>
 8003b48:	f1b9 0f01 	cmp.w	r9, #1
 8003b4c:	d123      	bne.n	8003b96 <HAL_SPI_Transmit+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b4e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003b50:	6823      	ldr	r3, [r4, #0]
 8003b52:	8812      	ldrh	r2, [r2, #0]
 8003b54:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003b58:	3302      	adds	r3, #2
 8003b5a:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003b5c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003b66:	e016      	b.n	8003b96 <HAL_SPI_Transmit+0xd8>
    __HAL_SPI_DISABLE(hspi);
 8003b68:	6822      	ldr	r2, [r4, #0]
 8003b6a:	6813      	ldr	r3, [r2, #0]
 8003b6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b70:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8003b72:	6822      	ldr	r2, [r4, #0]
 8003b74:	6813      	ldr	r3, [r2, #0]
 8003b76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b7a:	6013      	str	r3, [r2, #0]
 8003b7c:	e7d5      	b.n	8003b2a <HAL_SPI_Transmit+0x6c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b7e:	f7fe ff6f 	bl	8002a60 <HAL_GetTick>
 8003b82:	1bc0      	subs	r0, r0, r7
 8003b84:	42a8      	cmp	r0, r5
 8003b86:	d303      	bcc.n	8003b90 <HAL_SPI_Transmit+0xd2>
 8003b88:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003b8c:	f040 808e 	bne.w	8003cac <HAL_SPI_Transmit+0x1ee>
 8003b90:	2d00      	cmp	r5, #0
 8003b92:	f000 808d 	beq.w	8003cb0 <HAL_SPI_Transmit+0x1f2>
    while (hspi->TxXferCount > 0U)
 8003b96:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d066      	beq.n	8003c6c <HAL_SPI_Transmit+0x1ae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b9e:	6823      	ldr	r3, [r4, #0]
 8003ba0:	689a      	ldr	r2, [r3, #8]
 8003ba2:	f012 0f02 	tst.w	r2, #2
 8003ba6:	d0ea      	beq.n	8003b7e <HAL_SPI_Transmit+0xc0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ba8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003baa:	8812      	ldrh	r2, [r2, #0]
 8003bac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003bb0:	3302      	adds	r3, #2
 8003bb2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003bb4:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 8003bb8:	fa1f fc8c 	uxth.w	ip, ip
 8003bbc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003bc0:	fa1f fc8c 	uxth.w	ip, ip
 8003bc4:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 8003bc8:	e7e5      	b.n	8003b96 <HAL_SPI_Transmit+0xd8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bca:	6863      	ldr	r3, [r4, #4]
 8003bcc:	b113      	cbz	r3, 8003bd4 <HAL_SPI_Transmit+0x116>
 8003bce:	f1b9 0f01 	cmp.w	r9, #1
 8003bd2:	d133      	bne.n	8003c3c <HAL_SPI_Transmit+0x17e>
      if (hspi->TxXferCount > 1U)
 8003bd4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d90c      	bls.n	8003bf6 <HAL_SPI_Transmit+0x138>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bdc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003bde:	6823      	ldr	r3, [r4, #0]
 8003be0:	8812      	ldrh	r2, [r2, #0]
 8003be2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003be4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003be6:	3302      	adds	r3, #2
 8003be8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003bea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	3b02      	subs	r3, #2
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003bf4:	e022      	b.n	8003c3c <HAL_SPI_Transmit+0x17e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bf6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003bf8:	6823      	ldr	r3, [r4, #0]
 8003bfa:	7812      	ldrb	r2, [r2, #0]
 8003bfc:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8003bfe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c00:	3301      	adds	r3, #1
 8003c02:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003c04:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003c0e:	e015      	b.n	8003c3c <HAL_SPI_Transmit+0x17e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8003c16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c18:	3301      	adds	r3, #1
 8003c1a:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8003c1c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	3b01      	subs	r3, #1
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003c26:	e009      	b.n	8003c3c <HAL_SPI_Transmit+0x17e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c28:	f7fe ff1a 	bl	8002a60 <HAL_GetTick>
 8003c2c:	1bc0      	subs	r0, r0, r7
 8003c2e:	42a8      	cmp	r0, r5
 8003c30:	d302      	bcc.n	8003c38 <HAL_SPI_Transmit+0x17a>
 8003c32:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003c36:	d13d      	bne.n	8003cb4 <HAL_SPI_Transmit+0x1f6>
 8003c38:	2d00      	cmp	r5, #0
 8003c3a:	d03d      	beq.n	8003cb8 <HAL_SPI_Transmit+0x1fa>
    while (hspi->TxXferCount > 0U)
 8003c3c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	b1a3      	cbz	r3, 8003c6c <HAL_SPI_Transmit+0x1ae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c42:	6822      	ldr	r2, [r4, #0]
 8003c44:	6893      	ldr	r3, [r2, #8]
 8003c46:	f013 0f02 	tst.w	r3, #2
 8003c4a:	d0ed      	beq.n	8003c28 <HAL_SPI_Transmit+0x16a>
        if (hspi->TxXferCount > 1U)
 8003c4c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d9dd      	bls.n	8003c10 <HAL_SPI_Transmit+0x152>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c56:	881b      	ldrh	r3, [r3, #0]
 8003c58:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c5c:	3302      	adds	r3, #2
 8003c5e:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003c60:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	3b02      	subs	r3, #2
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003c6a:	e7e7      	b.n	8003c3c <HAL_SPI_Transmit+0x17e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c6c:	463a      	mov	r2, r7
 8003c6e:	4629      	mov	r1, r5
 8003c70:	4620      	mov	r0, r4
 8003c72:	f7ff fe43 	bl	80038fc <SPI_EndRxTxTransaction>
 8003c76:	b108      	cbz	r0, 8003c7c <HAL_SPI_Transmit+0x1be>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c78:	2320      	movs	r3, #32
 8003c7a:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c7c:	68a3      	ldr	r3, [r4, #8]
 8003c7e:	b933      	cbnz	r3, 8003c8e <HAL_SPI_Transmit+0x1d0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c80:	9301      	str	r3, [sp, #4]
 8003c82:	6823      	ldr	r3, [r4, #0]
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	9201      	str	r2, [sp, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	9301      	str	r3, [sp, #4]
 8003c8c:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c8e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003c90:	b913      	cbnz	r3, 8003c98 <HAL_SPI_Transmit+0x1da>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c92:	2600      	movs	r6, #0
 8003c94:	e000      	b.n	8003c98 <HAL_SPI_Transmit+0x1da>
    errorcode = HAL_BUSY;
 8003c96:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8003ca4:	4630      	mov	r0, r6
 8003ca6:	b003      	add	sp, #12
 8003ca8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8003cac:	2603      	movs	r6, #3
 8003cae:	e7f3      	b.n	8003c98 <HAL_SPI_Transmit+0x1da>
 8003cb0:	2603      	movs	r6, #3
 8003cb2:	e7f1      	b.n	8003c98 <HAL_SPI_Transmit+0x1da>
          errorcode = HAL_TIMEOUT;
 8003cb4:	2603      	movs	r6, #3
 8003cb6:	e7ef      	b.n	8003c98 <HAL_SPI_Transmit+0x1da>
 8003cb8:	2603      	movs	r6, #3
 8003cba:	e7ed      	b.n	8003c98 <HAL_SPI_Transmit+0x1da>
  __HAL_LOCK(hspi);
 8003cbc:	2602      	movs	r6, #2
 8003cbe:	e7f1      	b.n	8003ca4 <HAL_SPI_Transmit+0x1e6>

08003cc0 <HAL_SPI_TransmitReceive>:
{
 8003cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cc4:	461f      	mov	r7, r3
 8003cc6:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 8003cc8:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	f000 8164 	beq.w	8003f9a <HAL_SPI_TransmitReceive+0x2da>
 8003cd2:	4604      	mov	r4, r0
 8003cd4:	4688      	mov	r8, r1
 8003cd6:	4691      	mov	r9, r2
 8003cd8:	2301      	movs	r3, #1
 8003cda:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003cde:	f7fe febf 	bl	8002a60 <HAL_GetTick>
 8003ce2:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8003ce4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003ce8:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8003cea:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d00a      	beq.n	8003d06 <HAL_SPI_TransmitReceive+0x46>
 8003cf0:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003cf4:	f040 8138 	bne.w	8003f68 <HAL_SPI_TransmitReceive+0x2a8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003cf8:	68a2      	ldr	r2, [r4, #8]
 8003cfa:	2a00      	cmp	r2, #0
 8003cfc:	f040 813d 	bne.w	8003f7a <HAL_SPI_TransmitReceive+0x2ba>
 8003d00:	2b04      	cmp	r3, #4
 8003d02:	f040 813c 	bne.w	8003f7e <HAL_SPI_TransmitReceive+0x2be>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d06:	f1b8 0f00 	cmp.w	r8, #0
 8003d0a:	f000 813a 	beq.w	8003f82 <HAL_SPI_TransmitReceive+0x2c2>
 8003d0e:	f1b9 0f00 	cmp.w	r9, #0
 8003d12:	f000 8138 	beq.w	8003f86 <HAL_SPI_TransmitReceive+0x2c6>
 8003d16:	2f00      	cmp	r7, #0
 8003d18:	f000 8137 	beq.w	8003f8a <HAL_SPI_TransmitReceive+0x2ca>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d1c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d002      	beq.n	8003d2c <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d26:	2305      	movs	r3, #5
 8003d28:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d30:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003d34:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003d38:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d3c:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003d40:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003d42:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8003d44:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003d46:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003d48:	68e3      	ldr	r3, [r4, #12]
 8003d4a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d4e:	d801      	bhi.n	8003d54 <HAL_SPI_TransmitReceive+0x94>
 8003d50:	2f01      	cmp	r7, #1
 8003d52:	d923      	bls.n	8003d9c <HAL_SPI_TransmitReceive+0xdc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d54:	6822      	ldr	r2, [r4, #0]
 8003d56:	6853      	ldr	r3, [r2, #4]
 8003d58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d5c:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d5e:	6823      	ldr	r3, [r4, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003d66:	d103      	bne.n	8003d70 <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d6e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d70:	68e3      	ldr	r3, [r4, #12]
 8003d72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d76:	d958      	bls.n	8003e2a <HAL_SPI_TransmitReceive+0x16a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d78:	6863      	ldr	r3, [r4, #4]
 8003d7a:	b10b      	cbz	r3, 8003d80 <HAL_SPI_TransmitReceive+0xc0>
 8003d7c:	2f01      	cmp	r7, #1
 8003d7e:	d10b      	bne.n	8003d98 <HAL_SPI_TransmitReceive+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d80:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003d82:	6823      	ldr	r3, [r4, #0]
 8003d84:	8812      	ldrh	r2, [r2, #0]
 8003d86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d8a:	3302      	adds	r3, #2
 8003d8c:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003d8e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	3b01      	subs	r3, #1
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003d98:	2701      	movs	r7, #1
 8003d9a:	e031      	b.n	8003e00 <HAL_SPI_TransmitReceive+0x140>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d9c:	6822      	ldr	r2, [r4, #0]
 8003d9e:	6853      	ldr	r3, [r2, #4]
 8003da0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003da4:	6053      	str	r3, [r2, #4]
 8003da6:	e7da      	b.n	8003d5e <HAL_SPI_TransmitReceive+0x9e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003da8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003daa:	8812      	ldrh	r2, [r2, #0]
 8003dac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003db0:	3302      	adds	r3, #2
 8003db2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003db4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	3b01      	subs	r3, #1
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8003dbe:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003dc0:	6823      	ldr	r3, [r4, #0]
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	f012 0f01 	tst.w	r2, #1
 8003dc8:	d011      	beq.n	8003dee <HAL_SPI_TransmitReceive+0x12e>
 8003dca:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003dce:	b292      	uxth	r2, r2
 8003dd0:	b16a      	cbz	r2, 8003dee <HAL_SPI_TransmitReceive+0x12e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003dd6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003dd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003dda:	3302      	adds	r3, #2
 8003ddc:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003dde:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8003dec:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003dee:	f7fe fe37 	bl	8002a60 <HAL_GetTick>
 8003df2:	1b83      	subs	r3, r0, r6
 8003df4:	42ab      	cmp	r3, r5
 8003df6:	d303      	bcc.n	8003e00 <HAL_SPI_TransmitReceive+0x140>
 8003df8:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003dfc:	f040 80c7 	bne.w	8003f8e <HAL_SPI_TransmitReceive+0x2ce>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e00:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	b92b      	cbnz	r3, 8003e12 <HAL_SPI_TransmitReceive+0x152>
 8003e06:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 80a1 	beq.w	8003f54 <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	f012 0f02 	tst.w	r2, #2
 8003e1a:	d0d1      	beq.n	8003dc0 <HAL_SPI_TransmitReceive+0x100>
 8003e1c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003e1e:	b292      	uxth	r2, r2
 8003e20:	2a00      	cmp	r2, #0
 8003e22:	d0cd      	beq.n	8003dc0 <HAL_SPI_TransmitReceive+0x100>
 8003e24:	2f00      	cmp	r7, #0
 8003e26:	d0cb      	beq.n	8003dc0 <HAL_SPI_TransmitReceive+0x100>
 8003e28:	e7be      	b.n	8003da8 <HAL_SPI_TransmitReceive+0xe8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e2a:	6863      	ldr	r3, [r4, #4]
 8003e2c:	b10b      	cbz	r3, 8003e32 <HAL_SPI_TransmitReceive+0x172>
 8003e2e:	2f01      	cmp	r7, #1
 8003e30:	d10f      	bne.n	8003e52 <HAL_SPI_TransmitReceive+0x192>
      if (hspi->TxXferCount > 1U)
 8003e32:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d90d      	bls.n	8003e56 <HAL_SPI_TransmitReceive+0x196>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e3a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003e3c:	6823      	ldr	r3, [r4, #0]
 8003e3e:	8812      	ldrh	r2, [r2, #0]
 8003e40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e44:	3302      	adds	r3, #2
 8003e46:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003e48:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	3b02      	subs	r3, #2
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003e52:	2701      	movs	r7, #1
 8003e54:	e049      	b.n	8003eea <HAL_SPI_TransmitReceive+0x22a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e56:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003e58:	6823      	ldr	r3, [r4, #0]
 8003e5a:	7812      	ldrb	r2, [r2, #0]
 8003e5c:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8003e5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e60:	3301      	adds	r3, #1
 8003e62:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003e64:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003e6e:	e7f0      	b.n	8003e52 <HAL_SPI_TransmitReceive+0x192>
        if (hspi->TxXferCount > 1U)
 8003e70:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003e72:	b292      	uxth	r2, r2
 8003e74:	2a01      	cmp	r2, #1
 8003e76:	d90c      	bls.n	8003e92 <HAL_SPI_TransmitReceive+0x1d2>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e78:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003e7a:	8812      	ldrh	r2, [r2, #0]
 8003e7c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e80:	3302      	adds	r3, #2
 8003e82:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003e84:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	3b02      	subs	r3, #2
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8003e8e:	2700      	movs	r7, #0
 8003e90:	e03d      	b.n	8003f0e <HAL_SPI_TransmitReceive+0x24e>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e92:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003e94:	7812      	ldrb	r2, [r2, #0]
 8003e96:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 8003e98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8003e9e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8003ea8:	2700      	movs	r7, #0
 8003eaa:	e030      	b.n	8003f0e <HAL_SPI_TransmitReceive+0x24e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003eac:	6822      	ldr	r2, [r4, #0]
 8003eae:	6853      	ldr	r3, [r2, #4]
 8003eb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003eb4:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8003eb6:	2701      	movs	r7, #1
 8003eb8:	e00d      	b.n	8003ed6 <HAL_SPI_TransmitReceive+0x216>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003eba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003ebc:	7b1b      	ldrb	r3, [r3, #12]
 8003ebe:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 8003ec0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8003ec6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8003ed4:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ed6:	f7fe fdc3 	bl	8002a60 <HAL_GetTick>
 8003eda:	1b80      	subs	r0, r0, r6
 8003edc:	42a8      	cmp	r0, r5
 8003ede:	d302      	bcc.n	8003ee6 <HAL_SPI_TransmitReceive+0x226>
 8003ee0:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003ee4:	d155      	bne.n	8003f92 <HAL_SPI_TransmitReceive+0x2d2>
 8003ee6:	2d00      	cmp	r5, #0
 8003ee8:	d055      	beq.n	8003f96 <HAL_SPI_TransmitReceive+0x2d6>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003eea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	b923      	cbnz	r3, 8003efa <HAL_SPI_TransmitReceive+0x23a>
 8003ef0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d02c      	beq.n	8003f54 <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003efa:	6823      	ldr	r3, [r4, #0]
 8003efc:	689a      	ldr	r2, [r3, #8]
 8003efe:	f012 0f02 	tst.w	r2, #2
 8003f02:	d004      	beq.n	8003f0e <HAL_SPI_TransmitReceive+0x24e>
 8003f04:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003f06:	b292      	uxth	r2, r2
 8003f08:	b10a      	cbz	r2, 8003f0e <HAL_SPI_TransmitReceive+0x24e>
 8003f0a:	2f00      	cmp	r7, #0
 8003f0c:	d1b0      	bne.n	8003e70 <HAL_SPI_TransmitReceive+0x1b0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f0e:	6823      	ldr	r3, [r4, #0]
 8003f10:	689a      	ldr	r2, [r3, #8]
 8003f12:	f012 0f01 	tst.w	r2, #1
 8003f16:	d0de      	beq.n	8003ed6 <HAL_SPI_TransmitReceive+0x216>
 8003f18:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003f1c:	b292      	uxth	r2, r2
 8003f1e:	2a00      	cmp	r2, #0
 8003f20:	d0d9      	beq.n	8003ed6 <HAL_SPI_TransmitReceive+0x216>
        if (hspi->RxXferCount > 1U)
 8003f22:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003f26:	b292      	uxth	r2, r2
 8003f28:	2a01      	cmp	r2, #1
 8003f2a:	d9c6      	bls.n	8003eba <HAL_SPI_TransmitReceive+0x1fa>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f2c:	68da      	ldr	r2, [r3, #12]
 8003f2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f30:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f34:	3302      	adds	r3, #2
 8003f36:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003f38:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b02      	subs	r3, #2
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003f46:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d9ad      	bls.n	8003eac <HAL_SPI_TransmitReceive+0x1ec>
        txallowed = 1U;
 8003f50:	2701      	movs	r7, #1
 8003f52:	e7c0      	b.n	8003ed6 <HAL_SPI_TransmitReceive+0x216>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f54:	4632      	mov	r2, r6
 8003f56:	4629      	mov	r1, r5
 8003f58:	4620      	mov	r0, r4
 8003f5a:	f7ff fccf 	bl	80038fc <SPI_EndRxTxTransaction>
 8003f5e:	b120      	cbz	r0, 8003f6a <HAL_SPI_TransmitReceive+0x2aa>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f60:	2320      	movs	r3, #32
 8003f62:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003f64:	2001      	movs	r0, #1
 8003f66:	e000      	b.n	8003f6a <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_BUSY;
 8003f68:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003f70:	2300      	movs	r3, #0
 8003f72:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8003f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8003f7a:	2002      	movs	r0, #2
 8003f7c:	e7f5      	b.n	8003f6a <HAL_SPI_TransmitReceive+0x2aa>
 8003f7e:	2002      	movs	r0, #2
 8003f80:	e7f3      	b.n	8003f6a <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_ERROR;
 8003f82:	2001      	movs	r0, #1
 8003f84:	e7f1      	b.n	8003f6a <HAL_SPI_TransmitReceive+0x2aa>
 8003f86:	2001      	movs	r0, #1
 8003f88:	e7ef      	b.n	8003f6a <HAL_SPI_TransmitReceive+0x2aa>
 8003f8a:	2001      	movs	r0, #1
 8003f8c:	e7ed      	b.n	8003f6a <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 8003f8e:	2003      	movs	r0, #3
 8003f90:	e7eb      	b.n	8003f6a <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 8003f92:	2003      	movs	r0, #3
 8003f94:	e7e9      	b.n	8003f6a <HAL_SPI_TransmitReceive+0x2aa>
 8003f96:	2003      	movs	r0, #3
 8003f98:	e7e7      	b.n	8003f6a <HAL_SPI_TransmitReceive+0x2aa>
  __HAL_LOCK(hspi);
 8003f9a:	2002      	movs	r0, #2
 8003f9c:	e7eb      	b.n	8003f76 <HAL_SPI_TransmitReceive+0x2b6>

08003f9e <HAL_SPI_Receive>:
{
 8003f9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	4604      	mov	r4, r0
 8003fa6:	4688      	mov	r8, r1
 8003fa8:	4691      	mov	r9, r2
 8003faa:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003fac:	6840      	ldr	r0, [r0, #4]
 8003fae:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8003fb2:	d043      	beq.n	800403c <HAL_SPI_Receive+0x9e>
  __HAL_LOCK(hspi);
 8003fb4:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	f000 80c3 	beq.w	8004144 <HAL_SPI_Receive+0x1a6>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003fc4:	f7fe fd4c 	bl	8002a60 <HAL_GetTick>
 8003fc8:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003fca:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 8003fce:	b2f6      	uxtb	r6, r6
 8003fd0:	2e01      	cmp	r6, #1
 8003fd2:	f040 80a4 	bne.w	800411e <HAL_SPI_Receive+0x180>
  if ((pData == NULL) || (Size == 0U))
 8003fd6:	f1b8 0f00 	cmp.w	r8, #0
 8003fda:	f000 80a1 	beq.w	8004120 <HAL_SPI_Receive+0x182>
 8003fde:	f1b9 0f00 	cmp.w	r9, #0
 8003fe2:	f000 809d 	beq.w	8004120 <HAL_SPI_Receive+0x182>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003fe6:	2304      	movs	r3, #4
 8003fe8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fec:	2300      	movs	r3, #0
 8003fee:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ff0:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003ff4:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003ff8:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003ffc:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003ffe:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004000:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004002:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004004:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004006:	68e3      	ldr	r3, [r4, #12]
 8004008:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800400c:	d924      	bls.n	8004058 <HAL_SPI_Receive+0xba>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800400e:	6822      	ldr	r2, [r4, #0]
 8004010:	6853      	ldr	r3, [r2, #4]
 8004012:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004016:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004018:	68a3      	ldr	r3, [r4, #8]
 800401a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800401e:	d021      	beq.n	8004064 <HAL_SPI_Receive+0xc6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004020:	6823      	ldr	r3, [r4, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004028:	d103      	bne.n	8004032 <HAL_SPI_Receive+0x94>
    __HAL_SPI_ENABLE(hspi);
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004030:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004032:	68e3      	ldr	r3, [r4, #12]
 8004034:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004038:	d929      	bls.n	800408e <HAL_SPI_Receive+0xf0>
 800403a:	e04a      	b.n	80040d2 <HAL_SPI_Receive+0x134>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800403c:	68a3      	ldr	r3, [r4, #8]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1b8      	bne.n	8003fb4 <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004042:	2304      	movs	r3, #4
 8004044:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004048:	9500      	str	r5, [sp, #0]
 800404a:	4613      	mov	r3, r2
 800404c:	460a      	mov	r2, r1
 800404e:	4620      	mov	r0, r4
 8004050:	f7ff fe36 	bl	8003cc0 <HAL_SPI_TransmitReceive>
 8004054:	4606      	mov	r6, r0
 8004056:	e069      	b.n	800412c <HAL_SPI_Receive+0x18e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004058:	6822      	ldr	r2, [r4, #0]
 800405a:	6853      	ldr	r3, [r2, #4]
 800405c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004060:	6053      	str	r3, [r2, #4]
 8004062:	e7d9      	b.n	8004018 <HAL_SPI_Receive+0x7a>
    __HAL_SPI_DISABLE(hspi);
 8004064:	6822      	ldr	r2, [r4, #0]
 8004066:	6813      	ldr	r3, [r2, #0]
 8004068:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800406c:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 800406e:	6822      	ldr	r2, [r4, #0]
 8004070:	6813      	ldr	r3, [r2, #0]
 8004072:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004076:	6013      	str	r3, [r2, #0]
 8004078:	e7d2      	b.n	8004020 <HAL_SPI_Receive+0x82>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800407a:	f7fe fcf1 	bl	8002a60 <HAL_GetTick>
 800407e:	1bc0      	subs	r0, r0, r7
 8004080:	42a8      	cmp	r0, r5
 8004082:	d302      	bcc.n	800408a <HAL_SPI_Receive+0xec>
 8004084:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004088:	d154      	bne.n	8004134 <HAL_SPI_Receive+0x196>
 800408a:	2d00      	cmp	r5, #0
 800408c:	d054      	beq.n	8004138 <HAL_SPI_Receive+0x19a>
    while (hspi->RxXferCount > 0U)
 800408e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004092:	b29b      	uxth	r3, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	d036      	beq.n	8004106 <HAL_SPI_Receive+0x168>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004098:	6823      	ldr	r3, [r4, #0]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	f012 0f01 	tst.w	r2, #1
 80040a0:	d0eb      	beq.n	800407a <HAL_SPI_Receive+0xdc>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80040a2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80040a4:	7b1b      	ldrb	r3, [r3, #12]
 80040a6:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80040a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040aa:	3301      	adds	r3, #1
 80040ac:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80040ae:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80040bc:	e7e7      	b.n	800408e <HAL_SPI_Receive+0xf0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040be:	f7fe fccf 	bl	8002a60 <HAL_GetTick>
 80040c2:	1bc0      	subs	r0, r0, r7
 80040c4:	42a8      	cmp	r0, r5
 80040c6:	d302      	bcc.n	80040ce <HAL_SPI_Receive+0x130>
 80040c8:	f1b5 3fff 	cmp.w	r5, #4294967295
 80040cc:	d136      	bne.n	800413c <HAL_SPI_Receive+0x19e>
 80040ce:	2d00      	cmp	r5, #0
 80040d0:	d036      	beq.n	8004140 <HAL_SPI_Receive+0x1a2>
    while (hspi->RxXferCount > 0U)
 80040d2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	b1ab      	cbz	r3, 8004106 <HAL_SPI_Receive+0x168>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	f012 0f01 	tst.w	r2, #1
 80040e2:	d0ec      	beq.n	80040be <HAL_SPI_Receive+0x120>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040ec:	3302      	adds	r3, #2
 80040ee:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80040f0:	f8b4 c046 	ldrh.w	ip, [r4, #70]	; 0x46
 80040f4:	fa1f fc8c 	uxth.w	ip, ip
 80040f8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80040fc:	fa1f fc8c 	uxth.w	ip, ip
 8004100:	f8a4 c046 	strh.w	ip, [r4, #70]	; 0x46
 8004104:	e7e5      	b.n	80040d2 <HAL_SPI_Receive+0x134>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004106:	463a      	mov	r2, r7
 8004108:	4629      	mov	r1, r5
 800410a:	4620      	mov	r0, r4
 800410c:	f7ff fc27 	bl	800395e <SPI_EndRxTransaction>
 8004110:	b108      	cbz	r0, 8004116 <HAL_SPI_Receive+0x178>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004112:	2320      	movs	r3, #32
 8004114:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004116:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004118:	b913      	cbnz	r3, 8004120 <HAL_SPI_Receive+0x182>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800411a:	2600      	movs	r6, #0
 800411c:	e000      	b.n	8004120 <HAL_SPI_Receive+0x182>
    errorcode = HAL_BUSY;
 800411e:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004120:	2301      	movs	r3, #1
 8004122:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004126:	2300      	movs	r3, #0
 8004128:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800412c:	4630      	mov	r0, r6
 800412e:	b003      	add	sp, #12
 8004130:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8004134:	2603      	movs	r6, #3
 8004136:	e7f3      	b.n	8004120 <HAL_SPI_Receive+0x182>
 8004138:	2603      	movs	r6, #3
 800413a:	e7f1      	b.n	8004120 <HAL_SPI_Receive+0x182>
          errorcode = HAL_TIMEOUT;
 800413c:	2603      	movs	r6, #3
 800413e:	e7ef      	b.n	8004120 <HAL_SPI_Receive+0x182>
 8004140:	2603      	movs	r6, #3
 8004142:	e7ed      	b.n	8004120 <HAL_SPI_Receive+0x182>
  __HAL_LOCK(hspi);
 8004144:	2602      	movs	r6, #2
 8004146:	e7f1      	b.n	800412c <HAL_SPI_Receive+0x18e>

08004148 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004148:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800414a:	6a03      	ldr	r3, [r0, #32]
 800414c:	f023 0301 	bic.w	r3, r3, #1
 8004150:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004152:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004154:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004156:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004158:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800415c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004160:	680c      	ldr	r4, [r1, #0]
 8004162:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004164:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004168:	688c      	ldr	r4, [r1, #8]
 800416a:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800416c:	4c15      	ldr	r4, [pc, #84]	; (80041c4 <TIM_OC1_SetConfig+0x7c>)
 800416e:	42a0      	cmp	r0, r4
 8004170:	d007      	beq.n	8004182 <TIM_OC1_SetConfig+0x3a>
 8004172:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 8004176:	42a0      	cmp	r0, r4
 8004178:	d003      	beq.n	8004182 <TIM_OC1_SetConfig+0x3a>
 800417a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800417e:	42a0      	cmp	r0, r4
 8004180:	d105      	bne.n	800418e <TIM_OC1_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004182:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004186:	68cc      	ldr	r4, [r1, #12]
 8004188:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800418a:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800418e:	4c0d      	ldr	r4, [pc, #52]	; (80041c4 <TIM_OC1_SetConfig+0x7c>)
 8004190:	42a0      	cmp	r0, r4
 8004192:	d007      	beq.n	80041a4 <TIM_OC1_SetConfig+0x5c>
 8004194:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 8004198:	42a0      	cmp	r0, r4
 800419a:	d003      	beq.n	80041a4 <TIM_OC1_SetConfig+0x5c>
 800419c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80041a0:	42a0      	cmp	r0, r4
 80041a2:	d107      	bne.n	80041b4 <TIM_OC1_SetConfig+0x6c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041a4:	f425 7c40 	bic.w	ip, r5, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041a8:	694c      	ldr	r4, [r1, #20]
 80041aa:	ea44 0c0c 	orr.w	ip, r4, ip
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041ae:	698d      	ldr	r5, [r1, #24]
 80041b0:	ea45 050c 	orr.w	r5, r5, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041b4:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041b6:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041b8:	684a      	ldr	r2, [r1, #4]
 80041ba:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041bc:	6203      	str	r3, [r0, #32]
}
 80041be:	bc30      	pop	{r4, r5}
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	40012c00 	.word	0x40012c00

080041c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041c8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041ca:	6a03      	ldr	r3, [r0, #32]
 80041cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041d0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041d2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041d6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041d8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80041dc:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041e0:	680d      	ldr	r5, [r1, #0]
 80041e2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041e8:	688d      	ldr	r5, [r1, #8]
 80041ea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041ee:	4d12      	ldr	r5, [pc, #72]	; (8004238 <TIM_OC3_SetConfig+0x70>)
 80041f0:	42a8      	cmp	r0, r5
 80041f2:	d019      	beq.n	8004228 <TIM_OC3_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041f4:	4d10      	ldr	r5, [pc, #64]	; (8004238 <TIM_OC3_SetConfig+0x70>)
 80041f6:	42a8      	cmp	r0, r5
 80041f8:	d007      	beq.n	800420a <TIM_OC3_SetConfig+0x42>
 80041fa:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80041fe:	42a8      	cmp	r0, r5
 8004200:	d003      	beq.n	800420a <TIM_OC3_SetConfig+0x42>
 8004202:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004206:	42a8      	cmp	r0, r5
 8004208:	d107      	bne.n	800421a <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800420a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800420e:	694d      	ldr	r5, [r1, #20]
 8004210:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004214:	698d      	ldr	r5, [r1, #24]
 8004216:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800421a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800421c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800421e:	684a      	ldr	r2, [r1, #4]
 8004220:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004222:	6203      	str	r3, [r0, #32]
}
 8004224:	bc30      	pop	{r4, r5}
 8004226:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8004228:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800422c:	68cd      	ldr	r5, [r1, #12]
 800422e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8004232:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004236:	e7dd      	b.n	80041f4 <TIM_OC3_SetConfig+0x2c>
 8004238:	40012c00 	.word	0x40012c00

0800423c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800423c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800423e:	6a03      	ldr	r3, [r0, #32]
 8004240:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004244:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004246:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004248:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800424a:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800424c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004250:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004254:	680d      	ldr	r5, [r1, #0]
 8004256:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800425a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800425e:	688d      	ldr	r5, [r1, #8]
 8004260:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004264:	4d0b      	ldr	r5, [pc, #44]	; (8004294 <TIM_OC4_SetConfig+0x58>)
 8004266:	42a8      	cmp	r0, r5
 8004268:	d007      	beq.n	800427a <TIM_OC4_SetConfig+0x3e>
 800426a:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800426e:	42a8      	cmp	r0, r5
 8004270:	d003      	beq.n	800427a <TIM_OC4_SetConfig+0x3e>
 8004272:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004276:	42a8      	cmp	r0, r5
 8004278:	d104      	bne.n	8004284 <TIM_OC4_SetConfig+0x48>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800427a:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800427e:	694d      	ldr	r5, [r1, #20]
 8004280:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004284:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004286:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004288:	684b      	ldr	r3, [r1, #4]
 800428a:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800428c:	6202      	str	r2, [r0, #32]
}
 800428e:	bc30      	pop	{r4, r5}
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	40012c00 	.word	0x40012c00

08004298 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004298:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800429a:	6a03      	ldr	r3, [r0, #32]
 800429c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042a2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042a4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042a6:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80042a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80042ac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042b0:	680d      	ldr	r5, [r1, #0]
 80042b2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80042b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80042b8:	688d      	ldr	r5, [r1, #8]
 80042ba:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042be:	4d0b      	ldr	r5, [pc, #44]	; (80042ec <TIM_OC5_SetConfig+0x54>)
 80042c0:	42a8      	cmp	r0, r5
 80042c2:	d007      	beq.n	80042d4 <TIM_OC5_SetConfig+0x3c>
 80042c4:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80042c8:	42a8      	cmp	r0, r5
 80042ca:	d003      	beq.n	80042d4 <TIM_OC5_SetConfig+0x3c>
 80042cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80042d0:	42a8      	cmp	r0, r5
 80042d2:	d104      	bne.n	80042de <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80042d4:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80042d8:	694d      	ldr	r5, [r1, #20]
 80042da:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042de:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80042e0:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80042e2:	684a      	ldr	r2, [r1, #4]
 80042e4:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e6:	6203      	str	r3, [r0, #32]
}
 80042e8:	bc30      	pop	{r4, r5}
 80042ea:	4770      	bx	lr
 80042ec:	40012c00 	.word	0x40012c00

080042f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80042f0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80042f2:	6a03      	ldr	r3, [r0, #32]
 80042f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80042f8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042fa:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042fc:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042fe:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004300:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004304:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004308:	680d      	ldr	r5, [r1, #0]
 800430a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800430e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004312:	688d      	ldr	r5, [r1, #8]
 8004314:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004318:	4d0b      	ldr	r5, [pc, #44]	; (8004348 <TIM_OC6_SetConfig+0x58>)
 800431a:	42a8      	cmp	r0, r5
 800431c:	d007      	beq.n	800432e <TIM_OC6_SetConfig+0x3e>
 800431e:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8004322:	42a8      	cmp	r0, r5
 8004324:	d003      	beq.n	800432e <TIM_OC6_SetConfig+0x3e>
 8004326:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800432a:	42a8      	cmp	r0, r5
 800432c:	d104      	bne.n	8004338 <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800432e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004332:	694d      	ldr	r5, [r1, #20]
 8004334:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004338:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800433a:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800433c:	684b      	ldr	r3, [r1, #4]
 800433e:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004340:	6202      	str	r2, [r0, #32]
}
 8004342:	bc30      	pop	{r4, r5}
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	40012c00 	.word	0x40012c00

0800434c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800434c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800434e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004350:	6a04      	ldr	r4, [r0, #32]
 8004352:	f024 0401 	bic.w	r4, r4, #1
 8004356:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004358:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800435a:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800435e:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004362:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8004366:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004368:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800436a:	6203      	str	r3, [r0, #32]
}
 800436c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004370:	4770      	bx	lr

08004372 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004372:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004374:	6a04      	ldr	r4, [r0, #32]
 8004376:	f024 0410 	bic.w	r4, r4, #16
 800437a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800437c:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800437e:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004380:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004384:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004388:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800438c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004390:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004392:	6203      	str	r3, [r0, #32]
}
 8004394:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004398:	4770      	bx	lr

0800439a <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800439a:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800439c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043a0:	430b      	orrs	r3, r1
 80043a2:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043a6:	6083      	str	r3, [r0, #8]
}
 80043a8:	4770      	bx	lr
	...

080043ac <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80043ac:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d126      	bne.n	8004404 <HAL_TIM_Base_Start_IT+0x58>
  htim->State = HAL_TIM_STATE_BUSY;
 80043b6:	2302      	movs	r3, #2
 80043b8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043bc:	6802      	ldr	r2, [r0, #0]
 80043be:	68d3      	ldr	r3, [r2, #12]
 80043c0:	f043 0301 	orr.w	r3, r3, #1
 80043c4:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043c6:	6803      	ldr	r3, [r0, #0]
 80043c8:	4a11      	ldr	r2, [pc, #68]	; (8004410 <HAL_TIM_Base_Start_IT+0x64>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d00c      	beq.n	80043e8 <HAL_TIM_Base_Start_IT+0x3c>
 80043ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d2:	d009      	beq.n	80043e8 <HAL_TIM_Base_Start_IT+0x3c>
 80043d4:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80043d8:	4293      	cmp	r3, r2
 80043da:	d005      	beq.n	80043e8 <HAL_TIM_Base_Start_IT+0x3c>
    __HAL_TIM_ENABLE(htim);
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	f042 0201 	orr.w	r2, r2, #1
 80043e2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80043e4:	2000      	movs	r0, #0
 80043e6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043e8:	6899      	ldr	r1, [r3, #8]
 80043ea:	4a0a      	ldr	r2, [pc, #40]	; (8004414 <HAL_TIM_Base_Start_IT+0x68>)
 80043ec:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ee:	2a06      	cmp	r2, #6
 80043f0:	d00a      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0x5c>
 80043f2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80043f6:	d009      	beq.n	800440c <HAL_TIM_Base_Start_IT+0x60>
      __HAL_TIM_ENABLE(htim);
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	f042 0201 	orr.w	r2, r2, #1
 80043fe:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004400:	2000      	movs	r0, #0
 8004402:	4770      	bx	lr
    return HAL_ERROR;
 8004404:	2001      	movs	r0, #1
 8004406:	4770      	bx	lr
  return HAL_OK;
 8004408:	2000      	movs	r0, #0
 800440a:	4770      	bx	lr
 800440c:	2000      	movs	r0, #0
}
 800440e:	4770      	bx	lr
 8004410:	40012c00 	.word	0x40012c00
 8004414:	00010007 	.word	0x00010007

08004418 <HAL_TIM_OC_MspInit>:
}
 8004418:	4770      	bx	lr

0800441a <HAL_TIM_PeriodElapsedCallback>:
}
 800441a:	4770      	bx	lr

0800441c <HAL_TIM_OC_DelayElapsedCallback>:
}
 800441c:	4770      	bx	lr

0800441e <HAL_TIM_IC_CaptureCallback>:
}
 800441e:	4770      	bx	lr

08004420 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8004420:	4770      	bx	lr

08004422 <HAL_TIM_TriggerCallback>:
}
 8004422:	4770      	bx	lr

08004424 <HAL_TIM_IRQHandler>:
{
 8004424:	b510      	push	{r4, lr}
 8004426:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004428:	6803      	ldr	r3, [r0, #0]
 800442a:	691a      	ldr	r2, [r3, #16]
 800442c:	f012 0f02 	tst.w	r2, #2
 8004430:	d011      	beq.n	8004456 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004432:	68da      	ldr	r2, [r3, #12]
 8004434:	f012 0f02 	tst.w	r2, #2
 8004438:	d00d      	beq.n	8004456 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800443a:	f06f 0202 	mvn.w	r2, #2
 800443e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004440:	2301      	movs	r3, #1
 8004442:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004444:	6803      	ldr	r3, [r0, #0]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	f013 0f03 	tst.w	r3, #3
 800444c:	d079      	beq.n	8004542 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800444e:	f7ff ffe6 	bl	800441e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004452:	2300      	movs	r3, #0
 8004454:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004456:	6823      	ldr	r3, [r4, #0]
 8004458:	691a      	ldr	r2, [r3, #16]
 800445a:	f012 0f04 	tst.w	r2, #4
 800445e:	d012      	beq.n	8004486 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	f012 0f04 	tst.w	r2, #4
 8004466:	d00e      	beq.n	8004486 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004468:	f06f 0204 	mvn.w	r2, #4
 800446c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800446e:	2302      	movs	r3, #2
 8004470:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004472:	6823      	ldr	r3, [r4, #0]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	f413 7f40 	tst.w	r3, #768	; 0x300
 800447a:	d068      	beq.n	800454e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800447c:	4620      	mov	r0, r4
 800447e:	f7ff ffce 	bl	800441e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004482:	2300      	movs	r3, #0
 8004484:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	691a      	ldr	r2, [r3, #16]
 800448a:	f012 0f08 	tst.w	r2, #8
 800448e:	d012      	beq.n	80044b6 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	f012 0f08 	tst.w	r2, #8
 8004496:	d00e      	beq.n	80044b6 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004498:	f06f 0208 	mvn.w	r2, #8
 800449c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800449e:	2304      	movs	r3, #4
 80044a0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044a2:	6823      	ldr	r3, [r4, #0]
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	f013 0f03 	tst.w	r3, #3
 80044aa:	d057      	beq.n	800455c <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 80044ac:	4620      	mov	r0, r4
 80044ae:	f7ff ffb6 	bl	800441e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044b2:	2300      	movs	r3, #0
 80044b4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044b6:	6823      	ldr	r3, [r4, #0]
 80044b8:	691a      	ldr	r2, [r3, #16]
 80044ba:	f012 0f10 	tst.w	r2, #16
 80044be:	d012      	beq.n	80044e6 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	f012 0f10 	tst.w	r2, #16
 80044c6:	d00e      	beq.n	80044e6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044c8:	f06f 0210 	mvn.w	r2, #16
 80044cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044ce:	2308      	movs	r3, #8
 80044d0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044d2:	6823      	ldr	r3, [r4, #0]
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80044da:	d046      	beq.n	800456a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80044dc:	4620      	mov	r0, r4
 80044de:	f7ff ff9e 	bl	800441e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044e2:	2300      	movs	r3, #0
 80044e4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044e6:	6823      	ldr	r3, [r4, #0]
 80044e8:	691a      	ldr	r2, [r3, #16]
 80044ea:	f012 0f01 	tst.w	r2, #1
 80044ee:	d003      	beq.n	80044f8 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	f012 0f01 	tst.w	r2, #1
 80044f6:	d13f      	bne.n	8004578 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044f8:	6823      	ldr	r3, [r4, #0]
 80044fa:	691a      	ldr	r2, [r3, #16]
 80044fc:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004500:	d003      	beq.n	800450a <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004502:	68da      	ldr	r2, [r3, #12]
 8004504:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004508:	d13d      	bne.n	8004586 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800450a:	6823      	ldr	r3, [r4, #0]
 800450c:	691a      	ldr	r2, [r3, #16]
 800450e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004512:	d003      	beq.n	800451c <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	f012 0f80 	tst.w	r2, #128	; 0x80
 800451a:	d13b      	bne.n	8004594 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800451c:	6823      	ldr	r3, [r4, #0]
 800451e:	691a      	ldr	r2, [r3, #16]
 8004520:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004524:	d003      	beq.n	800452e <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	f012 0f40 	tst.w	r2, #64	; 0x40
 800452c:	d139      	bne.n	80045a2 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	691a      	ldr	r2, [r3, #16]
 8004532:	f012 0f20 	tst.w	r2, #32
 8004536:	d003      	beq.n	8004540 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004538:	68da      	ldr	r2, [r3, #12]
 800453a:	f012 0f20 	tst.w	r2, #32
 800453e:	d137      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x18c>
}
 8004540:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004542:	f7ff ff6b 	bl	800441c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004546:	4620      	mov	r0, r4
 8004548:	f7ff ff6a 	bl	8004420 <HAL_TIM_PWM_PulseFinishedCallback>
 800454c:	e781      	b.n	8004452 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800454e:	4620      	mov	r0, r4
 8004550:	f7ff ff64 	bl	800441c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004554:	4620      	mov	r0, r4
 8004556:	f7ff ff63 	bl	8004420 <HAL_TIM_PWM_PulseFinishedCallback>
 800455a:	e792      	b.n	8004482 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800455c:	4620      	mov	r0, r4
 800455e:	f7ff ff5d 	bl	800441c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004562:	4620      	mov	r0, r4
 8004564:	f7ff ff5c 	bl	8004420 <HAL_TIM_PWM_PulseFinishedCallback>
 8004568:	e7a3      	b.n	80044b2 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800456a:	4620      	mov	r0, r4
 800456c:	f7ff ff56 	bl	800441c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004570:	4620      	mov	r0, r4
 8004572:	f7ff ff55 	bl	8004420 <HAL_TIM_PWM_PulseFinishedCallback>
 8004576:	e7b4      	b.n	80044e2 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004578:	f06f 0201 	mvn.w	r2, #1
 800457c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800457e:	4620      	mov	r0, r4
 8004580:	f7ff ff4b 	bl	800441a <HAL_TIM_PeriodElapsedCallback>
 8004584:	e7b8      	b.n	80044f8 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004586:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800458a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800458c:	4620      	mov	r0, r4
 800458e:	f000 f9ee 	bl	800496e <HAL_TIMEx_BreakCallback>
 8004592:	e7ba      	b.n	800450a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004594:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004598:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800459a:	4620      	mov	r0, r4
 800459c:	f000 f9e8 	bl	8004970 <HAL_TIMEx_Break2Callback>
 80045a0:	e7bc      	b.n	800451c <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045a6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80045a8:	4620      	mov	r0, r4
 80045aa:	f7ff ff3a 	bl	8004422 <HAL_TIM_TriggerCallback>
 80045ae:	e7be      	b.n	800452e <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045b0:	f06f 0220 	mvn.w	r2, #32
 80045b4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80045b6:	4620      	mov	r0, r4
 80045b8:	f000 f9d8 	bl	800496c <HAL_TIMEx_CommutCallback>
}
 80045bc:	e7c0      	b.n	8004540 <HAL_TIM_IRQHandler+0x11c>
	...

080045c0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80045c0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045c2:	4a1a      	ldr	r2, [pc, #104]	; (800462c <TIM_Base_SetConfig+0x6c>)
 80045c4:	4290      	cmp	r0, r2
 80045c6:	d002      	beq.n	80045ce <TIM_Base_SetConfig+0xe>
 80045c8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80045cc:	d103      	bne.n	80045d6 <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80045d2:	684a      	ldr	r2, [r1, #4]
 80045d4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045d6:	4a15      	ldr	r2, [pc, #84]	; (800462c <TIM_Base_SetConfig+0x6c>)
 80045d8:	4290      	cmp	r0, r2
 80045da:	d00a      	beq.n	80045f2 <TIM_Base_SetConfig+0x32>
 80045dc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80045e0:	d007      	beq.n	80045f2 <TIM_Base_SetConfig+0x32>
 80045e2:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80045e6:	4290      	cmp	r0, r2
 80045e8:	d003      	beq.n	80045f2 <TIM_Base_SetConfig+0x32>
 80045ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045ee:	4290      	cmp	r0, r2
 80045f0:	d103      	bne.n	80045fa <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80045f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045f6:	68ca      	ldr	r2, [r1, #12]
 80045f8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045fe:	694a      	ldr	r2, [r1, #20]
 8004600:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004602:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004604:	688b      	ldr	r3, [r1, #8]
 8004606:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004608:	680b      	ldr	r3, [r1, #0]
 800460a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800460c:	4b07      	ldr	r3, [pc, #28]	; (800462c <TIM_Base_SetConfig+0x6c>)
 800460e:	4298      	cmp	r0, r3
 8004610:	d007      	beq.n	8004622 <TIM_Base_SetConfig+0x62>
 8004612:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8004616:	4298      	cmp	r0, r3
 8004618:	d003      	beq.n	8004622 <TIM_Base_SetConfig+0x62>
 800461a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800461e:	4298      	cmp	r0, r3
 8004620:	d101      	bne.n	8004626 <TIM_Base_SetConfig+0x66>
    TIMx->RCR = Structure->RepetitionCounter;
 8004622:	690b      	ldr	r3, [r1, #16]
 8004624:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004626:	2301      	movs	r3, #1
 8004628:	6143      	str	r3, [r0, #20]
}
 800462a:	4770      	bx	lr
 800462c:	40012c00 	.word	0x40012c00

08004630 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004630:	b360      	cbz	r0, 800468c <HAL_TIM_Base_Init+0x5c>
{
 8004632:	b510      	push	{r4, lr}
 8004634:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004636:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800463a:	b313      	cbz	r3, 8004682 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800463c:	2302      	movs	r3, #2
 800463e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004642:	4621      	mov	r1, r4
 8004644:	f851 0b04 	ldr.w	r0, [r1], #4
 8004648:	f7ff ffba 	bl	80045c0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800464c:	2301      	movs	r3, #1
 800464e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004652:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004656:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800465a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800465e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004662:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004666:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800466a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800466e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004672:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004676:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800467a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800467e:	2000      	movs	r0, #0
}
 8004680:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004682:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004686:	f7fe f8a1 	bl	80027cc <HAL_TIM_Base_MspInit>
 800468a:	e7d7      	b.n	800463c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800468c:	2001      	movs	r0, #1
}
 800468e:	4770      	bx	lr

08004690 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8004690:	b360      	cbz	r0, 80046ec <HAL_TIM_OC_Init+0x5c>
{
 8004692:	b510      	push	{r4, lr}
 8004694:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004696:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800469a:	b313      	cbz	r3, 80046e2 <HAL_TIM_OC_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800469c:	2302      	movs	r3, #2
 800469e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80046a2:	4621      	mov	r1, r4
 80046a4:	f851 0b04 	ldr.w	r0, [r1], #4
 80046a8:	f7ff ff8a 	bl	80045c0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046ac:	2301      	movs	r3, #1
 80046ae:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80046b6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80046ba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80046be:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80046c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80046ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046d2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80046d6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80046da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80046de:	2000      	movs	r0, #0
}
 80046e0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80046e2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 80046e6:	f7ff fe97 	bl	8004418 <HAL_TIM_OC_MspInit>
 80046ea:	e7d7      	b.n	800469c <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 80046ec:	2001      	movs	r0, #1
}
 80046ee:	4770      	bx	lr

080046f0 <TIM_OC2_SetConfig>:
{
 80046f0:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046f2:	6a03      	ldr	r3, [r0, #32]
 80046f4:	f023 0310 	bic.w	r3, r3, #16
 80046f8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80046fa:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80046fc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80046fe:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004700:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004704:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004708:	680d      	ldr	r5, [r1, #0]
 800470a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800470e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004712:	688d      	ldr	r5, [r1, #8]
 8004714:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004718:	4d12      	ldr	r5, [pc, #72]	; (8004764 <TIM_OC2_SetConfig+0x74>)
 800471a:	42a8      	cmp	r0, r5
 800471c:	d019      	beq.n	8004752 <TIM_OC2_SetConfig+0x62>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800471e:	4d11      	ldr	r5, [pc, #68]	; (8004764 <TIM_OC2_SetConfig+0x74>)
 8004720:	42a8      	cmp	r0, r5
 8004722:	d007      	beq.n	8004734 <TIM_OC2_SetConfig+0x44>
 8004724:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8004728:	42a8      	cmp	r0, r5
 800472a:	d003      	beq.n	8004734 <TIM_OC2_SetConfig+0x44>
 800472c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004730:	42a8      	cmp	r0, r5
 8004732:	d107      	bne.n	8004744 <TIM_OC2_SetConfig+0x54>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004734:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004738:	694d      	ldr	r5, [r1, #20]
 800473a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800473e:	698d      	ldr	r5, [r1, #24]
 8004740:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8004744:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004746:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004748:	684a      	ldr	r2, [r1, #4]
 800474a:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800474c:	6203      	str	r3, [r0, #32]
}
 800474e:	bc30      	pop	{r4, r5}
 8004750:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8004752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004756:	68cd      	ldr	r5, [r1, #12]
 8004758:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800475c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004760:	e7dd      	b.n	800471e <TIM_OC2_SetConfig+0x2e>
 8004762:	bf00      	nop
 8004764:	40012c00 	.word	0x40012c00

08004768 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8004768:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800476c:	2b01      	cmp	r3, #1
 800476e:	d036      	beq.n	80047de <HAL_TIM_OC_ConfigChannel+0x76>
{
 8004770:	b510      	push	{r4, lr}
 8004772:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004774:	2301      	movs	r3, #1
 8004776:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800477a:	2a14      	cmp	r2, #20
 800477c:	d82a      	bhi.n	80047d4 <HAL_TIM_OC_ConfigChannel+0x6c>
 800477e:	e8df f002 	tbb	[pc, r2]
 8004782:	290b      	.short	0x290b
 8004784:	29102929 	.word	0x29102929
 8004788:	29152929 	.word	0x29152929
 800478c:	291a2929 	.word	0x291a2929
 8004790:	291f2929 	.word	0x291f2929
 8004794:	2929      	.short	0x2929
 8004796:	24          	.byte	0x24
 8004797:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004798:	6800      	ldr	r0, [r0, #0]
 800479a:	f7ff fcd5 	bl	8004148 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800479e:	2000      	movs	r0, #0
      break;
 80047a0:	e019      	b.n	80047d6 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047a2:	6800      	ldr	r0, [r0, #0]
 80047a4:	f7ff ffa4 	bl	80046f0 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80047a8:	2000      	movs	r0, #0
      break;
 80047aa:	e014      	b.n	80047d6 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047ac:	6800      	ldr	r0, [r0, #0]
 80047ae:	f7ff fd0b 	bl	80041c8 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80047b2:	2000      	movs	r0, #0
      break;
 80047b4:	e00f      	b.n	80047d6 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047b6:	6800      	ldr	r0, [r0, #0]
 80047b8:	f7ff fd40 	bl	800423c <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80047bc:	2000      	movs	r0, #0
      break;
 80047be:	e00a      	b.n	80047d6 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047c0:	6800      	ldr	r0, [r0, #0]
 80047c2:	f7ff fd69 	bl	8004298 <TIM_OC5_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80047c6:	2000      	movs	r0, #0
      break;
 80047c8:	e005      	b.n	80047d6 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80047ca:	6800      	ldr	r0, [r0, #0]
 80047cc:	f7ff fd90 	bl	80042f0 <TIM_OC6_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80047d0:	2000      	movs	r0, #0
      break;
 80047d2:	e000      	b.n	80047d6 <HAL_TIM_OC_ConfigChannel+0x6e>
  switch (Channel)
 80047d4:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80047d6:	2300      	movs	r3, #0
 80047d8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80047dc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 80047de:	2002      	movs	r0, #2
}
 80047e0:	4770      	bx	lr

080047e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047e2:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047e4:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047e6:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047ea:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80047ee:	430a      	orrs	r2, r1
 80047f0:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047f4:	6082      	str	r2, [r0, #8]
}
 80047f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80047fc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004800:	2b01      	cmp	r3, #1
 8004802:	d076      	beq.n	80048f2 <HAL_TIM_ConfigClockSource+0xf6>
{
 8004804:	b510      	push	{r4, lr}
 8004806:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004808:	2301      	movs	r3, #1
 800480a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800480e:	2302      	movs	r3, #2
 8004810:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004814:	6802      	ldr	r2, [r0, #0]
 8004816:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004818:	4b37      	ldr	r3, [pc, #220]	; (80048f8 <HAL_TIM_ConfigClockSource+0xfc>)
 800481a:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800481c:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800481e:	680b      	ldr	r3, [r1, #0]
 8004820:	2b60      	cmp	r3, #96	; 0x60
 8004822:	d04c      	beq.n	80048be <HAL_TIM_ConfigClockSource+0xc2>
 8004824:	d829      	bhi.n	800487a <HAL_TIM_ConfigClockSource+0x7e>
 8004826:	2b40      	cmp	r3, #64	; 0x40
 8004828:	d054      	beq.n	80048d4 <HAL_TIM_ConfigClockSource+0xd8>
 800482a:	d90c      	bls.n	8004846 <HAL_TIM_ConfigClockSource+0x4a>
 800482c:	2b50      	cmp	r3, #80	; 0x50
 800482e:	d122      	bne.n	8004876 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004830:	68ca      	ldr	r2, [r1, #12]
 8004832:	6849      	ldr	r1, [r1, #4]
 8004834:	6820      	ldr	r0, [r4, #0]
 8004836:	f7ff fd89 	bl	800434c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800483a:	2150      	movs	r1, #80	; 0x50
 800483c:	6820      	ldr	r0, [r4, #0]
 800483e:	f7ff fdac 	bl	800439a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004842:	2000      	movs	r0, #0
      break;
 8004844:	e005      	b.n	8004852 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8004846:	2b20      	cmp	r3, #32
 8004848:	d00d      	beq.n	8004866 <HAL_TIM_ConfigClockSource+0x6a>
 800484a:	d909      	bls.n	8004860 <HAL_TIM_ConfigClockSource+0x64>
 800484c:	2b30      	cmp	r3, #48	; 0x30
 800484e:	d00a      	beq.n	8004866 <HAL_TIM_ConfigClockSource+0x6a>
      status = HAL_ERROR;
 8004850:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8004852:	2301      	movs	r3, #1
 8004854:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004858:	2300      	movs	r3, #0
 800485a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800485e:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8004860:	b10b      	cbz	r3, 8004866 <HAL_TIM_ConfigClockSource+0x6a>
 8004862:	2b10      	cmp	r3, #16
 8004864:	d105      	bne.n	8004872 <HAL_TIM_ConfigClockSource+0x76>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004866:	4619      	mov	r1, r3
 8004868:	6820      	ldr	r0, [r4, #0]
 800486a:	f7ff fd96 	bl	800439a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800486e:	2000      	movs	r0, #0
      break;
 8004870:	e7ef      	b.n	8004852 <HAL_TIM_ConfigClockSource+0x56>
      status = HAL_ERROR;
 8004872:	2001      	movs	r0, #1
 8004874:	e7ed      	b.n	8004852 <HAL_TIM_ConfigClockSource+0x56>
 8004876:	2001      	movs	r0, #1
 8004878:	e7eb      	b.n	8004852 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 800487a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800487e:	d034      	beq.n	80048ea <HAL_TIM_ConfigClockSource+0xee>
 8004880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004884:	d10c      	bne.n	80048a0 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ETR_SetConfig(htim->Instance,
 8004886:	68cb      	ldr	r3, [r1, #12]
 8004888:	684a      	ldr	r2, [r1, #4]
 800488a:	6889      	ldr	r1, [r1, #8]
 800488c:	6820      	ldr	r0, [r4, #0]
 800488e:	f7ff ffa8 	bl	80047e2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004892:	6822      	ldr	r2, [r4, #0]
 8004894:	6893      	ldr	r3, [r2, #8]
 8004896:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800489a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800489c:	2000      	movs	r0, #0
      break;
 800489e:	e7d8      	b.n	8004852 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 80048a0:	2b70      	cmp	r3, #112	; 0x70
 80048a2:	d124      	bne.n	80048ee <HAL_TIM_ConfigClockSource+0xf2>
      TIM_ETR_SetConfig(htim->Instance,
 80048a4:	68cb      	ldr	r3, [r1, #12]
 80048a6:	684a      	ldr	r2, [r1, #4]
 80048a8:	6889      	ldr	r1, [r1, #8]
 80048aa:	6820      	ldr	r0, [r4, #0]
 80048ac:	f7ff ff99 	bl	80047e2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80048b0:	6822      	ldr	r2, [r4, #0]
 80048b2:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80048b8:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80048ba:	2000      	movs	r0, #0
      break;
 80048bc:	e7c9      	b.n	8004852 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048be:	68ca      	ldr	r2, [r1, #12]
 80048c0:	6849      	ldr	r1, [r1, #4]
 80048c2:	6820      	ldr	r0, [r4, #0]
 80048c4:	f7ff fd55 	bl	8004372 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048c8:	2160      	movs	r1, #96	; 0x60
 80048ca:	6820      	ldr	r0, [r4, #0]
 80048cc:	f7ff fd65 	bl	800439a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80048d0:	2000      	movs	r0, #0
      break;
 80048d2:	e7be      	b.n	8004852 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048d4:	68ca      	ldr	r2, [r1, #12]
 80048d6:	6849      	ldr	r1, [r1, #4]
 80048d8:	6820      	ldr	r0, [r4, #0]
 80048da:	f7ff fd37 	bl	800434c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048de:	2140      	movs	r1, #64	; 0x40
 80048e0:	6820      	ldr	r0, [r4, #0]
 80048e2:	f7ff fd5a 	bl	800439a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80048e6:	2000      	movs	r0, #0
      break;
 80048e8:	e7b3      	b.n	8004852 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 80048ea:	2000      	movs	r0, #0
 80048ec:	e7b1      	b.n	8004852 <HAL_TIM_ConfigClockSource+0x56>
      status = HAL_ERROR;
 80048ee:	2001      	movs	r0, #1
 80048f0:	e7af      	b.n	8004852 <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 80048f2:	2002      	movs	r0, #2
}
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	fffe0088 	.word	0xfffe0088

080048fc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048fc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004900:	2b01      	cmp	r3, #1
 8004902:	d02f      	beq.n	8004964 <HAL_TIMEx_MasterConfigSynchronization+0x68>
{
 8004904:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8004906:	2301      	movs	r3, #1
 8004908:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800490c:	2302      	movs	r3, #2
 800490e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004912:	6802      	ldr	r2, [r0, #0]
 8004914:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004916:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004918:	4d13      	ldr	r5, [pc, #76]	; (8004968 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 800491a:	42aa      	cmp	r2, r5
 800491c:	d01d      	beq.n	800495a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800491e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004922:	680d      	ldr	r5, [r1, #0]
 8004924:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004926:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004928:	6803      	ldr	r3, [r0, #0]
 800492a:	4a0f      	ldr	r2, [pc, #60]	; (8004968 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d006      	beq.n	800493e <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8004930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004934:	d003      	beq.n	800493e <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8004936:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 800493a:	4293      	cmp	r3, r2
 800493c:	d104      	bne.n	8004948 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800493e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004942:	688a      	ldr	r2, [r1, #8]
 8004944:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004946:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004948:	2301      	movs	r3, #1
 800494a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800494e:	2300      	movs	r3, #0
 8004950:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8004954:	4618      	mov	r0, r3
}
 8004956:	bc30      	pop	{r4, r5}
 8004958:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 800495a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800495e:	684d      	ldr	r5, [r1, #4]
 8004960:	432b      	orrs	r3, r5
 8004962:	e7dc      	b.n	800491e <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 8004964:	2002      	movs	r0, #2
}
 8004966:	4770      	bx	lr
 8004968:	40012c00 	.word	0x40012c00

0800496c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800496c:	4770      	bx	lr

0800496e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800496e:	4770      	bx	lr

08004970 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004970:	4770      	bx	lr

08004972 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8004972:	468c      	mov	ip, r1
 8004974:	4613      	mov	r3, r2
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8004976:	6841      	ldr	r1, [r0, #4]
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8004978:	f8dc 2004 	ldr.w	r2, [ip, #4]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800497c:	685b      	ldr	r3, [r3, #4]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800497e:	f8b0 c000 	ldrh.w	ip, [r0]
 8004982:	8840      	ldrh	r0, [r0, #2]
 8004984:	fb00 f00c 	mul.w	r0, r0, ip
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8004988:	e008      	b.n	800499c <arm_mat_add_f32+0x2a>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800498a:	ecf1 7a01 	vldmia	r1!, {s15}
 800498e:	ecb2 7a01 	vldmia	r2!, {s14}
 8004992:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004996:	ece3 7a01 	vstmia	r3!, {s15}

      /* Decrement loop counter */
      blkCnt--;
 800499a:	3801      	subs	r0, #1
    while (blkCnt > 0U)
 800499c:	2800      	cmp	r0, #0
 800499e:	d1f4      	bne.n	800498a <arm_mat_add_f32+0x18>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
 80049a0:	4770      	bx	lr

080049a2 <arm_mat_init_f32>:
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
  /* Assign Number of Rows */
  S->numRows = nRows;
 80049a2:	8001      	strh	r1, [r0, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 80049a4:	8042      	strh	r2, [r0, #2]

  /* Assign Data pointer */
  S->pData = pData;
 80049a6:	6043      	str	r3, [r0, #4]
}
 80049a8:	4770      	bx	lr
	...

080049ac <arm_mat_mult_f32>:
#else
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 80049ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049b0:	4603      	mov	r3, r0
 80049b2:	4688      	mov	r8, r1
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 80049b4:	f8d0 c004 	ldr.w	ip, [r0, #4]
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 80049b8:	684d      	ldr	r5, [r1, #4]
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 80049ba:	f8d2 9004 	ldr.w	r9, [r2, #4]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 80049be:	8848      	ldrh	r0, [r1, #2]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 80049c0:	f8b3 e002 	ldrh.w	lr, [r3, #2]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 80049c4:	881f      	ldrh	r7, [r3, #0]
 80049c6:	2600      	movs	r6, #0
 80049c8:	e01f      	b.n	8004a0a <arm_mat_mult_f32+0x5e>
        while (colCnt > 0U)
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 80049ca:	ecf3 7a01 	vldmia	r3!, {s15}
 80049ce:	edd2 6a00 	vldr	s13, [r2]
 80049d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80049d6:	ee37 7a27 	vadd.f32	s14, s14, s15
          pIn2 += numColsB;
 80049da:	eb02 0280 	add.w	r2, r2, r0, lsl #2

          /* Decrement loop counter */
          colCnt--;
 80049de:	3901      	subs	r1, #1
        while (colCnt > 0U)
 80049e0:	2900      	cmp	r1, #0
 80049e2:	d1f2      	bne.n	80049ca <arm_mat_mult_f32+0x1e>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 80049e4:	4653      	mov	r3, sl
 80049e6:	eca3 7a01 	vstmia	r3!, {s14}

        /* Decrement column loop counter */
        col--;
 80049ea:	3c01      	subs	r4, #1

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 80049ec:	1b02      	subs	r2, r0, r4
 80049ee:	eb05 0282 	add.w	r2, r5, r2, lsl #2

      } while (col > 0U);
 80049f2:	b12c      	cbz	r4, 8004a00 <arm_mat_mult_f32+0x54>
        *px++ = sum;
 80049f4:	469a      	mov	sl, r3
        colCnt = numColsA;
 80049f6:	4671      	mov	r1, lr
        pIn1 = pInA;
 80049f8:	4663      	mov	r3, ip
        sum = 0.0f;
 80049fa:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004a1c <arm_mat_mult_f32+0x70>
        while (colCnt > 0U)
 80049fe:	e7ef      	b.n	80049e0 <arm_mat_mult_f32+0x34>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 8004a00:	4406      	add	r6, r0
      pInA = pInA + numColsA;
 8004a02:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2

      /* Decrement row loop counter */
      row--;

    } while (row > 0U);
 8004a06:	3f01      	subs	r7, #1
 8004a08:	d005      	beq.n	8004a16 <arm_mat_mult_f32+0x6a>
      px = pOut + i;
 8004a0a:	eb09 0a86 	add.w	sl, r9, r6, lsl #2
      pIn2 = pSrcB->pData;
 8004a0e:	f8d8 2004 	ldr.w	r2, [r8, #4]
      col = numColsB;
 8004a12:	4604      	mov	r4, r0
 8004a14:	e7ef      	b.n	80049f6 <arm_mat_mult_f32+0x4a>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
 8004a16:	2000      	movs	r0, #0
 8004a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a1c:	00000000 	.word	0x00000000

08004a20 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8004a20:	468c      	mov	ip, r1
 8004a22:	4613      	mov	r3, r2
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8004a24:	6841      	ldr	r1, [r0, #4]
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8004a26:	f8dc 2004 	ldr.w	r2, [ip, #4]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8004a2a:	685b      	ldr	r3, [r3, #4]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8004a2c:	f8b0 c000 	ldrh.w	ip, [r0]
 8004a30:	8840      	ldrh	r0, [r0, #2]
 8004a32:	fb00 f00c 	mul.w	r0, r0, ip
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8004a36:	e008      	b.n	8004a4a <arm_mat_sub_f32+0x2a>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 8004a38:	ecf1 7a01 	vldmia	r1!, {s15}
 8004a3c:	ecb2 7a01 	vldmia	r2!, {s14}
 8004a40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004a44:	ece3 7a01 	vstmia	r3!, {s15}

      /* Decrement loop counter */
      blkCnt--;
 8004a48:	3801      	subs	r0, #1
    while (blkCnt > 0U)
 8004a4a:	2800      	cmp	r0, #0
 8004a4c:	d1f4      	bne.n	8004a38 <arm_mat_sub_f32+0x18>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
 8004a4e:	4770      	bx	lr

08004a50 <arm_quaternion2rotation_f32>:
#else
void arm_quaternion2rotation_f32(const float32_t *pInputQuaternions, 
    float32_t *pOutputRotations, 
    uint32_t nbQuaternions)
{
   for(uint32_t nb=0; nb < nbQuaternions; nb++)
 8004a50:	f04f 0c00 	mov.w	ip, #0
 8004a54:	4594      	cmp	ip, r2
 8004a56:	d27b      	bcs.n	8004b50 <arm_quaternion2rotation_f32+0x100>
{
 8004a58:	b500      	push	{lr}
   {
        float32_t q00 = SQ(pInputQuaternions[0 + nb * 4]);
 8004a5a:	eb00 130c 	add.w	r3, r0, ip, lsl #4
 8004a5e:	ed93 7a00 	vldr	s14, [r3]
 8004a62:	ee67 6a07 	vmul.f32	s13, s14, s14
        float32_t q11 = SQ(pInputQuaternions[1 + nb * 4]);
 8004a66:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a6a:	ee67 3aa7 	vmul.f32	s7, s15, s15
        float32_t q22 = SQ(pInputQuaternions[2 + nb * 4]);
 8004a6e:	ed93 6a02 	vldr	s12, [r3, #8]
 8004a72:	ee26 4a06 	vmul.f32	s8, s12, s12
        float32_t q33 = SQ(pInputQuaternions[3 + nb * 4]);
 8004a76:	ed93 5a03 	vldr	s10, [r3, #12]
 8004a7a:	ee65 4a05 	vmul.f32	s9, s10, s10
        float32_t q01 =  pInputQuaternions[0 + nb * 4]*pInputQuaternions[1 + nb * 4];
 8004a7e:	ee67 5a27 	vmul.f32	s11, s14, s15
        float32_t q02 =  pInputQuaternions[0 + nb * 4]*pInputQuaternions[2 + nb * 4];
 8004a82:	ee67 2a06 	vmul.f32	s5, s14, s12
        float32_t q03 =  pInputQuaternions[0 + nb * 4]*pInputQuaternions[3 + nb * 4];
 8004a86:	ee27 7a05 	vmul.f32	s14, s14, s10
        float32_t q12 =  pInputQuaternions[1 + nb * 4]*pInputQuaternions[2 + nb * 4];
 8004a8a:	ee27 2a86 	vmul.f32	s4, s15, s12
        float32_t q13 =  pInputQuaternions[1 + nb * 4]*pInputQuaternions[3 + nb * 4];
 8004a8e:	ee67 7a85 	vmul.f32	s15, s15, s10
        float32_t q23 =  pInputQuaternions[2 + nb * 4]*pInputQuaternions[3 + nb * 4];
 8004a92:	ee26 6a05 	vmul.f32	s12, s12, s10

        float32_t xx = q00 + q11 - q22 - q33;
 8004a96:	ee36 5aa3 	vadd.f32	s10, s13, s7
 8004a9a:	ee35 5a44 	vsub.f32	s10, s10, s8
 8004a9e:	ee35 5a64 	vsub.f32	s10, s10, s9
        float32_t yy = q00 - q11 + q22 - q33;
 8004aa2:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8004aa6:	ee36 3a84 	vadd.f32	s6, s13, s8
 8004aaa:	ee33 3a64 	vsub.f32	s6, s6, s9
        float32_t zz = q00 - q11 - q22 + q33;
 8004aae:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8004ab2:	ee76 6aa4 	vadd.f32	s13, s13, s9
        float32_t xy = 2*(q12 - q03);
 8004ab6:	ee72 4a47 	vsub.f32	s9, s4, s14
 8004aba:	ee74 3aa4 	vadd.f32	s7, s9, s9
        float32_t xz = 2*(q13 + q02);
 8004abe:	ee72 4aa7 	vadd.f32	s9, s5, s15
 8004ac2:	ee34 4aa4 	vadd.f32	s8, s9, s9
        float32_t yx = 2*(q12 + q03);
 8004ac6:	ee37 7a02 	vadd.f32	s14, s14, s4
 8004aca:	ee37 7a07 	vadd.f32	s14, s14, s14
        float32_t yz = 2*(q23 - q01);
 8004ace:	ee76 4a65 	vsub.f32	s9, s12, s11
 8004ad2:	ee74 4aa4 	vadd.f32	s9, s9, s9
        float32_t zx = 2*(q13 - q02);
 8004ad6:	ee77 7ae2 	vsub.f32	s15, s15, s5
 8004ada:	ee77 7aa7 	vadd.f32	s15, s15, s15
        float32_t zy = 2*(q23 + q01);
 8004ade:	ee35 6a86 	vadd.f32	s12, s11, s12
 8004ae2:	ee36 6a06 	vadd.f32	s12, s12, s12

        pOutputRotations[0 + nb * 9] = xx; pOutputRotations[1 + nb * 9] = xy; pOutputRotations[2 + nb * 9] = xz;
 8004ae6:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 8004aea:	ea4f 038e 	mov.w	r3, lr, lsl #2
 8004aee:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
 8004af2:	ed8e 5a00 	vstr	s10, [lr]
 8004af6:	f103 0e04 	add.w	lr, r3, #4
 8004afa:	448e      	add	lr, r1
 8004afc:	edce 3a00 	vstr	s7, [lr]
 8004b00:	f103 0e08 	add.w	lr, r3, #8
 8004b04:	448e      	add	lr, r1
 8004b06:	ed8e 4a00 	vstr	s8, [lr]
        pOutputRotations[3 + nb * 9] = yx; pOutputRotations[4 + nb * 9] = yy; pOutputRotations[5 + nb * 9] = yz;
 8004b0a:	f103 0e0c 	add.w	lr, r3, #12
 8004b0e:	448e      	add	lr, r1
 8004b10:	ed8e 7a00 	vstr	s14, [lr]
 8004b14:	f103 0e10 	add.w	lr, r3, #16
 8004b18:	448e      	add	lr, r1
 8004b1a:	ed8e 3a00 	vstr	s6, [lr]
 8004b1e:	f103 0e14 	add.w	lr, r3, #20
 8004b22:	448e      	add	lr, r1
 8004b24:	edce 4a00 	vstr	s9, [lr]
        pOutputRotations[6 + nb * 9] = zx; pOutputRotations[7 + nb * 9] = zy; pOutputRotations[8 + nb * 9] = zz;
 8004b28:	f103 0e18 	add.w	lr, r3, #24
 8004b2c:	448e      	add	lr, r1
 8004b2e:	edce 7a00 	vstr	s15, [lr]
 8004b32:	f103 0e1c 	add.w	lr, r3, #28
 8004b36:	448e      	add	lr, r1
 8004b38:	ed8e 6a00 	vstr	s12, [lr]
 8004b3c:	3320      	adds	r3, #32
 8004b3e:	440b      	add	r3, r1
 8004b40:	edc3 6a00 	vstr	s13, [r3]
   for(uint32_t nb=0; nb < nbQuaternions; nb++)
 8004b44:	f10c 0c01 	add.w	ip, ip, #1
 8004b48:	4594      	cmp	ip, r2
 8004b4a:	d386      	bcc.n	8004a5a <arm_quaternion2rotation_f32+0xa>
   }
}
 8004b4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <arm_quaternion_normalize_f32>:

#else
void arm_quaternion_normalize_f32(const float32_t *pInputQuaternions, 
    float32_t *pNormalizedQuaternions, 
    uint32_t nbQuaternions)
{
 8004b52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b56:	b085      	sub	sp, #20
 8004b58:	4607      	mov	r7, r0
 8004b5a:	460e      	mov	r6, r1
 8004b5c:	9203      	str	r2, [sp, #12]
   float32_t temp;

   for(uint32_t i=0; i < nbQuaternions; i++)
 8004b5e:	2500      	movs	r5, #0
 8004b60:	e048      	b.n	8004bf4 <arm_quaternion_normalize_f32+0xa2>
   {
      temp = SQ(pInputQuaternions[4 * i + 0]) +
 8004b62:	012c      	lsls	r4, r5, #4
 8004b64:	eb07 1b05 	add.w	fp, r7, r5, lsl #4
 8004b68:	ed9b 0a00 	vldr	s0, [fp]
 8004b6c:	ee20 0a00 	vmul.f32	s0, s0, s0
             SQ(pInputQuaternions[4 * i + 1]) +
 8004b70:	1d23      	adds	r3, r4, #4
 8004b72:	9300      	str	r3, [sp, #0]
 8004b74:	eb07 0a03 	add.w	sl, r7, r3
 8004b78:	edda 7a00 	vldr	s15, [sl]
 8004b7c:	ee67 7aa7 	vmul.f32	s15, s15, s15
      temp = SQ(pInputQuaternions[4 * i + 0]) +
 8004b80:	ee30 0a27 	vadd.f32	s0, s0, s15
             SQ(pInputQuaternions[4 * i + 2]) +
 8004b84:	f104 0208 	add.w	r2, r4, #8
 8004b88:	9201      	str	r2, [sp, #4]
 8004b8a:	eb07 0902 	add.w	r9, r7, r2
 8004b8e:	edd9 7a00 	vldr	s15, [r9]
 8004b92:	ee67 7aa7 	vmul.f32	s15, s15, s15
             SQ(pInputQuaternions[4 * i + 1]) +
 8004b96:	ee30 0a27 	vadd.f32	s0, s0, s15
             SQ(pInputQuaternions[4 * i + 3]);
 8004b9a:	f104 010c 	add.w	r1, r4, #12
 8004b9e:	9102      	str	r1, [sp, #8]
 8004ba0:	eb07 0801 	add.w	r8, r7, r1
 8004ba4:	edd8 7a00 	vldr	s15, [r8]
 8004ba8:	ee67 7aa7 	vmul.f32	s15, s15, s15
      temp = sqrtf(temp);
 8004bac:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004bb0:	f001 fbd6 	bl	8006360 <sqrtf>

      pNormalizedQuaternions[4 * i + 0] = pInputQuaternions[4 * i + 0] / temp;
 8004bb4:	ed9b 7a00 	vldr	s14, [fp]
 8004bb8:	4434      	add	r4, r6
 8004bba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8004bbe:	edc4 7a00 	vstr	s15, [r4]
      pNormalizedQuaternions[4 * i + 1] = pInputQuaternions[4 * i + 1] / temp;
 8004bc2:	ed9a 7a00 	vldr	s14, [sl]
 8004bc6:	9b00      	ldr	r3, [sp, #0]
 8004bc8:	18f3      	adds	r3, r6, r3
 8004bca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8004bce:	edc3 7a00 	vstr	s15, [r3]
      pNormalizedQuaternions[4 * i + 2] = pInputQuaternions[4 * i + 2] / temp;
 8004bd2:	ed99 7a00 	vldr	s14, [r9]
 8004bd6:	9a01      	ldr	r2, [sp, #4]
 8004bd8:	18b3      	adds	r3, r6, r2
 8004bda:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8004bde:	edc3 7a00 	vstr	s15, [r3]
      pNormalizedQuaternions[4 * i + 3] = pInputQuaternions[4 * i + 3] / temp;
 8004be2:	ed98 7a00 	vldr	s14, [r8]
 8004be6:	9902      	ldr	r1, [sp, #8]
 8004be8:	1873      	adds	r3, r6, r1
 8004bea:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8004bee:	edc3 7a00 	vstr	s15, [r3]
   for(uint32_t i=0; i < nbQuaternions; i++)
 8004bf2:	3501      	adds	r5, #1
 8004bf4:	9b03      	ldr	r3, [sp, #12]
 8004bf6:	429d      	cmp	r5, r3
 8004bf8:	d3b3      	bcc.n	8004b62 <arm_quaternion_normalize_f32+0x10>
   }
}
 8004bfa:	b005      	add	sp, #20
 8004bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004c00 <arm_quaternion_product_single_f32>:
#else
void arm_quaternion_product_single_f32(const float32_t *qa, 
    const float32_t *qb, 
    float32_t *qr)
{
    qr[0] = qa[0] * qb[0] - qa[1] * qb[1] - qa[2] * qb[2] - qa[3] * qb[3];
 8004c00:	edd0 7a00 	vldr	s15, [r0]
 8004c04:	ed91 7a00 	vldr	s14, [r1]
 8004c08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c0c:	ed90 7a01 	vldr	s14, [r0, #4]
 8004c10:	edd1 6a01 	vldr	s13, [r1, #4]
 8004c14:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004c18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c1c:	ed90 7a02 	vldr	s14, [r0, #8]
 8004c20:	edd1 6a02 	vldr	s13, [r1, #8]
 8004c24:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004c28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c2c:	ed90 7a03 	vldr	s14, [r0, #12]
 8004c30:	edd1 6a03 	vldr	s13, [r1, #12]
 8004c34:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004c38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c3c:	edc2 7a00 	vstr	s15, [r2]
    qr[1] = qa[0] * qb[1] + qa[1] * qb[0] + qa[2] * qb[3] - qa[3] * qb[2];
 8004c40:	edd0 7a00 	vldr	s15, [r0]
 8004c44:	ed91 7a01 	vldr	s14, [r1, #4]
 8004c48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c4c:	ed90 7a01 	vldr	s14, [r0, #4]
 8004c50:	edd1 6a00 	vldr	s13, [r1]
 8004c54:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004c58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c5c:	ed90 7a02 	vldr	s14, [r0, #8]
 8004c60:	edd1 6a03 	vldr	s13, [r1, #12]
 8004c64:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004c68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c6c:	ed90 7a03 	vldr	s14, [r0, #12]
 8004c70:	edd1 6a02 	vldr	s13, [r1, #8]
 8004c74:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004c78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c7c:	edc2 7a01 	vstr	s15, [r2, #4]
    qr[2] = qa[0] * qb[2] + qa[2] * qb[0] + qa[3] * qb[1] - qa[1] * qb[3];
 8004c80:	edd0 7a00 	vldr	s15, [r0]
 8004c84:	ed91 7a02 	vldr	s14, [r1, #8]
 8004c88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c8c:	ed90 7a02 	vldr	s14, [r0, #8]
 8004c90:	edd1 6a00 	vldr	s13, [r1]
 8004c94:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004c98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c9c:	ed90 7a03 	vldr	s14, [r0, #12]
 8004ca0:	edd1 6a01 	vldr	s13, [r1, #4]
 8004ca4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004ca8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004cac:	ed90 7a01 	vldr	s14, [r0, #4]
 8004cb0:	edd1 6a03 	vldr	s13, [r1, #12]
 8004cb4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004cb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004cbc:	edc2 7a02 	vstr	s15, [r2, #8]
    qr[3] = qa[0] * qb[3] + qa[3] * qb[0] + qa[1] * qb[2] - qa[2] * qb[1];
 8004cc0:	edd0 7a00 	vldr	s15, [r0]
 8004cc4:	ed91 7a03 	vldr	s14, [r1, #12]
 8004cc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ccc:	ed90 7a03 	vldr	s14, [r0, #12]
 8004cd0:	edd1 6a00 	vldr	s13, [r1]
 8004cd4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004cd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004cdc:	ed90 7a01 	vldr	s14, [r0, #4]
 8004ce0:	edd1 6a02 	vldr	s13, [r1, #8]
 8004ce4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004ce8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004cec:	ed90 7a02 	vldr	s14, [r0, #8]
 8004cf0:	edd1 6a01 	vldr	s13, [r1, #4]
 8004cf4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004cf8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004cfc:	edc2 7a03 	vstr	s15, [r2, #12]
}
 8004d00:	4770      	bx	lr
	...

08004d04 <__assert_func>:
 8004d04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004d06:	4614      	mov	r4, r2
 8004d08:	461a      	mov	r2, r3
 8004d0a:	4b09      	ldr	r3, [pc, #36]	; (8004d30 <__assert_func+0x2c>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4605      	mov	r5, r0
 8004d10:	68d8      	ldr	r0, [r3, #12]
 8004d12:	b14c      	cbz	r4, 8004d28 <__assert_func+0x24>
 8004d14:	4b07      	ldr	r3, [pc, #28]	; (8004d34 <__assert_func+0x30>)
 8004d16:	9100      	str	r1, [sp, #0]
 8004d18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004d1c:	4906      	ldr	r1, [pc, #24]	; (8004d38 <__assert_func+0x34>)
 8004d1e:	462b      	mov	r3, r5
 8004d20:	f000 f814 	bl	8004d4c <fiprintf>
 8004d24:	f000 fd0c 	bl	8005740 <abort>
 8004d28:	4b04      	ldr	r3, [pc, #16]	; (8004d3c <__assert_func+0x38>)
 8004d2a:	461c      	mov	r4, r3
 8004d2c:	e7f3      	b.n	8004d16 <__assert_func+0x12>
 8004d2e:	bf00      	nop
 8004d30:	20000430 	.word	0x20000430
 8004d34:	08007f00 	.word	0x08007f00
 8004d38:	08007f0d 	.word	0x08007f0d
 8004d3c:	08007f3b 	.word	0x08007f3b

08004d40 <__errno>:
 8004d40:	4b01      	ldr	r3, [pc, #4]	; (8004d48 <__errno+0x8>)
 8004d42:	6818      	ldr	r0, [r3, #0]
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	20000430 	.word	0x20000430

08004d4c <fiprintf>:
 8004d4c:	b40e      	push	{r1, r2, r3}
 8004d4e:	b503      	push	{r0, r1, lr}
 8004d50:	4601      	mov	r1, r0
 8004d52:	ab03      	add	r3, sp, #12
 8004d54:	4805      	ldr	r0, [pc, #20]	; (8004d6c <fiprintf+0x20>)
 8004d56:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d5a:	6800      	ldr	r0, [r0, #0]
 8004d5c:	9301      	str	r3, [sp, #4]
 8004d5e:	f000 f95b 	bl	8005018 <_vfiprintf_r>
 8004d62:	b002      	add	sp, #8
 8004d64:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d68:	b003      	add	sp, #12
 8004d6a:	4770      	bx	lr
 8004d6c:	20000430 	.word	0x20000430

08004d70 <__libc_init_array>:
 8004d70:	b570      	push	{r4, r5, r6, lr}
 8004d72:	4d0d      	ldr	r5, [pc, #52]	; (8004da8 <__libc_init_array+0x38>)
 8004d74:	4c0d      	ldr	r4, [pc, #52]	; (8004dac <__libc_init_array+0x3c>)
 8004d76:	1b64      	subs	r4, r4, r5
 8004d78:	10a4      	asrs	r4, r4, #2
 8004d7a:	2600      	movs	r6, #0
 8004d7c:	42a6      	cmp	r6, r4
 8004d7e:	d109      	bne.n	8004d94 <__libc_init_array+0x24>
 8004d80:	4d0b      	ldr	r5, [pc, #44]	; (8004db0 <__libc_init_array+0x40>)
 8004d82:	4c0c      	ldr	r4, [pc, #48]	; (8004db4 <__libc_init_array+0x44>)
 8004d84:	f003 f82a 	bl	8007ddc <_init>
 8004d88:	1b64      	subs	r4, r4, r5
 8004d8a:	10a4      	asrs	r4, r4, #2
 8004d8c:	2600      	movs	r6, #0
 8004d8e:	42a6      	cmp	r6, r4
 8004d90:	d105      	bne.n	8004d9e <__libc_init_array+0x2e>
 8004d92:	bd70      	pop	{r4, r5, r6, pc}
 8004d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d98:	4798      	blx	r3
 8004d9a:	3601      	adds	r6, #1
 8004d9c:	e7ee      	b.n	8004d7c <__libc_init_array+0xc>
 8004d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004da2:	4798      	blx	r3
 8004da4:	3601      	adds	r6, #1
 8004da6:	e7f2      	b.n	8004d8e <__libc_init_array+0x1e>
 8004da8:	080081f0 	.word	0x080081f0
 8004dac:	080081f0 	.word	0x080081f0
 8004db0:	080081f0 	.word	0x080081f0
 8004db4:	080081f4 	.word	0x080081f4

08004db8 <malloc>:
 8004db8:	4b02      	ldr	r3, [pc, #8]	; (8004dc4 <malloc+0xc>)
 8004dba:	4601      	mov	r1, r0
 8004dbc:	6818      	ldr	r0, [r3, #0]
 8004dbe:	f000 b88d 	b.w	8004edc <_malloc_r>
 8004dc2:	bf00      	nop
 8004dc4:	20000430 	.word	0x20000430

08004dc8 <free>:
 8004dc8:	4b02      	ldr	r3, [pc, #8]	; (8004dd4 <free+0xc>)
 8004dca:	4601      	mov	r1, r0
 8004dcc:	6818      	ldr	r0, [r3, #0]
 8004dce:	f000 b819 	b.w	8004e04 <_free_r>
 8004dd2:	bf00      	nop
 8004dd4:	20000430 	.word	0x20000430

08004dd8 <memcpy>:
 8004dd8:	440a      	add	r2, r1
 8004dda:	4291      	cmp	r1, r2
 8004ddc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004de0:	d100      	bne.n	8004de4 <memcpy+0xc>
 8004de2:	4770      	bx	lr
 8004de4:	b510      	push	{r4, lr}
 8004de6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004dee:	4291      	cmp	r1, r2
 8004df0:	d1f9      	bne.n	8004de6 <memcpy+0xe>
 8004df2:	bd10      	pop	{r4, pc}

08004df4 <memset>:
 8004df4:	4402      	add	r2, r0
 8004df6:	4603      	mov	r3, r0
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d100      	bne.n	8004dfe <memset+0xa>
 8004dfc:	4770      	bx	lr
 8004dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8004e02:	e7f9      	b.n	8004df8 <memset+0x4>

08004e04 <_free_r>:
 8004e04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e06:	2900      	cmp	r1, #0
 8004e08:	d044      	beq.n	8004e94 <_free_r+0x90>
 8004e0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e0e:	9001      	str	r0, [sp, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f1a1 0404 	sub.w	r4, r1, #4
 8004e16:	bfb8      	it	lt
 8004e18:	18e4      	addlt	r4, r4, r3
 8004e1a:	f000 feb9 	bl	8005b90 <__malloc_lock>
 8004e1e:	4a1e      	ldr	r2, [pc, #120]	; (8004e98 <_free_r+0x94>)
 8004e20:	9801      	ldr	r0, [sp, #4]
 8004e22:	6813      	ldr	r3, [r2, #0]
 8004e24:	b933      	cbnz	r3, 8004e34 <_free_r+0x30>
 8004e26:	6063      	str	r3, [r4, #4]
 8004e28:	6014      	str	r4, [r2, #0]
 8004e2a:	b003      	add	sp, #12
 8004e2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e30:	f000 beb4 	b.w	8005b9c <__malloc_unlock>
 8004e34:	42a3      	cmp	r3, r4
 8004e36:	d908      	bls.n	8004e4a <_free_r+0x46>
 8004e38:	6825      	ldr	r5, [r4, #0]
 8004e3a:	1961      	adds	r1, r4, r5
 8004e3c:	428b      	cmp	r3, r1
 8004e3e:	bf01      	itttt	eq
 8004e40:	6819      	ldreq	r1, [r3, #0]
 8004e42:	685b      	ldreq	r3, [r3, #4]
 8004e44:	1949      	addeq	r1, r1, r5
 8004e46:	6021      	streq	r1, [r4, #0]
 8004e48:	e7ed      	b.n	8004e26 <_free_r+0x22>
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	b10b      	cbz	r3, 8004e54 <_free_r+0x50>
 8004e50:	42a3      	cmp	r3, r4
 8004e52:	d9fa      	bls.n	8004e4a <_free_r+0x46>
 8004e54:	6811      	ldr	r1, [r2, #0]
 8004e56:	1855      	adds	r5, r2, r1
 8004e58:	42a5      	cmp	r5, r4
 8004e5a:	d10b      	bne.n	8004e74 <_free_r+0x70>
 8004e5c:	6824      	ldr	r4, [r4, #0]
 8004e5e:	4421      	add	r1, r4
 8004e60:	1854      	adds	r4, r2, r1
 8004e62:	42a3      	cmp	r3, r4
 8004e64:	6011      	str	r1, [r2, #0]
 8004e66:	d1e0      	bne.n	8004e2a <_free_r+0x26>
 8004e68:	681c      	ldr	r4, [r3, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	6053      	str	r3, [r2, #4]
 8004e6e:	4421      	add	r1, r4
 8004e70:	6011      	str	r1, [r2, #0]
 8004e72:	e7da      	b.n	8004e2a <_free_r+0x26>
 8004e74:	d902      	bls.n	8004e7c <_free_r+0x78>
 8004e76:	230c      	movs	r3, #12
 8004e78:	6003      	str	r3, [r0, #0]
 8004e7a:	e7d6      	b.n	8004e2a <_free_r+0x26>
 8004e7c:	6825      	ldr	r5, [r4, #0]
 8004e7e:	1961      	adds	r1, r4, r5
 8004e80:	428b      	cmp	r3, r1
 8004e82:	bf04      	itt	eq
 8004e84:	6819      	ldreq	r1, [r3, #0]
 8004e86:	685b      	ldreq	r3, [r3, #4]
 8004e88:	6063      	str	r3, [r4, #4]
 8004e8a:	bf04      	itt	eq
 8004e8c:	1949      	addeq	r1, r1, r5
 8004e8e:	6021      	streq	r1, [r4, #0]
 8004e90:	6054      	str	r4, [r2, #4]
 8004e92:	e7ca      	b.n	8004e2a <_free_r+0x26>
 8004e94:	b003      	add	sp, #12
 8004e96:	bd30      	pop	{r4, r5, pc}
 8004e98:	20000818 	.word	0x20000818

08004e9c <sbrk_aligned>:
 8004e9c:	b570      	push	{r4, r5, r6, lr}
 8004e9e:	4e0e      	ldr	r6, [pc, #56]	; (8004ed8 <sbrk_aligned+0x3c>)
 8004ea0:	460c      	mov	r4, r1
 8004ea2:	6831      	ldr	r1, [r6, #0]
 8004ea4:	4605      	mov	r5, r0
 8004ea6:	b911      	cbnz	r1, 8004eae <sbrk_aligned+0x12>
 8004ea8:	f000 fb7a 	bl	80055a0 <_sbrk_r>
 8004eac:	6030      	str	r0, [r6, #0]
 8004eae:	4621      	mov	r1, r4
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	f000 fb75 	bl	80055a0 <_sbrk_r>
 8004eb6:	1c43      	adds	r3, r0, #1
 8004eb8:	d00a      	beq.n	8004ed0 <sbrk_aligned+0x34>
 8004eba:	1cc4      	adds	r4, r0, #3
 8004ebc:	f024 0403 	bic.w	r4, r4, #3
 8004ec0:	42a0      	cmp	r0, r4
 8004ec2:	d007      	beq.n	8004ed4 <sbrk_aligned+0x38>
 8004ec4:	1a21      	subs	r1, r4, r0
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	f000 fb6a 	bl	80055a0 <_sbrk_r>
 8004ecc:	3001      	adds	r0, #1
 8004ece:	d101      	bne.n	8004ed4 <sbrk_aligned+0x38>
 8004ed0:	f04f 34ff 	mov.w	r4, #4294967295
 8004ed4:	4620      	mov	r0, r4
 8004ed6:	bd70      	pop	{r4, r5, r6, pc}
 8004ed8:	2000081c 	.word	0x2000081c

08004edc <_malloc_r>:
 8004edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ee0:	1ccd      	adds	r5, r1, #3
 8004ee2:	f025 0503 	bic.w	r5, r5, #3
 8004ee6:	3508      	adds	r5, #8
 8004ee8:	2d0c      	cmp	r5, #12
 8004eea:	bf38      	it	cc
 8004eec:	250c      	movcc	r5, #12
 8004eee:	2d00      	cmp	r5, #0
 8004ef0:	4607      	mov	r7, r0
 8004ef2:	db01      	blt.n	8004ef8 <_malloc_r+0x1c>
 8004ef4:	42a9      	cmp	r1, r5
 8004ef6:	d905      	bls.n	8004f04 <_malloc_r+0x28>
 8004ef8:	230c      	movs	r3, #12
 8004efa:	603b      	str	r3, [r7, #0]
 8004efc:	2600      	movs	r6, #0
 8004efe:	4630      	mov	r0, r6
 8004f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f04:	4e2e      	ldr	r6, [pc, #184]	; (8004fc0 <_malloc_r+0xe4>)
 8004f06:	f000 fe43 	bl	8005b90 <__malloc_lock>
 8004f0a:	6833      	ldr	r3, [r6, #0]
 8004f0c:	461c      	mov	r4, r3
 8004f0e:	bb34      	cbnz	r4, 8004f5e <_malloc_r+0x82>
 8004f10:	4629      	mov	r1, r5
 8004f12:	4638      	mov	r0, r7
 8004f14:	f7ff ffc2 	bl	8004e9c <sbrk_aligned>
 8004f18:	1c43      	adds	r3, r0, #1
 8004f1a:	4604      	mov	r4, r0
 8004f1c:	d14d      	bne.n	8004fba <_malloc_r+0xde>
 8004f1e:	6834      	ldr	r4, [r6, #0]
 8004f20:	4626      	mov	r6, r4
 8004f22:	2e00      	cmp	r6, #0
 8004f24:	d140      	bne.n	8004fa8 <_malloc_r+0xcc>
 8004f26:	6823      	ldr	r3, [r4, #0]
 8004f28:	4631      	mov	r1, r6
 8004f2a:	4638      	mov	r0, r7
 8004f2c:	eb04 0803 	add.w	r8, r4, r3
 8004f30:	f000 fb36 	bl	80055a0 <_sbrk_r>
 8004f34:	4580      	cmp	r8, r0
 8004f36:	d13a      	bne.n	8004fae <_malloc_r+0xd2>
 8004f38:	6821      	ldr	r1, [r4, #0]
 8004f3a:	3503      	adds	r5, #3
 8004f3c:	1a6d      	subs	r5, r5, r1
 8004f3e:	f025 0503 	bic.w	r5, r5, #3
 8004f42:	3508      	adds	r5, #8
 8004f44:	2d0c      	cmp	r5, #12
 8004f46:	bf38      	it	cc
 8004f48:	250c      	movcc	r5, #12
 8004f4a:	4629      	mov	r1, r5
 8004f4c:	4638      	mov	r0, r7
 8004f4e:	f7ff ffa5 	bl	8004e9c <sbrk_aligned>
 8004f52:	3001      	adds	r0, #1
 8004f54:	d02b      	beq.n	8004fae <_malloc_r+0xd2>
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	442b      	add	r3, r5
 8004f5a:	6023      	str	r3, [r4, #0]
 8004f5c:	e00e      	b.n	8004f7c <_malloc_r+0xa0>
 8004f5e:	6822      	ldr	r2, [r4, #0]
 8004f60:	1b52      	subs	r2, r2, r5
 8004f62:	d41e      	bmi.n	8004fa2 <_malloc_r+0xc6>
 8004f64:	2a0b      	cmp	r2, #11
 8004f66:	d916      	bls.n	8004f96 <_malloc_r+0xba>
 8004f68:	1961      	adds	r1, r4, r5
 8004f6a:	42a3      	cmp	r3, r4
 8004f6c:	6025      	str	r5, [r4, #0]
 8004f6e:	bf18      	it	ne
 8004f70:	6059      	strne	r1, [r3, #4]
 8004f72:	6863      	ldr	r3, [r4, #4]
 8004f74:	bf08      	it	eq
 8004f76:	6031      	streq	r1, [r6, #0]
 8004f78:	5162      	str	r2, [r4, r5]
 8004f7a:	604b      	str	r3, [r1, #4]
 8004f7c:	4638      	mov	r0, r7
 8004f7e:	f104 060b 	add.w	r6, r4, #11
 8004f82:	f000 fe0b 	bl	8005b9c <__malloc_unlock>
 8004f86:	f026 0607 	bic.w	r6, r6, #7
 8004f8a:	1d23      	adds	r3, r4, #4
 8004f8c:	1af2      	subs	r2, r6, r3
 8004f8e:	d0b6      	beq.n	8004efe <_malloc_r+0x22>
 8004f90:	1b9b      	subs	r3, r3, r6
 8004f92:	50a3      	str	r3, [r4, r2]
 8004f94:	e7b3      	b.n	8004efe <_malloc_r+0x22>
 8004f96:	6862      	ldr	r2, [r4, #4]
 8004f98:	42a3      	cmp	r3, r4
 8004f9a:	bf0c      	ite	eq
 8004f9c:	6032      	streq	r2, [r6, #0]
 8004f9e:	605a      	strne	r2, [r3, #4]
 8004fa0:	e7ec      	b.n	8004f7c <_malloc_r+0xa0>
 8004fa2:	4623      	mov	r3, r4
 8004fa4:	6864      	ldr	r4, [r4, #4]
 8004fa6:	e7b2      	b.n	8004f0e <_malloc_r+0x32>
 8004fa8:	4634      	mov	r4, r6
 8004faa:	6876      	ldr	r6, [r6, #4]
 8004fac:	e7b9      	b.n	8004f22 <_malloc_r+0x46>
 8004fae:	230c      	movs	r3, #12
 8004fb0:	603b      	str	r3, [r7, #0]
 8004fb2:	4638      	mov	r0, r7
 8004fb4:	f000 fdf2 	bl	8005b9c <__malloc_unlock>
 8004fb8:	e7a1      	b.n	8004efe <_malloc_r+0x22>
 8004fba:	6025      	str	r5, [r4, #0]
 8004fbc:	e7de      	b.n	8004f7c <_malloc_r+0xa0>
 8004fbe:	bf00      	nop
 8004fc0:	20000818 	.word	0x20000818

08004fc4 <__sfputc_r>:
 8004fc4:	6893      	ldr	r3, [r2, #8]
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	b410      	push	{r4}
 8004fcc:	6093      	str	r3, [r2, #8]
 8004fce:	da08      	bge.n	8004fe2 <__sfputc_r+0x1e>
 8004fd0:	6994      	ldr	r4, [r2, #24]
 8004fd2:	42a3      	cmp	r3, r4
 8004fd4:	db01      	blt.n	8004fda <__sfputc_r+0x16>
 8004fd6:	290a      	cmp	r1, #10
 8004fd8:	d103      	bne.n	8004fe2 <__sfputc_r+0x1e>
 8004fda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fde:	f000 baef 	b.w	80055c0 <__swbuf_r>
 8004fe2:	6813      	ldr	r3, [r2, #0]
 8004fe4:	1c58      	adds	r0, r3, #1
 8004fe6:	6010      	str	r0, [r2, #0]
 8004fe8:	7019      	strb	r1, [r3, #0]
 8004fea:	4608      	mov	r0, r1
 8004fec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <__sfputs_r>:
 8004ff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff4:	4606      	mov	r6, r0
 8004ff6:	460f      	mov	r7, r1
 8004ff8:	4614      	mov	r4, r2
 8004ffa:	18d5      	adds	r5, r2, r3
 8004ffc:	42ac      	cmp	r4, r5
 8004ffe:	d101      	bne.n	8005004 <__sfputs_r+0x12>
 8005000:	2000      	movs	r0, #0
 8005002:	e007      	b.n	8005014 <__sfputs_r+0x22>
 8005004:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005008:	463a      	mov	r2, r7
 800500a:	4630      	mov	r0, r6
 800500c:	f7ff ffda 	bl	8004fc4 <__sfputc_r>
 8005010:	1c43      	adds	r3, r0, #1
 8005012:	d1f3      	bne.n	8004ffc <__sfputs_r+0xa>
 8005014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005018 <_vfiprintf_r>:
 8005018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800501c:	460d      	mov	r5, r1
 800501e:	b09d      	sub	sp, #116	; 0x74
 8005020:	4614      	mov	r4, r2
 8005022:	4698      	mov	r8, r3
 8005024:	4606      	mov	r6, r0
 8005026:	b118      	cbz	r0, 8005030 <_vfiprintf_r+0x18>
 8005028:	6983      	ldr	r3, [r0, #24]
 800502a:	b90b      	cbnz	r3, 8005030 <_vfiprintf_r+0x18>
 800502c:	f000 fcaa 	bl	8005984 <__sinit>
 8005030:	4b89      	ldr	r3, [pc, #548]	; (8005258 <_vfiprintf_r+0x240>)
 8005032:	429d      	cmp	r5, r3
 8005034:	d11b      	bne.n	800506e <_vfiprintf_r+0x56>
 8005036:	6875      	ldr	r5, [r6, #4]
 8005038:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800503a:	07d9      	lsls	r1, r3, #31
 800503c:	d405      	bmi.n	800504a <_vfiprintf_r+0x32>
 800503e:	89ab      	ldrh	r3, [r5, #12]
 8005040:	059a      	lsls	r2, r3, #22
 8005042:	d402      	bmi.n	800504a <_vfiprintf_r+0x32>
 8005044:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005046:	f000 fd3b 	bl	8005ac0 <__retarget_lock_acquire_recursive>
 800504a:	89ab      	ldrh	r3, [r5, #12]
 800504c:	071b      	lsls	r3, r3, #28
 800504e:	d501      	bpl.n	8005054 <_vfiprintf_r+0x3c>
 8005050:	692b      	ldr	r3, [r5, #16]
 8005052:	b9eb      	cbnz	r3, 8005090 <_vfiprintf_r+0x78>
 8005054:	4629      	mov	r1, r5
 8005056:	4630      	mov	r0, r6
 8005058:	f000 fb04 	bl	8005664 <__swsetup_r>
 800505c:	b1c0      	cbz	r0, 8005090 <_vfiprintf_r+0x78>
 800505e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005060:	07dc      	lsls	r4, r3, #31
 8005062:	d50e      	bpl.n	8005082 <_vfiprintf_r+0x6a>
 8005064:	f04f 30ff 	mov.w	r0, #4294967295
 8005068:	b01d      	add	sp, #116	; 0x74
 800506a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800506e:	4b7b      	ldr	r3, [pc, #492]	; (800525c <_vfiprintf_r+0x244>)
 8005070:	429d      	cmp	r5, r3
 8005072:	d101      	bne.n	8005078 <_vfiprintf_r+0x60>
 8005074:	68b5      	ldr	r5, [r6, #8]
 8005076:	e7df      	b.n	8005038 <_vfiprintf_r+0x20>
 8005078:	4b79      	ldr	r3, [pc, #484]	; (8005260 <_vfiprintf_r+0x248>)
 800507a:	429d      	cmp	r5, r3
 800507c:	bf08      	it	eq
 800507e:	68f5      	ldreq	r5, [r6, #12]
 8005080:	e7da      	b.n	8005038 <_vfiprintf_r+0x20>
 8005082:	89ab      	ldrh	r3, [r5, #12]
 8005084:	0598      	lsls	r0, r3, #22
 8005086:	d4ed      	bmi.n	8005064 <_vfiprintf_r+0x4c>
 8005088:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800508a:	f000 fd1a 	bl	8005ac2 <__retarget_lock_release_recursive>
 800508e:	e7e9      	b.n	8005064 <_vfiprintf_r+0x4c>
 8005090:	2300      	movs	r3, #0
 8005092:	9309      	str	r3, [sp, #36]	; 0x24
 8005094:	2320      	movs	r3, #32
 8005096:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800509a:	f8cd 800c 	str.w	r8, [sp, #12]
 800509e:	2330      	movs	r3, #48	; 0x30
 80050a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005264 <_vfiprintf_r+0x24c>
 80050a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050a8:	f04f 0901 	mov.w	r9, #1
 80050ac:	4623      	mov	r3, r4
 80050ae:	469a      	mov	sl, r3
 80050b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050b4:	b10a      	cbz	r2, 80050ba <_vfiprintf_r+0xa2>
 80050b6:	2a25      	cmp	r2, #37	; 0x25
 80050b8:	d1f9      	bne.n	80050ae <_vfiprintf_r+0x96>
 80050ba:	ebba 0b04 	subs.w	fp, sl, r4
 80050be:	d00b      	beq.n	80050d8 <_vfiprintf_r+0xc0>
 80050c0:	465b      	mov	r3, fp
 80050c2:	4622      	mov	r2, r4
 80050c4:	4629      	mov	r1, r5
 80050c6:	4630      	mov	r0, r6
 80050c8:	f7ff ff93 	bl	8004ff2 <__sfputs_r>
 80050cc:	3001      	adds	r0, #1
 80050ce:	f000 80aa 	beq.w	8005226 <_vfiprintf_r+0x20e>
 80050d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050d4:	445a      	add	r2, fp
 80050d6:	9209      	str	r2, [sp, #36]	; 0x24
 80050d8:	f89a 3000 	ldrb.w	r3, [sl]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 80a2 	beq.w	8005226 <_vfiprintf_r+0x20e>
 80050e2:	2300      	movs	r3, #0
 80050e4:	f04f 32ff 	mov.w	r2, #4294967295
 80050e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050ec:	f10a 0a01 	add.w	sl, sl, #1
 80050f0:	9304      	str	r3, [sp, #16]
 80050f2:	9307      	str	r3, [sp, #28]
 80050f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050f8:	931a      	str	r3, [sp, #104]	; 0x68
 80050fa:	4654      	mov	r4, sl
 80050fc:	2205      	movs	r2, #5
 80050fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005102:	4858      	ldr	r0, [pc, #352]	; (8005264 <_vfiprintf_r+0x24c>)
 8005104:	f7fb f864 	bl	80001d0 <memchr>
 8005108:	9a04      	ldr	r2, [sp, #16]
 800510a:	b9d8      	cbnz	r0, 8005144 <_vfiprintf_r+0x12c>
 800510c:	06d1      	lsls	r1, r2, #27
 800510e:	bf44      	itt	mi
 8005110:	2320      	movmi	r3, #32
 8005112:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005116:	0713      	lsls	r3, r2, #28
 8005118:	bf44      	itt	mi
 800511a:	232b      	movmi	r3, #43	; 0x2b
 800511c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005120:	f89a 3000 	ldrb.w	r3, [sl]
 8005124:	2b2a      	cmp	r3, #42	; 0x2a
 8005126:	d015      	beq.n	8005154 <_vfiprintf_r+0x13c>
 8005128:	9a07      	ldr	r2, [sp, #28]
 800512a:	4654      	mov	r4, sl
 800512c:	2000      	movs	r0, #0
 800512e:	f04f 0c0a 	mov.w	ip, #10
 8005132:	4621      	mov	r1, r4
 8005134:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005138:	3b30      	subs	r3, #48	; 0x30
 800513a:	2b09      	cmp	r3, #9
 800513c:	d94e      	bls.n	80051dc <_vfiprintf_r+0x1c4>
 800513e:	b1b0      	cbz	r0, 800516e <_vfiprintf_r+0x156>
 8005140:	9207      	str	r2, [sp, #28]
 8005142:	e014      	b.n	800516e <_vfiprintf_r+0x156>
 8005144:	eba0 0308 	sub.w	r3, r0, r8
 8005148:	fa09 f303 	lsl.w	r3, r9, r3
 800514c:	4313      	orrs	r3, r2
 800514e:	9304      	str	r3, [sp, #16]
 8005150:	46a2      	mov	sl, r4
 8005152:	e7d2      	b.n	80050fa <_vfiprintf_r+0xe2>
 8005154:	9b03      	ldr	r3, [sp, #12]
 8005156:	1d19      	adds	r1, r3, #4
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	9103      	str	r1, [sp, #12]
 800515c:	2b00      	cmp	r3, #0
 800515e:	bfbb      	ittet	lt
 8005160:	425b      	neglt	r3, r3
 8005162:	f042 0202 	orrlt.w	r2, r2, #2
 8005166:	9307      	strge	r3, [sp, #28]
 8005168:	9307      	strlt	r3, [sp, #28]
 800516a:	bfb8      	it	lt
 800516c:	9204      	strlt	r2, [sp, #16]
 800516e:	7823      	ldrb	r3, [r4, #0]
 8005170:	2b2e      	cmp	r3, #46	; 0x2e
 8005172:	d10c      	bne.n	800518e <_vfiprintf_r+0x176>
 8005174:	7863      	ldrb	r3, [r4, #1]
 8005176:	2b2a      	cmp	r3, #42	; 0x2a
 8005178:	d135      	bne.n	80051e6 <_vfiprintf_r+0x1ce>
 800517a:	9b03      	ldr	r3, [sp, #12]
 800517c:	1d1a      	adds	r2, r3, #4
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	9203      	str	r2, [sp, #12]
 8005182:	2b00      	cmp	r3, #0
 8005184:	bfb8      	it	lt
 8005186:	f04f 33ff 	movlt.w	r3, #4294967295
 800518a:	3402      	adds	r4, #2
 800518c:	9305      	str	r3, [sp, #20]
 800518e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005274 <_vfiprintf_r+0x25c>
 8005192:	7821      	ldrb	r1, [r4, #0]
 8005194:	2203      	movs	r2, #3
 8005196:	4650      	mov	r0, sl
 8005198:	f7fb f81a 	bl	80001d0 <memchr>
 800519c:	b140      	cbz	r0, 80051b0 <_vfiprintf_r+0x198>
 800519e:	2340      	movs	r3, #64	; 0x40
 80051a0:	eba0 000a 	sub.w	r0, r0, sl
 80051a4:	fa03 f000 	lsl.w	r0, r3, r0
 80051a8:	9b04      	ldr	r3, [sp, #16]
 80051aa:	4303      	orrs	r3, r0
 80051ac:	3401      	adds	r4, #1
 80051ae:	9304      	str	r3, [sp, #16]
 80051b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051b4:	482c      	ldr	r0, [pc, #176]	; (8005268 <_vfiprintf_r+0x250>)
 80051b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051ba:	2206      	movs	r2, #6
 80051bc:	f7fb f808 	bl	80001d0 <memchr>
 80051c0:	2800      	cmp	r0, #0
 80051c2:	d03f      	beq.n	8005244 <_vfiprintf_r+0x22c>
 80051c4:	4b29      	ldr	r3, [pc, #164]	; (800526c <_vfiprintf_r+0x254>)
 80051c6:	bb1b      	cbnz	r3, 8005210 <_vfiprintf_r+0x1f8>
 80051c8:	9b03      	ldr	r3, [sp, #12]
 80051ca:	3307      	adds	r3, #7
 80051cc:	f023 0307 	bic.w	r3, r3, #7
 80051d0:	3308      	adds	r3, #8
 80051d2:	9303      	str	r3, [sp, #12]
 80051d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051d6:	443b      	add	r3, r7
 80051d8:	9309      	str	r3, [sp, #36]	; 0x24
 80051da:	e767      	b.n	80050ac <_vfiprintf_r+0x94>
 80051dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80051e0:	460c      	mov	r4, r1
 80051e2:	2001      	movs	r0, #1
 80051e4:	e7a5      	b.n	8005132 <_vfiprintf_r+0x11a>
 80051e6:	2300      	movs	r3, #0
 80051e8:	3401      	adds	r4, #1
 80051ea:	9305      	str	r3, [sp, #20]
 80051ec:	4619      	mov	r1, r3
 80051ee:	f04f 0c0a 	mov.w	ip, #10
 80051f2:	4620      	mov	r0, r4
 80051f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051f8:	3a30      	subs	r2, #48	; 0x30
 80051fa:	2a09      	cmp	r2, #9
 80051fc:	d903      	bls.n	8005206 <_vfiprintf_r+0x1ee>
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0c5      	beq.n	800518e <_vfiprintf_r+0x176>
 8005202:	9105      	str	r1, [sp, #20]
 8005204:	e7c3      	b.n	800518e <_vfiprintf_r+0x176>
 8005206:	fb0c 2101 	mla	r1, ip, r1, r2
 800520a:	4604      	mov	r4, r0
 800520c:	2301      	movs	r3, #1
 800520e:	e7f0      	b.n	80051f2 <_vfiprintf_r+0x1da>
 8005210:	ab03      	add	r3, sp, #12
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	462a      	mov	r2, r5
 8005216:	4b16      	ldr	r3, [pc, #88]	; (8005270 <_vfiprintf_r+0x258>)
 8005218:	a904      	add	r1, sp, #16
 800521a:	4630      	mov	r0, r6
 800521c:	f3af 8000 	nop.w
 8005220:	4607      	mov	r7, r0
 8005222:	1c78      	adds	r0, r7, #1
 8005224:	d1d6      	bne.n	80051d4 <_vfiprintf_r+0x1bc>
 8005226:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005228:	07d9      	lsls	r1, r3, #31
 800522a:	d405      	bmi.n	8005238 <_vfiprintf_r+0x220>
 800522c:	89ab      	ldrh	r3, [r5, #12]
 800522e:	059a      	lsls	r2, r3, #22
 8005230:	d402      	bmi.n	8005238 <_vfiprintf_r+0x220>
 8005232:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005234:	f000 fc45 	bl	8005ac2 <__retarget_lock_release_recursive>
 8005238:	89ab      	ldrh	r3, [r5, #12]
 800523a:	065b      	lsls	r3, r3, #25
 800523c:	f53f af12 	bmi.w	8005064 <_vfiprintf_r+0x4c>
 8005240:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005242:	e711      	b.n	8005068 <_vfiprintf_r+0x50>
 8005244:	ab03      	add	r3, sp, #12
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	462a      	mov	r2, r5
 800524a:	4b09      	ldr	r3, [pc, #36]	; (8005270 <_vfiprintf_r+0x258>)
 800524c:	a904      	add	r1, sp, #16
 800524e:	4630      	mov	r0, r6
 8005250:	f000 f880 	bl	8005354 <_printf_i>
 8005254:	e7e4      	b.n	8005220 <_vfiprintf_r+0x208>
 8005256:	bf00      	nop
 8005258:	08007f94 	.word	0x08007f94
 800525c:	08007fb4 	.word	0x08007fb4
 8005260:	08007f74 	.word	0x08007f74
 8005264:	08007f40 	.word	0x08007f40
 8005268:	08007f4a 	.word	0x08007f4a
 800526c:	00000000 	.word	0x00000000
 8005270:	08004ff3 	.word	0x08004ff3
 8005274:	08007f46 	.word	0x08007f46

08005278 <_printf_common>:
 8005278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800527c:	4616      	mov	r6, r2
 800527e:	4699      	mov	r9, r3
 8005280:	688a      	ldr	r2, [r1, #8]
 8005282:	690b      	ldr	r3, [r1, #16]
 8005284:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005288:	4293      	cmp	r3, r2
 800528a:	bfb8      	it	lt
 800528c:	4613      	movlt	r3, r2
 800528e:	6033      	str	r3, [r6, #0]
 8005290:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005294:	4607      	mov	r7, r0
 8005296:	460c      	mov	r4, r1
 8005298:	b10a      	cbz	r2, 800529e <_printf_common+0x26>
 800529a:	3301      	adds	r3, #1
 800529c:	6033      	str	r3, [r6, #0]
 800529e:	6823      	ldr	r3, [r4, #0]
 80052a0:	0699      	lsls	r1, r3, #26
 80052a2:	bf42      	ittt	mi
 80052a4:	6833      	ldrmi	r3, [r6, #0]
 80052a6:	3302      	addmi	r3, #2
 80052a8:	6033      	strmi	r3, [r6, #0]
 80052aa:	6825      	ldr	r5, [r4, #0]
 80052ac:	f015 0506 	ands.w	r5, r5, #6
 80052b0:	d106      	bne.n	80052c0 <_printf_common+0x48>
 80052b2:	f104 0a19 	add.w	sl, r4, #25
 80052b6:	68e3      	ldr	r3, [r4, #12]
 80052b8:	6832      	ldr	r2, [r6, #0]
 80052ba:	1a9b      	subs	r3, r3, r2
 80052bc:	42ab      	cmp	r3, r5
 80052be:	dc26      	bgt.n	800530e <_printf_common+0x96>
 80052c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052c4:	1e13      	subs	r3, r2, #0
 80052c6:	6822      	ldr	r2, [r4, #0]
 80052c8:	bf18      	it	ne
 80052ca:	2301      	movne	r3, #1
 80052cc:	0692      	lsls	r2, r2, #26
 80052ce:	d42b      	bmi.n	8005328 <_printf_common+0xb0>
 80052d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052d4:	4649      	mov	r1, r9
 80052d6:	4638      	mov	r0, r7
 80052d8:	47c0      	blx	r8
 80052da:	3001      	adds	r0, #1
 80052dc:	d01e      	beq.n	800531c <_printf_common+0xa4>
 80052de:	6823      	ldr	r3, [r4, #0]
 80052e0:	68e5      	ldr	r5, [r4, #12]
 80052e2:	6832      	ldr	r2, [r6, #0]
 80052e4:	f003 0306 	and.w	r3, r3, #6
 80052e8:	2b04      	cmp	r3, #4
 80052ea:	bf08      	it	eq
 80052ec:	1aad      	subeq	r5, r5, r2
 80052ee:	68a3      	ldr	r3, [r4, #8]
 80052f0:	6922      	ldr	r2, [r4, #16]
 80052f2:	bf0c      	ite	eq
 80052f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052f8:	2500      	movne	r5, #0
 80052fa:	4293      	cmp	r3, r2
 80052fc:	bfc4      	itt	gt
 80052fe:	1a9b      	subgt	r3, r3, r2
 8005300:	18ed      	addgt	r5, r5, r3
 8005302:	2600      	movs	r6, #0
 8005304:	341a      	adds	r4, #26
 8005306:	42b5      	cmp	r5, r6
 8005308:	d11a      	bne.n	8005340 <_printf_common+0xc8>
 800530a:	2000      	movs	r0, #0
 800530c:	e008      	b.n	8005320 <_printf_common+0xa8>
 800530e:	2301      	movs	r3, #1
 8005310:	4652      	mov	r2, sl
 8005312:	4649      	mov	r1, r9
 8005314:	4638      	mov	r0, r7
 8005316:	47c0      	blx	r8
 8005318:	3001      	adds	r0, #1
 800531a:	d103      	bne.n	8005324 <_printf_common+0xac>
 800531c:	f04f 30ff 	mov.w	r0, #4294967295
 8005320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005324:	3501      	adds	r5, #1
 8005326:	e7c6      	b.n	80052b6 <_printf_common+0x3e>
 8005328:	18e1      	adds	r1, r4, r3
 800532a:	1c5a      	adds	r2, r3, #1
 800532c:	2030      	movs	r0, #48	; 0x30
 800532e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005332:	4422      	add	r2, r4
 8005334:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005338:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800533c:	3302      	adds	r3, #2
 800533e:	e7c7      	b.n	80052d0 <_printf_common+0x58>
 8005340:	2301      	movs	r3, #1
 8005342:	4622      	mov	r2, r4
 8005344:	4649      	mov	r1, r9
 8005346:	4638      	mov	r0, r7
 8005348:	47c0      	blx	r8
 800534a:	3001      	adds	r0, #1
 800534c:	d0e6      	beq.n	800531c <_printf_common+0xa4>
 800534e:	3601      	adds	r6, #1
 8005350:	e7d9      	b.n	8005306 <_printf_common+0x8e>
	...

08005354 <_printf_i>:
 8005354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005358:	7e0f      	ldrb	r7, [r1, #24]
 800535a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800535c:	2f78      	cmp	r7, #120	; 0x78
 800535e:	4691      	mov	r9, r2
 8005360:	4680      	mov	r8, r0
 8005362:	460c      	mov	r4, r1
 8005364:	469a      	mov	sl, r3
 8005366:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800536a:	d807      	bhi.n	800537c <_printf_i+0x28>
 800536c:	2f62      	cmp	r7, #98	; 0x62
 800536e:	d80a      	bhi.n	8005386 <_printf_i+0x32>
 8005370:	2f00      	cmp	r7, #0
 8005372:	f000 80d8 	beq.w	8005526 <_printf_i+0x1d2>
 8005376:	2f58      	cmp	r7, #88	; 0x58
 8005378:	f000 80a3 	beq.w	80054c2 <_printf_i+0x16e>
 800537c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005380:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005384:	e03a      	b.n	80053fc <_printf_i+0xa8>
 8005386:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800538a:	2b15      	cmp	r3, #21
 800538c:	d8f6      	bhi.n	800537c <_printf_i+0x28>
 800538e:	a101      	add	r1, pc, #4	; (adr r1, 8005394 <_printf_i+0x40>)
 8005390:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005394:	080053ed 	.word	0x080053ed
 8005398:	08005401 	.word	0x08005401
 800539c:	0800537d 	.word	0x0800537d
 80053a0:	0800537d 	.word	0x0800537d
 80053a4:	0800537d 	.word	0x0800537d
 80053a8:	0800537d 	.word	0x0800537d
 80053ac:	08005401 	.word	0x08005401
 80053b0:	0800537d 	.word	0x0800537d
 80053b4:	0800537d 	.word	0x0800537d
 80053b8:	0800537d 	.word	0x0800537d
 80053bc:	0800537d 	.word	0x0800537d
 80053c0:	0800550d 	.word	0x0800550d
 80053c4:	08005431 	.word	0x08005431
 80053c8:	080054ef 	.word	0x080054ef
 80053cc:	0800537d 	.word	0x0800537d
 80053d0:	0800537d 	.word	0x0800537d
 80053d4:	0800552f 	.word	0x0800552f
 80053d8:	0800537d 	.word	0x0800537d
 80053dc:	08005431 	.word	0x08005431
 80053e0:	0800537d 	.word	0x0800537d
 80053e4:	0800537d 	.word	0x0800537d
 80053e8:	080054f7 	.word	0x080054f7
 80053ec:	682b      	ldr	r3, [r5, #0]
 80053ee:	1d1a      	adds	r2, r3, #4
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	602a      	str	r2, [r5, #0]
 80053f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053fc:	2301      	movs	r3, #1
 80053fe:	e0a3      	b.n	8005548 <_printf_i+0x1f4>
 8005400:	6820      	ldr	r0, [r4, #0]
 8005402:	6829      	ldr	r1, [r5, #0]
 8005404:	0606      	lsls	r6, r0, #24
 8005406:	f101 0304 	add.w	r3, r1, #4
 800540a:	d50a      	bpl.n	8005422 <_printf_i+0xce>
 800540c:	680e      	ldr	r6, [r1, #0]
 800540e:	602b      	str	r3, [r5, #0]
 8005410:	2e00      	cmp	r6, #0
 8005412:	da03      	bge.n	800541c <_printf_i+0xc8>
 8005414:	232d      	movs	r3, #45	; 0x2d
 8005416:	4276      	negs	r6, r6
 8005418:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800541c:	485e      	ldr	r0, [pc, #376]	; (8005598 <_printf_i+0x244>)
 800541e:	230a      	movs	r3, #10
 8005420:	e019      	b.n	8005456 <_printf_i+0x102>
 8005422:	680e      	ldr	r6, [r1, #0]
 8005424:	602b      	str	r3, [r5, #0]
 8005426:	f010 0f40 	tst.w	r0, #64	; 0x40
 800542a:	bf18      	it	ne
 800542c:	b236      	sxthne	r6, r6
 800542e:	e7ef      	b.n	8005410 <_printf_i+0xbc>
 8005430:	682b      	ldr	r3, [r5, #0]
 8005432:	6820      	ldr	r0, [r4, #0]
 8005434:	1d19      	adds	r1, r3, #4
 8005436:	6029      	str	r1, [r5, #0]
 8005438:	0601      	lsls	r1, r0, #24
 800543a:	d501      	bpl.n	8005440 <_printf_i+0xec>
 800543c:	681e      	ldr	r6, [r3, #0]
 800543e:	e002      	b.n	8005446 <_printf_i+0xf2>
 8005440:	0646      	lsls	r6, r0, #25
 8005442:	d5fb      	bpl.n	800543c <_printf_i+0xe8>
 8005444:	881e      	ldrh	r6, [r3, #0]
 8005446:	4854      	ldr	r0, [pc, #336]	; (8005598 <_printf_i+0x244>)
 8005448:	2f6f      	cmp	r7, #111	; 0x6f
 800544a:	bf0c      	ite	eq
 800544c:	2308      	moveq	r3, #8
 800544e:	230a      	movne	r3, #10
 8005450:	2100      	movs	r1, #0
 8005452:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005456:	6865      	ldr	r5, [r4, #4]
 8005458:	60a5      	str	r5, [r4, #8]
 800545a:	2d00      	cmp	r5, #0
 800545c:	bfa2      	ittt	ge
 800545e:	6821      	ldrge	r1, [r4, #0]
 8005460:	f021 0104 	bicge.w	r1, r1, #4
 8005464:	6021      	strge	r1, [r4, #0]
 8005466:	b90e      	cbnz	r6, 800546c <_printf_i+0x118>
 8005468:	2d00      	cmp	r5, #0
 800546a:	d04d      	beq.n	8005508 <_printf_i+0x1b4>
 800546c:	4615      	mov	r5, r2
 800546e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005472:	fb03 6711 	mls	r7, r3, r1, r6
 8005476:	5dc7      	ldrb	r7, [r0, r7]
 8005478:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800547c:	4637      	mov	r7, r6
 800547e:	42bb      	cmp	r3, r7
 8005480:	460e      	mov	r6, r1
 8005482:	d9f4      	bls.n	800546e <_printf_i+0x11a>
 8005484:	2b08      	cmp	r3, #8
 8005486:	d10b      	bne.n	80054a0 <_printf_i+0x14c>
 8005488:	6823      	ldr	r3, [r4, #0]
 800548a:	07de      	lsls	r6, r3, #31
 800548c:	d508      	bpl.n	80054a0 <_printf_i+0x14c>
 800548e:	6923      	ldr	r3, [r4, #16]
 8005490:	6861      	ldr	r1, [r4, #4]
 8005492:	4299      	cmp	r1, r3
 8005494:	bfde      	ittt	le
 8005496:	2330      	movle	r3, #48	; 0x30
 8005498:	f805 3c01 	strble.w	r3, [r5, #-1]
 800549c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80054a0:	1b52      	subs	r2, r2, r5
 80054a2:	6122      	str	r2, [r4, #16]
 80054a4:	f8cd a000 	str.w	sl, [sp]
 80054a8:	464b      	mov	r3, r9
 80054aa:	aa03      	add	r2, sp, #12
 80054ac:	4621      	mov	r1, r4
 80054ae:	4640      	mov	r0, r8
 80054b0:	f7ff fee2 	bl	8005278 <_printf_common>
 80054b4:	3001      	adds	r0, #1
 80054b6:	d14c      	bne.n	8005552 <_printf_i+0x1fe>
 80054b8:	f04f 30ff 	mov.w	r0, #4294967295
 80054bc:	b004      	add	sp, #16
 80054be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054c2:	4835      	ldr	r0, [pc, #212]	; (8005598 <_printf_i+0x244>)
 80054c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80054c8:	6829      	ldr	r1, [r5, #0]
 80054ca:	6823      	ldr	r3, [r4, #0]
 80054cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80054d0:	6029      	str	r1, [r5, #0]
 80054d2:	061d      	lsls	r5, r3, #24
 80054d4:	d514      	bpl.n	8005500 <_printf_i+0x1ac>
 80054d6:	07df      	lsls	r7, r3, #31
 80054d8:	bf44      	itt	mi
 80054da:	f043 0320 	orrmi.w	r3, r3, #32
 80054de:	6023      	strmi	r3, [r4, #0]
 80054e0:	b91e      	cbnz	r6, 80054ea <_printf_i+0x196>
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	f023 0320 	bic.w	r3, r3, #32
 80054e8:	6023      	str	r3, [r4, #0]
 80054ea:	2310      	movs	r3, #16
 80054ec:	e7b0      	b.n	8005450 <_printf_i+0xfc>
 80054ee:	6823      	ldr	r3, [r4, #0]
 80054f0:	f043 0320 	orr.w	r3, r3, #32
 80054f4:	6023      	str	r3, [r4, #0]
 80054f6:	2378      	movs	r3, #120	; 0x78
 80054f8:	4828      	ldr	r0, [pc, #160]	; (800559c <_printf_i+0x248>)
 80054fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054fe:	e7e3      	b.n	80054c8 <_printf_i+0x174>
 8005500:	0659      	lsls	r1, r3, #25
 8005502:	bf48      	it	mi
 8005504:	b2b6      	uxthmi	r6, r6
 8005506:	e7e6      	b.n	80054d6 <_printf_i+0x182>
 8005508:	4615      	mov	r5, r2
 800550a:	e7bb      	b.n	8005484 <_printf_i+0x130>
 800550c:	682b      	ldr	r3, [r5, #0]
 800550e:	6826      	ldr	r6, [r4, #0]
 8005510:	6961      	ldr	r1, [r4, #20]
 8005512:	1d18      	adds	r0, r3, #4
 8005514:	6028      	str	r0, [r5, #0]
 8005516:	0635      	lsls	r5, r6, #24
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	d501      	bpl.n	8005520 <_printf_i+0x1cc>
 800551c:	6019      	str	r1, [r3, #0]
 800551e:	e002      	b.n	8005526 <_printf_i+0x1d2>
 8005520:	0670      	lsls	r0, r6, #25
 8005522:	d5fb      	bpl.n	800551c <_printf_i+0x1c8>
 8005524:	8019      	strh	r1, [r3, #0]
 8005526:	2300      	movs	r3, #0
 8005528:	6123      	str	r3, [r4, #16]
 800552a:	4615      	mov	r5, r2
 800552c:	e7ba      	b.n	80054a4 <_printf_i+0x150>
 800552e:	682b      	ldr	r3, [r5, #0]
 8005530:	1d1a      	adds	r2, r3, #4
 8005532:	602a      	str	r2, [r5, #0]
 8005534:	681d      	ldr	r5, [r3, #0]
 8005536:	6862      	ldr	r2, [r4, #4]
 8005538:	2100      	movs	r1, #0
 800553a:	4628      	mov	r0, r5
 800553c:	f7fa fe48 	bl	80001d0 <memchr>
 8005540:	b108      	cbz	r0, 8005546 <_printf_i+0x1f2>
 8005542:	1b40      	subs	r0, r0, r5
 8005544:	6060      	str	r0, [r4, #4]
 8005546:	6863      	ldr	r3, [r4, #4]
 8005548:	6123      	str	r3, [r4, #16]
 800554a:	2300      	movs	r3, #0
 800554c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005550:	e7a8      	b.n	80054a4 <_printf_i+0x150>
 8005552:	6923      	ldr	r3, [r4, #16]
 8005554:	462a      	mov	r2, r5
 8005556:	4649      	mov	r1, r9
 8005558:	4640      	mov	r0, r8
 800555a:	47d0      	blx	sl
 800555c:	3001      	adds	r0, #1
 800555e:	d0ab      	beq.n	80054b8 <_printf_i+0x164>
 8005560:	6823      	ldr	r3, [r4, #0]
 8005562:	079b      	lsls	r3, r3, #30
 8005564:	d413      	bmi.n	800558e <_printf_i+0x23a>
 8005566:	68e0      	ldr	r0, [r4, #12]
 8005568:	9b03      	ldr	r3, [sp, #12]
 800556a:	4298      	cmp	r0, r3
 800556c:	bfb8      	it	lt
 800556e:	4618      	movlt	r0, r3
 8005570:	e7a4      	b.n	80054bc <_printf_i+0x168>
 8005572:	2301      	movs	r3, #1
 8005574:	4632      	mov	r2, r6
 8005576:	4649      	mov	r1, r9
 8005578:	4640      	mov	r0, r8
 800557a:	47d0      	blx	sl
 800557c:	3001      	adds	r0, #1
 800557e:	d09b      	beq.n	80054b8 <_printf_i+0x164>
 8005580:	3501      	adds	r5, #1
 8005582:	68e3      	ldr	r3, [r4, #12]
 8005584:	9903      	ldr	r1, [sp, #12]
 8005586:	1a5b      	subs	r3, r3, r1
 8005588:	42ab      	cmp	r3, r5
 800558a:	dcf2      	bgt.n	8005572 <_printf_i+0x21e>
 800558c:	e7eb      	b.n	8005566 <_printf_i+0x212>
 800558e:	2500      	movs	r5, #0
 8005590:	f104 0619 	add.w	r6, r4, #25
 8005594:	e7f5      	b.n	8005582 <_printf_i+0x22e>
 8005596:	bf00      	nop
 8005598:	08007f51 	.word	0x08007f51
 800559c:	08007f62 	.word	0x08007f62

080055a0 <_sbrk_r>:
 80055a0:	b538      	push	{r3, r4, r5, lr}
 80055a2:	4d06      	ldr	r5, [pc, #24]	; (80055bc <_sbrk_r+0x1c>)
 80055a4:	2300      	movs	r3, #0
 80055a6:	4604      	mov	r4, r0
 80055a8:	4608      	mov	r0, r1
 80055aa:	602b      	str	r3, [r5, #0]
 80055ac:	f7fd f9b6 	bl	800291c <_sbrk>
 80055b0:	1c43      	adds	r3, r0, #1
 80055b2:	d102      	bne.n	80055ba <_sbrk_r+0x1a>
 80055b4:	682b      	ldr	r3, [r5, #0]
 80055b6:	b103      	cbz	r3, 80055ba <_sbrk_r+0x1a>
 80055b8:	6023      	str	r3, [r4, #0]
 80055ba:	bd38      	pop	{r3, r4, r5, pc}
 80055bc:	20000824 	.word	0x20000824

080055c0 <__swbuf_r>:
 80055c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c2:	460e      	mov	r6, r1
 80055c4:	4614      	mov	r4, r2
 80055c6:	4605      	mov	r5, r0
 80055c8:	b118      	cbz	r0, 80055d2 <__swbuf_r+0x12>
 80055ca:	6983      	ldr	r3, [r0, #24]
 80055cc:	b90b      	cbnz	r3, 80055d2 <__swbuf_r+0x12>
 80055ce:	f000 f9d9 	bl	8005984 <__sinit>
 80055d2:	4b21      	ldr	r3, [pc, #132]	; (8005658 <__swbuf_r+0x98>)
 80055d4:	429c      	cmp	r4, r3
 80055d6:	d12b      	bne.n	8005630 <__swbuf_r+0x70>
 80055d8:	686c      	ldr	r4, [r5, #4]
 80055da:	69a3      	ldr	r3, [r4, #24]
 80055dc:	60a3      	str	r3, [r4, #8]
 80055de:	89a3      	ldrh	r3, [r4, #12]
 80055e0:	071a      	lsls	r2, r3, #28
 80055e2:	d52f      	bpl.n	8005644 <__swbuf_r+0x84>
 80055e4:	6923      	ldr	r3, [r4, #16]
 80055e6:	b36b      	cbz	r3, 8005644 <__swbuf_r+0x84>
 80055e8:	6923      	ldr	r3, [r4, #16]
 80055ea:	6820      	ldr	r0, [r4, #0]
 80055ec:	1ac0      	subs	r0, r0, r3
 80055ee:	6963      	ldr	r3, [r4, #20]
 80055f0:	b2f6      	uxtb	r6, r6
 80055f2:	4283      	cmp	r3, r0
 80055f4:	4637      	mov	r7, r6
 80055f6:	dc04      	bgt.n	8005602 <__swbuf_r+0x42>
 80055f8:	4621      	mov	r1, r4
 80055fa:	4628      	mov	r0, r5
 80055fc:	f000 f92e 	bl	800585c <_fflush_r>
 8005600:	bb30      	cbnz	r0, 8005650 <__swbuf_r+0x90>
 8005602:	68a3      	ldr	r3, [r4, #8]
 8005604:	3b01      	subs	r3, #1
 8005606:	60a3      	str	r3, [r4, #8]
 8005608:	6823      	ldr	r3, [r4, #0]
 800560a:	1c5a      	adds	r2, r3, #1
 800560c:	6022      	str	r2, [r4, #0]
 800560e:	701e      	strb	r6, [r3, #0]
 8005610:	6963      	ldr	r3, [r4, #20]
 8005612:	3001      	adds	r0, #1
 8005614:	4283      	cmp	r3, r0
 8005616:	d004      	beq.n	8005622 <__swbuf_r+0x62>
 8005618:	89a3      	ldrh	r3, [r4, #12]
 800561a:	07db      	lsls	r3, r3, #31
 800561c:	d506      	bpl.n	800562c <__swbuf_r+0x6c>
 800561e:	2e0a      	cmp	r6, #10
 8005620:	d104      	bne.n	800562c <__swbuf_r+0x6c>
 8005622:	4621      	mov	r1, r4
 8005624:	4628      	mov	r0, r5
 8005626:	f000 f919 	bl	800585c <_fflush_r>
 800562a:	b988      	cbnz	r0, 8005650 <__swbuf_r+0x90>
 800562c:	4638      	mov	r0, r7
 800562e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005630:	4b0a      	ldr	r3, [pc, #40]	; (800565c <__swbuf_r+0x9c>)
 8005632:	429c      	cmp	r4, r3
 8005634:	d101      	bne.n	800563a <__swbuf_r+0x7a>
 8005636:	68ac      	ldr	r4, [r5, #8]
 8005638:	e7cf      	b.n	80055da <__swbuf_r+0x1a>
 800563a:	4b09      	ldr	r3, [pc, #36]	; (8005660 <__swbuf_r+0xa0>)
 800563c:	429c      	cmp	r4, r3
 800563e:	bf08      	it	eq
 8005640:	68ec      	ldreq	r4, [r5, #12]
 8005642:	e7ca      	b.n	80055da <__swbuf_r+0x1a>
 8005644:	4621      	mov	r1, r4
 8005646:	4628      	mov	r0, r5
 8005648:	f000 f80c 	bl	8005664 <__swsetup_r>
 800564c:	2800      	cmp	r0, #0
 800564e:	d0cb      	beq.n	80055e8 <__swbuf_r+0x28>
 8005650:	f04f 37ff 	mov.w	r7, #4294967295
 8005654:	e7ea      	b.n	800562c <__swbuf_r+0x6c>
 8005656:	bf00      	nop
 8005658:	08007f94 	.word	0x08007f94
 800565c:	08007fb4 	.word	0x08007fb4
 8005660:	08007f74 	.word	0x08007f74

08005664 <__swsetup_r>:
 8005664:	4b32      	ldr	r3, [pc, #200]	; (8005730 <__swsetup_r+0xcc>)
 8005666:	b570      	push	{r4, r5, r6, lr}
 8005668:	681d      	ldr	r5, [r3, #0]
 800566a:	4606      	mov	r6, r0
 800566c:	460c      	mov	r4, r1
 800566e:	b125      	cbz	r5, 800567a <__swsetup_r+0x16>
 8005670:	69ab      	ldr	r3, [r5, #24]
 8005672:	b913      	cbnz	r3, 800567a <__swsetup_r+0x16>
 8005674:	4628      	mov	r0, r5
 8005676:	f000 f985 	bl	8005984 <__sinit>
 800567a:	4b2e      	ldr	r3, [pc, #184]	; (8005734 <__swsetup_r+0xd0>)
 800567c:	429c      	cmp	r4, r3
 800567e:	d10f      	bne.n	80056a0 <__swsetup_r+0x3c>
 8005680:	686c      	ldr	r4, [r5, #4]
 8005682:	89a3      	ldrh	r3, [r4, #12]
 8005684:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005688:	0719      	lsls	r1, r3, #28
 800568a:	d42c      	bmi.n	80056e6 <__swsetup_r+0x82>
 800568c:	06dd      	lsls	r5, r3, #27
 800568e:	d411      	bmi.n	80056b4 <__swsetup_r+0x50>
 8005690:	2309      	movs	r3, #9
 8005692:	6033      	str	r3, [r6, #0]
 8005694:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005698:	81a3      	strh	r3, [r4, #12]
 800569a:	f04f 30ff 	mov.w	r0, #4294967295
 800569e:	e03e      	b.n	800571e <__swsetup_r+0xba>
 80056a0:	4b25      	ldr	r3, [pc, #148]	; (8005738 <__swsetup_r+0xd4>)
 80056a2:	429c      	cmp	r4, r3
 80056a4:	d101      	bne.n	80056aa <__swsetup_r+0x46>
 80056a6:	68ac      	ldr	r4, [r5, #8]
 80056a8:	e7eb      	b.n	8005682 <__swsetup_r+0x1e>
 80056aa:	4b24      	ldr	r3, [pc, #144]	; (800573c <__swsetup_r+0xd8>)
 80056ac:	429c      	cmp	r4, r3
 80056ae:	bf08      	it	eq
 80056b0:	68ec      	ldreq	r4, [r5, #12]
 80056b2:	e7e6      	b.n	8005682 <__swsetup_r+0x1e>
 80056b4:	0758      	lsls	r0, r3, #29
 80056b6:	d512      	bpl.n	80056de <__swsetup_r+0x7a>
 80056b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056ba:	b141      	cbz	r1, 80056ce <__swsetup_r+0x6a>
 80056bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056c0:	4299      	cmp	r1, r3
 80056c2:	d002      	beq.n	80056ca <__swsetup_r+0x66>
 80056c4:	4630      	mov	r0, r6
 80056c6:	f7ff fb9d 	bl	8004e04 <_free_r>
 80056ca:	2300      	movs	r3, #0
 80056cc:	6363      	str	r3, [r4, #52]	; 0x34
 80056ce:	89a3      	ldrh	r3, [r4, #12]
 80056d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80056d4:	81a3      	strh	r3, [r4, #12]
 80056d6:	2300      	movs	r3, #0
 80056d8:	6063      	str	r3, [r4, #4]
 80056da:	6923      	ldr	r3, [r4, #16]
 80056dc:	6023      	str	r3, [r4, #0]
 80056de:	89a3      	ldrh	r3, [r4, #12]
 80056e0:	f043 0308 	orr.w	r3, r3, #8
 80056e4:	81a3      	strh	r3, [r4, #12]
 80056e6:	6923      	ldr	r3, [r4, #16]
 80056e8:	b94b      	cbnz	r3, 80056fe <__swsetup_r+0x9a>
 80056ea:	89a3      	ldrh	r3, [r4, #12]
 80056ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80056f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056f4:	d003      	beq.n	80056fe <__swsetup_r+0x9a>
 80056f6:	4621      	mov	r1, r4
 80056f8:	4630      	mov	r0, r6
 80056fa:	f000 fa09 	bl	8005b10 <__smakebuf_r>
 80056fe:	89a0      	ldrh	r0, [r4, #12]
 8005700:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005704:	f010 0301 	ands.w	r3, r0, #1
 8005708:	d00a      	beq.n	8005720 <__swsetup_r+0xbc>
 800570a:	2300      	movs	r3, #0
 800570c:	60a3      	str	r3, [r4, #8]
 800570e:	6963      	ldr	r3, [r4, #20]
 8005710:	425b      	negs	r3, r3
 8005712:	61a3      	str	r3, [r4, #24]
 8005714:	6923      	ldr	r3, [r4, #16]
 8005716:	b943      	cbnz	r3, 800572a <__swsetup_r+0xc6>
 8005718:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800571c:	d1ba      	bne.n	8005694 <__swsetup_r+0x30>
 800571e:	bd70      	pop	{r4, r5, r6, pc}
 8005720:	0781      	lsls	r1, r0, #30
 8005722:	bf58      	it	pl
 8005724:	6963      	ldrpl	r3, [r4, #20]
 8005726:	60a3      	str	r3, [r4, #8]
 8005728:	e7f4      	b.n	8005714 <__swsetup_r+0xb0>
 800572a:	2000      	movs	r0, #0
 800572c:	e7f7      	b.n	800571e <__swsetup_r+0xba>
 800572e:	bf00      	nop
 8005730:	20000430 	.word	0x20000430
 8005734:	08007f94 	.word	0x08007f94
 8005738:	08007fb4 	.word	0x08007fb4
 800573c:	08007f74 	.word	0x08007f74

08005740 <abort>:
 8005740:	b508      	push	{r3, lr}
 8005742:	2006      	movs	r0, #6
 8005744:	f000 fa58 	bl	8005bf8 <raise>
 8005748:	2001      	movs	r0, #1
 800574a:	f7fd f8b7 	bl	80028bc <_exit>
	...

08005750 <__sflush_r>:
 8005750:	898a      	ldrh	r2, [r1, #12]
 8005752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005756:	4605      	mov	r5, r0
 8005758:	0710      	lsls	r0, r2, #28
 800575a:	460c      	mov	r4, r1
 800575c:	d458      	bmi.n	8005810 <__sflush_r+0xc0>
 800575e:	684b      	ldr	r3, [r1, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	dc05      	bgt.n	8005770 <__sflush_r+0x20>
 8005764:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005766:	2b00      	cmp	r3, #0
 8005768:	dc02      	bgt.n	8005770 <__sflush_r+0x20>
 800576a:	2000      	movs	r0, #0
 800576c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005770:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005772:	2e00      	cmp	r6, #0
 8005774:	d0f9      	beq.n	800576a <__sflush_r+0x1a>
 8005776:	2300      	movs	r3, #0
 8005778:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800577c:	682f      	ldr	r7, [r5, #0]
 800577e:	602b      	str	r3, [r5, #0]
 8005780:	d032      	beq.n	80057e8 <__sflush_r+0x98>
 8005782:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005784:	89a3      	ldrh	r3, [r4, #12]
 8005786:	075a      	lsls	r2, r3, #29
 8005788:	d505      	bpl.n	8005796 <__sflush_r+0x46>
 800578a:	6863      	ldr	r3, [r4, #4]
 800578c:	1ac0      	subs	r0, r0, r3
 800578e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005790:	b10b      	cbz	r3, 8005796 <__sflush_r+0x46>
 8005792:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005794:	1ac0      	subs	r0, r0, r3
 8005796:	2300      	movs	r3, #0
 8005798:	4602      	mov	r2, r0
 800579a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800579c:	6a21      	ldr	r1, [r4, #32]
 800579e:	4628      	mov	r0, r5
 80057a0:	47b0      	blx	r6
 80057a2:	1c43      	adds	r3, r0, #1
 80057a4:	89a3      	ldrh	r3, [r4, #12]
 80057a6:	d106      	bne.n	80057b6 <__sflush_r+0x66>
 80057a8:	6829      	ldr	r1, [r5, #0]
 80057aa:	291d      	cmp	r1, #29
 80057ac:	d82c      	bhi.n	8005808 <__sflush_r+0xb8>
 80057ae:	4a2a      	ldr	r2, [pc, #168]	; (8005858 <__sflush_r+0x108>)
 80057b0:	40ca      	lsrs	r2, r1
 80057b2:	07d6      	lsls	r6, r2, #31
 80057b4:	d528      	bpl.n	8005808 <__sflush_r+0xb8>
 80057b6:	2200      	movs	r2, #0
 80057b8:	6062      	str	r2, [r4, #4]
 80057ba:	04d9      	lsls	r1, r3, #19
 80057bc:	6922      	ldr	r2, [r4, #16]
 80057be:	6022      	str	r2, [r4, #0]
 80057c0:	d504      	bpl.n	80057cc <__sflush_r+0x7c>
 80057c2:	1c42      	adds	r2, r0, #1
 80057c4:	d101      	bne.n	80057ca <__sflush_r+0x7a>
 80057c6:	682b      	ldr	r3, [r5, #0]
 80057c8:	b903      	cbnz	r3, 80057cc <__sflush_r+0x7c>
 80057ca:	6560      	str	r0, [r4, #84]	; 0x54
 80057cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057ce:	602f      	str	r7, [r5, #0]
 80057d0:	2900      	cmp	r1, #0
 80057d2:	d0ca      	beq.n	800576a <__sflush_r+0x1a>
 80057d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057d8:	4299      	cmp	r1, r3
 80057da:	d002      	beq.n	80057e2 <__sflush_r+0x92>
 80057dc:	4628      	mov	r0, r5
 80057de:	f7ff fb11 	bl	8004e04 <_free_r>
 80057e2:	2000      	movs	r0, #0
 80057e4:	6360      	str	r0, [r4, #52]	; 0x34
 80057e6:	e7c1      	b.n	800576c <__sflush_r+0x1c>
 80057e8:	6a21      	ldr	r1, [r4, #32]
 80057ea:	2301      	movs	r3, #1
 80057ec:	4628      	mov	r0, r5
 80057ee:	47b0      	blx	r6
 80057f0:	1c41      	adds	r1, r0, #1
 80057f2:	d1c7      	bne.n	8005784 <__sflush_r+0x34>
 80057f4:	682b      	ldr	r3, [r5, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d0c4      	beq.n	8005784 <__sflush_r+0x34>
 80057fa:	2b1d      	cmp	r3, #29
 80057fc:	d001      	beq.n	8005802 <__sflush_r+0xb2>
 80057fe:	2b16      	cmp	r3, #22
 8005800:	d101      	bne.n	8005806 <__sflush_r+0xb6>
 8005802:	602f      	str	r7, [r5, #0]
 8005804:	e7b1      	b.n	800576a <__sflush_r+0x1a>
 8005806:	89a3      	ldrh	r3, [r4, #12]
 8005808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800580c:	81a3      	strh	r3, [r4, #12]
 800580e:	e7ad      	b.n	800576c <__sflush_r+0x1c>
 8005810:	690f      	ldr	r7, [r1, #16]
 8005812:	2f00      	cmp	r7, #0
 8005814:	d0a9      	beq.n	800576a <__sflush_r+0x1a>
 8005816:	0793      	lsls	r3, r2, #30
 8005818:	680e      	ldr	r6, [r1, #0]
 800581a:	bf08      	it	eq
 800581c:	694b      	ldreq	r3, [r1, #20]
 800581e:	600f      	str	r7, [r1, #0]
 8005820:	bf18      	it	ne
 8005822:	2300      	movne	r3, #0
 8005824:	eba6 0807 	sub.w	r8, r6, r7
 8005828:	608b      	str	r3, [r1, #8]
 800582a:	f1b8 0f00 	cmp.w	r8, #0
 800582e:	dd9c      	ble.n	800576a <__sflush_r+0x1a>
 8005830:	6a21      	ldr	r1, [r4, #32]
 8005832:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005834:	4643      	mov	r3, r8
 8005836:	463a      	mov	r2, r7
 8005838:	4628      	mov	r0, r5
 800583a:	47b0      	blx	r6
 800583c:	2800      	cmp	r0, #0
 800583e:	dc06      	bgt.n	800584e <__sflush_r+0xfe>
 8005840:	89a3      	ldrh	r3, [r4, #12]
 8005842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005846:	81a3      	strh	r3, [r4, #12]
 8005848:	f04f 30ff 	mov.w	r0, #4294967295
 800584c:	e78e      	b.n	800576c <__sflush_r+0x1c>
 800584e:	4407      	add	r7, r0
 8005850:	eba8 0800 	sub.w	r8, r8, r0
 8005854:	e7e9      	b.n	800582a <__sflush_r+0xda>
 8005856:	bf00      	nop
 8005858:	20400001 	.word	0x20400001

0800585c <_fflush_r>:
 800585c:	b538      	push	{r3, r4, r5, lr}
 800585e:	690b      	ldr	r3, [r1, #16]
 8005860:	4605      	mov	r5, r0
 8005862:	460c      	mov	r4, r1
 8005864:	b913      	cbnz	r3, 800586c <_fflush_r+0x10>
 8005866:	2500      	movs	r5, #0
 8005868:	4628      	mov	r0, r5
 800586a:	bd38      	pop	{r3, r4, r5, pc}
 800586c:	b118      	cbz	r0, 8005876 <_fflush_r+0x1a>
 800586e:	6983      	ldr	r3, [r0, #24]
 8005870:	b90b      	cbnz	r3, 8005876 <_fflush_r+0x1a>
 8005872:	f000 f887 	bl	8005984 <__sinit>
 8005876:	4b14      	ldr	r3, [pc, #80]	; (80058c8 <_fflush_r+0x6c>)
 8005878:	429c      	cmp	r4, r3
 800587a:	d11b      	bne.n	80058b4 <_fflush_r+0x58>
 800587c:	686c      	ldr	r4, [r5, #4]
 800587e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d0ef      	beq.n	8005866 <_fflush_r+0xa>
 8005886:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005888:	07d0      	lsls	r0, r2, #31
 800588a:	d404      	bmi.n	8005896 <_fflush_r+0x3a>
 800588c:	0599      	lsls	r1, r3, #22
 800588e:	d402      	bmi.n	8005896 <_fflush_r+0x3a>
 8005890:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005892:	f000 f915 	bl	8005ac0 <__retarget_lock_acquire_recursive>
 8005896:	4628      	mov	r0, r5
 8005898:	4621      	mov	r1, r4
 800589a:	f7ff ff59 	bl	8005750 <__sflush_r>
 800589e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058a0:	07da      	lsls	r2, r3, #31
 80058a2:	4605      	mov	r5, r0
 80058a4:	d4e0      	bmi.n	8005868 <_fflush_r+0xc>
 80058a6:	89a3      	ldrh	r3, [r4, #12]
 80058a8:	059b      	lsls	r3, r3, #22
 80058aa:	d4dd      	bmi.n	8005868 <_fflush_r+0xc>
 80058ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058ae:	f000 f908 	bl	8005ac2 <__retarget_lock_release_recursive>
 80058b2:	e7d9      	b.n	8005868 <_fflush_r+0xc>
 80058b4:	4b05      	ldr	r3, [pc, #20]	; (80058cc <_fflush_r+0x70>)
 80058b6:	429c      	cmp	r4, r3
 80058b8:	d101      	bne.n	80058be <_fflush_r+0x62>
 80058ba:	68ac      	ldr	r4, [r5, #8]
 80058bc:	e7df      	b.n	800587e <_fflush_r+0x22>
 80058be:	4b04      	ldr	r3, [pc, #16]	; (80058d0 <_fflush_r+0x74>)
 80058c0:	429c      	cmp	r4, r3
 80058c2:	bf08      	it	eq
 80058c4:	68ec      	ldreq	r4, [r5, #12]
 80058c6:	e7da      	b.n	800587e <_fflush_r+0x22>
 80058c8:	08007f94 	.word	0x08007f94
 80058cc:	08007fb4 	.word	0x08007fb4
 80058d0:	08007f74 	.word	0x08007f74

080058d4 <std>:
 80058d4:	2300      	movs	r3, #0
 80058d6:	b510      	push	{r4, lr}
 80058d8:	4604      	mov	r4, r0
 80058da:	e9c0 3300 	strd	r3, r3, [r0]
 80058de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058e2:	6083      	str	r3, [r0, #8]
 80058e4:	8181      	strh	r1, [r0, #12]
 80058e6:	6643      	str	r3, [r0, #100]	; 0x64
 80058e8:	81c2      	strh	r2, [r0, #14]
 80058ea:	6183      	str	r3, [r0, #24]
 80058ec:	4619      	mov	r1, r3
 80058ee:	2208      	movs	r2, #8
 80058f0:	305c      	adds	r0, #92	; 0x5c
 80058f2:	f7ff fa7f 	bl	8004df4 <memset>
 80058f6:	4b05      	ldr	r3, [pc, #20]	; (800590c <std+0x38>)
 80058f8:	6263      	str	r3, [r4, #36]	; 0x24
 80058fa:	4b05      	ldr	r3, [pc, #20]	; (8005910 <std+0x3c>)
 80058fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80058fe:	4b05      	ldr	r3, [pc, #20]	; (8005914 <std+0x40>)
 8005900:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005902:	4b05      	ldr	r3, [pc, #20]	; (8005918 <std+0x44>)
 8005904:	6224      	str	r4, [r4, #32]
 8005906:	6323      	str	r3, [r4, #48]	; 0x30
 8005908:	bd10      	pop	{r4, pc}
 800590a:	bf00      	nop
 800590c:	08005c31 	.word	0x08005c31
 8005910:	08005c53 	.word	0x08005c53
 8005914:	08005c8b 	.word	0x08005c8b
 8005918:	08005caf 	.word	0x08005caf

0800591c <_cleanup_r>:
 800591c:	4901      	ldr	r1, [pc, #4]	; (8005924 <_cleanup_r+0x8>)
 800591e:	f000 b8af 	b.w	8005a80 <_fwalk_reent>
 8005922:	bf00      	nop
 8005924:	0800585d 	.word	0x0800585d

08005928 <__sfmoreglue>:
 8005928:	b570      	push	{r4, r5, r6, lr}
 800592a:	2268      	movs	r2, #104	; 0x68
 800592c:	1e4d      	subs	r5, r1, #1
 800592e:	4355      	muls	r5, r2
 8005930:	460e      	mov	r6, r1
 8005932:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005936:	f7ff fad1 	bl	8004edc <_malloc_r>
 800593a:	4604      	mov	r4, r0
 800593c:	b140      	cbz	r0, 8005950 <__sfmoreglue+0x28>
 800593e:	2100      	movs	r1, #0
 8005940:	e9c0 1600 	strd	r1, r6, [r0]
 8005944:	300c      	adds	r0, #12
 8005946:	60a0      	str	r0, [r4, #8]
 8005948:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800594c:	f7ff fa52 	bl	8004df4 <memset>
 8005950:	4620      	mov	r0, r4
 8005952:	bd70      	pop	{r4, r5, r6, pc}

08005954 <__sfp_lock_acquire>:
 8005954:	4801      	ldr	r0, [pc, #4]	; (800595c <__sfp_lock_acquire+0x8>)
 8005956:	f000 b8b3 	b.w	8005ac0 <__retarget_lock_acquire_recursive>
 800595a:	bf00      	nop
 800595c:	20000821 	.word	0x20000821

08005960 <__sfp_lock_release>:
 8005960:	4801      	ldr	r0, [pc, #4]	; (8005968 <__sfp_lock_release+0x8>)
 8005962:	f000 b8ae 	b.w	8005ac2 <__retarget_lock_release_recursive>
 8005966:	bf00      	nop
 8005968:	20000821 	.word	0x20000821

0800596c <__sinit_lock_acquire>:
 800596c:	4801      	ldr	r0, [pc, #4]	; (8005974 <__sinit_lock_acquire+0x8>)
 800596e:	f000 b8a7 	b.w	8005ac0 <__retarget_lock_acquire_recursive>
 8005972:	bf00      	nop
 8005974:	20000822 	.word	0x20000822

08005978 <__sinit_lock_release>:
 8005978:	4801      	ldr	r0, [pc, #4]	; (8005980 <__sinit_lock_release+0x8>)
 800597a:	f000 b8a2 	b.w	8005ac2 <__retarget_lock_release_recursive>
 800597e:	bf00      	nop
 8005980:	20000822 	.word	0x20000822

08005984 <__sinit>:
 8005984:	b510      	push	{r4, lr}
 8005986:	4604      	mov	r4, r0
 8005988:	f7ff fff0 	bl	800596c <__sinit_lock_acquire>
 800598c:	69a3      	ldr	r3, [r4, #24]
 800598e:	b11b      	cbz	r3, 8005998 <__sinit+0x14>
 8005990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005994:	f7ff bff0 	b.w	8005978 <__sinit_lock_release>
 8005998:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800599c:	6523      	str	r3, [r4, #80]	; 0x50
 800599e:	4b13      	ldr	r3, [pc, #76]	; (80059ec <__sinit+0x68>)
 80059a0:	4a13      	ldr	r2, [pc, #76]	; (80059f0 <__sinit+0x6c>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80059a6:	42a3      	cmp	r3, r4
 80059a8:	bf04      	itt	eq
 80059aa:	2301      	moveq	r3, #1
 80059ac:	61a3      	streq	r3, [r4, #24]
 80059ae:	4620      	mov	r0, r4
 80059b0:	f000 f820 	bl	80059f4 <__sfp>
 80059b4:	6060      	str	r0, [r4, #4]
 80059b6:	4620      	mov	r0, r4
 80059b8:	f000 f81c 	bl	80059f4 <__sfp>
 80059bc:	60a0      	str	r0, [r4, #8]
 80059be:	4620      	mov	r0, r4
 80059c0:	f000 f818 	bl	80059f4 <__sfp>
 80059c4:	2200      	movs	r2, #0
 80059c6:	60e0      	str	r0, [r4, #12]
 80059c8:	2104      	movs	r1, #4
 80059ca:	6860      	ldr	r0, [r4, #4]
 80059cc:	f7ff ff82 	bl	80058d4 <std>
 80059d0:	68a0      	ldr	r0, [r4, #8]
 80059d2:	2201      	movs	r2, #1
 80059d4:	2109      	movs	r1, #9
 80059d6:	f7ff ff7d 	bl	80058d4 <std>
 80059da:	68e0      	ldr	r0, [r4, #12]
 80059dc:	2202      	movs	r2, #2
 80059de:	2112      	movs	r1, #18
 80059e0:	f7ff ff78 	bl	80058d4 <std>
 80059e4:	2301      	movs	r3, #1
 80059e6:	61a3      	str	r3, [r4, #24]
 80059e8:	e7d2      	b.n	8005990 <__sinit+0xc>
 80059ea:	bf00      	nop
 80059ec:	08007f3c 	.word	0x08007f3c
 80059f0:	0800591d 	.word	0x0800591d

080059f4 <__sfp>:
 80059f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059f6:	4607      	mov	r7, r0
 80059f8:	f7ff ffac 	bl	8005954 <__sfp_lock_acquire>
 80059fc:	4b1e      	ldr	r3, [pc, #120]	; (8005a78 <__sfp+0x84>)
 80059fe:	681e      	ldr	r6, [r3, #0]
 8005a00:	69b3      	ldr	r3, [r6, #24]
 8005a02:	b913      	cbnz	r3, 8005a0a <__sfp+0x16>
 8005a04:	4630      	mov	r0, r6
 8005a06:	f7ff ffbd 	bl	8005984 <__sinit>
 8005a0a:	3648      	adds	r6, #72	; 0x48
 8005a0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005a10:	3b01      	subs	r3, #1
 8005a12:	d503      	bpl.n	8005a1c <__sfp+0x28>
 8005a14:	6833      	ldr	r3, [r6, #0]
 8005a16:	b30b      	cbz	r3, 8005a5c <__sfp+0x68>
 8005a18:	6836      	ldr	r6, [r6, #0]
 8005a1a:	e7f7      	b.n	8005a0c <__sfp+0x18>
 8005a1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005a20:	b9d5      	cbnz	r5, 8005a58 <__sfp+0x64>
 8005a22:	4b16      	ldr	r3, [pc, #88]	; (8005a7c <__sfp+0x88>)
 8005a24:	60e3      	str	r3, [r4, #12]
 8005a26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005a2a:	6665      	str	r5, [r4, #100]	; 0x64
 8005a2c:	f000 f847 	bl	8005abe <__retarget_lock_init_recursive>
 8005a30:	f7ff ff96 	bl	8005960 <__sfp_lock_release>
 8005a34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005a38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005a3c:	6025      	str	r5, [r4, #0]
 8005a3e:	61a5      	str	r5, [r4, #24]
 8005a40:	2208      	movs	r2, #8
 8005a42:	4629      	mov	r1, r5
 8005a44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005a48:	f7ff f9d4 	bl	8004df4 <memset>
 8005a4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005a50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005a54:	4620      	mov	r0, r4
 8005a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a58:	3468      	adds	r4, #104	; 0x68
 8005a5a:	e7d9      	b.n	8005a10 <__sfp+0x1c>
 8005a5c:	2104      	movs	r1, #4
 8005a5e:	4638      	mov	r0, r7
 8005a60:	f7ff ff62 	bl	8005928 <__sfmoreglue>
 8005a64:	4604      	mov	r4, r0
 8005a66:	6030      	str	r0, [r6, #0]
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	d1d5      	bne.n	8005a18 <__sfp+0x24>
 8005a6c:	f7ff ff78 	bl	8005960 <__sfp_lock_release>
 8005a70:	230c      	movs	r3, #12
 8005a72:	603b      	str	r3, [r7, #0]
 8005a74:	e7ee      	b.n	8005a54 <__sfp+0x60>
 8005a76:	bf00      	nop
 8005a78:	08007f3c 	.word	0x08007f3c
 8005a7c:	ffff0001 	.word	0xffff0001

08005a80 <_fwalk_reent>:
 8005a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a84:	4606      	mov	r6, r0
 8005a86:	4688      	mov	r8, r1
 8005a88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005a8c:	2700      	movs	r7, #0
 8005a8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a92:	f1b9 0901 	subs.w	r9, r9, #1
 8005a96:	d505      	bpl.n	8005aa4 <_fwalk_reent+0x24>
 8005a98:	6824      	ldr	r4, [r4, #0]
 8005a9a:	2c00      	cmp	r4, #0
 8005a9c:	d1f7      	bne.n	8005a8e <_fwalk_reent+0xe>
 8005a9e:	4638      	mov	r0, r7
 8005aa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005aa4:	89ab      	ldrh	r3, [r5, #12]
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d907      	bls.n	8005aba <_fwalk_reent+0x3a>
 8005aaa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	d003      	beq.n	8005aba <_fwalk_reent+0x3a>
 8005ab2:	4629      	mov	r1, r5
 8005ab4:	4630      	mov	r0, r6
 8005ab6:	47c0      	blx	r8
 8005ab8:	4307      	orrs	r7, r0
 8005aba:	3568      	adds	r5, #104	; 0x68
 8005abc:	e7e9      	b.n	8005a92 <_fwalk_reent+0x12>

08005abe <__retarget_lock_init_recursive>:
 8005abe:	4770      	bx	lr

08005ac0 <__retarget_lock_acquire_recursive>:
 8005ac0:	4770      	bx	lr

08005ac2 <__retarget_lock_release_recursive>:
 8005ac2:	4770      	bx	lr

08005ac4 <__swhatbuf_r>:
 8005ac4:	b570      	push	{r4, r5, r6, lr}
 8005ac6:	460e      	mov	r6, r1
 8005ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005acc:	2900      	cmp	r1, #0
 8005ace:	b096      	sub	sp, #88	; 0x58
 8005ad0:	4614      	mov	r4, r2
 8005ad2:	461d      	mov	r5, r3
 8005ad4:	da08      	bge.n	8005ae8 <__swhatbuf_r+0x24>
 8005ad6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	602a      	str	r2, [r5, #0]
 8005ade:	061a      	lsls	r2, r3, #24
 8005ae0:	d410      	bmi.n	8005b04 <__swhatbuf_r+0x40>
 8005ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ae6:	e00e      	b.n	8005b06 <__swhatbuf_r+0x42>
 8005ae8:	466a      	mov	r2, sp
 8005aea:	f000 f907 	bl	8005cfc <_fstat_r>
 8005aee:	2800      	cmp	r0, #0
 8005af0:	dbf1      	blt.n	8005ad6 <__swhatbuf_r+0x12>
 8005af2:	9a01      	ldr	r2, [sp, #4]
 8005af4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005af8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005afc:	425a      	negs	r2, r3
 8005afe:	415a      	adcs	r2, r3
 8005b00:	602a      	str	r2, [r5, #0]
 8005b02:	e7ee      	b.n	8005ae2 <__swhatbuf_r+0x1e>
 8005b04:	2340      	movs	r3, #64	; 0x40
 8005b06:	2000      	movs	r0, #0
 8005b08:	6023      	str	r3, [r4, #0]
 8005b0a:	b016      	add	sp, #88	; 0x58
 8005b0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005b10 <__smakebuf_r>:
 8005b10:	898b      	ldrh	r3, [r1, #12]
 8005b12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b14:	079d      	lsls	r5, r3, #30
 8005b16:	4606      	mov	r6, r0
 8005b18:	460c      	mov	r4, r1
 8005b1a:	d507      	bpl.n	8005b2c <__smakebuf_r+0x1c>
 8005b1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b20:	6023      	str	r3, [r4, #0]
 8005b22:	6123      	str	r3, [r4, #16]
 8005b24:	2301      	movs	r3, #1
 8005b26:	6163      	str	r3, [r4, #20]
 8005b28:	b002      	add	sp, #8
 8005b2a:	bd70      	pop	{r4, r5, r6, pc}
 8005b2c:	ab01      	add	r3, sp, #4
 8005b2e:	466a      	mov	r2, sp
 8005b30:	f7ff ffc8 	bl	8005ac4 <__swhatbuf_r>
 8005b34:	9900      	ldr	r1, [sp, #0]
 8005b36:	4605      	mov	r5, r0
 8005b38:	4630      	mov	r0, r6
 8005b3a:	f7ff f9cf 	bl	8004edc <_malloc_r>
 8005b3e:	b948      	cbnz	r0, 8005b54 <__smakebuf_r+0x44>
 8005b40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b44:	059a      	lsls	r2, r3, #22
 8005b46:	d4ef      	bmi.n	8005b28 <__smakebuf_r+0x18>
 8005b48:	f023 0303 	bic.w	r3, r3, #3
 8005b4c:	f043 0302 	orr.w	r3, r3, #2
 8005b50:	81a3      	strh	r3, [r4, #12]
 8005b52:	e7e3      	b.n	8005b1c <__smakebuf_r+0xc>
 8005b54:	4b0d      	ldr	r3, [pc, #52]	; (8005b8c <__smakebuf_r+0x7c>)
 8005b56:	62b3      	str	r3, [r6, #40]	; 0x28
 8005b58:	89a3      	ldrh	r3, [r4, #12]
 8005b5a:	6020      	str	r0, [r4, #0]
 8005b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b60:	81a3      	strh	r3, [r4, #12]
 8005b62:	9b00      	ldr	r3, [sp, #0]
 8005b64:	6163      	str	r3, [r4, #20]
 8005b66:	9b01      	ldr	r3, [sp, #4]
 8005b68:	6120      	str	r0, [r4, #16]
 8005b6a:	b15b      	cbz	r3, 8005b84 <__smakebuf_r+0x74>
 8005b6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b70:	4630      	mov	r0, r6
 8005b72:	f000 f8d5 	bl	8005d20 <_isatty_r>
 8005b76:	b128      	cbz	r0, 8005b84 <__smakebuf_r+0x74>
 8005b78:	89a3      	ldrh	r3, [r4, #12]
 8005b7a:	f023 0303 	bic.w	r3, r3, #3
 8005b7e:	f043 0301 	orr.w	r3, r3, #1
 8005b82:	81a3      	strh	r3, [r4, #12]
 8005b84:	89a0      	ldrh	r0, [r4, #12]
 8005b86:	4305      	orrs	r5, r0
 8005b88:	81a5      	strh	r5, [r4, #12]
 8005b8a:	e7cd      	b.n	8005b28 <__smakebuf_r+0x18>
 8005b8c:	0800591d 	.word	0x0800591d

08005b90 <__malloc_lock>:
 8005b90:	4801      	ldr	r0, [pc, #4]	; (8005b98 <__malloc_lock+0x8>)
 8005b92:	f7ff bf95 	b.w	8005ac0 <__retarget_lock_acquire_recursive>
 8005b96:	bf00      	nop
 8005b98:	20000820 	.word	0x20000820

08005b9c <__malloc_unlock>:
 8005b9c:	4801      	ldr	r0, [pc, #4]	; (8005ba4 <__malloc_unlock+0x8>)
 8005b9e:	f7ff bf90 	b.w	8005ac2 <__retarget_lock_release_recursive>
 8005ba2:	bf00      	nop
 8005ba4:	20000820 	.word	0x20000820

08005ba8 <_raise_r>:
 8005ba8:	291f      	cmp	r1, #31
 8005baa:	b538      	push	{r3, r4, r5, lr}
 8005bac:	4604      	mov	r4, r0
 8005bae:	460d      	mov	r5, r1
 8005bb0:	d904      	bls.n	8005bbc <_raise_r+0x14>
 8005bb2:	2316      	movs	r3, #22
 8005bb4:	6003      	str	r3, [r0, #0]
 8005bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8005bba:	bd38      	pop	{r3, r4, r5, pc}
 8005bbc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005bbe:	b112      	cbz	r2, 8005bc6 <_raise_r+0x1e>
 8005bc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005bc4:	b94b      	cbnz	r3, 8005bda <_raise_r+0x32>
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	f000 f830 	bl	8005c2c <_getpid_r>
 8005bcc:	462a      	mov	r2, r5
 8005bce:	4601      	mov	r1, r0
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bd6:	f000 b817 	b.w	8005c08 <_kill_r>
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d00a      	beq.n	8005bf4 <_raise_r+0x4c>
 8005bde:	1c59      	adds	r1, r3, #1
 8005be0:	d103      	bne.n	8005bea <_raise_r+0x42>
 8005be2:	2316      	movs	r3, #22
 8005be4:	6003      	str	r3, [r0, #0]
 8005be6:	2001      	movs	r0, #1
 8005be8:	e7e7      	b.n	8005bba <_raise_r+0x12>
 8005bea:	2400      	movs	r4, #0
 8005bec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	4798      	blx	r3
 8005bf4:	2000      	movs	r0, #0
 8005bf6:	e7e0      	b.n	8005bba <_raise_r+0x12>

08005bf8 <raise>:
 8005bf8:	4b02      	ldr	r3, [pc, #8]	; (8005c04 <raise+0xc>)
 8005bfa:	4601      	mov	r1, r0
 8005bfc:	6818      	ldr	r0, [r3, #0]
 8005bfe:	f7ff bfd3 	b.w	8005ba8 <_raise_r>
 8005c02:	bf00      	nop
 8005c04:	20000430 	.word	0x20000430

08005c08 <_kill_r>:
 8005c08:	b538      	push	{r3, r4, r5, lr}
 8005c0a:	4d07      	ldr	r5, [pc, #28]	; (8005c28 <_kill_r+0x20>)
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	4604      	mov	r4, r0
 8005c10:	4608      	mov	r0, r1
 8005c12:	4611      	mov	r1, r2
 8005c14:	602b      	str	r3, [r5, #0]
 8005c16:	f7fc fe49 	bl	80028ac <_kill>
 8005c1a:	1c43      	adds	r3, r0, #1
 8005c1c:	d102      	bne.n	8005c24 <_kill_r+0x1c>
 8005c1e:	682b      	ldr	r3, [r5, #0]
 8005c20:	b103      	cbz	r3, 8005c24 <_kill_r+0x1c>
 8005c22:	6023      	str	r3, [r4, #0]
 8005c24:	bd38      	pop	{r3, r4, r5, pc}
 8005c26:	bf00      	nop
 8005c28:	20000824 	.word	0x20000824

08005c2c <_getpid_r>:
 8005c2c:	f7fc be3c 	b.w	80028a8 <_getpid>

08005c30 <__sread>:
 8005c30:	b510      	push	{r4, lr}
 8005c32:	460c      	mov	r4, r1
 8005c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c38:	f000 f894 	bl	8005d64 <_read_r>
 8005c3c:	2800      	cmp	r0, #0
 8005c3e:	bfab      	itete	ge
 8005c40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c42:	89a3      	ldrhlt	r3, [r4, #12]
 8005c44:	181b      	addge	r3, r3, r0
 8005c46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c4a:	bfac      	ite	ge
 8005c4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c4e:	81a3      	strhlt	r3, [r4, #12]
 8005c50:	bd10      	pop	{r4, pc}

08005c52 <__swrite>:
 8005c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c56:	461f      	mov	r7, r3
 8005c58:	898b      	ldrh	r3, [r1, #12]
 8005c5a:	05db      	lsls	r3, r3, #23
 8005c5c:	4605      	mov	r5, r0
 8005c5e:	460c      	mov	r4, r1
 8005c60:	4616      	mov	r6, r2
 8005c62:	d505      	bpl.n	8005c70 <__swrite+0x1e>
 8005c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c68:	2302      	movs	r3, #2
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f000 f868 	bl	8005d40 <_lseek_r>
 8005c70:	89a3      	ldrh	r3, [r4, #12]
 8005c72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c7a:	81a3      	strh	r3, [r4, #12]
 8005c7c:	4632      	mov	r2, r6
 8005c7e:	463b      	mov	r3, r7
 8005c80:	4628      	mov	r0, r5
 8005c82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c86:	f000 b817 	b.w	8005cb8 <_write_r>

08005c8a <__sseek>:
 8005c8a:	b510      	push	{r4, lr}
 8005c8c:	460c      	mov	r4, r1
 8005c8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c92:	f000 f855 	bl	8005d40 <_lseek_r>
 8005c96:	1c43      	adds	r3, r0, #1
 8005c98:	89a3      	ldrh	r3, [r4, #12]
 8005c9a:	bf15      	itete	ne
 8005c9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ca2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ca6:	81a3      	strheq	r3, [r4, #12]
 8005ca8:	bf18      	it	ne
 8005caa:	81a3      	strhne	r3, [r4, #12]
 8005cac:	bd10      	pop	{r4, pc}

08005cae <__sclose>:
 8005cae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cb2:	f000 b813 	b.w	8005cdc <_close_r>
	...

08005cb8 <_write_r>:
 8005cb8:	b538      	push	{r3, r4, r5, lr}
 8005cba:	4d07      	ldr	r5, [pc, #28]	; (8005cd8 <_write_r+0x20>)
 8005cbc:	4604      	mov	r4, r0
 8005cbe:	4608      	mov	r0, r1
 8005cc0:	4611      	mov	r1, r2
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	602a      	str	r2, [r5, #0]
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	f7fc fe0e 	bl	80028e8 <_write>
 8005ccc:	1c43      	adds	r3, r0, #1
 8005cce:	d102      	bne.n	8005cd6 <_write_r+0x1e>
 8005cd0:	682b      	ldr	r3, [r5, #0]
 8005cd2:	b103      	cbz	r3, 8005cd6 <_write_r+0x1e>
 8005cd4:	6023      	str	r3, [r4, #0]
 8005cd6:	bd38      	pop	{r3, r4, r5, pc}
 8005cd8:	20000824 	.word	0x20000824

08005cdc <_close_r>:
 8005cdc:	b538      	push	{r3, r4, r5, lr}
 8005cde:	4d06      	ldr	r5, [pc, #24]	; (8005cf8 <_close_r+0x1c>)
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	4604      	mov	r4, r0
 8005ce4:	4608      	mov	r0, r1
 8005ce6:	602b      	str	r3, [r5, #0]
 8005ce8:	f7fc fe0c 	bl	8002904 <_close>
 8005cec:	1c43      	adds	r3, r0, #1
 8005cee:	d102      	bne.n	8005cf6 <_close_r+0x1a>
 8005cf0:	682b      	ldr	r3, [r5, #0]
 8005cf2:	b103      	cbz	r3, 8005cf6 <_close_r+0x1a>
 8005cf4:	6023      	str	r3, [r4, #0]
 8005cf6:	bd38      	pop	{r3, r4, r5, pc}
 8005cf8:	20000824 	.word	0x20000824

08005cfc <_fstat_r>:
 8005cfc:	b538      	push	{r3, r4, r5, lr}
 8005cfe:	4d07      	ldr	r5, [pc, #28]	; (8005d1c <_fstat_r+0x20>)
 8005d00:	2300      	movs	r3, #0
 8005d02:	4604      	mov	r4, r0
 8005d04:	4608      	mov	r0, r1
 8005d06:	4611      	mov	r1, r2
 8005d08:	602b      	str	r3, [r5, #0]
 8005d0a:	f7fc fdfe 	bl	800290a <_fstat>
 8005d0e:	1c43      	adds	r3, r0, #1
 8005d10:	d102      	bne.n	8005d18 <_fstat_r+0x1c>
 8005d12:	682b      	ldr	r3, [r5, #0]
 8005d14:	b103      	cbz	r3, 8005d18 <_fstat_r+0x1c>
 8005d16:	6023      	str	r3, [r4, #0]
 8005d18:	bd38      	pop	{r3, r4, r5, pc}
 8005d1a:	bf00      	nop
 8005d1c:	20000824 	.word	0x20000824

08005d20 <_isatty_r>:
 8005d20:	b538      	push	{r3, r4, r5, lr}
 8005d22:	4d06      	ldr	r5, [pc, #24]	; (8005d3c <_isatty_r+0x1c>)
 8005d24:	2300      	movs	r3, #0
 8005d26:	4604      	mov	r4, r0
 8005d28:	4608      	mov	r0, r1
 8005d2a:	602b      	str	r3, [r5, #0]
 8005d2c:	f7fc fdf2 	bl	8002914 <_isatty>
 8005d30:	1c43      	adds	r3, r0, #1
 8005d32:	d102      	bne.n	8005d3a <_isatty_r+0x1a>
 8005d34:	682b      	ldr	r3, [r5, #0]
 8005d36:	b103      	cbz	r3, 8005d3a <_isatty_r+0x1a>
 8005d38:	6023      	str	r3, [r4, #0]
 8005d3a:	bd38      	pop	{r3, r4, r5, pc}
 8005d3c:	20000824 	.word	0x20000824

08005d40 <_lseek_r>:
 8005d40:	b538      	push	{r3, r4, r5, lr}
 8005d42:	4d07      	ldr	r5, [pc, #28]	; (8005d60 <_lseek_r+0x20>)
 8005d44:	4604      	mov	r4, r0
 8005d46:	4608      	mov	r0, r1
 8005d48:	4611      	mov	r1, r2
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	602a      	str	r2, [r5, #0]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	f7fc fde2 	bl	8002918 <_lseek>
 8005d54:	1c43      	adds	r3, r0, #1
 8005d56:	d102      	bne.n	8005d5e <_lseek_r+0x1e>
 8005d58:	682b      	ldr	r3, [r5, #0]
 8005d5a:	b103      	cbz	r3, 8005d5e <_lseek_r+0x1e>
 8005d5c:	6023      	str	r3, [r4, #0]
 8005d5e:	bd38      	pop	{r3, r4, r5, pc}
 8005d60:	20000824 	.word	0x20000824

08005d64 <_read_r>:
 8005d64:	b538      	push	{r3, r4, r5, lr}
 8005d66:	4d07      	ldr	r5, [pc, #28]	; (8005d84 <_read_r+0x20>)
 8005d68:	4604      	mov	r4, r0
 8005d6a:	4608      	mov	r0, r1
 8005d6c:	4611      	mov	r1, r2
 8005d6e:	2200      	movs	r2, #0
 8005d70:	602a      	str	r2, [r5, #0]
 8005d72:	461a      	mov	r2, r3
 8005d74:	f7fc fda8 	bl	80028c8 <_read>
 8005d78:	1c43      	adds	r3, r0, #1
 8005d7a:	d102      	bne.n	8005d82 <_read_r+0x1e>
 8005d7c:	682b      	ldr	r3, [r5, #0]
 8005d7e:	b103      	cbz	r3, 8005d82 <_read_r+0x1e>
 8005d80:	6023      	str	r3, [r4, #0]
 8005d82:	bd38      	pop	{r3, r4, r5, pc}
 8005d84:	20000824 	.word	0x20000824

08005d88 <atan>:
 8005d88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d8c:	ec55 4b10 	vmov	r4, r5, d0
 8005d90:	4bc3      	ldr	r3, [pc, #780]	; (80060a0 <atan+0x318>)
 8005d92:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005d96:	429e      	cmp	r6, r3
 8005d98:	46ab      	mov	fp, r5
 8005d9a:	dd18      	ble.n	8005dce <atan+0x46>
 8005d9c:	4bc1      	ldr	r3, [pc, #772]	; (80060a4 <atan+0x31c>)
 8005d9e:	429e      	cmp	r6, r3
 8005da0:	dc01      	bgt.n	8005da6 <atan+0x1e>
 8005da2:	d109      	bne.n	8005db8 <atan+0x30>
 8005da4:	b144      	cbz	r4, 8005db8 <atan+0x30>
 8005da6:	4622      	mov	r2, r4
 8005da8:	462b      	mov	r3, r5
 8005daa:	4620      	mov	r0, r4
 8005dac:	4629      	mov	r1, r5
 8005dae:	f7fa fa65 	bl	800027c <__adddf3>
 8005db2:	4604      	mov	r4, r0
 8005db4:	460d      	mov	r5, r1
 8005db6:	e006      	b.n	8005dc6 <atan+0x3e>
 8005db8:	f1bb 0f00 	cmp.w	fp, #0
 8005dbc:	f300 8131 	bgt.w	8006022 <atan+0x29a>
 8005dc0:	a59b      	add	r5, pc, #620	; (adr r5, 8006030 <atan+0x2a8>)
 8005dc2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005dc6:	ec45 4b10 	vmov	d0, r4, r5
 8005dca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dce:	4bb6      	ldr	r3, [pc, #728]	; (80060a8 <atan+0x320>)
 8005dd0:	429e      	cmp	r6, r3
 8005dd2:	dc14      	bgt.n	8005dfe <atan+0x76>
 8005dd4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8005dd8:	429e      	cmp	r6, r3
 8005dda:	dc0d      	bgt.n	8005df8 <atan+0x70>
 8005ddc:	a396      	add	r3, pc, #600	; (adr r3, 8006038 <atan+0x2b0>)
 8005dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de2:	ee10 0a10 	vmov	r0, s0
 8005de6:	4629      	mov	r1, r5
 8005de8:	f7fa fa48 	bl	800027c <__adddf3>
 8005dec:	4baf      	ldr	r3, [pc, #700]	; (80060ac <atan+0x324>)
 8005dee:	2200      	movs	r2, #0
 8005df0:	f7fa fe8a 	bl	8000b08 <__aeabi_dcmpgt>
 8005df4:	2800      	cmp	r0, #0
 8005df6:	d1e6      	bne.n	8005dc6 <atan+0x3e>
 8005df8:	f04f 3aff 	mov.w	sl, #4294967295
 8005dfc:	e02b      	b.n	8005e56 <atan+0xce>
 8005dfe:	f000 f9b7 	bl	8006170 <fabs>
 8005e02:	4bab      	ldr	r3, [pc, #684]	; (80060b0 <atan+0x328>)
 8005e04:	429e      	cmp	r6, r3
 8005e06:	ec55 4b10 	vmov	r4, r5, d0
 8005e0a:	f300 80bf 	bgt.w	8005f8c <atan+0x204>
 8005e0e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8005e12:	429e      	cmp	r6, r3
 8005e14:	f300 80a0 	bgt.w	8005f58 <atan+0x1d0>
 8005e18:	ee10 2a10 	vmov	r2, s0
 8005e1c:	ee10 0a10 	vmov	r0, s0
 8005e20:	462b      	mov	r3, r5
 8005e22:	4629      	mov	r1, r5
 8005e24:	f7fa fa2a 	bl	800027c <__adddf3>
 8005e28:	4ba0      	ldr	r3, [pc, #640]	; (80060ac <atan+0x324>)
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f7fa fa24 	bl	8000278 <__aeabi_dsub>
 8005e30:	2200      	movs	r2, #0
 8005e32:	4606      	mov	r6, r0
 8005e34:	460f      	mov	r7, r1
 8005e36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	4629      	mov	r1, r5
 8005e3e:	f7fa fa1d 	bl	800027c <__adddf3>
 8005e42:	4602      	mov	r2, r0
 8005e44:	460b      	mov	r3, r1
 8005e46:	4630      	mov	r0, r6
 8005e48:	4639      	mov	r1, r7
 8005e4a:	f7fa fcf7 	bl	800083c <__aeabi_ddiv>
 8005e4e:	f04f 0a00 	mov.w	sl, #0
 8005e52:	4604      	mov	r4, r0
 8005e54:	460d      	mov	r5, r1
 8005e56:	4622      	mov	r2, r4
 8005e58:	462b      	mov	r3, r5
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	4629      	mov	r1, r5
 8005e5e:	f7fa fbc3 	bl	80005e8 <__aeabi_dmul>
 8005e62:	4602      	mov	r2, r0
 8005e64:	460b      	mov	r3, r1
 8005e66:	4680      	mov	r8, r0
 8005e68:	4689      	mov	r9, r1
 8005e6a:	f7fa fbbd 	bl	80005e8 <__aeabi_dmul>
 8005e6e:	a374      	add	r3, pc, #464	; (adr r3, 8006040 <atan+0x2b8>)
 8005e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e74:	4606      	mov	r6, r0
 8005e76:	460f      	mov	r7, r1
 8005e78:	f7fa fbb6 	bl	80005e8 <__aeabi_dmul>
 8005e7c:	a372      	add	r3, pc, #456	; (adr r3, 8006048 <atan+0x2c0>)
 8005e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e82:	f7fa f9fb 	bl	800027c <__adddf3>
 8005e86:	4632      	mov	r2, r6
 8005e88:	463b      	mov	r3, r7
 8005e8a:	f7fa fbad 	bl	80005e8 <__aeabi_dmul>
 8005e8e:	a370      	add	r3, pc, #448	; (adr r3, 8006050 <atan+0x2c8>)
 8005e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e94:	f7fa f9f2 	bl	800027c <__adddf3>
 8005e98:	4632      	mov	r2, r6
 8005e9a:	463b      	mov	r3, r7
 8005e9c:	f7fa fba4 	bl	80005e8 <__aeabi_dmul>
 8005ea0:	a36d      	add	r3, pc, #436	; (adr r3, 8006058 <atan+0x2d0>)
 8005ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea6:	f7fa f9e9 	bl	800027c <__adddf3>
 8005eaa:	4632      	mov	r2, r6
 8005eac:	463b      	mov	r3, r7
 8005eae:	f7fa fb9b 	bl	80005e8 <__aeabi_dmul>
 8005eb2:	a36b      	add	r3, pc, #428	; (adr r3, 8006060 <atan+0x2d8>)
 8005eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb8:	f7fa f9e0 	bl	800027c <__adddf3>
 8005ebc:	4632      	mov	r2, r6
 8005ebe:	463b      	mov	r3, r7
 8005ec0:	f7fa fb92 	bl	80005e8 <__aeabi_dmul>
 8005ec4:	a368      	add	r3, pc, #416	; (adr r3, 8006068 <atan+0x2e0>)
 8005ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eca:	f7fa f9d7 	bl	800027c <__adddf3>
 8005ece:	4642      	mov	r2, r8
 8005ed0:	464b      	mov	r3, r9
 8005ed2:	f7fa fb89 	bl	80005e8 <__aeabi_dmul>
 8005ed6:	a366      	add	r3, pc, #408	; (adr r3, 8006070 <atan+0x2e8>)
 8005ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005edc:	4680      	mov	r8, r0
 8005ede:	4689      	mov	r9, r1
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	4639      	mov	r1, r7
 8005ee4:	f7fa fb80 	bl	80005e8 <__aeabi_dmul>
 8005ee8:	a363      	add	r3, pc, #396	; (adr r3, 8006078 <atan+0x2f0>)
 8005eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eee:	f7fa f9c3 	bl	8000278 <__aeabi_dsub>
 8005ef2:	4632      	mov	r2, r6
 8005ef4:	463b      	mov	r3, r7
 8005ef6:	f7fa fb77 	bl	80005e8 <__aeabi_dmul>
 8005efa:	a361      	add	r3, pc, #388	; (adr r3, 8006080 <atan+0x2f8>)
 8005efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f00:	f7fa f9ba 	bl	8000278 <__aeabi_dsub>
 8005f04:	4632      	mov	r2, r6
 8005f06:	463b      	mov	r3, r7
 8005f08:	f7fa fb6e 	bl	80005e8 <__aeabi_dmul>
 8005f0c:	a35e      	add	r3, pc, #376	; (adr r3, 8006088 <atan+0x300>)
 8005f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f12:	f7fa f9b1 	bl	8000278 <__aeabi_dsub>
 8005f16:	4632      	mov	r2, r6
 8005f18:	463b      	mov	r3, r7
 8005f1a:	f7fa fb65 	bl	80005e8 <__aeabi_dmul>
 8005f1e:	a35c      	add	r3, pc, #368	; (adr r3, 8006090 <atan+0x308>)
 8005f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f24:	f7fa f9a8 	bl	8000278 <__aeabi_dsub>
 8005f28:	4632      	mov	r2, r6
 8005f2a:	463b      	mov	r3, r7
 8005f2c:	f7fa fb5c 	bl	80005e8 <__aeabi_dmul>
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	4640      	mov	r0, r8
 8005f36:	4649      	mov	r1, r9
 8005f38:	f7fa f9a0 	bl	800027c <__adddf3>
 8005f3c:	4622      	mov	r2, r4
 8005f3e:	462b      	mov	r3, r5
 8005f40:	f7fa fb52 	bl	80005e8 <__aeabi_dmul>
 8005f44:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	d14b      	bne.n	8005fe6 <atan+0x25e>
 8005f4e:	4620      	mov	r0, r4
 8005f50:	4629      	mov	r1, r5
 8005f52:	f7fa f991 	bl	8000278 <__aeabi_dsub>
 8005f56:	e72c      	b.n	8005db2 <atan+0x2a>
 8005f58:	ee10 0a10 	vmov	r0, s0
 8005f5c:	4b53      	ldr	r3, [pc, #332]	; (80060ac <atan+0x324>)
 8005f5e:	2200      	movs	r2, #0
 8005f60:	4629      	mov	r1, r5
 8005f62:	f7fa f989 	bl	8000278 <__aeabi_dsub>
 8005f66:	4b51      	ldr	r3, [pc, #324]	; (80060ac <atan+0x324>)
 8005f68:	4606      	mov	r6, r0
 8005f6a:	460f      	mov	r7, r1
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	4620      	mov	r0, r4
 8005f70:	4629      	mov	r1, r5
 8005f72:	f7fa f983 	bl	800027c <__adddf3>
 8005f76:	4602      	mov	r2, r0
 8005f78:	460b      	mov	r3, r1
 8005f7a:	4630      	mov	r0, r6
 8005f7c:	4639      	mov	r1, r7
 8005f7e:	f7fa fc5d 	bl	800083c <__aeabi_ddiv>
 8005f82:	f04f 0a01 	mov.w	sl, #1
 8005f86:	4604      	mov	r4, r0
 8005f88:	460d      	mov	r5, r1
 8005f8a:	e764      	b.n	8005e56 <atan+0xce>
 8005f8c:	4b49      	ldr	r3, [pc, #292]	; (80060b4 <atan+0x32c>)
 8005f8e:	429e      	cmp	r6, r3
 8005f90:	da1d      	bge.n	8005fce <atan+0x246>
 8005f92:	ee10 0a10 	vmov	r0, s0
 8005f96:	4b48      	ldr	r3, [pc, #288]	; (80060b8 <atan+0x330>)
 8005f98:	2200      	movs	r2, #0
 8005f9a:	4629      	mov	r1, r5
 8005f9c:	f7fa f96c 	bl	8000278 <__aeabi_dsub>
 8005fa0:	4b45      	ldr	r3, [pc, #276]	; (80060b8 <atan+0x330>)
 8005fa2:	4606      	mov	r6, r0
 8005fa4:	460f      	mov	r7, r1
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	4620      	mov	r0, r4
 8005faa:	4629      	mov	r1, r5
 8005fac:	f7fa fb1c 	bl	80005e8 <__aeabi_dmul>
 8005fb0:	4b3e      	ldr	r3, [pc, #248]	; (80060ac <atan+0x324>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f7fa f962 	bl	800027c <__adddf3>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	460b      	mov	r3, r1
 8005fbc:	4630      	mov	r0, r6
 8005fbe:	4639      	mov	r1, r7
 8005fc0:	f7fa fc3c 	bl	800083c <__aeabi_ddiv>
 8005fc4:	f04f 0a02 	mov.w	sl, #2
 8005fc8:	4604      	mov	r4, r0
 8005fca:	460d      	mov	r5, r1
 8005fcc:	e743      	b.n	8005e56 <atan+0xce>
 8005fce:	462b      	mov	r3, r5
 8005fd0:	ee10 2a10 	vmov	r2, s0
 8005fd4:	4939      	ldr	r1, [pc, #228]	; (80060bc <atan+0x334>)
 8005fd6:	2000      	movs	r0, #0
 8005fd8:	f7fa fc30 	bl	800083c <__aeabi_ddiv>
 8005fdc:	f04f 0a03 	mov.w	sl, #3
 8005fe0:	4604      	mov	r4, r0
 8005fe2:	460d      	mov	r5, r1
 8005fe4:	e737      	b.n	8005e56 <atan+0xce>
 8005fe6:	4b36      	ldr	r3, [pc, #216]	; (80060c0 <atan+0x338>)
 8005fe8:	4e36      	ldr	r6, [pc, #216]	; (80060c4 <atan+0x33c>)
 8005fea:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8005fee:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8005ff2:	e9da 2300 	ldrd	r2, r3, [sl]
 8005ff6:	f7fa f93f 	bl	8000278 <__aeabi_dsub>
 8005ffa:	4622      	mov	r2, r4
 8005ffc:	462b      	mov	r3, r5
 8005ffe:	f7fa f93b 	bl	8000278 <__aeabi_dsub>
 8006002:	4602      	mov	r2, r0
 8006004:	460b      	mov	r3, r1
 8006006:	e9d6 0100 	ldrd	r0, r1, [r6]
 800600a:	f7fa f935 	bl	8000278 <__aeabi_dsub>
 800600e:	f1bb 0f00 	cmp.w	fp, #0
 8006012:	4604      	mov	r4, r0
 8006014:	460d      	mov	r5, r1
 8006016:	f6bf aed6 	bge.w	8005dc6 <atan+0x3e>
 800601a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800601e:	461d      	mov	r5, r3
 8006020:	e6d1      	b.n	8005dc6 <atan+0x3e>
 8006022:	a51d      	add	r5, pc, #116	; (adr r5, 8006098 <atan+0x310>)
 8006024:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006028:	e6cd      	b.n	8005dc6 <atan+0x3e>
 800602a:	bf00      	nop
 800602c:	f3af 8000 	nop.w
 8006030:	54442d18 	.word	0x54442d18
 8006034:	bff921fb 	.word	0xbff921fb
 8006038:	8800759c 	.word	0x8800759c
 800603c:	7e37e43c 	.word	0x7e37e43c
 8006040:	e322da11 	.word	0xe322da11
 8006044:	3f90ad3a 	.word	0x3f90ad3a
 8006048:	24760deb 	.word	0x24760deb
 800604c:	3fa97b4b 	.word	0x3fa97b4b
 8006050:	a0d03d51 	.word	0xa0d03d51
 8006054:	3fb10d66 	.word	0x3fb10d66
 8006058:	c54c206e 	.word	0xc54c206e
 800605c:	3fb745cd 	.word	0x3fb745cd
 8006060:	920083ff 	.word	0x920083ff
 8006064:	3fc24924 	.word	0x3fc24924
 8006068:	5555550d 	.word	0x5555550d
 800606c:	3fd55555 	.word	0x3fd55555
 8006070:	2c6a6c2f 	.word	0x2c6a6c2f
 8006074:	bfa2b444 	.word	0xbfa2b444
 8006078:	52defd9a 	.word	0x52defd9a
 800607c:	3fadde2d 	.word	0x3fadde2d
 8006080:	af749a6d 	.word	0xaf749a6d
 8006084:	3fb3b0f2 	.word	0x3fb3b0f2
 8006088:	fe231671 	.word	0xfe231671
 800608c:	3fbc71c6 	.word	0x3fbc71c6
 8006090:	9998ebc4 	.word	0x9998ebc4
 8006094:	3fc99999 	.word	0x3fc99999
 8006098:	54442d18 	.word	0x54442d18
 800609c:	3ff921fb 	.word	0x3ff921fb
 80060a0:	440fffff 	.word	0x440fffff
 80060a4:	7ff00000 	.word	0x7ff00000
 80060a8:	3fdbffff 	.word	0x3fdbffff
 80060ac:	3ff00000 	.word	0x3ff00000
 80060b0:	3ff2ffff 	.word	0x3ff2ffff
 80060b4:	40038000 	.word	0x40038000
 80060b8:	3ff80000 	.word	0x3ff80000
 80060bc:	bff00000 	.word	0xbff00000
 80060c0:	08007ff8 	.word	0x08007ff8
 80060c4:	08007fd8 	.word	0x08007fd8

080060c8 <cos>:
 80060c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80060ca:	ec53 2b10 	vmov	r2, r3, d0
 80060ce:	4826      	ldr	r0, [pc, #152]	; (8006168 <cos+0xa0>)
 80060d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80060d4:	4281      	cmp	r1, r0
 80060d6:	dc06      	bgt.n	80060e6 <cos+0x1e>
 80060d8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8006160 <cos+0x98>
 80060dc:	b005      	add	sp, #20
 80060de:	f85d eb04 	ldr.w	lr, [sp], #4
 80060e2:	f001 b895 	b.w	8007210 <__kernel_cos>
 80060e6:	4821      	ldr	r0, [pc, #132]	; (800616c <cos+0xa4>)
 80060e8:	4281      	cmp	r1, r0
 80060ea:	dd09      	ble.n	8006100 <cos+0x38>
 80060ec:	ee10 0a10 	vmov	r0, s0
 80060f0:	4619      	mov	r1, r3
 80060f2:	f7fa f8c1 	bl	8000278 <__aeabi_dsub>
 80060f6:	ec41 0b10 	vmov	d0, r0, r1
 80060fa:	b005      	add	sp, #20
 80060fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8006100:	4668      	mov	r0, sp
 8006102:	f000 fdc1 	bl	8006c88 <__ieee754_rem_pio2>
 8006106:	f000 0003 	and.w	r0, r0, #3
 800610a:	2801      	cmp	r0, #1
 800610c:	d00b      	beq.n	8006126 <cos+0x5e>
 800610e:	2802      	cmp	r0, #2
 8006110:	d016      	beq.n	8006140 <cos+0x78>
 8006112:	b9e0      	cbnz	r0, 800614e <cos+0x86>
 8006114:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006118:	ed9d 0b00 	vldr	d0, [sp]
 800611c:	f001 f878 	bl	8007210 <__kernel_cos>
 8006120:	ec51 0b10 	vmov	r0, r1, d0
 8006124:	e7e7      	b.n	80060f6 <cos+0x2e>
 8006126:	ed9d 1b02 	vldr	d1, [sp, #8]
 800612a:	ed9d 0b00 	vldr	d0, [sp]
 800612e:	f001 fc87 	bl	8007a40 <__kernel_sin>
 8006132:	ec53 2b10 	vmov	r2, r3, d0
 8006136:	ee10 0a10 	vmov	r0, s0
 800613a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800613e:	e7da      	b.n	80060f6 <cos+0x2e>
 8006140:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006144:	ed9d 0b00 	vldr	d0, [sp]
 8006148:	f001 f862 	bl	8007210 <__kernel_cos>
 800614c:	e7f1      	b.n	8006132 <cos+0x6a>
 800614e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006152:	ed9d 0b00 	vldr	d0, [sp]
 8006156:	2001      	movs	r0, #1
 8006158:	f001 fc72 	bl	8007a40 <__kernel_sin>
 800615c:	e7e0      	b.n	8006120 <cos+0x58>
 800615e:	bf00      	nop
	...
 8006168:	3fe921fb 	.word	0x3fe921fb
 800616c:	7fefffff 	.word	0x7fefffff

08006170 <fabs>:
 8006170:	ec51 0b10 	vmov	r0, r1, d0
 8006174:	ee10 2a10 	vmov	r2, s0
 8006178:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800617c:	ec43 2b10 	vmov	d0, r2, r3
 8006180:	4770      	bx	lr
 8006182:	0000      	movs	r0, r0
 8006184:	0000      	movs	r0, r0
	...

08006188 <sin>:
 8006188:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800618a:	ec53 2b10 	vmov	r2, r3, d0
 800618e:	4828      	ldr	r0, [pc, #160]	; (8006230 <sin+0xa8>)
 8006190:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006194:	4281      	cmp	r1, r0
 8006196:	dc07      	bgt.n	80061a8 <sin+0x20>
 8006198:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8006228 <sin+0xa0>
 800619c:	2000      	movs	r0, #0
 800619e:	b005      	add	sp, #20
 80061a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80061a4:	f001 bc4c 	b.w	8007a40 <__kernel_sin>
 80061a8:	4822      	ldr	r0, [pc, #136]	; (8006234 <sin+0xac>)
 80061aa:	4281      	cmp	r1, r0
 80061ac:	dd09      	ble.n	80061c2 <sin+0x3a>
 80061ae:	ee10 0a10 	vmov	r0, s0
 80061b2:	4619      	mov	r1, r3
 80061b4:	f7fa f860 	bl	8000278 <__aeabi_dsub>
 80061b8:	ec41 0b10 	vmov	d0, r0, r1
 80061bc:	b005      	add	sp, #20
 80061be:	f85d fb04 	ldr.w	pc, [sp], #4
 80061c2:	4668      	mov	r0, sp
 80061c4:	f000 fd60 	bl	8006c88 <__ieee754_rem_pio2>
 80061c8:	f000 0003 	and.w	r0, r0, #3
 80061cc:	2801      	cmp	r0, #1
 80061ce:	d00c      	beq.n	80061ea <sin+0x62>
 80061d0:	2802      	cmp	r0, #2
 80061d2:	d011      	beq.n	80061f8 <sin+0x70>
 80061d4:	b9f0      	cbnz	r0, 8006214 <sin+0x8c>
 80061d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80061da:	ed9d 0b00 	vldr	d0, [sp]
 80061de:	2001      	movs	r0, #1
 80061e0:	f001 fc2e 	bl	8007a40 <__kernel_sin>
 80061e4:	ec51 0b10 	vmov	r0, r1, d0
 80061e8:	e7e6      	b.n	80061b8 <sin+0x30>
 80061ea:	ed9d 1b02 	vldr	d1, [sp, #8]
 80061ee:	ed9d 0b00 	vldr	d0, [sp]
 80061f2:	f001 f80d 	bl	8007210 <__kernel_cos>
 80061f6:	e7f5      	b.n	80061e4 <sin+0x5c>
 80061f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80061fc:	ed9d 0b00 	vldr	d0, [sp]
 8006200:	2001      	movs	r0, #1
 8006202:	f001 fc1d 	bl	8007a40 <__kernel_sin>
 8006206:	ec53 2b10 	vmov	r2, r3, d0
 800620a:	ee10 0a10 	vmov	r0, s0
 800620e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006212:	e7d1      	b.n	80061b8 <sin+0x30>
 8006214:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006218:	ed9d 0b00 	vldr	d0, [sp]
 800621c:	f000 fff8 	bl	8007210 <__kernel_cos>
 8006220:	e7f1      	b.n	8006206 <sin+0x7e>
 8006222:	bf00      	nop
 8006224:	f3af 8000 	nop.w
	...
 8006230:	3fe921fb 	.word	0x3fe921fb
 8006234:	7fefffff 	.word	0x7fefffff

08006238 <acos>:
 8006238:	b538      	push	{r3, r4, r5, lr}
 800623a:	ed2d 8b02 	vpush	{d8}
 800623e:	ec55 4b10 	vmov	r4, r5, d0
 8006242:	f000 f8ad 	bl	80063a0 <__ieee754_acos>
 8006246:	4622      	mov	r2, r4
 8006248:	462b      	mov	r3, r5
 800624a:	4620      	mov	r0, r4
 800624c:	4629      	mov	r1, r5
 800624e:	eeb0 8a40 	vmov.f32	s16, s0
 8006252:	eef0 8a60 	vmov.f32	s17, s1
 8006256:	f7fa fc61 	bl	8000b1c <__aeabi_dcmpun>
 800625a:	b9a8      	cbnz	r0, 8006288 <acos+0x50>
 800625c:	ec45 4b10 	vmov	d0, r4, r5
 8006260:	f7ff ff86 	bl	8006170 <fabs>
 8006264:	4b0c      	ldr	r3, [pc, #48]	; (8006298 <acos+0x60>)
 8006266:	ec51 0b10 	vmov	r0, r1, d0
 800626a:	2200      	movs	r2, #0
 800626c:	f7fa fc4c 	bl	8000b08 <__aeabi_dcmpgt>
 8006270:	b150      	cbz	r0, 8006288 <acos+0x50>
 8006272:	f7fe fd65 	bl	8004d40 <__errno>
 8006276:	ecbd 8b02 	vpop	{d8}
 800627a:	2321      	movs	r3, #33	; 0x21
 800627c:	6003      	str	r3, [r0, #0]
 800627e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006282:	4806      	ldr	r0, [pc, #24]	; (800629c <acos+0x64>)
 8006284:	f001 bd1c 	b.w	8007cc0 <nan>
 8006288:	eeb0 0a48 	vmov.f32	s0, s16
 800628c:	eef0 0a68 	vmov.f32	s1, s17
 8006290:	ecbd 8b02 	vpop	{d8}
 8006294:	bd38      	pop	{r3, r4, r5, pc}
 8006296:	bf00      	nop
 8006298:	3ff00000 	.word	0x3ff00000
 800629c:	08007f3b 	.word	0x08007f3b

080062a0 <asin>:
 80062a0:	b538      	push	{r3, r4, r5, lr}
 80062a2:	ed2d 8b02 	vpush	{d8}
 80062a6:	ec55 4b10 	vmov	r4, r5, d0
 80062aa:	f000 fad9 	bl	8006860 <__ieee754_asin>
 80062ae:	4622      	mov	r2, r4
 80062b0:	462b      	mov	r3, r5
 80062b2:	4620      	mov	r0, r4
 80062b4:	4629      	mov	r1, r5
 80062b6:	eeb0 8a40 	vmov.f32	s16, s0
 80062ba:	eef0 8a60 	vmov.f32	s17, s1
 80062be:	f7fa fc2d 	bl	8000b1c <__aeabi_dcmpun>
 80062c2:	b9a8      	cbnz	r0, 80062f0 <asin+0x50>
 80062c4:	ec45 4b10 	vmov	d0, r4, r5
 80062c8:	f7ff ff52 	bl	8006170 <fabs>
 80062cc:	4b0c      	ldr	r3, [pc, #48]	; (8006300 <asin+0x60>)
 80062ce:	ec51 0b10 	vmov	r0, r1, d0
 80062d2:	2200      	movs	r2, #0
 80062d4:	f7fa fc18 	bl	8000b08 <__aeabi_dcmpgt>
 80062d8:	b150      	cbz	r0, 80062f0 <asin+0x50>
 80062da:	f7fe fd31 	bl	8004d40 <__errno>
 80062de:	ecbd 8b02 	vpop	{d8}
 80062e2:	2321      	movs	r3, #33	; 0x21
 80062e4:	6003      	str	r3, [r0, #0]
 80062e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062ea:	4806      	ldr	r0, [pc, #24]	; (8006304 <asin+0x64>)
 80062ec:	f001 bce8 	b.w	8007cc0 <nan>
 80062f0:	eeb0 0a48 	vmov.f32	s0, s16
 80062f4:	eef0 0a68 	vmov.f32	s1, s17
 80062f8:	ecbd 8b02 	vpop	{d8}
 80062fc:	bd38      	pop	{r3, r4, r5, pc}
 80062fe:	bf00      	nop
 8006300:	3ff00000 	.word	0x3ff00000
 8006304:	08007f3b 	.word	0x08007f3b

08006308 <sqrt>:
 8006308:	b538      	push	{r3, r4, r5, lr}
 800630a:	ed2d 8b02 	vpush	{d8}
 800630e:	ec55 4b10 	vmov	r4, r5, d0
 8006312:	f000 fec5 	bl	80070a0 <__ieee754_sqrt>
 8006316:	4622      	mov	r2, r4
 8006318:	462b      	mov	r3, r5
 800631a:	4620      	mov	r0, r4
 800631c:	4629      	mov	r1, r5
 800631e:	eeb0 8a40 	vmov.f32	s16, s0
 8006322:	eef0 8a60 	vmov.f32	s17, s1
 8006326:	f7fa fbf9 	bl	8000b1c <__aeabi_dcmpun>
 800632a:	b990      	cbnz	r0, 8006352 <sqrt+0x4a>
 800632c:	2200      	movs	r2, #0
 800632e:	2300      	movs	r3, #0
 8006330:	4620      	mov	r0, r4
 8006332:	4629      	mov	r1, r5
 8006334:	f7fa fbca 	bl	8000acc <__aeabi_dcmplt>
 8006338:	b158      	cbz	r0, 8006352 <sqrt+0x4a>
 800633a:	f7fe fd01 	bl	8004d40 <__errno>
 800633e:	2321      	movs	r3, #33	; 0x21
 8006340:	6003      	str	r3, [r0, #0]
 8006342:	2200      	movs	r2, #0
 8006344:	2300      	movs	r3, #0
 8006346:	4610      	mov	r0, r2
 8006348:	4619      	mov	r1, r3
 800634a:	f7fa fa77 	bl	800083c <__aeabi_ddiv>
 800634e:	ec41 0b18 	vmov	d8, r0, r1
 8006352:	eeb0 0a48 	vmov.f32	s0, s16
 8006356:	eef0 0a68 	vmov.f32	s1, s17
 800635a:	ecbd 8b02 	vpop	{d8}
 800635e:	bd38      	pop	{r3, r4, r5, pc}

08006360 <sqrtf>:
 8006360:	b508      	push	{r3, lr}
 8006362:	ed2d 8b02 	vpush	{d8}
 8006366:	eeb0 8a40 	vmov.f32	s16, s0
 800636a:	f000 ff4b 	bl	8007204 <__ieee754_sqrtf>
 800636e:	eeb4 8a48 	vcmp.f32	s16, s16
 8006372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006376:	d60c      	bvs.n	8006392 <sqrtf+0x32>
 8006378:	eddf 8a07 	vldr	s17, [pc, #28]	; 8006398 <sqrtf+0x38>
 800637c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006384:	d505      	bpl.n	8006392 <sqrtf+0x32>
 8006386:	f7fe fcdb 	bl	8004d40 <__errno>
 800638a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800638e:	2321      	movs	r3, #33	; 0x21
 8006390:	6003      	str	r3, [r0, #0]
 8006392:	ecbd 8b02 	vpop	{d8}
 8006396:	bd08      	pop	{r3, pc}
	...

080063a0 <__ieee754_acos>:
 80063a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063a4:	ec55 4b10 	vmov	r4, r5, d0
 80063a8:	49b7      	ldr	r1, [pc, #732]	; (8006688 <__ieee754_acos+0x2e8>)
 80063aa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80063ae:	428b      	cmp	r3, r1
 80063b0:	dd1b      	ble.n	80063ea <__ieee754_acos+0x4a>
 80063b2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 80063b6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80063ba:	4323      	orrs	r3, r4
 80063bc:	d106      	bne.n	80063cc <__ieee754_acos+0x2c>
 80063be:	2d00      	cmp	r5, #0
 80063c0:	f300 8211 	bgt.w	80067e6 <__ieee754_acos+0x446>
 80063c4:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8006620 <__ieee754_acos+0x280>
 80063c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063cc:	ee10 2a10 	vmov	r2, s0
 80063d0:	462b      	mov	r3, r5
 80063d2:	ee10 0a10 	vmov	r0, s0
 80063d6:	4629      	mov	r1, r5
 80063d8:	f7f9 ff4e 	bl	8000278 <__aeabi_dsub>
 80063dc:	4602      	mov	r2, r0
 80063de:	460b      	mov	r3, r1
 80063e0:	f7fa fa2c 	bl	800083c <__aeabi_ddiv>
 80063e4:	ec41 0b10 	vmov	d0, r0, r1
 80063e8:	e7ee      	b.n	80063c8 <__ieee754_acos+0x28>
 80063ea:	49a8      	ldr	r1, [pc, #672]	; (800668c <__ieee754_acos+0x2ec>)
 80063ec:	428b      	cmp	r3, r1
 80063ee:	f300 8087 	bgt.w	8006500 <__ieee754_acos+0x160>
 80063f2:	4aa7      	ldr	r2, [pc, #668]	; (8006690 <__ieee754_acos+0x2f0>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	f340 81f9 	ble.w	80067ec <__ieee754_acos+0x44c>
 80063fa:	ee10 2a10 	vmov	r2, s0
 80063fe:	ee10 0a10 	vmov	r0, s0
 8006402:	462b      	mov	r3, r5
 8006404:	4629      	mov	r1, r5
 8006406:	f7fa f8ef 	bl	80005e8 <__aeabi_dmul>
 800640a:	a387      	add	r3, pc, #540	; (adr r3, 8006628 <__ieee754_acos+0x288>)
 800640c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006410:	4606      	mov	r6, r0
 8006412:	460f      	mov	r7, r1
 8006414:	f7fa f8e8 	bl	80005e8 <__aeabi_dmul>
 8006418:	a385      	add	r3, pc, #532	; (adr r3, 8006630 <__ieee754_acos+0x290>)
 800641a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641e:	f7f9 ff2d 	bl	800027c <__adddf3>
 8006422:	4632      	mov	r2, r6
 8006424:	463b      	mov	r3, r7
 8006426:	f7fa f8df 	bl	80005e8 <__aeabi_dmul>
 800642a:	a383      	add	r3, pc, #524	; (adr r3, 8006638 <__ieee754_acos+0x298>)
 800642c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006430:	f7f9 ff22 	bl	8000278 <__aeabi_dsub>
 8006434:	4632      	mov	r2, r6
 8006436:	463b      	mov	r3, r7
 8006438:	f7fa f8d6 	bl	80005e8 <__aeabi_dmul>
 800643c:	a380      	add	r3, pc, #512	; (adr r3, 8006640 <__ieee754_acos+0x2a0>)
 800643e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006442:	f7f9 ff1b 	bl	800027c <__adddf3>
 8006446:	4632      	mov	r2, r6
 8006448:	463b      	mov	r3, r7
 800644a:	f7fa f8cd 	bl	80005e8 <__aeabi_dmul>
 800644e:	a37e      	add	r3, pc, #504	; (adr r3, 8006648 <__ieee754_acos+0x2a8>)
 8006450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006454:	f7f9 ff10 	bl	8000278 <__aeabi_dsub>
 8006458:	4632      	mov	r2, r6
 800645a:	463b      	mov	r3, r7
 800645c:	f7fa f8c4 	bl	80005e8 <__aeabi_dmul>
 8006460:	a37b      	add	r3, pc, #492	; (adr r3, 8006650 <__ieee754_acos+0x2b0>)
 8006462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006466:	f7f9 ff09 	bl	800027c <__adddf3>
 800646a:	4632      	mov	r2, r6
 800646c:	463b      	mov	r3, r7
 800646e:	f7fa f8bb 	bl	80005e8 <__aeabi_dmul>
 8006472:	a379      	add	r3, pc, #484	; (adr r3, 8006658 <__ieee754_acos+0x2b8>)
 8006474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006478:	4680      	mov	r8, r0
 800647a:	4689      	mov	r9, r1
 800647c:	4630      	mov	r0, r6
 800647e:	4639      	mov	r1, r7
 8006480:	f7fa f8b2 	bl	80005e8 <__aeabi_dmul>
 8006484:	a376      	add	r3, pc, #472	; (adr r3, 8006660 <__ieee754_acos+0x2c0>)
 8006486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648a:	f7f9 fef5 	bl	8000278 <__aeabi_dsub>
 800648e:	4632      	mov	r2, r6
 8006490:	463b      	mov	r3, r7
 8006492:	f7fa f8a9 	bl	80005e8 <__aeabi_dmul>
 8006496:	a374      	add	r3, pc, #464	; (adr r3, 8006668 <__ieee754_acos+0x2c8>)
 8006498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649c:	f7f9 feee 	bl	800027c <__adddf3>
 80064a0:	4632      	mov	r2, r6
 80064a2:	463b      	mov	r3, r7
 80064a4:	f7fa f8a0 	bl	80005e8 <__aeabi_dmul>
 80064a8:	a371      	add	r3, pc, #452	; (adr r3, 8006670 <__ieee754_acos+0x2d0>)
 80064aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ae:	f7f9 fee3 	bl	8000278 <__aeabi_dsub>
 80064b2:	4632      	mov	r2, r6
 80064b4:	463b      	mov	r3, r7
 80064b6:	f7fa f897 	bl	80005e8 <__aeabi_dmul>
 80064ba:	4b76      	ldr	r3, [pc, #472]	; (8006694 <__ieee754_acos+0x2f4>)
 80064bc:	2200      	movs	r2, #0
 80064be:	f7f9 fedd 	bl	800027c <__adddf3>
 80064c2:	4602      	mov	r2, r0
 80064c4:	460b      	mov	r3, r1
 80064c6:	4640      	mov	r0, r8
 80064c8:	4649      	mov	r1, r9
 80064ca:	f7fa f9b7 	bl	800083c <__aeabi_ddiv>
 80064ce:	4622      	mov	r2, r4
 80064d0:	462b      	mov	r3, r5
 80064d2:	f7fa f889 	bl	80005e8 <__aeabi_dmul>
 80064d6:	4602      	mov	r2, r0
 80064d8:	460b      	mov	r3, r1
 80064da:	a167      	add	r1, pc, #412	; (adr r1, 8006678 <__ieee754_acos+0x2d8>)
 80064dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064e0:	f7f9 feca 	bl	8000278 <__aeabi_dsub>
 80064e4:	4602      	mov	r2, r0
 80064e6:	460b      	mov	r3, r1
 80064e8:	4620      	mov	r0, r4
 80064ea:	4629      	mov	r1, r5
 80064ec:	f7f9 fec4 	bl	8000278 <__aeabi_dsub>
 80064f0:	4602      	mov	r2, r0
 80064f2:	460b      	mov	r3, r1
 80064f4:	a162      	add	r1, pc, #392	; (adr r1, 8006680 <__ieee754_acos+0x2e0>)
 80064f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064fa:	f7f9 febd 	bl	8000278 <__aeabi_dsub>
 80064fe:	e771      	b.n	80063e4 <__ieee754_acos+0x44>
 8006500:	2d00      	cmp	r5, #0
 8006502:	f280 80cb 	bge.w	800669c <__ieee754_acos+0x2fc>
 8006506:	ee10 0a10 	vmov	r0, s0
 800650a:	4b62      	ldr	r3, [pc, #392]	; (8006694 <__ieee754_acos+0x2f4>)
 800650c:	2200      	movs	r2, #0
 800650e:	4629      	mov	r1, r5
 8006510:	f7f9 feb4 	bl	800027c <__adddf3>
 8006514:	4b60      	ldr	r3, [pc, #384]	; (8006698 <__ieee754_acos+0x2f8>)
 8006516:	2200      	movs	r2, #0
 8006518:	f7fa f866 	bl	80005e8 <__aeabi_dmul>
 800651c:	a342      	add	r3, pc, #264	; (adr r3, 8006628 <__ieee754_acos+0x288>)
 800651e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006522:	4604      	mov	r4, r0
 8006524:	460d      	mov	r5, r1
 8006526:	f7fa f85f 	bl	80005e8 <__aeabi_dmul>
 800652a:	a341      	add	r3, pc, #260	; (adr r3, 8006630 <__ieee754_acos+0x290>)
 800652c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006530:	f7f9 fea4 	bl	800027c <__adddf3>
 8006534:	4622      	mov	r2, r4
 8006536:	462b      	mov	r3, r5
 8006538:	f7fa f856 	bl	80005e8 <__aeabi_dmul>
 800653c:	a33e      	add	r3, pc, #248	; (adr r3, 8006638 <__ieee754_acos+0x298>)
 800653e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006542:	f7f9 fe99 	bl	8000278 <__aeabi_dsub>
 8006546:	4622      	mov	r2, r4
 8006548:	462b      	mov	r3, r5
 800654a:	f7fa f84d 	bl	80005e8 <__aeabi_dmul>
 800654e:	a33c      	add	r3, pc, #240	; (adr r3, 8006640 <__ieee754_acos+0x2a0>)
 8006550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006554:	f7f9 fe92 	bl	800027c <__adddf3>
 8006558:	4622      	mov	r2, r4
 800655a:	462b      	mov	r3, r5
 800655c:	f7fa f844 	bl	80005e8 <__aeabi_dmul>
 8006560:	a339      	add	r3, pc, #228	; (adr r3, 8006648 <__ieee754_acos+0x2a8>)
 8006562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006566:	f7f9 fe87 	bl	8000278 <__aeabi_dsub>
 800656a:	4622      	mov	r2, r4
 800656c:	462b      	mov	r3, r5
 800656e:	f7fa f83b 	bl	80005e8 <__aeabi_dmul>
 8006572:	a337      	add	r3, pc, #220	; (adr r3, 8006650 <__ieee754_acos+0x2b0>)
 8006574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006578:	f7f9 fe80 	bl	800027c <__adddf3>
 800657c:	4622      	mov	r2, r4
 800657e:	462b      	mov	r3, r5
 8006580:	f7fa f832 	bl	80005e8 <__aeabi_dmul>
 8006584:	ec45 4b10 	vmov	d0, r4, r5
 8006588:	4680      	mov	r8, r0
 800658a:	4689      	mov	r9, r1
 800658c:	f000 fd88 	bl	80070a0 <__ieee754_sqrt>
 8006590:	a331      	add	r3, pc, #196	; (adr r3, 8006658 <__ieee754_acos+0x2b8>)
 8006592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006596:	4620      	mov	r0, r4
 8006598:	4629      	mov	r1, r5
 800659a:	ec57 6b10 	vmov	r6, r7, d0
 800659e:	f7fa f823 	bl	80005e8 <__aeabi_dmul>
 80065a2:	a32f      	add	r3, pc, #188	; (adr r3, 8006660 <__ieee754_acos+0x2c0>)
 80065a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a8:	f7f9 fe66 	bl	8000278 <__aeabi_dsub>
 80065ac:	4622      	mov	r2, r4
 80065ae:	462b      	mov	r3, r5
 80065b0:	f7fa f81a 	bl	80005e8 <__aeabi_dmul>
 80065b4:	a32c      	add	r3, pc, #176	; (adr r3, 8006668 <__ieee754_acos+0x2c8>)
 80065b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ba:	f7f9 fe5f 	bl	800027c <__adddf3>
 80065be:	4622      	mov	r2, r4
 80065c0:	462b      	mov	r3, r5
 80065c2:	f7fa f811 	bl	80005e8 <__aeabi_dmul>
 80065c6:	a32a      	add	r3, pc, #168	; (adr r3, 8006670 <__ieee754_acos+0x2d0>)
 80065c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065cc:	f7f9 fe54 	bl	8000278 <__aeabi_dsub>
 80065d0:	4622      	mov	r2, r4
 80065d2:	462b      	mov	r3, r5
 80065d4:	f7fa f808 	bl	80005e8 <__aeabi_dmul>
 80065d8:	4b2e      	ldr	r3, [pc, #184]	; (8006694 <__ieee754_acos+0x2f4>)
 80065da:	2200      	movs	r2, #0
 80065dc:	f7f9 fe4e 	bl	800027c <__adddf3>
 80065e0:	4602      	mov	r2, r0
 80065e2:	460b      	mov	r3, r1
 80065e4:	4640      	mov	r0, r8
 80065e6:	4649      	mov	r1, r9
 80065e8:	f7fa f928 	bl	800083c <__aeabi_ddiv>
 80065ec:	4632      	mov	r2, r6
 80065ee:	463b      	mov	r3, r7
 80065f0:	f7f9 fffa 	bl	80005e8 <__aeabi_dmul>
 80065f4:	a320      	add	r3, pc, #128	; (adr r3, 8006678 <__ieee754_acos+0x2d8>)
 80065f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fa:	f7f9 fe3d 	bl	8000278 <__aeabi_dsub>
 80065fe:	4632      	mov	r2, r6
 8006600:	463b      	mov	r3, r7
 8006602:	f7f9 fe3b 	bl	800027c <__adddf3>
 8006606:	4602      	mov	r2, r0
 8006608:	460b      	mov	r3, r1
 800660a:	f7f9 fe37 	bl	800027c <__adddf3>
 800660e:	4602      	mov	r2, r0
 8006610:	460b      	mov	r3, r1
 8006612:	a103      	add	r1, pc, #12	; (adr r1, 8006620 <__ieee754_acos+0x280>)
 8006614:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006618:	e76f      	b.n	80064fa <__ieee754_acos+0x15a>
 800661a:	bf00      	nop
 800661c:	f3af 8000 	nop.w
 8006620:	54442d18 	.word	0x54442d18
 8006624:	400921fb 	.word	0x400921fb
 8006628:	0dfdf709 	.word	0x0dfdf709
 800662c:	3f023de1 	.word	0x3f023de1
 8006630:	7501b288 	.word	0x7501b288
 8006634:	3f49efe0 	.word	0x3f49efe0
 8006638:	b5688f3b 	.word	0xb5688f3b
 800663c:	3fa48228 	.word	0x3fa48228
 8006640:	0e884455 	.word	0x0e884455
 8006644:	3fc9c155 	.word	0x3fc9c155
 8006648:	03eb6f7d 	.word	0x03eb6f7d
 800664c:	3fd4d612 	.word	0x3fd4d612
 8006650:	55555555 	.word	0x55555555
 8006654:	3fc55555 	.word	0x3fc55555
 8006658:	b12e9282 	.word	0xb12e9282
 800665c:	3fb3b8c5 	.word	0x3fb3b8c5
 8006660:	1b8d0159 	.word	0x1b8d0159
 8006664:	3fe6066c 	.word	0x3fe6066c
 8006668:	9c598ac8 	.word	0x9c598ac8
 800666c:	40002ae5 	.word	0x40002ae5
 8006670:	1c8a2d4b 	.word	0x1c8a2d4b
 8006674:	40033a27 	.word	0x40033a27
 8006678:	33145c07 	.word	0x33145c07
 800667c:	3c91a626 	.word	0x3c91a626
 8006680:	54442d18 	.word	0x54442d18
 8006684:	3ff921fb 	.word	0x3ff921fb
 8006688:	3fefffff 	.word	0x3fefffff
 800668c:	3fdfffff 	.word	0x3fdfffff
 8006690:	3c600000 	.word	0x3c600000
 8006694:	3ff00000 	.word	0x3ff00000
 8006698:	3fe00000 	.word	0x3fe00000
 800669c:	ee10 2a10 	vmov	r2, s0
 80066a0:	462b      	mov	r3, r5
 80066a2:	496d      	ldr	r1, [pc, #436]	; (8006858 <__ieee754_acos+0x4b8>)
 80066a4:	2000      	movs	r0, #0
 80066a6:	f7f9 fde7 	bl	8000278 <__aeabi_dsub>
 80066aa:	4b6c      	ldr	r3, [pc, #432]	; (800685c <__ieee754_acos+0x4bc>)
 80066ac:	2200      	movs	r2, #0
 80066ae:	f7f9 ff9b 	bl	80005e8 <__aeabi_dmul>
 80066b2:	4604      	mov	r4, r0
 80066b4:	460d      	mov	r5, r1
 80066b6:	ec45 4b10 	vmov	d0, r4, r5
 80066ba:	f000 fcf1 	bl	80070a0 <__ieee754_sqrt>
 80066be:	a34e      	add	r3, pc, #312	; (adr r3, 80067f8 <__ieee754_acos+0x458>)
 80066c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c4:	4620      	mov	r0, r4
 80066c6:	4629      	mov	r1, r5
 80066c8:	ec59 8b10 	vmov	r8, r9, d0
 80066cc:	f7f9 ff8c 	bl	80005e8 <__aeabi_dmul>
 80066d0:	a34b      	add	r3, pc, #300	; (adr r3, 8006800 <__ieee754_acos+0x460>)
 80066d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d6:	f7f9 fdd1 	bl	800027c <__adddf3>
 80066da:	4622      	mov	r2, r4
 80066dc:	462b      	mov	r3, r5
 80066de:	f7f9 ff83 	bl	80005e8 <__aeabi_dmul>
 80066e2:	a349      	add	r3, pc, #292	; (adr r3, 8006808 <__ieee754_acos+0x468>)
 80066e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e8:	f7f9 fdc6 	bl	8000278 <__aeabi_dsub>
 80066ec:	4622      	mov	r2, r4
 80066ee:	462b      	mov	r3, r5
 80066f0:	f7f9 ff7a 	bl	80005e8 <__aeabi_dmul>
 80066f4:	a346      	add	r3, pc, #280	; (adr r3, 8006810 <__ieee754_acos+0x470>)
 80066f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fa:	f7f9 fdbf 	bl	800027c <__adddf3>
 80066fe:	4622      	mov	r2, r4
 8006700:	462b      	mov	r3, r5
 8006702:	f7f9 ff71 	bl	80005e8 <__aeabi_dmul>
 8006706:	a344      	add	r3, pc, #272	; (adr r3, 8006818 <__ieee754_acos+0x478>)
 8006708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670c:	f7f9 fdb4 	bl	8000278 <__aeabi_dsub>
 8006710:	4622      	mov	r2, r4
 8006712:	462b      	mov	r3, r5
 8006714:	f7f9 ff68 	bl	80005e8 <__aeabi_dmul>
 8006718:	a341      	add	r3, pc, #260	; (adr r3, 8006820 <__ieee754_acos+0x480>)
 800671a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671e:	f7f9 fdad 	bl	800027c <__adddf3>
 8006722:	4622      	mov	r2, r4
 8006724:	462b      	mov	r3, r5
 8006726:	f7f9 ff5f 	bl	80005e8 <__aeabi_dmul>
 800672a:	a33f      	add	r3, pc, #252	; (adr r3, 8006828 <__ieee754_acos+0x488>)
 800672c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006730:	4682      	mov	sl, r0
 8006732:	468b      	mov	fp, r1
 8006734:	4620      	mov	r0, r4
 8006736:	4629      	mov	r1, r5
 8006738:	f7f9 ff56 	bl	80005e8 <__aeabi_dmul>
 800673c:	a33c      	add	r3, pc, #240	; (adr r3, 8006830 <__ieee754_acos+0x490>)
 800673e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006742:	f7f9 fd99 	bl	8000278 <__aeabi_dsub>
 8006746:	4622      	mov	r2, r4
 8006748:	462b      	mov	r3, r5
 800674a:	f7f9 ff4d 	bl	80005e8 <__aeabi_dmul>
 800674e:	a33a      	add	r3, pc, #232	; (adr r3, 8006838 <__ieee754_acos+0x498>)
 8006750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006754:	f7f9 fd92 	bl	800027c <__adddf3>
 8006758:	4622      	mov	r2, r4
 800675a:	462b      	mov	r3, r5
 800675c:	f7f9 ff44 	bl	80005e8 <__aeabi_dmul>
 8006760:	a337      	add	r3, pc, #220	; (adr r3, 8006840 <__ieee754_acos+0x4a0>)
 8006762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006766:	f7f9 fd87 	bl	8000278 <__aeabi_dsub>
 800676a:	4622      	mov	r2, r4
 800676c:	462b      	mov	r3, r5
 800676e:	f7f9 ff3b 	bl	80005e8 <__aeabi_dmul>
 8006772:	4b39      	ldr	r3, [pc, #228]	; (8006858 <__ieee754_acos+0x4b8>)
 8006774:	2200      	movs	r2, #0
 8006776:	f7f9 fd81 	bl	800027c <__adddf3>
 800677a:	4602      	mov	r2, r0
 800677c:	460b      	mov	r3, r1
 800677e:	4650      	mov	r0, sl
 8006780:	4659      	mov	r1, fp
 8006782:	f7fa f85b 	bl	800083c <__aeabi_ddiv>
 8006786:	4642      	mov	r2, r8
 8006788:	464b      	mov	r3, r9
 800678a:	f7f9 ff2d 	bl	80005e8 <__aeabi_dmul>
 800678e:	2600      	movs	r6, #0
 8006790:	4682      	mov	sl, r0
 8006792:	468b      	mov	fp, r1
 8006794:	4632      	mov	r2, r6
 8006796:	464b      	mov	r3, r9
 8006798:	4630      	mov	r0, r6
 800679a:	4649      	mov	r1, r9
 800679c:	f7f9 ff24 	bl	80005e8 <__aeabi_dmul>
 80067a0:	4602      	mov	r2, r0
 80067a2:	460b      	mov	r3, r1
 80067a4:	4620      	mov	r0, r4
 80067a6:	4629      	mov	r1, r5
 80067a8:	f7f9 fd66 	bl	8000278 <__aeabi_dsub>
 80067ac:	4632      	mov	r2, r6
 80067ae:	4604      	mov	r4, r0
 80067b0:	460d      	mov	r5, r1
 80067b2:	464b      	mov	r3, r9
 80067b4:	4640      	mov	r0, r8
 80067b6:	4649      	mov	r1, r9
 80067b8:	f7f9 fd60 	bl	800027c <__adddf3>
 80067bc:	4602      	mov	r2, r0
 80067be:	460b      	mov	r3, r1
 80067c0:	4620      	mov	r0, r4
 80067c2:	4629      	mov	r1, r5
 80067c4:	f7fa f83a 	bl	800083c <__aeabi_ddiv>
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	4650      	mov	r0, sl
 80067ce:	4659      	mov	r1, fp
 80067d0:	f7f9 fd54 	bl	800027c <__adddf3>
 80067d4:	4632      	mov	r2, r6
 80067d6:	464b      	mov	r3, r9
 80067d8:	f7f9 fd50 	bl	800027c <__adddf3>
 80067dc:	4602      	mov	r2, r0
 80067de:	460b      	mov	r3, r1
 80067e0:	f7f9 fd4c 	bl	800027c <__adddf3>
 80067e4:	e5fe      	b.n	80063e4 <__ieee754_acos+0x44>
 80067e6:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8006848 <__ieee754_acos+0x4a8>
 80067ea:	e5ed      	b.n	80063c8 <__ieee754_acos+0x28>
 80067ec:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8006850 <__ieee754_acos+0x4b0>
 80067f0:	e5ea      	b.n	80063c8 <__ieee754_acos+0x28>
 80067f2:	bf00      	nop
 80067f4:	f3af 8000 	nop.w
 80067f8:	0dfdf709 	.word	0x0dfdf709
 80067fc:	3f023de1 	.word	0x3f023de1
 8006800:	7501b288 	.word	0x7501b288
 8006804:	3f49efe0 	.word	0x3f49efe0
 8006808:	b5688f3b 	.word	0xb5688f3b
 800680c:	3fa48228 	.word	0x3fa48228
 8006810:	0e884455 	.word	0x0e884455
 8006814:	3fc9c155 	.word	0x3fc9c155
 8006818:	03eb6f7d 	.word	0x03eb6f7d
 800681c:	3fd4d612 	.word	0x3fd4d612
 8006820:	55555555 	.word	0x55555555
 8006824:	3fc55555 	.word	0x3fc55555
 8006828:	b12e9282 	.word	0xb12e9282
 800682c:	3fb3b8c5 	.word	0x3fb3b8c5
 8006830:	1b8d0159 	.word	0x1b8d0159
 8006834:	3fe6066c 	.word	0x3fe6066c
 8006838:	9c598ac8 	.word	0x9c598ac8
 800683c:	40002ae5 	.word	0x40002ae5
 8006840:	1c8a2d4b 	.word	0x1c8a2d4b
 8006844:	40033a27 	.word	0x40033a27
	...
 8006850:	54442d18 	.word	0x54442d18
 8006854:	3ff921fb 	.word	0x3ff921fb
 8006858:	3ff00000 	.word	0x3ff00000
 800685c:	3fe00000 	.word	0x3fe00000

08006860 <__ieee754_asin>:
 8006860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006864:	ed2d 8b04 	vpush	{d8-d9}
 8006868:	ec55 4b10 	vmov	r4, r5, d0
 800686c:	4bcc      	ldr	r3, [pc, #816]	; (8006ba0 <__ieee754_asin+0x340>)
 800686e:	b083      	sub	sp, #12
 8006870:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006874:	4598      	cmp	r8, r3
 8006876:	9501      	str	r5, [sp, #4]
 8006878:	dd35      	ble.n	80068e6 <__ieee754_asin+0x86>
 800687a:	ee10 3a10 	vmov	r3, s0
 800687e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8006882:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8006886:	ea58 0303 	orrs.w	r3, r8, r3
 800688a:	d117      	bne.n	80068bc <__ieee754_asin+0x5c>
 800688c:	a3aa      	add	r3, pc, #680	; (adr r3, 8006b38 <__ieee754_asin+0x2d8>)
 800688e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006892:	ee10 0a10 	vmov	r0, s0
 8006896:	4629      	mov	r1, r5
 8006898:	f7f9 fea6 	bl	80005e8 <__aeabi_dmul>
 800689c:	a3a8      	add	r3, pc, #672	; (adr r3, 8006b40 <__ieee754_asin+0x2e0>)
 800689e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a2:	4606      	mov	r6, r0
 80068a4:	460f      	mov	r7, r1
 80068a6:	4620      	mov	r0, r4
 80068a8:	4629      	mov	r1, r5
 80068aa:	f7f9 fe9d 	bl	80005e8 <__aeabi_dmul>
 80068ae:	4602      	mov	r2, r0
 80068b0:	460b      	mov	r3, r1
 80068b2:	4630      	mov	r0, r6
 80068b4:	4639      	mov	r1, r7
 80068b6:	f7f9 fce1 	bl	800027c <__adddf3>
 80068ba:	e00b      	b.n	80068d4 <__ieee754_asin+0x74>
 80068bc:	ee10 2a10 	vmov	r2, s0
 80068c0:	462b      	mov	r3, r5
 80068c2:	ee10 0a10 	vmov	r0, s0
 80068c6:	4629      	mov	r1, r5
 80068c8:	f7f9 fcd6 	bl	8000278 <__aeabi_dsub>
 80068cc:	4602      	mov	r2, r0
 80068ce:	460b      	mov	r3, r1
 80068d0:	f7f9 ffb4 	bl	800083c <__aeabi_ddiv>
 80068d4:	4604      	mov	r4, r0
 80068d6:	460d      	mov	r5, r1
 80068d8:	ec45 4b10 	vmov	d0, r4, r5
 80068dc:	b003      	add	sp, #12
 80068de:	ecbd 8b04 	vpop	{d8-d9}
 80068e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068e6:	4baf      	ldr	r3, [pc, #700]	; (8006ba4 <__ieee754_asin+0x344>)
 80068e8:	4598      	cmp	r8, r3
 80068ea:	dc11      	bgt.n	8006910 <__ieee754_asin+0xb0>
 80068ec:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80068f0:	f280 80ae 	bge.w	8006a50 <__ieee754_asin+0x1f0>
 80068f4:	a394      	add	r3, pc, #592	; (adr r3, 8006b48 <__ieee754_asin+0x2e8>)
 80068f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fa:	ee10 0a10 	vmov	r0, s0
 80068fe:	4629      	mov	r1, r5
 8006900:	f7f9 fcbc 	bl	800027c <__adddf3>
 8006904:	4ba8      	ldr	r3, [pc, #672]	; (8006ba8 <__ieee754_asin+0x348>)
 8006906:	2200      	movs	r2, #0
 8006908:	f7fa f8fe 	bl	8000b08 <__aeabi_dcmpgt>
 800690c:	2800      	cmp	r0, #0
 800690e:	d1e3      	bne.n	80068d8 <__ieee754_asin+0x78>
 8006910:	ec45 4b10 	vmov	d0, r4, r5
 8006914:	f7ff fc2c 	bl	8006170 <fabs>
 8006918:	49a3      	ldr	r1, [pc, #652]	; (8006ba8 <__ieee754_asin+0x348>)
 800691a:	ec53 2b10 	vmov	r2, r3, d0
 800691e:	2000      	movs	r0, #0
 8006920:	f7f9 fcaa 	bl	8000278 <__aeabi_dsub>
 8006924:	4ba1      	ldr	r3, [pc, #644]	; (8006bac <__ieee754_asin+0x34c>)
 8006926:	2200      	movs	r2, #0
 8006928:	f7f9 fe5e 	bl	80005e8 <__aeabi_dmul>
 800692c:	a388      	add	r3, pc, #544	; (adr r3, 8006b50 <__ieee754_asin+0x2f0>)
 800692e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006932:	4604      	mov	r4, r0
 8006934:	460d      	mov	r5, r1
 8006936:	f7f9 fe57 	bl	80005e8 <__aeabi_dmul>
 800693a:	a387      	add	r3, pc, #540	; (adr r3, 8006b58 <__ieee754_asin+0x2f8>)
 800693c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006940:	f7f9 fc9c 	bl	800027c <__adddf3>
 8006944:	4622      	mov	r2, r4
 8006946:	462b      	mov	r3, r5
 8006948:	f7f9 fe4e 	bl	80005e8 <__aeabi_dmul>
 800694c:	a384      	add	r3, pc, #528	; (adr r3, 8006b60 <__ieee754_asin+0x300>)
 800694e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006952:	f7f9 fc91 	bl	8000278 <__aeabi_dsub>
 8006956:	4622      	mov	r2, r4
 8006958:	462b      	mov	r3, r5
 800695a:	f7f9 fe45 	bl	80005e8 <__aeabi_dmul>
 800695e:	a382      	add	r3, pc, #520	; (adr r3, 8006b68 <__ieee754_asin+0x308>)
 8006960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006964:	f7f9 fc8a 	bl	800027c <__adddf3>
 8006968:	4622      	mov	r2, r4
 800696a:	462b      	mov	r3, r5
 800696c:	f7f9 fe3c 	bl	80005e8 <__aeabi_dmul>
 8006970:	a37f      	add	r3, pc, #508	; (adr r3, 8006b70 <__ieee754_asin+0x310>)
 8006972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006976:	f7f9 fc7f 	bl	8000278 <__aeabi_dsub>
 800697a:	4622      	mov	r2, r4
 800697c:	462b      	mov	r3, r5
 800697e:	f7f9 fe33 	bl	80005e8 <__aeabi_dmul>
 8006982:	a37d      	add	r3, pc, #500	; (adr r3, 8006b78 <__ieee754_asin+0x318>)
 8006984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006988:	f7f9 fc78 	bl	800027c <__adddf3>
 800698c:	4622      	mov	r2, r4
 800698e:	462b      	mov	r3, r5
 8006990:	f7f9 fe2a 	bl	80005e8 <__aeabi_dmul>
 8006994:	a37a      	add	r3, pc, #488	; (adr r3, 8006b80 <__ieee754_asin+0x320>)
 8006996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699a:	ec41 0b18 	vmov	d8, r0, r1
 800699e:	4620      	mov	r0, r4
 80069a0:	4629      	mov	r1, r5
 80069a2:	f7f9 fe21 	bl	80005e8 <__aeabi_dmul>
 80069a6:	a378      	add	r3, pc, #480	; (adr r3, 8006b88 <__ieee754_asin+0x328>)
 80069a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ac:	f7f9 fc64 	bl	8000278 <__aeabi_dsub>
 80069b0:	4622      	mov	r2, r4
 80069b2:	462b      	mov	r3, r5
 80069b4:	f7f9 fe18 	bl	80005e8 <__aeabi_dmul>
 80069b8:	a375      	add	r3, pc, #468	; (adr r3, 8006b90 <__ieee754_asin+0x330>)
 80069ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069be:	f7f9 fc5d 	bl	800027c <__adddf3>
 80069c2:	4622      	mov	r2, r4
 80069c4:	462b      	mov	r3, r5
 80069c6:	f7f9 fe0f 	bl	80005e8 <__aeabi_dmul>
 80069ca:	a373      	add	r3, pc, #460	; (adr r3, 8006b98 <__ieee754_asin+0x338>)
 80069cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d0:	f7f9 fc52 	bl	8000278 <__aeabi_dsub>
 80069d4:	4622      	mov	r2, r4
 80069d6:	462b      	mov	r3, r5
 80069d8:	f7f9 fe06 	bl	80005e8 <__aeabi_dmul>
 80069dc:	4b72      	ldr	r3, [pc, #456]	; (8006ba8 <__ieee754_asin+0x348>)
 80069de:	2200      	movs	r2, #0
 80069e0:	f7f9 fc4c 	bl	800027c <__adddf3>
 80069e4:	ec45 4b10 	vmov	d0, r4, r5
 80069e8:	4606      	mov	r6, r0
 80069ea:	460f      	mov	r7, r1
 80069ec:	f000 fb58 	bl	80070a0 <__ieee754_sqrt>
 80069f0:	4b6f      	ldr	r3, [pc, #444]	; (8006bb0 <__ieee754_asin+0x350>)
 80069f2:	4598      	cmp	r8, r3
 80069f4:	ec5b ab10 	vmov	sl, fp, d0
 80069f8:	f340 80dc 	ble.w	8006bb4 <__ieee754_asin+0x354>
 80069fc:	4632      	mov	r2, r6
 80069fe:	463b      	mov	r3, r7
 8006a00:	ec51 0b18 	vmov	r0, r1, d8
 8006a04:	f7f9 ff1a 	bl	800083c <__aeabi_ddiv>
 8006a08:	4652      	mov	r2, sl
 8006a0a:	465b      	mov	r3, fp
 8006a0c:	f7f9 fdec 	bl	80005e8 <__aeabi_dmul>
 8006a10:	4652      	mov	r2, sl
 8006a12:	465b      	mov	r3, fp
 8006a14:	f7f9 fc32 	bl	800027c <__adddf3>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	f7f9 fc2e 	bl	800027c <__adddf3>
 8006a20:	a347      	add	r3, pc, #284	; (adr r3, 8006b40 <__ieee754_asin+0x2e0>)
 8006a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a26:	f7f9 fc27 	bl	8000278 <__aeabi_dsub>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	a142      	add	r1, pc, #264	; (adr r1, 8006b38 <__ieee754_asin+0x2d8>)
 8006a30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a34:	f7f9 fc20 	bl	8000278 <__aeabi_dsub>
 8006a38:	9b01      	ldr	r3, [sp, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	bfdc      	itt	le
 8006a3e:	4602      	movle	r2, r0
 8006a40:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8006a44:	4604      	mov	r4, r0
 8006a46:	460d      	mov	r5, r1
 8006a48:	bfdc      	itt	le
 8006a4a:	4614      	movle	r4, r2
 8006a4c:	461d      	movle	r5, r3
 8006a4e:	e743      	b.n	80068d8 <__ieee754_asin+0x78>
 8006a50:	ee10 2a10 	vmov	r2, s0
 8006a54:	ee10 0a10 	vmov	r0, s0
 8006a58:	462b      	mov	r3, r5
 8006a5a:	4629      	mov	r1, r5
 8006a5c:	f7f9 fdc4 	bl	80005e8 <__aeabi_dmul>
 8006a60:	a33b      	add	r3, pc, #236	; (adr r3, 8006b50 <__ieee754_asin+0x2f0>)
 8006a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a66:	4606      	mov	r6, r0
 8006a68:	460f      	mov	r7, r1
 8006a6a:	f7f9 fdbd 	bl	80005e8 <__aeabi_dmul>
 8006a6e:	a33a      	add	r3, pc, #232	; (adr r3, 8006b58 <__ieee754_asin+0x2f8>)
 8006a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a74:	f7f9 fc02 	bl	800027c <__adddf3>
 8006a78:	4632      	mov	r2, r6
 8006a7a:	463b      	mov	r3, r7
 8006a7c:	f7f9 fdb4 	bl	80005e8 <__aeabi_dmul>
 8006a80:	a337      	add	r3, pc, #220	; (adr r3, 8006b60 <__ieee754_asin+0x300>)
 8006a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a86:	f7f9 fbf7 	bl	8000278 <__aeabi_dsub>
 8006a8a:	4632      	mov	r2, r6
 8006a8c:	463b      	mov	r3, r7
 8006a8e:	f7f9 fdab 	bl	80005e8 <__aeabi_dmul>
 8006a92:	a335      	add	r3, pc, #212	; (adr r3, 8006b68 <__ieee754_asin+0x308>)
 8006a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a98:	f7f9 fbf0 	bl	800027c <__adddf3>
 8006a9c:	4632      	mov	r2, r6
 8006a9e:	463b      	mov	r3, r7
 8006aa0:	f7f9 fda2 	bl	80005e8 <__aeabi_dmul>
 8006aa4:	a332      	add	r3, pc, #200	; (adr r3, 8006b70 <__ieee754_asin+0x310>)
 8006aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aaa:	f7f9 fbe5 	bl	8000278 <__aeabi_dsub>
 8006aae:	4632      	mov	r2, r6
 8006ab0:	463b      	mov	r3, r7
 8006ab2:	f7f9 fd99 	bl	80005e8 <__aeabi_dmul>
 8006ab6:	a330      	add	r3, pc, #192	; (adr r3, 8006b78 <__ieee754_asin+0x318>)
 8006ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abc:	f7f9 fbde 	bl	800027c <__adddf3>
 8006ac0:	4632      	mov	r2, r6
 8006ac2:	463b      	mov	r3, r7
 8006ac4:	f7f9 fd90 	bl	80005e8 <__aeabi_dmul>
 8006ac8:	a32d      	add	r3, pc, #180	; (adr r3, 8006b80 <__ieee754_asin+0x320>)
 8006aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ace:	4680      	mov	r8, r0
 8006ad0:	4689      	mov	r9, r1
 8006ad2:	4630      	mov	r0, r6
 8006ad4:	4639      	mov	r1, r7
 8006ad6:	f7f9 fd87 	bl	80005e8 <__aeabi_dmul>
 8006ada:	a32b      	add	r3, pc, #172	; (adr r3, 8006b88 <__ieee754_asin+0x328>)
 8006adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae0:	f7f9 fbca 	bl	8000278 <__aeabi_dsub>
 8006ae4:	4632      	mov	r2, r6
 8006ae6:	463b      	mov	r3, r7
 8006ae8:	f7f9 fd7e 	bl	80005e8 <__aeabi_dmul>
 8006aec:	a328      	add	r3, pc, #160	; (adr r3, 8006b90 <__ieee754_asin+0x330>)
 8006aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af2:	f7f9 fbc3 	bl	800027c <__adddf3>
 8006af6:	4632      	mov	r2, r6
 8006af8:	463b      	mov	r3, r7
 8006afa:	f7f9 fd75 	bl	80005e8 <__aeabi_dmul>
 8006afe:	a326      	add	r3, pc, #152	; (adr r3, 8006b98 <__ieee754_asin+0x338>)
 8006b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b04:	f7f9 fbb8 	bl	8000278 <__aeabi_dsub>
 8006b08:	4632      	mov	r2, r6
 8006b0a:	463b      	mov	r3, r7
 8006b0c:	f7f9 fd6c 	bl	80005e8 <__aeabi_dmul>
 8006b10:	4b25      	ldr	r3, [pc, #148]	; (8006ba8 <__ieee754_asin+0x348>)
 8006b12:	2200      	movs	r2, #0
 8006b14:	f7f9 fbb2 	bl	800027c <__adddf3>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	4640      	mov	r0, r8
 8006b1e:	4649      	mov	r1, r9
 8006b20:	f7f9 fe8c 	bl	800083c <__aeabi_ddiv>
 8006b24:	4622      	mov	r2, r4
 8006b26:	462b      	mov	r3, r5
 8006b28:	f7f9 fd5e 	bl	80005e8 <__aeabi_dmul>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	460b      	mov	r3, r1
 8006b30:	4620      	mov	r0, r4
 8006b32:	4629      	mov	r1, r5
 8006b34:	e6bf      	b.n	80068b6 <__ieee754_asin+0x56>
 8006b36:	bf00      	nop
 8006b38:	54442d18 	.word	0x54442d18
 8006b3c:	3ff921fb 	.word	0x3ff921fb
 8006b40:	33145c07 	.word	0x33145c07
 8006b44:	3c91a626 	.word	0x3c91a626
 8006b48:	8800759c 	.word	0x8800759c
 8006b4c:	7e37e43c 	.word	0x7e37e43c
 8006b50:	0dfdf709 	.word	0x0dfdf709
 8006b54:	3f023de1 	.word	0x3f023de1
 8006b58:	7501b288 	.word	0x7501b288
 8006b5c:	3f49efe0 	.word	0x3f49efe0
 8006b60:	b5688f3b 	.word	0xb5688f3b
 8006b64:	3fa48228 	.word	0x3fa48228
 8006b68:	0e884455 	.word	0x0e884455
 8006b6c:	3fc9c155 	.word	0x3fc9c155
 8006b70:	03eb6f7d 	.word	0x03eb6f7d
 8006b74:	3fd4d612 	.word	0x3fd4d612
 8006b78:	55555555 	.word	0x55555555
 8006b7c:	3fc55555 	.word	0x3fc55555
 8006b80:	b12e9282 	.word	0xb12e9282
 8006b84:	3fb3b8c5 	.word	0x3fb3b8c5
 8006b88:	1b8d0159 	.word	0x1b8d0159
 8006b8c:	3fe6066c 	.word	0x3fe6066c
 8006b90:	9c598ac8 	.word	0x9c598ac8
 8006b94:	40002ae5 	.word	0x40002ae5
 8006b98:	1c8a2d4b 	.word	0x1c8a2d4b
 8006b9c:	40033a27 	.word	0x40033a27
 8006ba0:	3fefffff 	.word	0x3fefffff
 8006ba4:	3fdfffff 	.word	0x3fdfffff
 8006ba8:	3ff00000 	.word	0x3ff00000
 8006bac:	3fe00000 	.word	0x3fe00000
 8006bb0:	3fef3332 	.word	0x3fef3332
 8006bb4:	ee10 2a10 	vmov	r2, s0
 8006bb8:	ee10 0a10 	vmov	r0, s0
 8006bbc:	465b      	mov	r3, fp
 8006bbe:	4659      	mov	r1, fp
 8006bc0:	f7f9 fb5c 	bl	800027c <__adddf3>
 8006bc4:	4632      	mov	r2, r6
 8006bc6:	463b      	mov	r3, r7
 8006bc8:	ec41 0b19 	vmov	d9, r0, r1
 8006bcc:	ec51 0b18 	vmov	r0, r1, d8
 8006bd0:	f7f9 fe34 	bl	800083c <__aeabi_ddiv>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	ec51 0b19 	vmov	r0, r1, d9
 8006bdc:	f7f9 fd04 	bl	80005e8 <__aeabi_dmul>
 8006be0:	f04f 0800 	mov.w	r8, #0
 8006be4:	4606      	mov	r6, r0
 8006be6:	460f      	mov	r7, r1
 8006be8:	4642      	mov	r2, r8
 8006bea:	465b      	mov	r3, fp
 8006bec:	4640      	mov	r0, r8
 8006bee:	4659      	mov	r1, fp
 8006bf0:	f7f9 fcfa 	bl	80005e8 <__aeabi_dmul>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	4629      	mov	r1, r5
 8006bfc:	f7f9 fb3c 	bl	8000278 <__aeabi_dsub>
 8006c00:	4642      	mov	r2, r8
 8006c02:	4604      	mov	r4, r0
 8006c04:	460d      	mov	r5, r1
 8006c06:	465b      	mov	r3, fp
 8006c08:	4650      	mov	r0, sl
 8006c0a:	4659      	mov	r1, fp
 8006c0c:	f7f9 fb36 	bl	800027c <__adddf3>
 8006c10:	4602      	mov	r2, r0
 8006c12:	460b      	mov	r3, r1
 8006c14:	4620      	mov	r0, r4
 8006c16:	4629      	mov	r1, r5
 8006c18:	f7f9 fe10 	bl	800083c <__aeabi_ddiv>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	460b      	mov	r3, r1
 8006c20:	f7f9 fb2c 	bl	800027c <__adddf3>
 8006c24:	4602      	mov	r2, r0
 8006c26:	460b      	mov	r3, r1
 8006c28:	a113      	add	r1, pc, #76	; (adr r1, 8006c78 <__ieee754_asin+0x418>)
 8006c2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c2e:	f7f9 fb23 	bl	8000278 <__aeabi_dsub>
 8006c32:	4602      	mov	r2, r0
 8006c34:	460b      	mov	r3, r1
 8006c36:	4630      	mov	r0, r6
 8006c38:	4639      	mov	r1, r7
 8006c3a:	f7f9 fb1d 	bl	8000278 <__aeabi_dsub>
 8006c3e:	4642      	mov	r2, r8
 8006c40:	4604      	mov	r4, r0
 8006c42:	460d      	mov	r5, r1
 8006c44:	465b      	mov	r3, fp
 8006c46:	4640      	mov	r0, r8
 8006c48:	4659      	mov	r1, fp
 8006c4a:	f7f9 fb17 	bl	800027c <__adddf3>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	460b      	mov	r3, r1
 8006c52:	a10b      	add	r1, pc, #44	; (adr r1, 8006c80 <__ieee754_asin+0x420>)
 8006c54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c58:	f7f9 fb0e 	bl	8000278 <__aeabi_dsub>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	460b      	mov	r3, r1
 8006c60:	4620      	mov	r0, r4
 8006c62:	4629      	mov	r1, r5
 8006c64:	f7f9 fb08 	bl	8000278 <__aeabi_dsub>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	a104      	add	r1, pc, #16	; (adr r1, 8006c80 <__ieee754_asin+0x420>)
 8006c6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c72:	e6df      	b.n	8006a34 <__ieee754_asin+0x1d4>
 8006c74:	f3af 8000 	nop.w
 8006c78:	33145c07 	.word	0x33145c07
 8006c7c:	3c91a626 	.word	0x3c91a626
 8006c80:	54442d18 	.word	0x54442d18
 8006c84:	3fe921fb 	.word	0x3fe921fb

08006c88 <__ieee754_rem_pio2>:
 8006c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c8c:	ed2d 8b02 	vpush	{d8}
 8006c90:	ec55 4b10 	vmov	r4, r5, d0
 8006c94:	4bca      	ldr	r3, [pc, #808]	; (8006fc0 <__ieee754_rem_pio2+0x338>)
 8006c96:	b08b      	sub	sp, #44	; 0x2c
 8006c98:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006c9c:	4598      	cmp	r8, r3
 8006c9e:	4682      	mov	sl, r0
 8006ca0:	9502      	str	r5, [sp, #8]
 8006ca2:	dc08      	bgt.n	8006cb6 <__ieee754_rem_pio2+0x2e>
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	ed80 0b00 	vstr	d0, [r0]
 8006cac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006cb0:	f04f 0b00 	mov.w	fp, #0
 8006cb4:	e028      	b.n	8006d08 <__ieee754_rem_pio2+0x80>
 8006cb6:	4bc3      	ldr	r3, [pc, #780]	; (8006fc4 <__ieee754_rem_pio2+0x33c>)
 8006cb8:	4598      	cmp	r8, r3
 8006cba:	dc78      	bgt.n	8006dae <__ieee754_rem_pio2+0x126>
 8006cbc:	9b02      	ldr	r3, [sp, #8]
 8006cbe:	4ec2      	ldr	r6, [pc, #776]	; (8006fc8 <__ieee754_rem_pio2+0x340>)
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	ee10 0a10 	vmov	r0, s0
 8006cc6:	a3b0      	add	r3, pc, #704	; (adr r3, 8006f88 <__ieee754_rem_pio2+0x300>)
 8006cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ccc:	4629      	mov	r1, r5
 8006cce:	dd39      	ble.n	8006d44 <__ieee754_rem_pio2+0xbc>
 8006cd0:	f7f9 fad2 	bl	8000278 <__aeabi_dsub>
 8006cd4:	45b0      	cmp	r8, r6
 8006cd6:	4604      	mov	r4, r0
 8006cd8:	460d      	mov	r5, r1
 8006cda:	d01b      	beq.n	8006d14 <__ieee754_rem_pio2+0x8c>
 8006cdc:	a3ac      	add	r3, pc, #688	; (adr r3, 8006f90 <__ieee754_rem_pio2+0x308>)
 8006cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce2:	f7f9 fac9 	bl	8000278 <__aeabi_dsub>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	460b      	mov	r3, r1
 8006cea:	e9ca 2300 	strd	r2, r3, [sl]
 8006cee:	4620      	mov	r0, r4
 8006cf0:	4629      	mov	r1, r5
 8006cf2:	f7f9 fac1 	bl	8000278 <__aeabi_dsub>
 8006cf6:	a3a6      	add	r3, pc, #664	; (adr r3, 8006f90 <__ieee754_rem_pio2+0x308>)
 8006cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfc:	f7f9 fabc 	bl	8000278 <__aeabi_dsub>
 8006d00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006d04:	f04f 0b01 	mov.w	fp, #1
 8006d08:	4658      	mov	r0, fp
 8006d0a:	b00b      	add	sp, #44	; 0x2c
 8006d0c:	ecbd 8b02 	vpop	{d8}
 8006d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d14:	a3a0      	add	r3, pc, #640	; (adr r3, 8006f98 <__ieee754_rem_pio2+0x310>)
 8006d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1a:	f7f9 faad 	bl	8000278 <__aeabi_dsub>
 8006d1e:	a3a0      	add	r3, pc, #640	; (adr r3, 8006fa0 <__ieee754_rem_pio2+0x318>)
 8006d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d24:	4604      	mov	r4, r0
 8006d26:	460d      	mov	r5, r1
 8006d28:	f7f9 faa6 	bl	8000278 <__aeabi_dsub>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	460b      	mov	r3, r1
 8006d30:	e9ca 2300 	strd	r2, r3, [sl]
 8006d34:	4620      	mov	r0, r4
 8006d36:	4629      	mov	r1, r5
 8006d38:	f7f9 fa9e 	bl	8000278 <__aeabi_dsub>
 8006d3c:	a398      	add	r3, pc, #608	; (adr r3, 8006fa0 <__ieee754_rem_pio2+0x318>)
 8006d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d42:	e7db      	b.n	8006cfc <__ieee754_rem_pio2+0x74>
 8006d44:	f7f9 fa9a 	bl	800027c <__adddf3>
 8006d48:	45b0      	cmp	r8, r6
 8006d4a:	4604      	mov	r4, r0
 8006d4c:	460d      	mov	r5, r1
 8006d4e:	d016      	beq.n	8006d7e <__ieee754_rem_pio2+0xf6>
 8006d50:	a38f      	add	r3, pc, #572	; (adr r3, 8006f90 <__ieee754_rem_pio2+0x308>)
 8006d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d56:	f7f9 fa91 	bl	800027c <__adddf3>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	e9ca 2300 	strd	r2, r3, [sl]
 8006d62:	4620      	mov	r0, r4
 8006d64:	4629      	mov	r1, r5
 8006d66:	f7f9 fa87 	bl	8000278 <__aeabi_dsub>
 8006d6a:	a389      	add	r3, pc, #548	; (adr r3, 8006f90 <__ieee754_rem_pio2+0x308>)
 8006d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d70:	f7f9 fa84 	bl	800027c <__adddf3>
 8006d74:	f04f 3bff 	mov.w	fp, #4294967295
 8006d78:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006d7c:	e7c4      	b.n	8006d08 <__ieee754_rem_pio2+0x80>
 8006d7e:	a386      	add	r3, pc, #536	; (adr r3, 8006f98 <__ieee754_rem_pio2+0x310>)
 8006d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d84:	f7f9 fa7a 	bl	800027c <__adddf3>
 8006d88:	a385      	add	r3, pc, #532	; (adr r3, 8006fa0 <__ieee754_rem_pio2+0x318>)
 8006d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8e:	4604      	mov	r4, r0
 8006d90:	460d      	mov	r5, r1
 8006d92:	f7f9 fa73 	bl	800027c <__adddf3>
 8006d96:	4602      	mov	r2, r0
 8006d98:	460b      	mov	r3, r1
 8006d9a:	e9ca 2300 	strd	r2, r3, [sl]
 8006d9e:	4620      	mov	r0, r4
 8006da0:	4629      	mov	r1, r5
 8006da2:	f7f9 fa69 	bl	8000278 <__aeabi_dsub>
 8006da6:	a37e      	add	r3, pc, #504	; (adr r3, 8006fa0 <__ieee754_rem_pio2+0x318>)
 8006da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dac:	e7e0      	b.n	8006d70 <__ieee754_rem_pio2+0xe8>
 8006dae:	4b87      	ldr	r3, [pc, #540]	; (8006fcc <__ieee754_rem_pio2+0x344>)
 8006db0:	4598      	cmp	r8, r3
 8006db2:	f300 80d9 	bgt.w	8006f68 <__ieee754_rem_pio2+0x2e0>
 8006db6:	f7ff f9db 	bl	8006170 <fabs>
 8006dba:	ec55 4b10 	vmov	r4, r5, d0
 8006dbe:	ee10 0a10 	vmov	r0, s0
 8006dc2:	a379      	add	r3, pc, #484	; (adr r3, 8006fa8 <__ieee754_rem_pio2+0x320>)
 8006dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc8:	4629      	mov	r1, r5
 8006dca:	f7f9 fc0d 	bl	80005e8 <__aeabi_dmul>
 8006dce:	4b80      	ldr	r3, [pc, #512]	; (8006fd0 <__ieee754_rem_pio2+0x348>)
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f7f9 fa53 	bl	800027c <__adddf3>
 8006dd6:	f7f9 feb7 	bl	8000b48 <__aeabi_d2iz>
 8006dda:	4683      	mov	fp, r0
 8006ddc:	f7f9 fb9a 	bl	8000514 <__aeabi_i2d>
 8006de0:	4602      	mov	r2, r0
 8006de2:	460b      	mov	r3, r1
 8006de4:	ec43 2b18 	vmov	d8, r2, r3
 8006de8:	a367      	add	r3, pc, #412	; (adr r3, 8006f88 <__ieee754_rem_pio2+0x300>)
 8006dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dee:	f7f9 fbfb 	bl	80005e8 <__aeabi_dmul>
 8006df2:	4602      	mov	r2, r0
 8006df4:	460b      	mov	r3, r1
 8006df6:	4620      	mov	r0, r4
 8006df8:	4629      	mov	r1, r5
 8006dfa:	f7f9 fa3d 	bl	8000278 <__aeabi_dsub>
 8006dfe:	a364      	add	r3, pc, #400	; (adr r3, 8006f90 <__ieee754_rem_pio2+0x308>)
 8006e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e04:	4606      	mov	r6, r0
 8006e06:	460f      	mov	r7, r1
 8006e08:	ec51 0b18 	vmov	r0, r1, d8
 8006e0c:	f7f9 fbec 	bl	80005e8 <__aeabi_dmul>
 8006e10:	f1bb 0f1f 	cmp.w	fp, #31
 8006e14:	4604      	mov	r4, r0
 8006e16:	460d      	mov	r5, r1
 8006e18:	dc0d      	bgt.n	8006e36 <__ieee754_rem_pio2+0x1ae>
 8006e1a:	4b6e      	ldr	r3, [pc, #440]	; (8006fd4 <__ieee754_rem_pio2+0x34c>)
 8006e1c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e24:	4543      	cmp	r3, r8
 8006e26:	d006      	beq.n	8006e36 <__ieee754_rem_pio2+0x1ae>
 8006e28:	4622      	mov	r2, r4
 8006e2a:	462b      	mov	r3, r5
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	4639      	mov	r1, r7
 8006e30:	f7f9 fa22 	bl	8000278 <__aeabi_dsub>
 8006e34:	e00f      	b.n	8006e56 <__ieee754_rem_pio2+0x1ce>
 8006e36:	462b      	mov	r3, r5
 8006e38:	4622      	mov	r2, r4
 8006e3a:	4630      	mov	r0, r6
 8006e3c:	4639      	mov	r1, r7
 8006e3e:	f7f9 fa1b 	bl	8000278 <__aeabi_dsub>
 8006e42:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006e46:	9303      	str	r3, [sp, #12]
 8006e48:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006e4c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8006e50:	f1b8 0f10 	cmp.w	r8, #16
 8006e54:	dc02      	bgt.n	8006e5c <__ieee754_rem_pio2+0x1d4>
 8006e56:	e9ca 0100 	strd	r0, r1, [sl]
 8006e5a:	e039      	b.n	8006ed0 <__ieee754_rem_pio2+0x248>
 8006e5c:	a34e      	add	r3, pc, #312	; (adr r3, 8006f98 <__ieee754_rem_pio2+0x310>)
 8006e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e62:	ec51 0b18 	vmov	r0, r1, d8
 8006e66:	f7f9 fbbf 	bl	80005e8 <__aeabi_dmul>
 8006e6a:	4604      	mov	r4, r0
 8006e6c:	460d      	mov	r5, r1
 8006e6e:	4602      	mov	r2, r0
 8006e70:	460b      	mov	r3, r1
 8006e72:	4630      	mov	r0, r6
 8006e74:	4639      	mov	r1, r7
 8006e76:	f7f9 f9ff 	bl	8000278 <__aeabi_dsub>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	4680      	mov	r8, r0
 8006e80:	4689      	mov	r9, r1
 8006e82:	4630      	mov	r0, r6
 8006e84:	4639      	mov	r1, r7
 8006e86:	f7f9 f9f7 	bl	8000278 <__aeabi_dsub>
 8006e8a:	4622      	mov	r2, r4
 8006e8c:	462b      	mov	r3, r5
 8006e8e:	f7f9 f9f3 	bl	8000278 <__aeabi_dsub>
 8006e92:	a343      	add	r3, pc, #268	; (adr r3, 8006fa0 <__ieee754_rem_pio2+0x318>)
 8006e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e98:	4604      	mov	r4, r0
 8006e9a:	460d      	mov	r5, r1
 8006e9c:	ec51 0b18 	vmov	r0, r1, d8
 8006ea0:	f7f9 fba2 	bl	80005e8 <__aeabi_dmul>
 8006ea4:	4622      	mov	r2, r4
 8006ea6:	462b      	mov	r3, r5
 8006ea8:	f7f9 f9e6 	bl	8000278 <__aeabi_dsub>
 8006eac:	4602      	mov	r2, r0
 8006eae:	460b      	mov	r3, r1
 8006eb0:	4604      	mov	r4, r0
 8006eb2:	460d      	mov	r5, r1
 8006eb4:	4640      	mov	r0, r8
 8006eb6:	4649      	mov	r1, r9
 8006eb8:	f7f9 f9de 	bl	8000278 <__aeabi_dsub>
 8006ebc:	9a03      	ldr	r2, [sp, #12]
 8006ebe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	2b31      	cmp	r3, #49	; 0x31
 8006ec6:	dc24      	bgt.n	8006f12 <__ieee754_rem_pio2+0x28a>
 8006ec8:	e9ca 0100 	strd	r0, r1, [sl]
 8006ecc:	4646      	mov	r6, r8
 8006ece:	464f      	mov	r7, r9
 8006ed0:	e9da 8900 	ldrd	r8, r9, [sl]
 8006ed4:	4630      	mov	r0, r6
 8006ed6:	4642      	mov	r2, r8
 8006ed8:	464b      	mov	r3, r9
 8006eda:	4639      	mov	r1, r7
 8006edc:	f7f9 f9cc 	bl	8000278 <__aeabi_dsub>
 8006ee0:	462b      	mov	r3, r5
 8006ee2:	4622      	mov	r2, r4
 8006ee4:	f7f9 f9c8 	bl	8000278 <__aeabi_dsub>
 8006ee8:	9b02      	ldr	r3, [sp, #8]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006ef0:	f6bf af0a 	bge.w	8006d08 <__ieee754_rem_pio2+0x80>
 8006ef4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006ef8:	f8ca 3004 	str.w	r3, [sl, #4]
 8006efc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f00:	f8ca 8000 	str.w	r8, [sl]
 8006f04:	f8ca 0008 	str.w	r0, [sl, #8]
 8006f08:	f8ca 300c 	str.w	r3, [sl, #12]
 8006f0c:	f1cb 0b00 	rsb	fp, fp, #0
 8006f10:	e6fa      	b.n	8006d08 <__ieee754_rem_pio2+0x80>
 8006f12:	a327      	add	r3, pc, #156	; (adr r3, 8006fb0 <__ieee754_rem_pio2+0x328>)
 8006f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f18:	ec51 0b18 	vmov	r0, r1, d8
 8006f1c:	f7f9 fb64 	bl	80005e8 <__aeabi_dmul>
 8006f20:	4604      	mov	r4, r0
 8006f22:	460d      	mov	r5, r1
 8006f24:	4602      	mov	r2, r0
 8006f26:	460b      	mov	r3, r1
 8006f28:	4640      	mov	r0, r8
 8006f2a:	4649      	mov	r1, r9
 8006f2c:	f7f9 f9a4 	bl	8000278 <__aeabi_dsub>
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
 8006f34:	4606      	mov	r6, r0
 8006f36:	460f      	mov	r7, r1
 8006f38:	4640      	mov	r0, r8
 8006f3a:	4649      	mov	r1, r9
 8006f3c:	f7f9 f99c 	bl	8000278 <__aeabi_dsub>
 8006f40:	4622      	mov	r2, r4
 8006f42:	462b      	mov	r3, r5
 8006f44:	f7f9 f998 	bl	8000278 <__aeabi_dsub>
 8006f48:	a31b      	add	r3, pc, #108	; (adr r3, 8006fb8 <__ieee754_rem_pio2+0x330>)
 8006f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4e:	4604      	mov	r4, r0
 8006f50:	460d      	mov	r5, r1
 8006f52:	ec51 0b18 	vmov	r0, r1, d8
 8006f56:	f7f9 fb47 	bl	80005e8 <__aeabi_dmul>
 8006f5a:	4622      	mov	r2, r4
 8006f5c:	462b      	mov	r3, r5
 8006f5e:	f7f9 f98b 	bl	8000278 <__aeabi_dsub>
 8006f62:	4604      	mov	r4, r0
 8006f64:	460d      	mov	r5, r1
 8006f66:	e75f      	b.n	8006e28 <__ieee754_rem_pio2+0x1a0>
 8006f68:	4b1b      	ldr	r3, [pc, #108]	; (8006fd8 <__ieee754_rem_pio2+0x350>)
 8006f6a:	4598      	cmp	r8, r3
 8006f6c:	dd36      	ble.n	8006fdc <__ieee754_rem_pio2+0x354>
 8006f6e:	ee10 2a10 	vmov	r2, s0
 8006f72:	462b      	mov	r3, r5
 8006f74:	4620      	mov	r0, r4
 8006f76:	4629      	mov	r1, r5
 8006f78:	f7f9 f97e 	bl	8000278 <__aeabi_dsub>
 8006f7c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006f80:	e9ca 0100 	strd	r0, r1, [sl]
 8006f84:	e694      	b.n	8006cb0 <__ieee754_rem_pio2+0x28>
 8006f86:	bf00      	nop
 8006f88:	54400000 	.word	0x54400000
 8006f8c:	3ff921fb 	.word	0x3ff921fb
 8006f90:	1a626331 	.word	0x1a626331
 8006f94:	3dd0b461 	.word	0x3dd0b461
 8006f98:	1a600000 	.word	0x1a600000
 8006f9c:	3dd0b461 	.word	0x3dd0b461
 8006fa0:	2e037073 	.word	0x2e037073
 8006fa4:	3ba3198a 	.word	0x3ba3198a
 8006fa8:	6dc9c883 	.word	0x6dc9c883
 8006fac:	3fe45f30 	.word	0x3fe45f30
 8006fb0:	2e000000 	.word	0x2e000000
 8006fb4:	3ba3198a 	.word	0x3ba3198a
 8006fb8:	252049c1 	.word	0x252049c1
 8006fbc:	397b839a 	.word	0x397b839a
 8006fc0:	3fe921fb 	.word	0x3fe921fb
 8006fc4:	4002d97b 	.word	0x4002d97b
 8006fc8:	3ff921fb 	.word	0x3ff921fb
 8006fcc:	413921fb 	.word	0x413921fb
 8006fd0:	3fe00000 	.word	0x3fe00000
 8006fd4:	08008018 	.word	0x08008018
 8006fd8:	7fefffff 	.word	0x7fefffff
 8006fdc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8006fe0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8006fe4:	ee10 0a10 	vmov	r0, s0
 8006fe8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8006fec:	ee10 6a10 	vmov	r6, s0
 8006ff0:	460f      	mov	r7, r1
 8006ff2:	f7f9 fda9 	bl	8000b48 <__aeabi_d2iz>
 8006ff6:	f7f9 fa8d 	bl	8000514 <__aeabi_i2d>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	4630      	mov	r0, r6
 8007000:	4639      	mov	r1, r7
 8007002:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007006:	f7f9 f937 	bl	8000278 <__aeabi_dsub>
 800700a:	4b23      	ldr	r3, [pc, #140]	; (8007098 <__ieee754_rem_pio2+0x410>)
 800700c:	2200      	movs	r2, #0
 800700e:	f7f9 faeb 	bl	80005e8 <__aeabi_dmul>
 8007012:	460f      	mov	r7, r1
 8007014:	4606      	mov	r6, r0
 8007016:	f7f9 fd97 	bl	8000b48 <__aeabi_d2iz>
 800701a:	f7f9 fa7b 	bl	8000514 <__aeabi_i2d>
 800701e:	4602      	mov	r2, r0
 8007020:	460b      	mov	r3, r1
 8007022:	4630      	mov	r0, r6
 8007024:	4639      	mov	r1, r7
 8007026:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800702a:	f7f9 f925 	bl	8000278 <__aeabi_dsub>
 800702e:	4b1a      	ldr	r3, [pc, #104]	; (8007098 <__ieee754_rem_pio2+0x410>)
 8007030:	2200      	movs	r2, #0
 8007032:	f7f9 fad9 	bl	80005e8 <__aeabi_dmul>
 8007036:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800703a:	ad04      	add	r5, sp, #16
 800703c:	f04f 0803 	mov.w	r8, #3
 8007040:	46a9      	mov	r9, r5
 8007042:	2600      	movs	r6, #0
 8007044:	2700      	movs	r7, #0
 8007046:	4632      	mov	r2, r6
 8007048:	463b      	mov	r3, r7
 800704a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800704e:	46c3      	mov	fp, r8
 8007050:	3d08      	subs	r5, #8
 8007052:	f108 38ff 	add.w	r8, r8, #4294967295
 8007056:	f7f9 fd2f 	bl	8000ab8 <__aeabi_dcmpeq>
 800705a:	2800      	cmp	r0, #0
 800705c:	d1f3      	bne.n	8007046 <__ieee754_rem_pio2+0x3be>
 800705e:	4b0f      	ldr	r3, [pc, #60]	; (800709c <__ieee754_rem_pio2+0x414>)
 8007060:	9301      	str	r3, [sp, #4]
 8007062:	2302      	movs	r3, #2
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	4622      	mov	r2, r4
 8007068:	465b      	mov	r3, fp
 800706a:	4651      	mov	r1, sl
 800706c:	4648      	mov	r0, r9
 800706e:	f000 f997 	bl	80073a0 <__kernel_rem_pio2>
 8007072:	9b02      	ldr	r3, [sp, #8]
 8007074:	2b00      	cmp	r3, #0
 8007076:	4683      	mov	fp, r0
 8007078:	f6bf ae46 	bge.w	8006d08 <__ieee754_rem_pio2+0x80>
 800707c:	e9da 2100 	ldrd	r2, r1, [sl]
 8007080:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007084:	e9ca 2300 	strd	r2, r3, [sl]
 8007088:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800708c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007090:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8007094:	e73a      	b.n	8006f0c <__ieee754_rem_pio2+0x284>
 8007096:	bf00      	nop
 8007098:	41700000 	.word	0x41700000
 800709c:	08008098 	.word	0x08008098

080070a0 <__ieee754_sqrt>:
 80070a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070a4:	ec55 4b10 	vmov	r4, r5, d0
 80070a8:	4e55      	ldr	r6, [pc, #340]	; (8007200 <__ieee754_sqrt+0x160>)
 80070aa:	43ae      	bics	r6, r5
 80070ac:	ee10 0a10 	vmov	r0, s0
 80070b0:	ee10 3a10 	vmov	r3, s0
 80070b4:	462a      	mov	r2, r5
 80070b6:	4629      	mov	r1, r5
 80070b8:	d110      	bne.n	80070dc <__ieee754_sqrt+0x3c>
 80070ba:	ee10 2a10 	vmov	r2, s0
 80070be:	462b      	mov	r3, r5
 80070c0:	f7f9 fa92 	bl	80005e8 <__aeabi_dmul>
 80070c4:	4602      	mov	r2, r0
 80070c6:	460b      	mov	r3, r1
 80070c8:	4620      	mov	r0, r4
 80070ca:	4629      	mov	r1, r5
 80070cc:	f7f9 f8d6 	bl	800027c <__adddf3>
 80070d0:	4604      	mov	r4, r0
 80070d2:	460d      	mov	r5, r1
 80070d4:	ec45 4b10 	vmov	d0, r4, r5
 80070d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070dc:	2d00      	cmp	r5, #0
 80070de:	dc10      	bgt.n	8007102 <__ieee754_sqrt+0x62>
 80070e0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80070e4:	4330      	orrs	r0, r6
 80070e6:	d0f5      	beq.n	80070d4 <__ieee754_sqrt+0x34>
 80070e8:	b15d      	cbz	r5, 8007102 <__ieee754_sqrt+0x62>
 80070ea:	ee10 2a10 	vmov	r2, s0
 80070ee:	462b      	mov	r3, r5
 80070f0:	ee10 0a10 	vmov	r0, s0
 80070f4:	f7f9 f8c0 	bl	8000278 <__aeabi_dsub>
 80070f8:	4602      	mov	r2, r0
 80070fa:	460b      	mov	r3, r1
 80070fc:	f7f9 fb9e 	bl	800083c <__aeabi_ddiv>
 8007100:	e7e6      	b.n	80070d0 <__ieee754_sqrt+0x30>
 8007102:	1512      	asrs	r2, r2, #20
 8007104:	d074      	beq.n	80071f0 <__ieee754_sqrt+0x150>
 8007106:	07d4      	lsls	r4, r2, #31
 8007108:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800710c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8007110:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007114:	bf5e      	ittt	pl
 8007116:	0fda      	lsrpl	r2, r3, #31
 8007118:	005b      	lslpl	r3, r3, #1
 800711a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800711e:	2400      	movs	r4, #0
 8007120:	0fda      	lsrs	r2, r3, #31
 8007122:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007126:	107f      	asrs	r7, r7, #1
 8007128:	005b      	lsls	r3, r3, #1
 800712a:	2516      	movs	r5, #22
 800712c:	4620      	mov	r0, r4
 800712e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007132:	1886      	adds	r6, r0, r2
 8007134:	428e      	cmp	r6, r1
 8007136:	bfde      	ittt	le
 8007138:	1b89      	suble	r1, r1, r6
 800713a:	18b0      	addle	r0, r6, r2
 800713c:	18a4      	addle	r4, r4, r2
 800713e:	0049      	lsls	r1, r1, #1
 8007140:	3d01      	subs	r5, #1
 8007142:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8007146:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800714a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800714e:	d1f0      	bne.n	8007132 <__ieee754_sqrt+0x92>
 8007150:	462a      	mov	r2, r5
 8007152:	f04f 0e20 	mov.w	lr, #32
 8007156:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800715a:	4281      	cmp	r1, r0
 800715c:	eb06 0c05 	add.w	ip, r6, r5
 8007160:	dc02      	bgt.n	8007168 <__ieee754_sqrt+0xc8>
 8007162:	d113      	bne.n	800718c <__ieee754_sqrt+0xec>
 8007164:	459c      	cmp	ip, r3
 8007166:	d811      	bhi.n	800718c <__ieee754_sqrt+0xec>
 8007168:	f1bc 0f00 	cmp.w	ip, #0
 800716c:	eb0c 0506 	add.w	r5, ip, r6
 8007170:	da43      	bge.n	80071fa <__ieee754_sqrt+0x15a>
 8007172:	2d00      	cmp	r5, #0
 8007174:	db41      	blt.n	80071fa <__ieee754_sqrt+0x15a>
 8007176:	f100 0801 	add.w	r8, r0, #1
 800717a:	1a09      	subs	r1, r1, r0
 800717c:	459c      	cmp	ip, r3
 800717e:	bf88      	it	hi
 8007180:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8007184:	eba3 030c 	sub.w	r3, r3, ip
 8007188:	4432      	add	r2, r6
 800718a:	4640      	mov	r0, r8
 800718c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8007190:	f1be 0e01 	subs.w	lr, lr, #1
 8007194:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8007198:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800719c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80071a0:	d1db      	bne.n	800715a <__ieee754_sqrt+0xba>
 80071a2:	430b      	orrs	r3, r1
 80071a4:	d006      	beq.n	80071b4 <__ieee754_sqrt+0x114>
 80071a6:	1c50      	adds	r0, r2, #1
 80071a8:	bf13      	iteet	ne
 80071aa:	3201      	addne	r2, #1
 80071ac:	3401      	addeq	r4, #1
 80071ae:	4672      	moveq	r2, lr
 80071b0:	f022 0201 	bicne.w	r2, r2, #1
 80071b4:	1063      	asrs	r3, r4, #1
 80071b6:	0852      	lsrs	r2, r2, #1
 80071b8:	07e1      	lsls	r1, r4, #31
 80071ba:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80071be:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80071c2:	bf48      	it	mi
 80071c4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80071c8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80071cc:	4614      	mov	r4, r2
 80071ce:	e781      	b.n	80070d4 <__ieee754_sqrt+0x34>
 80071d0:	0ad9      	lsrs	r1, r3, #11
 80071d2:	3815      	subs	r0, #21
 80071d4:	055b      	lsls	r3, r3, #21
 80071d6:	2900      	cmp	r1, #0
 80071d8:	d0fa      	beq.n	80071d0 <__ieee754_sqrt+0x130>
 80071da:	02cd      	lsls	r5, r1, #11
 80071dc:	d50a      	bpl.n	80071f4 <__ieee754_sqrt+0x154>
 80071de:	f1c2 0420 	rsb	r4, r2, #32
 80071e2:	fa23 f404 	lsr.w	r4, r3, r4
 80071e6:	1e55      	subs	r5, r2, #1
 80071e8:	4093      	lsls	r3, r2
 80071ea:	4321      	orrs	r1, r4
 80071ec:	1b42      	subs	r2, r0, r5
 80071ee:	e78a      	b.n	8007106 <__ieee754_sqrt+0x66>
 80071f0:	4610      	mov	r0, r2
 80071f2:	e7f0      	b.n	80071d6 <__ieee754_sqrt+0x136>
 80071f4:	0049      	lsls	r1, r1, #1
 80071f6:	3201      	adds	r2, #1
 80071f8:	e7ef      	b.n	80071da <__ieee754_sqrt+0x13a>
 80071fa:	4680      	mov	r8, r0
 80071fc:	e7bd      	b.n	800717a <__ieee754_sqrt+0xda>
 80071fe:	bf00      	nop
 8007200:	7ff00000 	.word	0x7ff00000

08007204 <__ieee754_sqrtf>:
 8007204:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007208:	4770      	bx	lr
 800720a:	0000      	movs	r0, r0
 800720c:	0000      	movs	r0, r0
	...

08007210 <__kernel_cos>:
 8007210:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007214:	ec57 6b10 	vmov	r6, r7, d0
 8007218:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800721c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007220:	ed8d 1b00 	vstr	d1, [sp]
 8007224:	da07      	bge.n	8007236 <__kernel_cos+0x26>
 8007226:	ee10 0a10 	vmov	r0, s0
 800722a:	4639      	mov	r1, r7
 800722c:	f7f9 fc8c 	bl	8000b48 <__aeabi_d2iz>
 8007230:	2800      	cmp	r0, #0
 8007232:	f000 8088 	beq.w	8007346 <__kernel_cos+0x136>
 8007236:	4632      	mov	r2, r6
 8007238:	463b      	mov	r3, r7
 800723a:	4630      	mov	r0, r6
 800723c:	4639      	mov	r1, r7
 800723e:	f7f9 f9d3 	bl	80005e8 <__aeabi_dmul>
 8007242:	4b51      	ldr	r3, [pc, #324]	; (8007388 <__kernel_cos+0x178>)
 8007244:	2200      	movs	r2, #0
 8007246:	4604      	mov	r4, r0
 8007248:	460d      	mov	r5, r1
 800724a:	f7f9 f9cd 	bl	80005e8 <__aeabi_dmul>
 800724e:	a340      	add	r3, pc, #256	; (adr r3, 8007350 <__kernel_cos+0x140>)
 8007250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007254:	4682      	mov	sl, r0
 8007256:	468b      	mov	fp, r1
 8007258:	4620      	mov	r0, r4
 800725a:	4629      	mov	r1, r5
 800725c:	f7f9 f9c4 	bl	80005e8 <__aeabi_dmul>
 8007260:	a33d      	add	r3, pc, #244	; (adr r3, 8007358 <__kernel_cos+0x148>)
 8007262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007266:	f7f9 f809 	bl	800027c <__adddf3>
 800726a:	4622      	mov	r2, r4
 800726c:	462b      	mov	r3, r5
 800726e:	f7f9 f9bb 	bl	80005e8 <__aeabi_dmul>
 8007272:	a33b      	add	r3, pc, #236	; (adr r3, 8007360 <__kernel_cos+0x150>)
 8007274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007278:	f7f8 fffe 	bl	8000278 <__aeabi_dsub>
 800727c:	4622      	mov	r2, r4
 800727e:	462b      	mov	r3, r5
 8007280:	f7f9 f9b2 	bl	80005e8 <__aeabi_dmul>
 8007284:	a338      	add	r3, pc, #224	; (adr r3, 8007368 <__kernel_cos+0x158>)
 8007286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728a:	f7f8 fff7 	bl	800027c <__adddf3>
 800728e:	4622      	mov	r2, r4
 8007290:	462b      	mov	r3, r5
 8007292:	f7f9 f9a9 	bl	80005e8 <__aeabi_dmul>
 8007296:	a336      	add	r3, pc, #216	; (adr r3, 8007370 <__kernel_cos+0x160>)
 8007298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729c:	f7f8 ffec 	bl	8000278 <__aeabi_dsub>
 80072a0:	4622      	mov	r2, r4
 80072a2:	462b      	mov	r3, r5
 80072a4:	f7f9 f9a0 	bl	80005e8 <__aeabi_dmul>
 80072a8:	a333      	add	r3, pc, #204	; (adr r3, 8007378 <__kernel_cos+0x168>)
 80072aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ae:	f7f8 ffe5 	bl	800027c <__adddf3>
 80072b2:	4622      	mov	r2, r4
 80072b4:	462b      	mov	r3, r5
 80072b6:	f7f9 f997 	bl	80005e8 <__aeabi_dmul>
 80072ba:	4622      	mov	r2, r4
 80072bc:	462b      	mov	r3, r5
 80072be:	f7f9 f993 	bl	80005e8 <__aeabi_dmul>
 80072c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072c6:	4604      	mov	r4, r0
 80072c8:	460d      	mov	r5, r1
 80072ca:	4630      	mov	r0, r6
 80072cc:	4639      	mov	r1, r7
 80072ce:	f7f9 f98b 	bl	80005e8 <__aeabi_dmul>
 80072d2:	460b      	mov	r3, r1
 80072d4:	4602      	mov	r2, r0
 80072d6:	4629      	mov	r1, r5
 80072d8:	4620      	mov	r0, r4
 80072da:	f7f8 ffcd 	bl	8000278 <__aeabi_dsub>
 80072de:	4b2b      	ldr	r3, [pc, #172]	; (800738c <__kernel_cos+0x17c>)
 80072e0:	4598      	cmp	r8, r3
 80072e2:	4606      	mov	r6, r0
 80072e4:	460f      	mov	r7, r1
 80072e6:	dc10      	bgt.n	800730a <__kernel_cos+0xfa>
 80072e8:	4602      	mov	r2, r0
 80072ea:	460b      	mov	r3, r1
 80072ec:	4650      	mov	r0, sl
 80072ee:	4659      	mov	r1, fp
 80072f0:	f7f8 ffc2 	bl	8000278 <__aeabi_dsub>
 80072f4:	460b      	mov	r3, r1
 80072f6:	4926      	ldr	r1, [pc, #152]	; (8007390 <__kernel_cos+0x180>)
 80072f8:	4602      	mov	r2, r0
 80072fa:	2000      	movs	r0, #0
 80072fc:	f7f8 ffbc 	bl	8000278 <__aeabi_dsub>
 8007300:	ec41 0b10 	vmov	d0, r0, r1
 8007304:	b003      	add	sp, #12
 8007306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800730a:	4b22      	ldr	r3, [pc, #136]	; (8007394 <__kernel_cos+0x184>)
 800730c:	4920      	ldr	r1, [pc, #128]	; (8007390 <__kernel_cos+0x180>)
 800730e:	4598      	cmp	r8, r3
 8007310:	bfcc      	ite	gt
 8007312:	4d21      	ldrgt	r5, [pc, #132]	; (8007398 <__kernel_cos+0x188>)
 8007314:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007318:	2400      	movs	r4, #0
 800731a:	4622      	mov	r2, r4
 800731c:	462b      	mov	r3, r5
 800731e:	2000      	movs	r0, #0
 8007320:	f7f8 ffaa 	bl	8000278 <__aeabi_dsub>
 8007324:	4622      	mov	r2, r4
 8007326:	4680      	mov	r8, r0
 8007328:	4689      	mov	r9, r1
 800732a:	462b      	mov	r3, r5
 800732c:	4650      	mov	r0, sl
 800732e:	4659      	mov	r1, fp
 8007330:	f7f8 ffa2 	bl	8000278 <__aeabi_dsub>
 8007334:	4632      	mov	r2, r6
 8007336:	463b      	mov	r3, r7
 8007338:	f7f8 ff9e 	bl	8000278 <__aeabi_dsub>
 800733c:	4602      	mov	r2, r0
 800733e:	460b      	mov	r3, r1
 8007340:	4640      	mov	r0, r8
 8007342:	4649      	mov	r1, r9
 8007344:	e7da      	b.n	80072fc <__kernel_cos+0xec>
 8007346:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007380 <__kernel_cos+0x170>
 800734a:	e7db      	b.n	8007304 <__kernel_cos+0xf4>
 800734c:	f3af 8000 	nop.w
 8007350:	be8838d4 	.word	0xbe8838d4
 8007354:	bda8fae9 	.word	0xbda8fae9
 8007358:	bdb4b1c4 	.word	0xbdb4b1c4
 800735c:	3e21ee9e 	.word	0x3e21ee9e
 8007360:	809c52ad 	.word	0x809c52ad
 8007364:	3e927e4f 	.word	0x3e927e4f
 8007368:	19cb1590 	.word	0x19cb1590
 800736c:	3efa01a0 	.word	0x3efa01a0
 8007370:	16c15177 	.word	0x16c15177
 8007374:	3f56c16c 	.word	0x3f56c16c
 8007378:	5555554c 	.word	0x5555554c
 800737c:	3fa55555 	.word	0x3fa55555
 8007380:	00000000 	.word	0x00000000
 8007384:	3ff00000 	.word	0x3ff00000
 8007388:	3fe00000 	.word	0x3fe00000
 800738c:	3fd33332 	.word	0x3fd33332
 8007390:	3ff00000 	.word	0x3ff00000
 8007394:	3fe90000 	.word	0x3fe90000
 8007398:	3fd20000 	.word	0x3fd20000
 800739c:	00000000 	.word	0x00000000

080073a0 <__kernel_rem_pio2>:
 80073a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073a4:	ed2d 8b02 	vpush	{d8}
 80073a8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80073ac:	f112 0f14 	cmn.w	r2, #20
 80073b0:	9308      	str	r3, [sp, #32]
 80073b2:	9101      	str	r1, [sp, #4]
 80073b4:	4bc4      	ldr	r3, [pc, #784]	; (80076c8 <__kernel_rem_pio2+0x328>)
 80073b6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80073b8:	900b      	str	r0, [sp, #44]	; 0x2c
 80073ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80073be:	9302      	str	r3, [sp, #8]
 80073c0:	9b08      	ldr	r3, [sp, #32]
 80073c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80073c6:	bfa8      	it	ge
 80073c8:	1ed4      	subge	r4, r2, #3
 80073ca:	9306      	str	r3, [sp, #24]
 80073cc:	bfb2      	itee	lt
 80073ce:	2400      	movlt	r4, #0
 80073d0:	2318      	movge	r3, #24
 80073d2:	fb94 f4f3 	sdivge	r4, r4, r3
 80073d6:	f06f 0317 	mvn.w	r3, #23
 80073da:	fb04 3303 	mla	r3, r4, r3, r3
 80073de:	eb03 0a02 	add.w	sl, r3, r2
 80073e2:	9b02      	ldr	r3, [sp, #8]
 80073e4:	9a06      	ldr	r2, [sp, #24]
 80073e6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80076b8 <__kernel_rem_pio2+0x318>
 80073ea:	eb03 0802 	add.w	r8, r3, r2
 80073ee:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80073f0:	1aa7      	subs	r7, r4, r2
 80073f2:	ae22      	add	r6, sp, #136	; 0x88
 80073f4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80073f8:	2500      	movs	r5, #0
 80073fa:	4545      	cmp	r5, r8
 80073fc:	dd13      	ble.n	8007426 <__kernel_rem_pio2+0x86>
 80073fe:	9b08      	ldr	r3, [sp, #32]
 8007400:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80076b8 <__kernel_rem_pio2+0x318>
 8007404:	aa22      	add	r2, sp, #136	; 0x88
 8007406:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800740a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800740e:	f04f 0800 	mov.w	r8, #0
 8007412:	9b02      	ldr	r3, [sp, #8]
 8007414:	4598      	cmp	r8, r3
 8007416:	dc2f      	bgt.n	8007478 <__kernel_rem_pio2+0xd8>
 8007418:	ed8d 8b04 	vstr	d8, [sp, #16]
 800741c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8007420:	462f      	mov	r7, r5
 8007422:	2600      	movs	r6, #0
 8007424:	e01b      	b.n	800745e <__kernel_rem_pio2+0xbe>
 8007426:	42ef      	cmn	r7, r5
 8007428:	d407      	bmi.n	800743a <__kernel_rem_pio2+0x9a>
 800742a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800742e:	f7f9 f871 	bl	8000514 <__aeabi_i2d>
 8007432:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007436:	3501      	adds	r5, #1
 8007438:	e7df      	b.n	80073fa <__kernel_rem_pio2+0x5a>
 800743a:	ec51 0b18 	vmov	r0, r1, d8
 800743e:	e7f8      	b.n	8007432 <__kernel_rem_pio2+0x92>
 8007440:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007444:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007448:	f7f9 f8ce 	bl	80005e8 <__aeabi_dmul>
 800744c:	4602      	mov	r2, r0
 800744e:	460b      	mov	r3, r1
 8007450:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007454:	f7f8 ff12 	bl	800027c <__adddf3>
 8007458:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800745c:	3601      	adds	r6, #1
 800745e:	9b06      	ldr	r3, [sp, #24]
 8007460:	429e      	cmp	r6, r3
 8007462:	f1a7 0708 	sub.w	r7, r7, #8
 8007466:	ddeb      	ble.n	8007440 <__kernel_rem_pio2+0xa0>
 8007468:	ed9d 7b04 	vldr	d7, [sp, #16]
 800746c:	f108 0801 	add.w	r8, r8, #1
 8007470:	ecab 7b02 	vstmia	fp!, {d7}
 8007474:	3508      	adds	r5, #8
 8007476:	e7cc      	b.n	8007412 <__kernel_rem_pio2+0x72>
 8007478:	9b02      	ldr	r3, [sp, #8]
 800747a:	aa0e      	add	r2, sp, #56	; 0x38
 800747c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007480:	930d      	str	r3, [sp, #52]	; 0x34
 8007482:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007484:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007488:	9c02      	ldr	r4, [sp, #8]
 800748a:	930c      	str	r3, [sp, #48]	; 0x30
 800748c:	00e3      	lsls	r3, r4, #3
 800748e:	930a      	str	r3, [sp, #40]	; 0x28
 8007490:	ab9a      	add	r3, sp, #616	; 0x268
 8007492:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007496:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800749a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800749e:	ab72      	add	r3, sp, #456	; 0x1c8
 80074a0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80074a4:	46c3      	mov	fp, r8
 80074a6:	46a1      	mov	r9, r4
 80074a8:	f1b9 0f00 	cmp.w	r9, #0
 80074ac:	f1a5 0508 	sub.w	r5, r5, #8
 80074b0:	dc77      	bgt.n	80075a2 <__kernel_rem_pio2+0x202>
 80074b2:	ec47 6b10 	vmov	d0, r6, r7
 80074b6:	4650      	mov	r0, sl
 80074b8:	f000 fc0a 	bl	8007cd0 <scalbn>
 80074bc:	ec57 6b10 	vmov	r6, r7, d0
 80074c0:	2200      	movs	r2, #0
 80074c2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80074c6:	ee10 0a10 	vmov	r0, s0
 80074ca:	4639      	mov	r1, r7
 80074cc:	f7f9 f88c 	bl	80005e8 <__aeabi_dmul>
 80074d0:	ec41 0b10 	vmov	d0, r0, r1
 80074d4:	f000 fb74 	bl	8007bc0 <floor>
 80074d8:	4b7c      	ldr	r3, [pc, #496]	; (80076cc <__kernel_rem_pio2+0x32c>)
 80074da:	ec51 0b10 	vmov	r0, r1, d0
 80074de:	2200      	movs	r2, #0
 80074e0:	f7f9 f882 	bl	80005e8 <__aeabi_dmul>
 80074e4:	4602      	mov	r2, r0
 80074e6:	460b      	mov	r3, r1
 80074e8:	4630      	mov	r0, r6
 80074ea:	4639      	mov	r1, r7
 80074ec:	f7f8 fec4 	bl	8000278 <__aeabi_dsub>
 80074f0:	460f      	mov	r7, r1
 80074f2:	4606      	mov	r6, r0
 80074f4:	f7f9 fb28 	bl	8000b48 <__aeabi_d2iz>
 80074f8:	9004      	str	r0, [sp, #16]
 80074fa:	f7f9 f80b 	bl	8000514 <__aeabi_i2d>
 80074fe:	4602      	mov	r2, r0
 8007500:	460b      	mov	r3, r1
 8007502:	4630      	mov	r0, r6
 8007504:	4639      	mov	r1, r7
 8007506:	f7f8 feb7 	bl	8000278 <__aeabi_dsub>
 800750a:	f1ba 0f00 	cmp.w	sl, #0
 800750e:	4606      	mov	r6, r0
 8007510:	460f      	mov	r7, r1
 8007512:	dd6d      	ble.n	80075f0 <__kernel_rem_pio2+0x250>
 8007514:	1e62      	subs	r2, r4, #1
 8007516:	ab0e      	add	r3, sp, #56	; 0x38
 8007518:	9d04      	ldr	r5, [sp, #16]
 800751a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800751e:	f1ca 0118 	rsb	r1, sl, #24
 8007522:	fa40 f301 	asr.w	r3, r0, r1
 8007526:	441d      	add	r5, r3
 8007528:	408b      	lsls	r3, r1
 800752a:	1ac0      	subs	r0, r0, r3
 800752c:	ab0e      	add	r3, sp, #56	; 0x38
 800752e:	9504      	str	r5, [sp, #16]
 8007530:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007534:	f1ca 0317 	rsb	r3, sl, #23
 8007538:	fa40 fb03 	asr.w	fp, r0, r3
 800753c:	f1bb 0f00 	cmp.w	fp, #0
 8007540:	dd65      	ble.n	800760e <__kernel_rem_pio2+0x26e>
 8007542:	9b04      	ldr	r3, [sp, #16]
 8007544:	2200      	movs	r2, #0
 8007546:	3301      	adds	r3, #1
 8007548:	9304      	str	r3, [sp, #16]
 800754a:	4615      	mov	r5, r2
 800754c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007550:	4294      	cmp	r4, r2
 8007552:	f300 809c 	bgt.w	800768e <__kernel_rem_pio2+0x2ee>
 8007556:	f1ba 0f00 	cmp.w	sl, #0
 800755a:	dd07      	ble.n	800756c <__kernel_rem_pio2+0x1cc>
 800755c:	f1ba 0f01 	cmp.w	sl, #1
 8007560:	f000 80c0 	beq.w	80076e4 <__kernel_rem_pio2+0x344>
 8007564:	f1ba 0f02 	cmp.w	sl, #2
 8007568:	f000 80c6 	beq.w	80076f8 <__kernel_rem_pio2+0x358>
 800756c:	f1bb 0f02 	cmp.w	fp, #2
 8007570:	d14d      	bne.n	800760e <__kernel_rem_pio2+0x26e>
 8007572:	4632      	mov	r2, r6
 8007574:	463b      	mov	r3, r7
 8007576:	4956      	ldr	r1, [pc, #344]	; (80076d0 <__kernel_rem_pio2+0x330>)
 8007578:	2000      	movs	r0, #0
 800757a:	f7f8 fe7d 	bl	8000278 <__aeabi_dsub>
 800757e:	4606      	mov	r6, r0
 8007580:	460f      	mov	r7, r1
 8007582:	2d00      	cmp	r5, #0
 8007584:	d043      	beq.n	800760e <__kernel_rem_pio2+0x26e>
 8007586:	4650      	mov	r0, sl
 8007588:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80076c0 <__kernel_rem_pio2+0x320>
 800758c:	f000 fba0 	bl	8007cd0 <scalbn>
 8007590:	4630      	mov	r0, r6
 8007592:	4639      	mov	r1, r7
 8007594:	ec53 2b10 	vmov	r2, r3, d0
 8007598:	f7f8 fe6e 	bl	8000278 <__aeabi_dsub>
 800759c:	4606      	mov	r6, r0
 800759e:	460f      	mov	r7, r1
 80075a0:	e035      	b.n	800760e <__kernel_rem_pio2+0x26e>
 80075a2:	4b4c      	ldr	r3, [pc, #304]	; (80076d4 <__kernel_rem_pio2+0x334>)
 80075a4:	2200      	movs	r2, #0
 80075a6:	4630      	mov	r0, r6
 80075a8:	4639      	mov	r1, r7
 80075aa:	f7f9 f81d 	bl	80005e8 <__aeabi_dmul>
 80075ae:	f7f9 facb 	bl	8000b48 <__aeabi_d2iz>
 80075b2:	f7f8 ffaf 	bl	8000514 <__aeabi_i2d>
 80075b6:	4602      	mov	r2, r0
 80075b8:	460b      	mov	r3, r1
 80075ba:	ec43 2b18 	vmov	d8, r2, r3
 80075be:	4b46      	ldr	r3, [pc, #280]	; (80076d8 <__kernel_rem_pio2+0x338>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	f7f9 f811 	bl	80005e8 <__aeabi_dmul>
 80075c6:	4602      	mov	r2, r0
 80075c8:	460b      	mov	r3, r1
 80075ca:	4630      	mov	r0, r6
 80075cc:	4639      	mov	r1, r7
 80075ce:	f7f8 fe53 	bl	8000278 <__aeabi_dsub>
 80075d2:	f7f9 fab9 	bl	8000b48 <__aeabi_d2iz>
 80075d6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80075da:	f84b 0b04 	str.w	r0, [fp], #4
 80075de:	ec51 0b18 	vmov	r0, r1, d8
 80075e2:	f7f8 fe4b 	bl	800027c <__adddf3>
 80075e6:	f109 39ff 	add.w	r9, r9, #4294967295
 80075ea:	4606      	mov	r6, r0
 80075ec:	460f      	mov	r7, r1
 80075ee:	e75b      	b.n	80074a8 <__kernel_rem_pio2+0x108>
 80075f0:	d106      	bne.n	8007600 <__kernel_rem_pio2+0x260>
 80075f2:	1e63      	subs	r3, r4, #1
 80075f4:	aa0e      	add	r2, sp, #56	; 0x38
 80075f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80075fa:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80075fe:	e79d      	b.n	800753c <__kernel_rem_pio2+0x19c>
 8007600:	4b36      	ldr	r3, [pc, #216]	; (80076dc <__kernel_rem_pio2+0x33c>)
 8007602:	2200      	movs	r2, #0
 8007604:	f7f9 fa76 	bl	8000af4 <__aeabi_dcmpge>
 8007608:	2800      	cmp	r0, #0
 800760a:	d13d      	bne.n	8007688 <__kernel_rem_pio2+0x2e8>
 800760c:	4683      	mov	fp, r0
 800760e:	2200      	movs	r2, #0
 8007610:	2300      	movs	r3, #0
 8007612:	4630      	mov	r0, r6
 8007614:	4639      	mov	r1, r7
 8007616:	f7f9 fa4f 	bl	8000ab8 <__aeabi_dcmpeq>
 800761a:	2800      	cmp	r0, #0
 800761c:	f000 80c0 	beq.w	80077a0 <__kernel_rem_pio2+0x400>
 8007620:	1e65      	subs	r5, r4, #1
 8007622:	462b      	mov	r3, r5
 8007624:	2200      	movs	r2, #0
 8007626:	9902      	ldr	r1, [sp, #8]
 8007628:	428b      	cmp	r3, r1
 800762a:	da6c      	bge.n	8007706 <__kernel_rem_pio2+0x366>
 800762c:	2a00      	cmp	r2, #0
 800762e:	f000 8089 	beq.w	8007744 <__kernel_rem_pio2+0x3a4>
 8007632:	ab0e      	add	r3, sp, #56	; 0x38
 8007634:	f1aa 0a18 	sub.w	sl, sl, #24
 8007638:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800763c:	2b00      	cmp	r3, #0
 800763e:	f000 80ad 	beq.w	800779c <__kernel_rem_pio2+0x3fc>
 8007642:	4650      	mov	r0, sl
 8007644:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80076c0 <__kernel_rem_pio2+0x320>
 8007648:	f000 fb42 	bl	8007cd0 <scalbn>
 800764c:	ab9a      	add	r3, sp, #616	; 0x268
 800764e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007652:	ec57 6b10 	vmov	r6, r7, d0
 8007656:	00ec      	lsls	r4, r5, #3
 8007658:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800765c:	46aa      	mov	sl, r5
 800765e:	f1ba 0f00 	cmp.w	sl, #0
 8007662:	f280 80d6 	bge.w	8007812 <__kernel_rem_pio2+0x472>
 8007666:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80076b8 <__kernel_rem_pio2+0x318>
 800766a:	462e      	mov	r6, r5
 800766c:	2e00      	cmp	r6, #0
 800766e:	f2c0 8104 	blt.w	800787a <__kernel_rem_pio2+0x4da>
 8007672:	ab72      	add	r3, sp, #456	; 0x1c8
 8007674:	ed8d 8b06 	vstr	d8, [sp, #24]
 8007678:	f8df a064 	ldr.w	sl, [pc, #100]	; 80076e0 <__kernel_rem_pio2+0x340>
 800767c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8007680:	f04f 0800 	mov.w	r8, #0
 8007684:	1baf      	subs	r7, r5, r6
 8007686:	e0ea      	b.n	800785e <__kernel_rem_pio2+0x4be>
 8007688:	f04f 0b02 	mov.w	fp, #2
 800768c:	e759      	b.n	8007542 <__kernel_rem_pio2+0x1a2>
 800768e:	f8d8 3000 	ldr.w	r3, [r8]
 8007692:	b955      	cbnz	r5, 80076aa <__kernel_rem_pio2+0x30a>
 8007694:	b123      	cbz	r3, 80076a0 <__kernel_rem_pio2+0x300>
 8007696:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800769a:	f8c8 3000 	str.w	r3, [r8]
 800769e:	2301      	movs	r3, #1
 80076a0:	3201      	adds	r2, #1
 80076a2:	f108 0804 	add.w	r8, r8, #4
 80076a6:	461d      	mov	r5, r3
 80076a8:	e752      	b.n	8007550 <__kernel_rem_pio2+0x1b0>
 80076aa:	1acb      	subs	r3, r1, r3
 80076ac:	f8c8 3000 	str.w	r3, [r8]
 80076b0:	462b      	mov	r3, r5
 80076b2:	e7f5      	b.n	80076a0 <__kernel_rem_pio2+0x300>
 80076b4:	f3af 8000 	nop.w
	...
 80076c4:	3ff00000 	.word	0x3ff00000
 80076c8:	080081e0 	.word	0x080081e0
 80076cc:	40200000 	.word	0x40200000
 80076d0:	3ff00000 	.word	0x3ff00000
 80076d4:	3e700000 	.word	0x3e700000
 80076d8:	41700000 	.word	0x41700000
 80076dc:	3fe00000 	.word	0x3fe00000
 80076e0:	080081a0 	.word	0x080081a0
 80076e4:	1e62      	subs	r2, r4, #1
 80076e6:	ab0e      	add	r3, sp, #56	; 0x38
 80076e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ec:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80076f0:	a90e      	add	r1, sp, #56	; 0x38
 80076f2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80076f6:	e739      	b.n	800756c <__kernel_rem_pio2+0x1cc>
 80076f8:	1e62      	subs	r2, r4, #1
 80076fa:	ab0e      	add	r3, sp, #56	; 0x38
 80076fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007700:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007704:	e7f4      	b.n	80076f0 <__kernel_rem_pio2+0x350>
 8007706:	a90e      	add	r1, sp, #56	; 0x38
 8007708:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800770c:	3b01      	subs	r3, #1
 800770e:	430a      	orrs	r2, r1
 8007710:	e789      	b.n	8007626 <__kernel_rem_pio2+0x286>
 8007712:	3301      	adds	r3, #1
 8007714:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007718:	2900      	cmp	r1, #0
 800771a:	d0fa      	beq.n	8007712 <__kernel_rem_pio2+0x372>
 800771c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800771e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8007722:	446a      	add	r2, sp
 8007724:	3a98      	subs	r2, #152	; 0x98
 8007726:	920a      	str	r2, [sp, #40]	; 0x28
 8007728:	9a08      	ldr	r2, [sp, #32]
 800772a:	18e3      	adds	r3, r4, r3
 800772c:	18a5      	adds	r5, r4, r2
 800772e:	aa22      	add	r2, sp, #136	; 0x88
 8007730:	f104 0801 	add.w	r8, r4, #1
 8007734:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8007738:	9304      	str	r3, [sp, #16]
 800773a:	9b04      	ldr	r3, [sp, #16]
 800773c:	4543      	cmp	r3, r8
 800773e:	da04      	bge.n	800774a <__kernel_rem_pio2+0x3aa>
 8007740:	461c      	mov	r4, r3
 8007742:	e6a3      	b.n	800748c <__kernel_rem_pio2+0xec>
 8007744:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007746:	2301      	movs	r3, #1
 8007748:	e7e4      	b.n	8007714 <__kernel_rem_pio2+0x374>
 800774a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800774c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007750:	f7f8 fee0 	bl	8000514 <__aeabi_i2d>
 8007754:	e8e5 0102 	strd	r0, r1, [r5], #8
 8007758:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800775a:	46ab      	mov	fp, r5
 800775c:	461c      	mov	r4, r3
 800775e:	f04f 0900 	mov.w	r9, #0
 8007762:	2600      	movs	r6, #0
 8007764:	2700      	movs	r7, #0
 8007766:	9b06      	ldr	r3, [sp, #24]
 8007768:	4599      	cmp	r9, r3
 800776a:	dd06      	ble.n	800777a <__kernel_rem_pio2+0x3da>
 800776c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800776e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8007772:	f108 0801 	add.w	r8, r8, #1
 8007776:	930a      	str	r3, [sp, #40]	; 0x28
 8007778:	e7df      	b.n	800773a <__kernel_rem_pio2+0x39a>
 800777a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800777e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007782:	f7f8 ff31 	bl	80005e8 <__aeabi_dmul>
 8007786:	4602      	mov	r2, r0
 8007788:	460b      	mov	r3, r1
 800778a:	4630      	mov	r0, r6
 800778c:	4639      	mov	r1, r7
 800778e:	f7f8 fd75 	bl	800027c <__adddf3>
 8007792:	f109 0901 	add.w	r9, r9, #1
 8007796:	4606      	mov	r6, r0
 8007798:	460f      	mov	r7, r1
 800779a:	e7e4      	b.n	8007766 <__kernel_rem_pio2+0x3c6>
 800779c:	3d01      	subs	r5, #1
 800779e:	e748      	b.n	8007632 <__kernel_rem_pio2+0x292>
 80077a0:	ec47 6b10 	vmov	d0, r6, r7
 80077a4:	f1ca 0000 	rsb	r0, sl, #0
 80077a8:	f000 fa92 	bl	8007cd0 <scalbn>
 80077ac:	ec57 6b10 	vmov	r6, r7, d0
 80077b0:	4ba0      	ldr	r3, [pc, #640]	; (8007a34 <__kernel_rem_pio2+0x694>)
 80077b2:	ee10 0a10 	vmov	r0, s0
 80077b6:	2200      	movs	r2, #0
 80077b8:	4639      	mov	r1, r7
 80077ba:	f7f9 f99b 	bl	8000af4 <__aeabi_dcmpge>
 80077be:	b1f8      	cbz	r0, 8007800 <__kernel_rem_pio2+0x460>
 80077c0:	4b9d      	ldr	r3, [pc, #628]	; (8007a38 <__kernel_rem_pio2+0x698>)
 80077c2:	2200      	movs	r2, #0
 80077c4:	4630      	mov	r0, r6
 80077c6:	4639      	mov	r1, r7
 80077c8:	f7f8 ff0e 	bl	80005e8 <__aeabi_dmul>
 80077cc:	f7f9 f9bc 	bl	8000b48 <__aeabi_d2iz>
 80077d0:	4680      	mov	r8, r0
 80077d2:	f7f8 fe9f 	bl	8000514 <__aeabi_i2d>
 80077d6:	4b97      	ldr	r3, [pc, #604]	; (8007a34 <__kernel_rem_pio2+0x694>)
 80077d8:	2200      	movs	r2, #0
 80077da:	f7f8 ff05 	bl	80005e8 <__aeabi_dmul>
 80077de:	460b      	mov	r3, r1
 80077e0:	4602      	mov	r2, r0
 80077e2:	4639      	mov	r1, r7
 80077e4:	4630      	mov	r0, r6
 80077e6:	f7f8 fd47 	bl	8000278 <__aeabi_dsub>
 80077ea:	f7f9 f9ad 	bl	8000b48 <__aeabi_d2iz>
 80077ee:	1c65      	adds	r5, r4, #1
 80077f0:	ab0e      	add	r3, sp, #56	; 0x38
 80077f2:	f10a 0a18 	add.w	sl, sl, #24
 80077f6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80077fa:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80077fe:	e720      	b.n	8007642 <__kernel_rem_pio2+0x2a2>
 8007800:	4630      	mov	r0, r6
 8007802:	4639      	mov	r1, r7
 8007804:	f7f9 f9a0 	bl	8000b48 <__aeabi_d2iz>
 8007808:	ab0e      	add	r3, sp, #56	; 0x38
 800780a:	4625      	mov	r5, r4
 800780c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007810:	e717      	b.n	8007642 <__kernel_rem_pio2+0x2a2>
 8007812:	ab0e      	add	r3, sp, #56	; 0x38
 8007814:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8007818:	f7f8 fe7c 	bl	8000514 <__aeabi_i2d>
 800781c:	4632      	mov	r2, r6
 800781e:	463b      	mov	r3, r7
 8007820:	f7f8 fee2 	bl	80005e8 <__aeabi_dmul>
 8007824:	4b84      	ldr	r3, [pc, #528]	; (8007a38 <__kernel_rem_pio2+0x698>)
 8007826:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800782a:	2200      	movs	r2, #0
 800782c:	4630      	mov	r0, r6
 800782e:	4639      	mov	r1, r7
 8007830:	f7f8 feda 	bl	80005e8 <__aeabi_dmul>
 8007834:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007838:	4606      	mov	r6, r0
 800783a:	460f      	mov	r7, r1
 800783c:	e70f      	b.n	800765e <__kernel_rem_pio2+0x2be>
 800783e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007842:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8007846:	f7f8 fecf 	bl	80005e8 <__aeabi_dmul>
 800784a:	4602      	mov	r2, r0
 800784c:	460b      	mov	r3, r1
 800784e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007852:	f7f8 fd13 	bl	800027c <__adddf3>
 8007856:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800785a:	f108 0801 	add.w	r8, r8, #1
 800785e:	9b02      	ldr	r3, [sp, #8]
 8007860:	4598      	cmp	r8, r3
 8007862:	dc01      	bgt.n	8007868 <__kernel_rem_pio2+0x4c8>
 8007864:	45b8      	cmp	r8, r7
 8007866:	ddea      	ble.n	800783e <__kernel_rem_pio2+0x49e>
 8007868:	ed9d 7b06 	vldr	d7, [sp, #24]
 800786c:	ab4a      	add	r3, sp, #296	; 0x128
 800786e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007872:	ed87 7b00 	vstr	d7, [r7]
 8007876:	3e01      	subs	r6, #1
 8007878:	e6f8      	b.n	800766c <__kernel_rem_pio2+0x2cc>
 800787a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800787c:	2b02      	cmp	r3, #2
 800787e:	dc0b      	bgt.n	8007898 <__kernel_rem_pio2+0x4f8>
 8007880:	2b00      	cmp	r3, #0
 8007882:	dc35      	bgt.n	80078f0 <__kernel_rem_pio2+0x550>
 8007884:	d059      	beq.n	800793a <__kernel_rem_pio2+0x59a>
 8007886:	9b04      	ldr	r3, [sp, #16]
 8007888:	f003 0007 	and.w	r0, r3, #7
 800788c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007890:	ecbd 8b02 	vpop	{d8}
 8007894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007898:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800789a:	2b03      	cmp	r3, #3
 800789c:	d1f3      	bne.n	8007886 <__kernel_rem_pio2+0x4e6>
 800789e:	ab4a      	add	r3, sp, #296	; 0x128
 80078a0:	4423      	add	r3, r4
 80078a2:	9306      	str	r3, [sp, #24]
 80078a4:	461c      	mov	r4, r3
 80078a6:	469a      	mov	sl, r3
 80078a8:	9502      	str	r5, [sp, #8]
 80078aa:	9b02      	ldr	r3, [sp, #8]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f1aa 0a08 	sub.w	sl, sl, #8
 80078b2:	dc6b      	bgt.n	800798c <__kernel_rem_pio2+0x5ec>
 80078b4:	46aa      	mov	sl, r5
 80078b6:	f1ba 0f01 	cmp.w	sl, #1
 80078ba:	f1a4 0408 	sub.w	r4, r4, #8
 80078be:	f300 8085 	bgt.w	80079cc <__kernel_rem_pio2+0x62c>
 80078c2:	9c06      	ldr	r4, [sp, #24]
 80078c4:	2000      	movs	r0, #0
 80078c6:	3408      	adds	r4, #8
 80078c8:	2100      	movs	r1, #0
 80078ca:	2d01      	cmp	r5, #1
 80078cc:	f300 809d 	bgt.w	8007a0a <__kernel_rem_pio2+0x66a>
 80078d0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80078d4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80078d8:	f1bb 0f00 	cmp.w	fp, #0
 80078dc:	f040 809b 	bne.w	8007a16 <__kernel_rem_pio2+0x676>
 80078e0:	9b01      	ldr	r3, [sp, #4]
 80078e2:	e9c3 5600 	strd	r5, r6, [r3]
 80078e6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80078ea:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80078ee:	e7ca      	b.n	8007886 <__kernel_rem_pio2+0x4e6>
 80078f0:	3408      	adds	r4, #8
 80078f2:	ab4a      	add	r3, sp, #296	; 0x128
 80078f4:	441c      	add	r4, r3
 80078f6:	462e      	mov	r6, r5
 80078f8:	2000      	movs	r0, #0
 80078fa:	2100      	movs	r1, #0
 80078fc:	2e00      	cmp	r6, #0
 80078fe:	da36      	bge.n	800796e <__kernel_rem_pio2+0x5ce>
 8007900:	f1bb 0f00 	cmp.w	fp, #0
 8007904:	d039      	beq.n	800797a <__kernel_rem_pio2+0x5da>
 8007906:	4602      	mov	r2, r0
 8007908:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800790c:	9c01      	ldr	r4, [sp, #4]
 800790e:	e9c4 2300 	strd	r2, r3, [r4]
 8007912:	4602      	mov	r2, r0
 8007914:	460b      	mov	r3, r1
 8007916:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800791a:	f7f8 fcad 	bl	8000278 <__aeabi_dsub>
 800791e:	ae4c      	add	r6, sp, #304	; 0x130
 8007920:	2401      	movs	r4, #1
 8007922:	42a5      	cmp	r5, r4
 8007924:	da2c      	bge.n	8007980 <__kernel_rem_pio2+0x5e0>
 8007926:	f1bb 0f00 	cmp.w	fp, #0
 800792a:	d002      	beq.n	8007932 <__kernel_rem_pio2+0x592>
 800792c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007930:	4619      	mov	r1, r3
 8007932:	9b01      	ldr	r3, [sp, #4]
 8007934:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007938:	e7a5      	b.n	8007886 <__kernel_rem_pio2+0x4e6>
 800793a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800793e:	eb0d 0403 	add.w	r4, sp, r3
 8007942:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007946:	2000      	movs	r0, #0
 8007948:	2100      	movs	r1, #0
 800794a:	2d00      	cmp	r5, #0
 800794c:	da09      	bge.n	8007962 <__kernel_rem_pio2+0x5c2>
 800794e:	f1bb 0f00 	cmp.w	fp, #0
 8007952:	d002      	beq.n	800795a <__kernel_rem_pio2+0x5ba>
 8007954:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007958:	4619      	mov	r1, r3
 800795a:	9b01      	ldr	r3, [sp, #4]
 800795c:	e9c3 0100 	strd	r0, r1, [r3]
 8007960:	e791      	b.n	8007886 <__kernel_rem_pio2+0x4e6>
 8007962:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007966:	f7f8 fc89 	bl	800027c <__adddf3>
 800796a:	3d01      	subs	r5, #1
 800796c:	e7ed      	b.n	800794a <__kernel_rem_pio2+0x5aa>
 800796e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007972:	f7f8 fc83 	bl	800027c <__adddf3>
 8007976:	3e01      	subs	r6, #1
 8007978:	e7c0      	b.n	80078fc <__kernel_rem_pio2+0x55c>
 800797a:	4602      	mov	r2, r0
 800797c:	460b      	mov	r3, r1
 800797e:	e7c5      	b.n	800790c <__kernel_rem_pio2+0x56c>
 8007980:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007984:	f7f8 fc7a 	bl	800027c <__adddf3>
 8007988:	3401      	adds	r4, #1
 800798a:	e7ca      	b.n	8007922 <__kernel_rem_pio2+0x582>
 800798c:	e9da 8900 	ldrd	r8, r9, [sl]
 8007990:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007994:	9b02      	ldr	r3, [sp, #8]
 8007996:	3b01      	subs	r3, #1
 8007998:	9302      	str	r3, [sp, #8]
 800799a:	4632      	mov	r2, r6
 800799c:	463b      	mov	r3, r7
 800799e:	4640      	mov	r0, r8
 80079a0:	4649      	mov	r1, r9
 80079a2:	f7f8 fc6b 	bl	800027c <__adddf3>
 80079a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80079aa:	4602      	mov	r2, r0
 80079ac:	460b      	mov	r3, r1
 80079ae:	4640      	mov	r0, r8
 80079b0:	4649      	mov	r1, r9
 80079b2:	f7f8 fc61 	bl	8000278 <__aeabi_dsub>
 80079b6:	4632      	mov	r2, r6
 80079b8:	463b      	mov	r3, r7
 80079ba:	f7f8 fc5f 	bl	800027c <__adddf3>
 80079be:	ed9d 7b08 	vldr	d7, [sp, #32]
 80079c2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80079c6:	ed8a 7b00 	vstr	d7, [sl]
 80079ca:	e76e      	b.n	80078aa <__kernel_rem_pio2+0x50a>
 80079cc:	e9d4 8900 	ldrd	r8, r9, [r4]
 80079d0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80079d4:	4640      	mov	r0, r8
 80079d6:	4632      	mov	r2, r6
 80079d8:	463b      	mov	r3, r7
 80079da:	4649      	mov	r1, r9
 80079dc:	f7f8 fc4e 	bl	800027c <__adddf3>
 80079e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079e4:	4602      	mov	r2, r0
 80079e6:	460b      	mov	r3, r1
 80079e8:	4640      	mov	r0, r8
 80079ea:	4649      	mov	r1, r9
 80079ec:	f7f8 fc44 	bl	8000278 <__aeabi_dsub>
 80079f0:	4632      	mov	r2, r6
 80079f2:	463b      	mov	r3, r7
 80079f4:	f7f8 fc42 	bl	800027c <__adddf3>
 80079f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80079fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007a00:	ed84 7b00 	vstr	d7, [r4]
 8007a04:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a08:	e755      	b.n	80078b6 <__kernel_rem_pio2+0x516>
 8007a0a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007a0e:	f7f8 fc35 	bl	800027c <__adddf3>
 8007a12:	3d01      	subs	r5, #1
 8007a14:	e759      	b.n	80078ca <__kernel_rem_pio2+0x52a>
 8007a16:	9b01      	ldr	r3, [sp, #4]
 8007a18:	9a01      	ldr	r2, [sp, #4]
 8007a1a:	601d      	str	r5, [r3, #0]
 8007a1c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8007a20:	605c      	str	r4, [r3, #4]
 8007a22:	609f      	str	r7, [r3, #8]
 8007a24:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8007a28:	60d3      	str	r3, [r2, #12]
 8007a2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a2e:	6110      	str	r0, [r2, #16]
 8007a30:	6153      	str	r3, [r2, #20]
 8007a32:	e728      	b.n	8007886 <__kernel_rem_pio2+0x4e6>
 8007a34:	41700000 	.word	0x41700000
 8007a38:	3e700000 	.word	0x3e700000
 8007a3c:	00000000 	.word	0x00000000

08007a40 <__kernel_sin>:
 8007a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a44:	ed2d 8b04 	vpush	{d8-d9}
 8007a48:	eeb0 8a41 	vmov.f32	s16, s2
 8007a4c:	eef0 8a61 	vmov.f32	s17, s3
 8007a50:	ec55 4b10 	vmov	r4, r5, d0
 8007a54:	b083      	sub	sp, #12
 8007a56:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007a5a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007a5e:	9001      	str	r0, [sp, #4]
 8007a60:	da06      	bge.n	8007a70 <__kernel_sin+0x30>
 8007a62:	ee10 0a10 	vmov	r0, s0
 8007a66:	4629      	mov	r1, r5
 8007a68:	f7f9 f86e 	bl	8000b48 <__aeabi_d2iz>
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	d051      	beq.n	8007b14 <__kernel_sin+0xd4>
 8007a70:	4622      	mov	r2, r4
 8007a72:	462b      	mov	r3, r5
 8007a74:	4620      	mov	r0, r4
 8007a76:	4629      	mov	r1, r5
 8007a78:	f7f8 fdb6 	bl	80005e8 <__aeabi_dmul>
 8007a7c:	4682      	mov	sl, r0
 8007a7e:	468b      	mov	fp, r1
 8007a80:	4602      	mov	r2, r0
 8007a82:	460b      	mov	r3, r1
 8007a84:	4620      	mov	r0, r4
 8007a86:	4629      	mov	r1, r5
 8007a88:	f7f8 fdae 	bl	80005e8 <__aeabi_dmul>
 8007a8c:	a341      	add	r3, pc, #260	; (adr r3, 8007b94 <__kernel_sin+0x154>)
 8007a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a92:	4680      	mov	r8, r0
 8007a94:	4689      	mov	r9, r1
 8007a96:	4650      	mov	r0, sl
 8007a98:	4659      	mov	r1, fp
 8007a9a:	f7f8 fda5 	bl	80005e8 <__aeabi_dmul>
 8007a9e:	a33f      	add	r3, pc, #252	; (adr r3, 8007b9c <__kernel_sin+0x15c>)
 8007aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa4:	f7f8 fbe8 	bl	8000278 <__aeabi_dsub>
 8007aa8:	4652      	mov	r2, sl
 8007aaa:	465b      	mov	r3, fp
 8007aac:	f7f8 fd9c 	bl	80005e8 <__aeabi_dmul>
 8007ab0:	a33c      	add	r3, pc, #240	; (adr r3, 8007ba4 <__kernel_sin+0x164>)
 8007ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab6:	f7f8 fbe1 	bl	800027c <__adddf3>
 8007aba:	4652      	mov	r2, sl
 8007abc:	465b      	mov	r3, fp
 8007abe:	f7f8 fd93 	bl	80005e8 <__aeabi_dmul>
 8007ac2:	a33a      	add	r3, pc, #232	; (adr r3, 8007bac <__kernel_sin+0x16c>)
 8007ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac8:	f7f8 fbd6 	bl	8000278 <__aeabi_dsub>
 8007acc:	4652      	mov	r2, sl
 8007ace:	465b      	mov	r3, fp
 8007ad0:	f7f8 fd8a 	bl	80005e8 <__aeabi_dmul>
 8007ad4:	a337      	add	r3, pc, #220	; (adr r3, 8007bb4 <__kernel_sin+0x174>)
 8007ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ada:	f7f8 fbcf 	bl	800027c <__adddf3>
 8007ade:	9b01      	ldr	r3, [sp, #4]
 8007ae0:	4606      	mov	r6, r0
 8007ae2:	460f      	mov	r7, r1
 8007ae4:	b9eb      	cbnz	r3, 8007b22 <__kernel_sin+0xe2>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	460b      	mov	r3, r1
 8007aea:	4650      	mov	r0, sl
 8007aec:	4659      	mov	r1, fp
 8007aee:	f7f8 fd7b 	bl	80005e8 <__aeabi_dmul>
 8007af2:	a325      	add	r3, pc, #148	; (adr r3, 8007b88 <__kernel_sin+0x148>)
 8007af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af8:	f7f8 fbbe 	bl	8000278 <__aeabi_dsub>
 8007afc:	4642      	mov	r2, r8
 8007afe:	464b      	mov	r3, r9
 8007b00:	f7f8 fd72 	bl	80005e8 <__aeabi_dmul>
 8007b04:	4602      	mov	r2, r0
 8007b06:	460b      	mov	r3, r1
 8007b08:	4620      	mov	r0, r4
 8007b0a:	4629      	mov	r1, r5
 8007b0c:	f7f8 fbb6 	bl	800027c <__adddf3>
 8007b10:	4604      	mov	r4, r0
 8007b12:	460d      	mov	r5, r1
 8007b14:	ec45 4b10 	vmov	d0, r4, r5
 8007b18:	b003      	add	sp, #12
 8007b1a:	ecbd 8b04 	vpop	{d8-d9}
 8007b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b22:	4b1b      	ldr	r3, [pc, #108]	; (8007b90 <__kernel_sin+0x150>)
 8007b24:	ec51 0b18 	vmov	r0, r1, d8
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f7f8 fd5d 	bl	80005e8 <__aeabi_dmul>
 8007b2e:	4632      	mov	r2, r6
 8007b30:	ec41 0b19 	vmov	d9, r0, r1
 8007b34:	463b      	mov	r3, r7
 8007b36:	4640      	mov	r0, r8
 8007b38:	4649      	mov	r1, r9
 8007b3a:	f7f8 fd55 	bl	80005e8 <__aeabi_dmul>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	460b      	mov	r3, r1
 8007b42:	ec51 0b19 	vmov	r0, r1, d9
 8007b46:	f7f8 fb97 	bl	8000278 <__aeabi_dsub>
 8007b4a:	4652      	mov	r2, sl
 8007b4c:	465b      	mov	r3, fp
 8007b4e:	f7f8 fd4b 	bl	80005e8 <__aeabi_dmul>
 8007b52:	ec53 2b18 	vmov	r2, r3, d8
 8007b56:	f7f8 fb8f 	bl	8000278 <__aeabi_dsub>
 8007b5a:	a30b      	add	r3, pc, #44	; (adr r3, 8007b88 <__kernel_sin+0x148>)
 8007b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b60:	4606      	mov	r6, r0
 8007b62:	460f      	mov	r7, r1
 8007b64:	4640      	mov	r0, r8
 8007b66:	4649      	mov	r1, r9
 8007b68:	f7f8 fd3e 	bl	80005e8 <__aeabi_dmul>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	460b      	mov	r3, r1
 8007b70:	4630      	mov	r0, r6
 8007b72:	4639      	mov	r1, r7
 8007b74:	f7f8 fb82 	bl	800027c <__adddf3>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	4629      	mov	r1, r5
 8007b80:	f7f8 fb7a 	bl	8000278 <__aeabi_dsub>
 8007b84:	e7c4      	b.n	8007b10 <__kernel_sin+0xd0>
 8007b86:	bf00      	nop
 8007b88:	55555549 	.word	0x55555549
 8007b8c:	3fc55555 	.word	0x3fc55555
 8007b90:	3fe00000 	.word	0x3fe00000
 8007b94:	5acfd57c 	.word	0x5acfd57c
 8007b98:	3de5d93a 	.word	0x3de5d93a
 8007b9c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007ba0:	3e5ae5e6 	.word	0x3e5ae5e6
 8007ba4:	57b1fe7d 	.word	0x57b1fe7d
 8007ba8:	3ec71de3 	.word	0x3ec71de3
 8007bac:	19c161d5 	.word	0x19c161d5
 8007bb0:	3f2a01a0 	.word	0x3f2a01a0
 8007bb4:	1110f8a6 	.word	0x1110f8a6
 8007bb8:	3f811111 	.word	0x3f811111
 8007bbc:	00000000 	.word	0x00000000

08007bc0 <floor>:
 8007bc0:	ec51 0b10 	vmov	r0, r1, d0
 8007bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bc8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007bcc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007bd0:	2e13      	cmp	r6, #19
 8007bd2:	ee10 5a10 	vmov	r5, s0
 8007bd6:	ee10 8a10 	vmov	r8, s0
 8007bda:	460c      	mov	r4, r1
 8007bdc:	dc32      	bgt.n	8007c44 <floor+0x84>
 8007bde:	2e00      	cmp	r6, #0
 8007be0:	da14      	bge.n	8007c0c <floor+0x4c>
 8007be2:	a333      	add	r3, pc, #204	; (adr r3, 8007cb0 <floor+0xf0>)
 8007be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be8:	f7f8 fb48 	bl	800027c <__adddf3>
 8007bec:	2200      	movs	r2, #0
 8007bee:	2300      	movs	r3, #0
 8007bf0:	f7f8 ff8a 	bl	8000b08 <__aeabi_dcmpgt>
 8007bf4:	b138      	cbz	r0, 8007c06 <floor+0x46>
 8007bf6:	2c00      	cmp	r4, #0
 8007bf8:	da57      	bge.n	8007caa <floor+0xea>
 8007bfa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007bfe:	431d      	orrs	r5, r3
 8007c00:	d001      	beq.n	8007c06 <floor+0x46>
 8007c02:	4c2d      	ldr	r4, [pc, #180]	; (8007cb8 <floor+0xf8>)
 8007c04:	2500      	movs	r5, #0
 8007c06:	4621      	mov	r1, r4
 8007c08:	4628      	mov	r0, r5
 8007c0a:	e025      	b.n	8007c58 <floor+0x98>
 8007c0c:	4f2b      	ldr	r7, [pc, #172]	; (8007cbc <floor+0xfc>)
 8007c0e:	4137      	asrs	r7, r6
 8007c10:	ea01 0307 	and.w	r3, r1, r7
 8007c14:	4303      	orrs	r3, r0
 8007c16:	d01f      	beq.n	8007c58 <floor+0x98>
 8007c18:	a325      	add	r3, pc, #148	; (adr r3, 8007cb0 <floor+0xf0>)
 8007c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1e:	f7f8 fb2d 	bl	800027c <__adddf3>
 8007c22:	2200      	movs	r2, #0
 8007c24:	2300      	movs	r3, #0
 8007c26:	f7f8 ff6f 	bl	8000b08 <__aeabi_dcmpgt>
 8007c2a:	2800      	cmp	r0, #0
 8007c2c:	d0eb      	beq.n	8007c06 <floor+0x46>
 8007c2e:	2c00      	cmp	r4, #0
 8007c30:	bfbe      	ittt	lt
 8007c32:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007c36:	fa43 f606 	asrlt.w	r6, r3, r6
 8007c3a:	19a4      	addlt	r4, r4, r6
 8007c3c:	ea24 0407 	bic.w	r4, r4, r7
 8007c40:	2500      	movs	r5, #0
 8007c42:	e7e0      	b.n	8007c06 <floor+0x46>
 8007c44:	2e33      	cmp	r6, #51	; 0x33
 8007c46:	dd0b      	ble.n	8007c60 <floor+0xa0>
 8007c48:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007c4c:	d104      	bne.n	8007c58 <floor+0x98>
 8007c4e:	ee10 2a10 	vmov	r2, s0
 8007c52:	460b      	mov	r3, r1
 8007c54:	f7f8 fb12 	bl	800027c <__adddf3>
 8007c58:	ec41 0b10 	vmov	d0, r0, r1
 8007c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c60:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007c64:	f04f 33ff 	mov.w	r3, #4294967295
 8007c68:	fa23 f707 	lsr.w	r7, r3, r7
 8007c6c:	4207      	tst	r7, r0
 8007c6e:	d0f3      	beq.n	8007c58 <floor+0x98>
 8007c70:	a30f      	add	r3, pc, #60	; (adr r3, 8007cb0 <floor+0xf0>)
 8007c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c76:	f7f8 fb01 	bl	800027c <__adddf3>
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	f7f8 ff43 	bl	8000b08 <__aeabi_dcmpgt>
 8007c82:	2800      	cmp	r0, #0
 8007c84:	d0bf      	beq.n	8007c06 <floor+0x46>
 8007c86:	2c00      	cmp	r4, #0
 8007c88:	da02      	bge.n	8007c90 <floor+0xd0>
 8007c8a:	2e14      	cmp	r6, #20
 8007c8c:	d103      	bne.n	8007c96 <floor+0xd6>
 8007c8e:	3401      	adds	r4, #1
 8007c90:	ea25 0507 	bic.w	r5, r5, r7
 8007c94:	e7b7      	b.n	8007c06 <floor+0x46>
 8007c96:	2301      	movs	r3, #1
 8007c98:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007c9c:	fa03 f606 	lsl.w	r6, r3, r6
 8007ca0:	4435      	add	r5, r6
 8007ca2:	4545      	cmp	r5, r8
 8007ca4:	bf38      	it	cc
 8007ca6:	18e4      	addcc	r4, r4, r3
 8007ca8:	e7f2      	b.n	8007c90 <floor+0xd0>
 8007caa:	2500      	movs	r5, #0
 8007cac:	462c      	mov	r4, r5
 8007cae:	e7aa      	b.n	8007c06 <floor+0x46>
 8007cb0:	8800759c 	.word	0x8800759c
 8007cb4:	7e37e43c 	.word	0x7e37e43c
 8007cb8:	bff00000 	.word	0xbff00000
 8007cbc:	000fffff 	.word	0x000fffff

08007cc0 <nan>:
 8007cc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007cc8 <nan+0x8>
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop
 8007cc8:	00000000 	.word	0x00000000
 8007ccc:	7ff80000 	.word	0x7ff80000

08007cd0 <scalbn>:
 8007cd0:	b570      	push	{r4, r5, r6, lr}
 8007cd2:	ec55 4b10 	vmov	r4, r5, d0
 8007cd6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007cda:	4606      	mov	r6, r0
 8007cdc:	462b      	mov	r3, r5
 8007cde:	b99a      	cbnz	r2, 8007d08 <scalbn+0x38>
 8007ce0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007ce4:	4323      	orrs	r3, r4
 8007ce6:	d036      	beq.n	8007d56 <scalbn+0x86>
 8007ce8:	4b39      	ldr	r3, [pc, #228]	; (8007dd0 <scalbn+0x100>)
 8007cea:	4629      	mov	r1, r5
 8007cec:	ee10 0a10 	vmov	r0, s0
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f7f8 fc79 	bl	80005e8 <__aeabi_dmul>
 8007cf6:	4b37      	ldr	r3, [pc, #220]	; (8007dd4 <scalbn+0x104>)
 8007cf8:	429e      	cmp	r6, r3
 8007cfa:	4604      	mov	r4, r0
 8007cfc:	460d      	mov	r5, r1
 8007cfe:	da10      	bge.n	8007d22 <scalbn+0x52>
 8007d00:	a32b      	add	r3, pc, #172	; (adr r3, 8007db0 <scalbn+0xe0>)
 8007d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d06:	e03a      	b.n	8007d7e <scalbn+0xae>
 8007d08:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007d0c:	428a      	cmp	r2, r1
 8007d0e:	d10c      	bne.n	8007d2a <scalbn+0x5a>
 8007d10:	ee10 2a10 	vmov	r2, s0
 8007d14:	4620      	mov	r0, r4
 8007d16:	4629      	mov	r1, r5
 8007d18:	f7f8 fab0 	bl	800027c <__adddf3>
 8007d1c:	4604      	mov	r4, r0
 8007d1e:	460d      	mov	r5, r1
 8007d20:	e019      	b.n	8007d56 <scalbn+0x86>
 8007d22:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007d26:	460b      	mov	r3, r1
 8007d28:	3a36      	subs	r2, #54	; 0x36
 8007d2a:	4432      	add	r2, r6
 8007d2c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007d30:	428a      	cmp	r2, r1
 8007d32:	dd08      	ble.n	8007d46 <scalbn+0x76>
 8007d34:	2d00      	cmp	r5, #0
 8007d36:	a120      	add	r1, pc, #128	; (adr r1, 8007db8 <scalbn+0xe8>)
 8007d38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d3c:	da1c      	bge.n	8007d78 <scalbn+0xa8>
 8007d3e:	a120      	add	r1, pc, #128	; (adr r1, 8007dc0 <scalbn+0xf0>)
 8007d40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d44:	e018      	b.n	8007d78 <scalbn+0xa8>
 8007d46:	2a00      	cmp	r2, #0
 8007d48:	dd08      	ble.n	8007d5c <scalbn+0x8c>
 8007d4a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007d4e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007d52:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007d56:	ec45 4b10 	vmov	d0, r4, r5
 8007d5a:	bd70      	pop	{r4, r5, r6, pc}
 8007d5c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007d60:	da19      	bge.n	8007d96 <scalbn+0xc6>
 8007d62:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007d66:	429e      	cmp	r6, r3
 8007d68:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007d6c:	dd0a      	ble.n	8007d84 <scalbn+0xb4>
 8007d6e:	a112      	add	r1, pc, #72	; (adr r1, 8007db8 <scalbn+0xe8>)
 8007d70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d1e2      	bne.n	8007d3e <scalbn+0x6e>
 8007d78:	a30f      	add	r3, pc, #60	; (adr r3, 8007db8 <scalbn+0xe8>)
 8007d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7e:	f7f8 fc33 	bl	80005e8 <__aeabi_dmul>
 8007d82:	e7cb      	b.n	8007d1c <scalbn+0x4c>
 8007d84:	a10a      	add	r1, pc, #40	; (adr r1, 8007db0 <scalbn+0xe0>)
 8007d86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d0b8      	beq.n	8007d00 <scalbn+0x30>
 8007d8e:	a10e      	add	r1, pc, #56	; (adr r1, 8007dc8 <scalbn+0xf8>)
 8007d90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d94:	e7b4      	b.n	8007d00 <scalbn+0x30>
 8007d96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007d9a:	3236      	adds	r2, #54	; 0x36
 8007d9c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007da0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007da4:	4620      	mov	r0, r4
 8007da6:	4b0c      	ldr	r3, [pc, #48]	; (8007dd8 <scalbn+0x108>)
 8007da8:	2200      	movs	r2, #0
 8007daa:	e7e8      	b.n	8007d7e <scalbn+0xae>
 8007dac:	f3af 8000 	nop.w
 8007db0:	c2f8f359 	.word	0xc2f8f359
 8007db4:	01a56e1f 	.word	0x01a56e1f
 8007db8:	8800759c 	.word	0x8800759c
 8007dbc:	7e37e43c 	.word	0x7e37e43c
 8007dc0:	8800759c 	.word	0x8800759c
 8007dc4:	fe37e43c 	.word	0xfe37e43c
 8007dc8:	c2f8f359 	.word	0xc2f8f359
 8007dcc:	81a56e1f 	.word	0x81a56e1f
 8007dd0:	43500000 	.word	0x43500000
 8007dd4:	ffff3cb0 	.word	0xffff3cb0
 8007dd8:	3c900000 	.word	0x3c900000

08007ddc <_init>:
 8007ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dde:	bf00      	nop
 8007de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007de2:	bc08      	pop	{r3}
 8007de4:	469e      	mov	lr, r3
 8007de6:	4770      	bx	lr

08007de8 <_fini>:
 8007de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dea:	bf00      	nop
 8007dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dee:	bc08      	pop	{r3}
 8007df0:	469e      	mov	lr, r3
 8007df2:	4770      	bx	lr
