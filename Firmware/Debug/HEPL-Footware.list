
HEPL-Footware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a10  08007120  08007120  00017120  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b30  08007b30  00020fb4  2**0
                  CONTENTS
  4 .ARM          00000000  08007b30  08007b30  00020fb4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b30  08007b30  00020fb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b30  08007b30  00017b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b34  08007b34  00017b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000fb4  20000000  08007b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000834  20000fb4  08008aec  00020fb4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017e8  08008aec  000217e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020fb4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ad7  00000000  00000000  00020fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e8f  00000000  00000000  00036abb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000e54f  00000000  00000000  0003994a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001018  00000000  00000000  00047ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f50  00000000  00000000  00048eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025ba0  00000000  00000000  00049e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a1a0  00000000  00000000  0006f9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da232  00000000  00000000  00089b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00163d7a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000037c0  00000000  00000000  00163dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000fb4 	.word	0x20000fb4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007104 	.word	0x08007104

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000fb8 	.word	0x20000fb8
 80001cc:	08007104 	.word	0x08007104

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <IMU_convertAccel>:
	IMU_writeRegister(IMU, buf, 1);

}

float IMU_convertAccel(uint8_t H_byte, uint8_t L_byte) {
	int16_t reading = (int16_t)(H_byte << 8) + L_byte;
 8000c0c:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8000c10:	b209      	sxth	r1, r1

	// (Full-scale val / Max LSB val) * reading (LSB) = Accel (g)
	return XL_SCALE_FACTOR * reading;
 8000c12:	ee07 1a90 	vmov	s15, r1
 8000c16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8000c1a:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8000c24 <IMU_convertAccel+0x18>
 8000c1e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8000c22:	4770      	bx	lr
 8000c24:	3b1cd806 	.word	0x3b1cd806

08000c28 <IMU_convertGyro>:

float IMU_convertGyro(uint8_t H_byte, uint8_t L_byte) {
	int16_t reading = (int16_t)(H_byte << 8) + L_byte;
 8000c28:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8000c2c:	b209      	sxth	r1, r1

	// (Full-scale val / Max LSB val) * reading (LSB) = Accel (g)
	return GYRO_SCALE_FACTOR * reading;
 8000c2e:	ee07 1a90 	vmov	s15, r1
 8000c32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8000c36:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8000c40 <IMU_convertGyro+0x18>
 8000c3a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8000c3e:	4770      	bx	lr
 8000c40:	3cfa0000 	.word	0x3cfa0000

08000c44 <IMU_chipSelect>:
	__enable_irq();

	return status;
}

void IMU_chipSelect(uint8_t chipID) {
 8000c44:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOB, (1 << chipID), 0); // PB0,1,2 for IMU 0,1,2
 8000c46:	2101      	movs	r1, #1
 8000c48:	4081      	lsls	r1, r0
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	b289      	uxth	r1, r1
 8000c4e:	4802      	ldr	r0, [pc, #8]	; (8000c58 <IMU_chipSelect+0x14>)
 8000c50:	f002 f858 	bl	8002d04 <HAL_GPIO_WritePin>
}
 8000c54:	bd08      	pop	{r3, pc}
 8000c56:	bf00      	nop
 8000c58:	48000400 	.word	0x48000400

08000c5c <IMU_chipRelease>:

void IMU_chipRelease(uint8_t chipID) {
 8000c5c:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOB, (1 << chipID), 1); // PB0,1,2 for IMU 0,1,2
 8000c5e:	2201      	movs	r2, #1
 8000c60:	fa02 f100 	lsl.w	r1, r2, r0
 8000c64:	b289      	uxth	r1, r1
 8000c66:	4802      	ldr	r0, [pc, #8]	; (8000c70 <IMU_chipRelease+0x14>)
 8000c68:	f002 f84c 	bl	8002d04 <HAL_GPIO_WritePin>
}
 8000c6c:	bd08      	pop	{r3, pc}
 8000c6e:	bf00      	nop
 8000c70:	48000400 	.word	0x48000400

08000c74 <IMU_readRegister>:
HAL_StatusTypeDef IMU_readRegister(IMU* IMU, uint8_t reg_addr, uint8_t* rx_buf, int num_bytes) {
 8000c74:	b570      	push	{r4, r5, r6, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	4604      	mov	r4, r0
 8000c7a:	4615      	mov	r5, r2
 8000c7c:	461e      	mov	r6, r3
	uint8_t reg_buffer[1] = {reg_addr | 0x80};
 8000c7e:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8000c82:	f88d 1004 	strb.w	r1, [sp, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c86:	b672      	cpsid	i
	IMU_chipSelect(IMU->chipID);
 8000c88:	7c00      	ldrb	r0, [r0, #16]
 8000c8a:	f7ff ffdb 	bl	8000c44 <IMU_chipSelect>
	HAL_SPI_Transmit(IMU->hspi, (uint8_t *)reg_buffer, 1, SPI_TIMEOUT);
 8000c8e:	2301      	movs	r3, #1
 8000c90:	461a      	mov	r2, r3
 8000c92:	a901      	add	r1, sp, #4
 8000c94:	6820      	ldr	r0, [r4, #0]
 8000c96:	f002 fefa 	bl	8003a8e <HAL_SPI_Transmit>
	status = HAL_SPI_Receive(IMU->hspi, (uint8_t *)rx_buf, num_bytes, SPI_TIMEOUT);
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	b2b2      	uxth	r2, r6
 8000c9e:	4629      	mov	r1, r5
 8000ca0:	6820      	ldr	r0, [r4, #0]
 8000ca2:	f003 f964 	bl	8003f6e <HAL_SPI_Receive>
 8000ca6:	4605      	mov	r5, r0
	IMU_chipRelease(IMU->chipID);
 8000ca8:	7c20      	ldrb	r0, [r4, #16]
 8000caa:	f7ff ffd7 	bl	8000c5c <IMU_chipRelease>
  __ASM volatile ("cpsie i" : : : "memory");
 8000cae:	b662      	cpsie	i
}
 8000cb0:	4628      	mov	r0, r5
 8000cb2:	b002      	add	sp, #8
 8000cb4:	bd70      	pop	{r4, r5, r6, pc}

08000cb6 <IMU_readSensorData>:
void IMU_readSensorData(IMU* IMU, SensorData* data) {
 8000cb6:	b530      	push	{r4, r5, lr}
 8000cb8:	b085      	sub	sp, #20
 8000cba:	4605      	mov	r5, r0
 8000cbc:	460c      	mov	r4, r1
	IMU_readRegister(IMU, OUTX_L_G, buf, 12);
 8000cbe:	230c      	movs	r3, #12
 8000cc0:	aa01      	add	r2, sp, #4
 8000cc2:	2122      	movs	r1, #34	; 0x22
 8000cc4:	f7ff ffd6 	bl	8000c74 <IMU_readRegister>
	data->G_X = IMU_convertGyro(buf[1], buf[0]);
 8000cc8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8000ccc:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8000cd0:	f7ff ffaa 	bl	8000c28 <IMU_convertGyro>
 8000cd4:	ed84 0a03 	vstr	s0, [r4, #12]
	data->G_Y = IMU_convertGyro(buf[3], buf[2]);
 8000cd8:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8000cdc:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000ce0:	f7ff ffa2 	bl	8000c28 <IMU_convertGyro>
 8000ce4:	ed84 0a04 	vstr	s0, [r4, #16]
	data->G_Z = IMU_convertGyro(buf[5], buf[4]);
 8000ce8:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8000cec:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8000cf0:	f7ff ff9a 	bl	8000c28 <IMU_convertGyro>
 8000cf4:	ed84 0a05 	vstr	s0, [r4, #20]
	data->XL_X = IMU_convertAccel(buf[7], buf[6]) + IMU->X_offset;
 8000cf8:	f89d 100a 	ldrb.w	r1, [sp, #10]
 8000cfc:	f89d 000b 	ldrb.w	r0, [sp, #11]
 8000d00:	f7ff ff84 	bl	8000c0c <IMU_convertAccel>
 8000d04:	edd5 7a01 	vldr	s15, [r5, #4]
 8000d08:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000d0c:	ed84 0a00 	vstr	s0, [r4]
	data->XL_Y = IMU_convertAccel(buf[9], buf[8]) + IMU->Y_offset;
 8000d10:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8000d14:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8000d18:	f7ff ff78 	bl	8000c0c <IMU_convertAccel>
 8000d1c:	edd5 7a02 	vldr	s15, [r5, #8]
 8000d20:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000d24:	ed84 0a01 	vstr	s0, [r4, #4]
	data->XL_Z = IMU_convertAccel(buf[11], buf[10]) - IMU->Z_offset;
 8000d28:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8000d2c:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8000d30:	f7ff ff6c 	bl	8000c0c <IMU_convertAccel>
 8000d34:	edd5 7a03 	vldr	s15, [r5, #12]
 8000d38:	ee30 0a67 	vsub.f32	s0, s0, s15
 8000d3c:	ed84 0a02 	vstr	s0, [r4, #8]
}
 8000d40:	b005      	add	sp, #20
 8000d42:	bd30      	pop	{r4, r5, pc}

08000d44 <IMU_writeRegister>:
HAL_StatusTypeDef IMU_writeRegister(IMU* IMU, uint8_t* tx_buf, int num_bytes) {
 8000d44:	b570      	push	{r4, r5, r6, lr}
 8000d46:	4604      	mov	r4, r0
 8000d48:	460e      	mov	r6, r1
 8000d4a:	4615      	mov	r5, r2
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4c:	b672      	cpsid	i
	IMU_chipSelect(IMU->chipID);
 8000d4e:	7c00      	ldrb	r0, [r0, #16]
 8000d50:	f7ff ff78 	bl	8000c44 <IMU_chipSelect>
	status = HAL_SPI_Transmit(IMU->hspi, (uint8_t *)tx_buf, num_bytes + 1, SPI_TIMEOUT);
 8000d54:	1c6a      	adds	r2, r5, #1
 8000d56:	2301      	movs	r3, #1
 8000d58:	b292      	uxth	r2, r2
 8000d5a:	4631      	mov	r1, r6
 8000d5c:	6820      	ldr	r0, [r4, #0]
 8000d5e:	f002 fe96 	bl	8003a8e <HAL_SPI_Transmit>
 8000d62:	4605      	mov	r5, r0
	IMU_chipRelease(IMU->chipID);
 8000d64:	7c20      	ldrb	r0, [r4, #16]
 8000d66:	f7ff ff79 	bl	8000c5c <IMU_chipRelease>
  __ASM volatile ("cpsie i" : : : "memory");
 8000d6a:	b662      	cpsie	i
}
 8000d6c:	4628      	mov	r0, r5
 8000d6e:	bd70      	pop	{r4, r5, r6, pc}

08000d70 <IMU_init>:
void IMU_init(SPI_HandleTypeDef* hspi, IMU* IMU, uint8_t chipID) {
 8000d70:	b510      	push	{r4, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	460c      	mov	r4, r1
	IMU->hspi = hspi;
 8000d76:	6008      	str	r0, [r1, #0]
	IMU->X_offset = IMU_offsets[3*chipID + 0];
 8000d78:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8000d7c:	4b32      	ldr	r3, [pc, #200]	; (8000e48 <IMU_init+0xd8>)
 8000d7e:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8000d82:	6800      	ldr	r0, [r0, #0]
 8000d84:	6060      	str	r0, [r4, #4]
	IMU->Y_offset = IMU_offsets[3*chipID + 1];
 8000d86:	1c48      	adds	r0, r1, #1
 8000d88:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000d8c:	6800      	ldr	r0, [r0, #0]
 8000d8e:	60a0      	str	r0, [r4, #8]
	IMU->Z_offset = IMU_offsets[3*chipID + 2];
 8000d90:	3102      	adds	r1, #2
 8000d92:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	60e3      	str	r3, [r4, #12]
	IMU->chipID = chipID;
 8000d9a:	7422      	strb	r2, [r4, #16]
	buf[0] = CTRL3_C;
 8000d9c:	2312      	movs	r3, #18
 8000d9e:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = 0x04;
 8000da2:	2304      	movs	r3, #4
 8000da4:	f88d 3005 	strb.w	r3, [sp, #5]
	IMU_writeRegister(IMU, buf, 1);
 8000da8:	2201      	movs	r2, #1
 8000daa:	eb0d 0103 	add.w	r1, sp, r3
 8000dae:	4620      	mov	r0, r4
 8000db0:	f7ff ffc8 	bl	8000d44 <IMU_writeRegister>
	IMU_readRegister(IMU, WHO_AM_I, buf, 1);
 8000db4:	2301      	movs	r3, #1
 8000db6:	aa01      	add	r2, sp, #4
 8000db8:	210f      	movs	r1, #15
 8000dba:	4620      	mov	r0, r4
 8000dbc:	f7ff ff5a 	bl	8000c74 <IMU_readRegister>
	assert(buf[0] == WHO_I_AM_ID); // Crash if not connected properly
 8000dc0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000dc4:	2b6a      	cmp	r3, #106	; 0x6a
 8000dc6:	d139      	bne.n	8000e3c <IMU_init+0xcc>
	buf[0] = CTRL1_XL;
 8000dc8:	2310      	movs	r3, #16
 8000dca:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = 0x4C;
 8000dce:	234c      	movs	r3, #76	; 0x4c
 8000dd0:	f88d 3005 	strb.w	r3, [sp, #5]
	IMU_writeRegister(IMU, buf, 1);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	a901      	add	r1, sp, #4
 8000dd8:	4620      	mov	r0, r4
 8000dda:	f7ff ffb3 	bl	8000d44 <IMU_writeRegister>
	buf[0] = CTRL2_G;
 8000dde:	2311      	movs	r3, #17
 8000de0:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = 0x48;
 8000de4:	2348      	movs	r3, #72	; 0x48
 8000de6:	f88d 3005 	strb.w	r3, [sp, #5]
	IMU_writeRegister(IMU, buf, 1);
 8000dea:	2201      	movs	r2, #1
 8000dec:	a901      	add	r1, sp, #4
 8000dee:	4620      	mov	r0, r4
 8000df0:	f7ff ffa8 	bl	8000d44 <IMU_writeRegister>
	buf[0] = INT2_CTRL;
 8000df4:	230e      	movs	r3, #14
 8000df6:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = 0x03;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	f88d 3005 	strb.w	r3, [sp, #5]
	IMU_writeRegister(IMU, buf, 1);
 8000e00:	2201      	movs	r2, #1
 8000e02:	a901      	add	r1, sp, #4
 8000e04:	4620      	mov	r0, r4
 8000e06:	f7ff ff9d 	bl	8000d44 <IMU_writeRegister>
	buf[0] = CTRL5_C;
 8000e0a:	2314      	movs	r3, #20
 8000e0c:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = 0x60;
 8000e10:	2360      	movs	r3, #96	; 0x60
 8000e12:	f88d 3005 	strb.w	r3, [sp, #5]
	IMU_writeRegister(IMU, buf, 1);
 8000e16:	2201      	movs	r2, #1
 8000e18:	a901      	add	r1, sp, #4
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	f7ff ff92 	bl	8000d44 <IMU_writeRegister>
	buf[0] = CTRL6_C;
 8000e20:	2315      	movs	r3, #21
 8000e22:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = 0x04;
 8000e26:	2304      	movs	r3, #4
 8000e28:	f88d 3005 	strb.w	r3, [sp, #5]
	IMU_writeRegister(IMU, buf, 1);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	eb0d 0103 	add.w	r1, sp, r3
 8000e32:	4620      	mov	r0, r4
 8000e34:	f7ff ff86 	bl	8000d44 <IMU_writeRegister>
}
 8000e38:	b004      	add	sp, #16
 8000e3a:	bd10      	pop	{r4, pc}
	assert(buf[0] == WHO_I_AM_ID); // Crash if not connected properly
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <IMU_init+0xdc>)
 8000e3e:	4a04      	ldr	r2, [pc, #16]	; (8000e50 <IMU_init+0xe0>)
 8000e40:	2120      	movs	r1, #32
 8000e42:	4804      	ldr	r0, [pc, #16]	; (8000e54 <IMU_init+0xe4>)
 8000e44:	f004 f858 	bl	8004ef8 <__assert_func>
 8000e48:	20000000 	.word	0x20000000
 8000e4c:	08007120 	.word	0x08007120
 8000e50:	0800714c 	.word	0x0800714c
 8000e54:	08007138 	.word	0x08007138

08000e58 <XBeeChecksum>:
// modifies frame[]. pass payload to be sent in data[].
uint8_t XBeeChecksum(uint8_t frame[], uint8_t frame_size)
{
	uint8_t checksum = 0;
	uint8_t ret = 0;
	for (int i = 0; i < frame_size; i++) // skip bytes 0-2, and last
 8000e58:	2200      	movs	r2, #0
	uint8_t checksum = 0;
 8000e5a:	4613      	mov	r3, r2
	for (int i = 0; i < frame_size; i++) // skip bytes 0-2, and last
 8000e5c:	e006      	b.n	8000e6c <XBeeChecksum+0x14>
	{
		uint8_t temp = frame[i+3];
 8000e5e:	f102 0c03 	add.w	ip, r2, #3
 8000e62:	f810 c00c 	ldrb.w	ip, [r0, ip]
		checksum += temp;
 8000e66:	4463      	add	r3, ip
 8000e68:	b2db      	uxtb	r3, r3
	for (int i = 0; i < frame_size; i++) // skip bytes 0-2, and last
 8000e6a:	3201      	adds	r2, #1
 8000e6c:	4291      	cmp	r1, r2
 8000e6e:	dcf6      	bgt.n	8000e5e <XBeeChecksum+0x6>
	}
	checksum = 0x00FF - checksum;
 8000e70:	43d8      	mvns	r0, r3
	ret = (uint8_t)(checksum & 0x00FF);
	return ret;
}
 8000e72:	b2c0      	uxtb	r0, r0
 8000e74:	4770      	bx	lr
	...

08000e78 <makeXBeeFrame>:
			uint8_t frame_type,
			uint8_t frame_id,
			uint8_t data_size, // in bytes
			uint8_t data[],
			uint8_t frame[]
){
 8000e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e7a:	460e      	mov	r6, r1
 8000e7c:	4615      	mov	r5, r2
 8000e7e:	9c06      	ldr	r4, [sp, #24]
	// only do 14 bytes of data to avoid exceeding 32-byte frame size
	if (data_size > 14) { data_size = 14; }
 8000e80:	2a0e      	cmp	r2, #14
 8000e82:	d900      	bls.n	8000e86 <makeXBeeFrame+0xe>
 8000e84:	250e      	movs	r5, #14

	uint16_t frame_size = 0x0E + data_size;
 8000e86:	f105 020e 	add.w	r2, r5, #14
	uint32_t checksum = 0;

	frame[0] = XBEE_START;
 8000e8a:	217e      	movs	r1, #126	; 0x7e
 8000e8c:	7021      	strb	r1, [r4, #0]
	frame[1] = ((frame_size) >> 8) & 0x00FF; // length upper byte
 8000e8e:	0a12      	lsrs	r2, r2, #8
 8000e90:	7062      	strb	r2, [r4, #1]
	frame[2] = ((frame_size) >> 0) & 0x00FF; // length lower byte
 8000e92:	f105 010e 	add.w	r1, r5, #14
 8000e96:	b2c9      	uxtb	r1, r1
 8000e98:	70a1      	strb	r1, [r4, #2]
	frame[3] = frame_type;
 8000e9a:	70e0      	strb	r0, [r4, #3]
	frame[4] = frame_id;
 8000e9c:	7126      	strb	r6, [r4, #4]
	for (int i = 0; i < 8; i++) // write 64-bit dest
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	e002      	b.n	8000ea8 <makeXBeeFrame+0x30>
	{
		uint8_t temp = (XBEE_DEST_ADDR >> 8*(7-i));
		frame[i + 5] = temp;
 8000ea2:	1d56      	adds	r6, r2, #5
 8000ea4:	55a0      	strb	r0, [r4, r6]
	for (int i = 0; i < 8; i++) // write 64-bit dest
 8000ea6:	3201      	adds	r2, #1
 8000ea8:	2a07      	cmp	r2, #7
 8000eaa:	dc14      	bgt.n	8000ed6 <makeXBeeFrame+0x5e>
		uint8_t temp = (XBEE_DEST_ADDR >> 8*(7-i));
 8000eac:	f1c2 0007 	rsb	r0, r2, #7
 8000eb0:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
 8000eb4:	4f14      	ldr	r7, [pc, #80]	; (8000f08 <makeXBeeFrame+0x90>)
 8000eb6:	f1cc 0e20 	rsb	lr, ip, #32
 8000eba:	f1bc 0620 	subs.w	r6, ip, #32
 8000ebe:	4813      	ldr	r0, [pc, #76]	; (8000f0c <makeXBeeFrame+0x94>)
 8000ec0:	fa20 f00c 	lsr.w	r0, r0, ip
 8000ec4:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000ec8:	ea40 000e 	orr.w	r0, r0, lr
 8000ecc:	d4e9      	bmi.n	8000ea2 <makeXBeeFrame+0x2a>
 8000ece:	fa47 f606 	asr.w	r6, r7, r6
 8000ed2:	4330      	orrs	r0, r6
 8000ed4:	e7e5      	b.n	8000ea2 <makeXBeeFrame+0x2a>
	}
	frame[13] = 0xFF; // 16-bit addr upper
 8000ed6:	22ff      	movs	r2, #255	; 0xff
 8000ed8:	7362      	strb	r2, [r4, #13]
	frame[14] = 0xFE; // 16-bit addr lower
 8000eda:	22fe      	movs	r2, #254	; 0xfe
 8000edc:	73a2      	strb	r2, [r4, #14]
	frame[15] = 0x00; // broadcast_radius
 8000ede:	2000      	movs	r0, #0
 8000ee0:	73e0      	strb	r0, [r4, #15]
	frame[16] = 0x00; // options
 8000ee2:	7420      	strb	r0, [r4, #16]
	for (int i = 0; i < data_size; i++) // add data payload to frame
 8000ee4:	e004      	b.n	8000ef0 <makeXBeeFrame+0x78>
	{
		uint8_t temp = data[i];
 8000ee6:	5c1e      	ldrb	r6, [r3, r0]
		frame[i + 17] = temp;
 8000ee8:	f100 0211 	add.w	r2, r0, #17
 8000eec:	54a6      	strb	r6, [r4, r2]
	for (int i = 0; i < data_size; i++) // add data payload to frame
 8000eee:	3001      	adds	r0, #1
 8000ef0:	4285      	cmp	r5, r0
 8000ef2:	dcf8      	bgt.n	8000ee6 <makeXBeeFrame+0x6e>
	}

	// update checksum
	checksum = XBeeChecksum(frame, frame_size);
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	f7ff ffaf 	bl	8000e58 <XBeeChecksum>
	frame[data_size + 17] = checksum;
 8000efa:	f105 0311 	add.w	r3, r5, #17
 8000efe:	54e0      	strb	r0, [r4, r3]
	return frame_size + 4;
 8000f00:	f105 0012 	add.w	r0, r5, #18
}
 8000f04:	b2c0      	uxtb	r0, r0
 8000f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f08:	0013a200 	.word	0x0013a200
 8000f0c:	410822ff 	.word	0x410822ff

08000f10 <XBeeTransmitReceive>:
void XBeeTransmitReceive(uint8_t* data_buf, uint8_t* xbee_rx_buf, uint8_t tx_data_size) {
 8000f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f14:	b08a      	sub	sp, #40	; 0x28
 8000f16:	4603      	mov	r3, r0
 8000f18:	460c      	mov	r4, r1
	uint8_t tx_size = makeXBeeFrame(XBEE_TRANSMIT_FRAME, 0x01, tx_data_size, data_buf, xbee_tx_buf);
 8000f1a:	f10d 0808 	add.w	r8, sp, #8
 8000f1e:	f8cd 8000 	str.w	r8, [sp]
 8000f22:	2101      	movs	r1, #1
 8000f24:	2010      	movs	r0, #16
 8000f26:	f7ff ffa7 	bl	8000e78 <makeXBeeFrame>
 8000f2a:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(XBEE_CS_PORT, XBEE_CS_PIN, 0);
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <XBeeTransmitReceive+0x50>)
 8000f2e:	881f      	ldrh	r7, [r3, #0]
 8000f30:	4e0c      	ldr	r6, [pc, #48]	; (8000f64 <XBeeTransmitReceive+0x54>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	4639      	mov	r1, r7
 8000f36:	6830      	ldr	r0, [r6, #0]
 8000f38:	f001 fee4 	bl	8002d04 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsid i" : : : "memory");
 8000f3c:	b672      	cpsid	i
	HAL_SPI_TransmitReceive(&XBEE_SPI, xbee_tx_buf, xbee_rx_buf, tx_size, 10);
 8000f3e:	230a      	movs	r3, #10
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	b2ab      	uxth	r3, r5
 8000f44:	4622      	mov	r2, r4
 8000f46:	4641      	mov	r1, r8
 8000f48:	4807      	ldr	r0, [pc, #28]	; (8000f68 <XBeeTransmitReceive+0x58>)
 8000f4a:	f002 fea1 	bl	8003c90 <HAL_SPI_TransmitReceive>
  __ASM volatile ("cpsie i" : : : "memory");
 8000f4e:	b662      	cpsie	i
	HAL_GPIO_WritePin(XBEE_CS_PORT, XBEE_CS_PIN, 1);
 8000f50:	2201      	movs	r2, #1
 8000f52:	4639      	mov	r1, r7
 8000f54:	6830      	ldr	r0, [r6, #0]
 8000f56:	f001 fed5 	bl	8002d04 <HAL_GPIO_WritePin>
}
 8000f5a:	b00a      	add	sp, #40	; 0x28
 8000f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f60:	08007158 	.word	0x08007158
 8000f64:	20000024 	.word	0x20000024
 8000f68:	20001040 	.word	0x20001040

08000f6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f70:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f72:	2400      	movs	r4, #0
 8000f74:	9403      	str	r4, [sp, #12]
 8000f76:	9404      	str	r4, [sp, #16]
 8000f78:	9405      	str	r4, [sp, #20]
 8000f7a:	9406      	str	r4, [sp, #24]
 8000f7c:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f7e:	4b50      	ldr	r3, [pc, #320]	; (80010c0 <MX_GPIO_Init+0x154>)
 8000f80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f86:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f8a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000f8e:	9200      	str	r2, [sp, #0]
 8000f90:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f94:	f042 0201 	orr.w	r2, r2, #1
 8000f98:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f9c:	f002 0201 	and.w	r2, r2, #1
 8000fa0:	9201      	str	r2, [sp, #4]
 8000fa2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fa6:	f042 0202 	orr.w	r2, r2, #2
 8000faa:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	9302      	str	r3, [sp, #8]
 8000fb4:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU1_CS_Pin|IMU2_CS_Pin|IMU3_CS_Pin|FLASH_CS_Pin, GPIO_PIN_RESET);
 8000fb6:	4e43      	ldr	r6, [pc, #268]	; (80010c4 <MX_GPIO_Init+0x158>)
 8000fb8:	4622      	mov	r2, r4
 8000fba:	f242 0107 	movw	r1, #8199	; 0x2007
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	f001 fea0 	bl	8002d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XBEE_CS_GPIO_Port, XBEE_CS_Pin, GPIO_PIN_RESET);
 8000fc4:	4622      	mov	r2, r4
 8000fc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fce:	f001 fe99 	bl	8002d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_3, GPIO_PIN_RESET);
 8000fd2:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 80010c8 <MX_GPIO_Init+0x15c>
 8000fd6:	4622      	mov	r2, r4
 8000fd8:	2108      	movs	r1, #8
 8000fda:	4640      	mov	r0, r8
 8000fdc:	f001 fe92 	bl	8002d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MAG_INT_Pin MAG_INT_TRG_Pin IMU3_INT1_Pin IMU3_INT2_Pin
                           IMU2_INT1_Pin IMU2_INT2_Pin IMU1_INT1_Pin IMU1_INT2_Pin */
  GPIO_InitStruct.Pin = MAG_INT_Pin|MAG_INT_TRG_Pin|IMU3_INT1_Pin|IMU3_INT2_Pin
 8000fe0:	f641 631d 	movw	r3, #7709	; 0x1e1d
 8000fe4:	9303      	str	r3, [sp, #12]
                          |IMU2_INT1_Pin|IMU2_INT2_Pin|IMU1_INT1_Pin|IMU1_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fe6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fea:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fee:	a903      	add	r1, sp, #12
 8000ff0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff4:	f001 fda2 	bl	8002b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU1_CS_Pin IMU2_CS_Pin IMU3_CS_Pin FLASH_CS_Pin */
  GPIO_InitStruct.Pin = IMU1_CS_Pin|IMU2_CS_Pin|IMU3_CS_Pin|FLASH_CS_Pin;
 8000ff8:	f242 0307 	movw	r3, #8199	; 0x2007
 8000ffc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffe:	2701      	movs	r7, #1
 8001000:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001006:	a903      	add	r1, sp, #12
 8001008:	4630      	mov	r0, r6
 800100a:	f001 fd97 	bl	8002b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800100e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001012:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	f04f 0902 	mov.w	r9, #2
 8001018:	f8cd 9010 	str.w	r9, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101e:	2503      	movs	r5, #3
 8001020:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001022:	2305      	movs	r3, #5
 8001024:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001026:	a903      	add	r1, sp, #12
 8001028:	4630      	mov	r0, r6
 800102a:	f001 fd87 	bl	8002b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : XBEE_CS_Pin */
  GPIO_InitStruct.Pin = XBEE_CS_Pin;
 800102e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001032:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001034:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(XBEE_CS_GPIO_Port, &GPIO_InitStruct);
 800103a:	a903      	add	r1, sp, #12
 800103c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001040:	f001 fd7c 	bl	8002b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_ATTN_Pin */
  GPIO_InitStruct.Pin = SPI3_ATTN_Pin;
 8001044:	2380      	movs	r3, #128	; 0x80
 8001046:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001048:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(SPI3_ATTN_GPIO_Port, &GPIO_InitStruct);
 800104c:	a903      	add	r1, sp, #12
 800104e:	4630      	mov	r0, r6
 8001050:	f001 fd74 	bl	8002b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001054:	2308      	movs	r3, #8
 8001056:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001058:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800105a:	f8cd 9014 	str.w	r9, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001060:	a903      	add	r1, sp, #12
 8001062:	4640      	mov	r0, r8
 8001064:	f001 fd6a 	bl	8002b3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 4, 0);
 8001068:	4622      	mov	r2, r4
 800106a:	2104      	movs	r1, #4
 800106c:	2006      	movs	r0, #6
 800106e:	f001 fd0b 	bl	8002a88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001072:	2006      	movs	r0, #6
 8001074:	f001 fd40 	bl	8002af8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 3, 0);
 8001078:	4622      	mov	r2, r4
 800107a:	4629      	mov	r1, r5
 800107c:	2009      	movs	r0, #9
 800107e:	f001 fd03 	bl	8002a88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001082:	2009      	movs	r0, #9
 8001084:	f001 fd38 	bl	8002af8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 3, 0);
 8001088:	4622      	mov	r2, r4
 800108a:	4629      	mov	r1, r5
 800108c:	200a      	movs	r0, #10
 800108e:	f001 fcfb 	bl	8002a88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001092:	200a      	movs	r0, #10
 8001094:	f001 fd30 	bl	8002af8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8001098:	4622      	mov	r2, r4
 800109a:	4629      	mov	r1, r5
 800109c:	2017      	movs	r0, #23
 800109e:	f001 fcf3 	bl	8002a88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010a2:	2017      	movs	r0, #23
 80010a4:	f001 fd28 	bl	8002af8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 80010a8:	4622      	mov	r2, r4
 80010aa:	4629      	mov	r1, r5
 80010ac:	2028      	movs	r0, #40	; 0x28
 80010ae:	f001 fceb 	bl	8002a88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010b2:	2028      	movs	r0, #40	; 0x28
 80010b4:	f001 fd20 	bl	8002af8 <HAL_NVIC_EnableIRQ>

}
 80010b8:	b009      	add	sp, #36	; 0x24
 80010ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80010be:	bf00      	nop
 80010c0:	40021000 	.word	0x40021000
 80010c4:	48000400 	.word	0x48000400
 80010c8:	48001c00 	.word	0x48001c00

080010cc <sendCurrentPosition>:
uint8_t sendCurrentPosition(uint8_t state) {
 80010cc:	b530      	push	{r4, r5, lr}
 80010ce:	b08f      	sub	sp, #60	; 0x3c
 80010d0:	4604      	mov	r4, r0
	returnCurrentPosition(&pos);
 80010d2:	a80b      	add	r0, sp, #44	; 0x2c
 80010d4:	f000 f984 	bl	80013e0 <returnCurrentPosition>
	uint32_t posX = *(int*)&pos.X;
 80010d8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	uint32_t posY = *(int*)&pos.Y;
 80010da:	980c      	ldr	r0, [sp, #48]	; 0x30
	for (i = 0; i < 3; ++i) {
 80010dc:	2200      	movs	r2, #0
 80010de:	e00a      	b.n	80010f6 <sendCurrentPosition+0x2a>
	  data_buf[i] = (posX >> (3-i)*8) & 0xFF;
 80010e0:	f1c2 0303 	rsb	r3, r2, #3
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	fa25 f303 	lsr.w	r3, r5, r3
 80010ea:	f102 0138 	add.w	r1, r2, #56	; 0x38
 80010ee:	4469      	add	r1, sp
 80010f0:	f801 3c18 	strb.w	r3, [r1, #-24]
	for (i = 0; i < 3; ++i) {
 80010f4:	3201      	adds	r2, #1
 80010f6:	2a02      	cmp	r2, #2
 80010f8:	ddf2      	ble.n	80010e0 <sendCurrentPosition+0x14>
	for (i = 0; i < 3; ++i) {
 80010fa:	2200      	movs	r2, #0
 80010fc:	e00a      	b.n	8001114 <sendCurrentPosition+0x48>
	  data_buf[i+4] = (posY >> (3-i)*8) & 0xFF;
 80010fe:	f1c2 0303 	rsb	r3, r2, #3
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	fa20 f303 	lsr.w	r3, r0, r3
 8001108:	f102 013c 	add.w	r1, r2, #60	; 0x3c
 800110c:	4469      	add	r1, sp
 800110e:	f801 3c18 	strb.w	r3, [r1, #-24]
	for (i = 0; i < 3; ++i) {
 8001112:	3201      	adds	r2, #1
 8001114:	2a02      	cmp	r2, #2
 8001116:	ddf2      	ble.n	80010fe <sendCurrentPosition+0x32>
	data_buf[8] = state;
 8001118:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
	XBeeTransmitReceive(data_buf, xbee_rx_buf, TX_DATA_BUF_SZ);
 800111c:	2209      	movs	r2, #9
 800111e:	4669      	mov	r1, sp
 8001120:	a808      	add	r0, sp, #32
 8001122:	f7ff fef5 	bl	8000f10 <XBeeTransmitReceive>
}
 8001126:	f89d 0000 	ldrb.w	r0, [sp]
 800112a:	b00f      	add	sp, #60	; 0x3c
 800112c:	bd30      	pop	{r4, r5, pc}

0800112e <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 800112e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001130:	e7fe      	b.n	8001130 <Error_Handler+0x2>
	...

08001134 <MX_SPI1_Init>:
{
 8001134:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 8001136:	480f      	ldr	r0, [pc, #60]	; (8001174 <MX_SPI1_Init+0x40>)
 8001138:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <MX_SPI1_Init+0x44>)
 800113a:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800113c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001140:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001142:	2300      	movs	r3, #0
 8001144:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001146:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800114a:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800114c:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800114e:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001150:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001154:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001156:	2210      	movs	r2, #16
 8001158:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800115a:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800115c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800115e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001160:	2207      	movs	r2, #7
 8001162:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001164:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001166:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001168:	f002 fc22 	bl	80039b0 <HAL_SPI_Init>
 800116c:	b900      	cbnz	r0, 8001170 <MX_SPI1_Init+0x3c>
}
 800116e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001170:	f7ff ffdd 	bl	800112e <Error_Handler>
 8001174:	200010a4 	.word	0x200010a4
 8001178:	40013000 	.word	0x40013000

0800117c <MX_SPI3_Init>:
{
 800117c:	b508      	push	{r3, lr}
  hspi3.Instance = SPI3;
 800117e:	480f      	ldr	r0, [pc, #60]	; (80011bc <MX_SPI3_Init+0x40>)
 8001180:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <MX_SPI3_Init+0x44>)
 8001182:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001184:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001188:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800118a:	2300      	movs	r3, #0
 800118c:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800118e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001192:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001194:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001196:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001198:	f44f 7200 	mov.w	r2, #512	; 0x200
 800119c:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800119e:	61c3      	str	r3, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011a0:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80011a2:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011a4:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80011a6:	2207      	movs	r2, #7
 80011a8:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011aa:	6303      	str	r3, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011ac:	2308      	movs	r3, #8
 80011ae:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80011b0:	f002 fbfe 	bl	80039b0 <HAL_SPI_Init>
 80011b4:	b900      	cbnz	r0, 80011b8 <MX_SPI3_Init+0x3c>
}
 80011b6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80011b8:	f7ff ffb9 	bl	800112e <Error_Handler>
 80011bc:	20001108 	.word	0x20001108
 80011c0:	40003c00 	.word	0x40003c00

080011c4 <MX_TIM2_Init>:
{
 80011c4:	b500      	push	{lr}
 80011c6:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c8:	2300      	movs	r3, #0
 80011ca:	930a      	str	r3, [sp, #40]	; 0x28
 80011cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80011ce:	930c      	str	r3, [sp, #48]	; 0x30
 80011d0:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d2:	9307      	str	r3, [sp, #28]
 80011d4:	9308      	str	r3, [sp, #32]
 80011d6:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	9302      	str	r3, [sp, #8]
 80011de:	9303      	str	r3, [sp, #12]
 80011e0:	9304      	str	r3, [sp, #16]
 80011e2:	9305      	str	r3, [sp, #20]
 80011e4:	9306      	str	r3, [sp, #24]
  htim2.Instance = TIM2;
 80011e6:	481d      	ldr	r0, [pc, #116]	; (800125c <MX_TIM2_Init+0x98>)
 80011e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ec:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 7999;
 80011ee:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80011f2:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f4:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 200;
 80011f6:	22c8      	movs	r2, #200	; 0xc8
 80011f8:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011fa:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fc:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011fe:	f003 f9ff 	bl	8004600 <HAL_TIM_Base_Init>
 8001202:	bb00      	cbnz	r0, 8001246 <MX_TIM2_Init+0x82>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001204:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001208:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800120a:	a90a      	add	r1, sp, #40	; 0x28
 800120c:	4813      	ldr	r0, [pc, #76]	; (800125c <MX_TIM2_Init+0x98>)
 800120e:	f003 fadd 	bl	80047cc <HAL_TIM_ConfigClockSource>
 8001212:	b9d0      	cbnz	r0, 800124a <MX_TIM2_Init+0x86>
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001214:	4811      	ldr	r0, [pc, #68]	; (800125c <MX_TIM2_Init+0x98>)
 8001216:	f003 fa23 	bl	8004660 <HAL_TIM_OC_Init>
 800121a:	b9c0      	cbnz	r0, 800124e <MX_TIM2_Init+0x8a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800121c:	2300      	movs	r3, #0
 800121e:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001220:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001222:	a907      	add	r1, sp, #28
 8001224:	480d      	ldr	r0, [pc, #52]	; (800125c <MX_TIM2_Init+0x98>)
 8001226:	f003 fb51 	bl	80048cc <HAL_TIMEx_MasterConfigSynchronization>
 800122a:	b990      	cbnz	r0, 8001252 <MX_TIM2_Init+0x8e>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800122c:	2200      	movs	r2, #0
 800122e:	9200      	str	r2, [sp, #0]
  sConfigOC.Pulse = 0;
 8001230:	9201      	str	r2, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001232:	9202      	str	r2, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001234:	9204      	str	r2, [sp, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001236:	4669      	mov	r1, sp
 8001238:	4808      	ldr	r0, [pc, #32]	; (800125c <MX_TIM2_Init+0x98>)
 800123a:	f003 fa7d 	bl	8004738 <HAL_TIM_OC_ConfigChannel>
 800123e:	b950      	cbnz	r0, 8001256 <MX_TIM2_Init+0x92>
}
 8001240:	b00f      	add	sp, #60	; 0x3c
 8001242:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001246:	f7ff ff72 	bl	800112e <Error_Handler>
    Error_Handler();
 800124a:	f7ff ff70 	bl	800112e <Error_Handler>
    Error_Handler();
 800124e:	f7ff ff6e 	bl	800112e <Error_Handler>
    Error_Handler();
 8001252:	f7ff ff6c 	bl	800112e <Error_Handler>
    Error_Handler();
 8001256:	f7ff ff6a 	bl	800112e <Error_Handler>
 800125a:	bf00      	nop
 800125c:	2000116c 	.word	0x2000116c

08001260 <SystemClock_Config>:
{
 8001260:	b500      	push	{lr}
 8001262:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001264:	2244      	movs	r2, #68	; 0x44
 8001266:	2100      	movs	r1, #0
 8001268:	a805      	add	r0, sp, #20
 800126a:	f003 febd 	bl	8004fe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800126e:	2300      	movs	r3, #0
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	9301      	str	r3, [sp, #4]
 8001274:	9302      	str	r3, [sp, #8]
 8001276:	9303      	str	r3, [sp, #12]
 8001278:	9304      	str	r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800127a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800127e:	f001 fd5d 	bl	8002d3c <HAL_PWREx_ControlVoltageScaling>
 8001282:	b9d0      	cbnz	r0, 80012ba <SystemClock_Config+0x5a>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001284:	2310      	movs	r3, #16
 8001286:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001288:	2301      	movs	r3, #1
 800128a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8001290:	2280      	movs	r2, #128	; 0x80
 8001292:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001294:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001296:	a805      	add	r0, sp, #20
 8001298:	f001 fe3a 	bl	8002f10 <HAL_RCC_OscConfig>
 800129c:	b978      	cbnz	r0, 80012be <SystemClock_Config+0x5e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800129e:	230f      	movs	r3, #15
 80012a0:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80012a2:	2100      	movs	r1, #0
 80012a4:	9101      	str	r1, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a6:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012a8:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012aa:	9104      	str	r1, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012ac:	4668      	mov	r0, sp
 80012ae:	f002 f965 	bl	800357c <HAL_RCC_ClockConfig>
 80012b2:	b930      	cbnz	r0, 80012c2 <SystemClock_Config+0x62>
}
 80012b4:	b017      	add	sp, #92	; 0x5c
 80012b6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80012ba:	f7ff ff38 	bl	800112e <Error_Handler>
    Error_Handler();
 80012be:	f7ff ff36 	bl	800112e <Error_Handler>
    Error_Handler();
 80012c2:	f7ff ff34 	bl	800112e <Error_Handler>
	...

080012c8 <main>:
{
 80012c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_Init();
 80012ca:	f001 fb8f 	bl	80029ec <HAL_Init>
  SystemClock_Config();
 80012ce:	f7ff ffc7 	bl	8001260 <SystemClock_Config>
  MX_GPIO_Init();
 80012d2:	f7ff fe4b 	bl	8000f6c <MX_GPIO_Init>
  MX_SPI1_Init();
 80012d6:	f7ff ff2d 	bl	8001134 <MX_SPI1_Init>
  MX_SPI3_Init();
 80012da:	f7ff ff4f 	bl	800117c <MX_SPI3_Init>
  MX_TIM2_Init();
 80012de:	f7ff ff71 	bl	80011c4 <MX_TIM2_Init>
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 80012e2:	4833      	ldr	r0, [pc, #204]	; (80013b0 <main+0xe8>)
 80012e4:	f003 f84a 	bl	800437c <HAL_TIM_Base_Start_IT>
 80012e8:	b108      	cbz	r0, 80012ee <main+0x26>
      Error_Handler();
 80012ea:	f7ff ff20 	bl	800112e <Error_Handler>
  XBEE_SPI = hspi3;
 80012ee:	2764      	movs	r7, #100	; 0x64
 80012f0:	463a      	mov	r2, r7
 80012f2:	4930      	ldr	r1, [pc, #192]	; (80013b4 <main+0xec>)
 80012f4:	4830      	ldr	r0, [pc, #192]	; (80013b8 <main+0xf0>)
 80012f6:	f003 fe69 	bl	8004fcc <memcpy>
  IMU_init(&hspi1, &IMU0, 0);
 80012fa:	4d30      	ldr	r5, [pc, #192]	; (80013bc <main+0xf4>)
 80012fc:	4c30      	ldr	r4, [pc, #192]	; (80013c0 <main+0xf8>)
 80012fe:	2200      	movs	r2, #0
 8001300:	4629      	mov	r1, r5
 8001302:	4620      	mov	r0, r4
 8001304:	f7ff fd34 	bl	8000d70 <IMU_init>
  IMU_init(&hspi1, &IMU1, 1);
 8001308:	4e2e      	ldr	r6, [pc, #184]	; (80013c4 <main+0xfc>)
 800130a:	2201      	movs	r2, #1
 800130c:	4631      	mov	r1, r6
 800130e:	4620      	mov	r0, r4
 8001310:	f7ff fd2e 	bl	8000d70 <IMU_init>
  IMU_init(&hspi1, &IMU2, 2);
 8001314:	2202      	movs	r2, #2
 8001316:	492c      	ldr	r1, [pc, #176]	; (80013c8 <main+0x100>)
 8001318:	4620      	mov	r0, r4
 800131a:	f7ff fd29 	bl	8000d70 <IMU_init>
  HAL_Delay(100);
 800131e:	4638      	mov	r0, r7
 8001320:	f001 fb8c 	bl	8002a3c <HAL_Delay>
  IMU_readSensorData(&IMU0, &IMU0_data);
 8001324:	4c29      	ldr	r4, [pc, #164]	; (80013cc <main+0x104>)
 8001326:	4621      	mov	r1, r4
 8001328:	4628      	mov	r0, r5
 800132a:	f7ff fcc4 	bl	8000cb6 <IMU_readSensorData>
  IMU_readSensorData(&IMU1, &IMU1_data);
 800132e:	4d28      	ldr	r5, [pc, #160]	; (80013d0 <main+0x108>)
 8001330:	4629      	mov	r1, r5
 8001332:	4630      	mov	r0, r6
 8001334:	f7ff fcbf 	bl	8000cb6 <IMU_readSensorData>
  init_processing(&IMU0_data, &IMU1_data);
 8001338:	4629      	mov	r1, r5
 800133a:	4620      	mov	r0, r4
 800133c:	f000 ff10 	bl	8002160 <init_processing>
 8001340:	e002      	b.n	8001348 <main+0x80>
	  if (periodic_tx_flag) {
 8001342:	4b24      	ldr	r3, [pc, #144]	; (80013d4 <main+0x10c>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	b9c3      	cbnz	r3, 800137a <main+0xb2>
	  if (DRDY_flag) {
 8001348:	4b23      	ldr	r3, [pc, #140]	; (80013d8 <main+0x110>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0f8      	beq.n	8001342 <main+0x7a>
		  IMU_readSensorData(&IMU0, &IMU0_data);
 8001350:	4c1e      	ldr	r4, [pc, #120]	; (80013cc <main+0x104>)
 8001352:	4621      	mov	r1, r4
 8001354:	4819      	ldr	r0, [pc, #100]	; (80013bc <main+0xf4>)
 8001356:	f7ff fcae 	bl	8000cb6 <IMU_readSensorData>
		  IMU_readSensorData(&IMU1, &IMU1_data);
 800135a:	4d1d      	ldr	r5, [pc, #116]	; (80013d0 <main+0x108>)
 800135c:	4629      	mov	r1, r5
 800135e:	4819      	ldr	r0, [pc, #100]	; (80013c4 <main+0xfc>)
 8001360:	f7ff fca9 	bl	8000cb6 <IMU_readSensorData>
		  calculateCorrectedState(&IMU0_data, &IMU1_data, timeDelta);
 8001364:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <main+0x114>)
 8001366:	ed93 0a00 	vldr	s0, [r3]
 800136a:	4629      	mov	r1, r5
 800136c:	4620      	mov	r0, r4
 800136e:	f001 f8b1 	bl	80024d4 <calculateCorrectedState>
		  DRDY_flag = 0;
 8001372:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <main+0x110>)
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]
 8001378:	e7e3      	b.n	8001342 <main+0x7a>
		  uint8_t rx_cmd = sendCurrentPosition(RUN_STATE);
 800137a:	2001      	movs	r0, #1
 800137c:	f7ff fea6 	bl	80010cc <sendCurrentPosition>
		  if (rx_cmd == 0xFF) {
 8001380:	28ff      	cmp	r0, #255	; 0xff
 8001382:	d003      	beq.n	800138c <main+0xc4>
		  periodic_tx_flag = 0;
 8001384:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <main+0x10c>)
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
 800138a:	e7dd      	b.n	8001348 <main+0x80>
			  IMU_readSensorData(&IMU0, &IMU0_data);
 800138c:	4c0f      	ldr	r4, [pc, #60]	; (80013cc <main+0x104>)
 800138e:	4621      	mov	r1, r4
 8001390:	480a      	ldr	r0, [pc, #40]	; (80013bc <main+0xf4>)
 8001392:	f7ff fc90 	bl	8000cb6 <IMU_readSensorData>
			  IMU_readSensorData(&IMU1, &IMU1_data);
 8001396:	4d0e      	ldr	r5, [pc, #56]	; (80013d0 <main+0x108>)
 8001398:	4629      	mov	r1, r5
 800139a:	480a      	ldr	r0, [pc, #40]	; (80013c4 <main+0xfc>)
 800139c:	f7ff fc8b 	bl	8000cb6 <IMU_readSensorData>
			  resetCurrentPosition(&IMU0_data, &IMU1_data);
 80013a0:	4629      	mov	r1, r5
 80013a2:	4620      	mov	r0, r4
 80013a4:	f000 ffba 	bl	800231c <resetCurrentPosition>
			  sendCurrentPosition(RESET_STATE);
 80013a8:	2000      	movs	r0, #0
 80013aa:	f7ff fe8f 	bl	80010cc <sendCurrentPosition>
 80013ae:	e7e9      	b.n	8001384 <main+0xbc>
 80013b0:	2000116c 	.word	0x2000116c
 80013b4:	20001108 	.word	0x20001108
 80013b8:	20001040 	.word	0x20001040
 80013bc:	20000fd4 	.word	0x20000fd4
 80013c0:	200010a4 	.word	0x200010a4
 80013c4:	20001000 	.word	0x20001000
 80013c8:	2000102c 	.word	0x2000102c
 80013cc:	20000fe8 	.word	0x20000fe8
 80013d0:	20001014 	.word	0x20001014
 80013d4:	20000028 	.word	0x20000028
 80013d8:	20000fd0 	.word	0x20000fd0
 80013dc:	2000002c 	.word	0x2000002c

080013e0 <returnCurrentPosition>:
	phase_out = (float)phase;
}

float returnCurrentPosition(Position* current_pos) {

	current_pos->X = (x_curr_f32[0] + x_curr_f32[3]) / 2;
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <returnCurrentPosition+0x48>)
 80013e2:	ed93 7a00 	vldr	s14, [r3]
 80013e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80013ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013ee:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80013f2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80013f6:	ed80 7a00 	vstr	s14, [r0]
	current_pos->Y = (x_curr_f32[1] + x_curr_f32[4]) / 2;
 80013fa:	ed93 7a01 	vldr	s14, [r3, #4]
 80013fe:	edd3 7a04 	vldr	s15, [r3, #16]
 8001402:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001406:	ee27 7a26 	vmul.f32	s14, s14, s13
 800140a:	ed80 7a01 	vstr	s14, [r0, #4]
	current_pos->Z = (x_curr_f32[2] + x_curr_f32[5]) / 2;
 800140e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001412:	ed93 7a05 	vldr	s14, [r3, #20]
 8001416:	ee77 7a87 	vadd.f32	s15, s15, s14
 800141a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800141e:	edc0 7a02 	vstr	s15, [r0, #8]
	// Returns avg of two position values, units of meters
	return 0.;
}
 8001422:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800142c <returnCurrentPosition+0x4c>
 8001426:	4770      	bx	lr
 8001428:	20000ee4 	.word	0x20000ee4
 800142c:	00000000 	.word	0x00000000

08001430 <calculateRotationMatrix>:
	// Determine |w_avg_b0|
	w_avg_b0_mag = vec_mag_f32(w_avg_b0_f32);
}

void calculateRotationMatrix(
		float timeDelta) { // TODO Verify this
 8001430:	b510      	push	{r4, lr}
 8001432:	ed2d 8b02 	vpush	{d8}
 8001436:	b084      	sub	sp, #16

	// Determine change in rotation angle / 2 (units of radians)
	float rotation_angle_div_2 = w_avg_b0_mag * timeDelta * deg2rad / 2;
 8001438:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <calculateRotationMatrix+0xc0>)
 800143a:	ed93 8a00 	vldr	s16, [r3]
 800143e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8001442:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80014f4 <calculateRotationMatrix+0xc4>
 8001446:	ee20 0a27 	vmul.f32	s0, s0, s15
 800144a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800144e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8001452:	ee17 4a90 	vmov	r4, s15

	float q1_3_scaling_term = (w_avg_b0_mag) ?
			(float)sin(rotation_angle_div_2) / w_avg_b0_mag : w_avg_b0_mag; // reduce number of calculations
 8001456:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800145a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800145e:	d00f      	beq.n	8001480 <calculateRotationMatrix+0x50>
 8001460:	ee17 0a90 	vmov	r0, s15
 8001464:	f7ff f868 	bl	8000538 <__aeabi_f2d>
 8001468:	ec41 0b10 	vmov	d0, r0, r1
 800146c:	f004 fddc 	bl	8006028 <sin>
 8001470:	ec51 0b10 	vmov	r0, r1, d0
 8001474:	f7ff fb7a 	bl	8000b6c <__aeabi_d2f>
 8001478:	ee07 0a90 	vmov	s15, r0
 800147c:	ee87 8a88 	vdiv.f32	s16, s15, s16

	// Determine change in rotation as quaternion
	float delta_q_f32[4];
	delta_q_f32[0] = (float)cos(rotation_angle_div_2);
 8001480:	4620      	mov	r0, r4
 8001482:	f7ff f859 	bl	8000538 <__aeabi_f2d>
 8001486:	ec41 0b10 	vmov	d0, r0, r1
 800148a:	f004 fd79 	bl	8005f80 <cos>
 800148e:	ec51 0b10 	vmov	r0, r1, d0
 8001492:	f7ff fb6b 	bl	8000b6c <__aeabi_d2f>
 8001496:	9000      	str	r0, [sp, #0]
	delta_q_f32[1] = w_avg_b0_f32[0] * q1_3_scaling_term;
 8001498:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <calculateRotationMatrix+0xc8>)
 800149a:	edd3 7a00 	vldr	s15, [r3]
 800149e:	ee67 7a88 	vmul.f32	s15, s15, s16
 80014a2:	edcd 7a01 	vstr	s15, [sp, #4]
	delta_q_f32[2] = w_avg_b0_f32[1] * q1_3_scaling_term;
 80014a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80014aa:	ee67 7a88 	vmul.f32	s15, s15, s16
 80014ae:	edcd 7a02 	vstr	s15, [sp, #8]
	delta_q_f32[3] = w_avg_b0_f32[2] * q1_3_scaling_term;
 80014b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80014b6:	ee27 8a88 	vmul.f32	s16, s15, s16
 80014ba:	ed8d 8a03 	vstr	s16, [sp, #12]

	arm_quaternion_normalize_f32(delta_q_f32, delta_q_f32, 1);	// q = q / |q|
 80014be:	2201      	movs	r2, #1
 80014c0:	4669      	mov	r1, sp
 80014c2:	4668      	mov	r0, sp
 80014c4:	f003 fc3f 	bl	8004d46 <arm_quaternion_normalize_f32>

	// Calculate new normalized quaternion
	arm_quaternion_product_single_f32(delta_q_f32, q_f32, q_f32); // q = q x delta_q
 80014c8:	4c0c      	ldr	r4, [pc, #48]	; (80014fc <calculateRotationMatrix+0xcc>)
 80014ca:	4622      	mov	r2, r4
 80014cc:	4621      	mov	r1, r4
 80014ce:	4668      	mov	r0, sp
 80014d0:	f003 fc90 	bl	8004df4 <arm_quaternion_product_single_f32>
	arm_quaternion_normalize_f32(q_f32, q_f32, 1);	// q = q / |q|
 80014d4:	2201      	movs	r2, #1
 80014d6:	4621      	mov	r1, r4
 80014d8:	4620      	mov	r0, r4
 80014da:	f003 fc34 	bl	8004d46 <arm_quaternion_normalize_f32>
	// Calculate rotation matrix from board frame to nav frame using quaternion
	arm_quaternion2rotation_f32(q_f32, rotation_b0_n_f32, 1);
 80014de:	2201      	movs	r2, #1
 80014e0:	4907      	ldr	r1, [pc, #28]	; (8001500 <calculateRotationMatrix+0xd0>)
 80014e2:	4620      	mov	r0, r4
 80014e4:	f003 fbae 	bl	8004c44 <arm_quaternion2rotation_f32>
	//printf("%f %f %f %f %f %f %f %f %f\n", rotation_b0_n_f32[0], rotation_b0_n_f32[1], rotation_b0_n_f32[2], rotation_b0_n_f32[3], rotation_b0_n_f32[4], rotation_b0_n_f32[5], rotation_b0_n_f32[6], rotation_b0_n_f32[7], rotation_b0_n_f32[8]);
}
 80014e8:	b004      	add	sp, #16
 80014ea:	ecbd 8b02 	vpop	{d8}
 80014ee:	bd10      	pop	{r4, pc}
 80014f0:	2000167c 	.word	0x2000167c
 80014f4:	3c8efa35 	.word	0x3c8efa35
 80014f8:	20001670 	.word	0x20001670
 80014fc:	20000ed4 	.word	0x20000ed4
 8001500:	20001624 	.word	0x20001624

08001504 <calculateStateEstimation>:

void calculateStateEstimation(void) { // TODO Verify this
 8001504:	b500      	push	{lr}
 8001506:	b09d      	sub	sp, #116	; 0x74
	 *  Define Temporary Objects
	 */

	float temp1_f32[12];
	arm_matrix_instance_f32 temp1;
	arm_mat_init_f32(&temp1, 12, 1, temp1_f32); // temp for first term of sum, 12x1
 8001508:	ab10      	add	r3, sp, #64	; 0x40
 800150a:	2201      	movs	r2, #1
 800150c:	210c      	movs	r1, #12
 800150e:	a80e      	add	r0, sp, #56	; 0x38
 8001510:	f003 fa2f 	bl	8004972 <arm_mat_init_f32>

	float temp2_f32[12];
	arm_matrix_instance_f32 temp2;
	arm_mat_init_f32(&temp2, 12, 1, temp2_f32); // temp for second term of sum, 12x1
 8001514:	ab02      	add	r3, sp, #8
 8001516:	2201      	movs	r2, #1
 8001518:	210c      	movs	r1, #12
 800151a:	4668      	mov	r0, sp
 800151c:	f003 fa29 	bl	8004972 <arm_mat_init_f32>

	/*
	 *  Calculation Section
	 */

	arm_mat_mult_f32(&F_matrix, &x_prev, &temp1); // F*x(k-1) --> (12x12) * (12x1)
 8001520:	aa0e      	add	r2, sp, #56	; 0x38
 8001522:	4919      	ldr	r1, [pc, #100]	; (8001588 <calculateStateEstimation+0x84>)
 8001524:	4819      	ldr	r0, [pc, #100]	; (800158c <calculateStateEstimation+0x88>)
 8001526:	f003 fb1f 	bl	8004b68 <arm_mat_mult_f32>

	arm_mat_mult_f32(&B_matrix, &u_curr, &temp2); // B*u(k) --> (12x6) * (6x1)
 800152a:	466a      	mov	r2, sp
 800152c:	4918      	ldr	r1, [pc, #96]	; (8001590 <calculateStateEstimation+0x8c>)
 800152e:	4819      	ldr	r0, [pc, #100]	; (8001594 <calculateStateEstimation+0x90>)
 8001530:	f003 fb1a 	bl	8004b68 <arm_mat_mult_f32>

	arm_mat_add_f32(&temp1, &temp2, &x_curr); // x(k) = F*x(k-1) + B*u(k)
 8001534:	4a18      	ldr	r2, [pc, #96]	; (8001598 <calculateStateEstimation+0x94>)
 8001536:	4669      	mov	r1, sp
 8001538:	a80e      	add	r0, sp, #56	; 0x38
 800153a:	f003 fa02 	bl	8004942 <arm_mat_add_f32>

	prediction_f32[0] = (x_curr_f32[0] + x_curr_f32[3]) / 2;
 800153e:	4b17      	ldr	r3, [pc, #92]	; (800159c <calculateStateEstimation+0x98>)
 8001540:	ed93 7a00 	vldr	s14, [r3]
 8001544:	edd3 7a03 	vldr	s15, [r3, #12]
 8001548:	ee37 7a27 	vadd.f32	s14, s14, s15
 800154c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001550:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001554:	4a12      	ldr	r2, [pc, #72]	; (80015a0 <calculateStateEstimation+0x9c>)
 8001556:	ed82 7a00 	vstr	s14, [r2]
	prediction_f32[1] = (x_curr_f32[1] + x_curr_f32[4]) / 2;
 800155a:	ed93 7a01 	vldr	s14, [r3, #4]
 800155e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001562:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001566:	ee27 7a26 	vmul.f32	s14, s14, s13
 800156a:	ed82 7a01 	vstr	s14, [r2, #4]
	prediction_f32[2] = (x_curr_f32[2] + x_curr_f32[5]) / 2;
 800156e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001572:	ed93 7a05 	vldr	s14, [r3, #20]
 8001576:	ee77 7a87 	vadd.f32	s15, s15, s14
 800157a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800157e:	edc2 7a02 	vstr	s15, [r2, #8]
}
 8001582:	b01d      	add	sp, #116	; 0x74
 8001584:	f85d fb04 	ldr.w	pc, [sp], #4
 8001588:	200016ec 	.word	0x200016ec
 800158c:	200011c0 	.word	0x200011c0
 8001590:	20001648 	.word	0x20001648
 8001594:	200011b8 	.word	0x200011b8
 8001598:	200016e4 	.word	0x200016e4
 800159c:	20000ee4 	.word	0x20000ee4
 80015a0:	20001610 	.word	0x20001610

080015a4 <calculateStateEstimationErrorCovariance>:

void calculateStateEstimationErrorCovariance(void) {
 80015a4:	b510      	push	{r4, lr}
 80015a6:	f5ad 6d92 	sub.w	sp, sp, #1168	; 0x490
	 *  Define Temporary Objects
	 */

	float temp12x12_0_f32[144];
	arm_matrix_instance_f32 temp12x12_0;
	arm_mat_init_f32(&temp12x12_0, 12, 12, temp12x12_0_f32); // Temp 12x12 matrix
 80015aa:	ab94      	add	r3, sp, #592	; 0x250
 80015ac:	220c      	movs	r2, #12
 80015ae:	4611      	mov	r1, r2
 80015b0:	a892      	add	r0, sp, #584	; 0x248
 80015b2:	f003 f9de 	bl	8004972 <arm_mat_init_f32>
	arm_mat_trans_f32(&F_matrix, &temp12x12_0);	// Initialize to transpose of F
 80015b6:	4c0e      	ldr	r4, [pc, #56]	; (80015f0 <calculateStateEstimationErrorCovariance+0x4c>)
 80015b8:	a992      	add	r1, sp, #584	; 0x248
 80015ba:	4620      	mov	r0, r4
 80015bc:	f003 fb26 	bl	8004c0c <arm_mat_trans_f32>

	float temp12x12_1_f32[144];
	arm_matrix_instance_f32 temp12x12_1;
	arm_mat_init_f32(&temp12x12_1, 12, 12, temp12x12_1_f32); // Temp 12x12 matrix
 80015c0:	ab02      	add	r3, sp, #8
 80015c2:	220c      	movs	r2, #12
 80015c4:	4611      	mov	r1, r2
 80015c6:	4668      	mov	r0, sp
 80015c8:	f003 f9d3 	bl	8004972 <arm_mat_init_f32>
	/*
	 *  Calculation Section
	 */

	arm_mat_mult_f32(&P_prev, &temp12x12_0, &temp12x12_1);	// P(k-1)*F^T --> (12x12) * (12x12)
 80015cc:	466a      	mov	r2, sp
 80015ce:	a992      	add	r1, sp, #584	; 0x248
 80015d0:	4808      	ldr	r0, [pc, #32]	; (80015f4 <calculateStateEstimationErrorCovariance+0x50>)
 80015d2:	f003 fac9 	bl	8004b68 <arm_mat_mult_f32>

	arm_mat_mult_f32(&F_matrix, &temp12x12_1, &temp12x12_0);	// F*(P(k-1)*F^T) --> (12x12) * (12x12)
 80015d6:	aa92      	add	r2, sp, #584	; 0x248
 80015d8:	4669      	mov	r1, sp
 80015da:	4620      	mov	r0, r4
 80015dc:	f003 fac4 	bl	8004b68 <arm_mat_mult_f32>

	arm_mat_add_f32(&temp12x12_0, &Q_prev, &P_minus);	// P-(k) = (F*P(k-1)*F^T) + Q(k-1)
 80015e0:	4a05      	ldr	r2, [pc, #20]	; (80015f8 <calculateStateEstimationErrorCovariance+0x54>)
 80015e2:	4906      	ldr	r1, [pc, #24]	; (80015fc <calculateStateEstimationErrorCovariance+0x58>)
 80015e4:	a892      	add	r0, sp, #584	; 0x248
 80015e6:	f003 f9ac 	bl	8004942 <arm_mat_add_f32>

}
 80015ea:	f50d 6d92 	add.w	sp, sp, #1168	; 0x490
 80015ee:	bd10      	pop	{r4, pc}
 80015f0:	200011c0 	.word	0x200011c0
 80015f4:	20001558 	.word	0x20001558
 80015f8:	20001550 	.word	0x20001550
 80015fc:	20001560 	.word	0x20001560

08001600 <calculateGainMatrix>:

void calculateGainMatrix(
		arm_matrix_instance_f32* Ki, /*(12xN)*/
		arm_matrix_instance_f32* Hi, /*(Nx12)*/
		arm_matrix_instance_f32* Ri /*(NxN)*/) { // TODO Verify this
 8001600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001604:	b089      	sub	sp, #36	; 0x24
 8001606:	4605      	mov	r5, r0
 8001608:	460e      	mov	r6, r1
 800160a:	4693      	mov	fp, r2

	uint16_t N = Hi->numRows;
 800160c:	880c      	ldrh	r4, [r1, #0]

	/*
	 *  Define Temporary Objects
	 */

	float* temp12xN_0_f32 = (float*)malloc(12 * N * sizeof(float));
 800160e:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8001612:	013f      	lsls	r7, r7, #4
 8001614:	4638      	mov	r0, r7
 8001616:	f003 fcc9 	bl	8004fac <malloc>
 800161a:	4682      	mov	sl, r0
	arm_matrix_instance_f32 temp12xN_0;
	arm_mat_init_f32(&temp12xN_0, 12, N, temp12xN_0_f32); // temp matrix (12xN)
 800161c:	4603      	mov	r3, r0
 800161e:	4622      	mov	r2, r4
 8001620:	210c      	movs	r1, #12
 8001622:	a806      	add	r0, sp, #24
 8001624:	f003 f9a5 	bl	8004972 <arm_mat_init_f32>
	arm_mat_trans_f32(Hi, &temp12xN_0); // init to transpose of Hi
 8001628:	a906      	add	r1, sp, #24
 800162a:	4630      	mov	r0, r6
 800162c:	f003 faee 	bl	8004c0c <arm_mat_trans_f32>

	float* temp12xN_1_f32 = (float*)malloc(12 * N * sizeof(float));
 8001630:	4638      	mov	r0, r7
 8001632:	f003 fcbb 	bl	8004fac <malloc>
 8001636:	4680      	mov	r8, r0
	arm_matrix_instance_f32 temp12xN_1;
	arm_mat_init_f32(&temp12xN_1, 12, N, temp12xN_1_f32); // temp matrix (12xN)
 8001638:	4603      	mov	r3, r0
 800163a:	4622      	mov	r2, r4
 800163c:	210c      	movs	r1, #12
 800163e:	a804      	add	r0, sp, #16
 8001640:	f003 f997 	bl	8004972 <arm_mat_init_f32>

	float* tempNxN_0_f32 = (float*)malloc(N * N * sizeof(float));
 8001644:	fb04 f704 	mul.w	r7, r4, r4
 8001648:	00bf      	lsls	r7, r7, #2
 800164a:	4638      	mov	r0, r7
 800164c:	f003 fcae 	bl	8004fac <malloc>
 8001650:	4681      	mov	r9, r0
	arm_matrix_instance_f32 tempNxN_0;
	arm_mat_init_f32(&tempNxN_0, N, N, tempNxN_0_f32); // temp matrix (NxN)
 8001652:	4603      	mov	r3, r0
 8001654:	4622      	mov	r2, r4
 8001656:	4621      	mov	r1, r4
 8001658:	a802      	add	r0, sp, #8
 800165a:	f003 f98a 	bl	8004972 <arm_mat_init_f32>

	float* tempNxN_1_f32 = (float*)malloc(N * N * sizeof(float));
 800165e:	4638      	mov	r0, r7
 8001660:	f003 fca4 	bl	8004fac <malloc>
 8001664:	4607      	mov	r7, r0
	arm_matrix_instance_f32 tempNxN_1;
	arm_mat_init_f32(&tempNxN_1, N, N, tempNxN_1_f32); // temp matrix (NxN)
 8001666:	4603      	mov	r3, r0
 8001668:	4622      	mov	r2, r4
 800166a:	4621      	mov	r1, r4
 800166c:	4668      	mov	r0, sp
 800166e:	f003 f980 	bl	8004972 <arm_mat_init_f32>

	/*
	 *  Calculation Section
	 */

	arm_mat_mult_f32(&P_minus, &temp12xN_0, &temp12xN_1);	// P-(k)*Hi^T --> (12x12) * (12xN)
 8001672:	aa04      	add	r2, sp, #16
 8001674:	a906      	add	r1, sp, #24
 8001676:	4824      	ldr	r0, [pc, #144]	; (8001708 <calculateGainMatrix+0x108>)
 8001678:	f003 fa76 	bl	8004b68 <arm_mat_mult_f32>

	arm_mat_mult_f32(Hi, &temp12xN_1, &tempNxN_0);	// Hi*(P-(k)*Hi^T) --> (Nx12) * (12xN)
 800167c:	aa02      	add	r2, sp, #8
 800167e:	a904      	add	r1, sp, #16
 8001680:	4630      	mov	r0, r6
 8001682:	f003 fa71 	bl	8004b68 <arm_mat_mult_f32>

	arm_mat_add_f32(&tempNxN_0, Ri, &tempNxN_1);	// (Hi*P-(k)*Hi^T + Ri(k))
 8001686:	466a      	mov	r2, sp
 8001688:	4659      	mov	r1, fp
 800168a:	a802      	add	r0, sp, #8
 800168c:	f003 f959 	bl	8004942 <arm_mat_add_f32>

	arm_mat_inverse_f32(&tempNxN_1, &tempNxN_0);	// (Hi*P-(k)*Hi^T + Ri(k))^-1
 8001690:	a902      	add	r1, sp, #8
 8001692:	4668      	mov	r0, sp
 8001694:	f003 f972 	bl	800497c <arm_mat_inverse_f32>

	arm_mat_mult_f32(&temp12xN_1, &tempNxN_0, Ki);	// Ki(k) = P-(k)*Hi^T * (Hi*P-(k)*Hi^T + Ri(k))^-1 --> (12xN) * (NxN)
 8001698:	462a      	mov	r2, r5
 800169a:	a902      	add	r1, sp, #8
 800169c:	a804      	add	r0, sp, #16
 800169e:	f003 fa63 	bl	8004b68 <arm_mat_mult_f32>
	/*
	 *  Cleanup Section
	 */

	// Free malloc'd memory
	free(temp12xN_0_f32);
 80016a2:	4650      	mov	r0, sl
 80016a4:	f003 fc8a 	bl	8004fbc <free>
	free(tempNxN_0_f32);
 80016a8:	4648      	mov	r0, r9
 80016aa:	f003 fc87 	bl	8004fbc <free>
	free(temp12xN_1_f32);
 80016ae:	4640      	mov	r0, r8
 80016b0:	f003 fc84 	bl	8004fbc <free>
	free(tempNxN_1_f32);
 80016b4:	4638      	mov	r0, r7
 80016b6:	f003 fc81 	bl	8004fbc <free>

	gain_f32[0] = (Ki->pData[0] + Ki->pData[3]) / 2;
 80016ba:	686b      	ldr	r3, [r5, #4]
 80016bc:	ed93 7a00 	vldr	s14, [r3]
 80016c0:	edd3 7a03 	vldr	s15, [r3, #12]
 80016c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016c8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80016cc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80016d0:	4a0e      	ldr	r2, [pc, #56]	; (800170c <calculateGainMatrix+0x10c>)
 80016d2:	ed82 7a00 	vstr	s14, [r2]
	gain_f32[1] = (Ki->pData[1] + Ki->pData[4]) / 2;
 80016d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80016da:	edd3 7a04 	vldr	s15, [r3, #16]
 80016de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016e2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80016e6:	ed82 7a01 	vstr	s14, [r2, #4]
	gain_f32[2] = (Ki->pData[2] + Ki->pData[5]) / 2;
 80016ea:	686b      	ldr	r3, [r5, #4]
 80016ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80016f0:	ed93 7a05 	vldr	s14, [r3, #20]
 80016f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80016fc:	edc2 7a02 	vstr	s15, [r2, #8]
}
 8001700:	b009      	add	sp, #36	; 0x24
 8001702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001706:	bf00      	nop
 8001708:	20001550 	.word	0x20001550
 800170c:	200015e8 	.word	0x200015e8

08001710 <calculateOptimalStateEstimation>:
#define Z_THRES 0.1

void calculateOptimalStateEstimation(
		arm_matrix_instance_f32* Ki, /*(12xN)*/
		arm_matrix_instance_f32* Zi, /*(Nx1)*/
		arm_matrix_instance_f32* Hi /*(Nx12)*/) { // TODO Verify this
 8001710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001714:	b093      	sub	sp, #76	; 0x4c
 8001716:	4680      	mov	r8, r0
 8001718:	460e      	mov	r6, r1
 800171a:	4691      	mov	r9, r2

	uint16_t N = Zi->numRows;
 800171c:	880f      	ldrh	r7, [r1, #0]

	/*
	 *  Define Temporary Objects
	 */

	float* tempNx1_0_f32 = (float*)malloc(N * sizeof(float));
 800171e:	00bc      	lsls	r4, r7, #2
 8001720:	4620      	mov	r0, r4
 8001722:	f003 fc43 	bl	8004fac <malloc>
 8001726:	4605      	mov	r5, r0
	arm_matrix_instance_f32 tempNx1_0;
	arm_mat_init_f32(&tempNx1_0, N, 1, tempNx1_0_f32); // Will temporarily store some operation results, (Nx1)
 8001728:	4603      	mov	r3, r0
 800172a:	2201      	movs	r2, #1
 800172c:	4639      	mov	r1, r7
 800172e:	a810      	add	r0, sp, #64	; 0x40
 8001730:	f003 f91f 	bl	8004972 <arm_mat_init_f32>

	float* tempNx1_1_f32 = (float*)malloc(N * sizeof(float));
 8001734:	4620      	mov	r0, r4
 8001736:	f003 fc39 	bl	8004fac <malloc>
 800173a:	4604      	mov	r4, r0
	arm_matrix_instance_f32 tempNx1_1;
	arm_mat_init_f32(&tempNx1_1, N, 1, tempNx1_1_f32); // Will temporarily store some operation results, (Nx1)
 800173c:	4603      	mov	r3, r0
 800173e:	2201      	movs	r2, #1
 8001740:	4639      	mov	r1, r7
 8001742:	a80e      	add	r0, sp, #56	; 0x38
 8001744:	f003 f915 	bl	8004972 <arm_mat_init_f32>

	float temp12x1_f32[12];
	arm_matrix_instance_f32 temp12x1;
	arm_mat_init_f32(&temp12x1, 12, 1, temp12x1_f32); // Will temporarily store some operation results, (12x1)
 8001748:	ab02      	add	r3, sp, #8
 800174a:	2201      	movs	r2, #1
 800174c:	210c      	movs	r1, #12
 800174e:	4668      	mov	r0, sp
 8001750:	f003 f90f 	bl	8004972 <arm_mat_init_f32>

	/*
	 *  Calculation Section
	 */

	arm_mat_mult_f32(Hi, &x_curr, &tempNx1_0);	// Hi*x(k) --> (Nx12) * (12x1)
 8001754:	4f1f      	ldr	r7, [pc, #124]	; (80017d4 <calculateOptimalStateEstimation+0xc4>)
 8001756:	aa10      	add	r2, sp, #64	; 0x40
 8001758:	4639      	mov	r1, r7
 800175a:	4648      	mov	r0, r9
 800175c:	f003 fa04 	bl	8004b68 <arm_mat_mult_f32>

	// Calculate correction factor
	arm_mat_sub_f32(Zi, &tempNx1_0, &tempNx1_1);	// (Zi(k) - Hi*x(k)) -> tempNx1
 8001760:	aa0e      	add	r2, sp, #56	; 0x38
 8001762:	a910      	add	r1, sp, #64	; 0x40
 8001764:	4630      	mov	r0, r6
 8001766:	f003 fa39 	bl	8004bdc <arm_mat_sub_f32>
//	printf("%f %f %f\n", tempNx1_f32[3], tempNx1_f32[4], tempNx1_f32[5]); // should be ideally zero

	// Weight correction factor by Kalman Gain
	arm_mat_mult_f32(Ki, &tempNx1_1, &temp12x1); // Ki(k) * (Zi(k) - Hi*x(k)) --> (12xN) * (Nx1) -> temp12x1
 800176a:	466a      	mov	r2, sp
 800176c:	a90e      	add	r1, sp, #56	; 0x38
 800176e:	4640      	mov	r0, r8
 8001770:	f003 f9fa 	bl	8004b68 <arm_mat_mult_f32>

	correction_f32[0] = (temp12x1_f32[0] + temp12x1_f32[3]) / 2;
 8001774:	ed9d 7a02 	vldr	s14, [sp, #8]
 8001778:	eddd 7a05 	vldr	s15, [sp, #20]
 800177c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001780:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001784:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001788:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <calculateOptimalStateEstimation+0xc8>)
 800178a:	ed83 7a00 	vstr	s14, [r3]
	correction_f32[1] = (temp12x1_f32[1] + temp12x1_f32[4]) / 2;
 800178e:	ed9d 7a03 	vldr	s14, [sp, #12]
 8001792:	eddd 7a06 	vldr	s15, [sp, #24]
 8001796:	ee37 7a27 	vadd.f32	s14, s14, s15
 800179a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800179e:	ed83 7a01 	vstr	s14, [r3, #4]
	correction_f32[2] = (temp12x1_f32[2] + temp12x1_f32[5]) / 2;
 80017a2:	eddd 7a04 	vldr	s15, [sp, #16]
 80017a6:	ed9d 7a07 	vldr	s14, [sp, #28]
 80017aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80017b2:	edc3 7a02 	vstr	s15, [r3, #8]

//	printf("X_curr_before: %f \n", (x_curr_f32[0] + x_curr_f32[3]) / 2);
//	printf("Correction: %f \n", (temp12x1_f32[0] + temp12x1_f32[3]) / 2);

	// Add weighted correction factor
	arm_mat_add_f32(&x_curr, &temp12x1, &x_curr); // x(k) <= x_best(k) = x(k) + Ki(k) * (Zi(k) - Hi*x(k))
 80017b6:	463a      	mov	r2, r7
 80017b8:	4669      	mov	r1, sp
 80017ba:	4638      	mov	r0, r7
 80017bc:	f003 f8c1 	bl	8004942 <arm_mat_add_f32>
	/*
	 *  Cleanup Section
	 */

	// Free malloc'd memory
	free(tempNx1_0_f32);
 80017c0:	4628      	mov	r0, r5
 80017c2:	f003 fbfb 	bl	8004fbc <free>
	free(tempNx1_1_f32);
 80017c6:	4620      	mov	r0, r4
 80017c8:	f003 fbf8 	bl	8004fbc <free>
}
 80017cc:	b013      	add	sp, #76	; 0x4c
 80017ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017d2:	bf00      	nop
 80017d4:	200016e4 	.word	0x200016e4
 80017d8:	200015d4 	.word	0x200015d4

080017dc <calculateOptimalEstimationErrorCovariance>:

void calculateOptimalEstimationErrorCovariance(
		arm_matrix_instance_f32* Ki, /*(12xN)*/
		arm_matrix_instance_f32* Hi, /*(Nx12)*/
		arm_matrix_instance_f32* Ri /*(NxN)*/) { // TODO Verify this
 80017dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017e0:	f6ad 1d34 	subw	sp, sp, #2356	; 0x934
 80017e4:	4605      	mov	r5, r0
 80017e6:	4688      	mov	r8, r1
 80017e8:	4691      	mov	r9, r2

	uint16_t N = Hi->numRows;
 80017ea:	880c      	ldrh	r4, [r1, #0]

	/*
	 *  Define Temporary Objects
	 */

	float* tempNx12_0_f32 = (float*)malloc(12 * N * sizeof(float));
 80017ec:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 80017f0:	013f      	lsls	r7, r7, #4
 80017f2:	4638      	mov	r0, r7
 80017f4:	f003 fbda 	bl	8004fac <malloc>
 80017f8:	4606      	mov	r6, r0
	arm_matrix_instance_f32 tempNx12_0;
	arm_mat_init_f32(&tempNx12_0, N, 12, tempNx12_0_f32); // temp matrix (Nx12)
 80017fa:	4603      	mov	r3, r0
 80017fc:	220c      	movs	r2, #12
 80017fe:	4621      	mov	r1, r4
 8001800:	f60d 1028 	addw	r0, sp, #2344	; 0x928
 8001804:	f003 f8b5 	bl	8004972 <arm_mat_init_f32>
	arm_mat_trans_f32(Ki, &tempNx12_0); // init to transpose of Ki
 8001808:	f60d 1128 	addw	r1, sp, #2344	; 0x928
 800180c:	4628      	mov	r0, r5
 800180e:	f003 f9fd 	bl	8004c0c <arm_mat_trans_f32>

	float* temp12xN_0_f32 = (float*)malloc(12 * N * sizeof(float));
 8001812:	4638      	mov	r0, r7
 8001814:	f003 fbca 	bl	8004fac <malloc>
 8001818:	4607      	mov	r7, r0
	arm_matrix_instance_f32 temp12xN_0;
	arm_mat_init_f32(&temp12xN_0, 12, N, temp12xN_0_f32); // temp matrix (12xN)
 800181a:	4603      	mov	r3, r0
 800181c:	4622      	mov	r2, r4
 800181e:	210c      	movs	r1, #12
 8001820:	f50d 6012 	add.w	r0, sp, #2336	; 0x920
 8001824:	f003 f8a5 	bl	8004972 <arm_mat_init_f32>

	float Identity12x12_f32[144] = {
 8001828:	f50d 64dc 	add.w	r4, sp, #1760	; 0x6e0
 800182c:	f44f 7210 	mov.w	r2, #576	; 0x240
 8001830:	2100      	movs	r1, #0
 8001832:	4620      	mov	r0, r4
 8001834:	f003 fbd8 	bl	8004fe8 <memset>
 8001838:	f04f 5c7e 	mov.w	ip, #1065353216	; 0x3f800000
 800183c:	f8c4 c000 	str.w	ip, [r4]
 8001840:	f8c4 c034 	str.w	ip, [r4, #52]	; 0x34
 8001844:	f8c4 c068 	str.w	ip, [r4, #104]	; 0x68
 8001848:	f8c4 c09c 	str.w	ip, [r4, #156]	; 0x9c
 800184c:	f8c4 c0d0 	str.w	ip, [r4, #208]	; 0xd0
 8001850:	f8c4 c104 	str.w	ip, [r4, #260]	; 0x104
 8001854:	f8c4 c138 	str.w	ip, [r4, #312]	; 0x138
 8001858:	f8c4 c16c 	str.w	ip, [r4, #364]	; 0x16c
 800185c:	f8c4 c1a0 	str.w	ip, [r4, #416]	; 0x1a0
 8001860:	f8c4 c1d4 	str.w	ip, [r4, #468]	; 0x1d4
 8001864:	f8c4 c208 	str.w	ip, [r4, #520]	; 0x208
 8001868:	f8c4 c23c 	str.w	ip, [r4, #572]	; 0x23c
			0,0,0,	0,0,0,	0,0,0,	1,0,0,
			0,0,0,	0,0,0,	0,0,0,	0,1,0,
			0,0,0,	0,0,0,	0,0,0,	0,0,1,
	};
	arm_matrix_instance_f32 Identity12x12;
	arm_mat_init_f32(&Identity12x12, 12, 12, Identity12x12_f32); // 12x12 Identity matrix
 800186c:	4623      	mov	r3, r4
 800186e:	220c      	movs	r2, #12
 8001870:	4611      	mov	r1, r2
 8001872:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
 8001876:	f003 f87c 	bl	8004972 <arm_mat_init_f32>

	float temp12x12_0_f32[144];
	arm_matrix_instance_f32 temp12x12_0;
	arm_mat_init_f32(&temp12x12_0, 12, 12, temp12x12_0_f32); // Temp 12x12 matrix 0
 800187a:	f50d 6393 	add.w	r3, sp, #1176	; 0x498
 800187e:	220c      	movs	r2, #12
 8001880:	4611      	mov	r1, r2
 8001882:	f50d 6092 	add.w	r0, sp, #1168	; 0x490
 8001886:	f003 f874 	bl	8004972 <arm_mat_init_f32>

	float temp12x12_1_f32[144];
	arm_matrix_instance_f32 temp12x12_1;
	arm_mat_init_f32(&temp12x12_1, 12, 12, temp12x12_1_f32); // Temp 12x12 matrix 1
 800188a:	ab94      	add	r3, sp, #592	; 0x250
 800188c:	220c      	movs	r2, #12
 800188e:	4611      	mov	r1, r2
 8001890:	a892      	add	r0, sp, #584	; 0x248
 8001892:	f003 f86e 	bl	8004972 <arm_mat_init_f32>

	float temp12x12_2_f32[144];
	arm_matrix_instance_f32 temp12x12_2;
	arm_mat_init_f32(&temp12x12_2, 12, 12, temp12x12_2_f32); // Temp 12x12 matrix 2
 8001896:	ab02      	add	r3, sp, #8
 8001898:	220c      	movs	r2, #12
 800189a:	4611      	mov	r1, r2
 800189c:	4668      	mov	r0, sp
 800189e:	f003 f868 	bl	8004972 <arm_mat_init_f32>

	/*
	 *  Calculation Section
	 */

	arm_mat_mult_f32(Ki, Hi, &temp12x12_0);	// Ki(k)*Hi --> (12xN) * (Nx12)
 80018a2:	f50d 6292 	add.w	r2, sp, #1168	; 0x490
 80018a6:	4641      	mov	r1, r8
 80018a8:	4628      	mov	r0, r5
 80018aa:	f003 f95d 	bl	8004b68 <arm_mat_mult_f32>

	arm_mat_sub_f32(&Identity12x12, &temp12x12_0, &temp12x12_0); // I - (Ki(k)*Hi)
 80018ae:	f50d 6292 	add.w	r2, sp, #1168	; 0x490
 80018b2:	4611      	mov	r1, r2
 80018b4:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
 80018b8:	f003 f990 	bl	8004bdc <arm_mat_sub_f32>

	arm_mat_trans_f32(&temp12x12_0, &temp12x12_1); 	// I - (Ki(k)*Hi)^T
 80018bc:	a992      	add	r1, sp, #584	; 0x248
 80018be:	f50d 6092 	add.w	r0, sp, #1168	; 0x490
 80018c2:	f003 f9a3 	bl	8004c0c <arm_mat_trans_f32>

	arm_mat_mult_f32(&temp12x12_0, &P_minus, &temp12x12_2);	// (I - Ki(k)*Hi)*P-(k) --> (12x12) * (12x12)
 80018c6:	466a      	mov	r2, sp
 80018c8:	4913      	ldr	r1, [pc, #76]	; (8001918 <calculateOptimalEstimationErrorCovariance+0x13c>)
 80018ca:	f50d 6092 	add.w	r0, sp, #1168	; 0x490
 80018ce:	f003 f94b 	bl	8004b68 <arm_mat_mult_f32>

	arm_mat_mult_f32(&temp12x12_2, &temp12x12_1, &temp12x12_0);	// (I - Ki(k)*Hi)*P-(k)*(I - (Ki(k)*Hi)^T
 80018d2:	f50d 6292 	add.w	r2, sp, #1168	; 0x490
 80018d6:	a992      	add	r1, sp, #584	; 0x248
 80018d8:	4668      	mov	r0, sp
 80018da:	f003 f945 	bl	8004b68 <arm_mat_mult_f32>

	arm_mat_mult_f32(Ki, Ri, &temp12xN_0);	// Ki(k)*Ri --> (12xN) * (NxN)
 80018de:	f50d 6212 	add.w	r2, sp, #2336	; 0x920
 80018e2:	4649      	mov	r1, r9
 80018e4:	4628      	mov	r0, r5
 80018e6:	f003 f93f 	bl	8004b68 <arm_mat_mult_f32>

	arm_mat_mult_f32(&temp12xN_0, &tempNx12_0, &temp12x12_1);	// Ki(k)*Ri*Ki(k)^T --> (12xN) * (Nx12)
 80018ea:	aa92      	add	r2, sp, #584	; 0x248
 80018ec:	f60d 1128 	addw	r1, sp, #2344	; 0x928
 80018f0:	f50d 6012 	add.w	r0, sp, #2336	; 0x920
 80018f4:	f003 f938 	bl	8004b68 <arm_mat_mult_f32>

	arm_mat_add_f32(&temp12x12_0, &temp12x12_1, &P_curr);	// P(k) = (I - Ki(k)*Hi)*P-(k)*(I - (Ki(k)*Hi)^T + Ki(k)*Ri*Ki(k)^T
 80018f8:	4a08      	ldr	r2, [pc, #32]	; (800191c <calculateOptimalEstimationErrorCovariance+0x140>)
 80018fa:	a992      	add	r1, sp, #584	; 0x248
 80018fc:	f50d 6092 	add.w	r0, sp, #1168	; 0x490
 8001900:	f003 f81f 	bl	8004942 <arm_mat_add_f32>

	/*
	 *  Cleanup Section
	 */

	free(temp12xN_0_f32);
 8001904:	4638      	mov	r0, r7
 8001906:	f003 fb59 	bl	8004fbc <free>
	free(tempNx12_0_f32);
 800190a:	4630      	mov	r0, r6
 800190c:	f003 fb56 	bl	8004fbc <free>

}
 8001910:	f60d 1d34 	addw	sp, sp, #2356	; 0x934
 8001914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001918:	20001550 	.word	0x20001550
 800191c:	20001548 	.word	0x20001548

08001920 <updateFMatrix>:

void updateFMatrix(
		float timeDelta) { // TODO Verify this

	int i;
	for(i = 0; i < 6; ++i) { // Update specific indices of F matrix
 8001920:	2300      	movs	r3, #0
 8001922:	e00a      	b.n	800193a <updateFMatrix+0x1a>
		F_matrix_f32[6 + (13*i)] = timeDelta;
 8001924:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001928:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800192c:	3206      	adds	r2, #6
 800192e:	4904      	ldr	r1, [pc, #16]	; (8001940 <updateFMatrix+0x20>)
 8001930:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001934:	ed82 0a00 	vstr	s0, [r2]
	for(i = 0; i < 6; ++i) { // Update specific indices of F matrix
 8001938:	3301      	adds	r3, #1
 800193a:	2b05      	cmp	r3, #5
 800193c:	ddf2      	ble.n	8001924 <updateFMatrix+0x4>
	}
}
 800193e:	4770      	bx	lr
 8001940:	20000150 	.word	0x20000150

08001944 <updateBMatrix>:

void updateBMatrix(
		float timeDelta) { // TODO Verify this

	float dt2 = timeDelta * timeDelta / 2;
 8001944:	ee60 7a00 	vmul.f32	s15, s0, s0
 8001948:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800194c:	ee67 7a87 	vmul.f32	s15, s15, s14

	int i;
	for(i = 0; i < 6; ++i) { // Update specific indices of B matrix with (timeDelta^2)/2
 8001950:	2300      	movs	r3, #0
 8001952:	e007      	b.n	8001964 <updateBMatrix+0x20>
		B_matrix_f32[(7*i)] = dt2;
 8001954:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8001958:	4a0b      	ldr	r2, [pc, #44]	; (8001988 <updateBMatrix+0x44>)
 800195a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800195e:	edc2 7a00 	vstr	s15, [r2]
	for(i = 0; i < 6; ++i) { // Update specific indices of B matrix with (timeDelta^2)/2
 8001962:	3301      	adds	r3, #1
 8001964:	2b05      	cmp	r3, #5
 8001966:	ddf5      	ble.n	8001954 <updateBMatrix+0x10>
	}

	for(i = 0; i < 6; ++i) { // Update specific indices of B matrix with timeDelta
 8001968:	2300      	movs	r3, #0
 800196a:	e009      	b.n	8001980 <updateBMatrix+0x3c>
		B_matrix_f32[36 + (7*i)] = timeDelta;
 800196c:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8001970:	f102 0124 	add.w	r1, r2, #36	; 0x24
 8001974:	4a04      	ldr	r2, [pc, #16]	; (8001988 <updateBMatrix+0x44>)
 8001976:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800197a:	ed82 0a00 	vstr	s0, [r2]
	for(i = 0; i < 6; ++i) { // Update specific indices of B matrix with timeDelta
 800197e:	3301      	adds	r3, #1
 8001980:	2b05      	cmp	r3, #5
 8001982:	ddf3      	ble.n	800196c <updateBMatrix+0x28>
	}
}
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000030 	.word	0x20000030

0800198c <updatePreviousMatrices>:
	Zi->pData[0] = tempRw_f32[0];
	Zi->pData[1] = tempRw_f32[1];
	Zi->pData[2] = tempRw_f32[2];
}

void updatePreviousMatrices(void) { // TODO Verify this
 800198c:	b500      	push	{lr}
	int i;
	int j;
	for (i = 0; i < x_curr.numRows; ++i) {
 800198e:	2300      	movs	r3, #0
 8001990:	e00a      	b.n	80019a8 <updatePreviousMatrices+0x1c>
		x_prev.pData[i] = x_curr.pData[i];
 8001992:	4a18      	ldr	r2, [pc, #96]	; (80019f4 <updatePreviousMatrices+0x68>)
 8001994:	6851      	ldr	r1, [r2, #4]
 8001996:	4a18      	ldr	r2, [pc, #96]	; (80019f8 <updatePreviousMatrices+0x6c>)
 8001998:	6852      	ldr	r2, [r2, #4]
 800199a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800199e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80019a2:	6809      	ldr	r1, [r1, #0]
 80019a4:	6011      	str	r1, [r2, #0]
	for (i = 0; i < x_curr.numRows; ++i) {
 80019a6:	3301      	adds	r3, #1
 80019a8:	4a12      	ldr	r2, [pc, #72]	; (80019f4 <updatePreviousMatrices+0x68>)
 80019aa:	8812      	ldrh	r2, [r2, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	dcf0      	bgt.n	8001992 <updatePreviousMatrices+0x6>
	}

	for (i = 0; i < P_prev.numRows; ++i) {
 80019b0:	f04f 0e00 	mov.w	lr, #0
 80019b4:	e015      	b.n	80019e2 <updatePreviousMatrices+0x56>
		for (j = 0; j < P_prev.numCols; ++j) {
			P_prev.pData[(i*P_prev.numCols) + j] = P_curr.pData[(i*P_curr.numCols) + j];
 80019b6:	4911      	ldr	r1, [pc, #68]	; (80019fc <updatePreviousMatrices+0x70>)
 80019b8:	6848      	ldr	r0, [r1, #4]
 80019ba:	8849      	ldrh	r1, [r1, #2]
 80019bc:	fb0e 3c01 	mla	ip, lr, r1, r3
 80019c0:	490f      	ldr	r1, [pc, #60]	; (8001a00 <updatePreviousMatrices+0x74>)
 80019c2:	6849      	ldr	r1, [r1, #4]
 80019c4:	fb0e 3202 	mla	r2, lr, r2, r3
 80019c8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80019cc:	eb00 018c 	add.w	r1, r0, ip, lsl #2
 80019d0:	6809      	ldr	r1, [r1, #0]
 80019d2:	6011      	str	r1, [r2, #0]
		for (j = 0; j < P_prev.numCols; ++j) {
 80019d4:	3301      	adds	r3, #1
 80019d6:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <updatePreviousMatrices+0x74>)
 80019d8:	8852      	ldrh	r2, [r2, #2]
 80019da:	429a      	cmp	r2, r3
 80019dc:	dceb      	bgt.n	80019b6 <updatePreviousMatrices+0x2a>
	for (i = 0; i < P_prev.numRows; ++i) {
 80019de:	f10e 0e01 	add.w	lr, lr, #1
 80019e2:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <updatePreviousMatrices+0x74>)
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	4573      	cmp	r3, lr
 80019e8:	dd01      	ble.n	80019ee <updatePreviousMatrices+0x62>
		for (j = 0; j < P_prev.numCols; ++j) {
 80019ea:	2300      	movs	r3, #0
 80019ec:	e7f3      	b.n	80019d6 <updatePreviousMatrices+0x4a>
		}
	}

	// TODO Update Q(k-1) somehow
}
 80019ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80019f2:	bf00      	nop
 80019f4:	200016e4 	.word	0x200016e4
 80019f8:	200016ec 	.word	0x200016ec
 80019fc:	20001548 	.word	0x20001548
 8001a00:	20001558 	.word	0x20001558

08001a04 <dot_f32>:

float dot_f32(float* a, float* b) {
	return (a[0]+b[0]) + (a[1]+b[1]) + (a[2]+b[2]);
 8001a04:	edd0 7a00 	vldr	s15, [r0]
 8001a08:	ed91 0a00 	vldr	s0, [r1]
 8001a0c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8001a10:	ed90 0a01 	vldr	s0, [r0, #4]
 8001a14:	ed91 7a01 	vldr	s14, [r1, #4]
 8001a18:	ee30 0a07 	vadd.f32	s0, s0, s14
 8001a1c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8001a20:	ed90 0a02 	vldr	s0, [r0, #8]
 8001a24:	ed91 7a02 	vldr	s14, [r1, #8]
 8001a28:	ee30 0a07 	vadd.f32	s0, s0, s14
}
 8001a2c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8001a30:	4770      	bx	lr

08001a32 <cross_f32>:

void cross_f32(float* a, float* b, float* c) {
	c[0] = a[1] * b[2] - a[2] * b[1];
 8001a32:	edd0 7a01 	vldr	s15, [r0, #4]
 8001a36:	ed91 7a02 	vldr	s14, [r1, #8]
 8001a3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a3e:	ed90 7a02 	vldr	s14, [r0, #8]
 8001a42:	edd1 6a01 	vldr	s13, [r1, #4]
 8001a46:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001a4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a4e:	edc2 7a00 	vstr	s15, [r2]
	c[1] = a[2] * b[0] - a[0] * b[2];
 8001a52:	edd0 7a02 	vldr	s15, [r0, #8]
 8001a56:	ed91 7a00 	vldr	s14, [r1]
 8001a5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a5e:	ed90 7a00 	vldr	s14, [r0]
 8001a62:	edd1 6a02 	vldr	s13, [r1, #8]
 8001a66:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001a6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a6e:	edc2 7a01 	vstr	s15, [r2, #4]
	c[2] = a[0] * b[1] - a[1] * b[0];
 8001a72:	edd0 7a00 	vldr	s15, [r0]
 8001a76:	ed91 7a01 	vldr	s14, [r1, #4]
 8001a7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a7e:	ed90 7a01 	vldr	s14, [r0, #4]
 8001a82:	edd1 6a00 	vldr	s13, [r1]
 8001a86:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001a8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a8e:	edc2 7a02 	vstr	s15, [r2, #8]
}
 8001a92:	4770      	bx	lr

08001a94 <vec_mag_f32>:

float vec_mag_f32(float* vec) {
	float mag = (vec[0]*vec[0]) + (vec[1]*vec[1]) + (vec[2]*vec[2]);
 8001a94:	ed90 0a00 	vldr	s0, [r0]
 8001a98:	ee20 0a00 	vmul.f32	s0, s0, s0
 8001a9c:	edd0 7a01 	vldr	s15, [r0, #4]
 8001aa0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001aa4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001aa8:	edd0 7a02 	vldr	s15, [r0, #8]
 8001aac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ab0:	ee30 0a27 	vadd.f32	s0, s0, s15
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001ab4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001abc:	db03      	blt.n	8001ac6 <vec_mag_f32+0x32>
float vec_mag_f32(float* vec) {
 8001abe:	b508      	push	{r3, lr}
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8001ac0:	f004 fb0a 	bl	80060d8 <sqrtf>
	arm_sqrt_f32(mag, &mag);
	return mag;
}
 8001ac4:	bd08      	pop	{r3, pc}

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8001ac6:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8001acc <vec_mag_f32+0x38>
 8001aca:	4770      	bx	lr
 8001acc:	00000000 	.word	0x00000000

08001ad0 <cross_product>:

void cross_product(
		arm_matrix_instance_f32* a,
		arm_matrix_instance_f32* b,
		arm_matrix_instance_f32* c) { // TODO Verify this
 8001ad0:	b500      	push	{lr}
 8001ad2:	b087      	sub	sp, #28

	// Make copy to avoid using overwritten data in calculations (ex. if a = c)
	float aData[3] = {a->pData[0], a->pData[1], a->pData[2]};
 8001ad4:	6843      	ldr	r3, [r0, #4]
 8001ad6:	6818      	ldr	r0, [r3, #0]
 8001ad8:	9003      	str	r0, [sp, #12]
 8001ada:	6858      	ldr	r0, [r3, #4]
 8001adc:	9004      	str	r0, [sp, #16]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	9305      	str	r3, [sp, #20]
	float bData[3] = {b->pData[0], b->pData[1], b->pData[2]};
 8001ae2:	684b      	ldr	r3, [r1, #4]
 8001ae4:	6819      	ldr	r1, [r3, #0]
 8001ae6:	9100      	str	r1, [sp, #0]
 8001ae8:	6859      	ldr	r1, [r3, #4]
 8001aea:	9101      	str	r1, [sp, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	9302      	str	r3, [sp, #8]

	cross_f32(aData, bData, c->pData);
 8001af0:	6852      	ldr	r2, [r2, #4]
 8001af2:	4669      	mov	r1, sp
 8001af4:	a803      	add	r0, sp, #12
 8001af6:	f7ff ff9c 	bl	8001a32 <cross_f32>
}
 8001afa:	b007      	add	sp, #28
 8001afc:	f85d fb04 	ldr.w	pc, [sp], #4

08001b00 <updateZiVector>:
		arm_matrix_instance_f32* Zi) { // TODO Verify this
 8001b00:	b530      	push	{r4, r5, lr}
 8001b02:	b08b      	sub	sp, #44	; 0x2c
 8001b04:	4604      	mov	r4, r0
	arm_mat_init_f32(&tempRm, 3, 1, tempRm_f32);
 8001b06:	ab07      	add	r3, sp, #28
 8001b08:	2201      	movs	r2, #1
 8001b0a:	2103      	movs	r1, #3
 8001b0c:	a805      	add	r0, sp, #20
 8001b0e:	f002 ff30 	bl	8004972 <arm_mat_init_f32>
	arm_mat_init_f32(&tempRw, 3, 1, tempRw_f32);
 8001b12:	ab02      	add	r3, sp, #8
 8001b14:	2201      	movs	r2, #1
 8001b16:	2103      	movs	r1, #3
 8001b18:	4668      	mov	r0, sp
 8001b1a:	f002 ff2a 	bl	8004972 <arm_mat_init_f32>
	arm_mat_mult_f32(&rotation_b0_n, &w_avg_b0, &tempRw);	// R_b0_n*w_avg_b0 --> (3x3) * (3x1)
 8001b1e:	4d12      	ldr	r5, [pc, #72]	; (8001b68 <updateZiVector+0x68>)
 8001b20:	466a      	mov	r2, sp
 8001b22:	4912      	ldr	r1, [pc, #72]	; (8001b6c <updateZiVector+0x6c>)
 8001b24:	4628      	mov	r0, r5
 8001b26:	f003 f81f 	bl	8004b68 <arm_mat_mult_f32>
	arm_mat_mult_f32(&rotation_b0_n, &m_b0, &tempRm);	// R_b0_n*m_b0 --> (3x3) * (3x1)
 8001b2a:	aa05      	add	r2, sp, #20
 8001b2c:	4910      	ldr	r1, [pc, #64]	; (8001b70 <updateZiVector+0x70>)
 8001b2e:	4628      	mov	r0, r5
 8001b30:	f003 f81a 	bl	8004b68 <arm_mat_mult_f32>
	Zi->pData[3] = tempRm_f32[0];
 8001b34:	6863      	ldr	r3, [r4, #4]
 8001b36:	9a07      	ldr	r2, [sp, #28]
 8001b38:	60da      	str	r2, [r3, #12]
	Zi->pData[4] = tempRm_f32[1];
 8001b3a:	6863      	ldr	r3, [r4, #4]
 8001b3c:	9a08      	ldr	r2, [sp, #32]
 8001b3e:	611a      	str	r2, [r3, #16]
	Zi->pData[5] = tempRm_f32[2];
 8001b40:	6863      	ldr	r3, [r4, #4]
 8001b42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001b44:	615a      	str	r2, [r3, #20]
	cross_product(&tempRw, &tempRm, &tempRw);
 8001b46:	466a      	mov	r2, sp
 8001b48:	a905      	add	r1, sp, #20
 8001b4a:	4668      	mov	r0, sp
 8001b4c:	f7ff ffc0 	bl	8001ad0 <cross_product>
	Zi->pData[0] = tempRw_f32[0];
 8001b50:	6863      	ldr	r3, [r4, #4]
 8001b52:	9a02      	ldr	r2, [sp, #8]
 8001b54:	601a      	str	r2, [r3, #0]
	Zi->pData[1] = tempRw_f32[1];
 8001b56:	6863      	ldr	r3, [r4, #4]
 8001b58:	9a03      	ldr	r2, [sp, #12]
 8001b5a:	605a      	str	r2, [r3, #4]
	Zi->pData[2] = tempRw_f32[2];
 8001b5c:	6863      	ldr	r3, [r4, #4]
 8001b5e:	9a04      	ldr	r2, [sp, #16]
 8001b60:	609a      	str	r2, [r3, #8]
}
 8001b62:	b00b      	add	sp, #44	; 0x2c
 8001b64:	bd30      	pop	{r4, r5, pc}
 8001b66:	bf00      	nop
 8001b68:	2000161c 	.word	0x2000161c
 8001b6c:	20001668 	.word	0x20001668
 8001b70:	200015f4 	.word	0x200015f4

08001b74 <initRingBuffers>:

void initRingBuffers(void) {
	int i;
	for(i = 0; i < RING_SIZE; ++i) {
 8001b74:	2300      	movs	r3, #0
 8001b76:	e025      	b.n	8001bc4 <initRingBuffers+0x50>
		w_avg_x_ring[i] = 0;
 8001b78:	4914      	ldr	r1, [pc, #80]	; (8001bcc <initRingBuffers+0x58>)
 8001b7a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001b7e:	2200      	movs	r2, #0
 8001b80:	600a      	str	r2, [r1, #0]
		w_avg_y_ring[i] = 0;
 8001b82:	4913      	ldr	r1, [pc, #76]	; (8001bd0 <initRingBuffers+0x5c>)
 8001b84:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001b88:	600a      	str	r2, [r1, #0]
		w_avg_z_ring[i] = 0;
 8001b8a:	4912      	ldr	r1, [pc, #72]	; (8001bd4 <initRingBuffers+0x60>)
 8001b8c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001b90:	600a      	str	r2, [r1, #0]
		xl0_avg_x_ring[i] = 0;
 8001b92:	4911      	ldr	r1, [pc, #68]	; (8001bd8 <initRingBuffers+0x64>)
 8001b94:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001b98:	600a      	str	r2, [r1, #0]
		xl0_avg_y_ring[i] = 0;
 8001b9a:	4910      	ldr	r1, [pc, #64]	; (8001bdc <initRingBuffers+0x68>)
 8001b9c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001ba0:	600a      	str	r2, [r1, #0]
		xl0_avg_z_ring[i] = 0;
 8001ba2:	490f      	ldr	r1, [pc, #60]	; (8001be0 <initRingBuffers+0x6c>)
 8001ba4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001ba8:	600a      	str	r2, [r1, #0]
		xl1_avg_x_ring[i] = 0;
 8001baa:	490e      	ldr	r1, [pc, #56]	; (8001be4 <initRingBuffers+0x70>)
 8001bac:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001bb0:	600a      	str	r2, [r1, #0]
		xl1_avg_y_ring[i] = 0;
 8001bb2:	490d      	ldr	r1, [pc, #52]	; (8001be8 <initRingBuffers+0x74>)
 8001bb4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001bb8:	600a      	str	r2, [r1, #0]
		xl1_avg_z_ring[i] = 0;
 8001bba:	490c      	ldr	r1, [pc, #48]	; (8001bec <initRingBuffers+0x78>)
 8001bbc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001bc0:	600a      	str	r2, [r1, #0]
	for(i = 0; i < RING_SIZE; ++i) {
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	2b07      	cmp	r3, #7
 8001bc6:	ddd7      	ble.n	8001b78 <initRingBuffers+0x4>
	}
}
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	20001680 	.word	0x20001680
 8001bd0:	200016a0 	.word	0x200016a0
 8001bd4:	200016c0 	.word	0x200016c0
 8001bd8:	200016f4 	.word	0x200016f4
 8001bdc:	20001714 	.word	0x20001714
 8001be0:	20001734 	.word	0x20001734
 8001be4:	20001754 	.word	0x20001754
 8001be8:	20001774 	.word	0x20001774
 8001bec:	20001794 	.word	0x20001794

08001bf0 <initQuaternion>:

void initQuaternion(SensorData* IMU0_data, SensorData* IMU1_data) {
 8001bf0:	b5d0      	push	{r4, r6, r7, lr}
 8001bf2:	ed2d 8b02 	vpush	{d8}
 8001bf6:	b092      	sub	sp, #72	; 0x48
	float avg_XL[3];
	avg_XL[0] = (IMU0_data->XL_X + IMU1_data->XL_X) / 2;
 8001bf8:	ed90 7a00 	vldr	s14, [r0]
 8001bfc:	edd1 7a00 	vldr	s15, [r1]
 8001c00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c04:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001c08:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001c0c:	ed8d 7a0f 	vstr	s14, [sp, #60]	; 0x3c
	avg_XL[1] = (IMU0_data->XL_Y + IMU1_data->XL_Y) / 2;
 8001c10:	ed90 7a01 	vldr	s14, [r0, #4]
 8001c14:	edd1 7a01 	vldr	s15, [r1, #4]
 8001c18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c1c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001c20:	ed8d 7a10 	vstr	s14, [sp, #64]	; 0x40
	avg_XL[2] = (IMU0_data->XL_Z + IMU1_data->XL_Z) / 2;
 8001c24:	edd0 7a02 	vldr	s15, [r0, #8]
 8001c28:	ed91 7a02 	vldr	s14, [r1, #8]
 8001c2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c34:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44

	float mag_avg_XL = vec_mag_f32(avg_XL);
 8001c38:	a80f      	add	r0, sp, #60	; 0x3c
 8001c3a:	f7ff ff2b 	bl	8001a94 <vec_mag_f32>

	// Normalize average acceleration vector
	avg_XL[0] /= mag_avg_XL;
 8001c3e:	ed9d 7a0f 	vldr	s14, [sp, #60]	; 0x3c
 8001c42:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8001c46:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
	avg_XL[1] /= mag_avg_XL;
 8001c4a:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
 8001c4e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8001c52:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
	avg_XL[2] /= mag_avg_XL;
 8001c56:	ed9d 7a11 	vldr	s14, [sp, #68]	; 0x44
 8001c5a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8001c5e:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44

	float norm_g[3] = {0,0,1}; // Normalized vector for g_nav
 8001c62:	2300      	movs	r3, #0
 8001c64:	930c      	str	r3, [sp, #48]	; 0x30
 8001c66:	930d      	str	r3, [sp, #52]	; 0x34
 8001c68:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001c6c:	930e      	str	r3, [sp, #56]	; 0x38

	// q = [1+dot(r, r') cross(r, r') --> From conjugation: r' = q x [0 r] x q*

	float dot_prod = dot_f32(avg_XL, norm_g);
 8001c6e:	a90c      	add	r1, sp, #48	; 0x30
 8001c70:	a80f      	add	r0, sp, #60	; 0x3c
 8001c72:	f7ff fec7 	bl	8001a04 <dot_f32>
 8001c76:	ee10 4a10 	vmov	r4, s0
	float cross_prod[3];
	cross_f32(avg_XL, norm_g, cross_prod);
 8001c7a:	aa09      	add	r2, sp, #36	; 0x24
 8001c7c:	a90c      	add	r1, sp, #48	; 0x30
 8001c7e:	a80f      	add	r0, sp, #60	; 0x3c
 8001c80:	f7ff fed7 	bl	8001a32 <cross_f32>

	if (dot_prod > 0.999999) {
 8001c84:	4620      	mov	r0, r4
 8001c86:	f7fe fc57 	bl	8000538 <__aeabi_f2d>
 8001c8a:	4606      	mov	r6, r0
 8001c8c:	460f      	mov	r7, r1
 8001c8e:	a339      	add	r3, pc, #228	; (adr r3, 8001d74 <initQuaternion+0x184>)
 8001c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c94:	f7fe ff38 	bl	8000b08 <__aeabi_dcmpgt>
 8001c98:	b9f0      	cbnz	r0, 8001cd8 <initQuaternion+0xe8>
		q_f32[2] = 0;
		q_f32[3] = 0;

		return;

	} else if (dot_prod < -0.999999) {
 8001c9a:	a338      	add	r3, pc, #224	; (adr r3, 8001d7c <initQuaternion+0x18c>)
 8001c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca0:	4630      	mov	r0, r6
 8001ca2:	4639      	mov	r1, r7
 8001ca4:	f7fe ff12 	bl	8000acc <__aeabi_dcmplt>
 8001ca8:	b9f8      	cbnz	r0, 8001cea <initQuaternion+0xfa>
        q_f32[2] = tempVec[1] / tempVecMag;
        q_f32[3] = tempVec[2] / tempVecMag;
        return;
    }

	q_f32[0] = 1 + dot_prod;
 8001caa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001cae:	ee07 4a90 	vmov	s15, r4
 8001cb2:	ee37 0a80 	vadd.f32	s0, s15, s0
 8001cb6:	482e      	ldr	r0, [pc, #184]	; (8001d70 <initQuaternion+0x180>)
 8001cb8:	ed80 0a00 	vstr	s0, [r0]
	q_f32[1] = cross_prod[0];
 8001cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001cbe:	6043      	str	r3, [r0, #4]
	q_f32[2] = cross_prod[1];
 8001cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001cc2:	6083      	str	r3, [r0, #8]
	q_f32[3] = cross_prod[2];
 8001cc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001cc6:	60c3      	str	r3, [r0, #12]

	arm_quaternion_normalize_f32(q_f32, q_f32, 1); // normalize initial quaternion
 8001cc8:	2201      	movs	r2, #1
 8001cca:	4601      	mov	r1, r0
 8001ccc:	f003 f83b 	bl	8004d46 <arm_quaternion_normalize_f32>

}
 8001cd0:	b012      	add	sp, #72	; 0x48
 8001cd2:	ecbd 8b02 	vpop	{d8}
 8001cd6:	bdd0      	pop	{r4, r6, r7, pc}
		q_f32[0] = 1;
 8001cd8:	4b25      	ldr	r3, [pc, #148]	; (8001d70 <initQuaternion+0x180>)
 8001cda:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001cde:	601a      	str	r2, [r3, #0]
		q_f32[1] = 0;
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	605a      	str	r2, [r3, #4]
		q_f32[2] = 0;
 8001ce4:	609a      	str	r2, [r3, #8]
		q_f32[3] = 0;
 8001ce6:	60da      	str	r2, [r3, #12]
		return;
 8001ce8:	e7f2      	b.n	8001cd0 <initQuaternion+0xe0>
		float xUnit[3] = {1,0,0};
 8001cea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001cee:	9200      	str	r2, [sp, #0]
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	9301      	str	r3, [sp, #4]
 8001cf4:	9302      	str	r3, [sp, #8]
		float yUnit[3] = {0,1,0};
 8001cf6:	9303      	str	r3, [sp, #12]
 8001cf8:	9204      	str	r2, [sp, #16]
 8001cfa:	9305      	str	r3, [sp, #20]
        cross_f32(xUnit, avg_XL, tempVec);
 8001cfc:	aa06      	add	r2, sp, #24
 8001cfe:	a90f      	add	r1, sp, #60	; 0x3c
 8001d00:	4668      	mov	r0, sp
 8001d02:	f7ff fe96 	bl	8001a32 <cross_f32>
        float tempVecMag = vec_mag_f32(tempVec);
 8001d06:	a806      	add	r0, sp, #24
 8001d08:	f7ff fec4 	bl	8001a94 <vec_mag_f32>
 8001d0c:	eeb0 8a40 	vmov.f32	s16, s0
        if (tempVecMag < 0.000001) {
 8001d10:	ee10 0a10 	vmov	r0, s0
 8001d14:	f7fe fc10 	bl	8000538 <__aeabi_f2d>
 8001d18:	a313      	add	r3, pc, #76	; (adr r3, 8001d68 <initQuaternion+0x178>)
 8001d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1e:	f7fe fed5 	bl	8000acc <__aeabi_dcmplt>
 8001d22:	b9a8      	cbnz	r0, 8001d50 <initQuaternion+0x160>
        q_f32[0] = 0;
 8001d24:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <initQuaternion+0x180>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
        q_f32[1] = tempVec[0] / tempVecMag;
 8001d2a:	ed9d 7a06 	vldr	s14, [sp, #24]
 8001d2e:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8001d32:	edc3 7a01 	vstr	s15, [r3, #4]
        q_f32[2] = tempVec[1] / tempVecMag;
 8001d36:	ed9d 7a07 	vldr	s14, [sp, #28]
 8001d3a:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8001d3e:	edc3 7a02 	vstr	s15, [r3, #8]
        q_f32[3] = tempVec[2] / tempVecMag;
 8001d42:	ed9d 7a08 	vldr	s14, [sp, #32]
 8001d46:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8001d4a:	edc3 7a03 	vstr	s15, [r3, #12]
        return;
 8001d4e:	e7bf      	b.n	8001cd0 <initQuaternion+0xe0>
            cross_f32(yUnit, avg_XL, tempVec);
 8001d50:	aa06      	add	r2, sp, #24
 8001d52:	a90f      	add	r1, sp, #60	; 0x3c
 8001d54:	a803      	add	r0, sp, #12
 8001d56:	f7ff fe6c 	bl	8001a32 <cross_f32>
			tempVecMag = vec_mag_f32(tempVec);
 8001d5a:	a806      	add	r0, sp, #24
 8001d5c:	f7ff fe9a 	bl	8001a94 <vec_mag_f32>
 8001d60:	eeb0 8a40 	vmov.f32	s16, s0
 8001d64:	e7de      	b.n	8001d24 <initQuaternion+0x134>
 8001d66:	bf00      	nop
 8001d68:	a0b5ed8d 	.word	0xa0b5ed8d
 8001d6c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001d70:	20000ed4 	.word	0x20000ed4
 8001d74:	e7210be9 	.word	0xe7210be9
 8001d78:	3feffffd 	.word	0x3feffffd
 8001d7c:	e7210be9 	.word	0xe7210be9
 8001d80:	bfeffffd 	.word	0xbfeffffd

08001d84 <getNextGyroReading>:

void getNextGyroReading(SensorData* IMU0_data, SensorData* IMU1_data, float* gyroOut) {
 8001d84:	b430      	push	{r4, r5}
	w_avg_x_ring[w_oldest] = (IMU0_data->G_X + IMU1_data->G_X) / 2;
 8001d86:	ed90 7a03 	vldr	s14, [r0, #12]
 8001d8a:	edd1 7a03 	vldr	s15, [r1, #12]
 8001d8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d92:	4d37      	ldr	r5, [pc, #220]	; (8001e70 <getNextGyroReading+0xec>)
 8001d94:	782b      	ldrb	r3, [r5, #0]
 8001d96:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001d9a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001d9e:	4c35      	ldr	r4, [pc, #212]	; (8001e74 <getNextGyroReading+0xf0>)
 8001da0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8001da4:	ed84 7a00 	vstr	s14, [r4]
	w_avg_y_ring[w_oldest] = (IMU0_data->G_Y + IMU1_data->G_Y) / 2;
 8001da8:	ed90 7a04 	vldr	s14, [r0, #16]
 8001dac:	edd1 7a04 	vldr	s15, [r1, #16]
 8001db0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001db4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001db8:	4c2f      	ldr	r4, [pc, #188]	; (8001e78 <getNextGyroReading+0xf4>)
 8001dba:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 8001dbe:	ed8c 7a00 	vstr	s14, [ip]
	w_avg_z_ring[w_oldest] = (IMU0_data->G_Z + IMU1_data->G_Z) / 2;
 8001dc2:	edd0 7a05 	vldr	s15, [r0, #20]
 8001dc6:	ed91 7a05 	vldr	s14, [r1, #20]
 8001dca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001dd2:	492a      	ldr	r1, [pc, #168]	; (8001e7c <getNextGyroReading+0xf8>)
 8001dd4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001dd8:	edc1 7a00 	vstr	s15, [r1]

	w_oldest = (w_oldest + 1) % RING_SIZE;
 8001ddc:	3301      	adds	r3, #1
 8001dde:	4259      	negs	r1, r3
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	f001 0107 	and.w	r1, r1, #7
 8001de8:	bf58      	it	pl
 8001dea:	424b      	negpl	r3, r1
 8001dec:	702b      	strb	r3, [r5, #0]

	gyroOut[0] = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	6013      	str	r3, [r2, #0]
	gyroOut[1] = 0;
 8001df2:	6053      	str	r3, [r2, #4]
	gyroOut[2] = 0;
 8001df4:	6093      	str	r3, [r2, #8]

	int i;
	for(i = 0; i < RING_SIZE; ++i) {
 8001df6:	2300      	movs	r3, #0
 8001df8:	e021      	b.n	8001e3e <getNextGyroReading+0xba>
		gyroOut[0] += w_avg_x_ring[i];
 8001dfa:	491e      	ldr	r1, [pc, #120]	; (8001e74 <getNextGyroReading+0xf0>)
 8001dfc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001e00:	ed91 7a00 	vldr	s14, [r1]
 8001e04:	edd2 7a00 	vldr	s15, [r2]
 8001e08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e0c:	edc2 7a00 	vstr	s15, [r2]
		gyroOut[1] += w_avg_y_ring[i];
 8001e10:	4919      	ldr	r1, [pc, #100]	; (8001e78 <getNextGyroReading+0xf4>)
 8001e12:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001e16:	ed91 7a00 	vldr	s14, [r1]
 8001e1a:	edd2 7a01 	vldr	s15, [r2, #4]
 8001e1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e22:	edc2 7a01 	vstr	s15, [r2, #4]
		gyroOut[2] += w_avg_z_ring[i];
 8001e26:	4915      	ldr	r1, [pc, #84]	; (8001e7c <getNextGyroReading+0xf8>)
 8001e28:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001e2c:	ed91 7a00 	vldr	s14, [r1]
 8001e30:	edd2 7a02 	vldr	s15, [r2, #8]
 8001e34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e38:	edc2 7a02 	vstr	s15, [r2, #8]
	for(i = 0; i < RING_SIZE; ++i) {
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	2b07      	cmp	r3, #7
 8001e40:	dddb      	ble.n	8001dfa <getNextGyroReading+0x76>
	}

	gyroOut[0] /= RING_SIZE;
 8001e42:	edd2 7a00 	vldr	s15, [r2]
 8001e46:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8001e4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e4e:	edc2 7a00 	vstr	s15, [r2]
	gyroOut[1] /= RING_SIZE;
 8001e52:	edd2 7a01 	vldr	s15, [r2, #4]
 8001e56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e5a:	edc2 7a01 	vstr	s15, [r2, #4]
	gyroOut[2] /= RING_SIZE;
 8001e5e:	edd2 7a02 	vldr	s15, [r2, #8]
 8001e62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e66:	edc2 7a02 	vstr	s15, [r2, #8]
}
 8001e6a:	bc30      	pop	{r4, r5}
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	200016e0 	.word	0x200016e0
 8001e74:	20001680 	.word	0x20001680
 8001e78:	200016a0 	.word	0x200016a0
 8001e7c:	200016c0 	.word	0x200016c0

08001e80 <calculateAvgAngularRate>:
		SensorData* IMU1_data) { // TODO Verify this
 8001e80:	b510      	push	{r4, lr}
	getNextGyroReading(IMU0_data, IMU1_data, w_avg_b0_f32);
 8001e82:	4c05      	ldr	r4, [pc, #20]	; (8001e98 <calculateAvgAngularRate+0x18>)
 8001e84:	4622      	mov	r2, r4
 8001e86:	f7ff ff7d 	bl	8001d84 <getNextGyroReading>
	w_avg_b0_mag = vec_mag_f32(w_avg_b0_f32);
 8001e8a:	4620      	mov	r0, r4
 8001e8c:	f7ff fe02 	bl	8001a94 <vec_mag_f32>
 8001e90:	4b02      	ldr	r3, [pc, #8]	; (8001e9c <calculateAvgAngularRate+0x1c>)
 8001e92:	ed83 0a00 	vstr	s0, [r3]
}
 8001e96:	bd10      	pop	{r4, pc}
 8001e98:	20001670 	.word	0x20001670
 8001e9c:	2000167c 	.word	0x2000167c

08001ea0 <getNextXLReading>:

void getNextXLReading(SensorData* IMU0_data, SensorData* IMU1_data, float* xl0Out, float* xl1Out) {
 8001ea0:	b530      	push	{r4, r5, lr}
	xl0_avg_x_ring[xl_oldest] = IMU0_data->XL_X;
 8001ea2:	4c53      	ldr	r4, [pc, #332]	; (8001ff0 <getNextXLReading+0x150>)
 8001ea4:	f894 c000 	ldrb.w	ip, [r4]
 8001ea8:	f8d0 e000 	ldr.w	lr, [r0]
 8001eac:	4d51      	ldr	r5, [pc, #324]	; (8001ff4 <getNextXLReading+0x154>)
 8001eae:	eb05 058c 	add.w	r5, r5, ip, lsl #2
 8001eb2:	f8c5 e000 	str.w	lr, [r5]
	xl0_avg_y_ring[xl_oldest] = IMU0_data->XL_Y;
 8001eb6:	edd0 7a01 	vldr	s15, [r0, #4]
 8001eba:	4d4f      	ldr	r5, [pc, #316]	; (8001ff8 <getNextXLReading+0x158>)
 8001ebc:	eb05 0e8c 	add.w	lr, r5, ip, lsl #2
 8001ec0:	edce 7a00 	vstr	s15, [lr]
	xl0_avg_z_ring[xl_oldest] = IMU0_data->XL_Z;
 8001ec4:	6885      	ldr	r5, [r0, #8]
 8001ec6:	484d      	ldr	r0, [pc, #308]	; (8001ffc <getNextXLReading+0x15c>)
 8001ec8:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8001ecc:	6005      	str	r5, [r0, #0]
	xl1_avg_x_ring[xl_oldest] = IMU1_data->XL_X;
 8001ece:	680d      	ldr	r5, [r1, #0]
 8001ed0:	484b      	ldr	r0, [pc, #300]	; (8002000 <getNextXLReading+0x160>)
 8001ed2:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8001ed6:	6005      	str	r5, [r0, #0]
	xl1_avg_y_ring[xl_oldest] = IMU1_data->XL_Y;
 8001ed8:	684d      	ldr	r5, [r1, #4]
 8001eda:	484a      	ldr	r0, [pc, #296]	; (8002004 <getNextXLReading+0x164>)
 8001edc:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8001ee0:	6005      	str	r5, [r0, #0]
	xl1_avg_z_ring[xl_oldest] = IMU1_data->XL_Z;
 8001ee2:	6888      	ldr	r0, [r1, #8]
 8001ee4:	4948      	ldr	r1, [pc, #288]	; (8002008 <getNextXLReading+0x168>)
 8001ee6:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 8001eea:	6008      	str	r0, [r1, #0]

	xl_oldest = (xl_oldest + 1) % RING_SIZE;
 8001eec:	f10c 0c01 	add.w	ip, ip, #1
 8001ef0:	f1dc 0100 	rsbs	r1, ip, #0
 8001ef4:	f00c 0c07 	and.w	ip, ip, #7
 8001ef8:	f001 0107 	and.w	r1, r1, #7
 8001efc:	bf58      	it	pl
 8001efe:	f1c1 0c00 	rsbpl	ip, r1, #0
 8001f02:	f884 c000 	strb.w	ip, [r4]

	xl0Out[0] = 0;
 8001f06:	2100      	movs	r1, #0
 8001f08:	6011      	str	r1, [r2, #0]
	xl0Out[1] = 0;
 8001f0a:	6051      	str	r1, [r2, #4]
	xl0Out[2] = 0;
 8001f0c:	6091      	str	r1, [r2, #8]
	xl1Out[0] = 0;
 8001f0e:	6019      	str	r1, [r3, #0]
	xl1Out[1] = 0;
 8001f10:	6059      	str	r1, [r3, #4]
	xl1Out[2] = 0;
 8001f12:	6099      	str	r1, [r3, #8]

	int i;
	for(i = 0; i < RING_SIZE; ++i) {
 8001f14:	2100      	movs	r1, #0
 8001f16:	e042      	b.n	8001f9e <getNextXLReading+0xfe>
		xl0Out[0] += xl0_avg_x_ring[i];
 8001f18:	4836      	ldr	r0, [pc, #216]	; (8001ff4 <getNextXLReading+0x154>)
 8001f1a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8001f1e:	ed90 7a00 	vldr	s14, [r0]
 8001f22:	edd2 7a00 	vldr	s15, [r2]
 8001f26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f2a:	edc2 7a00 	vstr	s15, [r2]
		xl0Out[1] += xl0_avg_y_ring[i];
 8001f2e:	4832      	ldr	r0, [pc, #200]	; (8001ff8 <getNextXLReading+0x158>)
 8001f30:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8001f34:	ed90 7a00 	vldr	s14, [r0]
 8001f38:	edd2 7a01 	vldr	s15, [r2, #4]
 8001f3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f40:	edc2 7a01 	vstr	s15, [r2, #4]
		xl0Out[2] += xl0_avg_z_ring[i];
 8001f44:	482d      	ldr	r0, [pc, #180]	; (8001ffc <getNextXLReading+0x15c>)
 8001f46:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8001f4a:	ed90 7a00 	vldr	s14, [r0]
 8001f4e:	edd2 7a02 	vldr	s15, [r2, #8]
 8001f52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f56:	edc2 7a02 	vstr	s15, [r2, #8]
		xl1Out[0] += xl1_avg_x_ring[i];
 8001f5a:	4829      	ldr	r0, [pc, #164]	; (8002000 <getNextXLReading+0x160>)
 8001f5c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8001f60:	ed90 7a00 	vldr	s14, [r0]
 8001f64:	edd3 7a00 	vldr	s15, [r3]
 8001f68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f6c:	edc3 7a00 	vstr	s15, [r3]
		xl1Out[1] += xl1_avg_y_ring[i];
 8001f70:	4824      	ldr	r0, [pc, #144]	; (8002004 <getNextXLReading+0x164>)
 8001f72:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8001f76:	ed90 7a00 	vldr	s14, [r0]
 8001f7a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f82:	edc3 7a01 	vstr	s15, [r3, #4]
		xl1Out[2] += xl1_avg_z_ring[i];
 8001f86:	4820      	ldr	r0, [pc, #128]	; (8002008 <getNextXLReading+0x168>)
 8001f88:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8001f8c:	ed90 7a00 	vldr	s14, [r0]
 8001f90:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f98:	edc3 7a02 	vstr	s15, [r3, #8]
	for(i = 0; i < RING_SIZE; ++i) {
 8001f9c:	3101      	adds	r1, #1
 8001f9e:	2907      	cmp	r1, #7
 8001fa0:	ddba      	ble.n	8001f18 <getNextXLReading+0x78>
	}

	xl0Out[0] /= RING_SIZE;
 8001fa2:	ed92 7a00 	vldr	s14, [r2]
 8001fa6:	eef4 7a00 	vmov.f32	s15, #64	; 0x3e000000  0.125
 8001faa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fae:	ed82 7a00 	vstr	s14, [r2]
	xl0Out[1] /= RING_SIZE;
 8001fb2:	ed92 7a01 	vldr	s14, [r2, #4]
 8001fb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fba:	ed82 7a01 	vstr	s14, [r2, #4]
	xl0Out[2] /= RING_SIZE;
 8001fbe:	ed92 7a02 	vldr	s14, [r2, #8]
 8001fc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fc6:	ed82 7a02 	vstr	s14, [r2, #8]
	xl1Out[0] /= RING_SIZE;
 8001fca:	ed93 7a00 	vldr	s14, [r3]
 8001fce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fd2:	ed83 7a00 	vstr	s14, [r3]
	xl1Out[1] /= RING_SIZE;
 8001fd6:	ed93 7a01 	vldr	s14, [r3, #4]
 8001fda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fde:	ed83 7a01 	vstr	s14, [r3, #4]
	xl1Out[2] /= RING_SIZE;
 8001fe2:	ed93 7a02 	vldr	s14, [r3, #8]
 8001fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fea:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001fee:	bd30      	pop	{r4, r5, pc}
 8001ff0:	200017cc 	.word	0x200017cc
 8001ff4:	200016f4 	.word	0x200016f4
 8001ff8:	20001714 	.word	0x20001714
 8001ffc:	20001734 	.word	0x20001734
 8002000:	20001754 	.word	0x20001754
 8002004:	20001774 	.word	0x20001774
 8002008:	20001794 	.word	0x20001794

0800200c <updateUVector>:
		SensorData* IMU1_data) { // TODO Verify this
 800200c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800200e:	b095      	sub	sp, #84	; 0x54
 8002010:	4604      	mov	r4, r0
 8002012:	460d      	mov	r5, r1
	float temp0_f32[3] = {IMU0_data->XL_X, IMU0_data->XL_Y, IMU0_data->XL_Z}; // Init with IMU0 acceleration
 8002014:	6803      	ldr	r3, [r0, #0]
 8002016:	9311      	str	r3, [sp, #68]	; 0x44
 8002018:	6843      	ldr	r3, [r0, #4]
 800201a:	9312      	str	r3, [sp, #72]	; 0x48
 800201c:	6883      	ldr	r3, [r0, #8]
 800201e:	9313      	str	r3, [sp, #76]	; 0x4c
	arm_mat_init_f32(&temp0, 3, 1, temp0_f32); // temp for IMU0 vector
 8002020:	ab11      	add	r3, sp, #68	; 0x44
 8002022:	2201      	movs	r2, #1
 8002024:	2103      	movs	r1, #3
 8002026:	a80f      	add	r0, sp, #60	; 0x3c
 8002028:	f002 fca3 	bl	8004972 <arm_mat_init_f32>
	float temp1_f32[3] = {IMU1_data->XL_X, IMU1_data->XL_Y, IMU1_data->XL_Z}; // Init with IMU1 acceleration
 800202c:	682b      	ldr	r3, [r5, #0]
 800202e:	930c      	str	r3, [sp, #48]	; 0x30
 8002030:	686b      	ldr	r3, [r5, #4]
 8002032:	930d      	str	r3, [sp, #52]	; 0x34
 8002034:	68ab      	ldr	r3, [r5, #8]
 8002036:	930e      	str	r3, [sp, #56]	; 0x38
	arm_mat_init_f32(&temp1, 3, 1, temp1_f32); // temp for IMU1 vector
 8002038:	ab0c      	add	r3, sp, #48	; 0x30
 800203a:	2201      	movs	r2, #1
 800203c:	2103      	movs	r1, #3
 800203e:	a80a      	add	r0, sp, #40	; 0x28
 8002040:	f002 fc97 	bl	8004972 <arm_mat_init_f32>
	float temp2_f32[3] = {0,0,0};
 8002044:	2600      	movs	r6, #0
 8002046:	9607      	str	r6, [sp, #28]
 8002048:	9608      	str	r6, [sp, #32]
 800204a:	9609      	str	r6, [sp, #36]	; 0x24
	arm_mat_init_f32(&temp2, 3, 1, temp2_f32); // temp for rotated IMU0 vector
 800204c:	ab07      	add	r3, sp, #28
 800204e:	2201      	movs	r2, #1
 8002050:	2103      	movs	r1, #3
 8002052:	a805      	add	r0, sp, #20
 8002054:	f002 fc8d 	bl	8004972 <arm_mat_init_f32>
	float temp3_f32[3] = {0,0,0};
 8002058:	9602      	str	r6, [sp, #8]
 800205a:	9603      	str	r6, [sp, #12]
 800205c:	9604      	str	r6, [sp, #16]
	arm_mat_init_f32(&temp3, 3, 1, temp3_f32); // temp for rotated IMU1 vector
 800205e:	ab02      	add	r3, sp, #8
 8002060:	2201      	movs	r2, #1
 8002062:	2103      	movs	r1, #3
 8002064:	4668      	mov	r0, sp
 8002066:	f002 fc84 	bl	8004972 <arm_mat_init_f32>
	arm_mat_mult_f32(&rotation_b0_n, &temp0, &temp2);	// R_b0_n*a0_b0 --> (3x3) * (3x1)
 800206a:	4e16      	ldr	r6, [pc, #88]	; (80020c4 <updateUVector+0xb8>)
 800206c:	aa05      	add	r2, sp, #20
 800206e:	a90f      	add	r1, sp, #60	; 0x3c
 8002070:	4630      	mov	r0, r6
 8002072:	f002 fd79 	bl	8004b68 <arm_mat_mult_f32>
	arm_mat_mult_f32(&rotation_b0_n, &temp1, &temp3);	// R_b0_n*a1_b0 --> (3x3) * (3x1)
 8002076:	466a      	mov	r2, sp
 8002078:	a90a      	add	r1, sp, #40	; 0x28
 800207a:	4630      	mov	r0, r6
 800207c:	f002 fd74 	bl	8004b68 <arm_mat_mult_f32>
	arm_mat_sub_f32(&temp2, &g_n, &temp0);
 8002080:	4e11      	ldr	r6, [pc, #68]	; (80020c8 <updateUVector+0xbc>)
 8002082:	aa0f      	add	r2, sp, #60	; 0x3c
 8002084:	4631      	mov	r1, r6
 8002086:	a805      	add	r0, sp, #20
 8002088:	f002 fda8 	bl	8004bdc <arm_mat_sub_f32>
	arm_mat_sub_f32(&temp3, &g_n, &temp1);
 800208c:	aa0a      	add	r2, sp, #40	; 0x28
 800208e:	4631      	mov	r1, r6
 8002090:	4668      	mov	r0, sp
 8002092:	f002 fda3 	bl	8004bdc <arm_mat_sub_f32>
	getNextXLReading(IMU0_data, IMU1_data, xl_b0_f32, xl_b1_f32);
 8002096:	4e0d      	ldr	r6, [pc, #52]	; (80020cc <updateUVector+0xc0>)
 8002098:	4f0d      	ldr	r7, [pc, #52]	; (80020d0 <updateUVector+0xc4>)
 800209a:	4633      	mov	r3, r6
 800209c:	463a      	mov	r2, r7
 800209e:	4629      	mov	r1, r5
 80020a0:	4620      	mov	r0, r4
 80020a2:	f7ff fefd 	bl	8001ea0 <getNextXLReading>
	u_curr_f32[0] = xl_b0_f32[0];
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <updateUVector+0xc8>)
 80020aa:	601a      	str	r2, [r3, #0]
	u_curr_f32[1] = xl_b0_f32[1];
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	605a      	str	r2, [r3, #4]
	u_curr_f32[2] = xl_b0_f32[2];
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	609a      	str	r2, [r3, #8]
	u_curr_f32[3] = xl_b1_f32[0];
 80020b4:	6832      	ldr	r2, [r6, #0]
 80020b6:	60da      	str	r2, [r3, #12]
	u_curr_f32[4] = xl_b1_f32[1];
 80020b8:	6872      	ldr	r2, [r6, #4]
 80020ba:	611a      	str	r2, [r3, #16]
	u_curr_f32[5] = xl_b1_f32[2];
 80020bc:	68b2      	ldr	r2, [r6, #8]
 80020be:	615a      	str	r2, [r3, #20]
}
 80020c0:	b015      	add	sp, #84	; 0x54
 80020c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020c4:	2000161c 	.word	0x2000161c
 80020c8:	200015e0 	.word	0x200015e0
 80020cc:	200017c0 	.word	0x200017c0
 80020d0:	200017b4 	.word	0x200017b4
 80020d4:	20001650 	.word	0x20001650

080020d8 <clearZUPT>:
		tempNode = (ZUPTNode*)tempNode->next;
	}
}

void clearZUPT(void) {
	ZUPTNode* tempNode = ZUPTHead;
 80020d8:	4b09      	ldr	r3, [pc, #36]	; (8002100 <clearZUPT+0x28>)
 80020da:	6818      	ldr	r0, [r3, #0]

	curr_phase = STANCE;
 80020dc:	4b09      	ldr	r3, [pc, #36]	; (8002104 <clearZUPT+0x2c>)
 80020de:	2201      	movs	r2, #1
 80020e0:	701a      	strb	r2, [r3, #0]
	phase_counter = 0;
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <clearZUPT+0x30>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	701a      	strb	r2, [r3, #0]

	if (tempNode == NULL) {
 80020e8:	b108      	cbz	r0, 80020ee <clearZUPT+0x16>
void clearZUPT(void) {
 80020ea:	b510      	push	{r4, lr}
 80020ec:	e003      	b.n	80020f6 <clearZUPT+0x1e>
 80020ee:	4770      	bx	lr
	}

	while (tempNode->next != NULL) {
		ZUPTNode* tempNode2 = tempNode->next;

		free(tempNode);
 80020f0:	f002 ff64 	bl	8004fbc <free>

		tempNode = tempNode2;
 80020f4:	4620      	mov	r0, r4
	while (tempNode->next != NULL) {
 80020f6:	6804      	ldr	r4, [r0, #0]
 80020f8:	2c00      	cmp	r4, #0
 80020fa:	d1f9      	bne.n	80020f0 <clearZUPT+0x18>
	}
}
 80020fc:	bd10      	pop	{r4, pc}
 80020fe:	bf00      	nop
 8002100:	20001578 	.word	0x20001578
 8002104:	20000ed0 	.word	0x20000ed0
 8002108:	20001608 	.word	0x20001608

0800210c <createZUPTNode>:
	}

	return curr_phase;
}

ZUPTNode* createZUPTNode(float w_mag) {
 800210c:	b508      	push	{r3, lr}
 800210e:	ed2d 8b02 	vpush	{d8}
 8002112:	eeb0 8a40 	vmov.f32	s16, s0
	ZUPTNode* node = (ZUPTNode*)malloc(sizeof(ZUPTNode));
 8002116:	2008      	movs	r0, #8
 8002118:	f002 ff48 	bl	8004fac <malloc>

	node->next = NULL;
 800211c:	2200      	movs	r2, #0
 800211e:	6002      	str	r2, [r0, #0]
	node->w_mag_sq = w_mag * w_mag;
 8002120:	ee28 8a08 	vmul.f32	s16, s16, s16
 8002124:	ed80 8a01 	vstr	s16, [r0, #4]

	return node;
}
 8002128:	ecbd 8b02 	vpop	{d8}
 800212c:	bd08      	pop	{r3, pc}
	...

08002130 <initZUPT>:
void initZUPT(void) {
 8002130:	b538      	push	{r3, r4, r5, lr}
	ZUPTHead = (ZUPTNode*)createZUPTNode(0.0);
 8002132:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8002158 <initZUPT+0x28>
 8002136:	f7ff ffe9 	bl	800210c <createZUPTNode>
 800213a:	4605      	mov	r5, r0
 800213c:	4b07      	ldr	r3, [pc, #28]	; (800215c <initZUPT+0x2c>)
 800213e:	6018      	str	r0, [r3, #0]
	for(i = 0; i < ZUPT_W-1; ++i) {
 8002140:	2400      	movs	r4, #0
 8002142:	e006      	b.n	8002152 <initZUPT+0x22>
		tempNode->next = (ZUPTNode*)createZUPTNode(0.0);
 8002144:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8002158 <initZUPT+0x28>
 8002148:	f7ff ffe0 	bl	800210c <createZUPTNode>
 800214c:	6028      	str	r0, [r5, #0]
	for(i = 0; i < ZUPT_W-1; ++i) {
 800214e:	3401      	adds	r4, #1
		tempNode = (ZUPTNode*)tempNode->next;
 8002150:	4605      	mov	r5, r0
	for(i = 0; i < ZUPT_W-1; ++i) {
 8002152:	2c12      	cmp	r4, #18
 8002154:	ddf6      	ble.n	8002144 <initZUPT+0x14>
}
 8002156:	bd38      	pop	{r3, r4, r5, pc}
 8002158:	00000000 	.word	0x00000000
 800215c:	20001578 	.word	0x20001578

08002160 <init_processing>:
void init_processing(SensorData* IMU0_data, SensorData* IMU1_data) {
 8002160:	b538      	push	{r3, r4, r5, lr}
 8002162:	4604      	mov	r4, r0
 8002164:	460d      	mov	r5, r1
	arm_mat_init_f32(&m_b0, numRows, numCols, m_b0_f32);
 8002166:	4b43      	ldr	r3, [pc, #268]	; (8002274 <init_processing+0x114>)
 8002168:	2201      	movs	r2, #1
 800216a:	2103      	movs	r1, #3
 800216c:	4842      	ldr	r0, [pc, #264]	; (8002278 <init_processing+0x118>)
 800216e:	f002 fc00 	bl	8004972 <arm_mat_init_f32>
	arm_mat_init_f32(&g_n, numRows, numCols, g_n_f32);
 8002172:	4b42      	ldr	r3, [pc, #264]	; (800227c <init_processing+0x11c>)
 8002174:	2201      	movs	r2, #1
 8002176:	2103      	movs	r1, #3
 8002178:	4841      	ldr	r0, [pc, #260]	; (8002280 <init_processing+0x120>)
 800217a:	f002 fbfa 	bl	8004972 <arm_mat_init_f32>
	arm_mat_init_f32(&w_avg_b0, numRows, numCols, w_avg_b0_f32);
 800217e:	4b41      	ldr	r3, [pc, #260]	; (8002284 <init_processing+0x124>)
 8002180:	2201      	movs	r2, #1
 8002182:	2103      	movs	r1, #3
 8002184:	4840      	ldr	r0, [pc, #256]	; (8002288 <init_processing+0x128>)
 8002186:	f002 fbf4 	bl	8004972 <arm_mat_init_f32>
	arm_mat_init_f32(&rotation_b0_n, numRows, numCols, rotation_b0_n_f32);
 800218a:	4b40      	ldr	r3, [pc, #256]	; (800228c <init_processing+0x12c>)
 800218c:	2203      	movs	r2, #3
 800218e:	4611      	mov	r1, r2
 8002190:	483f      	ldr	r0, [pc, #252]	; (8002290 <init_processing+0x130>)
 8002192:	f002 fbee 	bl	8004972 <arm_mat_init_f32>
	arm_mat_init_f32(&x_prev, numRows, numCols, x_prev_f32);
 8002196:	4b3f      	ldr	r3, [pc, #252]	; (8002294 <init_processing+0x134>)
 8002198:	2201      	movs	r2, #1
 800219a:	210c      	movs	r1, #12
 800219c:	483e      	ldr	r0, [pc, #248]	; (8002298 <init_processing+0x138>)
 800219e:	f002 fbe8 	bl	8004972 <arm_mat_init_f32>
	arm_mat_init_f32(&x_curr, numRows, numCols, x_curr_f32);
 80021a2:	4b3e      	ldr	r3, [pc, #248]	; (800229c <init_processing+0x13c>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	210c      	movs	r1, #12
 80021a8:	483d      	ldr	r0, [pc, #244]	; (80022a0 <init_processing+0x140>)
 80021aa:	f002 fbe2 	bl	8004972 <arm_mat_init_f32>
	arm_mat_init_f32(&F_matrix, numRows, numCols, F_matrix_f32);
 80021ae:	4b3d      	ldr	r3, [pc, #244]	; (80022a4 <init_processing+0x144>)
 80021b0:	220c      	movs	r2, #12
 80021b2:	4611      	mov	r1, r2
 80021b4:	483c      	ldr	r0, [pc, #240]	; (80022a8 <init_processing+0x148>)
 80021b6:	f002 fbdc 	bl	8004972 <arm_mat_init_f32>
	arm_mat_init_f32(&B_matrix, numRows, numCols, B_matrix_f32);
 80021ba:	4b3c      	ldr	r3, [pc, #240]	; (80022ac <init_processing+0x14c>)
 80021bc:	2206      	movs	r2, #6
 80021be:	210c      	movs	r1, #12
 80021c0:	483b      	ldr	r0, [pc, #236]	; (80022b0 <init_processing+0x150>)
 80021c2:	f002 fbd6 	bl	8004972 <arm_mat_init_f32>
	arm_mat_init_f32(&u_curr, numRows, numCols, u_curr_f32);
 80021c6:	4b3b      	ldr	r3, [pc, #236]	; (80022b4 <init_processing+0x154>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	2106      	movs	r1, #6
 80021cc:	483a      	ldr	r0, [pc, #232]	; (80022b8 <init_processing+0x158>)
 80021ce:	f002 fbd0 	bl	8004972 <arm_mat_init_f32>
	arm_mat_init_f32(&H_swing, numRows, numCols, H_swing_f32);
 80021d2:	4b3a      	ldr	r3, [pc, #232]	; (80022bc <init_processing+0x15c>)
 80021d4:	220c      	movs	r2, #12
 80021d6:	2106      	movs	r1, #6
 80021d8:	4839      	ldr	r0, [pc, #228]	; (80022c0 <init_processing+0x160>)
 80021da:	f002 fbca 	bl	8004972 <arm_mat_init_f32>
	arm_mat_init_f32(&H_stance, numRows, numCols, H_stance_f32);
 80021de:	4b39      	ldr	r3, [pc, #228]	; (80022c4 <init_processing+0x164>)
 80021e0:	220c      	movs	r2, #12
 80021e2:	4611      	mov	r1, r2
 80021e4:	4838      	ldr	r0, [pc, #224]	; (80022c8 <init_processing+0x168>)
 80021e6:	f002 fbc4 	bl	8004972 <arm_mat_init_f32>
	arm_mat_init_f32(&Z_swing, numRows, numCols, Z_swing_f32);
 80021ea:	4b38      	ldr	r3, [pc, #224]	; (80022cc <init_processing+0x16c>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	2106      	movs	r1, #6
 80021f0:	4837      	ldr	r0, [pc, #220]	; (80022d0 <init_processing+0x170>)
 80021f2:	f002 fbbe 	bl	8004972 <arm_mat_init_f32>
	arm_mat_init_f32(&Z_stance, numRows, numCols, Z_stance_f32);
 80021f6:	4b37      	ldr	r3, [pc, #220]	; (80022d4 <init_processing+0x174>)
 80021f8:	2201      	movs	r2, #1
 80021fa:	210c      	movs	r1, #12
 80021fc:	4836      	ldr	r0, [pc, #216]	; (80022d8 <init_processing+0x178>)
 80021fe:	f002 fbb8 	bl	8004972 <arm_mat_init_f32>
	arm_mat_init_f32(&K_swing, numRows, numCols, K_swing_f32);
 8002202:	4b36      	ldr	r3, [pc, #216]	; (80022dc <init_processing+0x17c>)
 8002204:	2206      	movs	r2, #6
 8002206:	210c      	movs	r1, #12
 8002208:	4835      	ldr	r0, [pc, #212]	; (80022e0 <init_processing+0x180>)
 800220a:	f002 fbb2 	bl	8004972 <arm_mat_init_f32>
	arm_mat_init_f32(&K_stance, numRows, numCols, K_stance_f32);
 800220e:	4b35      	ldr	r3, [pc, #212]	; (80022e4 <init_processing+0x184>)
 8002210:	220c      	movs	r2, #12
 8002212:	4611      	mov	r1, r2
 8002214:	4834      	ldr	r0, [pc, #208]	; (80022e8 <init_processing+0x188>)
 8002216:	f002 fbac 	bl	8004972 <arm_mat_init_f32>
	arm_mat_init_f32(&R_swing, numRows, numCols, R_swing_f32);
 800221a:	4b34      	ldr	r3, [pc, #208]	; (80022ec <init_processing+0x18c>)
 800221c:	2206      	movs	r2, #6
 800221e:	4611      	mov	r1, r2
 8002220:	4833      	ldr	r0, [pc, #204]	; (80022f0 <init_processing+0x190>)
 8002222:	f002 fba6 	bl	8004972 <arm_mat_init_f32>
	arm_mat_init_f32(&R_stance, numRows, numCols, R_stance_f32);
 8002226:	4b33      	ldr	r3, [pc, #204]	; (80022f4 <init_processing+0x194>)
 8002228:	220c      	movs	r2, #12
 800222a:	4611      	mov	r1, r2
 800222c:	4832      	ldr	r0, [pc, #200]	; (80022f8 <init_processing+0x198>)
 800222e:	f002 fba0 	bl	8004972 <arm_mat_init_f32>
	arm_mat_init_f32(&P_prev, numRows, numCols, P_prev_f32);
 8002232:	4b32      	ldr	r3, [pc, #200]	; (80022fc <init_processing+0x19c>)
 8002234:	220c      	movs	r2, #12
 8002236:	4611      	mov	r1, r2
 8002238:	4831      	ldr	r0, [pc, #196]	; (8002300 <init_processing+0x1a0>)
 800223a:	f002 fb9a 	bl	8004972 <arm_mat_init_f32>
	arm_mat_init_f32(&P_curr, numRows, numCols, P_curr_f32);
 800223e:	4b31      	ldr	r3, [pc, #196]	; (8002304 <init_processing+0x1a4>)
 8002240:	220c      	movs	r2, #12
 8002242:	4611      	mov	r1, r2
 8002244:	4830      	ldr	r0, [pc, #192]	; (8002308 <init_processing+0x1a8>)
 8002246:	f002 fb94 	bl	8004972 <arm_mat_init_f32>
	arm_mat_init_f32(&P_minus, numRows, numCols, P_minus_f32);
 800224a:	4b30      	ldr	r3, [pc, #192]	; (800230c <init_processing+0x1ac>)
 800224c:	220c      	movs	r2, #12
 800224e:	4611      	mov	r1, r2
 8002250:	482f      	ldr	r0, [pc, #188]	; (8002310 <init_processing+0x1b0>)
 8002252:	f002 fb8e 	bl	8004972 <arm_mat_init_f32>
	arm_mat_init_f32(&Q_prev, numRows, numCols, Q_prev_f32);
 8002256:	4b2f      	ldr	r3, [pc, #188]	; (8002314 <init_processing+0x1b4>)
 8002258:	220c      	movs	r2, #12
 800225a:	4611      	mov	r1, r2
 800225c:	482e      	ldr	r0, [pc, #184]	; (8002318 <init_processing+0x1b8>)
 800225e:	f002 fb88 	bl	8004972 <arm_mat_init_f32>
	initZUPT(); // Initialize ZUPT phase detector
 8002262:	f7ff ff65 	bl	8002130 <initZUPT>
	initRingBuffers();
 8002266:	f7ff fc85 	bl	8001b74 <initRingBuffers>
	initQuaternion(IMU0_data, IMU1_data);
 800226a:	4629      	mov	r1, r5
 800226c:	4620      	mov	r0, r4
 800226e:	f7ff fcbf 	bl	8001bf0 <initQuaternion>
}
 8002272:	bd38      	pop	{r3, r4, r5, pc}
 8002274:	08007804 	.word	0x08007804
 8002278:	200015f4 	.word	0x200015f4
 800227c:	080077f8 	.word	0x080077f8
 8002280:	200015e0 	.word	0x200015e0
 8002284:	20001670 	.word	0x20001670
 8002288:	20001668 	.word	0x20001668
 800228c:	20001624 	.word	0x20001624
 8002290:	2000161c 	.word	0x2000161c
 8002294:	20000f14 	.word	0x20000f14
 8002298:	200016ec 	.word	0x200016ec
 800229c:	20000ee4 	.word	0x20000ee4
 80022a0:	200016e4 	.word	0x200016e4
 80022a4:	20000150 	.word	0x20000150
 80022a8:	200011c0 	.word	0x200011c0
 80022ac:	20000030 	.word	0x20000030
 80022b0:	200011b8 	.word	0x200011b8
 80022b4:	20001650 	.word	0x20001650
 80022b8:	20001648 	.word	0x20001648
 80022bc:	080073f8 	.word	0x080073f8
 80022c0:	200011d0 	.word	0x200011d0
 80022c4:	080071b8 	.word	0x080071b8
 80022c8:	200011c8 	.word	0x200011c8
 80022cc:	200015bc 	.word	0x200015bc
 80022d0:	200015b4 	.word	0x200015b4
 80022d4:	20001584 	.word	0x20001584
 80022d8:	2000157c 	.word	0x2000157c
 80022dc:	20001428 	.word	0x20001428
 80022e0:	20001420 	.word	0x20001420
 80022e4:	200011e0 	.word	0x200011e0
 80022e8:	200011d8 	.word	0x200011d8
 80022ec:	08007758 	.word	0x08007758
 80022f0:	20001570 	.word	0x20001570
 80022f4:	08007518 	.word	0x08007518
 80022f8:	20001568 	.word	0x20001568
 80022fc:	20000a50 	.word	0x20000a50
 8002300:	20001558 	.word	0x20001558
 8002304:	20000390 	.word	0x20000390
 8002308:	20001548 	.word	0x20001548
 800230c:	20000810 	.word	0x20000810
 8002310:	20001550 	.word	0x20001550
 8002314:	20000c90 	.word	0x20000c90
 8002318:	20001560 	.word	0x20001560

0800231c <resetCurrentPosition>:
void resetCurrentPosition(SensorData* IMU0_data, SensorData* IMU1_data) {
 800231c:	b538      	push	{r3, r4, r5, lr}
 800231e:	4604      	mov	r4, r0
 8002320:	460d      	mov	r5, r1
	for (i = 0; i < x_curr.numRows; ++i) {
 8002322:	2300      	movs	r3, #0
 8002324:	e009      	b.n	800233a <resetCurrentPosition+0x1e>
		x_curr.pData[i] = x_init_f32[i];
 8002326:	4a1a      	ldr	r2, [pc, #104]	; (8002390 <resetCurrentPosition+0x74>)
 8002328:	6852      	ldr	r2, [r2, #4]
 800232a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800232e:	4919      	ldr	r1, [pc, #100]	; (8002394 <resetCurrentPosition+0x78>)
 8002330:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8002334:	6809      	ldr	r1, [r1, #0]
 8002336:	6011      	str	r1, [r2, #0]
	for (i = 0; i < x_curr.numRows; ++i) {
 8002338:	3301      	adds	r3, #1
 800233a:	4a15      	ldr	r2, [pc, #84]	; (8002390 <resetCurrentPosition+0x74>)
 800233c:	8812      	ldrh	r2, [r2, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	dcf1      	bgt.n	8002326 <resetCurrentPosition+0xa>
	for (i = 0; i < P_curr.numRows; ++i) {
 8002342:	2000      	movs	r0, #0
 8002344:	e011      	b.n	800236a <resetCurrentPosition+0x4e>
			P_curr.pData[(i*P_curr.numCols) + j] = P_init_f32[(i*P_curr.numCols) + j];
 8002346:	fb00 2303 	mla	r3, r0, r3, r2
 800234a:	4913      	ldr	r1, [pc, #76]	; (8002398 <resetCurrentPosition+0x7c>)
 800234c:	6849      	ldr	r1, [r1, #4]
 800234e:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 8002352:	4912      	ldr	r1, [pc, #72]	; (800239c <resetCurrentPosition+0x80>)
 8002354:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f8cc 3000 	str.w	r3, [ip]
		for (j = 0; j < P_curr.numCols; ++j) {
 800235e:	3201      	adds	r2, #1
 8002360:	4b0d      	ldr	r3, [pc, #52]	; (8002398 <resetCurrentPosition+0x7c>)
 8002362:	885b      	ldrh	r3, [r3, #2]
 8002364:	4293      	cmp	r3, r2
 8002366:	dcee      	bgt.n	8002346 <resetCurrentPosition+0x2a>
	for (i = 0; i < P_curr.numRows; ++i) {
 8002368:	3001      	adds	r0, #1
 800236a:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <resetCurrentPosition+0x7c>)
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	4283      	cmp	r3, r0
 8002370:	dd01      	ble.n	8002376 <resetCurrentPosition+0x5a>
		for (j = 0; j < P_curr.numCols; ++j) {
 8002372:	2200      	movs	r2, #0
 8002374:	e7f4      	b.n	8002360 <resetCurrentPosition+0x44>
	updatePreviousMatrices();
 8002376:	f7ff fb09 	bl	800198c <updatePreviousMatrices>
	clearZUPT();
 800237a:	f7ff fead 	bl	80020d8 <clearZUPT>
	initZUPT(); // Initialize ZUPT phase detector
 800237e:	f7ff fed7 	bl	8002130 <initZUPT>
	initRingBuffers();
 8002382:	f7ff fbf7 	bl	8001b74 <initRingBuffers>
	initQuaternion(IMU0_data, IMU1_data);
 8002386:	4629      	mov	r1, r5
 8002388:	4620      	mov	r0, r4
 800238a:	f7ff fc31 	bl	8001bf0 <initQuaternion>
}
 800238e:	bd38      	pop	{r3, r4, r5, pc}
 8002390:	200016e4 	.word	0x200016e4
 8002394:	08007810 	.word	0x08007810
 8002398:	20001548 	.word	0x20001548
 800239c:	200005d0 	.word	0x200005d0

080023a0 <detectZUPTPhase>:
enum PHASE detectZUPTPhase(void) {
 80023a0:	b510      	push	{r4, lr}
 80023a2:	ed2d 8b02 	vpush	{d8}
	assert(ZUPTHead != NULL);
 80023a6:	4b40      	ldr	r3, [pc, #256]	; (80024a8 <detectZUPTPhase+0x108>)
 80023a8:	6818      	ldr	r0, [r3, #0]
 80023aa:	b140      	cbz	r0, 80023be <detectZUPTPhase+0x1e>
	ZUPTNode* tempNode = (ZUPTNode*)ZUPTHead->next;
 80023ac:	6804      	ldr	r4, [r0, #0]
	free(ZUPTHead);
 80023ae:	f002 fe05 	bl	8004fbc <free>
	ZUPTHead = tempNode;
 80023b2:	4b3d      	ldr	r3, [pc, #244]	; (80024a8 <detectZUPTPhase+0x108>)
 80023b4:	601c      	str	r4, [r3, #0]
	for(i = 0; i < ZUPT_W-2; ++i) {
 80023b6:	2300      	movs	r3, #0
	float sum = 0;
 80023b8:	eddf 7a3c 	vldr	s15, [pc, #240]	; 80024ac <detectZUPTPhase+0x10c>
	for(i = 0; i < ZUPT_W-2; ++i) {
 80023bc:	e00c      	b.n	80023d8 <detectZUPTPhase+0x38>
	assert(ZUPTHead != NULL);
 80023be:	4b3c      	ldr	r3, [pc, #240]	; (80024b0 <detectZUPTPhase+0x110>)
 80023c0:	4a3c      	ldr	r2, [pc, #240]	; (80024b4 <detectZUPTPhase+0x114>)
 80023c2:	f240 5133 	movw	r1, #1331	; 0x533
 80023c6:	483c      	ldr	r0, [pc, #240]	; (80024b8 <detectZUPTPhase+0x118>)
 80023c8:	f002 fd96 	bl	8004ef8 <__assert_func>
		sum += tempNode->w_mag_sq;
 80023cc:	ed94 7a01 	vldr	s14, [r4, #4]
 80023d0:	ee77 7a87 	vadd.f32	s15, s15, s14
		tempNode = (ZUPTNode*)tempNode->next;
 80023d4:	6824      	ldr	r4, [r4, #0]
	for(i = 0; i < ZUPT_W-2; ++i) {
 80023d6:	3301      	adds	r3, #1
 80023d8:	2b11      	cmp	r3, #17
 80023da:	dc08      	bgt.n	80023ee <detectZUPTPhase+0x4e>
		assert(tempNode != NULL);
 80023dc:	2c00      	cmp	r4, #0
 80023de:	d1f5      	bne.n	80023cc <detectZUPTPhase+0x2c>
 80023e0:	4b36      	ldr	r3, [pc, #216]	; (80024bc <detectZUPTPhase+0x11c>)
 80023e2:	4a34      	ldr	r2, [pc, #208]	; (80024b4 <detectZUPTPhase+0x114>)
 80023e4:	f240 513c 	movw	r1, #1340	; 0x53c
 80023e8:	4833      	ldr	r0, [pc, #204]	; (80024b8 <detectZUPTPhase+0x118>)
 80023ea:	f002 fd85 	bl	8004ef8 <__assert_func>
	assert(tempNode != NULL);
 80023ee:	2c00      	cmp	r4, #0
 80023f0:	d03d      	beq.n	800246e <detectZUPTPhase+0xce>
	sum += tempNode->w_mag_sq; // last node
 80023f2:	ed94 8a01 	vldr	s16, [r4, #4]
 80023f6:	ee38 8a27 	vadd.f32	s16, s16, s15
	tempNode->next = (ZUPTNode*)createZUPTNode(w_avg_b0_mag);
 80023fa:	4b31      	ldr	r3, [pc, #196]	; (80024c0 <detectZUPTPhase+0x120>)
 80023fc:	ed93 0a00 	vldr	s0, [r3]
 8002400:	f7ff fe84 	bl	800210c <createZUPTNode>
 8002404:	6020      	str	r0, [r4, #0]
	assert(tempNode->next != NULL);
 8002406:	2800      	cmp	r0, #0
 8002408:	d038      	beq.n	800247c <detectZUPTPhase+0xdc>
	sum += tempNode->w_mag_sq;
 800240a:	edd0 7a01 	vldr	s15, [r0, #4]
	float Tw = sum * ZUPT_SCALE_FACTOR;
 800240e:	ee77 7a88 	vadd.f32	s15, s15, s16
 8002412:	ee17 0a90 	vmov	r0, s15
 8002416:	f7fe f88f 	bl	8000538 <__aeabi_f2d>
 800241a:	a321      	add	r3, pc, #132	; (adr r3, 80024a0 <detectZUPTPhase+0x100>)
 800241c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002420:	f7fe fa0c 	bl	800083c <__aeabi_ddiv>
 8002424:	f7fe fba2 	bl	8000b6c <__aeabi_d2f>
 8002428:	ee07 0a90 	vmov	s15, r0
	enum PHASE detected_phase = (Tw < ZUPT_THRESHOLD) ? STANCE : SWING;
 800242c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80024c4 <detectZUPTPhase+0x124>
 8002430:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002438:	bf4c      	ite	mi
 800243a:	2301      	movmi	r3, #1
 800243c:	2300      	movpl	r3, #0
	if (detected_phase != curr_phase) {
 800243e:	4a22      	ldr	r2, [pc, #136]	; (80024c8 <detectZUPTPhase+0x128>)
 8002440:	7812      	ldrb	r2, [r2, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d00e      	beq.n	8002464 <detectZUPTPhase+0xc4>
		if (detected_phase == SWING) {
 8002446:	eef4 7ac7 	vcmpe.f32	s15, s14
 800244a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244e:	d41c      	bmi.n	800248a <detectZUPTPhase+0xea>
			++phase_counter;
 8002450:	4a1e      	ldr	r2, [pc, #120]	; (80024cc <detectZUPTPhase+0x12c>)
 8002452:	7813      	ldrb	r3, [r2, #0]
 8002454:	3301      	adds	r3, #1
 8002456:	b2db      	uxtb	r3, r3
 8002458:	7013      	strb	r3, [r2, #0]
			curr_phase = (phase_counter == PHASE_INTERVAL_THRESHOLD) ? SWING : STANCE;
 800245a:	3b0a      	subs	r3, #10
 800245c:	bf18      	it	ne
 800245e:	2301      	movne	r3, #1
 8002460:	4a19      	ldr	r2, [pc, #100]	; (80024c8 <detectZUPTPhase+0x128>)
 8002462:	7013      	strb	r3, [r2, #0]
}
 8002464:	4b18      	ldr	r3, [pc, #96]	; (80024c8 <detectZUPTPhase+0x128>)
 8002466:	7818      	ldrb	r0, [r3, #0]
 8002468:	ecbd 8b02 	vpop	{d8}
 800246c:	bd10      	pop	{r4, pc}
	assert(tempNode != NULL);
 800246e:	4b13      	ldr	r3, [pc, #76]	; (80024bc <detectZUPTPhase+0x11c>)
 8002470:	4a10      	ldr	r2, [pc, #64]	; (80024b4 <detectZUPTPhase+0x114>)
 8002472:	f44f 61a8 	mov.w	r1, #1344	; 0x540
 8002476:	4810      	ldr	r0, [pc, #64]	; (80024b8 <detectZUPTPhase+0x118>)
 8002478:	f002 fd3e 	bl	8004ef8 <__assert_func>
	assert(tempNode->next != NULL);
 800247c:	4b14      	ldr	r3, [pc, #80]	; (80024d0 <detectZUPTPhase+0x130>)
 800247e:	4a0d      	ldr	r2, [pc, #52]	; (80024b4 <detectZUPTPhase+0x114>)
 8002480:	f240 5145 	movw	r1, #1349	; 0x545
 8002484:	480c      	ldr	r0, [pc, #48]	; (80024b8 <detectZUPTPhase+0x118>)
 8002486:	f002 fd37 	bl	8004ef8 <__assert_func>
			--phase_counter;
 800248a:	4a10      	ldr	r2, [pc, #64]	; (80024cc <detectZUPTPhase+0x12c>)
 800248c:	7813      	ldrb	r3, [r2, #0]
 800248e:	3b01      	subs	r3, #1
 8002490:	b2db      	uxtb	r3, r3
 8002492:	7013      	strb	r3, [r2, #0]
			curr_phase = (phase_counter == 0) ? STANCE : SWING;
 8002494:	fab3 f383 	clz	r3, r3
 8002498:	095b      	lsrs	r3, r3, #5
 800249a:	4a0b      	ldr	r2, [pc, #44]	; (80024c8 <detectZUPTPhase+0x128>)
 800249c:	7013      	strb	r3, [r2, #0]
 800249e:	e7e1      	b.n	8002464 <detectZUPTPhase+0xc4>
 80024a0:	cccccccd 	.word	0xcccccccd
 80024a4:	3f60624d 	.word	0x3f60624d
 80024a8:	20001578 	.word	0x20001578
 80024ac:	00000000 	.word	0x00000000
 80024b0:	0800715c 	.word	0x0800715c
 80024b4:	080077e8 	.word	0x080077e8
 80024b8:	08007170 	.word	0x08007170
 80024bc:	0800718c 	.word	0x0800718c
 80024c0:	2000167c 	.word	0x2000167c
 80024c4:	4684d000 	.word	0x4684d000
 80024c8:	20000ed0 	.word	0x20000ed0
 80024cc:	20001608 	.word	0x20001608
 80024d0:	080071a0 	.word	0x080071a0

080024d4 <calculateCorrectedState>:
		float timeDelta) { // TODO Verify this
 80024d4:	b530      	push	{r4, r5, lr}
 80024d6:	ed2d 8b02 	vpush	{d8}
 80024da:	b089      	sub	sp, #36	; 0x24
 80024dc:	4604      	mov	r4, r0
 80024de:	460d      	mov	r5, r1
 80024e0:	eeb0 8a40 	vmov.f32	s16, s0
	calculateAvgAngularRate(IMU0_data, IMU1_data); // w_avg_b0
 80024e4:	f7ff fccc 	bl	8001e80 <calculateAvgAngularRate>
	calculateRotationMatrix(timeDelta);	// R_b0_n
 80024e8:	eeb0 0a48 	vmov.f32	s0, s16
 80024ec:	f7fe ffa0 	bl	8001430 <calculateRotationMatrix>
	updateFMatrix(timeDelta);	// Update F with new timeDelta
 80024f0:	eeb0 0a48 	vmov.f32	s0, s16
 80024f4:	f7ff fa14 	bl	8001920 <updateFMatrix>
	updateBMatrix(timeDelta);	// Update B with new timeDelta
 80024f8:	eeb0 0a48 	vmov.f32	s0, s16
 80024fc:	f7ff fa22 	bl	8001944 <updateBMatrix>
	updateUVector(IMU0_data, IMU1_data);	// Update u_curr with IMU data
 8002500:	4629      	mov	r1, r5
 8002502:	4620      	mov	r0, r4
 8002504:	f7ff fd82 	bl	800200c <updateUVector>
	calculateStateEstimation();	// x(k) = F*x(k-1) + B*u(k)
 8002508:	f7fe fffc 	bl	8001504 <calculateStateEstimation>
	calculateStateEstimationErrorCovariance();	// P-(k) = F*P(k-1)*F^T + Q(k-1)
 800250c:	f7ff f84a 	bl	80015a4 <calculateStateEstimationErrorCovariance>
	phase = detectZUPTPhase();
 8002510:	f7ff ff46 	bl	80023a0 <detectZUPTPhase>
	if (phase == SWING) {
 8002514:	4604      	mov	r4, r0
 8002516:	2800      	cmp	r0, #0
 8002518:	f040 8090 	bne.w	800263c <calculateCorrectedState+0x168>
		Hi = H_swing;
 800251c:	4b59      	ldr	r3, [pc, #356]	; (8002684 <calculateCorrectedState+0x1b0>)
 800251e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002522:	ab08      	add	r3, sp, #32
 8002524:	e903 0003 	stmdb	r3, {r0, r1}
		Zi = Z_swing;
 8002528:	4a57      	ldr	r2, [pc, #348]	; (8002688 <calculateCorrectedState+0x1b4>)
 800252a:	ab04      	add	r3, sp, #16
 800252c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002530:	e883 0003 	stmia.w	r3, {r0, r1}
		Ri = R_swing;
 8002534:	4a55      	ldr	r2, [pc, #340]	; (800268c <calculateCorrectedState+0x1b8>)
 8002536:	ab02      	add	r3, sp, #8
 8002538:	e892 0003 	ldmia.w	r2, {r0, r1}
 800253c:	e883 0003 	stmia.w	r3, {r0, r1}
		Ki = K_swing;
 8002540:	4a53      	ldr	r2, [pc, #332]	; (8002690 <calculateCorrectedState+0x1bc>)
 8002542:	466b      	mov	r3, sp
 8002544:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002548:	e883 0003 	stmia.w	r3, {r0, r1}
	updateZiVector(&Zi);	// Update Observation Vector Z for optimal state estimation
 800254c:	a804      	add	r0, sp, #16
 800254e:	f7ff fad7 	bl	8001b00 <updateZiVector>
	calculateGainMatrix(&Ki, &Hi, &Ri); // Ki(k) = P-(k)*Hi^T * (Hi*P-(k)*Hi^T + Ri(k))^-1
 8002552:	aa02      	add	r2, sp, #8
 8002554:	a906      	add	r1, sp, #24
 8002556:	4668      	mov	r0, sp
 8002558:	f7ff f852 	bl	8001600 <calculateGainMatrix>
	calculateOptimalStateEstimation(&Ki, &Zi, &Hi);	// x(k) <-- x_best(k) = x(k) + Ki(k)*(Zi(k) - Hi*x(k))
 800255c:	aa06      	add	r2, sp, #24
 800255e:	a904      	add	r1, sp, #16
 8002560:	4668      	mov	r0, sp
 8002562:	f7ff f8d5 	bl	8001710 <calculateOptimalStateEstimation>
	if (phase == STANCE) {
 8002566:	2c01      	cmp	r4, #1
 8002568:	f000 8081 	beq.w	800266e <calculateCorrectedState+0x19a>
	if (fabs(x_curr_f32[8]) > v_gate) {
 800256c:	4b49      	ldr	r3, [pc, #292]	; (8002694 <calculateCorrectedState+0x1c0>)
 800256e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002572:	eef0 6ae7 	vabs.f32	s13, s15
 8002576:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002698 <calculateCorrectedState+0x1c4>
 800257a:	eef4 6ac7 	vcmpe.f32	s13, s14
 800257e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002582:	dd0d      	ble.n	80025a0 <calculateCorrectedState+0xcc>
		x_curr_f32[8] = v_gate * (x_curr_f32[8] > 0 ? 1 : -1);
 8002584:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800258c:	dd74      	ble.n	8002678 <calculateCorrectedState+0x1a4>
 800258e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002592:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002698 <calculateCorrectedState+0x1c4>
 8002596:	ee67 7a87 	vmul.f32	s15, s15, s14
 800259a:	4b3e      	ldr	r3, [pc, #248]	; (8002694 <calculateCorrectedState+0x1c0>)
 800259c:	edc3 7a08 	vstr	s15, [r3, #32]
	if (fabs(x_curr_f32[11]) > v_gate) {
 80025a0:	4b3c      	ldr	r3, [pc, #240]	; (8002694 <calculateCorrectedState+0x1c0>)
 80025a2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80025a6:	eef0 6ae7 	vabs.f32	s13, s15
 80025aa:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002698 <calculateCorrectedState+0x1c4>
 80025ae:	eef4 6ac7 	vcmpe.f32	s13, s14
 80025b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b6:	dd0d      	ble.n	80025d4 <calculateCorrectedState+0x100>
		x_curr_f32[11] = v_gate * (x_curr_f32[11] > 0 ? 1 : -1);
 80025b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c0:	dd5d      	ble.n	800267e <calculateCorrectedState+0x1aa>
 80025c2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80025c6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002698 <calculateCorrectedState+0x1c4>
 80025ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025ce:	4b31      	ldr	r3, [pc, #196]	; (8002694 <calculateCorrectedState+0x1c0>)
 80025d0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	optimal_f32[0] = (x_curr_f32[0] + x_curr_f32[3]) / 2;
 80025d4:	4b2f      	ldr	r3, [pc, #188]	; (8002694 <calculateCorrectedState+0x1c0>)
 80025d6:	ed93 7a00 	vldr	s14, [r3]
 80025da:	edd3 7a03 	vldr	s15, [r3, #12]
 80025de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025e2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80025e6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80025ea:	4a2c      	ldr	r2, [pc, #176]	; (800269c <calculateCorrectedState+0x1c8>)
 80025ec:	ed82 7a00 	vstr	s14, [r2]
	optimal_f32[1] = (x_curr_f32[1] + x_curr_f32[4]) / 2;
 80025f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80025f4:	edd3 7a04 	vldr	s15, [r3, #16]
 80025f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025fc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002600:	ed82 7a01 	vstr	s14, [r2, #4]
	optimal_f32[2] = (x_curr_f32[2] + x_curr_f32[5]) / 2;
 8002604:	edd3 7a02 	vldr	s15, [r3, #8]
 8002608:	ed93 7a05 	vldr	s14, [r3, #20]
 800260c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002610:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002614:	edc2 7a02 	vstr	s15, [r2, #8]
	calculateOptimalEstimationErrorCovariance(&Ki, &Hi, &Ri);	// P(k) = (I - Ki(k)*Hi)*P-(k)
 8002618:	aa02      	add	r2, sp, #8
 800261a:	a906      	add	r1, sp, #24
 800261c:	4668      	mov	r0, sp
 800261e:	f7ff f8dd 	bl	80017dc <calculateOptimalEstimationErrorCovariance>
	updatePreviousMatrices();	// update x_prev, P_prev, (Q_prev?) // TODO Add Q_prev to this?
 8002622:	f7ff f9b3 	bl	800198c <updatePreviousMatrices>
	phase_out = (float)phase;
 8002626:	ee07 4a90 	vmov	s15, r4
 800262a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800262e:	4b1c      	ldr	r3, [pc, #112]	; (80026a0 <calculateCorrectedState+0x1cc>)
 8002630:	edc3 7a00 	vstr	s15, [r3]
}
 8002634:	b009      	add	sp, #36	; 0x24
 8002636:	ecbd 8b02 	vpop	{d8}
 800263a:	bd30      	pop	{r4, r5, pc}
		Hi = H_stance;
 800263c:	4b19      	ldr	r3, [pc, #100]	; (80026a4 <calculateCorrectedState+0x1d0>)
 800263e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002642:	ab08      	add	r3, sp, #32
 8002644:	e903 0003 	stmdb	r3, {r0, r1}
		Zi = Z_stance;
 8002648:	4a17      	ldr	r2, [pc, #92]	; (80026a8 <calculateCorrectedState+0x1d4>)
 800264a:	ab04      	add	r3, sp, #16
 800264c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002650:	e883 0003 	stmia.w	r3, {r0, r1}
		Ri = R_stance;
 8002654:	4a15      	ldr	r2, [pc, #84]	; (80026ac <calculateCorrectedState+0x1d8>)
 8002656:	ab02      	add	r3, sp, #8
 8002658:	e892 0003 	ldmia.w	r2, {r0, r1}
 800265c:	e883 0003 	stmia.w	r3, {r0, r1}
		Ki = K_stance;
 8002660:	4a13      	ldr	r2, [pc, #76]	; (80026b0 <calculateCorrectedState+0x1dc>)
 8002662:	466b      	mov	r3, sp
 8002664:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002668:	e883 0003 	stmia.w	r3, {r0, r1}
 800266c:	e76e      	b.n	800254c <calculateCorrectedState+0x78>
		x_curr_f32[2] = 0;
 800266e:	4b09      	ldr	r3, [pc, #36]	; (8002694 <calculateCorrectedState+0x1c0>)
 8002670:	2200      	movs	r2, #0
 8002672:	609a      	str	r2, [r3, #8]
		x_curr_f32[5] = 0;
 8002674:	615a      	str	r2, [r3, #20]
 8002676:	e779      	b.n	800256c <calculateCorrectedState+0x98>
		x_curr_f32[8] = v_gate * (x_curr_f32[8] > 0 ? 1 : -1);
 8002678:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800267c:	e789      	b.n	8002592 <calculateCorrectedState+0xbe>
		x_curr_f32[11] = v_gate * (x_curr_f32[11] > 0 ? 1 : -1);
 800267e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8002682:	e7a0      	b.n	80025c6 <calculateCorrectedState+0xf2>
 8002684:	200011d0 	.word	0x200011d0
 8002688:	200015b4 	.word	0x200015b4
 800268c:	20001570 	.word	0x20001570
 8002690:	20001420 	.word	0x20001420
 8002694:	20000ee4 	.word	0x20000ee4
 8002698:	3e99999a 	.word	0x3e99999a
 800269c:	200015fc 	.word	0x200015fc
 80026a0:	2000160c 	.word	0x2000160c
 80026a4:	200011c8 	.word	0x200011c8
 80026a8:	2000157c 	.word	0x2000157c
 80026ac:	20001568 	.word	0x20001568
 80026b0:	200011d8 	.word	0x200011d8

080026b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026b4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b6:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <HAL_MspInit+0x2c>)
 80026b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026ba:	f042 0201 	orr.w	r2, r2, #1
 80026be:	661a      	str	r2, [r3, #96]	; 0x60
 80026c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026c2:	f002 0201 	and.w	r2, r2, #1
 80026c6:	9200      	str	r2, [sp, #0]
 80026c8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80026cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80026d0:	659a      	str	r2, [r3, #88]	; 0x58
 80026d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d8:	9301      	str	r3, [sp, #4]
 80026da:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026dc:	b002      	add	sp, #8
 80026de:	4770      	bx	lr
 80026e0:	40021000 	.word	0x40021000

080026e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026e4:	b500      	push	{lr}
 80026e6:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e8:	2300      	movs	r3, #0
 80026ea:	9305      	str	r3, [sp, #20]
 80026ec:	9306      	str	r3, [sp, #24]
 80026ee:	9307      	str	r3, [sp, #28]
 80026f0:	9308      	str	r3, [sp, #32]
 80026f2:	9309      	str	r3, [sp, #36]	; 0x24
  if(hspi->Instance==SPI1)
 80026f4:	6803      	ldr	r3, [r0, #0]
 80026f6:	4a25      	ldr	r2, [pc, #148]	; (800278c <HAL_SPI_MspInit+0xa8>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d005      	beq.n	8002708 <HAL_SPI_MspInit+0x24>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 80026fc:	4a24      	ldr	r2, [pc, #144]	; (8002790 <HAL_SPI_MspInit+0xac>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d023      	beq.n	800274a <HAL_SPI_MspInit+0x66>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002702:	b00b      	add	sp, #44	; 0x2c
 8002704:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002708:	4b22      	ldr	r3, [pc, #136]	; (8002794 <HAL_SPI_MspInit+0xb0>)
 800270a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800270c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002710:	661a      	str	r2, [r3, #96]	; 0x60
 8002712:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002714:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002718:	9201      	str	r2, [sp, #4]
 800271a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800271c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800271e:	f042 0201 	orr.w	r2, r2, #1
 8002722:	64da      	str	r2, [r3, #76]	; 0x4c
 8002724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	9302      	str	r3, [sp, #8]
 800272c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800272e:	23c2      	movs	r3, #194	; 0xc2
 8002730:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002732:	2302      	movs	r3, #2
 8002734:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002736:	2303      	movs	r3, #3
 8002738:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800273a:	2305      	movs	r3, #5
 800273c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273e:	a905      	add	r1, sp, #20
 8002740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002744:	f000 f9fa 	bl	8002b3c <HAL_GPIO_Init>
 8002748:	e7db      	b.n	8002702 <HAL_SPI_MspInit+0x1e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800274a:	4b12      	ldr	r3, [pc, #72]	; (8002794 <HAL_SPI_MspInit+0xb0>)
 800274c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800274e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002752:	659a      	str	r2, [r3, #88]	; 0x58
 8002754:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002756:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800275a:	9203      	str	r2, [sp, #12]
 800275c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800275e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002760:	f042 0202 	orr.w	r2, r2, #2
 8002764:	64da      	str	r2, [r3, #76]	; 0x4c
 8002766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	9304      	str	r3, [sp, #16]
 800276e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002770:	2338      	movs	r3, #56	; 0x38
 8002772:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002774:	2302      	movs	r3, #2
 8002776:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002778:	2303      	movs	r3, #3
 800277a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800277c:	2306      	movs	r3, #6
 800277e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002780:	a905      	add	r1, sp, #20
 8002782:	4805      	ldr	r0, [pc, #20]	; (8002798 <HAL_SPI_MspInit+0xb4>)
 8002784:	f000 f9da 	bl	8002b3c <HAL_GPIO_Init>
}
 8002788:	e7bb      	b.n	8002702 <HAL_SPI_MspInit+0x1e>
 800278a:	bf00      	nop
 800278c:	40013000 	.word	0x40013000
 8002790:	40003c00 	.word	0x40003c00
 8002794:	40021000 	.word	0x40021000
 8002798:	48000400 	.word	0x48000400

0800279c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 800279c:	6803      	ldr	r3, [r0, #0]
 800279e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a2:	d000      	beq.n	80027a6 <HAL_TIM_Base_MspInit+0xa>
 80027a4:	4770      	bx	lr
{
 80027a6:	b500      	push	{lr}
 80027a8:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027aa:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80027ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027b0:	f042 0201 	orr.w	r2, r2, #1
 80027b4:	659a      	str	r2, [r3, #88]	; 0x58
 80027b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	9301      	str	r3, [sp, #4]
 80027be:	9b01      	ldr	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80027c0:	2200      	movs	r2, #0
 80027c2:	4611      	mov	r1, r2
 80027c4:	201c      	movs	r0, #28
 80027c6:	f000 f95f 	bl	8002a88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80027ca:	201c      	movs	r0, #28
 80027cc:	f000 f994 	bl	8002af8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80027d0:	b003      	add	sp, #12
 80027d2:	f85d fb04 	ldr.w	pc, [sp], #4

080027d6 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027d6:	e7fe      	b.n	80027d6 <NMI_Handler>

080027d8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027d8:	e7fe      	b.n	80027d8 <HardFault_Handler>

080027da <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027da:	e7fe      	b.n	80027da <MemManage_Handler>

080027dc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027dc:	e7fe      	b.n	80027dc <BusFault_Handler>

080027de <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027de:	e7fe      	b.n	80027de <UsageFault_Handler>

080027e0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027e0:	4770      	bx	lr

080027e2 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027e2:	4770      	bx	lr

080027e4 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027e4:	4770      	bx	lr

080027e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027e6:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027e8:	f000 f916 	bl	8002a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027ec:	bd08      	pop	{r3, pc}

080027ee <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80027ee:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MAG_INT_Pin);
 80027f0:	2001      	movs	r0, #1
 80027f2:	f000 fa8d 	bl	8002d10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80027f6:	bd08      	pop	{r3, pc}

080027f8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80027f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU3_INT1_Pin);
 80027fa:	2008      	movs	r0, #8
 80027fc:	f000 fa88 	bl	8002d10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  DRDY_flag = 1;
 8002800:	4b01      	ldr	r3, [pc, #4]	; (8002808 <EXTI3_IRQHandler+0x10>)
 8002802:	2201      	movs	r2, #1
 8002804:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI3_IRQn 1 */
}
 8002806:	bd08      	pop	{r3, pc}
 8002808:	20000fd0 	.word	0x20000fd0

0800280c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800280c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU3_INT2_Pin);
 800280e:	2010      	movs	r0, #16
 8002810:	f000 fa7e 	bl	8002d10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  DRDY_flag = 1;
 8002814:	4b01      	ldr	r3, [pc, #4]	; (800281c <EXTI4_IRQHandler+0x10>)
 8002816:	2201      	movs	r2, #1
 8002818:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI4_IRQn 1 */
}
 800281a:	bd08      	pop	{r3, pc}
 800281c:	20000fd0 	.word	0x20000fd0

08002820 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002820:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU2_INT1_Pin);
 8002822:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002826:	f000 fa73 	bl	8002d10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  DRDY_flag = 1;
 800282a:	4b02      	ldr	r3, [pc, #8]	; (8002834 <EXTI9_5_IRQHandler+0x14>)
 800282c:	2201      	movs	r2, #1
 800282e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002830:	bd08      	pop	{r3, pc}
 8002832:	bf00      	nop
 8002834:	20000fd0 	.word	0x20000fd0

08002838 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002838:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800283a:	4803      	ldr	r0, [pc, #12]	; (8002848 <TIM2_IRQHandler+0x10>)
 800283c:	f001 fdda 	bl	80043f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  periodic_tx_flag = 1;
 8002840:	4b02      	ldr	r3, [pc, #8]	; (800284c <TIM2_IRQHandler+0x14>)
 8002842:	2201      	movs	r2, #1
 8002844:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 8002846:	bd08      	pop	{r3, pc}
 8002848:	2000116c 	.word	0x2000116c
 800284c:	20000028 	.word	0x20000028

08002850 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002850:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU2_INT2_Pin);
 8002852:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002856:	f000 fa5b 	bl	8002d10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IMU1_INT1_Pin);
 800285a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800285e:	f000 fa57 	bl	8002d10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IMU1_INT2_Pin);
 8002862:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002866:	f000 fa53 	bl	8002d10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  DRDY_flag = 1;
 800286a:	4b02      	ldr	r3, [pc, #8]	; (8002874 <EXTI15_10_IRQHandler+0x24>)
 800286c:	2201      	movs	r2, #1
 800286e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002870:	bd08      	pop	{r3, pc}
 8002872:	bf00      	nop
 8002874:	20000fd0 	.word	0x20000fd0

08002878 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8002878:	2001      	movs	r0, #1
 800287a:	4770      	bx	lr

0800287c <_kill>:

int _kill(int pid, int sig)
{
 800287c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800287e:	f002 fb59 	bl	8004f34 <__errno>
 8002882:	2316      	movs	r3, #22
 8002884:	6003      	str	r3, [r0, #0]
  return -1;
}
 8002886:	f04f 30ff 	mov.w	r0, #4294967295
 800288a:	bd08      	pop	{r3, pc}

0800288c <_exit>:

void _exit (int status)
{
 800288c:	b508      	push	{r3, lr}
  _kill(status, -1);
 800288e:	f04f 31ff 	mov.w	r1, #4294967295
 8002892:	f7ff fff3 	bl	800287c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002896:	e7fe      	b.n	8002896 <_exit+0xa>

08002898 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002898:	b570      	push	{r4, r5, r6, lr}
 800289a:	460c      	mov	r4, r1
 800289c:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800289e:	2500      	movs	r5, #0
 80028a0:	e006      	b.n	80028b0 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 80028a2:	f3af 8000 	nop.w
 80028a6:	4621      	mov	r1, r4
 80028a8:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ac:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 80028ae:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028b0:	42b5      	cmp	r5, r6
 80028b2:	dbf6      	blt.n	80028a2 <_read+0xa>
  }

  return len;
}
 80028b4:	4630      	mov	r0, r6
 80028b6:	bd70      	pop	{r4, r5, r6, pc}

080028b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028b8:	b570      	push	{r4, r5, r6, lr}
 80028ba:	460c      	mov	r4, r1
 80028bc:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028be:	2500      	movs	r5, #0
 80028c0:	e004      	b.n	80028cc <_write+0x14>
  {
    __io_putchar(*ptr++);
 80028c2:	f814 0b01 	ldrb.w	r0, [r4], #1
 80028c6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ca:	3501      	adds	r5, #1
 80028cc:	42b5      	cmp	r5, r6
 80028ce:	dbf8      	blt.n	80028c2 <_write+0xa>
  }
  return len;
}
 80028d0:	4630      	mov	r0, r6
 80028d2:	bd70      	pop	{r4, r5, r6, pc}

080028d4 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80028d4:	f04f 30ff 	mov.w	r0, #4294967295
 80028d8:	4770      	bx	lr

080028da <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80028da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028de:	604b      	str	r3, [r1, #4]
  return 0;
}
 80028e0:	2000      	movs	r0, #0
 80028e2:	4770      	bx	lr

080028e4 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80028e4:	2001      	movs	r0, #1
 80028e6:	4770      	bx	lr

080028e8 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80028e8:	2000      	movs	r0, #0
 80028ea:	4770      	bx	lr

080028ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028ec:	b510      	push	{r4, lr}
 80028ee:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028f0:	4a0c      	ldr	r2, [pc, #48]	; (8002924 <_sbrk+0x38>)
 80028f2:	490d      	ldr	r1, [pc, #52]	; (8002928 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028f4:	480d      	ldr	r0, [pc, #52]	; (800292c <_sbrk+0x40>)
 80028f6:	6800      	ldr	r0, [r0, #0]
 80028f8:	b140      	cbz	r0, 800290c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028fa:	480c      	ldr	r0, [pc, #48]	; (800292c <_sbrk+0x40>)
 80028fc:	6800      	ldr	r0, [r0, #0]
 80028fe:	4403      	add	r3, r0
 8002900:	1a52      	subs	r2, r2, r1
 8002902:	4293      	cmp	r3, r2
 8002904:	d806      	bhi.n	8002914 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002906:	4a09      	ldr	r2, [pc, #36]	; (800292c <_sbrk+0x40>)
 8002908:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800290a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800290c:	4807      	ldr	r0, [pc, #28]	; (800292c <_sbrk+0x40>)
 800290e:	4c08      	ldr	r4, [pc, #32]	; (8002930 <_sbrk+0x44>)
 8002910:	6004      	str	r4, [r0, #0]
 8002912:	e7f2      	b.n	80028fa <_sbrk+0xe>
    errno = ENOMEM;
 8002914:	f002 fb0e 	bl	8004f34 <__errno>
 8002918:	230c      	movs	r3, #12
 800291a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800291c:	f04f 30ff 	mov.w	r0, #4294967295
 8002920:	e7f3      	b.n	800290a <_sbrk+0x1e>
 8002922:	bf00      	nop
 8002924:	20010000 	.word	0x20010000
 8002928:	00000400 	.word	0x00000400
 800292c:	200017d0 	.word	0x200017d0
 8002930:	200017e8 	.word	0x200017e8

08002934 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002934:	4a03      	ldr	r2, [pc, #12]	; (8002944 <SystemInit+0x10>)
 8002936:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800293a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800293e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002942:	4770      	bx	lr
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002948:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002980 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800294c:	f7ff fff2 	bl	8002934 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002950:	480c      	ldr	r0, [pc, #48]	; (8002984 <LoopForever+0x6>)
  ldr r1, =_edata
 8002952:	490d      	ldr	r1, [pc, #52]	; (8002988 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002954:	4a0d      	ldr	r2, [pc, #52]	; (800298c <LoopForever+0xe>)
  movs r3, #0
 8002956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002958:	e002      	b.n	8002960 <LoopCopyDataInit>

0800295a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800295a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800295c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800295e:	3304      	adds	r3, #4

08002960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002964:	d3f9      	bcc.n	800295a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002966:	4a0a      	ldr	r2, [pc, #40]	; (8002990 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002968:	4c0a      	ldr	r4, [pc, #40]	; (8002994 <LoopForever+0x16>)
  movs r3, #0
 800296a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800296c:	e001      	b.n	8002972 <LoopFillZerobss>

0800296e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800296e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002970:	3204      	adds	r2, #4

08002972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002974:	d3fb      	bcc.n	800296e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002976:	f002 faf5 	bl	8004f64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800297a:	f7fe fca5 	bl	80012c8 <main>

0800297e <LoopForever>:

LoopForever:
    b LoopForever
 800297e:	e7fe      	b.n	800297e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002980:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002988:	20000fb4 	.word	0x20000fb4
  ldr r2, =_sidata
 800298c:	08007b38 	.word	0x08007b38
  ldr r2, =_sbss
 8002990:	20000fb4 	.word	0x20000fb4
  ldr r4, =_ebss
 8002994:	200017e8 	.word	0x200017e8

08002998 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002998:	e7fe      	b.n	8002998 <ADC1_IRQHandler>
	...

0800299c <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800299c:	4b10      	ldr	r3, [pc, #64]	; (80029e0 <HAL_InitTick+0x44>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	b90b      	cbnz	r3, 80029a6 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80029a2:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80029a4:	4770      	bx	lr
{
 80029a6:	b510      	push	{r4, lr}
 80029a8:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80029aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80029b2:	4a0c      	ldr	r2, [pc, #48]	; (80029e4 <HAL_InitTick+0x48>)
 80029b4:	6810      	ldr	r0, [r2, #0]
 80029b6:	fbb0 f0f3 	udiv	r0, r0, r3
 80029ba:	f000 f8ab 	bl	8002b14 <HAL_SYSTICK_Config>
 80029be:	b968      	cbnz	r0, 80029dc <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029c0:	2c0f      	cmp	r4, #15
 80029c2:	d901      	bls.n	80029c8 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 80029c4:	2001      	movs	r0, #1
 80029c6:	e00a      	b.n	80029de <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029c8:	2200      	movs	r2, #0
 80029ca:	4621      	mov	r1, r4
 80029cc:	f04f 30ff 	mov.w	r0, #4294967295
 80029d0:	f000 f85a 	bl	8002a88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029d4:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <HAL_InitTick+0x4c>)
 80029d6:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 80029d8:	2000      	movs	r0, #0
 80029da:	e000      	b.n	80029de <HAL_InitTick+0x42>
      status = HAL_ERROR;
 80029dc:	2001      	movs	r0, #1
}
 80029de:	bd10      	pop	{r4, pc}
 80029e0:	20000f48 	.word	0x20000f48
 80029e4:	20000f44 	.word	0x20000f44
 80029e8:	20000f4c 	.word	0x20000f4c

080029ec <HAL_Init>:
{
 80029ec:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029ee:	4a09      	ldr	r2, [pc, #36]	; (8002a14 <HAL_Init+0x28>)
 80029f0:	6813      	ldr	r3, [r2, #0]
 80029f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f6:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029f8:	2003      	movs	r0, #3
 80029fa:	f000 f833 	bl	8002a64 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029fe:	200f      	movs	r0, #15
 8002a00:	f7ff ffcc 	bl	800299c <HAL_InitTick>
 8002a04:	b110      	cbz	r0, 8002a0c <HAL_Init+0x20>
    status = HAL_ERROR;
 8002a06:	2401      	movs	r4, #1
}
 8002a08:	4620      	mov	r0, r4
 8002a0a:	bd10      	pop	{r4, pc}
 8002a0c:	4604      	mov	r4, r0
    HAL_MspInit();
 8002a0e:	f7ff fe51 	bl	80026b4 <HAL_MspInit>
 8002a12:	e7f9      	b.n	8002a08 <HAL_Init+0x1c>
 8002a14:	40022000 	.word	0x40022000

08002a18 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002a18:	4b03      	ldr	r3, [pc, #12]	; (8002a28 <HAL_IncTick+0x10>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	4a03      	ldr	r2, [pc, #12]	; (8002a2c <HAL_IncTick+0x14>)
 8002a1e:	6811      	ldr	r1, [r2, #0]
 8002a20:	440b      	add	r3, r1
 8002a22:	6013      	str	r3, [r2, #0]
}
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	20000f48 	.word	0x20000f48
 8002a2c:	200017d4 	.word	0x200017d4

08002a30 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002a30:	4b01      	ldr	r3, [pc, #4]	; (8002a38 <HAL_GetTick+0x8>)
 8002a32:	6818      	ldr	r0, [r3, #0]
}
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	200017d4 	.word	0x200017d4

08002a3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a3c:	b538      	push	{r3, r4, r5, lr}
 8002a3e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002a40:	f7ff fff6 	bl	8002a30 <HAL_GetTick>
 8002a44:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a46:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002a4a:	d002      	beq.n	8002a52 <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 8002a4c:	4b04      	ldr	r3, [pc, #16]	; (8002a60 <HAL_Delay+0x24>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a52:	f7ff ffed 	bl	8002a30 <HAL_GetTick>
 8002a56:	1b40      	subs	r0, r0, r5
 8002a58:	42a0      	cmp	r0, r4
 8002a5a:	d3fa      	bcc.n	8002a52 <HAL_Delay+0x16>
  {
  }
}
 8002a5c:	bd38      	pop	{r3, r4, r5, pc}
 8002a5e:	bf00      	nop
 8002a60:	20000f48 	.word	0x20000f48

08002a64 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a64:	4a07      	ldr	r2, [pc, #28]	; (8002a84 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002a66:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a68:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a6c:	041b      	lsls	r3, r3, #16
 8002a6e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a70:	0200      	lsls	r0, r0, #8
 8002a72:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a76:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002a80:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002a82:	4770      	bx	lr
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a88:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a8a:	4b19      	ldr	r3, [pc, #100]	; (8002af0 <HAL_NVIC_SetPriority+0x68>)
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a92:	f1c3 0c07 	rsb	ip, r3, #7
 8002a96:	f1bc 0f04 	cmp.w	ip, #4
 8002a9a:	bf28      	it	cs
 8002a9c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aa0:	f103 0e04 	add.w	lr, r3, #4
 8002aa4:	f1be 0f06 	cmp.w	lr, #6
 8002aa8:	d918      	bls.n	8002adc <HAL_NVIC_SetPriority+0x54>
 8002aaa:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aac:	f04f 3eff 	mov.w	lr, #4294967295
 8002ab0:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002ab4:	ea21 010c 	bic.w	r1, r1, ip
 8002ab8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aba:	fa0e f303 	lsl.w	r3, lr, r3
 8002abe:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002ac4:	2800      	cmp	r0, #0
 8002ac6:	db0b      	blt.n	8002ae0 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac8:	0109      	lsls	r1, r1, #4
 8002aca:	b2c9      	uxtb	r1, r1
 8002acc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002ad0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002ad4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002ad8:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002adc:	2300      	movs	r3, #0
 8002ade:	e7e5      	b.n	8002aac <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae0:	f000 000f 	and.w	r0, r0, #15
 8002ae4:	0109      	lsls	r1, r1, #4
 8002ae6:	b2c9      	uxtb	r1, r1
 8002ae8:	4b02      	ldr	r3, [pc, #8]	; (8002af4 <HAL_NVIC_SetPriority+0x6c>)
 8002aea:	5419      	strb	r1, [r3, r0]
 8002aec:	e7f4      	b.n	8002ad8 <HAL_NVIC_SetPriority+0x50>
 8002aee:	bf00      	nop
 8002af0:	e000ed00 	.word	0xe000ed00
 8002af4:	e000ed14 	.word	0xe000ed14

08002af8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002af8:	2800      	cmp	r0, #0
 8002afa:	db07      	blt.n	8002b0c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002afc:	f000 021f 	and.w	r2, r0, #31
 8002b00:	0940      	lsrs	r0, r0, #5
 8002b02:	2301      	movs	r3, #1
 8002b04:	4093      	lsls	r3, r2
 8002b06:	4a02      	ldr	r2, [pc, #8]	; (8002b10 <HAL_NVIC_EnableIRQ+0x18>)
 8002b08:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	e000e100 	.word	0xe000e100

08002b14 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b14:	3801      	subs	r0, #1
 8002b16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002b1a:	d20b      	bcs.n	8002b34 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b1c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002b20:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b22:	4a05      	ldr	r2, [pc, #20]	; (8002b38 <HAL_SYSTICK_Config+0x24>)
 8002b24:	21f0      	movs	r1, #240	; 0xf0
 8002b26:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b2e:	2207      	movs	r2, #7
 8002b30:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b32:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002b34:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002b36:	4770      	bx	lr
 8002b38:	e000ed00 	.word	0xe000ed00

08002b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b3e:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8002b40:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b42:	e062      	b.n	8002c0a <HAL_GPIO_Init+0xce>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b44:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b46:	005e      	lsls	r6, r3, #1
 8002b48:	2403      	movs	r4, #3
 8002b4a:	40b4      	lsls	r4, r6
 8002b4c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b50:	68cc      	ldr	r4, [r1, #12]
 8002b52:	40b4      	lsls	r4, r6
 8002b54:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8002b56:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b58:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b5a:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b5e:	684c      	ldr	r4, [r1, #4]
 8002b60:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8002b64:	409c      	lsls	r4, r3
 8002b66:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8002b6a:	6044      	str	r4, [r0, #4]
 8002b6c:	e05e      	b.n	8002c2c <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b6e:	08dd      	lsrs	r5, r3, #3
 8002b70:	3508      	adds	r5, #8
 8002b72:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b76:	f003 0407 	and.w	r4, r3, #7
 8002b7a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8002b7e:	240f      	movs	r4, #15
 8002b80:	fa04 f40c 	lsl.w	r4, r4, ip
 8002b84:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b88:	690c      	ldr	r4, [r1, #16]
 8002b8a:	fa04 f40c 	lsl.w	r4, r4, ip
 8002b8e:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8002b92:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8002b96:	e060      	b.n	8002c5a <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b98:	2404      	movs	r4, #4
 8002b9a:	e000      	b.n	8002b9e <HAL_GPIO_Init+0x62>
 8002b9c:	2400      	movs	r4, #0
 8002b9e:	fa04 f40e 	lsl.w	r4, r4, lr
 8002ba2:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ba4:	f10c 0c02 	add.w	ip, ip, #2
 8002ba8:	4d52      	ldr	r5, [pc, #328]	; (8002cf4 <HAL_GPIO_Init+0x1b8>)
 8002baa:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bae:	4c52      	ldr	r4, [pc, #328]	; (8002cf8 <HAL_GPIO_Init+0x1bc>)
 8002bb0:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8002bb2:	43d4      	mvns	r4, r2
 8002bb4:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bb8:	684f      	ldr	r7, [r1, #4]
 8002bba:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002bbe:	d001      	beq.n	8002bc4 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8002bc0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8002bc4:	4d4c      	ldr	r5, [pc, #304]	; (8002cf8 <HAL_GPIO_Init+0x1bc>)
 8002bc6:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8002bc8:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8002bca:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bce:	684f      	ldr	r7, [r1, #4]
 8002bd0:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8002bd4:	d001      	beq.n	8002bda <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 8002bd6:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8002bda:	4d47      	ldr	r5, [pc, #284]	; (8002cf8 <HAL_GPIO_Init+0x1bc>)
 8002bdc:	60ee      	str	r6, [r5, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002bde:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8002be0:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002be4:	684f      	ldr	r7, [r1, #4]
 8002be6:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002bea:	d001      	beq.n	8002bf0 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 8002bec:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8002bf0:	4d41      	ldr	r5, [pc, #260]	; (8002cf8 <HAL_GPIO_Init+0x1bc>)
 8002bf2:	606e      	str	r6, [r5, #4]

        temp = EXTI->IMR1;
 8002bf4:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8002bf6:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bf8:	684e      	ldr	r6, [r1, #4]
 8002bfa:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8002bfe:	d001      	beq.n	8002c04 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 8002c00:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 8002c04:	4a3c      	ldr	r2, [pc, #240]	; (8002cf8 <HAL_GPIO_Init+0x1bc>)
 8002c06:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 8002c08:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c0a:	680a      	ldr	r2, [r1, #0]
 8002c0c:	fa32 f403 	lsrs.w	r4, r2, r3
 8002c10:	d06e      	beq.n	8002cf0 <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c12:	f04f 0c01 	mov.w	ip, #1
 8002c16:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8002c1a:	ea1c 0202 	ands.w	r2, ip, r2
 8002c1e:	d0f3      	beq.n	8002c08 <HAL_GPIO_Init+0xcc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c20:	684c      	ldr	r4, [r1, #4]
 8002c22:	f004 0403 	and.w	r4, r4, #3
 8002c26:	3c01      	subs	r4, #1
 8002c28:	2c01      	cmp	r4, #1
 8002c2a:	d98b      	bls.n	8002b44 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c2c:	684c      	ldr	r4, [r1, #4]
 8002c2e:	f004 0403 	and.w	r4, r4, #3
 8002c32:	2c03      	cmp	r4, #3
 8002c34:	d00c      	beq.n	8002c50 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8002c36:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c38:	005d      	lsls	r5, r3, #1
 8002c3a:	f04f 0c03 	mov.w	ip, #3
 8002c3e:	fa0c fc05 	lsl.w	ip, ip, r5
 8002c42:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c46:	688c      	ldr	r4, [r1, #8]
 8002c48:	40ac      	lsls	r4, r5
 8002c4a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8002c4e:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c50:	684c      	ldr	r4, [r1, #4]
 8002c52:	f004 0403 	and.w	r4, r4, #3
 8002c56:	2c02      	cmp	r4, #2
 8002c58:	d089      	beq.n	8002b6e <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 8002c5a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c5c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002c60:	f04f 0c03 	mov.w	ip, #3
 8002c64:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002c68:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c6c:	684c      	ldr	r4, [r1, #4]
 8002c6e:	f004 0403 	and.w	r4, r4, #3
 8002c72:	fa04 f40e 	lsl.w	r4, r4, lr
 8002c76:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8002c7a:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c7c:	684c      	ldr	r4, [r1, #4]
 8002c7e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8002c82:	d0c1      	beq.n	8002c08 <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c84:	4c1d      	ldr	r4, [pc, #116]	; (8002cfc <HAL_GPIO_Init+0x1c0>)
 8002c86:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8002c88:	f045 0501 	orr.w	r5, r5, #1
 8002c8c:	6625      	str	r5, [r4, #96]	; 0x60
 8002c8e:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8002c90:	f004 0401 	and.w	r4, r4, #1
 8002c94:	9401      	str	r4, [sp, #4]
 8002c96:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002c98:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8002c9c:	f10c 0502 	add.w	r5, ip, #2
 8002ca0:	4c14      	ldr	r4, [pc, #80]	; (8002cf4 <HAL_GPIO_Init+0x1b8>)
 8002ca2:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ca6:	f003 0403 	and.w	r4, r3, #3
 8002caa:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8002cae:	240f      	movs	r4, #15
 8002cb0:	fa04 f40e 	lsl.w	r4, r4, lr
 8002cb4:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cb8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8002cbc:	f43f af6e 	beq.w	8002b9c <HAL_GPIO_Init+0x60>
 8002cc0:	4c0f      	ldr	r4, [pc, #60]	; (8002d00 <HAL_GPIO_Init+0x1c4>)
 8002cc2:	42a0      	cmp	r0, r4
 8002cc4:	d00e      	beq.n	8002ce4 <HAL_GPIO_Init+0x1a8>
 8002cc6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002cca:	42a0      	cmp	r0, r4
 8002ccc:	d00c      	beq.n	8002ce8 <HAL_GPIO_Init+0x1ac>
 8002cce:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002cd2:	42a0      	cmp	r0, r4
 8002cd4:	d00a      	beq.n	8002cec <HAL_GPIO_Init+0x1b0>
 8002cd6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002cda:	42a0      	cmp	r0, r4
 8002cdc:	f43f af5c 	beq.w	8002b98 <HAL_GPIO_Init+0x5c>
 8002ce0:	2407      	movs	r4, #7
 8002ce2:	e75c      	b.n	8002b9e <HAL_GPIO_Init+0x62>
 8002ce4:	2401      	movs	r4, #1
 8002ce6:	e75a      	b.n	8002b9e <HAL_GPIO_Init+0x62>
 8002ce8:	2402      	movs	r4, #2
 8002cea:	e758      	b.n	8002b9e <HAL_GPIO_Init+0x62>
 8002cec:	2403      	movs	r4, #3
 8002cee:	e756      	b.n	8002b9e <HAL_GPIO_Init+0x62>
  }
}
 8002cf0:	b003      	add	sp, #12
 8002cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cf4:	40010000 	.word	0x40010000
 8002cf8:	40010400 	.word	0x40010400
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	48000400 	.word	0x48000400

08002d04 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d04:	b10a      	cbz	r2, 8002d0a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d06:	6181      	str	r1, [r0, #24]
 8002d08:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d0a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002d0c:	4770      	bx	lr

08002d0e <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002d0e:	4770      	bx	lr

08002d10 <HAL_GPIO_EXTI_IRQHandler>:
{
 8002d10:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d12:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	4203      	tst	r3, r0
 8002d18:	d100      	bne.n	8002d1c <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8002d1a:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d1c:	4b02      	ldr	r3, [pc, #8]	; (8002d28 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002d1e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d20:	f7ff fff5 	bl	8002d0e <HAL_GPIO_EXTI_Callback>
}
 8002d24:	e7f9      	b.n	8002d1a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002d26:	bf00      	nop
 8002d28:	40010400 	.word	0x40010400

08002d2c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d2c:	4b02      	ldr	r3, [pc, #8]	; (8002d38 <HAL_PWREx_GetVoltageRange+0xc>)
 8002d2e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002d30:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	40007000 	.word	0x40007000

08002d3c <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d3c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002d40:	d00f      	beq.n	8002d62 <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d42:	4b1f      	ldr	r3, [pc, #124]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d4e:	d034      	beq.n	8002dba <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d50:	4a1b      	ldr	r2, [pc, #108]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002d52:	6813      	ldr	r3, [r2, #0]
 8002d54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d5c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d5e:	2000      	movs	r0, #0
 8002d60:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d62:	4b17      	ldr	r3, [pc, #92]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d6e:	d020      	beq.n	8002db2 <HAL_PWREx_ControlVoltageScaling+0x76>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d70:	4a13      	ldr	r2, [pc, #76]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002d72:	6813      	ldr	r3, [r2, #0]
 8002d74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d7c:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d7e:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2232      	movs	r2, #50	; 0x32
 8002d84:	fb02 f303 	mul.w	r3, r2, r3
 8002d88:	4a0f      	ldr	r2, [pc, #60]	; (8002dc8 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8002d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8e:	0c9b      	lsrs	r3, r3, #18
 8002d90:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d92:	e000      	b.n	8002d96 <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 8002d94:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d96:	4a0a      	ldr	r2, [pc, #40]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002d98:	6952      	ldr	r2, [r2, #20]
 8002d9a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002d9e:	d001      	beq.n	8002da4 <HAL_PWREx_ControlVoltageScaling+0x68>
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1f7      	bne.n	8002d94 <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002da4:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002dac:	d103      	bne.n	8002db6 <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 8002dae:	2000      	movs	r0, #0
 8002db0:	4770      	bx	lr
 8002db2:	2000      	movs	r0, #0
 8002db4:	4770      	bx	lr
        return HAL_TIMEOUT;
 8002db6:	2003      	movs	r0, #3
 8002db8:	4770      	bx	lr
  return HAL_OK;
 8002dba:	2000      	movs	r0, #0
}
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	40007000 	.word	0x40007000
 8002dc4:	20000f44 	.word	0x20000f44
 8002dc8:	431bde83 	.word	0x431bde83

08002dcc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002dcc:	b530      	push	{r4, r5, lr}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002dd2:	4b20      	ldr	r3, [pc, #128]	; (8002e54 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8002dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002dda:	d00b      	beq.n	8002df4 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ddc:	f7ff ffa6 	bl	8002d2c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002de0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002de4:	d017      	beq.n	8002e16 <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002de6:	2c80      	cmp	r4, #128	; 0x80
 8002de8:	d81f      	bhi.n	8002e2a <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002dea:	d02d      	beq.n	8002e48 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002dec:	2c70      	cmp	r4, #112	; 0x70
 8002dee:	d02d      	beq.n	8002e4c <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002df0:	2100      	movs	r1, #0
 8002df2:	e01b      	b.n	8002e2c <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002df4:	4d17      	ldr	r5, [pc, #92]	; (8002e54 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8002df6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dfc:	65ab      	str	r3, [r5, #88]	; 0x58
 8002dfe:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e04:	9301      	str	r3, [sp, #4]
 8002e06:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002e08:	f7ff ff90 	bl	8002d2c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e0c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002e0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e12:	65ab      	str	r3, [r5, #88]	; 0x58
 8002e14:	e7e4      	b.n	8002de0 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8002e16:	2c80      	cmp	r4, #128	; 0x80
 8002e18:	d903      	bls.n	8002e22 <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8002e1a:	2ca0      	cmp	r4, #160	; 0xa0
 8002e1c:	d903      	bls.n	8002e26 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e1e:	2102      	movs	r1, #2
 8002e20:	e004      	b.n	8002e2c <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e22:	2100      	movs	r1, #0
 8002e24:	e002      	b.n	8002e2c <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e26:	2101      	movs	r1, #1
 8002e28:	e000      	b.n	8002e2c <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e2a:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e2c:	4a0a      	ldr	r2, [pc, #40]	; (8002e58 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8002e2e:	6813      	ldr	r3, [r2, #0]
 8002e30:	f023 0307 	bic.w	r3, r3, #7
 8002e34:	430b      	orrs	r3, r1
 8002e36:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e38:	6813      	ldr	r3, [r2, #0]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	428b      	cmp	r3, r1
 8002e40:	d106      	bne.n	8002e50 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8002e42:	2000      	movs	r0, #0
}
 8002e44:	b003      	add	sp, #12
 8002e46:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e48:	2102      	movs	r1, #2
 8002e4a:	e7ef      	b.n	8002e2c <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	e7ed      	b.n	8002e2c <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 8002e50:	2001      	movs	r0, #1
 8002e52:	e7f7      	b.n	8002e44 <RCC_SetFlashLatencyFromMSIRange+0x78>
 8002e54:	40021000 	.word	0x40021000
 8002e58:	40022000 	.word	0x40022000

08002e5c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e5c:	4a28      	ldr	r2, [pc, #160]	; (8002f00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e5e:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e60:	68d2      	ldr	r2, [r2, #12]
 8002e62:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e66:	f013 030c 	ands.w	r3, r3, #12
 8002e6a:	d00a      	beq.n	8002e82 <HAL_RCC_GetSysClockFreq+0x26>
 8002e6c:	2b0c      	cmp	r3, #12
 8002e6e:	d006      	beq.n	8002e7e <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d01f      	beq.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d020      	beq.n	8002eba <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e78:	2000      	movs	r0, #0
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	e010      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e7e:	2a01      	cmp	r2, #1
 8002e80:	d1f6      	bne.n	8002e70 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e82:	4a1f      	ldr	r2, [pc, #124]	; (8002f00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e84:	6812      	ldr	r2, [r2, #0]
 8002e86:	f012 0f08 	tst.w	r2, #8
 8002e8a:	d10c      	bne.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e8c:	4a1c      	ldr	r2, [pc, #112]	; (8002f00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e8e:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8002e92:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8002e96:	491b      	ldr	r1, [pc, #108]	; (8002f04 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002e98:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e9c:	b143      	cbz	r3, 8002eb0 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e9e:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ea0:	2b0c      	cmp	r3, #12
 8002ea2:	d00d      	beq.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x64>
}
 8002ea4:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ea6:	4a16      	ldr	r2, [pc, #88]	; (8002f00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ea8:	6812      	ldr	r2, [r2, #0]
 8002eaa:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002eae:	e7f2      	b.n	8002e96 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	e7f5      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 8002eb4:	4814      	ldr	r0, [pc, #80]	; (8002f08 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	e7f2      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8002eba:	4814      	ldr	r0, [pc, #80]	; (8002f0c <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	e7ef      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ec0:	4b0f      	ldr	r3, [pc, #60]	; (8002f00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d016      	beq.n	8002efa <HAL_RCC_GetSysClockFreq+0x9e>
 8002ecc:	2b03      	cmp	r3, #3
 8002ece:	d100      	bne.n	8002ed2 <HAL_RCC_GetSysClockFreq+0x76>
      pllvco = HSE_VALUE;
 8002ed0:	4a0e      	ldr	r2, [pc, #56]	; (8002f0c <HAL_RCC_GetSysClockFreq+0xb0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ed2:	490b      	ldr	r1, [pc, #44]	; (8002f00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ed4:	68c8      	ldr	r0, [r1, #12]
 8002ed6:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8002eda:	1c43      	adds	r3, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002edc:	68c8      	ldr	r0, [r1, #12]
 8002ede:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8002ee2:	fb02 f000 	mul.w	r0, r2, r0
 8002ee6:	fbb0 f0f3 	udiv	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002eea:	68cb      	ldr	r3, [r1, #12]
 8002eec:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 8002ef4:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8002ef8:	e7d4      	b.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x48>
    switch (pllsource)
 8002efa:	4a03      	ldr	r2, [pc, #12]	; (8002f08 <HAL_RCC_GetSysClockFreq+0xac>)
 8002efc:	e7e9      	b.n	8002ed2 <HAL_RCC_GetSysClockFreq+0x76>
 8002efe:	bf00      	nop
 8002f00:	40021000 	.word	0x40021000
 8002f04:	08007850 	.word	0x08007850
 8002f08:	00f42400 	.word	0x00f42400
 8002f0c:	007a1200 	.word	0x007a1200

08002f10 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8002f10:	2800      	cmp	r0, #0
 8002f12:	f000 831c 	beq.w	800354e <HAL_RCC_OscConfig+0x63e>
{
 8002f16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f1c:	4b96      	ldr	r3, [pc, #600]	; (8003178 <HAL_RCC_OscConfig+0x268>)
 8002f1e:	689d      	ldr	r5, [r3, #8]
 8002f20:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f24:	68de      	ldr	r6, [r3, #12]
 8002f26:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f2a:	6803      	ldr	r3, [r0, #0]
 8002f2c:	f013 0f10 	tst.w	r3, #16
 8002f30:	d05a      	beq.n	8002fe8 <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f32:	b1e5      	cbz	r5, 8002f6e <HAL_RCC_OscConfig+0x5e>
 8002f34:	2d0c      	cmp	r5, #12
 8002f36:	d018      	beq.n	8002f6a <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f38:	69a3      	ldr	r3, [r4, #24]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 80bb 	beq.w	80030b6 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 8002f40:	4a8d      	ldr	r2, [pc, #564]	; (8003178 <HAL_RCC_OscConfig+0x268>)
 8002f42:	6813      	ldr	r3, [r2, #0]
 8002f44:	f043 0301 	orr.w	r3, r3, #1
 8002f48:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002f4a:	f7ff fd71 	bl	8002a30 <HAL_GetTick>
 8002f4e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f50:	4b89      	ldr	r3, [pc, #548]	; (8003178 <HAL_RCC_OscConfig+0x268>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f013 0f02 	tst.w	r3, #2
 8002f58:	f040 809a 	bne.w	8003090 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f5c:	f7ff fd68 	bl	8002a30 <HAL_GetTick>
 8002f60:	1bc0      	subs	r0, r0, r7
 8002f62:	2802      	cmp	r0, #2
 8002f64:	d9f4      	bls.n	8002f50 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 8002f66:	2003      	movs	r0, #3
 8002f68:	e2fc      	b.n	8003564 <HAL_RCC_OscConfig+0x654>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f6a:	2e01      	cmp	r6, #1
 8002f6c:	d1e4      	bne.n	8002f38 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f6e:	4b82      	ldr	r3, [pc, #520]	; (8003178 <HAL_RCC_OscConfig+0x268>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f013 0f02 	tst.w	r3, #2
 8002f76:	d003      	beq.n	8002f80 <HAL_RCC_OscConfig+0x70>
 8002f78:	69a3      	ldr	r3, [r4, #24]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 82e9 	beq.w	8003552 <HAL_RCC_OscConfig+0x642>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f80:	6a20      	ldr	r0, [r4, #32]
 8002f82:	4b7d      	ldr	r3, [pc, #500]	; (8003178 <HAL_RCC_OscConfig+0x268>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f013 0f08 	tst.w	r3, #8
 8002f8a:	d05b      	beq.n	8003044 <HAL_RCC_OscConfig+0x134>
 8002f8c:	4b7a      	ldr	r3, [pc, #488]	; (8003178 <HAL_RCC_OscConfig+0x268>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f94:	4298      	cmp	r0, r3
 8002f96:	d85c      	bhi.n	8003052 <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f98:	4b77      	ldr	r3, [pc, #476]	; (8003178 <HAL_RCC_OscConfig+0x268>)
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	f042 0208 	orr.w	r2, r2, #8
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002fa8:	6a21      	ldr	r1, [r4, #32]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002fb4:	69e1      	ldr	r1, [r4, #28]
 8002fb6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002fba:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fbc:	2d00      	cmp	r5, #0
 8002fbe:	d060      	beq.n	8003082 <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fc0:	f7ff ff4c 	bl	8002e5c <HAL_RCC_GetSysClockFreq>
 8002fc4:	4b6c      	ldr	r3, [pc, #432]	; (8003178 <HAL_RCC_OscConfig+0x268>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002fcc:	4a6b      	ldr	r2, [pc, #428]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002fce:	5cd3      	ldrb	r3, [r2, r3]
 8002fd0:	f003 031f 	and.w	r3, r3, #31
 8002fd4:	40d8      	lsrs	r0, r3
 8002fd6:	4b6a      	ldr	r3, [pc, #424]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 8002fd8:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8002fda:	4b6a      	ldr	r3, [pc, #424]	; (8003184 <HAL_RCC_OscConfig+0x274>)
 8002fdc:	6818      	ldr	r0, [r3, #0]
 8002fde:	f7ff fcdd 	bl	800299c <HAL_InitTick>
        if(status != HAL_OK)
 8002fe2:	2800      	cmp	r0, #0
 8002fe4:	f040 82be 	bne.w	8003564 <HAL_RCC_OscConfig+0x654>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fe8:	6823      	ldr	r3, [r4, #0]
 8002fea:	f013 0f01 	tst.w	r3, #1
 8002fee:	f000 8081 	beq.w	80030f4 <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ff2:	2d08      	cmp	r5, #8
 8002ff4:	d075      	beq.n	80030e2 <HAL_RCC_OscConfig+0x1d2>
 8002ff6:	2d0c      	cmp	r5, #12
 8002ff8:	d071      	beq.n	80030de <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ffa:	6863      	ldr	r3, [r4, #4]
 8002ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003000:	f000 8097 	beq.w	8003132 <HAL_RCC_OscConfig+0x222>
 8003004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003008:	f000 8099 	beq.w	800313e <HAL_RCC_OscConfig+0x22e>
 800300c:	4b5a      	ldr	r3, [pc, #360]	; (8003178 <HAL_RCC_OscConfig+0x268>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800301c:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800301e:	6863      	ldr	r3, [r4, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 8099 	beq.w	8003158 <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 8003026:	f7ff fd03 	bl	8002a30 <HAL_GetTick>
 800302a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800302c:	4b52      	ldr	r3, [pc, #328]	; (8003178 <HAL_RCC_OscConfig+0x268>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003034:	d15e      	bne.n	80030f4 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003036:	f7ff fcfb 	bl	8002a30 <HAL_GetTick>
 800303a:	1bc0      	subs	r0, r0, r7
 800303c:	2864      	cmp	r0, #100	; 0x64
 800303e:	d9f5      	bls.n	800302c <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 8003040:	2003      	movs	r0, #3
 8003042:	e28f      	b.n	8003564 <HAL_RCC_OscConfig+0x654>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003044:	4b4c      	ldr	r3, [pc, #304]	; (8003178 <HAL_RCC_OscConfig+0x268>)
 8003046:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800304a:	091b      	lsrs	r3, r3, #4
 800304c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003050:	e7a0      	b.n	8002f94 <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003052:	f7ff febb 	bl	8002dcc <RCC_SetFlashLatencyFromMSIRange>
 8003056:	2800      	cmp	r0, #0
 8003058:	f040 827d 	bne.w	8003556 <HAL_RCC_OscConfig+0x646>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800305c:	4b46      	ldr	r3, [pc, #280]	; (8003178 <HAL_RCC_OscConfig+0x268>)
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	f042 0208 	orr.w	r2, r2, #8
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800306c:	6a21      	ldr	r1, [r4, #32]
 800306e:	430a      	orrs	r2, r1
 8003070:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003078:	69e1      	ldr	r1, [r4, #28]
 800307a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800307e:	605a      	str	r2, [r3, #4]
 8003080:	e79e      	b.n	8002fc0 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003082:	6a20      	ldr	r0, [r4, #32]
 8003084:	f7ff fea2 	bl	8002dcc <RCC_SetFlashLatencyFromMSIRange>
 8003088:	2800      	cmp	r0, #0
 800308a:	d099      	beq.n	8002fc0 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 800308c:	2001      	movs	r0, #1
 800308e:	e269      	b.n	8003564 <HAL_RCC_OscConfig+0x654>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003090:	4b39      	ldr	r3, [pc, #228]	; (8003178 <HAL_RCC_OscConfig+0x268>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	f042 0208 	orr.w	r2, r2, #8
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80030a0:	6a21      	ldr	r1, [r4, #32]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80030ac:	69e1      	ldr	r1, [r4, #28]
 80030ae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80030b2:	605a      	str	r2, [r3, #4]
 80030b4:	e798      	b.n	8002fe8 <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 80030b6:	4a30      	ldr	r2, [pc, #192]	; (8003178 <HAL_RCC_OscConfig+0x268>)
 80030b8:	6813      	ldr	r3, [r2, #0]
 80030ba:	f023 0301 	bic.w	r3, r3, #1
 80030be:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80030c0:	f7ff fcb6 	bl	8002a30 <HAL_GetTick>
 80030c4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030c6:	4b2c      	ldr	r3, [pc, #176]	; (8003178 <HAL_RCC_OscConfig+0x268>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f013 0f02 	tst.w	r3, #2
 80030ce:	d08b      	beq.n	8002fe8 <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030d0:	f7ff fcae 	bl	8002a30 <HAL_GetTick>
 80030d4:	1bc0      	subs	r0, r0, r7
 80030d6:	2802      	cmp	r0, #2
 80030d8:	d9f5      	bls.n	80030c6 <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 80030da:	2003      	movs	r0, #3
 80030dc:	e242      	b.n	8003564 <HAL_RCC_OscConfig+0x654>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80030de:	2e03      	cmp	r6, #3
 80030e0:	d18b      	bne.n	8002ffa <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e2:	4b25      	ldr	r3, [pc, #148]	; (8003178 <HAL_RCC_OscConfig+0x268>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80030ea:	d003      	beq.n	80030f4 <HAL_RCC_OscConfig+0x1e4>
 80030ec:	6863      	ldr	r3, [r4, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 8233 	beq.w	800355a <HAL_RCC_OscConfig+0x64a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030f4:	6823      	ldr	r3, [r4, #0]
 80030f6:	f013 0f02 	tst.w	r3, #2
 80030fa:	d058      	beq.n	80031ae <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80030fc:	2d04      	cmp	r5, #4
 80030fe:	d045      	beq.n	800318c <HAL_RCC_OscConfig+0x27c>
 8003100:	2d0c      	cmp	r5, #12
 8003102:	d041      	beq.n	8003188 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003104:	68e3      	ldr	r3, [r4, #12]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d077      	beq.n	80031fa <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 800310a:	4a1b      	ldr	r2, [pc, #108]	; (8003178 <HAL_RCC_OscConfig+0x268>)
 800310c:	6813      	ldr	r3, [r2, #0]
 800310e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003112:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003114:	f7ff fc8c 	bl	8002a30 <HAL_GetTick>
 8003118:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800311a:	4b17      	ldr	r3, [pc, #92]	; (8003178 <HAL_RCC_OscConfig+0x268>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003122:	d161      	bne.n	80031e8 <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003124:	f7ff fc84 	bl	8002a30 <HAL_GetTick>
 8003128:	1b80      	subs	r0, r0, r6
 800312a:	2802      	cmp	r0, #2
 800312c:	d9f5      	bls.n	800311a <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 800312e:	2003      	movs	r0, #3
 8003130:	e218      	b.n	8003564 <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003132:	4a11      	ldr	r2, [pc, #68]	; (8003178 <HAL_RCC_OscConfig+0x268>)
 8003134:	6813      	ldr	r3, [r2, #0]
 8003136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	e76f      	b.n	800301e <HAL_RCC_OscConfig+0x10e>
 800313e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003142:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	e762      	b.n	800301e <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 8003158:	f7ff fc6a 	bl	8002a30 <HAL_GetTick>
 800315c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800315e:	4b06      	ldr	r3, [pc, #24]	; (8003178 <HAL_RCC_OscConfig+0x268>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003166:	d0c5      	beq.n	80030f4 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003168:	f7ff fc62 	bl	8002a30 <HAL_GetTick>
 800316c:	1bc0      	subs	r0, r0, r7
 800316e:	2864      	cmp	r0, #100	; 0x64
 8003170:	d9f5      	bls.n	800315e <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 8003172:	2003      	movs	r0, #3
 8003174:	e1f6      	b.n	8003564 <HAL_RCC_OscConfig+0x654>
 8003176:	bf00      	nop
 8003178:	40021000 	.word	0x40021000
 800317c:	08007840 	.word	0x08007840
 8003180:	20000f44 	.word	0x20000f44
 8003184:	20000f4c 	.word	0x20000f4c
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003188:	2e02      	cmp	r6, #2
 800318a:	d1bb      	bne.n	8003104 <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800318c:	4ba4      	ldr	r3, [pc, #656]	; (8003420 <HAL_RCC_OscConfig+0x510>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003194:	d003      	beq.n	800319e <HAL_RCC_OscConfig+0x28e>
 8003196:	68e3      	ldr	r3, [r4, #12]
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 81e0 	beq.w	800355e <HAL_RCC_OscConfig+0x64e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800319e:	4aa0      	ldr	r2, [pc, #640]	; (8003420 <HAL_RCC_OscConfig+0x510>)
 80031a0:	6853      	ldr	r3, [r2, #4]
 80031a2:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80031a6:	6921      	ldr	r1, [r4, #16]
 80031a8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80031ac:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ae:	6823      	ldr	r3, [r4, #0]
 80031b0:	f013 0f08 	tst.w	r3, #8
 80031b4:	d04c      	beq.n	8003250 <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031b6:	6963      	ldr	r3, [r4, #20]
 80031b8:	b39b      	cbz	r3, 8003222 <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 80031ba:	4a99      	ldr	r2, [pc, #612]	; (8003420 <HAL_RCC_OscConfig+0x510>)
 80031bc:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80031c8:	f7ff fc32 	bl	8002a30 <HAL_GetTick>
 80031cc:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031ce:	4b94      	ldr	r3, [pc, #592]	; (8003420 <HAL_RCC_OscConfig+0x510>)
 80031d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031d4:	f013 0f02 	tst.w	r3, #2
 80031d8:	d13a      	bne.n	8003250 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031da:	f7ff fc29 	bl	8002a30 <HAL_GetTick>
 80031de:	1b80      	subs	r0, r0, r6
 80031e0:	2802      	cmp	r0, #2
 80031e2:	d9f4      	bls.n	80031ce <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 80031e4:	2003      	movs	r0, #3
 80031e6:	e1bd      	b.n	8003564 <HAL_RCC_OscConfig+0x654>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e8:	4a8d      	ldr	r2, [pc, #564]	; (8003420 <HAL_RCC_OscConfig+0x510>)
 80031ea:	6853      	ldr	r3, [r2, #4]
 80031ec:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80031f0:	6921      	ldr	r1, [r4, #16]
 80031f2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80031f6:	6053      	str	r3, [r2, #4]
 80031f8:	e7d9      	b.n	80031ae <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 80031fa:	4a89      	ldr	r2, [pc, #548]	; (8003420 <HAL_RCC_OscConfig+0x510>)
 80031fc:	6813      	ldr	r3, [r2, #0]
 80031fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003202:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003204:	f7ff fc14 	bl	8002a30 <HAL_GetTick>
 8003208:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800320a:	4b85      	ldr	r3, [pc, #532]	; (8003420 <HAL_RCC_OscConfig+0x510>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003212:	d0cc      	beq.n	80031ae <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003214:	f7ff fc0c 	bl	8002a30 <HAL_GetTick>
 8003218:	1b80      	subs	r0, r0, r6
 800321a:	2802      	cmp	r0, #2
 800321c:	d9f5      	bls.n	800320a <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 800321e:	2003      	movs	r0, #3
 8003220:	e1a0      	b.n	8003564 <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_LSI_DISABLE();
 8003222:	4a7f      	ldr	r2, [pc, #508]	; (8003420 <HAL_RCC_OscConfig+0x510>)
 8003224:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003228:	f023 0301 	bic.w	r3, r3, #1
 800322c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003230:	f7ff fbfe 	bl	8002a30 <HAL_GetTick>
 8003234:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003236:	4b7a      	ldr	r3, [pc, #488]	; (8003420 <HAL_RCC_OscConfig+0x510>)
 8003238:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800323c:	f013 0f02 	tst.w	r3, #2
 8003240:	d006      	beq.n	8003250 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003242:	f7ff fbf5 	bl	8002a30 <HAL_GetTick>
 8003246:	1b80      	subs	r0, r0, r6
 8003248:	2802      	cmp	r0, #2
 800324a:	d9f4      	bls.n	8003236 <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 800324c:	2003      	movs	r0, #3
 800324e:	e189      	b.n	8003564 <HAL_RCC_OscConfig+0x654>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003250:	6823      	ldr	r3, [r4, #0]
 8003252:	f013 0f04 	tst.w	r3, #4
 8003256:	d07a      	beq.n	800334e <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003258:	4b71      	ldr	r3, [pc, #452]	; (8003420 <HAL_RCC_OscConfig+0x510>)
 800325a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003260:	d136      	bne.n	80032d0 <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003262:	4b6f      	ldr	r3, [pc, #444]	; (8003420 <HAL_RCC_OscConfig+0x510>)
 8003264:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003266:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800326a:	659a      	str	r2, [r3, #88]	; 0x58
 800326c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003272:	9301      	str	r3, [sp, #4]
 8003274:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003276:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003278:	4b6a      	ldr	r3, [pc, #424]	; (8003424 <HAL_RCC_OscConfig+0x514>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003280:	d028      	beq.n	80032d4 <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003282:	68a3      	ldr	r3, [r4, #8]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d039      	beq.n	80032fc <HAL_RCC_OscConfig+0x3ec>
 8003288:	2b05      	cmp	r3, #5
 800328a:	d03f      	beq.n	800330c <HAL_RCC_OscConfig+0x3fc>
 800328c:	4b64      	ldr	r3, [pc, #400]	; (8003420 <HAL_RCC_OscConfig+0x510>)
 800328e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003292:	f022 0201 	bic.w	r2, r2, #1
 8003296:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800329a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800329e:	f022 0204 	bic.w	r2, r2, #4
 80032a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032a6:	68a3      	ldr	r3, [r4, #8]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d03d      	beq.n	8003328 <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 80032ac:	f7ff fbc0 	bl	8002a30 <HAL_GetTick>
 80032b0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032b2:	4b5b      	ldr	r3, [pc, #364]	; (8003420 <HAL_RCC_OscConfig+0x510>)
 80032b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b8:	f013 0f02 	tst.w	r3, #2
 80032bc:	d146      	bne.n	800334c <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032be:	f7ff fbb7 	bl	8002a30 <HAL_GetTick>
 80032c2:	1bc0      	subs	r0, r0, r7
 80032c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80032c8:	4298      	cmp	r0, r3
 80032ca:	d9f2      	bls.n	80032b2 <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 80032cc:	2003      	movs	r0, #3
 80032ce:	e149      	b.n	8003564 <HAL_RCC_OscConfig+0x654>
    FlagStatus       pwrclkchanged = RESET;
 80032d0:	2600      	movs	r6, #0
 80032d2:	e7d1      	b.n	8003278 <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032d4:	4a53      	ldr	r2, [pc, #332]	; (8003424 <HAL_RCC_OscConfig+0x514>)
 80032d6:	6813      	ldr	r3, [r2, #0]
 80032d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032dc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80032de:	f7ff fba7 	bl	8002a30 <HAL_GetTick>
 80032e2:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032e4:	4b4f      	ldr	r3, [pc, #316]	; (8003424 <HAL_RCC_OscConfig+0x514>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80032ec:	d1c9      	bne.n	8003282 <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ee:	f7ff fb9f 	bl	8002a30 <HAL_GetTick>
 80032f2:	1bc0      	subs	r0, r0, r7
 80032f4:	2802      	cmp	r0, #2
 80032f6:	d9f5      	bls.n	80032e4 <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 80032f8:	2003      	movs	r0, #3
 80032fa:	e133      	b.n	8003564 <HAL_RCC_OscConfig+0x654>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032fc:	4a48      	ldr	r2, [pc, #288]	; (8003420 <HAL_RCC_OscConfig+0x510>)
 80032fe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003302:	f043 0301 	orr.w	r3, r3, #1
 8003306:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800330a:	e7cc      	b.n	80032a6 <HAL_RCC_OscConfig+0x396>
 800330c:	4b44      	ldr	r3, [pc, #272]	; (8003420 <HAL_RCC_OscConfig+0x510>)
 800330e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003312:	f042 0204 	orr.w	r2, r2, #4
 8003316:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800331a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800331e:	f042 0201 	orr.w	r2, r2, #1
 8003322:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003326:	e7be      	b.n	80032a6 <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 8003328:	f7ff fb82 	bl	8002a30 <HAL_GetTick>
 800332c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800332e:	4b3c      	ldr	r3, [pc, #240]	; (8003420 <HAL_RCC_OscConfig+0x510>)
 8003330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003334:	f013 0f02 	tst.w	r3, #2
 8003338:	d008      	beq.n	800334c <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800333a:	f7ff fb79 	bl	8002a30 <HAL_GetTick>
 800333e:	1bc0      	subs	r0, r0, r7
 8003340:	f241 3388 	movw	r3, #5000	; 0x1388
 8003344:	4298      	cmp	r0, r3
 8003346:	d9f2      	bls.n	800332e <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 8003348:	2003      	movs	r0, #3
 800334a:	e10b      	b.n	8003564 <HAL_RCC_OscConfig+0x654>
    if(pwrclkchanged == SET)
 800334c:	b9e6      	cbnz	r6, 8003388 <HAL_RCC_OscConfig+0x478>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800334e:	6823      	ldr	r3, [r4, #0]
 8003350:	f013 0f20 	tst.w	r3, #32
 8003354:	d035      	beq.n	80033c2 <HAL_RCC_OscConfig+0x4b2>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003356:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003358:	b1e3      	cbz	r3, 8003394 <HAL_RCC_OscConfig+0x484>
      __HAL_RCC_HSI48_ENABLE();
 800335a:	4a31      	ldr	r2, [pc, #196]	; (8003420 <HAL_RCC_OscConfig+0x510>)
 800335c:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8003360:	f043 0301 	orr.w	r3, r3, #1
 8003364:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003368:	f7ff fb62 	bl	8002a30 <HAL_GetTick>
 800336c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800336e:	4b2c      	ldr	r3, [pc, #176]	; (8003420 <HAL_RCC_OscConfig+0x510>)
 8003370:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003374:	f013 0f02 	tst.w	r3, #2
 8003378:	d123      	bne.n	80033c2 <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800337a:	f7ff fb59 	bl	8002a30 <HAL_GetTick>
 800337e:	1b80      	subs	r0, r0, r6
 8003380:	2802      	cmp	r0, #2
 8003382:	d9f4      	bls.n	800336e <HAL_RCC_OscConfig+0x45e>
          return HAL_TIMEOUT;
 8003384:	2003      	movs	r0, #3
 8003386:	e0ed      	b.n	8003564 <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003388:	4a25      	ldr	r2, [pc, #148]	; (8003420 <HAL_RCC_OscConfig+0x510>)
 800338a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800338c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003390:	6593      	str	r3, [r2, #88]	; 0x58
 8003392:	e7dc      	b.n	800334e <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_HSI48_DISABLE();
 8003394:	4a22      	ldr	r2, [pc, #136]	; (8003420 <HAL_RCC_OscConfig+0x510>)
 8003396:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 800339a:	f023 0301 	bic.w	r3, r3, #1
 800339e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 80033a2:	f7ff fb45 	bl	8002a30 <HAL_GetTick>
 80033a6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033a8:	4b1d      	ldr	r3, [pc, #116]	; (8003420 <HAL_RCC_OscConfig+0x510>)
 80033aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033ae:	f013 0f02 	tst.w	r3, #2
 80033b2:	d006      	beq.n	80033c2 <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033b4:	f7ff fb3c 	bl	8002a30 <HAL_GetTick>
 80033b8:	1b80      	subs	r0, r0, r6
 80033ba:	2802      	cmp	r0, #2
 80033bc:	d9f4      	bls.n	80033a8 <HAL_RCC_OscConfig+0x498>
          return HAL_TIMEOUT;
 80033be:	2003      	movs	r0, #3
 80033c0:	e0d0      	b.n	8003564 <HAL_RCC_OscConfig+0x654>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 80cc 	beq.w	8003562 <HAL_RCC_OscConfig+0x652>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d017      	beq.n	80033fe <HAL_RCC_OscConfig+0x4ee>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033ce:	2d0c      	cmp	r5, #12
 80033d0:	f000 80cc 	beq.w	800356c <HAL_RCC_OscConfig+0x65c>
        __HAL_RCC_PLL_DISABLE();
 80033d4:	4a12      	ldr	r2, [pc, #72]	; (8003420 <HAL_RCC_OscConfig+0x510>)
 80033d6:	6813      	ldr	r3, [r2, #0]
 80033d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033dc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80033de:	f7ff fb27 	bl	8002a30 <HAL_GetTick>
 80033e2:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033e4:	4b0e      	ldr	r3, [pc, #56]	; (8003420 <HAL_RCC_OscConfig+0x510>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80033ec:	f000 80a8 	beq.w	8003540 <HAL_RCC_OscConfig+0x630>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f0:	f7ff fb1e 	bl	8002a30 <HAL_GetTick>
 80033f4:	1b00      	subs	r0, r0, r4
 80033f6:	2802      	cmp	r0, #2
 80033f8:	d9f4      	bls.n	80033e4 <HAL_RCC_OscConfig+0x4d4>
            return HAL_TIMEOUT;
 80033fa:	2003      	movs	r0, #3
 80033fc:	e0b2      	b.n	8003564 <HAL_RCC_OscConfig+0x654>
      pll_config = RCC->PLLCFGR;
 80033fe:	4b08      	ldr	r3, [pc, #32]	; (8003420 <HAL_RCC_OscConfig+0x510>)
 8003400:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003402:	f003 0103 	and.w	r1, r3, #3
 8003406:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003408:	4291      	cmp	r1, r2
 800340a:	d00d      	beq.n	8003428 <HAL_RCC_OscConfig+0x518>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800340c:	2d0c      	cmp	r5, #12
 800340e:	f000 80ab 	beq.w	8003568 <HAL_RCC_OscConfig+0x658>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003412:	4b03      	ldr	r3, [pc, #12]	; (8003420 <HAL_RCC_OscConfig+0x510>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 800341a:	d02f      	beq.n	800347c <HAL_RCC_OscConfig+0x56c>
            return HAL_ERROR;
 800341c:	2001      	movs	r0, #1
 800341e:	e0a1      	b.n	8003564 <HAL_RCC_OscConfig+0x654>
 8003420:	40021000 	.word	0x40021000
 8003424:	40007000 	.word	0x40007000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003428:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800342c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800342e:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003430:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8003434:	d1ea      	bne.n	800340c <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003436:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800343a:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800343c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8003440:	d1e4      	bne.n	800340c <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003442:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003446:	6ba1      	ldr	r1, [r4, #56]	; 0x38
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003448:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800344c:	d1de      	bne.n	800340c <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800344e:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8003452:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003454:	0852      	lsrs	r2, r2, #1
 8003456:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003458:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800345c:	d1d6      	bne.n	800340c <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800345e:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003462:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003464:	0852      	lsrs	r2, r2, #1
 8003466:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003468:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800346c:	d1ce      	bne.n	800340c <HAL_RCC_OscConfig+0x4fc>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800346e:	4b40      	ldr	r3, [pc, #256]	; (8003570 <HAL_RCC_OscConfig+0x660>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003476:	d049      	beq.n	800350c <HAL_RCC_OscConfig+0x5fc>
  return HAL_OK;
 8003478:	2000      	movs	r0, #0
 800347a:	e073      	b.n	8003564 <HAL_RCC_OscConfig+0x654>
            __HAL_RCC_PLL_DISABLE();
 800347c:	4a3c      	ldr	r2, [pc, #240]	; (8003570 <HAL_RCC_OscConfig+0x660>)
 800347e:	6813      	ldr	r3, [r2, #0]
 8003480:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003484:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8003486:	f7ff fad3 	bl	8002a30 <HAL_GetTick>
 800348a:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800348c:	4b38      	ldr	r3, [pc, #224]	; (8003570 <HAL_RCC_OscConfig+0x660>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003494:	d006      	beq.n	80034a4 <HAL_RCC_OscConfig+0x594>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003496:	f7ff facb 	bl	8002a30 <HAL_GetTick>
 800349a:	1b40      	subs	r0, r0, r5
 800349c:	2802      	cmp	r0, #2
 800349e:	d9f5      	bls.n	800348c <HAL_RCC_OscConfig+0x57c>
                return HAL_TIMEOUT;
 80034a0:	2003      	movs	r0, #3
 80034a2:	e05f      	b.n	8003564 <HAL_RCC_OscConfig+0x654>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034a4:	4a32      	ldr	r2, [pc, #200]	; (8003570 <HAL_RCC_OscConfig+0x660>)
 80034a6:	68d3      	ldr	r3, [r2, #12]
 80034a8:	4932      	ldr	r1, [pc, #200]	; (8003574 <HAL_RCC_OscConfig+0x664>)
 80034aa:	4019      	ands	r1, r3
 80034ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80034ae:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80034b0:	3801      	subs	r0, #1
 80034b2:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80034b6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80034b8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80034bc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80034be:	0840      	lsrs	r0, r0, #1
 80034c0:	3801      	subs	r0, #1
 80034c2:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 80034c6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80034c8:	0840      	lsrs	r0, r0, #1
 80034ca:	3801      	subs	r0, #1
 80034cc:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80034d0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80034d2:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 80034d6:	430b      	orrs	r3, r1
 80034d8:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 80034da:	6813      	ldr	r3, [r2, #0]
 80034dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034e0:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034e2:	68d3      	ldr	r3, [r2, #12]
 80034e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034e8:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 80034ea:	f7ff faa1 	bl	8002a30 <HAL_GetTick>
 80034ee:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034f0:	4b1f      	ldr	r3, [pc, #124]	; (8003570 <HAL_RCC_OscConfig+0x660>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80034f8:	d106      	bne.n	8003508 <HAL_RCC_OscConfig+0x5f8>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034fa:	f7ff fa99 	bl	8002a30 <HAL_GetTick>
 80034fe:	1b00      	subs	r0, r0, r4
 8003500:	2802      	cmp	r0, #2
 8003502:	d9f5      	bls.n	80034f0 <HAL_RCC_OscConfig+0x5e0>
                return HAL_TIMEOUT;
 8003504:	2003      	movs	r0, #3
 8003506:	e02d      	b.n	8003564 <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 8003508:	2000      	movs	r0, #0
 800350a:	e02b      	b.n	8003564 <HAL_RCC_OscConfig+0x654>
          __HAL_RCC_PLL_ENABLE();
 800350c:	4b18      	ldr	r3, [pc, #96]	; (8003570 <HAL_RCC_OscConfig+0x660>)
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003514:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800351c:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 800351e:	f7ff fa87 	bl	8002a30 <HAL_GetTick>
 8003522:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003524:	4b12      	ldr	r3, [pc, #72]	; (8003570 <HAL_RCC_OscConfig+0x660>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800352c:	d106      	bne.n	800353c <HAL_RCC_OscConfig+0x62c>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800352e:	f7ff fa7f 	bl	8002a30 <HAL_GetTick>
 8003532:	1b03      	subs	r3, r0, r4
 8003534:	2b02      	cmp	r3, #2
 8003536:	d9f5      	bls.n	8003524 <HAL_RCC_OscConfig+0x614>
              return HAL_TIMEOUT;
 8003538:	2003      	movs	r0, #3
 800353a:	e013      	b.n	8003564 <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 800353c:	2000      	movs	r0, #0
 800353e:	e011      	b.n	8003564 <HAL_RCC_OscConfig+0x654>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003540:	4a0b      	ldr	r2, [pc, #44]	; (8003570 <HAL_RCC_OscConfig+0x660>)
 8003542:	68d1      	ldr	r1, [r2, #12]
 8003544:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <HAL_RCC_OscConfig+0x668>)
 8003546:	400b      	ands	r3, r1
 8003548:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 800354a:	2000      	movs	r0, #0
 800354c:	e00a      	b.n	8003564 <HAL_RCC_OscConfig+0x654>
    return HAL_ERROR;
 800354e:	2001      	movs	r0, #1
}
 8003550:	4770      	bx	lr
        return HAL_ERROR;
 8003552:	2001      	movs	r0, #1
 8003554:	e006      	b.n	8003564 <HAL_RCC_OscConfig+0x654>
            return HAL_ERROR;
 8003556:	2001      	movs	r0, #1
 8003558:	e004      	b.n	8003564 <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 800355a:	2001      	movs	r0, #1
 800355c:	e002      	b.n	8003564 <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 800355e:	2001      	movs	r0, #1
 8003560:	e000      	b.n	8003564 <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 8003562:	2000      	movs	r0, #0
}
 8003564:	b003      	add	sp, #12
 8003566:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8003568:	2001      	movs	r0, #1
 800356a:	e7fb      	b.n	8003564 <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 800356c:	2001      	movs	r0, #1
 800356e:	e7f9      	b.n	8003564 <HAL_RCC_OscConfig+0x654>
 8003570:	40021000 	.word	0x40021000
 8003574:	019d808c 	.word	0x019d808c
 8003578:	feeefffc 	.word	0xfeeefffc

0800357c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800357c:	2800      	cmp	r0, #0
 800357e:	f000 80af 	beq.w	80036e0 <HAL_RCC_ClockConfig+0x164>
{
 8003582:	b570      	push	{r4, r5, r6, lr}
 8003584:	460d      	mov	r5, r1
 8003586:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003588:	4b59      	ldr	r3, [pc, #356]	; (80036f0 <HAL_RCC_ClockConfig+0x174>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	428b      	cmp	r3, r1
 8003592:	d20b      	bcs.n	80035ac <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003594:	4a56      	ldr	r2, [pc, #344]	; (80036f0 <HAL_RCC_ClockConfig+0x174>)
 8003596:	6813      	ldr	r3, [r2, #0]
 8003598:	f023 0307 	bic.w	r3, r3, #7
 800359c:	430b      	orrs	r3, r1
 800359e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a0:	6813      	ldr	r3, [r2, #0]
 80035a2:	f003 0307 	and.w	r3, r3, #7
 80035a6:	428b      	cmp	r3, r1
 80035a8:	f040 809c 	bne.w	80036e4 <HAL_RCC_ClockConfig+0x168>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035ac:	6823      	ldr	r3, [r4, #0]
 80035ae:	f013 0f02 	tst.w	r3, #2
 80035b2:	d00c      	beq.n	80035ce <HAL_RCC_ClockConfig+0x52>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035b4:	68a2      	ldr	r2, [r4, #8]
 80035b6:	4b4f      	ldr	r3, [pc, #316]	; (80036f4 <HAL_RCC_ClockConfig+0x178>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035be:	429a      	cmp	r2, r3
 80035c0:	d905      	bls.n	80035ce <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c2:	494c      	ldr	r1, [pc, #304]	; (80036f4 <HAL_RCC_ClockConfig+0x178>)
 80035c4:	688b      	ldr	r3, [r1, #8]
 80035c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035ca:	431a      	orrs	r2, r3
 80035cc:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ce:	6823      	ldr	r3, [r4, #0]
 80035d0:	f013 0f01 	tst.w	r3, #1
 80035d4:	d039      	beq.n	800364a <HAL_RCC_ClockConfig+0xce>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035d6:	6863      	ldr	r3, [r4, #4]
 80035d8:	2b03      	cmp	r3, #3
 80035da:	d009      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x74>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d026      	beq.n	800362e <HAL_RCC_ClockConfig+0xb2>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035e0:	bb63      	cbnz	r3, 800363c <HAL_RCC_ClockConfig+0xc0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035e2:	4a44      	ldr	r2, [pc, #272]	; (80036f4 <HAL_RCC_ClockConfig+0x178>)
 80035e4:	6812      	ldr	r2, [r2, #0]
 80035e6:	f012 0f02 	tst.w	r2, #2
 80035ea:	d106      	bne.n	80035fa <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 80035ec:	2001      	movs	r0, #1
 80035ee:	e076      	b.n	80036de <HAL_RCC_ClockConfig+0x162>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035f0:	4a40      	ldr	r2, [pc, #256]	; (80036f4 <HAL_RCC_ClockConfig+0x178>)
 80035f2:	6812      	ldr	r2, [r2, #0]
 80035f4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80035f8:	d076      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x16c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035fa:	493e      	ldr	r1, [pc, #248]	; (80036f4 <HAL_RCC_ClockConfig+0x178>)
 80035fc:	688a      	ldr	r2, [r1, #8]
 80035fe:	f022 0203 	bic.w	r2, r2, #3
 8003602:	4313      	orrs	r3, r2
 8003604:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003606:	f7ff fa13 	bl	8002a30 <HAL_GetTick>
 800360a:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360c:	4b39      	ldr	r3, [pc, #228]	; (80036f4 <HAL_RCC_ClockConfig+0x178>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 030c 	and.w	r3, r3, #12
 8003614:	6862      	ldr	r2, [r4, #4]
 8003616:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800361a:	d016      	beq.n	800364a <HAL_RCC_ClockConfig+0xce>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800361c:	f7ff fa08 	bl	8002a30 <HAL_GetTick>
 8003620:	1b80      	subs	r0, r0, r6
 8003622:	f241 3388 	movw	r3, #5000	; 0x1388
 8003626:	4298      	cmp	r0, r3
 8003628:	d9f0      	bls.n	800360c <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 800362a:	2003      	movs	r0, #3
 800362c:	e057      	b.n	80036de <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800362e:	4a31      	ldr	r2, [pc, #196]	; (80036f4 <HAL_RCC_ClockConfig+0x178>)
 8003630:	6812      	ldr	r2, [r2, #0]
 8003632:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003636:	d1e0      	bne.n	80035fa <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8003638:	2001      	movs	r0, #1
 800363a:	e050      	b.n	80036de <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800363c:	4a2d      	ldr	r2, [pc, #180]	; (80036f4 <HAL_RCC_ClockConfig+0x178>)
 800363e:	6812      	ldr	r2, [r2, #0]
 8003640:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003644:	d1d9      	bne.n	80035fa <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8003646:	2001      	movs	r0, #1
 8003648:	e049      	b.n	80036de <HAL_RCC_ClockConfig+0x162>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800364a:	6823      	ldr	r3, [r4, #0]
 800364c:	f013 0f02 	tst.w	r3, #2
 8003650:	d00c      	beq.n	800366c <HAL_RCC_ClockConfig+0xf0>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003652:	68a2      	ldr	r2, [r4, #8]
 8003654:	4b27      	ldr	r3, [pc, #156]	; (80036f4 <HAL_RCC_ClockConfig+0x178>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800365c:	429a      	cmp	r2, r3
 800365e:	d205      	bcs.n	800366c <HAL_RCC_ClockConfig+0xf0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003660:	4924      	ldr	r1, [pc, #144]	; (80036f4 <HAL_RCC_ClockConfig+0x178>)
 8003662:	688b      	ldr	r3, [r1, #8]
 8003664:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003668:	431a      	orrs	r2, r3
 800366a:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800366c:	4b20      	ldr	r3, [pc, #128]	; (80036f0 <HAL_RCC_ClockConfig+0x174>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	42ab      	cmp	r3, r5
 8003676:	d90a      	bls.n	800368e <HAL_RCC_ClockConfig+0x112>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003678:	4a1d      	ldr	r2, [pc, #116]	; (80036f0 <HAL_RCC_ClockConfig+0x174>)
 800367a:	6813      	ldr	r3, [r2, #0]
 800367c:	f023 0307 	bic.w	r3, r3, #7
 8003680:	432b      	orrs	r3, r5
 8003682:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003684:	6813      	ldr	r3, [r2, #0]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	42ab      	cmp	r3, r5
 800368c:	d12e      	bne.n	80036ec <HAL_RCC_ClockConfig+0x170>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800368e:	6823      	ldr	r3, [r4, #0]
 8003690:	f013 0f04 	tst.w	r3, #4
 8003694:	d006      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x128>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003696:	4a17      	ldr	r2, [pc, #92]	; (80036f4 <HAL_RCC_ClockConfig+0x178>)
 8003698:	6893      	ldr	r3, [r2, #8]
 800369a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800369e:	68e1      	ldr	r1, [r4, #12]
 80036a0:	430b      	orrs	r3, r1
 80036a2:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a4:	6823      	ldr	r3, [r4, #0]
 80036a6:	f013 0f08 	tst.w	r3, #8
 80036aa:	d007      	beq.n	80036bc <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ac:	4a11      	ldr	r2, [pc, #68]	; (80036f4 <HAL_RCC_ClockConfig+0x178>)
 80036ae:	6893      	ldr	r3, [r2, #8]
 80036b0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80036b4:	6921      	ldr	r1, [r4, #16]
 80036b6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80036ba:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036bc:	f7ff fbce 	bl	8002e5c <HAL_RCC_GetSysClockFreq>
 80036c0:	4b0c      	ldr	r3, [pc, #48]	; (80036f4 <HAL_RCC_ClockConfig+0x178>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80036c8:	4a0b      	ldr	r2, [pc, #44]	; (80036f8 <HAL_RCC_ClockConfig+0x17c>)
 80036ca:	5cd3      	ldrb	r3, [r2, r3]
 80036cc:	f003 031f 	and.w	r3, r3, #31
 80036d0:	40d8      	lsrs	r0, r3
 80036d2:	4b0a      	ldr	r3, [pc, #40]	; (80036fc <HAL_RCC_ClockConfig+0x180>)
 80036d4:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80036d6:	4b0a      	ldr	r3, [pc, #40]	; (8003700 <HAL_RCC_ClockConfig+0x184>)
 80036d8:	6818      	ldr	r0, [r3, #0]
 80036da:	f7ff f95f 	bl	800299c <HAL_InitTick>
}
 80036de:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80036e0:	2001      	movs	r0, #1
}
 80036e2:	4770      	bx	lr
      return HAL_ERROR;
 80036e4:	2001      	movs	r0, #1
 80036e6:	e7fa      	b.n	80036de <HAL_RCC_ClockConfig+0x162>
        return HAL_ERROR;
 80036e8:	2001      	movs	r0, #1
 80036ea:	e7f8      	b.n	80036de <HAL_RCC_ClockConfig+0x162>
      return HAL_ERROR;
 80036ec:	2001      	movs	r0, #1
 80036ee:	e7f6      	b.n	80036de <HAL_RCC_ClockConfig+0x162>
 80036f0:	40022000 	.word	0x40022000
 80036f4:	40021000 	.word	0x40021000
 80036f8:	08007840 	.word	0x08007840
 80036fc:	20000f44 	.word	0x20000f44
 8003700:	20000f4c 	.word	0x20000f4c

08003704 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003708:	b082      	sub	sp, #8
 800370a:	4605      	mov	r5, r0
 800370c:	4688      	mov	r8, r1
 800370e:	4617      	mov	r7, r2
 8003710:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003712:	f7ff f98d 	bl	8002a30 <HAL_GetTick>
 8003716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003718:	1a1b      	subs	r3, r3, r0
 800371a:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 800371e:	f7ff f987 	bl	8002a30 <HAL_GetTick>
 8003722:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003724:	4b2b      	ldr	r3, [pc, #172]	; (80037d4 <SPI_WaitFlagStateUntilTimeout+0xd0>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800372c:	fb09 f303 	mul.w	r3, r9, r3
 8003730:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003732:	682b      	ldr	r3, [r5, #0]
 8003734:	689c      	ldr	r4, [r3, #8]
 8003736:	ea38 0304 	bics.w	r3, r8, r4
 800373a:	bf0c      	ite	eq
 800373c:	f04f 0c01 	moveq.w	ip, #1
 8003740:	f04f 0c00 	movne.w	ip, #0
 8003744:	45bc      	cmp	ip, r7
 8003746:	d040      	beq.n	80037ca <SPI_WaitFlagStateUntilTimeout+0xc6>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003748:	f1b6 3fff 	cmp.w	r6, #4294967295
 800374c:	d0f1      	beq.n	8003732 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800374e:	f7ff f96f 	bl	8002a30 <HAL_GetTick>
 8003752:	eba0 000a 	sub.w	r0, r0, sl
 8003756:	4548      	cmp	r0, r9
 8003758:	d20a      	bcs.n	8003770 <SPI_WaitFlagStateUntilTimeout+0x6c>
 800375a:	f1b9 0f00 	cmp.w	r9, #0
 800375e:	d007      	beq.n	8003770 <SPI_WaitFlagStateUntilTimeout+0x6c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003760:	9a01      	ldr	r2, [sp, #4]
 8003762:	b102      	cbz	r2, 8003766 <SPI_WaitFlagStateUntilTimeout+0x62>
 8003764:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8003766:	9b01      	ldr	r3, [sp, #4]
 8003768:	3b01      	subs	r3, #1
 800376a:	9301      	str	r3, [sp, #4]
 800376c:	4691      	mov	r9, r2
 800376e:	e7e0      	b.n	8003732 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003770:	682a      	ldr	r2, [r5, #0]
 8003772:	6853      	ldr	r3, [r2, #4]
 8003774:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003778:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800377a:	686b      	ldr	r3, [r5, #4]
 800377c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003780:	d00b      	beq.n	800379a <SPI_WaitFlagStateUntilTimeout+0x96>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003782:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003788:	d014      	beq.n	80037b4 <SPI_WaitFlagStateUntilTimeout+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 800378a:	2301      	movs	r3, #1
 800378c:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8003790:	2300      	movs	r3, #0
 8003792:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 8003796:	2003      	movs	r0, #3
 8003798:	e018      	b.n	80037cc <SPI_WaitFlagStateUntilTimeout+0xc8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800379a:	68ab      	ldr	r3, [r5, #8]
 800379c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037a0:	d002      	beq.n	80037a8 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a6:	d1ec      	bne.n	8003782 <SPI_WaitFlagStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 80037a8:	682a      	ldr	r2, [r5, #0]
 80037aa:	6813      	ldr	r3, [r2, #0]
 80037ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037b0:	6013      	str	r3, [r2, #0]
 80037b2:	e7e6      	b.n	8003782 <SPI_WaitFlagStateUntilTimeout+0x7e>
          SPI_RESET_CRC(hspi);
 80037b4:	682a      	ldr	r2, [r5, #0]
 80037b6:	6813      	ldr	r3, [r2, #0]
 80037b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	682a      	ldr	r2, [r5, #0]
 80037c0:	6813      	ldr	r3, [r2, #0]
 80037c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037c6:	6013      	str	r3, [r2, #0]
 80037c8:	e7df      	b.n	800378a <SPI_WaitFlagStateUntilTimeout+0x86>
    }
  }

  return HAL_OK;
 80037ca:	2000      	movs	r0, #0
}
 80037cc:	b002      	add	sp, #8
 80037ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037d2:	bf00      	nop
 80037d4:	20000f44 	.word	0x20000f44

080037d8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037dc:	b082      	sub	sp, #8
 80037de:	4606      	mov	r6, r0
 80037e0:	460c      	mov	r4, r1
 80037e2:	4615      	mov	r5, r2
 80037e4:	461f      	mov	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80037e6:	2300      	movs	r3, #0
 80037e8:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80037ec:	f7ff f920 	bl	8002a30 <HAL_GetTick>
 80037f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037f2:	1a1b      	subs	r3, r3, r0
 80037f4:	eb03 0807 	add.w	r8, r3, r7
  tmp_tickstart = HAL_GetTick();
 80037f8:	f7ff f91a 	bl	8002a30 <HAL_GetTick>
 80037fc:	4681      	mov	r9, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80037fe:	f8d6 a000 	ldr.w	sl, [r6]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003802:	4b31      	ldr	r3, [pc, #196]	; (80038c8 <SPI_WaitFifoStateUntilTimeout+0xf0>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800380a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800380e:	0d1b      	lsrs	r3, r3, #20
 8003810:	fb08 f303 	mul.w	r3, r8, r3
 8003814:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8003816:	e002      	b.n	800381e <SPI_WaitFifoStateUntilTimeout+0x46>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8003818:	f1b7 3fff 	cmp.w	r7, #4294967295
 800381c:	d112      	bne.n	8003844 <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 800381e:	6833      	ldr	r3, [r6, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	ea03 0c04 	and.w	ip, r3, r4
 8003826:	45ac      	cmp	ip, r5
 8003828:	d04a      	beq.n	80038c0 <SPI_WaitFifoStateUntilTimeout+0xe8>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800382a:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 800382e:	d1f3      	bne.n	8003818 <SPI_WaitFifoStateUntilTimeout+0x40>
 8003830:	2d00      	cmp	r5, #0
 8003832:	d1f1      	bne.n	8003818 <SPI_WaitFifoStateUntilTimeout+0x40>
      tmpreg8 = *ptmpreg8;
 8003834:	f89a 300c 	ldrb.w	r3, [sl, #12]
 8003838:	b2db      	uxtb	r3, r3
 800383a:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 800383e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003842:	e7e9      	b.n	8003818 <SPI_WaitFifoStateUntilTimeout+0x40>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003844:	f7ff f8f4 	bl	8002a30 <HAL_GetTick>
 8003848:	eba0 0009 	sub.w	r0, r0, r9
 800384c:	4540      	cmp	r0, r8
 800384e:	d20a      	bcs.n	8003866 <SPI_WaitFifoStateUntilTimeout+0x8e>
 8003850:	f1b8 0f00 	cmp.w	r8, #0
 8003854:	d007      	beq.n	8003866 <SPI_WaitFifoStateUntilTimeout+0x8e>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003856:	9a01      	ldr	r2, [sp, #4]
 8003858:	b102      	cbz	r2, 800385c <SPI_WaitFifoStateUntilTimeout+0x84>
 800385a:	4642      	mov	r2, r8
      {
        tmp_timeout = 0U;
      }
      count--;
 800385c:	9b01      	ldr	r3, [sp, #4]
 800385e:	3b01      	subs	r3, #1
 8003860:	9301      	str	r3, [sp, #4]
 8003862:	4690      	mov	r8, r2
 8003864:	e7db      	b.n	800381e <SPI_WaitFifoStateUntilTimeout+0x46>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003866:	6832      	ldr	r2, [r6, #0]
 8003868:	6853      	ldr	r3, [r2, #4]
 800386a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800386e:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003870:	6873      	ldr	r3, [r6, #4]
 8003872:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003876:	d00b      	beq.n	8003890 <SPI_WaitFifoStateUntilTimeout+0xb8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003878:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800387a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800387e:	d014      	beq.n	80038aa <SPI_WaitFifoStateUntilTimeout+0xd2>
        hspi->State = HAL_SPI_STATE_READY;
 8003880:	2301      	movs	r3, #1
 8003882:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8003886:	2300      	movs	r3, #0
 8003888:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 800388c:	2003      	movs	r0, #3
 800388e:	e018      	b.n	80038c2 <SPI_WaitFifoStateUntilTimeout+0xea>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003890:	68b3      	ldr	r3, [r6, #8]
 8003892:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003896:	d002      	beq.n	800389e <SPI_WaitFifoStateUntilTimeout+0xc6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800389c:	d1ec      	bne.n	8003878 <SPI_WaitFifoStateUntilTimeout+0xa0>
          __HAL_SPI_DISABLE(hspi);
 800389e:	6832      	ldr	r2, [r6, #0]
 80038a0:	6813      	ldr	r3, [r2, #0]
 80038a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	e7e6      	b.n	8003878 <SPI_WaitFifoStateUntilTimeout+0xa0>
          SPI_RESET_CRC(hspi);
 80038aa:	6832      	ldr	r2, [r6, #0]
 80038ac:	6813      	ldr	r3, [r2, #0]
 80038ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038b2:	6013      	str	r3, [r2, #0]
 80038b4:	6832      	ldr	r2, [r6, #0]
 80038b6:	6813      	ldr	r3, [r2, #0]
 80038b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	e7df      	b.n	8003880 <SPI_WaitFifoStateUntilTimeout+0xa8>
    }
  }

  return HAL_OK;
 80038c0:	2000      	movs	r0, #0
}
 80038c2:	b002      	add	sp, #8
 80038c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038c8:	20000f44 	.word	0x20000f44

080038cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038cc:	b570      	push	{r4, r5, r6, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	4604      	mov	r4, r0
 80038d2:	460d      	mov	r5, r1
 80038d4:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038d6:	9200      	str	r2, [sp, #0]
 80038d8:	460b      	mov	r3, r1
 80038da:	2200      	movs	r2, #0
 80038dc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80038e0:	f7ff ff7a 	bl	80037d8 <SPI_WaitFifoStateUntilTimeout>
 80038e4:	b9b0      	cbnz	r0, 8003914 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038e6:	9600      	str	r6, [sp, #0]
 80038e8:	462b      	mov	r3, r5
 80038ea:	2200      	movs	r2, #0
 80038ec:	2180      	movs	r1, #128	; 0x80
 80038ee:	4620      	mov	r0, r4
 80038f0:	f7ff ff08 	bl	8003704 <SPI_WaitFlagStateUntilTimeout>
 80038f4:	b9a8      	cbnz	r0, 8003922 <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038f6:	9600      	str	r6, [sp, #0]
 80038f8:	462b      	mov	r3, r5
 80038fa:	2200      	movs	r2, #0
 80038fc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003900:	4620      	mov	r0, r4
 8003902:	f7ff ff69 	bl	80037d8 <SPI_WaitFifoStateUntilTimeout>
 8003906:	b150      	cbz	r0, 800391e <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003908:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800390a:	f043 0320 	orr.w	r3, r3, #32
 800390e:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003910:	2003      	movs	r0, #3
 8003912:	e004      	b.n	800391e <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003914:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003916:	f043 0320 	orr.w	r3, r3, #32
 800391a:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800391c:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 800391e:	b002      	add	sp, #8
 8003920:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003922:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003924:	f043 0320 	orr.w	r3, r3, #32
 8003928:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800392a:	2003      	movs	r0, #3
 800392c:	e7f7      	b.n	800391e <SPI_EndRxTxTransaction+0x52>

0800392e <SPI_EndRxTransaction>:
{
 800392e:	b570      	push	{r4, r5, r6, lr}
 8003930:	b082      	sub	sp, #8
 8003932:	4604      	mov	r4, r0
 8003934:	460d      	mov	r5, r1
 8003936:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003938:	6843      	ldr	r3, [r0, #4]
 800393a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800393e:	d00d      	beq.n	800395c <SPI_EndRxTransaction+0x2e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003940:	9600      	str	r6, [sp, #0]
 8003942:	462b      	mov	r3, r5
 8003944:	2200      	movs	r2, #0
 8003946:	2180      	movs	r1, #128	; 0x80
 8003948:	4620      	mov	r0, r4
 800394a:	f7ff fedb 	bl	8003704 <SPI_WaitFlagStateUntilTimeout>
 800394e:	b990      	cbnz	r0, 8003976 <SPI_EndRxTransaction+0x48>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003950:	6863      	ldr	r3, [r4, #4]
 8003952:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003956:	d014      	beq.n	8003982 <SPI_EndRxTransaction+0x54>
}
 8003958:	b002      	add	sp, #8
 800395a:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800395c:	6883      	ldr	r3, [r0, #8]
 800395e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003962:	d002      	beq.n	800396a <SPI_EndRxTransaction+0x3c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003968:	d1ea      	bne.n	8003940 <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 800396a:	6822      	ldr	r2, [r4, #0]
 800396c:	6813      	ldr	r3, [r2, #0]
 800396e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003972:	6013      	str	r3, [r2, #0]
 8003974:	e7e4      	b.n	8003940 <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003976:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003978:	f043 0320 	orr.w	r3, r3, #32
 800397c:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800397e:	2003      	movs	r0, #3
 8003980:	e7ea      	b.n	8003958 <SPI_EndRxTransaction+0x2a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003982:	68a3      	ldr	r3, [r4, #8]
 8003984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003988:	d002      	beq.n	8003990 <SPI_EndRxTransaction+0x62>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800398a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800398e:	d1e3      	bne.n	8003958 <SPI_EndRxTransaction+0x2a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003990:	9600      	str	r6, [sp, #0]
 8003992:	462b      	mov	r3, r5
 8003994:	2200      	movs	r2, #0
 8003996:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800399a:	4620      	mov	r0, r4
 800399c:	f7ff ff1c 	bl	80037d8 <SPI_WaitFifoStateUntilTimeout>
 80039a0:	2800      	cmp	r0, #0
 80039a2:	d0d9      	beq.n	8003958 <SPI_EndRxTransaction+0x2a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039a4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80039a6:	f043 0320 	orr.w	r3, r3, #32
 80039aa:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 80039ac:	2003      	movs	r0, #3
 80039ae:	e7d3      	b.n	8003958 <SPI_EndRxTransaction+0x2a>

080039b0 <HAL_SPI_Init>:
  if (hspi == NULL)
 80039b0:	2800      	cmp	r0, #0
 80039b2:	d06a      	beq.n	8003a8a <HAL_SPI_Init+0xda>
{
 80039b4:	b510      	push	{r4, lr}
 80039b6:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80039ba:	b933      	cbnz	r3, 80039ca <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039bc:	6843      	ldr	r3, [r0, #4]
 80039be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039c2:	d005      	beq.n	80039d0 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039c4:	2300      	movs	r3, #0
 80039c6:	61c3      	str	r3, [r0, #28]
 80039c8:	e002      	b.n	80039d0 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039ca:	2300      	movs	r3, #0
 80039cc:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039ce:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039d0:	2300      	movs	r3, #0
 80039d2:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80039d4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d04d      	beq.n	8003a78 <HAL_SPI_Init+0xc8>
  hspi->State = HAL_SPI_STATE_BUSY;
 80039dc:	2302      	movs	r3, #2
 80039de:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80039e2:	6822      	ldr	r2, [r4, #0]
 80039e4:	6813      	ldr	r3, [r2, #0]
 80039e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039ea:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039ec:	68e3      	ldr	r3, [r4, #12]
 80039ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039f2:	d947      	bls.n	8003a84 <HAL_SPI_Init+0xd4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80039f4:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80039f6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80039fa:	d004      	beq.n	8003a06 <HAL_SPI_Init+0x56>
 80039fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a00:	d001      	beq.n	8003a06 <HAL_SPI_Init+0x56>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a02:	2300      	movs	r3, #0
 8003a04:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a06:	6863      	ldr	r3, [r4, #4]
 8003a08:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003a0c:	68a1      	ldr	r1, [r4, #8]
 8003a0e:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8003a12:	430b      	orrs	r3, r1
 8003a14:	6921      	ldr	r1, [r4, #16]
 8003a16:	f001 0102 	and.w	r1, r1, #2
 8003a1a:	430b      	orrs	r3, r1
 8003a1c:	6961      	ldr	r1, [r4, #20]
 8003a1e:	f001 0101 	and.w	r1, r1, #1
 8003a22:	430b      	orrs	r3, r1
 8003a24:	69a1      	ldr	r1, [r4, #24]
 8003a26:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8003a2a:	430b      	orrs	r3, r1
 8003a2c:	69e1      	ldr	r1, [r4, #28]
 8003a2e:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8003a32:	430b      	orrs	r3, r1
 8003a34:	6a21      	ldr	r1, [r4, #32]
 8003a36:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003a3a:	430b      	orrs	r3, r1
 8003a3c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003a3e:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8003a42:	6820      	ldr	r0, [r4, #0]
 8003a44:	430b      	orrs	r3, r1
 8003a46:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a48:	8b63      	ldrh	r3, [r4, #26]
 8003a4a:	f003 0304 	and.w	r3, r3, #4
 8003a4e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003a50:	f001 0110 	and.w	r1, r1, #16
 8003a54:	430b      	orrs	r3, r1
 8003a56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a58:	f001 0108 	and.w	r1, r1, #8
 8003a5c:	430b      	orrs	r3, r1
 8003a5e:	68e1      	ldr	r1, [r4, #12]
 8003a60:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8003a64:	430b      	orrs	r3, r1
 8003a66:	6821      	ldr	r1, [r4, #0]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	604b      	str	r3, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a6c:	2000      	movs	r0, #0
 8003a6e:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a70:	2301      	movs	r3, #1
 8003a72:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8003a76:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003a78:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8003a7c:	4620      	mov	r0, r4
 8003a7e:	f7fe fe31 	bl	80026e4 <HAL_SPI_MspInit>
 8003a82:	e7ab      	b.n	80039dc <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a88:	e7b5      	b.n	80039f6 <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8003a8a:	2001      	movs	r0, #1
}
 8003a8c:	4770      	bx	lr

08003a8e <HAL_SPI_Transmit>:
{
 8003a8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a92:	b083      	sub	sp, #12
 8003a94:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8003a96:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	f000 80f6 	beq.w	8003c8c <HAL_SPI_Transmit+0x1fe>
 8003aa0:	4604      	mov	r4, r0
 8003aa2:	4688      	mov	r8, r1
 8003aa4:	4691      	mov	r9, r2
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003aac:	f7fe ffc0 	bl	8002a30 <HAL_GetTick>
 8003ab0:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003ab2:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 8003ab6:	b2f6      	uxtb	r6, r6
 8003ab8:	2e01      	cmp	r6, #1
 8003aba:	f040 80d4 	bne.w	8003c66 <HAL_SPI_Transmit+0x1d8>
  if ((pData == NULL) || (Size == 0U))
 8003abe:	f1b8 0f00 	cmp.w	r8, #0
 8003ac2:	f000 80d1 	beq.w	8003c68 <HAL_SPI_Transmit+0x1da>
 8003ac6:	f1b9 0f00 	cmp.w	r9, #0
 8003aca:	f000 80cd 	beq.w	8003c68 <HAL_SPI_Transmit+0x1da>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ad8:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003adc:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003ae0:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ae4:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003ae6:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003aea:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003aee:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003af0:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003af2:	68a3      	ldr	r3, [r4, #8]
 8003af4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003af8:	d01e      	beq.n	8003b38 <HAL_SPI_Transmit+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003afa:	6823      	ldr	r3, [r4, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003b02:	d103      	bne.n	8003b0c <HAL_SPI_Transmit+0x7e>
    __HAL_SPI_ENABLE(hspi);
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b0a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b0c:	68e3      	ldr	r3, [r4, #12]
 8003b0e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b12:	d942      	bls.n	8003b9a <HAL_SPI_Transmit+0x10c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b14:	6863      	ldr	r3, [r4, #4]
 8003b16:	b113      	cbz	r3, 8003b1e <HAL_SPI_Transmit+0x90>
 8003b18:	f1b9 0f01 	cmp.w	r9, #1
 8003b1c:	d123      	bne.n	8003b66 <HAL_SPI_Transmit+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b1e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003b20:	6823      	ldr	r3, [r4, #0]
 8003b22:	8812      	ldrh	r2, [r2, #0]
 8003b24:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003b28:	3302      	adds	r3, #2
 8003b2a:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003b2c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	3b01      	subs	r3, #1
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003b36:	e016      	b.n	8003b66 <HAL_SPI_Transmit+0xd8>
    __HAL_SPI_DISABLE(hspi);
 8003b38:	6822      	ldr	r2, [r4, #0]
 8003b3a:	6813      	ldr	r3, [r2, #0]
 8003b3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b40:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8003b42:	6822      	ldr	r2, [r4, #0]
 8003b44:	6813      	ldr	r3, [r2, #0]
 8003b46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b4a:	6013      	str	r3, [r2, #0]
 8003b4c:	e7d5      	b.n	8003afa <HAL_SPI_Transmit+0x6c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b4e:	f7fe ff6f 	bl	8002a30 <HAL_GetTick>
 8003b52:	1bc0      	subs	r0, r0, r7
 8003b54:	42a8      	cmp	r0, r5
 8003b56:	d303      	bcc.n	8003b60 <HAL_SPI_Transmit+0xd2>
 8003b58:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003b5c:	f040 808e 	bne.w	8003c7c <HAL_SPI_Transmit+0x1ee>
 8003b60:	2d00      	cmp	r5, #0
 8003b62:	f000 808d 	beq.w	8003c80 <HAL_SPI_Transmit+0x1f2>
    while (hspi->TxXferCount > 0U)
 8003b66:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d066      	beq.n	8003c3c <HAL_SPI_Transmit+0x1ae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b6e:	6823      	ldr	r3, [r4, #0]
 8003b70:	689a      	ldr	r2, [r3, #8]
 8003b72:	f012 0f02 	tst.w	r2, #2
 8003b76:	d0ea      	beq.n	8003b4e <HAL_SPI_Transmit+0xc0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b78:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003b7a:	8812      	ldrh	r2, [r2, #0]
 8003b7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003b80:	3302      	adds	r3, #2
 8003b82:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003b84:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 8003b88:	fa1f fc8c 	uxth.w	ip, ip
 8003b8c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003b90:	fa1f fc8c 	uxth.w	ip, ip
 8003b94:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 8003b98:	e7e5      	b.n	8003b66 <HAL_SPI_Transmit+0xd8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b9a:	6863      	ldr	r3, [r4, #4]
 8003b9c:	b113      	cbz	r3, 8003ba4 <HAL_SPI_Transmit+0x116>
 8003b9e:	f1b9 0f01 	cmp.w	r9, #1
 8003ba2:	d133      	bne.n	8003c0c <HAL_SPI_Transmit+0x17e>
      if (hspi->TxXferCount > 1U)
 8003ba4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d90c      	bls.n	8003bc6 <HAL_SPI_Transmit+0x138>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	8812      	ldrh	r2, [r2, #0]
 8003bb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003bb6:	3302      	adds	r3, #2
 8003bb8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003bba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	3b02      	subs	r3, #2
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003bc4:	e022      	b.n	8003c0c <HAL_SPI_Transmit+0x17e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bc6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003bc8:	6823      	ldr	r3, [r4, #0]
 8003bca:	7812      	ldrb	r2, [r2, #0]
 8003bcc:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8003bce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003bd4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003bde:	e015      	b.n	8003c0c <HAL_SPI_Transmit+0x17e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003be0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8003be6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003be8:	3301      	adds	r3, #1
 8003bea:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8003bec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003bf6:	e009      	b.n	8003c0c <HAL_SPI_Transmit+0x17e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bf8:	f7fe ff1a 	bl	8002a30 <HAL_GetTick>
 8003bfc:	1bc0      	subs	r0, r0, r7
 8003bfe:	42a8      	cmp	r0, r5
 8003c00:	d302      	bcc.n	8003c08 <HAL_SPI_Transmit+0x17a>
 8003c02:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003c06:	d13d      	bne.n	8003c84 <HAL_SPI_Transmit+0x1f6>
 8003c08:	2d00      	cmp	r5, #0
 8003c0a:	d03d      	beq.n	8003c88 <HAL_SPI_Transmit+0x1fa>
    while (hspi->TxXferCount > 0U)
 8003c0c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	b1a3      	cbz	r3, 8003c3c <HAL_SPI_Transmit+0x1ae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c12:	6822      	ldr	r2, [r4, #0]
 8003c14:	6893      	ldr	r3, [r2, #8]
 8003c16:	f013 0f02 	tst.w	r3, #2
 8003c1a:	d0ed      	beq.n	8003bf8 <HAL_SPI_Transmit+0x16a>
        if (hspi->TxXferCount > 1U)
 8003c1c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d9dd      	bls.n	8003be0 <HAL_SPI_Transmit+0x152>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c2c:	3302      	adds	r3, #2
 8003c2e:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003c30:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	3b02      	subs	r3, #2
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003c3a:	e7e7      	b.n	8003c0c <HAL_SPI_Transmit+0x17e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c3c:	463a      	mov	r2, r7
 8003c3e:	4629      	mov	r1, r5
 8003c40:	4620      	mov	r0, r4
 8003c42:	f7ff fe43 	bl	80038cc <SPI_EndRxTxTransaction>
 8003c46:	b108      	cbz	r0, 8003c4c <HAL_SPI_Transmit+0x1be>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c48:	2320      	movs	r3, #32
 8003c4a:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c4c:	68a3      	ldr	r3, [r4, #8]
 8003c4e:	b933      	cbnz	r3, 8003c5e <HAL_SPI_Transmit+0x1d0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c50:	9301      	str	r3, [sp, #4]
 8003c52:	6823      	ldr	r3, [r4, #0]
 8003c54:	68da      	ldr	r2, [r3, #12]
 8003c56:	9201      	str	r2, [sp, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	9301      	str	r3, [sp, #4]
 8003c5c:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c5e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003c60:	b913      	cbnz	r3, 8003c68 <HAL_SPI_Transmit+0x1da>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c62:	2600      	movs	r6, #0
 8003c64:	e000      	b.n	8003c68 <HAL_SPI_Transmit+0x1da>
    errorcode = HAL_BUSY;
 8003c66:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003c6e:	2300      	movs	r3, #0
 8003c70:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8003c74:	4630      	mov	r0, r6
 8003c76:	b003      	add	sp, #12
 8003c78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8003c7c:	2603      	movs	r6, #3
 8003c7e:	e7f3      	b.n	8003c68 <HAL_SPI_Transmit+0x1da>
 8003c80:	2603      	movs	r6, #3
 8003c82:	e7f1      	b.n	8003c68 <HAL_SPI_Transmit+0x1da>
          errorcode = HAL_TIMEOUT;
 8003c84:	2603      	movs	r6, #3
 8003c86:	e7ef      	b.n	8003c68 <HAL_SPI_Transmit+0x1da>
 8003c88:	2603      	movs	r6, #3
 8003c8a:	e7ed      	b.n	8003c68 <HAL_SPI_Transmit+0x1da>
  __HAL_LOCK(hspi);
 8003c8c:	2602      	movs	r6, #2
 8003c8e:	e7f1      	b.n	8003c74 <HAL_SPI_Transmit+0x1e6>

08003c90 <HAL_SPI_TransmitReceive>:
{
 8003c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c94:	461f      	mov	r7, r3
 8003c96:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 8003c98:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	f000 8164 	beq.w	8003f6a <HAL_SPI_TransmitReceive+0x2da>
 8003ca2:	4604      	mov	r4, r0
 8003ca4:	4688      	mov	r8, r1
 8003ca6:	4691      	mov	r9, r2
 8003ca8:	2301      	movs	r3, #1
 8003caa:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003cae:	f7fe febf 	bl	8002a30 <HAL_GetTick>
 8003cb2:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8003cb4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003cb8:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8003cba:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d00a      	beq.n	8003cd6 <HAL_SPI_TransmitReceive+0x46>
 8003cc0:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003cc4:	f040 8138 	bne.w	8003f38 <HAL_SPI_TransmitReceive+0x2a8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003cc8:	68a2      	ldr	r2, [r4, #8]
 8003cca:	2a00      	cmp	r2, #0
 8003ccc:	f040 813d 	bne.w	8003f4a <HAL_SPI_TransmitReceive+0x2ba>
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	f040 813c 	bne.w	8003f4e <HAL_SPI_TransmitReceive+0x2be>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003cd6:	f1b8 0f00 	cmp.w	r8, #0
 8003cda:	f000 813a 	beq.w	8003f52 <HAL_SPI_TransmitReceive+0x2c2>
 8003cde:	f1b9 0f00 	cmp.w	r9, #0
 8003ce2:	f000 8138 	beq.w	8003f56 <HAL_SPI_TransmitReceive+0x2c6>
 8003ce6:	2f00      	cmp	r7, #0
 8003ce8:	f000 8137 	beq.w	8003f5a <HAL_SPI_TransmitReceive+0x2ca>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003cec:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d002      	beq.n	8003cfc <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003cf6:	2305      	movs	r3, #5
 8003cf8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d00:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003d04:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003d08:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d0c:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003d10:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003d12:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8003d14:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003d16:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003d18:	68e3      	ldr	r3, [r4, #12]
 8003d1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d1e:	d801      	bhi.n	8003d24 <HAL_SPI_TransmitReceive+0x94>
 8003d20:	2f01      	cmp	r7, #1
 8003d22:	d923      	bls.n	8003d6c <HAL_SPI_TransmitReceive+0xdc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d24:	6822      	ldr	r2, [r4, #0]
 8003d26:	6853      	ldr	r3, [r2, #4]
 8003d28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d2c:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d2e:	6823      	ldr	r3, [r4, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003d36:	d103      	bne.n	8003d40 <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d3e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d40:	68e3      	ldr	r3, [r4, #12]
 8003d42:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d46:	d958      	bls.n	8003dfa <HAL_SPI_TransmitReceive+0x16a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d48:	6863      	ldr	r3, [r4, #4]
 8003d4a:	b10b      	cbz	r3, 8003d50 <HAL_SPI_TransmitReceive+0xc0>
 8003d4c:	2f01      	cmp	r7, #1
 8003d4e:	d10b      	bne.n	8003d68 <HAL_SPI_TransmitReceive+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d50:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003d52:	6823      	ldr	r3, [r4, #0]
 8003d54:	8812      	ldrh	r2, [r2, #0]
 8003d56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d5a:	3302      	adds	r3, #2
 8003d5c:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003d5e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	3b01      	subs	r3, #1
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003d68:	2701      	movs	r7, #1
 8003d6a:	e031      	b.n	8003dd0 <HAL_SPI_TransmitReceive+0x140>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d6c:	6822      	ldr	r2, [r4, #0]
 8003d6e:	6853      	ldr	r3, [r2, #4]
 8003d70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d74:	6053      	str	r3, [r2, #4]
 8003d76:	e7da      	b.n	8003d2e <HAL_SPI_TransmitReceive+0x9e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d78:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003d7a:	8812      	ldrh	r2, [r2, #0]
 8003d7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d80:	3302      	adds	r3, #2
 8003d82:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003d84:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8003d8e:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d90:	6823      	ldr	r3, [r4, #0]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	f012 0f01 	tst.w	r2, #1
 8003d98:	d011      	beq.n	8003dbe <HAL_SPI_TransmitReceive+0x12e>
 8003d9a:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003d9e:	b292      	uxth	r2, r2
 8003da0:	b16a      	cbz	r2, 8003dbe <HAL_SPI_TransmitReceive+0x12e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003da2:	68da      	ldr	r2, [r3, #12]
 8003da4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003da6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003da8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003daa:	3302      	adds	r3, #2
 8003dac:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003dae:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	3b01      	subs	r3, #1
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8003dbc:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003dbe:	f7fe fe37 	bl	8002a30 <HAL_GetTick>
 8003dc2:	1b83      	subs	r3, r0, r6
 8003dc4:	42ab      	cmp	r3, r5
 8003dc6:	d303      	bcc.n	8003dd0 <HAL_SPI_TransmitReceive+0x140>
 8003dc8:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003dcc:	f040 80c7 	bne.w	8003f5e <HAL_SPI_TransmitReceive+0x2ce>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dd0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	b92b      	cbnz	r3, 8003de2 <HAL_SPI_TransmitReceive+0x152>
 8003dd6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 80a1 	beq.w	8003f24 <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003de2:	6823      	ldr	r3, [r4, #0]
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	f012 0f02 	tst.w	r2, #2
 8003dea:	d0d1      	beq.n	8003d90 <HAL_SPI_TransmitReceive+0x100>
 8003dec:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003dee:	b292      	uxth	r2, r2
 8003df0:	2a00      	cmp	r2, #0
 8003df2:	d0cd      	beq.n	8003d90 <HAL_SPI_TransmitReceive+0x100>
 8003df4:	2f00      	cmp	r7, #0
 8003df6:	d0cb      	beq.n	8003d90 <HAL_SPI_TransmitReceive+0x100>
 8003df8:	e7be      	b.n	8003d78 <HAL_SPI_TransmitReceive+0xe8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dfa:	6863      	ldr	r3, [r4, #4]
 8003dfc:	b10b      	cbz	r3, 8003e02 <HAL_SPI_TransmitReceive+0x172>
 8003dfe:	2f01      	cmp	r7, #1
 8003e00:	d10f      	bne.n	8003e22 <HAL_SPI_TransmitReceive+0x192>
      if (hspi->TxXferCount > 1U)
 8003e02:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d90d      	bls.n	8003e26 <HAL_SPI_TransmitReceive+0x196>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e0a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003e0c:	6823      	ldr	r3, [r4, #0]
 8003e0e:	8812      	ldrh	r2, [r2, #0]
 8003e10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e14:	3302      	adds	r3, #2
 8003e16:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003e18:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	3b02      	subs	r3, #2
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003e22:	2701      	movs	r7, #1
 8003e24:	e049      	b.n	8003eba <HAL_SPI_TransmitReceive+0x22a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e26:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003e28:	6823      	ldr	r3, [r4, #0]
 8003e2a:	7812      	ldrb	r2, [r2, #0]
 8003e2c:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8003e2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e30:	3301      	adds	r3, #1
 8003e32:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003e34:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003e3e:	e7f0      	b.n	8003e22 <HAL_SPI_TransmitReceive+0x192>
        if (hspi->TxXferCount > 1U)
 8003e40:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003e42:	b292      	uxth	r2, r2
 8003e44:	2a01      	cmp	r2, #1
 8003e46:	d90c      	bls.n	8003e62 <HAL_SPI_TransmitReceive+0x1d2>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e48:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003e4a:	8812      	ldrh	r2, [r2, #0]
 8003e4c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e50:	3302      	adds	r3, #2
 8003e52:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003e54:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	3b02      	subs	r3, #2
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8003e5e:	2700      	movs	r7, #0
 8003e60:	e03d      	b.n	8003ede <HAL_SPI_TransmitReceive+0x24e>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e62:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003e64:	7812      	ldrb	r2, [r2, #0]
 8003e66:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 8003e68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8003e6e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	3b01      	subs	r3, #1
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8003e78:	2700      	movs	r7, #0
 8003e7a:	e030      	b.n	8003ede <HAL_SPI_TransmitReceive+0x24e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e7c:	6822      	ldr	r2, [r4, #0]
 8003e7e:	6853      	ldr	r3, [r2, #4]
 8003e80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e84:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8003e86:	2701      	movs	r7, #1
 8003e88:	e00d      	b.n	8003ea6 <HAL_SPI_TransmitReceive+0x216>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e8a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003e8c:	7b1b      	ldrb	r3, [r3, #12]
 8003e8e:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 8003e90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e92:	3301      	adds	r3, #1
 8003e94:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8003e96:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8003ea4:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ea6:	f7fe fdc3 	bl	8002a30 <HAL_GetTick>
 8003eaa:	1b80      	subs	r0, r0, r6
 8003eac:	42a8      	cmp	r0, r5
 8003eae:	d302      	bcc.n	8003eb6 <HAL_SPI_TransmitReceive+0x226>
 8003eb0:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003eb4:	d155      	bne.n	8003f62 <HAL_SPI_TransmitReceive+0x2d2>
 8003eb6:	2d00      	cmp	r5, #0
 8003eb8:	d055      	beq.n	8003f66 <HAL_SPI_TransmitReceive+0x2d6>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003eba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	b923      	cbnz	r3, 8003eca <HAL_SPI_TransmitReceive+0x23a>
 8003ec0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d02c      	beq.n	8003f24 <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003eca:	6823      	ldr	r3, [r4, #0]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	f012 0f02 	tst.w	r2, #2
 8003ed2:	d004      	beq.n	8003ede <HAL_SPI_TransmitReceive+0x24e>
 8003ed4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003ed6:	b292      	uxth	r2, r2
 8003ed8:	b10a      	cbz	r2, 8003ede <HAL_SPI_TransmitReceive+0x24e>
 8003eda:	2f00      	cmp	r7, #0
 8003edc:	d1b0      	bne.n	8003e40 <HAL_SPI_TransmitReceive+0x1b0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ede:	6823      	ldr	r3, [r4, #0]
 8003ee0:	689a      	ldr	r2, [r3, #8]
 8003ee2:	f012 0f01 	tst.w	r2, #1
 8003ee6:	d0de      	beq.n	8003ea6 <HAL_SPI_TransmitReceive+0x216>
 8003ee8:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003eec:	b292      	uxth	r2, r2
 8003eee:	2a00      	cmp	r2, #0
 8003ef0:	d0d9      	beq.n	8003ea6 <HAL_SPI_TransmitReceive+0x216>
        if (hspi->RxXferCount > 1U)
 8003ef2:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003ef6:	b292      	uxth	r2, r2
 8003ef8:	2a01      	cmp	r2, #1
 8003efa:	d9c6      	bls.n	8003e8a <HAL_SPI_TransmitReceive+0x1fa>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f00:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f04:	3302      	adds	r3, #2
 8003f06:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003f08:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	3b02      	subs	r3, #2
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003f16:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d9ad      	bls.n	8003e7c <HAL_SPI_TransmitReceive+0x1ec>
        txallowed = 1U;
 8003f20:	2701      	movs	r7, #1
 8003f22:	e7c0      	b.n	8003ea6 <HAL_SPI_TransmitReceive+0x216>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f24:	4632      	mov	r2, r6
 8003f26:	4629      	mov	r1, r5
 8003f28:	4620      	mov	r0, r4
 8003f2a:	f7ff fccf 	bl	80038cc <SPI_EndRxTxTransaction>
 8003f2e:	b120      	cbz	r0, 8003f3a <HAL_SPI_TransmitReceive+0x2aa>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f30:	2320      	movs	r3, #32
 8003f32:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003f34:	2001      	movs	r0, #1
 8003f36:	e000      	b.n	8003f3a <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_BUSY;
 8003f38:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003f40:	2300      	movs	r3, #0
 8003f42:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8003f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8003f4a:	2002      	movs	r0, #2
 8003f4c:	e7f5      	b.n	8003f3a <HAL_SPI_TransmitReceive+0x2aa>
 8003f4e:	2002      	movs	r0, #2
 8003f50:	e7f3      	b.n	8003f3a <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_ERROR;
 8003f52:	2001      	movs	r0, #1
 8003f54:	e7f1      	b.n	8003f3a <HAL_SPI_TransmitReceive+0x2aa>
 8003f56:	2001      	movs	r0, #1
 8003f58:	e7ef      	b.n	8003f3a <HAL_SPI_TransmitReceive+0x2aa>
 8003f5a:	2001      	movs	r0, #1
 8003f5c:	e7ed      	b.n	8003f3a <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 8003f5e:	2003      	movs	r0, #3
 8003f60:	e7eb      	b.n	8003f3a <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 8003f62:	2003      	movs	r0, #3
 8003f64:	e7e9      	b.n	8003f3a <HAL_SPI_TransmitReceive+0x2aa>
 8003f66:	2003      	movs	r0, #3
 8003f68:	e7e7      	b.n	8003f3a <HAL_SPI_TransmitReceive+0x2aa>
  __HAL_LOCK(hspi);
 8003f6a:	2002      	movs	r0, #2
 8003f6c:	e7eb      	b.n	8003f46 <HAL_SPI_TransmitReceive+0x2b6>

08003f6e <HAL_SPI_Receive>:
{
 8003f6e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f72:	b083      	sub	sp, #12
 8003f74:	4604      	mov	r4, r0
 8003f76:	4688      	mov	r8, r1
 8003f78:	4691      	mov	r9, r2
 8003f7a:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003f7c:	6840      	ldr	r0, [r0, #4]
 8003f7e:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8003f82:	d043      	beq.n	800400c <HAL_SPI_Receive+0x9e>
  __HAL_LOCK(hspi);
 8003f84:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	f000 80c3 	beq.w	8004114 <HAL_SPI_Receive+0x1a6>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003f94:	f7fe fd4c 	bl	8002a30 <HAL_GetTick>
 8003f98:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003f9a:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 8003f9e:	b2f6      	uxtb	r6, r6
 8003fa0:	2e01      	cmp	r6, #1
 8003fa2:	f040 80a4 	bne.w	80040ee <HAL_SPI_Receive+0x180>
  if ((pData == NULL) || (Size == 0U))
 8003fa6:	f1b8 0f00 	cmp.w	r8, #0
 8003faa:	f000 80a1 	beq.w	80040f0 <HAL_SPI_Receive+0x182>
 8003fae:	f1b9 0f00 	cmp.w	r9, #0
 8003fb2:	f000 809d 	beq.w	80040f0 <HAL_SPI_Receive+0x182>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003fb6:	2304      	movs	r3, #4
 8003fb8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003fc0:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003fc4:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003fc8:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003fcc:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003fce:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003fd0:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003fd2:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003fd4:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fd6:	68e3      	ldr	r3, [r4, #12]
 8003fd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fdc:	d924      	bls.n	8004028 <HAL_SPI_Receive+0xba>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fde:	6822      	ldr	r2, [r4, #0]
 8003fe0:	6853      	ldr	r3, [r2, #4]
 8003fe2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fe6:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fe8:	68a3      	ldr	r3, [r4, #8]
 8003fea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fee:	d021      	beq.n	8004034 <HAL_SPI_Receive+0xc6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ff0:	6823      	ldr	r3, [r4, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003ff8:	d103      	bne.n	8004002 <HAL_SPI_Receive+0x94>
    __HAL_SPI_ENABLE(hspi);
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004000:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004002:	68e3      	ldr	r3, [r4, #12]
 8004004:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004008:	d929      	bls.n	800405e <HAL_SPI_Receive+0xf0>
 800400a:	e04a      	b.n	80040a2 <HAL_SPI_Receive+0x134>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800400c:	68a3      	ldr	r3, [r4, #8]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1b8      	bne.n	8003f84 <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004012:	2304      	movs	r3, #4
 8004014:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004018:	9500      	str	r5, [sp, #0]
 800401a:	4613      	mov	r3, r2
 800401c:	460a      	mov	r2, r1
 800401e:	4620      	mov	r0, r4
 8004020:	f7ff fe36 	bl	8003c90 <HAL_SPI_TransmitReceive>
 8004024:	4606      	mov	r6, r0
 8004026:	e069      	b.n	80040fc <HAL_SPI_Receive+0x18e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004028:	6822      	ldr	r2, [r4, #0]
 800402a:	6853      	ldr	r3, [r2, #4]
 800402c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004030:	6053      	str	r3, [r2, #4]
 8004032:	e7d9      	b.n	8003fe8 <HAL_SPI_Receive+0x7a>
    __HAL_SPI_DISABLE(hspi);
 8004034:	6822      	ldr	r2, [r4, #0]
 8004036:	6813      	ldr	r3, [r2, #0]
 8004038:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800403c:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 800403e:	6822      	ldr	r2, [r4, #0]
 8004040:	6813      	ldr	r3, [r2, #0]
 8004042:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004046:	6013      	str	r3, [r2, #0]
 8004048:	e7d2      	b.n	8003ff0 <HAL_SPI_Receive+0x82>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800404a:	f7fe fcf1 	bl	8002a30 <HAL_GetTick>
 800404e:	1bc0      	subs	r0, r0, r7
 8004050:	42a8      	cmp	r0, r5
 8004052:	d302      	bcc.n	800405a <HAL_SPI_Receive+0xec>
 8004054:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004058:	d154      	bne.n	8004104 <HAL_SPI_Receive+0x196>
 800405a:	2d00      	cmp	r5, #0
 800405c:	d054      	beq.n	8004108 <HAL_SPI_Receive+0x19a>
    while (hspi->RxXferCount > 0U)
 800405e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004062:	b29b      	uxth	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d036      	beq.n	80040d6 <HAL_SPI_Receive+0x168>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004068:	6823      	ldr	r3, [r4, #0]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	f012 0f01 	tst.w	r2, #1
 8004070:	d0eb      	beq.n	800404a <HAL_SPI_Receive+0xdc>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004072:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004074:	7b1b      	ldrb	r3, [r3, #12]
 8004076:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004078:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800407a:	3301      	adds	r3, #1
 800407c:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800407e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004082:	b29b      	uxth	r3, r3
 8004084:	3b01      	subs	r3, #1
 8004086:	b29b      	uxth	r3, r3
 8004088:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800408c:	e7e7      	b.n	800405e <HAL_SPI_Receive+0xf0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800408e:	f7fe fccf 	bl	8002a30 <HAL_GetTick>
 8004092:	1bc0      	subs	r0, r0, r7
 8004094:	42a8      	cmp	r0, r5
 8004096:	d302      	bcc.n	800409e <HAL_SPI_Receive+0x130>
 8004098:	f1b5 3fff 	cmp.w	r5, #4294967295
 800409c:	d136      	bne.n	800410c <HAL_SPI_Receive+0x19e>
 800409e:	2d00      	cmp	r5, #0
 80040a0:	d036      	beq.n	8004110 <HAL_SPI_Receive+0x1a2>
    while (hspi->RxXferCount > 0U)
 80040a2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	b1ab      	cbz	r3, 80040d6 <HAL_SPI_Receive+0x168>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80040aa:	6823      	ldr	r3, [r4, #0]
 80040ac:	689a      	ldr	r2, [r3, #8]
 80040ae:	f012 0f01 	tst.w	r2, #1
 80040b2:	d0ec      	beq.n	800408e <HAL_SPI_Receive+0x120>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040b4:	68da      	ldr	r2, [r3, #12]
 80040b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040bc:	3302      	adds	r3, #2
 80040be:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80040c0:	f8b4 c046 	ldrh.w	ip, [r4, #70]	; 0x46
 80040c4:	fa1f fc8c 	uxth.w	ip, ip
 80040c8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80040cc:	fa1f fc8c 	uxth.w	ip, ip
 80040d0:	f8a4 c046 	strh.w	ip, [r4, #70]	; 0x46
 80040d4:	e7e5      	b.n	80040a2 <HAL_SPI_Receive+0x134>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040d6:	463a      	mov	r2, r7
 80040d8:	4629      	mov	r1, r5
 80040da:	4620      	mov	r0, r4
 80040dc:	f7ff fc27 	bl	800392e <SPI_EndRxTransaction>
 80040e0:	b108      	cbz	r0, 80040e6 <HAL_SPI_Receive+0x178>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040e2:	2320      	movs	r3, #32
 80040e4:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040e6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80040e8:	b913      	cbnz	r3, 80040f0 <HAL_SPI_Receive+0x182>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80040ea:	2600      	movs	r6, #0
 80040ec:	e000      	b.n	80040f0 <HAL_SPI_Receive+0x182>
    errorcode = HAL_BUSY;
 80040ee:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 80040f0:	2301      	movs	r3, #1
 80040f2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80040f6:	2300      	movs	r3, #0
 80040f8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80040fc:	4630      	mov	r0, r6
 80040fe:	b003      	add	sp, #12
 8004100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8004104:	2603      	movs	r6, #3
 8004106:	e7f3      	b.n	80040f0 <HAL_SPI_Receive+0x182>
 8004108:	2603      	movs	r6, #3
 800410a:	e7f1      	b.n	80040f0 <HAL_SPI_Receive+0x182>
          errorcode = HAL_TIMEOUT;
 800410c:	2603      	movs	r6, #3
 800410e:	e7ef      	b.n	80040f0 <HAL_SPI_Receive+0x182>
 8004110:	2603      	movs	r6, #3
 8004112:	e7ed      	b.n	80040f0 <HAL_SPI_Receive+0x182>
  __HAL_LOCK(hspi);
 8004114:	2602      	movs	r6, #2
 8004116:	e7f1      	b.n	80040fc <HAL_SPI_Receive+0x18e>

08004118 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004118:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800411a:	6a03      	ldr	r3, [r0, #32]
 800411c:	f023 0301 	bic.w	r3, r3, #1
 8004120:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004122:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004124:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004126:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004128:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800412c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004130:	680c      	ldr	r4, [r1, #0]
 8004132:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004134:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004138:	688c      	ldr	r4, [r1, #8]
 800413a:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800413c:	4c15      	ldr	r4, [pc, #84]	; (8004194 <TIM_OC1_SetConfig+0x7c>)
 800413e:	42a0      	cmp	r0, r4
 8004140:	d007      	beq.n	8004152 <TIM_OC1_SetConfig+0x3a>
 8004142:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 8004146:	42a0      	cmp	r0, r4
 8004148:	d003      	beq.n	8004152 <TIM_OC1_SetConfig+0x3a>
 800414a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800414e:	42a0      	cmp	r0, r4
 8004150:	d105      	bne.n	800415e <TIM_OC1_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004152:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004156:	68cc      	ldr	r4, [r1, #12]
 8004158:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800415a:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800415e:	4c0d      	ldr	r4, [pc, #52]	; (8004194 <TIM_OC1_SetConfig+0x7c>)
 8004160:	42a0      	cmp	r0, r4
 8004162:	d007      	beq.n	8004174 <TIM_OC1_SetConfig+0x5c>
 8004164:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 8004168:	42a0      	cmp	r0, r4
 800416a:	d003      	beq.n	8004174 <TIM_OC1_SetConfig+0x5c>
 800416c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004170:	42a0      	cmp	r0, r4
 8004172:	d107      	bne.n	8004184 <TIM_OC1_SetConfig+0x6c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004174:	f425 7c40 	bic.w	ip, r5, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004178:	694c      	ldr	r4, [r1, #20]
 800417a:	ea44 0c0c 	orr.w	ip, r4, ip
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800417e:	698d      	ldr	r5, [r1, #24]
 8004180:	ea45 050c 	orr.w	r5, r5, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004184:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004186:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004188:	684a      	ldr	r2, [r1, #4]
 800418a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800418c:	6203      	str	r3, [r0, #32]
}
 800418e:	bc30      	pop	{r4, r5}
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	40012c00 	.word	0x40012c00

08004198 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004198:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800419a:	6a03      	ldr	r3, [r0, #32]
 800419c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041a0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041a2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041a4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041a6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80041ac:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041b0:	680d      	ldr	r5, [r1, #0]
 80041b2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041b8:	688d      	ldr	r5, [r1, #8]
 80041ba:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041be:	4d12      	ldr	r5, [pc, #72]	; (8004208 <TIM_OC3_SetConfig+0x70>)
 80041c0:	42a8      	cmp	r0, r5
 80041c2:	d019      	beq.n	80041f8 <TIM_OC3_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041c4:	4d10      	ldr	r5, [pc, #64]	; (8004208 <TIM_OC3_SetConfig+0x70>)
 80041c6:	42a8      	cmp	r0, r5
 80041c8:	d007      	beq.n	80041da <TIM_OC3_SetConfig+0x42>
 80041ca:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80041ce:	42a8      	cmp	r0, r5
 80041d0:	d003      	beq.n	80041da <TIM_OC3_SetConfig+0x42>
 80041d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80041d6:	42a8      	cmp	r0, r5
 80041d8:	d107      	bne.n	80041ea <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041da:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041de:	694d      	ldr	r5, [r1, #20]
 80041e0:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041e4:	698d      	ldr	r5, [r1, #24]
 80041e6:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ea:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041ec:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041ee:	684a      	ldr	r2, [r1, #4]
 80041f0:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041f2:	6203      	str	r3, [r0, #32]
}
 80041f4:	bc30      	pop	{r4, r5}
 80041f6:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 80041f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041fc:	68cd      	ldr	r5, [r1, #12]
 80041fe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8004202:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004206:	e7dd      	b.n	80041c4 <TIM_OC3_SetConfig+0x2c>
 8004208:	40012c00 	.word	0x40012c00

0800420c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800420c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800420e:	6a03      	ldr	r3, [r0, #32]
 8004210:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004214:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004216:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004218:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800421a:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800421c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004220:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004224:	680d      	ldr	r5, [r1, #0]
 8004226:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800422a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800422e:	688d      	ldr	r5, [r1, #8]
 8004230:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004234:	4d0b      	ldr	r5, [pc, #44]	; (8004264 <TIM_OC4_SetConfig+0x58>)
 8004236:	42a8      	cmp	r0, r5
 8004238:	d007      	beq.n	800424a <TIM_OC4_SetConfig+0x3e>
 800423a:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800423e:	42a8      	cmp	r0, r5
 8004240:	d003      	beq.n	800424a <TIM_OC4_SetConfig+0x3e>
 8004242:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004246:	42a8      	cmp	r0, r5
 8004248:	d104      	bne.n	8004254 <TIM_OC4_SetConfig+0x48>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800424a:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800424e:	694d      	ldr	r5, [r1, #20]
 8004250:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004254:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004256:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004258:	684b      	ldr	r3, [r1, #4]
 800425a:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800425c:	6202      	str	r2, [r0, #32]
}
 800425e:	bc30      	pop	{r4, r5}
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	40012c00 	.word	0x40012c00

08004268 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004268:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800426a:	6a03      	ldr	r3, [r0, #32]
 800426c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004270:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004272:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004274:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004276:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004278:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800427c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004280:	680d      	ldr	r5, [r1, #0]
 8004282:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004284:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004288:	688d      	ldr	r5, [r1, #8]
 800428a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800428e:	4d0b      	ldr	r5, [pc, #44]	; (80042bc <TIM_OC5_SetConfig+0x54>)
 8004290:	42a8      	cmp	r0, r5
 8004292:	d007      	beq.n	80042a4 <TIM_OC5_SetConfig+0x3c>
 8004294:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8004298:	42a8      	cmp	r0, r5
 800429a:	d003      	beq.n	80042a4 <TIM_OC5_SetConfig+0x3c>
 800429c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80042a0:	42a8      	cmp	r0, r5
 80042a2:	d104      	bne.n	80042ae <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80042a4:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80042a8:	694d      	ldr	r5, [r1, #20]
 80042aa:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ae:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80042b0:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80042b2:	684a      	ldr	r2, [r1, #4]
 80042b4:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042b6:	6203      	str	r3, [r0, #32]
}
 80042b8:	bc30      	pop	{r4, r5}
 80042ba:	4770      	bx	lr
 80042bc:	40012c00 	.word	0x40012c00

080042c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80042c0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80042c2:	6a03      	ldr	r3, [r0, #32]
 80042c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80042c8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ca:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042cc:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042ce:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80042d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042d8:	680d      	ldr	r5, [r1, #0]
 80042da:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80042de:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80042e2:	688d      	ldr	r5, [r1, #8]
 80042e4:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042e8:	4d0b      	ldr	r5, [pc, #44]	; (8004318 <TIM_OC6_SetConfig+0x58>)
 80042ea:	42a8      	cmp	r0, r5
 80042ec:	d007      	beq.n	80042fe <TIM_OC6_SetConfig+0x3e>
 80042ee:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80042f2:	42a8      	cmp	r0, r5
 80042f4:	d003      	beq.n	80042fe <TIM_OC6_SetConfig+0x3e>
 80042f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80042fa:	42a8      	cmp	r0, r5
 80042fc:	d104      	bne.n	8004308 <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80042fe:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004302:	694d      	ldr	r5, [r1, #20]
 8004304:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004308:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800430a:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800430c:	684b      	ldr	r3, [r1, #4]
 800430e:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004310:	6202      	str	r2, [r0, #32]
}
 8004312:	bc30      	pop	{r4, r5}
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	40012c00 	.word	0x40012c00

0800431c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800431c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800431e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004320:	6a04      	ldr	r4, [r0, #32]
 8004322:	f024 0401 	bic.w	r4, r4, #1
 8004326:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004328:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800432a:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800432e:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004332:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8004336:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004338:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800433a:	6203      	str	r3, [r0, #32]
}
 800433c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004340:	4770      	bx	lr

08004342 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004342:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004344:	6a04      	ldr	r4, [r0, #32]
 8004346:	f024 0410 	bic.w	r4, r4, #16
 800434a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800434c:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800434e:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004350:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004354:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004358:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800435c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004360:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004362:	6203      	str	r3, [r0, #32]
}
 8004364:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004368:	4770      	bx	lr

0800436a <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800436a:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800436c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004370:	430b      	orrs	r3, r1
 8004372:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004376:	6083      	str	r3, [r0, #8]
}
 8004378:	4770      	bx	lr
	...

0800437c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800437c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b01      	cmp	r3, #1
 8004384:	d126      	bne.n	80043d4 <HAL_TIM_Base_Start_IT+0x58>
  htim->State = HAL_TIM_STATE_BUSY;
 8004386:	2302      	movs	r3, #2
 8004388:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800438c:	6802      	ldr	r2, [r0, #0]
 800438e:	68d3      	ldr	r3, [r2, #12]
 8004390:	f043 0301 	orr.w	r3, r3, #1
 8004394:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004396:	6803      	ldr	r3, [r0, #0]
 8004398:	4a11      	ldr	r2, [pc, #68]	; (80043e0 <HAL_TIM_Base_Start_IT+0x64>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d00c      	beq.n	80043b8 <HAL_TIM_Base_Start_IT+0x3c>
 800439e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a2:	d009      	beq.n	80043b8 <HAL_TIM_Base_Start_IT+0x3c>
 80043a4:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d005      	beq.n	80043b8 <HAL_TIM_Base_Start_IT+0x3c>
    __HAL_TIM_ENABLE(htim);
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	f042 0201 	orr.w	r2, r2, #1
 80043b2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80043b4:	2000      	movs	r0, #0
 80043b6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043b8:	6899      	ldr	r1, [r3, #8]
 80043ba:	4a0a      	ldr	r2, [pc, #40]	; (80043e4 <HAL_TIM_Base_Start_IT+0x68>)
 80043bc:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043be:	2a06      	cmp	r2, #6
 80043c0:	d00a      	beq.n	80043d8 <HAL_TIM_Base_Start_IT+0x5c>
 80043c2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80043c6:	d009      	beq.n	80043dc <HAL_TIM_Base_Start_IT+0x60>
      __HAL_TIM_ENABLE(htim);
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	f042 0201 	orr.w	r2, r2, #1
 80043ce:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80043d0:	2000      	movs	r0, #0
 80043d2:	4770      	bx	lr
    return HAL_ERROR;
 80043d4:	2001      	movs	r0, #1
 80043d6:	4770      	bx	lr
  return HAL_OK;
 80043d8:	2000      	movs	r0, #0
 80043da:	4770      	bx	lr
 80043dc:	2000      	movs	r0, #0
}
 80043de:	4770      	bx	lr
 80043e0:	40012c00 	.word	0x40012c00
 80043e4:	00010007 	.word	0x00010007

080043e8 <HAL_TIM_OC_MspInit>:
}
 80043e8:	4770      	bx	lr

080043ea <HAL_TIM_PeriodElapsedCallback>:
}
 80043ea:	4770      	bx	lr

080043ec <HAL_TIM_OC_DelayElapsedCallback>:
}
 80043ec:	4770      	bx	lr

080043ee <HAL_TIM_IC_CaptureCallback>:
}
 80043ee:	4770      	bx	lr

080043f0 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80043f0:	4770      	bx	lr

080043f2 <HAL_TIM_TriggerCallback>:
}
 80043f2:	4770      	bx	lr

080043f4 <HAL_TIM_IRQHandler>:
{
 80043f4:	b510      	push	{r4, lr}
 80043f6:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043f8:	6803      	ldr	r3, [r0, #0]
 80043fa:	691a      	ldr	r2, [r3, #16]
 80043fc:	f012 0f02 	tst.w	r2, #2
 8004400:	d011      	beq.n	8004426 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	f012 0f02 	tst.w	r2, #2
 8004408:	d00d      	beq.n	8004426 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800440a:	f06f 0202 	mvn.w	r2, #2
 800440e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004410:	2301      	movs	r3, #1
 8004412:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004414:	6803      	ldr	r3, [r0, #0]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	f013 0f03 	tst.w	r3, #3
 800441c:	d079      	beq.n	8004512 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800441e:	f7ff ffe6 	bl	80043ee <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004422:	2300      	movs	r3, #0
 8004424:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	691a      	ldr	r2, [r3, #16]
 800442a:	f012 0f04 	tst.w	r2, #4
 800442e:	d012      	beq.n	8004456 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	f012 0f04 	tst.w	r2, #4
 8004436:	d00e      	beq.n	8004456 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004438:	f06f 0204 	mvn.w	r2, #4
 800443c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800443e:	2302      	movs	r3, #2
 8004440:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004442:	6823      	ldr	r3, [r4, #0]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	f413 7f40 	tst.w	r3, #768	; 0x300
 800444a:	d068      	beq.n	800451e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800444c:	4620      	mov	r0, r4
 800444e:	f7ff ffce 	bl	80043ee <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004452:	2300      	movs	r3, #0
 8004454:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004456:	6823      	ldr	r3, [r4, #0]
 8004458:	691a      	ldr	r2, [r3, #16]
 800445a:	f012 0f08 	tst.w	r2, #8
 800445e:	d012      	beq.n	8004486 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	f012 0f08 	tst.w	r2, #8
 8004466:	d00e      	beq.n	8004486 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004468:	f06f 0208 	mvn.w	r2, #8
 800446c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800446e:	2304      	movs	r3, #4
 8004470:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004472:	6823      	ldr	r3, [r4, #0]
 8004474:	69db      	ldr	r3, [r3, #28]
 8004476:	f013 0f03 	tst.w	r3, #3
 800447a:	d057      	beq.n	800452c <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800447c:	4620      	mov	r0, r4
 800447e:	f7ff ffb6 	bl	80043ee <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004482:	2300      	movs	r3, #0
 8004484:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	691a      	ldr	r2, [r3, #16]
 800448a:	f012 0f10 	tst.w	r2, #16
 800448e:	d012      	beq.n	80044b6 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	f012 0f10 	tst.w	r2, #16
 8004496:	d00e      	beq.n	80044b6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004498:	f06f 0210 	mvn.w	r2, #16
 800449c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800449e:	2308      	movs	r3, #8
 80044a0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044a2:	6823      	ldr	r3, [r4, #0]
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80044aa:	d046      	beq.n	800453a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80044ac:	4620      	mov	r0, r4
 80044ae:	f7ff ff9e 	bl	80043ee <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044b2:	2300      	movs	r3, #0
 80044b4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044b6:	6823      	ldr	r3, [r4, #0]
 80044b8:	691a      	ldr	r2, [r3, #16]
 80044ba:	f012 0f01 	tst.w	r2, #1
 80044be:	d003      	beq.n	80044c8 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	f012 0f01 	tst.w	r2, #1
 80044c6:	d13f      	bne.n	8004548 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044c8:	6823      	ldr	r3, [r4, #0]
 80044ca:	691a      	ldr	r2, [r3, #16]
 80044cc:	f012 0f80 	tst.w	r2, #128	; 0x80
 80044d0:	d003      	beq.n	80044da <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80044d8:	d13d      	bne.n	8004556 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80044da:	6823      	ldr	r3, [r4, #0]
 80044dc:	691a      	ldr	r2, [r3, #16]
 80044de:	f412 7f80 	tst.w	r2, #256	; 0x100
 80044e2:	d003      	beq.n	80044ec <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044e4:	68da      	ldr	r2, [r3, #12]
 80044e6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80044ea:	d13b      	bne.n	8004564 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044ec:	6823      	ldr	r3, [r4, #0]
 80044ee:	691a      	ldr	r2, [r3, #16]
 80044f0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80044f4:	d003      	beq.n	80044fe <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80044fc:	d139      	bne.n	8004572 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044fe:	6823      	ldr	r3, [r4, #0]
 8004500:	691a      	ldr	r2, [r3, #16]
 8004502:	f012 0f20 	tst.w	r2, #32
 8004506:	d003      	beq.n	8004510 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	f012 0f20 	tst.w	r2, #32
 800450e:	d137      	bne.n	8004580 <HAL_TIM_IRQHandler+0x18c>
}
 8004510:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004512:	f7ff ff6b 	bl	80043ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004516:	4620      	mov	r0, r4
 8004518:	f7ff ff6a 	bl	80043f0 <HAL_TIM_PWM_PulseFinishedCallback>
 800451c:	e781      	b.n	8004422 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800451e:	4620      	mov	r0, r4
 8004520:	f7ff ff64 	bl	80043ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004524:	4620      	mov	r0, r4
 8004526:	f7ff ff63 	bl	80043f0 <HAL_TIM_PWM_PulseFinishedCallback>
 800452a:	e792      	b.n	8004452 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800452c:	4620      	mov	r0, r4
 800452e:	f7ff ff5d 	bl	80043ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004532:	4620      	mov	r0, r4
 8004534:	f7ff ff5c 	bl	80043f0 <HAL_TIM_PWM_PulseFinishedCallback>
 8004538:	e7a3      	b.n	8004482 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800453a:	4620      	mov	r0, r4
 800453c:	f7ff ff56 	bl	80043ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004540:	4620      	mov	r0, r4
 8004542:	f7ff ff55 	bl	80043f0 <HAL_TIM_PWM_PulseFinishedCallback>
 8004546:	e7b4      	b.n	80044b2 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004548:	f06f 0201 	mvn.w	r2, #1
 800454c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800454e:	4620      	mov	r0, r4
 8004550:	f7ff ff4b 	bl	80043ea <HAL_TIM_PeriodElapsedCallback>
 8004554:	e7b8      	b.n	80044c8 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004556:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800455a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800455c:	4620      	mov	r0, r4
 800455e:	f000 f9ee 	bl	800493e <HAL_TIMEx_BreakCallback>
 8004562:	e7ba      	b.n	80044da <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004564:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004568:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800456a:	4620      	mov	r0, r4
 800456c:	f000 f9e8 	bl	8004940 <HAL_TIMEx_Break2Callback>
 8004570:	e7bc      	b.n	80044ec <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004572:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004576:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004578:	4620      	mov	r0, r4
 800457a:	f7ff ff3a 	bl	80043f2 <HAL_TIM_TriggerCallback>
 800457e:	e7be      	b.n	80044fe <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004580:	f06f 0220 	mvn.w	r2, #32
 8004584:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004586:	4620      	mov	r0, r4
 8004588:	f000 f9d8 	bl	800493c <HAL_TIMEx_CommutCallback>
}
 800458c:	e7c0      	b.n	8004510 <HAL_TIM_IRQHandler+0x11c>
	...

08004590 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8004590:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004592:	4a1a      	ldr	r2, [pc, #104]	; (80045fc <TIM_Base_SetConfig+0x6c>)
 8004594:	4290      	cmp	r0, r2
 8004596:	d002      	beq.n	800459e <TIM_Base_SetConfig+0xe>
 8004598:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800459c:	d103      	bne.n	80045a6 <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800459e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80045a2:	684a      	ldr	r2, [r1, #4]
 80045a4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045a6:	4a15      	ldr	r2, [pc, #84]	; (80045fc <TIM_Base_SetConfig+0x6c>)
 80045a8:	4290      	cmp	r0, r2
 80045aa:	d00a      	beq.n	80045c2 <TIM_Base_SetConfig+0x32>
 80045ac:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80045b0:	d007      	beq.n	80045c2 <TIM_Base_SetConfig+0x32>
 80045b2:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80045b6:	4290      	cmp	r0, r2
 80045b8:	d003      	beq.n	80045c2 <TIM_Base_SetConfig+0x32>
 80045ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045be:	4290      	cmp	r0, r2
 80045c0:	d103      	bne.n	80045ca <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80045c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045c6:	68ca      	ldr	r2, [r1, #12]
 80045c8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045ce:	694a      	ldr	r2, [r1, #20]
 80045d0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80045d2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045d4:	688b      	ldr	r3, [r1, #8]
 80045d6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80045d8:	680b      	ldr	r3, [r1, #0]
 80045da:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045dc:	4b07      	ldr	r3, [pc, #28]	; (80045fc <TIM_Base_SetConfig+0x6c>)
 80045de:	4298      	cmp	r0, r3
 80045e0:	d007      	beq.n	80045f2 <TIM_Base_SetConfig+0x62>
 80045e2:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80045e6:	4298      	cmp	r0, r3
 80045e8:	d003      	beq.n	80045f2 <TIM_Base_SetConfig+0x62>
 80045ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045ee:	4298      	cmp	r0, r3
 80045f0:	d101      	bne.n	80045f6 <TIM_Base_SetConfig+0x66>
    TIMx->RCR = Structure->RepetitionCounter;
 80045f2:	690b      	ldr	r3, [r1, #16]
 80045f4:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80045f6:	2301      	movs	r3, #1
 80045f8:	6143      	str	r3, [r0, #20]
}
 80045fa:	4770      	bx	lr
 80045fc:	40012c00 	.word	0x40012c00

08004600 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004600:	b360      	cbz	r0, 800465c <HAL_TIM_Base_Init+0x5c>
{
 8004602:	b510      	push	{r4, lr}
 8004604:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004606:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800460a:	b313      	cbz	r3, 8004652 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800460c:	2302      	movs	r3, #2
 800460e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004612:	4621      	mov	r1, r4
 8004614:	f851 0b04 	ldr.w	r0, [r1], #4
 8004618:	f7ff ffba 	bl	8004590 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800461c:	2301      	movs	r3, #1
 800461e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004622:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004626:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800462a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800462e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004632:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004636:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800463a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800463e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004642:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004646:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800464a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800464e:	2000      	movs	r0, #0
}
 8004650:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004652:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004656:	f7fe f8a1 	bl	800279c <HAL_TIM_Base_MspInit>
 800465a:	e7d7      	b.n	800460c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800465c:	2001      	movs	r0, #1
}
 800465e:	4770      	bx	lr

08004660 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8004660:	b360      	cbz	r0, 80046bc <HAL_TIM_OC_Init+0x5c>
{
 8004662:	b510      	push	{r4, lr}
 8004664:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004666:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800466a:	b313      	cbz	r3, 80046b2 <HAL_TIM_OC_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800466c:	2302      	movs	r3, #2
 800466e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004672:	4621      	mov	r1, r4
 8004674:	f851 0b04 	ldr.w	r0, [r1], #4
 8004678:	f7ff ff8a 	bl	8004590 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800467c:	2301      	movs	r3, #1
 800467e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004682:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004686:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800468a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800468e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004692:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004696:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800469a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800469e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046a2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80046a6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80046aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80046ae:	2000      	movs	r0, #0
}
 80046b0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80046b2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 80046b6:	f7ff fe97 	bl	80043e8 <HAL_TIM_OC_MspInit>
 80046ba:	e7d7      	b.n	800466c <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 80046bc:	2001      	movs	r0, #1
}
 80046be:	4770      	bx	lr

080046c0 <TIM_OC2_SetConfig>:
{
 80046c0:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046c2:	6a03      	ldr	r3, [r0, #32]
 80046c4:	f023 0310 	bic.w	r3, r3, #16
 80046c8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80046ca:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80046cc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80046ce:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046d0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80046d4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046d8:	680d      	ldr	r5, [r1, #0]
 80046da:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80046de:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046e2:	688d      	ldr	r5, [r1, #8]
 80046e4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046e8:	4d12      	ldr	r5, [pc, #72]	; (8004734 <TIM_OC2_SetConfig+0x74>)
 80046ea:	42a8      	cmp	r0, r5
 80046ec:	d019      	beq.n	8004722 <TIM_OC2_SetConfig+0x62>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ee:	4d11      	ldr	r5, [pc, #68]	; (8004734 <TIM_OC2_SetConfig+0x74>)
 80046f0:	42a8      	cmp	r0, r5
 80046f2:	d007      	beq.n	8004704 <TIM_OC2_SetConfig+0x44>
 80046f4:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80046f8:	42a8      	cmp	r0, r5
 80046fa:	d003      	beq.n	8004704 <TIM_OC2_SetConfig+0x44>
 80046fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004700:	42a8      	cmp	r0, r5
 8004702:	d107      	bne.n	8004714 <TIM_OC2_SetConfig+0x54>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004704:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004708:	694d      	ldr	r5, [r1, #20]
 800470a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800470e:	698d      	ldr	r5, [r1, #24]
 8004710:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8004714:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004716:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004718:	684a      	ldr	r2, [r1, #4]
 800471a:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800471c:	6203      	str	r3, [r0, #32]
}
 800471e:	bc30      	pop	{r4, r5}
 8004720:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8004722:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004726:	68cd      	ldr	r5, [r1, #12]
 8004728:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800472c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004730:	e7dd      	b.n	80046ee <TIM_OC2_SetConfig+0x2e>
 8004732:	bf00      	nop
 8004734:	40012c00 	.word	0x40012c00

08004738 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8004738:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800473c:	2b01      	cmp	r3, #1
 800473e:	d036      	beq.n	80047ae <HAL_TIM_OC_ConfigChannel+0x76>
{
 8004740:	b510      	push	{r4, lr}
 8004742:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004744:	2301      	movs	r3, #1
 8004746:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800474a:	2a14      	cmp	r2, #20
 800474c:	d82a      	bhi.n	80047a4 <HAL_TIM_OC_ConfigChannel+0x6c>
 800474e:	e8df f002 	tbb	[pc, r2]
 8004752:	290b      	.short	0x290b
 8004754:	29102929 	.word	0x29102929
 8004758:	29152929 	.word	0x29152929
 800475c:	291a2929 	.word	0x291a2929
 8004760:	291f2929 	.word	0x291f2929
 8004764:	2929      	.short	0x2929
 8004766:	24          	.byte	0x24
 8004767:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004768:	6800      	ldr	r0, [r0, #0]
 800476a:	f7ff fcd5 	bl	8004118 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800476e:	2000      	movs	r0, #0
      break;
 8004770:	e019      	b.n	80047a6 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004772:	6800      	ldr	r0, [r0, #0]
 8004774:	f7ff ffa4 	bl	80046c0 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004778:	2000      	movs	r0, #0
      break;
 800477a:	e014      	b.n	80047a6 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800477c:	6800      	ldr	r0, [r0, #0]
 800477e:	f7ff fd0b 	bl	8004198 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004782:	2000      	movs	r0, #0
      break;
 8004784:	e00f      	b.n	80047a6 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004786:	6800      	ldr	r0, [r0, #0]
 8004788:	f7ff fd40 	bl	800420c <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800478c:	2000      	movs	r0, #0
      break;
 800478e:	e00a      	b.n	80047a6 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004790:	6800      	ldr	r0, [r0, #0]
 8004792:	f7ff fd69 	bl	8004268 <TIM_OC5_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004796:	2000      	movs	r0, #0
      break;
 8004798:	e005      	b.n	80047a6 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800479a:	6800      	ldr	r0, [r0, #0]
 800479c:	f7ff fd90 	bl	80042c0 <TIM_OC6_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80047a0:	2000      	movs	r0, #0
      break;
 80047a2:	e000      	b.n	80047a6 <HAL_TIM_OC_ConfigChannel+0x6e>
  switch (Channel)
 80047a4:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80047a6:	2300      	movs	r3, #0
 80047a8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80047ac:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 80047ae:	2002      	movs	r0, #2
}
 80047b0:	4770      	bx	lr

080047b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047b2:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047b4:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047b6:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047ba:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80047be:	430a      	orrs	r2, r1
 80047c0:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047c4:	6082      	str	r2, [r0, #8]
}
 80047c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80047cc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d076      	beq.n	80048c2 <HAL_TIM_ConfigClockSource+0xf6>
{
 80047d4:	b510      	push	{r4, lr}
 80047d6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80047d8:	2301      	movs	r3, #1
 80047da:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80047de:	2302      	movs	r3, #2
 80047e0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80047e4:	6802      	ldr	r2, [r0, #0]
 80047e6:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047e8:	4b37      	ldr	r3, [pc, #220]	; (80048c8 <HAL_TIM_ConfigClockSource+0xfc>)
 80047ea:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 80047ec:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80047ee:	680b      	ldr	r3, [r1, #0]
 80047f0:	2b60      	cmp	r3, #96	; 0x60
 80047f2:	d04c      	beq.n	800488e <HAL_TIM_ConfigClockSource+0xc2>
 80047f4:	d829      	bhi.n	800484a <HAL_TIM_ConfigClockSource+0x7e>
 80047f6:	2b40      	cmp	r3, #64	; 0x40
 80047f8:	d054      	beq.n	80048a4 <HAL_TIM_ConfigClockSource+0xd8>
 80047fa:	d90c      	bls.n	8004816 <HAL_TIM_ConfigClockSource+0x4a>
 80047fc:	2b50      	cmp	r3, #80	; 0x50
 80047fe:	d122      	bne.n	8004846 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004800:	68ca      	ldr	r2, [r1, #12]
 8004802:	6849      	ldr	r1, [r1, #4]
 8004804:	6820      	ldr	r0, [r4, #0]
 8004806:	f7ff fd89 	bl	800431c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800480a:	2150      	movs	r1, #80	; 0x50
 800480c:	6820      	ldr	r0, [r4, #0]
 800480e:	f7ff fdac 	bl	800436a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004812:	2000      	movs	r0, #0
      break;
 8004814:	e005      	b.n	8004822 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8004816:	2b20      	cmp	r3, #32
 8004818:	d00d      	beq.n	8004836 <HAL_TIM_ConfigClockSource+0x6a>
 800481a:	d909      	bls.n	8004830 <HAL_TIM_ConfigClockSource+0x64>
 800481c:	2b30      	cmp	r3, #48	; 0x30
 800481e:	d00a      	beq.n	8004836 <HAL_TIM_ConfigClockSource+0x6a>
      status = HAL_ERROR;
 8004820:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8004822:	2301      	movs	r3, #1
 8004824:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004828:	2300      	movs	r3, #0
 800482a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800482e:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8004830:	b10b      	cbz	r3, 8004836 <HAL_TIM_ConfigClockSource+0x6a>
 8004832:	2b10      	cmp	r3, #16
 8004834:	d105      	bne.n	8004842 <HAL_TIM_ConfigClockSource+0x76>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004836:	4619      	mov	r1, r3
 8004838:	6820      	ldr	r0, [r4, #0]
 800483a:	f7ff fd96 	bl	800436a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800483e:	2000      	movs	r0, #0
      break;
 8004840:	e7ef      	b.n	8004822 <HAL_TIM_ConfigClockSource+0x56>
      status = HAL_ERROR;
 8004842:	2001      	movs	r0, #1
 8004844:	e7ed      	b.n	8004822 <HAL_TIM_ConfigClockSource+0x56>
 8004846:	2001      	movs	r0, #1
 8004848:	e7eb      	b.n	8004822 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 800484a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800484e:	d034      	beq.n	80048ba <HAL_TIM_ConfigClockSource+0xee>
 8004850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004854:	d10c      	bne.n	8004870 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ETR_SetConfig(htim->Instance,
 8004856:	68cb      	ldr	r3, [r1, #12]
 8004858:	684a      	ldr	r2, [r1, #4]
 800485a:	6889      	ldr	r1, [r1, #8]
 800485c:	6820      	ldr	r0, [r4, #0]
 800485e:	f7ff ffa8 	bl	80047b2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004862:	6822      	ldr	r2, [r4, #0]
 8004864:	6893      	ldr	r3, [r2, #8]
 8004866:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800486a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800486c:	2000      	movs	r0, #0
      break;
 800486e:	e7d8      	b.n	8004822 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8004870:	2b70      	cmp	r3, #112	; 0x70
 8004872:	d124      	bne.n	80048be <HAL_TIM_ConfigClockSource+0xf2>
      TIM_ETR_SetConfig(htim->Instance,
 8004874:	68cb      	ldr	r3, [r1, #12]
 8004876:	684a      	ldr	r2, [r1, #4]
 8004878:	6889      	ldr	r1, [r1, #8]
 800487a:	6820      	ldr	r0, [r4, #0]
 800487c:	f7ff ff99 	bl	80047b2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004880:	6822      	ldr	r2, [r4, #0]
 8004882:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004884:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004888:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800488a:	2000      	movs	r0, #0
      break;
 800488c:	e7c9      	b.n	8004822 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800488e:	68ca      	ldr	r2, [r1, #12]
 8004890:	6849      	ldr	r1, [r1, #4]
 8004892:	6820      	ldr	r0, [r4, #0]
 8004894:	f7ff fd55 	bl	8004342 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004898:	2160      	movs	r1, #96	; 0x60
 800489a:	6820      	ldr	r0, [r4, #0]
 800489c:	f7ff fd65 	bl	800436a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80048a0:	2000      	movs	r0, #0
      break;
 80048a2:	e7be      	b.n	8004822 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048a4:	68ca      	ldr	r2, [r1, #12]
 80048a6:	6849      	ldr	r1, [r1, #4]
 80048a8:	6820      	ldr	r0, [r4, #0]
 80048aa:	f7ff fd37 	bl	800431c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048ae:	2140      	movs	r1, #64	; 0x40
 80048b0:	6820      	ldr	r0, [r4, #0]
 80048b2:	f7ff fd5a 	bl	800436a <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80048b6:	2000      	movs	r0, #0
      break;
 80048b8:	e7b3      	b.n	8004822 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 80048ba:	2000      	movs	r0, #0
 80048bc:	e7b1      	b.n	8004822 <HAL_TIM_ConfigClockSource+0x56>
      status = HAL_ERROR;
 80048be:	2001      	movs	r0, #1
 80048c0:	e7af      	b.n	8004822 <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 80048c2:	2002      	movs	r0, #2
}
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	fffe0088 	.word	0xfffe0088

080048cc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048cc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d02f      	beq.n	8004934 <HAL_TIMEx_MasterConfigSynchronization+0x68>
{
 80048d4:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80048d6:	2301      	movs	r3, #1
 80048d8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048dc:	2302      	movs	r3, #2
 80048de:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048e2:	6802      	ldr	r2, [r0, #0]
 80048e4:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048e6:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80048e8:	4d13      	ldr	r5, [pc, #76]	; (8004938 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 80048ea:	42aa      	cmp	r2, r5
 80048ec:	d01d      	beq.n	800492a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048f2:	680d      	ldr	r5, [r1, #0]
 80048f4:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048f6:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048f8:	6803      	ldr	r3, [r0, #0]
 80048fa:	4a0f      	ldr	r2, [pc, #60]	; (8004938 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d006      	beq.n	800490e <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8004900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004904:	d003      	beq.n	800490e <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8004906:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 800490a:	4293      	cmp	r3, r2
 800490c:	d104      	bne.n	8004918 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800490e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004912:	688a      	ldr	r2, [r1, #8]
 8004914:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004916:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004918:	2301      	movs	r3, #1
 800491a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800491e:	2300      	movs	r3, #0
 8004920:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8004924:	4618      	mov	r0, r3
}
 8004926:	bc30      	pop	{r4, r5}
 8004928:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 800492a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800492e:	684d      	ldr	r5, [r1, #4]
 8004930:	432b      	orrs	r3, r5
 8004932:	e7dc      	b.n	80048ee <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 8004934:	2002      	movs	r0, #2
}
 8004936:	4770      	bx	lr
 8004938:	40012c00 	.word	0x40012c00

0800493c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800493c:	4770      	bx	lr

0800493e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800493e:	4770      	bx	lr

08004940 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004940:	4770      	bx	lr

08004942 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8004942:	468c      	mov	ip, r1
 8004944:	4613      	mov	r3, r2
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8004946:	6841      	ldr	r1, [r0, #4]
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8004948:	f8dc 2004 	ldr.w	r2, [ip, #4]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800494c:	685b      	ldr	r3, [r3, #4]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800494e:	f8b0 c000 	ldrh.w	ip, [r0]
 8004952:	8840      	ldrh	r0, [r0, #2]
 8004954:	fb00 f00c 	mul.w	r0, r0, ip
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8004958:	e008      	b.n	800496c <arm_mat_add_f32+0x2a>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800495a:	ecf1 7a01 	vldmia	r1!, {s15}
 800495e:	ecb2 7a01 	vldmia	r2!, {s14}
 8004962:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004966:	ece3 7a01 	vstmia	r3!, {s15}

      /* Decrement loop counter */
      blkCnt--;
 800496a:	3801      	subs	r0, #1
    while (blkCnt > 0U)
 800496c:	2800      	cmp	r0, #0
 800496e:	d1f4      	bne.n	800495a <arm_mat_add_f32+0x18>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
 8004970:	4770      	bx	lr

08004972 <arm_mat_init_f32>:
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
  /* Assign Number of Rows */
  S->numRows = nRows;
 8004972:	8001      	strh	r1, [r0, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8004974:	8042      	strh	r2, [r0, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8004976:	6043      	str	r3, [r0, #4]
}
 8004978:	4770      	bx	lr
	...

0800497c <arm_mat_inverse_f32>:
}
#else
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800497c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004980:	b085      	sub	sp, #20
 8004982:	9003      	str	r0, [sp, #12]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8004984:	f8d0 b004 	ldr.w	fp, [r0, #4]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8004988:	684b      	ldr	r3, [r1, #4]
 800498a:	9301      	str	r3, [sp, #4]
  float32_t *pInT1, *pInT2;                      /* Temporary input data matrix pointer */
  float32_t *pOutT1, *pOutT2;                    /* Temporary output data matrix pointer */
  float32_t *pPivotRowIn, *pPRT_in, *pPivotRowDst, *pPRT_pDst;  /* Temporary input and output data matrix pointer */
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800498c:	f8b0 9000 	ldrh.w	r9, [r0]
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 8004990:	f8b0 e002 	ldrh.w	lr, [r0, #2]

    /* Loop over the number of rows */
    rowCnt = numRows;

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 8004994:	4648      	mov	r0, r9
 8004996:	e012      	b.n	80049be <arm_mat_inverse_f32+0x42>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
      while (j > 0U)
      {
        *pOutT1++ = 0.0f;
 8004998:	2100      	movs	r1, #0
 800499a:	f843 1b04 	str.w	r1, [r3], #4
        j--;
 800499e:	3a01      	subs	r2, #1
      while (j > 0U)
 80049a0:	2a00      	cmp	r2, #0
 80049a2:	d1f9      	bne.n	8004998 <arm_mat_inverse_f32+0x1c>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pOutT1++ = 1.0f;
 80049a4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80049a8:	f843 2b04 	str.w	r2, [r3], #4

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 80049ac:	3801      	subs	r0, #1
 80049ae:	4602      	mov	r2, r0
      while (j > 0U)
 80049b0:	e003      	b.n	80049ba <arm_mat_inverse_f32+0x3e>
      {
        *pOutT1++ = 0.0f;
 80049b2:	2100      	movs	r1, #0
 80049b4:	f843 1b04 	str.w	r1, [r3], #4
        j--;
 80049b8:	3a01      	subs	r2, #1
      while (j > 0U)
 80049ba:	2a00      	cmp	r2, #0
 80049bc:	d1f9      	bne.n	80049b2 <arm_mat_inverse_f32+0x36>
    while (rowCnt > 0U)
 80049be:	b110      	cbz	r0, 80049c6 <arm_mat_inverse_f32+0x4a>
      j = numRows - rowCnt;
 80049c0:	eba9 0200 	sub.w	r2, r9, r0
      while (j > 0U)
 80049c4:	e7ec      	b.n	80049a0 <arm_mat_inverse_f32+0x24>
    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */
    loopCnt = numCols;

    /* Index modifier to navigate through the columns */
    l = 0U;
 80049c6:	4684      	mov	ip, r0
    loopCnt = numCols;
 80049c8:	46f2      	mov	sl, lr
  float32_t Xchg, in = 0.0f, in1;                /* Temporary input values  */
 80049ca:	eddf 6a66 	vldr	s13, [pc, #408]	; 8004b64 <arm_mat_inverse_f32+0x1e8>
 80049ce:	9002      	str	r0, [sp, #8]
 80049d0:	e07c      	b.n	8004acc <arm_mat_inverse_f32+0x150>
           * replace in the rows below */
          if (*pInT2 != 0.0f)
          {
            /* Loop over number of columns
             * to the right of the pilot element */
            j = numCols - l;
 80049d2:	ebae 000c 	sub.w	r0, lr, ip
      pInT1 = pIn + (l * numCols);
 80049d6:	4632      	mov	r2, r6

            while (j > 0U)
 80049d8:	e006      	b.n	80049e8 <arm_mat_inverse_f32+0x6c>
            {
              /* Exchange the row elements of the input matrix */
              Xchg = *pInT2;
 80049da:	681c      	ldr	r4, [r3, #0]
              *pInT2++ = *pInT1;
 80049dc:	6815      	ldr	r5, [r2, #0]
 80049de:	f843 5b04 	str.w	r5, [r3], #4
              *pInT1++ = Xchg;
 80049e2:	f842 4b04 	str.w	r4, [r2], #4

              /* Decrement the loop counter */
              j--;
 80049e6:	3801      	subs	r0, #1
            while (j > 0U)
 80049e8:	2800      	cmp	r0, #0
 80049ea:	d1f6      	bne.n	80049da <arm_mat_inverse_f32+0x5e>
            }

            /* Loop over number of columns of the destination matrix */
            j = numCols;
 80049ec:	4672      	mov	r2, lr
      pOutT1 = pOut + (l * numCols);
 80049ee:	4643      	mov	r3, r8
 80049f0:	e006      	b.n	8004a00 <arm_mat_inverse_f32+0x84>

            while (j > 0U)
            {
              /* Exchange the row elements of the destination matrix */
              Xchg = *pOutT2;
 80049f2:	6808      	ldr	r0, [r1, #0]
              *pOutT2++ = *pOutT1;
 80049f4:	681c      	ldr	r4, [r3, #0]
 80049f6:	f841 4b04 	str.w	r4, [r1], #4
              *pOutT1++ = Xchg;
 80049fa:	f843 0b04 	str.w	r0, [r3], #4

              /* Decrement loop counter */
              j--;
 80049fe:	3a01      	subs	r2, #1
            while (j > 0U)
 8004a00:	2a00      	cmp	r2, #0
 8004a02:	d1f6      	bne.n	80049f2 <arm_mat_inverse_f32+0x76>
            }

            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 8004a04:	2301      	movs	r3, #1
 8004a06:	9302      	str	r3, [sp, #8]
 8004a08:	e071      	b.n	8004aee <arm_mat_inverse_f32+0x172>
        for (i = 1U; i < numRows - l; i++)
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	eba9 030c 	sub.w	r3, r9, ip
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d96c      	bls.n	8004aee <arm_mat_inverse_f32+0x172>
          pInT2 = pInT1 + (numCols * i);
 8004a14:	fb0e f102 	mul.w	r1, lr, r2
 8004a18:	eb06 0381 	add.w	r3, r6, r1, lsl #2
          pOutT2 = pOutT1 + (numCols * i);
 8004a1c:	eb08 0181 	add.w	r1, r8, r1, lsl #2
          if (*pInT2 != 0.0f)
 8004a20:	edd3 7a00 	vldr	s15, [r3]
 8004a24:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a2c:	d1d1      	bne.n	80049d2 <arm_mat_inverse_f32+0x56>
        for (i = 1U; i < numRows - l; i++)
 8004a2e:	3201      	adds	r2, #1
 8004a30:	e7ec      	b.n	8004a0c <arm_mat_inverse_f32+0x90>

      while (j > 0U)
      {
        /* Divide each element of the row of the input matrix
         * by the pivot element */
        in1 = *pInT1;
 8004a32:	ed93 7a00 	vldr	s14, [r3]
        *pInT1++ = in1 / in;
 8004a36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a3a:	ece3 7a01 	vstmia	r3!, {s15}

        /* Decrement the loop counter */
        j--;
 8004a3e:	3a01      	subs	r2, #1
      while (j > 0U)
 8004a40:	2a00      	cmp	r2, #0
 8004a42:	d1f6      	bne.n	8004a32 <arm_mat_inverse_f32+0xb6>
      }

      /* Loop over number of columns of the destination matrix */
      j = numCols;
 8004a44:	4670      	mov	r0, lr
      pInT2 = pPivotRowDst;
 8004a46:	4643      	mov	r3, r8
 8004a48:	e006      	b.n	8004a58 <arm_mat_inverse_f32+0xdc>

      while (j > 0U)
      {
        /* Divide each element of the row of the destination matrix
         * by the pivot element */
        in1 = *pInT2;
 8004a4a:	ed93 7a00 	vldr	s14, [r3]
        *pInT2++ = in1 / in;
 8004a4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a52:	ece3 7a01 	vstmia	r3!, {s15}

        /* Decrement the loop counter */
        j--;
 8004a56:	3801      	subs	r0, #1
      while (j > 0U)
 8004a58:	2800      	cmp	r0, #0
 8004a5a:	d1f6      	bne.n	8004a4a <arm_mat_inverse_f32+0xce>
      /* index used to check for pivot element */
      i = 0U;

      /* Loop over number of rows */
      /*  to be replaced by the sum of that row and a multiple of row i */
      k = numRows;
 8004a5c:	464c      	mov	r4, r9
      pInT2 = pOut;
 8004a5e:	9a01      	ldr	r2, [sp, #4]
      pInT1 = pIn;
 8004a60:	465b      	mov	r3, fp
 8004a62:	e025      	b.n	8004ab0 <arm_mat_inverse_f32+0x134>
        /* Check for the pivot element */
        if (i == l)
        {
          /* If the processing element is the pivot element,
             only the columns to the right are to be processed */
          pInT1 += numCols - l;
 8004a64:	eb03 0387 	add.w	r3, r3, r7, lsl #2

          pInT2 += numCols;
 8004a68:	eb02 028e 	add.w	r2, r2, lr, lsl #2
 8004a6c:	e01c      	b.n	8004aa8 <arm_mat_inverse_f32+0x12c>

          while (j > 0U)
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT1;
 8004a6e:	edd3 7a00 	vldr	s15, [r3]
            *pInT1++ = in1 - (in * *pPRT_in++);
 8004a72:	ecb1 7a01 	vldmia	r1!, {s14}
 8004a76:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004a7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004a7e:	ece3 7a01 	vstmia	r3!, {s15}

            /* Decrement the loop counter */
            j--;
 8004a82:	3d01      	subs	r5, #1
          while (j > 0U)
 8004a84:	2d00      	cmp	r5, #0
 8004a86:	d1f2      	bne.n	8004a6e <arm_mat_inverse_f32+0xf2>
          }

          /* Loop over the number of columns to
             replace the elements in the destination matrix */
          j = numCols;
 8004a88:	4675      	mov	r5, lr
          pPRT_pDst = pPivotRowDst;
 8004a8a:	4641      	mov	r1, r8
 8004a8c:	e00a      	b.n	8004aa4 <arm_mat_inverse_f32+0x128>

          while (j > 0U)
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT2;
 8004a8e:	edd2 7a00 	vldr	s15, [r2]
            *pInT2++ = in1 - (in * *pPRT_pDst++);
 8004a92:	ecb1 7a01 	vldmia	r1!, {s14}
 8004a96:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004a9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004a9e:	ece2 7a01 	vstmia	r2!, {s15}

            /* Decrement loop counter */
            j--;
 8004aa2:	3d01      	subs	r5, #1
          while (j > 0U)
 8004aa4:	2d00      	cmp	r5, #0
 8004aa6:	d1f2      	bne.n	8004a8e <arm_mat_inverse_f32+0x112>
          }

        }

        /* Increment temporary input pointer */
        pInT1 = pInT1 + l;
 8004aa8:	eb03 038c 	add.w	r3, r3, ip, lsl #2

        /* Decrement loop counter */
        k--;
 8004aac:	3c01      	subs	r4, #1

        /* Increment pivot index */
        i++;
 8004aae:	3001      	adds	r0, #1
      while (k > 0U)
 8004ab0:	b134      	cbz	r4, 8004ac0 <arm_mat_inverse_f32+0x144>
        if (i == l)
 8004ab2:	4560      	cmp	r0, ip
 8004ab4:	d0d6      	beq.n	8004a64 <arm_mat_inverse_f32+0xe8>
          in = *pInT1;
 8004ab6:	edd3 6a00 	vldr	s13, [r3]
          j = (numCols - l);
 8004aba:	463d      	mov	r5, r7
          pPRT_in = pPivotRowIn;
 8004abc:	4631      	mov	r1, r6
          while (j > 0U)
 8004abe:	e7e1      	b.n	8004a84 <arm_mat_inverse_f32+0x108>
      }

      /* Increment the input pointer */
      pIn++;
 8004ac0:	f10b 0b04 	add.w	fp, fp, #4

      /* Decrement the loop counter */
      loopCnt--;
 8004ac4:	f10a 3aff 	add.w	sl, sl, #4294967295

      /* Increment the index modifier */
      l++;
 8004ac8:	f10c 0c01 	add.w	ip, ip, #1
    while (loopCnt > 0U)
 8004acc:	f1ba 0f00 	cmp.w	sl, #0
 8004ad0:	d01c      	beq.n	8004b0c <arm_mat_inverse_f32+0x190>
      pInT1 = pIn + (l * numCols);
 8004ad2:	fb0e f50c 	mul.w	r5, lr, ip
 8004ad6:	eb0b 0685 	add.w	r6, fp, r5, lsl #2
      pOutT1 = pOut + (l * numCols);
 8004ada:	9b01      	ldr	r3, [sp, #4]
 8004adc:	eb03 0885 	add.w	r8, r3, r5, lsl #2
      in = *pInT1;
 8004ae0:	ed96 7a00 	vldr	s14, [r6]
      if (*pInT1 == 0.0f)
 8004ae4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8004ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aec:	d08d      	beq.n	8004a0a <arm_mat_inverse_f32+0x8e>
      if ((flag != 1U) && (in == 0.0f))
 8004aee:	9b02      	ldr	r3, [sp, #8]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d004      	beq.n	8004afe <arm_mat_inverse_f32+0x182>
 8004af4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8004af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004afc:	d026      	beq.n	8004b4c <arm_mat_inverse_f32+0x1d0>
      in = *pPivotRowIn;
 8004afe:	edd6 6a00 	vldr	s13, [r6]
      j = (numCols - l);
 8004b02:	ebae 070c 	sub.w	r7, lr, ip
 8004b06:	463a      	mov	r2, r7
      pInT1 = pPivotRowIn;
 8004b08:	4633      	mov	r3, r6
      while (j > 0U)
 8004b0a:	e799      	b.n	8004a40 <arm_mat_inverse_f32+0xc4>
#endif /* #if defined (ARM_MATH_DSP) */

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;

    if ((flag != 1U) && (in == 0.0f))
 8004b0c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004b10:	f1b8 0f01 	cmp.w	r8, #1
 8004b14:	d01f      	beq.n	8004b56 <arm_mat_inverse_f32+0x1da>
 8004b16:	eef5 6a40 	vcmp.f32	s13, #0.0
 8004b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b1e:	d11c      	bne.n	8004b5a <arm_mat_inverse_f32+0x1de>
    {
      pIn = pSrc->pData;
 8004b20:	9b03      	ldr	r3, [sp, #12]
 8004b22:	6859      	ldr	r1, [r3, #4]
      for (i = 0; i < numRows * numCols; i++)
 8004b24:	fb0e f309 	mul.w	r3, lr, r9
 8004b28:	4543      	cmp	r3, r8
 8004b2a:	d90b      	bls.n	8004b44 <arm_mat_inverse_f32+0x1c8>
      {
        if (pIn[i] != 0.0f)
 8004b2c:	eb01 0288 	add.w	r2, r1, r8, lsl #2
 8004b30:	edd2 7a00 	vldr	s15, [r2]
 8004b34:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b3c:	d102      	bne.n	8004b44 <arm_mat_inverse_f32+0x1c8>
      for (i = 0; i < numRows * numCols; i++)
 8004b3e:	f108 0801 	add.w	r8, r8, #1
 8004b42:	e7ef      	b.n	8004b24 <arm_mat_inverse_f32+0x1a8>
            break;
      }

      if (i == numRows * numCols)
 8004b44:	4543      	cmp	r3, r8
 8004b46:	d00a      	beq.n	8004b5e <arm_mat_inverse_f32+0x1e2>
    status = ARM_MATH_SUCCESS;
 8004b48:	2000      	movs	r0, #0
 8004b4a:	e001      	b.n	8004b50 <arm_mat_inverse_f32+0x1d4>
        return ARM_MATH_SINGULAR;
 8004b4c:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return to application */
  return (status);
}
 8004b50:	b005      	add	sp, #20
 8004b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    status = ARM_MATH_SUCCESS;
 8004b56:	2000      	movs	r0, #0
 8004b58:	e7fa      	b.n	8004b50 <arm_mat_inverse_f32+0x1d4>
 8004b5a:	2000      	movs	r0, #0
 8004b5c:	e7f8      	b.n	8004b50 <arm_mat_inverse_f32+0x1d4>
        status = ARM_MATH_SINGULAR;
 8004b5e:	f06f 0004 	mvn.w	r0, #4
 8004b62:	e7f5      	b.n	8004b50 <arm_mat_inverse_f32+0x1d4>
 8004b64:	00000000 	.word	0x00000000

08004b68 <arm_mat_mult_f32>:
#else
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8004b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	4688      	mov	r8, r1
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 8004b70:	f8d0 c004 	ldr.w	ip, [r0, #4]
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 8004b74:	684d      	ldr	r5, [r1, #4]
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8004b76:	f8d2 9004 	ldr.w	r9, [r2, #4]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 8004b7a:	8848      	ldrh	r0, [r1, #2]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 8004b7c:	f8b3 e002 	ldrh.w	lr, [r3, #2]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 8004b80:	881f      	ldrh	r7, [r3, #0]
 8004b82:	2600      	movs	r6, #0
 8004b84:	e01f      	b.n	8004bc6 <arm_mat_mult_f32+0x5e>
        while (colCnt > 0U)
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 8004b86:	ecf3 7a01 	vldmia	r3!, {s15}
 8004b8a:	edd2 6a00 	vldr	s13, [r2]
 8004b8e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004b92:	ee37 7a27 	vadd.f32	s14, s14, s15
          pIn2 += numColsB;
 8004b96:	eb02 0280 	add.w	r2, r2, r0, lsl #2

          /* Decrement loop counter */
          colCnt--;
 8004b9a:	3901      	subs	r1, #1
        while (colCnt > 0U)
 8004b9c:	2900      	cmp	r1, #0
 8004b9e:	d1f2      	bne.n	8004b86 <arm_mat_mult_f32+0x1e>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 8004ba0:	4653      	mov	r3, sl
 8004ba2:	eca3 7a01 	vstmia	r3!, {s14}

        /* Decrement column loop counter */
        col--;
 8004ba6:	3c01      	subs	r4, #1

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 8004ba8:	1b02      	subs	r2, r0, r4
 8004baa:	eb05 0282 	add.w	r2, r5, r2, lsl #2

      } while (col > 0U);
 8004bae:	b12c      	cbz	r4, 8004bbc <arm_mat_mult_f32+0x54>
        *px++ = sum;
 8004bb0:	469a      	mov	sl, r3
        colCnt = numColsA;
 8004bb2:	4671      	mov	r1, lr
        pIn1 = pInA;
 8004bb4:	4663      	mov	r3, ip
        sum = 0.0f;
 8004bb6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004bd8 <arm_mat_mult_f32+0x70>
        while (colCnt > 0U)
 8004bba:	e7ef      	b.n	8004b9c <arm_mat_mult_f32+0x34>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 8004bbc:	4406      	add	r6, r0
      pInA = pInA + numColsA;
 8004bbe:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2

      /* Decrement row loop counter */
      row--;

    } while (row > 0U);
 8004bc2:	3f01      	subs	r7, #1
 8004bc4:	d005      	beq.n	8004bd2 <arm_mat_mult_f32+0x6a>
      px = pOut + i;
 8004bc6:	eb09 0a86 	add.w	sl, r9, r6, lsl #2
      pIn2 = pSrcB->pData;
 8004bca:	f8d8 2004 	ldr.w	r2, [r8, #4]
      col = numColsB;
 8004bce:	4604      	mov	r4, r0
 8004bd0:	e7ef      	b.n	8004bb2 <arm_mat_mult_f32+0x4a>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
 8004bd2:	2000      	movs	r0, #0
 8004bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bd8:	00000000 	.word	0x00000000

08004bdc <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8004bdc:	468c      	mov	ip, r1
 8004bde:	4613      	mov	r3, r2
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8004be0:	6841      	ldr	r1, [r0, #4]
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8004be2:	f8dc 2004 	ldr.w	r2, [ip, #4]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8004be6:	685b      	ldr	r3, [r3, #4]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8004be8:	f8b0 c000 	ldrh.w	ip, [r0]
 8004bec:	8840      	ldrh	r0, [r0, #2]
 8004bee:	fb00 f00c 	mul.w	r0, r0, ip
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8004bf2:	e008      	b.n	8004c06 <arm_mat_sub_f32+0x2a>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 8004bf4:	ecf1 7a01 	vldmia	r1!, {s15}
 8004bf8:	ecb2 7a01 	vldmia	r2!, {s14}
 8004bfc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c00:	ece3 7a01 	vstmia	r3!, {s15}

      /* Decrement loop counter */
      blkCnt--;
 8004c04:	3801      	subs	r0, #1
    while (blkCnt > 0U)
 8004c06:	2800      	cmp	r0, #0
 8004c08:	d1f4      	bne.n	8004bf4 <arm_mat_sub_f32+0x18>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
 8004c0a:	4770      	bx	lr

08004c0c <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8004c0c:	b570      	push	{r4, r5, r6, lr}
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8004c0e:	6843      	ldr	r3, [r0, #4]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8004c10:	684e      	ldr	r6, [r1, #4]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8004c12:	f8b0 c000 	ldrh.w	ip, [r0]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8004c16:	8845      	ldrh	r5, [r0, #2]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8004c18:	4664      	mov	r4, ip
 8004c1a:	f04f 0e00 	mov.w	lr, #0
 8004c1e:	e00b      	b.n	8004c38 <arm_mat_trans_f32+0x2c>
#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8004c20:	f853 0b04 	ldr.w	r0, [r3], #4
 8004c24:	6008      	str	r0, [r1, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8004c26:	eb01 018c 	add.w	r1, r1, ip, lsl #2

        /* Decrement column loop counter */
        col--;
 8004c2a:	3a01      	subs	r2, #1
      while (col > 0U)
 8004c2c:	2a00      	cmp	r2, #0
 8004c2e:	d1f7      	bne.n	8004c20 <arm_mat_trans_f32+0x14>
      }

      i++;
 8004c30:	f10e 0e01 	add.w	lr, lr, #1

      /* Decrement row loop counter */
      row--;

    } while (row > 0U);          /* row loop end */
 8004c34:	3c01      	subs	r4, #1
 8004c36:	d003      	beq.n	8004c40 <arm_mat_trans_f32+0x34>
      px = pOut + i;
 8004c38:	eb06 018e 	add.w	r1, r6, lr, lsl #2
      col = nCols;
 8004c3c:	462a      	mov	r2, r5
      while (col > 0U)
 8004c3e:	e7f5      	b.n	8004c2c <arm_mat_trans_f32+0x20>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
 8004c40:	2000      	movs	r0, #0
 8004c42:	bd70      	pop	{r4, r5, r6, pc}

08004c44 <arm_quaternion2rotation_f32>:
#else
void arm_quaternion2rotation_f32(const float32_t *pInputQuaternions, 
    float32_t *pOutputRotations, 
    uint32_t nbQuaternions)
{
   for(uint32_t nb=0; nb < nbQuaternions; nb++)
 8004c44:	f04f 0c00 	mov.w	ip, #0
 8004c48:	4594      	cmp	ip, r2
 8004c4a:	d27b      	bcs.n	8004d44 <arm_quaternion2rotation_f32+0x100>
{
 8004c4c:	b500      	push	{lr}
   {
        float32_t q00 = SQ(pInputQuaternions[0 + nb * 4]);
 8004c4e:	eb00 130c 	add.w	r3, r0, ip, lsl #4
 8004c52:	ed93 7a00 	vldr	s14, [r3]
 8004c56:	ee67 6a07 	vmul.f32	s13, s14, s14
        float32_t q11 = SQ(pInputQuaternions[1 + nb * 4]);
 8004c5a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004c5e:	ee67 3aa7 	vmul.f32	s7, s15, s15
        float32_t q22 = SQ(pInputQuaternions[2 + nb * 4]);
 8004c62:	ed93 6a02 	vldr	s12, [r3, #8]
 8004c66:	ee26 4a06 	vmul.f32	s8, s12, s12
        float32_t q33 = SQ(pInputQuaternions[3 + nb * 4]);
 8004c6a:	ed93 5a03 	vldr	s10, [r3, #12]
 8004c6e:	ee65 4a05 	vmul.f32	s9, s10, s10
        float32_t q01 =  pInputQuaternions[0 + nb * 4]*pInputQuaternions[1 + nb * 4];
 8004c72:	ee67 5a27 	vmul.f32	s11, s14, s15
        float32_t q02 =  pInputQuaternions[0 + nb * 4]*pInputQuaternions[2 + nb * 4];
 8004c76:	ee67 2a06 	vmul.f32	s5, s14, s12
        float32_t q03 =  pInputQuaternions[0 + nb * 4]*pInputQuaternions[3 + nb * 4];
 8004c7a:	ee27 7a05 	vmul.f32	s14, s14, s10
        float32_t q12 =  pInputQuaternions[1 + nb * 4]*pInputQuaternions[2 + nb * 4];
 8004c7e:	ee27 2a86 	vmul.f32	s4, s15, s12
        float32_t q13 =  pInputQuaternions[1 + nb * 4]*pInputQuaternions[3 + nb * 4];
 8004c82:	ee67 7a85 	vmul.f32	s15, s15, s10
        float32_t q23 =  pInputQuaternions[2 + nb * 4]*pInputQuaternions[3 + nb * 4];
 8004c86:	ee26 6a05 	vmul.f32	s12, s12, s10

        float32_t xx = q00 + q11 - q22 - q33;
 8004c8a:	ee36 5aa3 	vadd.f32	s10, s13, s7
 8004c8e:	ee35 5a44 	vsub.f32	s10, s10, s8
 8004c92:	ee35 5a64 	vsub.f32	s10, s10, s9
        float32_t yy = q00 - q11 + q22 - q33;
 8004c96:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8004c9a:	ee36 3a84 	vadd.f32	s6, s13, s8
 8004c9e:	ee33 3a64 	vsub.f32	s6, s6, s9
        float32_t zz = q00 - q11 - q22 + q33;
 8004ca2:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8004ca6:	ee76 6aa4 	vadd.f32	s13, s13, s9
        float32_t xy = 2*(q12 - q03);
 8004caa:	ee72 4a47 	vsub.f32	s9, s4, s14
 8004cae:	ee74 3aa4 	vadd.f32	s7, s9, s9
        float32_t xz = 2*(q13 + q02);
 8004cb2:	ee72 4aa7 	vadd.f32	s9, s5, s15
 8004cb6:	ee34 4aa4 	vadd.f32	s8, s9, s9
        float32_t yx = 2*(q12 + q03);
 8004cba:	ee37 7a02 	vadd.f32	s14, s14, s4
 8004cbe:	ee37 7a07 	vadd.f32	s14, s14, s14
        float32_t yz = 2*(q23 - q01);
 8004cc2:	ee76 4a65 	vsub.f32	s9, s12, s11
 8004cc6:	ee74 4aa4 	vadd.f32	s9, s9, s9
        float32_t zx = 2*(q13 - q02);
 8004cca:	ee77 7ae2 	vsub.f32	s15, s15, s5
 8004cce:	ee77 7aa7 	vadd.f32	s15, s15, s15
        float32_t zy = 2*(q23 + q01);
 8004cd2:	ee35 6a86 	vadd.f32	s12, s11, s12
 8004cd6:	ee36 6a06 	vadd.f32	s12, s12, s12

        pOutputRotations[0 + nb * 9] = xx; pOutputRotations[1 + nb * 9] = xy; pOutputRotations[2 + nb * 9] = xz;
 8004cda:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 8004cde:	ea4f 038e 	mov.w	r3, lr, lsl #2
 8004ce2:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
 8004ce6:	ed8e 5a00 	vstr	s10, [lr]
 8004cea:	f103 0e04 	add.w	lr, r3, #4
 8004cee:	448e      	add	lr, r1
 8004cf0:	edce 3a00 	vstr	s7, [lr]
 8004cf4:	f103 0e08 	add.w	lr, r3, #8
 8004cf8:	448e      	add	lr, r1
 8004cfa:	ed8e 4a00 	vstr	s8, [lr]
        pOutputRotations[3 + nb * 9] = yx; pOutputRotations[4 + nb * 9] = yy; pOutputRotations[5 + nb * 9] = yz;
 8004cfe:	f103 0e0c 	add.w	lr, r3, #12
 8004d02:	448e      	add	lr, r1
 8004d04:	ed8e 7a00 	vstr	s14, [lr]
 8004d08:	f103 0e10 	add.w	lr, r3, #16
 8004d0c:	448e      	add	lr, r1
 8004d0e:	ed8e 3a00 	vstr	s6, [lr]
 8004d12:	f103 0e14 	add.w	lr, r3, #20
 8004d16:	448e      	add	lr, r1
 8004d18:	edce 4a00 	vstr	s9, [lr]
        pOutputRotations[6 + nb * 9] = zx; pOutputRotations[7 + nb * 9] = zy; pOutputRotations[8 + nb * 9] = zz;
 8004d1c:	f103 0e18 	add.w	lr, r3, #24
 8004d20:	448e      	add	lr, r1
 8004d22:	edce 7a00 	vstr	s15, [lr]
 8004d26:	f103 0e1c 	add.w	lr, r3, #28
 8004d2a:	448e      	add	lr, r1
 8004d2c:	ed8e 6a00 	vstr	s12, [lr]
 8004d30:	3320      	adds	r3, #32
 8004d32:	440b      	add	r3, r1
 8004d34:	edc3 6a00 	vstr	s13, [r3]
   for(uint32_t nb=0; nb < nbQuaternions; nb++)
 8004d38:	f10c 0c01 	add.w	ip, ip, #1
 8004d3c:	4594      	cmp	ip, r2
 8004d3e:	d386      	bcc.n	8004c4e <arm_quaternion2rotation_f32+0xa>
   }
}
 8004d40:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d44:	4770      	bx	lr

08004d46 <arm_quaternion_normalize_f32>:

#else
void arm_quaternion_normalize_f32(const float32_t *pInputQuaternions, 
    float32_t *pNormalizedQuaternions, 
    uint32_t nbQuaternions)
{
 8004d46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	4607      	mov	r7, r0
 8004d4e:	460e      	mov	r6, r1
 8004d50:	9203      	str	r2, [sp, #12]
   float32_t temp;

   for(uint32_t i=0; i < nbQuaternions; i++)
 8004d52:	2500      	movs	r5, #0
 8004d54:	e048      	b.n	8004de8 <arm_quaternion_normalize_f32+0xa2>
   {
      temp = SQ(pInputQuaternions[4 * i + 0]) +
 8004d56:	012c      	lsls	r4, r5, #4
 8004d58:	eb07 1b05 	add.w	fp, r7, r5, lsl #4
 8004d5c:	ed9b 0a00 	vldr	s0, [fp]
 8004d60:	ee20 0a00 	vmul.f32	s0, s0, s0
             SQ(pInputQuaternions[4 * i + 1]) +
 8004d64:	1d23      	adds	r3, r4, #4
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	eb07 0a03 	add.w	sl, r7, r3
 8004d6c:	edda 7a00 	vldr	s15, [sl]
 8004d70:	ee67 7aa7 	vmul.f32	s15, s15, s15
      temp = SQ(pInputQuaternions[4 * i + 0]) +
 8004d74:	ee30 0a27 	vadd.f32	s0, s0, s15
             SQ(pInputQuaternions[4 * i + 2]) +
 8004d78:	f104 0208 	add.w	r2, r4, #8
 8004d7c:	9201      	str	r2, [sp, #4]
 8004d7e:	eb07 0902 	add.w	r9, r7, r2
 8004d82:	edd9 7a00 	vldr	s15, [r9]
 8004d86:	ee67 7aa7 	vmul.f32	s15, s15, s15
             SQ(pInputQuaternions[4 * i + 1]) +
 8004d8a:	ee30 0a27 	vadd.f32	s0, s0, s15
             SQ(pInputQuaternions[4 * i + 3]);
 8004d8e:	f104 010c 	add.w	r1, r4, #12
 8004d92:	9102      	str	r1, [sp, #8]
 8004d94:	eb07 0801 	add.w	r8, r7, r1
 8004d98:	edd8 7a00 	vldr	s15, [r8]
 8004d9c:	ee67 7aa7 	vmul.f32	s15, s15, s15
      temp = sqrtf(temp);
 8004da0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004da4:	f001 f998 	bl	80060d8 <sqrtf>

      pNormalizedQuaternions[4 * i + 0] = pInputQuaternions[4 * i + 0] / temp;
 8004da8:	ed9b 7a00 	vldr	s14, [fp]
 8004dac:	4434      	add	r4, r6
 8004dae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8004db2:	edc4 7a00 	vstr	s15, [r4]
      pNormalizedQuaternions[4 * i + 1] = pInputQuaternions[4 * i + 1] / temp;
 8004db6:	ed9a 7a00 	vldr	s14, [sl]
 8004dba:	9b00      	ldr	r3, [sp, #0]
 8004dbc:	18f3      	adds	r3, r6, r3
 8004dbe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8004dc2:	edc3 7a00 	vstr	s15, [r3]
      pNormalizedQuaternions[4 * i + 2] = pInputQuaternions[4 * i + 2] / temp;
 8004dc6:	ed99 7a00 	vldr	s14, [r9]
 8004dca:	9a01      	ldr	r2, [sp, #4]
 8004dcc:	18b3      	adds	r3, r6, r2
 8004dce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8004dd2:	edc3 7a00 	vstr	s15, [r3]
      pNormalizedQuaternions[4 * i + 3] = pInputQuaternions[4 * i + 3] / temp;
 8004dd6:	ed98 7a00 	vldr	s14, [r8]
 8004dda:	9902      	ldr	r1, [sp, #8]
 8004ddc:	1873      	adds	r3, r6, r1
 8004dde:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8004de2:	edc3 7a00 	vstr	s15, [r3]
   for(uint32_t i=0; i < nbQuaternions; i++)
 8004de6:	3501      	adds	r5, #1
 8004de8:	9b03      	ldr	r3, [sp, #12]
 8004dea:	429d      	cmp	r5, r3
 8004dec:	d3b3      	bcc.n	8004d56 <arm_quaternion_normalize_f32+0x10>
   }
}
 8004dee:	b005      	add	sp, #20
 8004df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004df4 <arm_quaternion_product_single_f32>:
#else
void arm_quaternion_product_single_f32(const float32_t *qa, 
    const float32_t *qb, 
    float32_t *qr)
{
    qr[0] = qa[0] * qb[0] - qa[1] * qb[1] - qa[2] * qb[2] - qa[3] * qb[3];
 8004df4:	edd0 7a00 	vldr	s15, [r0]
 8004df8:	ed91 7a00 	vldr	s14, [r1]
 8004dfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e00:	ed90 7a01 	vldr	s14, [r0, #4]
 8004e04:	edd1 6a01 	vldr	s13, [r1, #4]
 8004e08:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004e0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004e10:	ed90 7a02 	vldr	s14, [r0, #8]
 8004e14:	edd1 6a02 	vldr	s13, [r1, #8]
 8004e18:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004e1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004e20:	ed90 7a03 	vldr	s14, [r0, #12]
 8004e24:	edd1 6a03 	vldr	s13, [r1, #12]
 8004e28:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004e2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004e30:	edc2 7a00 	vstr	s15, [r2]
    qr[1] = qa[0] * qb[1] + qa[1] * qb[0] + qa[2] * qb[3] - qa[3] * qb[2];
 8004e34:	edd0 7a00 	vldr	s15, [r0]
 8004e38:	ed91 7a01 	vldr	s14, [r1, #4]
 8004e3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e40:	ed90 7a01 	vldr	s14, [r0, #4]
 8004e44:	edd1 6a00 	vldr	s13, [r1]
 8004e48:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004e4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e50:	ed90 7a02 	vldr	s14, [r0, #8]
 8004e54:	edd1 6a03 	vldr	s13, [r1, #12]
 8004e58:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004e5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e60:	ed90 7a03 	vldr	s14, [r0, #12]
 8004e64:	edd1 6a02 	vldr	s13, [r1, #8]
 8004e68:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004e6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004e70:	edc2 7a01 	vstr	s15, [r2, #4]
    qr[2] = qa[0] * qb[2] + qa[2] * qb[0] + qa[3] * qb[1] - qa[1] * qb[3];
 8004e74:	edd0 7a00 	vldr	s15, [r0]
 8004e78:	ed91 7a02 	vldr	s14, [r1, #8]
 8004e7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e80:	ed90 7a02 	vldr	s14, [r0, #8]
 8004e84:	edd1 6a00 	vldr	s13, [r1]
 8004e88:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004e8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e90:	ed90 7a03 	vldr	s14, [r0, #12]
 8004e94:	edd1 6a01 	vldr	s13, [r1, #4]
 8004e98:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004e9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ea0:	ed90 7a01 	vldr	s14, [r0, #4]
 8004ea4:	edd1 6a03 	vldr	s13, [r1, #12]
 8004ea8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004eac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004eb0:	edc2 7a02 	vstr	s15, [r2, #8]
    qr[3] = qa[0] * qb[3] + qa[3] * qb[0] + qa[1] * qb[2] - qa[2] * qb[1];
 8004eb4:	edd0 7a00 	vldr	s15, [r0]
 8004eb8:	ed91 7a03 	vldr	s14, [r1, #12]
 8004ebc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ec0:	ed90 7a03 	vldr	s14, [r0, #12]
 8004ec4:	edd1 6a00 	vldr	s13, [r1]
 8004ec8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004ecc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ed0:	ed90 7a01 	vldr	s14, [r0, #4]
 8004ed4:	edd1 6a02 	vldr	s13, [r1, #8]
 8004ed8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004edc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ee0:	ed90 7a02 	vldr	s14, [r0, #8]
 8004ee4:	edd1 6a01 	vldr	s13, [r1, #4]
 8004ee8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004eec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004ef0:	edc2 7a03 	vstr	s15, [r2, #12]
}
 8004ef4:	4770      	bx	lr
	...

08004ef8 <__assert_func>:
 8004ef8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004efa:	4614      	mov	r4, r2
 8004efc:	461a      	mov	r2, r3
 8004efe:	4b09      	ldr	r3, [pc, #36]	; (8004f24 <__assert_func+0x2c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4605      	mov	r5, r0
 8004f04:	68d8      	ldr	r0, [r3, #12]
 8004f06:	b14c      	cbz	r4, 8004f1c <__assert_func+0x24>
 8004f08:	4b07      	ldr	r3, [pc, #28]	; (8004f28 <__assert_func+0x30>)
 8004f0a:	9100      	str	r1, [sp, #0]
 8004f0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004f10:	4906      	ldr	r1, [pc, #24]	; (8004f2c <__assert_func+0x34>)
 8004f12:	462b      	mov	r3, r5
 8004f14:	f000 f814 	bl	8004f40 <fiprintf>
 8004f18:	f000 fd0c 	bl	8005934 <abort>
 8004f1c:	4b04      	ldr	r3, [pc, #16]	; (8004f30 <__assert_func+0x38>)
 8004f1e:	461c      	mov	r4, r3
 8004f20:	e7f3      	b.n	8004f0a <__assert_func+0x12>
 8004f22:	bf00      	nop
 8004f24:	20000f50 	.word	0x20000f50
 8004f28:	08007880 	.word	0x08007880
 8004f2c:	0800788d 	.word	0x0800788d
 8004f30:	080078bb 	.word	0x080078bb

08004f34 <__errno>:
 8004f34:	4b01      	ldr	r3, [pc, #4]	; (8004f3c <__errno+0x8>)
 8004f36:	6818      	ldr	r0, [r3, #0]
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	20000f50 	.word	0x20000f50

08004f40 <fiprintf>:
 8004f40:	b40e      	push	{r1, r2, r3}
 8004f42:	b503      	push	{r0, r1, lr}
 8004f44:	4601      	mov	r1, r0
 8004f46:	ab03      	add	r3, sp, #12
 8004f48:	4805      	ldr	r0, [pc, #20]	; (8004f60 <fiprintf+0x20>)
 8004f4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f4e:	6800      	ldr	r0, [r0, #0]
 8004f50:	9301      	str	r3, [sp, #4]
 8004f52:	f000 f95b 	bl	800520c <_vfiprintf_r>
 8004f56:	b002      	add	sp, #8
 8004f58:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f5c:	b003      	add	sp, #12
 8004f5e:	4770      	bx	lr
 8004f60:	20000f50 	.word	0x20000f50

08004f64 <__libc_init_array>:
 8004f64:	b570      	push	{r4, r5, r6, lr}
 8004f66:	4d0d      	ldr	r5, [pc, #52]	; (8004f9c <__libc_init_array+0x38>)
 8004f68:	4c0d      	ldr	r4, [pc, #52]	; (8004fa0 <__libc_init_array+0x3c>)
 8004f6a:	1b64      	subs	r4, r4, r5
 8004f6c:	10a4      	asrs	r4, r4, #2
 8004f6e:	2600      	movs	r6, #0
 8004f70:	42a6      	cmp	r6, r4
 8004f72:	d109      	bne.n	8004f88 <__libc_init_array+0x24>
 8004f74:	4d0b      	ldr	r5, [pc, #44]	; (8004fa4 <__libc_init_array+0x40>)
 8004f76:	4c0c      	ldr	r4, [pc, #48]	; (8004fa8 <__libc_init_array+0x44>)
 8004f78:	f002 f8c4 	bl	8007104 <_init>
 8004f7c:	1b64      	subs	r4, r4, r5
 8004f7e:	10a4      	asrs	r4, r4, #2
 8004f80:	2600      	movs	r6, #0
 8004f82:	42a6      	cmp	r6, r4
 8004f84:	d105      	bne.n	8004f92 <__libc_init_array+0x2e>
 8004f86:	bd70      	pop	{r4, r5, r6, pc}
 8004f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f8c:	4798      	blx	r3
 8004f8e:	3601      	adds	r6, #1
 8004f90:	e7ee      	b.n	8004f70 <__libc_init_array+0xc>
 8004f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f96:	4798      	blx	r3
 8004f98:	3601      	adds	r6, #1
 8004f9a:	e7f2      	b.n	8004f82 <__libc_init_array+0x1e>
 8004f9c:	08007b30 	.word	0x08007b30
 8004fa0:	08007b30 	.word	0x08007b30
 8004fa4:	08007b30 	.word	0x08007b30
 8004fa8:	08007b34 	.word	0x08007b34

08004fac <malloc>:
 8004fac:	4b02      	ldr	r3, [pc, #8]	; (8004fb8 <malloc+0xc>)
 8004fae:	4601      	mov	r1, r0
 8004fb0:	6818      	ldr	r0, [r3, #0]
 8004fb2:	f000 b88d 	b.w	80050d0 <_malloc_r>
 8004fb6:	bf00      	nop
 8004fb8:	20000f50 	.word	0x20000f50

08004fbc <free>:
 8004fbc:	4b02      	ldr	r3, [pc, #8]	; (8004fc8 <free+0xc>)
 8004fbe:	4601      	mov	r1, r0
 8004fc0:	6818      	ldr	r0, [r3, #0]
 8004fc2:	f000 b819 	b.w	8004ff8 <_free_r>
 8004fc6:	bf00      	nop
 8004fc8:	20000f50 	.word	0x20000f50

08004fcc <memcpy>:
 8004fcc:	440a      	add	r2, r1
 8004fce:	4291      	cmp	r1, r2
 8004fd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004fd4:	d100      	bne.n	8004fd8 <memcpy+0xc>
 8004fd6:	4770      	bx	lr
 8004fd8:	b510      	push	{r4, lr}
 8004fda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fe2:	4291      	cmp	r1, r2
 8004fe4:	d1f9      	bne.n	8004fda <memcpy+0xe>
 8004fe6:	bd10      	pop	{r4, pc}

08004fe8 <memset>:
 8004fe8:	4402      	add	r2, r0
 8004fea:	4603      	mov	r3, r0
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d100      	bne.n	8004ff2 <memset+0xa>
 8004ff0:	4770      	bx	lr
 8004ff2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ff6:	e7f9      	b.n	8004fec <memset+0x4>

08004ff8 <_free_r>:
 8004ff8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ffa:	2900      	cmp	r1, #0
 8004ffc:	d044      	beq.n	8005088 <_free_r+0x90>
 8004ffe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005002:	9001      	str	r0, [sp, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	f1a1 0404 	sub.w	r4, r1, #4
 800500a:	bfb8      	it	lt
 800500c:	18e4      	addlt	r4, r4, r3
 800500e:	f000 feb9 	bl	8005d84 <__malloc_lock>
 8005012:	4a1e      	ldr	r2, [pc, #120]	; (800508c <_free_r+0x94>)
 8005014:	9801      	ldr	r0, [sp, #4]
 8005016:	6813      	ldr	r3, [r2, #0]
 8005018:	b933      	cbnz	r3, 8005028 <_free_r+0x30>
 800501a:	6063      	str	r3, [r4, #4]
 800501c:	6014      	str	r4, [r2, #0]
 800501e:	b003      	add	sp, #12
 8005020:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005024:	f000 beb4 	b.w	8005d90 <__malloc_unlock>
 8005028:	42a3      	cmp	r3, r4
 800502a:	d908      	bls.n	800503e <_free_r+0x46>
 800502c:	6825      	ldr	r5, [r4, #0]
 800502e:	1961      	adds	r1, r4, r5
 8005030:	428b      	cmp	r3, r1
 8005032:	bf01      	itttt	eq
 8005034:	6819      	ldreq	r1, [r3, #0]
 8005036:	685b      	ldreq	r3, [r3, #4]
 8005038:	1949      	addeq	r1, r1, r5
 800503a:	6021      	streq	r1, [r4, #0]
 800503c:	e7ed      	b.n	800501a <_free_r+0x22>
 800503e:	461a      	mov	r2, r3
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	b10b      	cbz	r3, 8005048 <_free_r+0x50>
 8005044:	42a3      	cmp	r3, r4
 8005046:	d9fa      	bls.n	800503e <_free_r+0x46>
 8005048:	6811      	ldr	r1, [r2, #0]
 800504a:	1855      	adds	r5, r2, r1
 800504c:	42a5      	cmp	r5, r4
 800504e:	d10b      	bne.n	8005068 <_free_r+0x70>
 8005050:	6824      	ldr	r4, [r4, #0]
 8005052:	4421      	add	r1, r4
 8005054:	1854      	adds	r4, r2, r1
 8005056:	42a3      	cmp	r3, r4
 8005058:	6011      	str	r1, [r2, #0]
 800505a:	d1e0      	bne.n	800501e <_free_r+0x26>
 800505c:	681c      	ldr	r4, [r3, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	6053      	str	r3, [r2, #4]
 8005062:	4421      	add	r1, r4
 8005064:	6011      	str	r1, [r2, #0]
 8005066:	e7da      	b.n	800501e <_free_r+0x26>
 8005068:	d902      	bls.n	8005070 <_free_r+0x78>
 800506a:	230c      	movs	r3, #12
 800506c:	6003      	str	r3, [r0, #0]
 800506e:	e7d6      	b.n	800501e <_free_r+0x26>
 8005070:	6825      	ldr	r5, [r4, #0]
 8005072:	1961      	adds	r1, r4, r5
 8005074:	428b      	cmp	r3, r1
 8005076:	bf04      	itt	eq
 8005078:	6819      	ldreq	r1, [r3, #0]
 800507a:	685b      	ldreq	r3, [r3, #4]
 800507c:	6063      	str	r3, [r4, #4]
 800507e:	bf04      	itt	eq
 8005080:	1949      	addeq	r1, r1, r5
 8005082:	6021      	streq	r1, [r4, #0]
 8005084:	6054      	str	r4, [r2, #4]
 8005086:	e7ca      	b.n	800501e <_free_r+0x26>
 8005088:	b003      	add	sp, #12
 800508a:	bd30      	pop	{r4, r5, pc}
 800508c:	200017d8 	.word	0x200017d8

08005090 <sbrk_aligned>:
 8005090:	b570      	push	{r4, r5, r6, lr}
 8005092:	4e0e      	ldr	r6, [pc, #56]	; (80050cc <sbrk_aligned+0x3c>)
 8005094:	460c      	mov	r4, r1
 8005096:	6831      	ldr	r1, [r6, #0]
 8005098:	4605      	mov	r5, r0
 800509a:	b911      	cbnz	r1, 80050a2 <sbrk_aligned+0x12>
 800509c:	f000 fb7a 	bl	8005794 <_sbrk_r>
 80050a0:	6030      	str	r0, [r6, #0]
 80050a2:	4621      	mov	r1, r4
 80050a4:	4628      	mov	r0, r5
 80050a6:	f000 fb75 	bl	8005794 <_sbrk_r>
 80050aa:	1c43      	adds	r3, r0, #1
 80050ac:	d00a      	beq.n	80050c4 <sbrk_aligned+0x34>
 80050ae:	1cc4      	adds	r4, r0, #3
 80050b0:	f024 0403 	bic.w	r4, r4, #3
 80050b4:	42a0      	cmp	r0, r4
 80050b6:	d007      	beq.n	80050c8 <sbrk_aligned+0x38>
 80050b8:	1a21      	subs	r1, r4, r0
 80050ba:	4628      	mov	r0, r5
 80050bc:	f000 fb6a 	bl	8005794 <_sbrk_r>
 80050c0:	3001      	adds	r0, #1
 80050c2:	d101      	bne.n	80050c8 <sbrk_aligned+0x38>
 80050c4:	f04f 34ff 	mov.w	r4, #4294967295
 80050c8:	4620      	mov	r0, r4
 80050ca:	bd70      	pop	{r4, r5, r6, pc}
 80050cc:	200017dc 	.word	0x200017dc

080050d0 <_malloc_r>:
 80050d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050d4:	1ccd      	adds	r5, r1, #3
 80050d6:	f025 0503 	bic.w	r5, r5, #3
 80050da:	3508      	adds	r5, #8
 80050dc:	2d0c      	cmp	r5, #12
 80050de:	bf38      	it	cc
 80050e0:	250c      	movcc	r5, #12
 80050e2:	2d00      	cmp	r5, #0
 80050e4:	4607      	mov	r7, r0
 80050e6:	db01      	blt.n	80050ec <_malloc_r+0x1c>
 80050e8:	42a9      	cmp	r1, r5
 80050ea:	d905      	bls.n	80050f8 <_malloc_r+0x28>
 80050ec:	230c      	movs	r3, #12
 80050ee:	603b      	str	r3, [r7, #0]
 80050f0:	2600      	movs	r6, #0
 80050f2:	4630      	mov	r0, r6
 80050f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050f8:	4e2e      	ldr	r6, [pc, #184]	; (80051b4 <_malloc_r+0xe4>)
 80050fa:	f000 fe43 	bl	8005d84 <__malloc_lock>
 80050fe:	6833      	ldr	r3, [r6, #0]
 8005100:	461c      	mov	r4, r3
 8005102:	bb34      	cbnz	r4, 8005152 <_malloc_r+0x82>
 8005104:	4629      	mov	r1, r5
 8005106:	4638      	mov	r0, r7
 8005108:	f7ff ffc2 	bl	8005090 <sbrk_aligned>
 800510c:	1c43      	adds	r3, r0, #1
 800510e:	4604      	mov	r4, r0
 8005110:	d14d      	bne.n	80051ae <_malloc_r+0xde>
 8005112:	6834      	ldr	r4, [r6, #0]
 8005114:	4626      	mov	r6, r4
 8005116:	2e00      	cmp	r6, #0
 8005118:	d140      	bne.n	800519c <_malloc_r+0xcc>
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	4631      	mov	r1, r6
 800511e:	4638      	mov	r0, r7
 8005120:	eb04 0803 	add.w	r8, r4, r3
 8005124:	f000 fb36 	bl	8005794 <_sbrk_r>
 8005128:	4580      	cmp	r8, r0
 800512a:	d13a      	bne.n	80051a2 <_malloc_r+0xd2>
 800512c:	6821      	ldr	r1, [r4, #0]
 800512e:	3503      	adds	r5, #3
 8005130:	1a6d      	subs	r5, r5, r1
 8005132:	f025 0503 	bic.w	r5, r5, #3
 8005136:	3508      	adds	r5, #8
 8005138:	2d0c      	cmp	r5, #12
 800513a:	bf38      	it	cc
 800513c:	250c      	movcc	r5, #12
 800513e:	4629      	mov	r1, r5
 8005140:	4638      	mov	r0, r7
 8005142:	f7ff ffa5 	bl	8005090 <sbrk_aligned>
 8005146:	3001      	adds	r0, #1
 8005148:	d02b      	beq.n	80051a2 <_malloc_r+0xd2>
 800514a:	6823      	ldr	r3, [r4, #0]
 800514c:	442b      	add	r3, r5
 800514e:	6023      	str	r3, [r4, #0]
 8005150:	e00e      	b.n	8005170 <_malloc_r+0xa0>
 8005152:	6822      	ldr	r2, [r4, #0]
 8005154:	1b52      	subs	r2, r2, r5
 8005156:	d41e      	bmi.n	8005196 <_malloc_r+0xc6>
 8005158:	2a0b      	cmp	r2, #11
 800515a:	d916      	bls.n	800518a <_malloc_r+0xba>
 800515c:	1961      	adds	r1, r4, r5
 800515e:	42a3      	cmp	r3, r4
 8005160:	6025      	str	r5, [r4, #0]
 8005162:	bf18      	it	ne
 8005164:	6059      	strne	r1, [r3, #4]
 8005166:	6863      	ldr	r3, [r4, #4]
 8005168:	bf08      	it	eq
 800516a:	6031      	streq	r1, [r6, #0]
 800516c:	5162      	str	r2, [r4, r5]
 800516e:	604b      	str	r3, [r1, #4]
 8005170:	4638      	mov	r0, r7
 8005172:	f104 060b 	add.w	r6, r4, #11
 8005176:	f000 fe0b 	bl	8005d90 <__malloc_unlock>
 800517a:	f026 0607 	bic.w	r6, r6, #7
 800517e:	1d23      	adds	r3, r4, #4
 8005180:	1af2      	subs	r2, r6, r3
 8005182:	d0b6      	beq.n	80050f2 <_malloc_r+0x22>
 8005184:	1b9b      	subs	r3, r3, r6
 8005186:	50a3      	str	r3, [r4, r2]
 8005188:	e7b3      	b.n	80050f2 <_malloc_r+0x22>
 800518a:	6862      	ldr	r2, [r4, #4]
 800518c:	42a3      	cmp	r3, r4
 800518e:	bf0c      	ite	eq
 8005190:	6032      	streq	r2, [r6, #0]
 8005192:	605a      	strne	r2, [r3, #4]
 8005194:	e7ec      	b.n	8005170 <_malloc_r+0xa0>
 8005196:	4623      	mov	r3, r4
 8005198:	6864      	ldr	r4, [r4, #4]
 800519a:	e7b2      	b.n	8005102 <_malloc_r+0x32>
 800519c:	4634      	mov	r4, r6
 800519e:	6876      	ldr	r6, [r6, #4]
 80051a0:	e7b9      	b.n	8005116 <_malloc_r+0x46>
 80051a2:	230c      	movs	r3, #12
 80051a4:	603b      	str	r3, [r7, #0]
 80051a6:	4638      	mov	r0, r7
 80051a8:	f000 fdf2 	bl	8005d90 <__malloc_unlock>
 80051ac:	e7a1      	b.n	80050f2 <_malloc_r+0x22>
 80051ae:	6025      	str	r5, [r4, #0]
 80051b0:	e7de      	b.n	8005170 <_malloc_r+0xa0>
 80051b2:	bf00      	nop
 80051b4:	200017d8 	.word	0x200017d8

080051b8 <__sfputc_r>:
 80051b8:	6893      	ldr	r3, [r2, #8]
 80051ba:	3b01      	subs	r3, #1
 80051bc:	2b00      	cmp	r3, #0
 80051be:	b410      	push	{r4}
 80051c0:	6093      	str	r3, [r2, #8]
 80051c2:	da08      	bge.n	80051d6 <__sfputc_r+0x1e>
 80051c4:	6994      	ldr	r4, [r2, #24]
 80051c6:	42a3      	cmp	r3, r4
 80051c8:	db01      	blt.n	80051ce <__sfputc_r+0x16>
 80051ca:	290a      	cmp	r1, #10
 80051cc:	d103      	bne.n	80051d6 <__sfputc_r+0x1e>
 80051ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051d2:	f000 baef 	b.w	80057b4 <__swbuf_r>
 80051d6:	6813      	ldr	r3, [r2, #0]
 80051d8:	1c58      	adds	r0, r3, #1
 80051da:	6010      	str	r0, [r2, #0]
 80051dc:	7019      	strb	r1, [r3, #0]
 80051de:	4608      	mov	r0, r1
 80051e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <__sfputs_r>:
 80051e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051e8:	4606      	mov	r6, r0
 80051ea:	460f      	mov	r7, r1
 80051ec:	4614      	mov	r4, r2
 80051ee:	18d5      	adds	r5, r2, r3
 80051f0:	42ac      	cmp	r4, r5
 80051f2:	d101      	bne.n	80051f8 <__sfputs_r+0x12>
 80051f4:	2000      	movs	r0, #0
 80051f6:	e007      	b.n	8005208 <__sfputs_r+0x22>
 80051f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051fc:	463a      	mov	r2, r7
 80051fe:	4630      	mov	r0, r6
 8005200:	f7ff ffda 	bl	80051b8 <__sfputc_r>
 8005204:	1c43      	adds	r3, r0, #1
 8005206:	d1f3      	bne.n	80051f0 <__sfputs_r+0xa>
 8005208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800520c <_vfiprintf_r>:
 800520c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005210:	460d      	mov	r5, r1
 8005212:	b09d      	sub	sp, #116	; 0x74
 8005214:	4614      	mov	r4, r2
 8005216:	4698      	mov	r8, r3
 8005218:	4606      	mov	r6, r0
 800521a:	b118      	cbz	r0, 8005224 <_vfiprintf_r+0x18>
 800521c:	6983      	ldr	r3, [r0, #24]
 800521e:	b90b      	cbnz	r3, 8005224 <_vfiprintf_r+0x18>
 8005220:	f000 fcaa 	bl	8005b78 <__sinit>
 8005224:	4b89      	ldr	r3, [pc, #548]	; (800544c <_vfiprintf_r+0x240>)
 8005226:	429d      	cmp	r5, r3
 8005228:	d11b      	bne.n	8005262 <_vfiprintf_r+0x56>
 800522a:	6875      	ldr	r5, [r6, #4]
 800522c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800522e:	07d9      	lsls	r1, r3, #31
 8005230:	d405      	bmi.n	800523e <_vfiprintf_r+0x32>
 8005232:	89ab      	ldrh	r3, [r5, #12]
 8005234:	059a      	lsls	r2, r3, #22
 8005236:	d402      	bmi.n	800523e <_vfiprintf_r+0x32>
 8005238:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800523a:	f000 fd3b 	bl	8005cb4 <__retarget_lock_acquire_recursive>
 800523e:	89ab      	ldrh	r3, [r5, #12]
 8005240:	071b      	lsls	r3, r3, #28
 8005242:	d501      	bpl.n	8005248 <_vfiprintf_r+0x3c>
 8005244:	692b      	ldr	r3, [r5, #16]
 8005246:	b9eb      	cbnz	r3, 8005284 <_vfiprintf_r+0x78>
 8005248:	4629      	mov	r1, r5
 800524a:	4630      	mov	r0, r6
 800524c:	f000 fb04 	bl	8005858 <__swsetup_r>
 8005250:	b1c0      	cbz	r0, 8005284 <_vfiprintf_r+0x78>
 8005252:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005254:	07dc      	lsls	r4, r3, #31
 8005256:	d50e      	bpl.n	8005276 <_vfiprintf_r+0x6a>
 8005258:	f04f 30ff 	mov.w	r0, #4294967295
 800525c:	b01d      	add	sp, #116	; 0x74
 800525e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005262:	4b7b      	ldr	r3, [pc, #492]	; (8005450 <_vfiprintf_r+0x244>)
 8005264:	429d      	cmp	r5, r3
 8005266:	d101      	bne.n	800526c <_vfiprintf_r+0x60>
 8005268:	68b5      	ldr	r5, [r6, #8]
 800526a:	e7df      	b.n	800522c <_vfiprintf_r+0x20>
 800526c:	4b79      	ldr	r3, [pc, #484]	; (8005454 <_vfiprintf_r+0x248>)
 800526e:	429d      	cmp	r5, r3
 8005270:	bf08      	it	eq
 8005272:	68f5      	ldreq	r5, [r6, #12]
 8005274:	e7da      	b.n	800522c <_vfiprintf_r+0x20>
 8005276:	89ab      	ldrh	r3, [r5, #12]
 8005278:	0598      	lsls	r0, r3, #22
 800527a:	d4ed      	bmi.n	8005258 <_vfiprintf_r+0x4c>
 800527c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800527e:	f000 fd1a 	bl	8005cb6 <__retarget_lock_release_recursive>
 8005282:	e7e9      	b.n	8005258 <_vfiprintf_r+0x4c>
 8005284:	2300      	movs	r3, #0
 8005286:	9309      	str	r3, [sp, #36]	; 0x24
 8005288:	2320      	movs	r3, #32
 800528a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800528e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005292:	2330      	movs	r3, #48	; 0x30
 8005294:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005458 <_vfiprintf_r+0x24c>
 8005298:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800529c:	f04f 0901 	mov.w	r9, #1
 80052a0:	4623      	mov	r3, r4
 80052a2:	469a      	mov	sl, r3
 80052a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052a8:	b10a      	cbz	r2, 80052ae <_vfiprintf_r+0xa2>
 80052aa:	2a25      	cmp	r2, #37	; 0x25
 80052ac:	d1f9      	bne.n	80052a2 <_vfiprintf_r+0x96>
 80052ae:	ebba 0b04 	subs.w	fp, sl, r4
 80052b2:	d00b      	beq.n	80052cc <_vfiprintf_r+0xc0>
 80052b4:	465b      	mov	r3, fp
 80052b6:	4622      	mov	r2, r4
 80052b8:	4629      	mov	r1, r5
 80052ba:	4630      	mov	r0, r6
 80052bc:	f7ff ff93 	bl	80051e6 <__sfputs_r>
 80052c0:	3001      	adds	r0, #1
 80052c2:	f000 80aa 	beq.w	800541a <_vfiprintf_r+0x20e>
 80052c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052c8:	445a      	add	r2, fp
 80052ca:	9209      	str	r2, [sp, #36]	; 0x24
 80052cc:	f89a 3000 	ldrb.w	r3, [sl]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f000 80a2 	beq.w	800541a <_vfiprintf_r+0x20e>
 80052d6:	2300      	movs	r3, #0
 80052d8:	f04f 32ff 	mov.w	r2, #4294967295
 80052dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052e0:	f10a 0a01 	add.w	sl, sl, #1
 80052e4:	9304      	str	r3, [sp, #16]
 80052e6:	9307      	str	r3, [sp, #28]
 80052e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052ec:	931a      	str	r3, [sp, #104]	; 0x68
 80052ee:	4654      	mov	r4, sl
 80052f0:	2205      	movs	r2, #5
 80052f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052f6:	4858      	ldr	r0, [pc, #352]	; (8005458 <_vfiprintf_r+0x24c>)
 80052f8:	f7fa ff6a 	bl	80001d0 <memchr>
 80052fc:	9a04      	ldr	r2, [sp, #16]
 80052fe:	b9d8      	cbnz	r0, 8005338 <_vfiprintf_r+0x12c>
 8005300:	06d1      	lsls	r1, r2, #27
 8005302:	bf44      	itt	mi
 8005304:	2320      	movmi	r3, #32
 8005306:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800530a:	0713      	lsls	r3, r2, #28
 800530c:	bf44      	itt	mi
 800530e:	232b      	movmi	r3, #43	; 0x2b
 8005310:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005314:	f89a 3000 	ldrb.w	r3, [sl]
 8005318:	2b2a      	cmp	r3, #42	; 0x2a
 800531a:	d015      	beq.n	8005348 <_vfiprintf_r+0x13c>
 800531c:	9a07      	ldr	r2, [sp, #28]
 800531e:	4654      	mov	r4, sl
 8005320:	2000      	movs	r0, #0
 8005322:	f04f 0c0a 	mov.w	ip, #10
 8005326:	4621      	mov	r1, r4
 8005328:	f811 3b01 	ldrb.w	r3, [r1], #1
 800532c:	3b30      	subs	r3, #48	; 0x30
 800532e:	2b09      	cmp	r3, #9
 8005330:	d94e      	bls.n	80053d0 <_vfiprintf_r+0x1c4>
 8005332:	b1b0      	cbz	r0, 8005362 <_vfiprintf_r+0x156>
 8005334:	9207      	str	r2, [sp, #28]
 8005336:	e014      	b.n	8005362 <_vfiprintf_r+0x156>
 8005338:	eba0 0308 	sub.w	r3, r0, r8
 800533c:	fa09 f303 	lsl.w	r3, r9, r3
 8005340:	4313      	orrs	r3, r2
 8005342:	9304      	str	r3, [sp, #16]
 8005344:	46a2      	mov	sl, r4
 8005346:	e7d2      	b.n	80052ee <_vfiprintf_r+0xe2>
 8005348:	9b03      	ldr	r3, [sp, #12]
 800534a:	1d19      	adds	r1, r3, #4
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	9103      	str	r1, [sp, #12]
 8005350:	2b00      	cmp	r3, #0
 8005352:	bfbb      	ittet	lt
 8005354:	425b      	neglt	r3, r3
 8005356:	f042 0202 	orrlt.w	r2, r2, #2
 800535a:	9307      	strge	r3, [sp, #28]
 800535c:	9307      	strlt	r3, [sp, #28]
 800535e:	bfb8      	it	lt
 8005360:	9204      	strlt	r2, [sp, #16]
 8005362:	7823      	ldrb	r3, [r4, #0]
 8005364:	2b2e      	cmp	r3, #46	; 0x2e
 8005366:	d10c      	bne.n	8005382 <_vfiprintf_r+0x176>
 8005368:	7863      	ldrb	r3, [r4, #1]
 800536a:	2b2a      	cmp	r3, #42	; 0x2a
 800536c:	d135      	bne.n	80053da <_vfiprintf_r+0x1ce>
 800536e:	9b03      	ldr	r3, [sp, #12]
 8005370:	1d1a      	adds	r2, r3, #4
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	9203      	str	r2, [sp, #12]
 8005376:	2b00      	cmp	r3, #0
 8005378:	bfb8      	it	lt
 800537a:	f04f 33ff 	movlt.w	r3, #4294967295
 800537e:	3402      	adds	r4, #2
 8005380:	9305      	str	r3, [sp, #20]
 8005382:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005468 <_vfiprintf_r+0x25c>
 8005386:	7821      	ldrb	r1, [r4, #0]
 8005388:	2203      	movs	r2, #3
 800538a:	4650      	mov	r0, sl
 800538c:	f7fa ff20 	bl	80001d0 <memchr>
 8005390:	b140      	cbz	r0, 80053a4 <_vfiprintf_r+0x198>
 8005392:	2340      	movs	r3, #64	; 0x40
 8005394:	eba0 000a 	sub.w	r0, r0, sl
 8005398:	fa03 f000 	lsl.w	r0, r3, r0
 800539c:	9b04      	ldr	r3, [sp, #16]
 800539e:	4303      	orrs	r3, r0
 80053a0:	3401      	adds	r4, #1
 80053a2:	9304      	str	r3, [sp, #16]
 80053a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053a8:	482c      	ldr	r0, [pc, #176]	; (800545c <_vfiprintf_r+0x250>)
 80053aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053ae:	2206      	movs	r2, #6
 80053b0:	f7fa ff0e 	bl	80001d0 <memchr>
 80053b4:	2800      	cmp	r0, #0
 80053b6:	d03f      	beq.n	8005438 <_vfiprintf_r+0x22c>
 80053b8:	4b29      	ldr	r3, [pc, #164]	; (8005460 <_vfiprintf_r+0x254>)
 80053ba:	bb1b      	cbnz	r3, 8005404 <_vfiprintf_r+0x1f8>
 80053bc:	9b03      	ldr	r3, [sp, #12]
 80053be:	3307      	adds	r3, #7
 80053c0:	f023 0307 	bic.w	r3, r3, #7
 80053c4:	3308      	adds	r3, #8
 80053c6:	9303      	str	r3, [sp, #12]
 80053c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053ca:	443b      	add	r3, r7
 80053cc:	9309      	str	r3, [sp, #36]	; 0x24
 80053ce:	e767      	b.n	80052a0 <_vfiprintf_r+0x94>
 80053d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80053d4:	460c      	mov	r4, r1
 80053d6:	2001      	movs	r0, #1
 80053d8:	e7a5      	b.n	8005326 <_vfiprintf_r+0x11a>
 80053da:	2300      	movs	r3, #0
 80053dc:	3401      	adds	r4, #1
 80053de:	9305      	str	r3, [sp, #20]
 80053e0:	4619      	mov	r1, r3
 80053e2:	f04f 0c0a 	mov.w	ip, #10
 80053e6:	4620      	mov	r0, r4
 80053e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053ec:	3a30      	subs	r2, #48	; 0x30
 80053ee:	2a09      	cmp	r2, #9
 80053f0:	d903      	bls.n	80053fa <_vfiprintf_r+0x1ee>
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d0c5      	beq.n	8005382 <_vfiprintf_r+0x176>
 80053f6:	9105      	str	r1, [sp, #20]
 80053f8:	e7c3      	b.n	8005382 <_vfiprintf_r+0x176>
 80053fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80053fe:	4604      	mov	r4, r0
 8005400:	2301      	movs	r3, #1
 8005402:	e7f0      	b.n	80053e6 <_vfiprintf_r+0x1da>
 8005404:	ab03      	add	r3, sp, #12
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	462a      	mov	r2, r5
 800540a:	4b16      	ldr	r3, [pc, #88]	; (8005464 <_vfiprintf_r+0x258>)
 800540c:	a904      	add	r1, sp, #16
 800540e:	4630      	mov	r0, r6
 8005410:	f3af 8000 	nop.w
 8005414:	4607      	mov	r7, r0
 8005416:	1c78      	adds	r0, r7, #1
 8005418:	d1d6      	bne.n	80053c8 <_vfiprintf_r+0x1bc>
 800541a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800541c:	07d9      	lsls	r1, r3, #31
 800541e:	d405      	bmi.n	800542c <_vfiprintf_r+0x220>
 8005420:	89ab      	ldrh	r3, [r5, #12]
 8005422:	059a      	lsls	r2, r3, #22
 8005424:	d402      	bmi.n	800542c <_vfiprintf_r+0x220>
 8005426:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005428:	f000 fc45 	bl	8005cb6 <__retarget_lock_release_recursive>
 800542c:	89ab      	ldrh	r3, [r5, #12]
 800542e:	065b      	lsls	r3, r3, #25
 8005430:	f53f af12 	bmi.w	8005258 <_vfiprintf_r+0x4c>
 8005434:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005436:	e711      	b.n	800525c <_vfiprintf_r+0x50>
 8005438:	ab03      	add	r3, sp, #12
 800543a:	9300      	str	r3, [sp, #0]
 800543c:	462a      	mov	r2, r5
 800543e:	4b09      	ldr	r3, [pc, #36]	; (8005464 <_vfiprintf_r+0x258>)
 8005440:	a904      	add	r1, sp, #16
 8005442:	4630      	mov	r0, r6
 8005444:	f000 f880 	bl	8005548 <_printf_i>
 8005448:	e7e4      	b.n	8005414 <_vfiprintf_r+0x208>
 800544a:	bf00      	nop
 800544c:	08007914 	.word	0x08007914
 8005450:	08007934 	.word	0x08007934
 8005454:	080078f4 	.word	0x080078f4
 8005458:	080078c0 	.word	0x080078c0
 800545c:	080078ca 	.word	0x080078ca
 8005460:	00000000 	.word	0x00000000
 8005464:	080051e7 	.word	0x080051e7
 8005468:	080078c6 	.word	0x080078c6

0800546c <_printf_common>:
 800546c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005470:	4616      	mov	r6, r2
 8005472:	4699      	mov	r9, r3
 8005474:	688a      	ldr	r2, [r1, #8]
 8005476:	690b      	ldr	r3, [r1, #16]
 8005478:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800547c:	4293      	cmp	r3, r2
 800547e:	bfb8      	it	lt
 8005480:	4613      	movlt	r3, r2
 8005482:	6033      	str	r3, [r6, #0]
 8005484:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005488:	4607      	mov	r7, r0
 800548a:	460c      	mov	r4, r1
 800548c:	b10a      	cbz	r2, 8005492 <_printf_common+0x26>
 800548e:	3301      	adds	r3, #1
 8005490:	6033      	str	r3, [r6, #0]
 8005492:	6823      	ldr	r3, [r4, #0]
 8005494:	0699      	lsls	r1, r3, #26
 8005496:	bf42      	ittt	mi
 8005498:	6833      	ldrmi	r3, [r6, #0]
 800549a:	3302      	addmi	r3, #2
 800549c:	6033      	strmi	r3, [r6, #0]
 800549e:	6825      	ldr	r5, [r4, #0]
 80054a0:	f015 0506 	ands.w	r5, r5, #6
 80054a4:	d106      	bne.n	80054b4 <_printf_common+0x48>
 80054a6:	f104 0a19 	add.w	sl, r4, #25
 80054aa:	68e3      	ldr	r3, [r4, #12]
 80054ac:	6832      	ldr	r2, [r6, #0]
 80054ae:	1a9b      	subs	r3, r3, r2
 80054b0:	42ab      	cmp	r3, r5
 80054b2:	dc26      	bgt.n	8005502 <_printf_common+0x96>
 80054b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054b8:	1e13      	subs	r3, r2, #0
 80054ba:	6822      	ldr	r2, [r4, #0]
 80054bc:	bf18      	it	ne
 80054be:	2301      	movne	r3, #1
 80054c0:	0692      	lsls	r2, r2, #26
 80054c2:	d42b      	bmi.n	800551c <_printf_common+0xb0>
 80054c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054c8:	4649      	mov	r1, r9
 80054ca:	4638      	mov	r0, r7
 80054cc:	47c0      	blx	r8
 80054ce:	3001      	adds	r0, #1
 80054d0:	d01e      	beq.n	8005510 <_printf_common+0xa4>
 80054d2:	6823      	ldr	r3, [r4, #0]
 80054d4:	68e5      	ldr	r5, [r4, #12]
 80054d6:	6832      	ldr	r2, [r6, #0]
 80054d8:	f003 0306 	and.w	r3, r3, #6
 80054dc:	2b04      	cmp	r3, #4
 80054de:	bf08      	it	eq
 80054e0:	1aad      	subeq	r5, r5, r2
 80054e2:	68a3      	ldr	r3, [r4, #8]
 80054e4:	6922      	ldr	r2, [r4, #16]
 80054e6:	bf0c      	ite	eq
 80054e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054ec:	2500      	movne	r5, #0
 80054ee:	4293      	cmp	r3, r2
 80054f0:	bfc4      	itt	gt
 80054f2:	1a9b      	subgt	r3, r3, r2
 80054f4:	18ed      	addgt	r5, r5, r3
 80054f6:	2600      	movs	r6, #0
 80054f8:	341a      	adds	r4, #26
 80054fa:	42b5      	cmp	r5, r6
 80054fc:	d11a      	bne.n	8005534 <_printf_common+0xc8>
 80054fe:	2000      	movs	r0, #0
 8005500:	e008      	b.n	8005514 <_printf_common+0xa8>
 8005502:	2301      	movs	r3, #1
 8005504:	4652      	mov	r2, sl
 8005506:	4649      	mov	r1, r9
 8005508:	4638      	mov	r0, r7
 800550a:	47c0      	blx	r8
 800550c:	3001      	adds	r0, #1
 800550e:	d103      	bne.n	8005518 <_printf_common+0xac>
 8005510:	f04f 30ff 	mov.w	r0, #4294967295
 8005514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005518:	3501      	adds	r5, #1
 800551a:	e7c6      	b.n	80054aa <_printf_common+0x3e>
 800551c:	18e1      	adds	r1, r4, r3
 800551e:	1c5a      	adds	r2, r3, #1
 8005520:	2030      	movs	r0, #48	; 0x30
 8005522:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005526:	4422      	add	r2, r4
 8005528:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800552c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005530:	3302      	adds	r3, #2
 8005532:	e7c7      	b.n	80054c4 <_printf_common+0x58>
 8005534:	2301      	movs	r3, #1
 8005536:	4622      	mov	r2, r4
 8005538:	4649      	mov	r1, r9
 800553a:	4638      	mov	r0, r7
 800553c:	47c0      	blx	r8
 800553e:	3001      	adds	r0, #1
 8005540:	d0e6      	beq.n	8005510 <_printf_common+0xa4>
 8005542:	3601      	adds	r6, #1
 8005544:	e7d9      	b.n	80054fa <_printf_common+0x8e>
	...

08005548 <_printf_i>:
 8005548:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800554c:	7e0f      	ldrb	r7, [r1, #24]
 800554e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005550:	2f78      	cmp	r7, #120	; 0x78
 8005552:	4691      	mov	r9, r2
 8005554:	4680      	mov	r8, r0
 8005556:	460c      	mov	r4, r1
 8005558:	469a      	mov	sl, r3
 800555a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800555e:	d807      	bhi.n	8005570 <_printf_i+0x28>
 8005560:	2f62      	cmp	r7, #98	; 0x62
 8005562:	d80a      	bhi.n	800557a <_printf_i+0x32>
 8005564:	2f00      	cmp	r7, #0
 8005566:	f000 80d8 	beq.w	800571a <_printf_i+0x1d2>
 800556a:	2f58      	cmp	r7, #88	; 0x58
 800556c:	f000 80a3 	beq.w	80056b6 <_printf_i+0x16e>
 8005570:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005574:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005578:	e03a      	b.n	80055f0 <_printf_i+0xa8>
 800557a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800557e:	2b15      	cmp	r3, #21
 8005580:	d8f6      	bhi.n	8005570 <_printf_i+0x28>
 8005582:	a101      	add	r1, pc, #4	; (adr r1, 8005588 <_printf_i+0x40>)
 8005584:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005588:	080055e1 	.word	0x080055e1
 800558c:	080055f5 	.word	0x080055f5
 8005590:	08005571 	.word	0x08005571
 8005594:	08005571 	.word	0x08005571
 8005598:	08005571 	.word	0x08005571
 800559c:	08005571 	.word	0x08005571
 80055a0:	080055f5 	.word	0x080055f5
 80055a4:	08005571 	.word	0x08005571
 80055a8:	08005571 	.word	0x08005571
 80055ac:	08005571 	.word	0x08005571
 80055b0:	08005571 	.word	0x08005571
 80055b4:	08005701 	.word	0x08005701
 80055b8:	08005625 	.word	0x08005625
 80055bc:	080056e3 	.word	0x080056e3
 80055c0:	08005571 	.word	0x08005571
 80055c4:	08005571 	.word	0x08005571
 80055c8:	08005723 	.word	0x08005723
 80055cc:	08005571 	.word	0x08005571
 80055d0:	08005625 	.word	0x08005625
 80055d4:	08005571 	.word	0x08005571
 80055d8:	08005571 	.word	0x08005571
 80055dc:	080056eb 	.word	0x080056eb
 80055e0:	682b      	ldr	r3, [r5, #0]
 80055e2:	1d1a      	adds	r2, r3, #4
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	602a      	str	r2, [r5, #0]
 80055e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055f0:	2301      	movs	r3, #1
 80055f2:	e0a3      	b.n	800573c <_printf_i+0x1f4>
 80055f4:	6820      	ldr	r0, [r4, #0]
 80055f6:	6829      	ldr	r1, [r5, #0]
 80055f8:	0606      	lsls	r6, r0, #24
 80055fa:	f101 0304 	add.w	r3, r1, #4
 80055fe:	d50a      	bpl.n	8005616 <_printf_i+0xce>
 8005600:	680e      	ldr	r6, [r1, #0]
 8005602:	602b      	str	r3, [r5, #0]
 8005604:	2e00      	cmp	r6, #0
 8005606:	da03      	bge.n	8005610 <_printf_i+0xc8>
 8005608:	232d      	movs	r3, #45	; 0x2d
 800560a:	4276      	negs	r6, r6
 800560c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005610:	485e      	ldr	r0, [pc, #376]	; (800578c <_printf_i+0x244>)
 8005612:	230a      	movs	r3, #10
 8005614:	e019      	b.n	800564a <_printf_i+0x102>
 8005616:	680e      	ldr	r6, [r1, #0]
 8005618:	602b      	str	r3, [r5, #0]
 800561a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800561e:	bf18      	it	ne
 8005620:	b236      	sxthne	r6, r6
 8005622:	e7ef      	b.n	8005604 <_printf_i+0xbc>
 8005624:	682b      	ldr	r3, [r5, #0]
 8005626:	6820      	ldr	r0, [r4, #0]
 8005628:	1d19      	adds	r1, r3, #4
 800562a:	6029      	str	r1, [r5, #0]
 800562c:	0601      	lsls	r1, r0, #24
 800562e:	d501      	bpl.n	8005634 <_printf_i+0xec>
 8005630:	681e      	ldr	r6, [r3, #0]
 8005632:	e002      	b.n	800563a <_printf_i+0xf2>
 8005634:	0646      	lsls	r6, r0, #25
 8005636:	d5fb      	bpl.n	8005630 <_printf_i+0xe8>
 8005638:	881e      	ldrh	r6, [r3, #0]
 800563a:	4854      	ldr	r0, [pc, #336]	; (800578c <_printf_i+0x244>)
 800563c:	2f6f      	cmp	r7, #111	; 0x6f
 800563e:	bf0c      	ite	eq
 8005640:	2308      	moveq	r3, #8
 8005642:	230a      	movne	r3, #10
 8005644:	2100      	movs	r1, #0
 8005646:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800564a:	6865      	ldr	r5, [r4, #4]
 800564c:	60a5      	str	r5, [r4, #8]
 800564e:	2d00      	cmp	r5, #0
 8005650:	bfa2      	ittt	ge
 8005652:	6821      	ldrge	r1, [r4, #0]
 8005654:	f021 0104 	bicge.w	r1, r1, #4
 8005658:	6021      	strge	r1, [r4, #0]
 800565a:	b90e      	cbnz	r6, 8005660 <_printf_i+0x118>
 800565c:	2d00      	cmp	r5, #0
 800565e:	d04d      	beq.n	80056fc <_printf_i+0x1b4>
 8005660:	4615      	mov	r5, r2
 8005662:	fbb6 f1f3 	udiv	r1, r6, r3
 8005666:	fb03 6711 	mls	r7, r3, r1, r6
 800566a:	5dc7      	ldrb	r7, [r0, r7]
 800566c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005670:	4637      	mov	r7, r6
 8005672:	42bb      	cmp	r3, r7
 8005674:	460e      	mov	r6, r1
 8005676:	d9f4      	bls.n	8005662 <_printf_i+0x11a>
 8005678:	2b08      	cmp	r3, #8
 800567a:	d10b      	bne.n	8005694 <_printf_i+0x14c>
 800567c:	6823      	ldr	r3, [r4, #0]
 800567e:	07de      	lsls	r6, r3, #31
 8005680:	d508      	bpl.n	8005694 <_printf_i+0x14c>
 8005682:	6923      	ldr	r3, [r4, #16]
 8005684:	6861      	ldr	r1, [r4, #4]
 8005686:	4299      	cmp	r1, r3
 8005688:	bfde      	ittt	le
 800568a:	2330      	movle	r3, #48	; 0x30
 800568c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005690:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005694:	1b52      	subs	r2, r2, r5
 8005696:	6122      	str	r2, [r4, #16]
 8005698:	f8cd a000 	str.w	sl, [sp]
 800569c:	464b      	mov	r3, r9
 800569e:	aa03      	add	r2, sp, #12
 80056a0:	4621      	mov	r1, r4
 80056a2:	4640      	mov	r0, r8
 80056a4:	f7ff fee2 	bl	800546c <_printf_common>
 80056a8:	3001      	adds	r0, #1
 80056aa:	d14c      	bne.n	8005746 <_printf_i+0x1fe>
 80056ac:	f04f 30ff 	mov.w	r0, #4294967295
 80056b0:	b004      	add	sp, #16
 80056b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056b6:	4835      	ldr	r0, [pc, #212]	; (800578c <_printf_i+0x244>)
 80056b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80056bc:	6829      	ldr	r1, [r5, #0]
 80056be:	6823      	ldr	r3, [r4, #0]
 80056c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80056c4:	6029      	str	r1, [r5, #0]
 80056c6:	061d      	lsls	r5, r3, #24
 80056c8:	d514      	bpl.n	80056f4 <_printf_i+0x1ac>
 80056ca:	07df      	lsls	r7, r3, #31
 80056cc:	bf44      	itt	mi
 80056ce:	f043 0320 	orrmi.w	r3, r3, #32
 80056d2:	6023      	strmi	r3, [r4, #0]
 80056d4:	b91e      	cbnz	r6, 80056de <_printf_i+0x196>
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	f023 0320 	bic.w	r3, r3, #32
 80056dc:	6023      	str	r3, [r4, #0]
 80056de:	2310      	movs	r3, #16
 80056e0:	e7b0      	b.n	8005644 <_printf_i+0xfc>
 80056e2:	6823      	ldr	r3, [r4, #0]
 80056e4:	f043 0320 	orr.w	r3, r3, #32
 80056e8:	6023      	str	r3, [r4, #0]
 80056ea:	2378      	movs	r3, #120	; 0x78
 80056ec:	4828      	ldr	r0, [pc, #160]	; (8005790 <_printf_i+0x248>)
 80056ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056f2:	e7e3      	b.n	80056bc <_printf_i+0x174>
 80056f4:	0659      	lsls	r1, r3, #25
 80056f6:	bf48      	it	mi
 80056f8:	b2b6      	uxthmi	r6, r6
 80056fa:	e7e6      	b.n	80056ca <_printf_i+0x182>
 80056fc:	4615      	mov	r5, r2
 80056fe:	e7bb      	b.n	8005678 <_printf_i+0x130>
 8005700:	682b      	ldr	r3, [r5, #0]
 8005702:	6826      	ldr	r6, [r4, #0]
 8005704:	6961      	ldr	r1, [r4, #20]
 8005706:	1d18      	adds	r0, r3, #4
 8005708:	6028      	str	r0, [r5, #0]
 800570a:	0635      	lsls	r5, r6, #24
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	d501      	bpl.n	8005714 <_printf_i+0x1cc>
 8005710:	6019      	str	r1, [r3, #0]
 8005712:	e002      	b.n	800571a <_printf_i+0x1d2>
 8005714:	0670      	lsls	r0, r6, #25
 8005716:	d5fb      	bpl.n	8005710 <_printf_i+0x1c8>
 8005718:	8019      	strh	r1, [r3, #0]
 800571a:	2300      	movs	r3, #0
 800571c:	6123      	str	r3, [r4, #16]
 800571e:	4615      	mov	r5, r2
 8005720:	e7ba      	b.n	8005698 <_printf_i+0x150>
 8005722:	682b      	ldr	r3, [r5, #0]
 8005724:	1d1a      	adds	r2, r3, #4
 8005726:	602a      	str	r2, [r5, #0]
 8005728:	681d      	ldr	r5, [r3, #0]
 800572a:	6862      	ldr	r2, [r4, #4]
 800572c:	2100      	movs	r1, #0
 800572e:	4628      	mov	r0, r5
 8005730:	f7fa fd4e 	bl	80001d0 <memchr>
 8005734:	b108      	cbz	r0, 800573a <_printf_i+0x1f2>
 8005736:	1b40      	subs	r0, r0, r5
 8005738:	6060      	str	r0, [r4, #4]
 800573a:	6863      	ldr	r3, [r4, #4]
 800573c:	6123      	str	r3, [r4, #16]
 800573e:	2300      	movs	r3, #0
 8005740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005744:	e7a8      	b.n	8005698 <_printf_i+0x150>
 8005746:	6923      	ldr	r3, [r4, #16]
 8005748:	462a      	mov	r2, r5
 800574a:	4649      	mov	r1, r9
 800574c:	4640      	mov	r0, r8
 800574e:	47d0      	blx	sl
 8005750:	3001      	adds	r0, #1
 8005752:	d0ab      	beq.n	80056ac <_printf_i+0x164>
 8005754:	6823      	ldr	r3, [r4, #0]
 8005756:	079b      	lsls	r3, r3, #30
 8005758:	d413      	bmi.n	8005782 <_printf_i+0x23a>
 800575a:	68e0      	ldr	r0, [r4, #12]
 800575c:	9b03      	ldr	r3, [sp, #12]
 800575e:	4298      	cmp	r0, r3
 8005760:	bfb8      	it	lt
 8005762:	4618      	movlt	r0, r3
 8005764:	e7a4      	b.n	80056b0 <_printf_i+0x168>
 8005766:	2301      	movs	r3, #1
 8005768:	4632      	mov	r2, r6
 800576a:	4649      	mov	r1, r9
 800576c:	4640      	mov	r0, r8
 800576e:	47d0      	blx	sl
 8005770:	3001      	adds	r0, #1
 8005772:	d09b      	beq.n	80056ac <_printf_i+0x164>
 8005774:	3501      	adds	r5, #1
 8005776:	68e3      	ldr	r3, [r4, #12]
 8005778:	9903      	ldr	r1, [sp, #12]
 800577a:	1a5b      	subs	r3, r3, r1
 800577c:	42ab      	cmp	r3, r5
 800577e:	dcf2      	bgt.n	8005766 <_printf_i+0x21e>
 8005780:	e7eb      	b.n	800575a <_printf_i+0x212>
 8005782:	2500      	movs	r5, #0
 8005784:	f104 0619 	add.w	r6, r4, #25
 8005788:	e7f5      	b.n	8005776 <_printf_i+0x22e>
 800578a:	bf00      	nop
 800578c:	080078d1 	.word	0x080078d1
 8005790:	080078e2 	.word	0x080078e2

08005794 <_sbrk_r>:
 8005794:	b538      	push	{r3, r4, r5, lr}
 8005796:	4d06      	ldr	r5, [pc, #24]	; (80057b0 <_sbrk_r+0x1c>)
 8005798:	2300      	movs	r3, #0
 800579a:	4604      	mov	r4, r0
 800579c:	4608      	mov	r0, r1
 800579e:	602b      	str	r3, [r5, #0]
 80057a0:	f7fd f8a4 	bl	80028ec <_sbrk>
 80057a4:	1c43      	adds	r3, r0, #1
 80057a6:	d102      	bne.n	80057ae <_sbrk_r+0x1a>
 80057a8:	682b      	ldr	r3, [r5, #0]
 80057aa:	b103      	cbz	r3, 80057ae <_sbrk_r+0x1a>
 80057ac:	6023      	str	r3, [r4, #0]
 80057ae:	bd38      	pop	{r3, r4, r5, pc}
 80057b0:	200017e4 	.word	0x200017e4

080057b4 <__swbuf_r>:
 80057b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057b6:	460e      	mov	r6, r1
 80057b8:	4614      	mov	r4, r2
 80057ba:	4605      	mov	r5, r0
 80057bc:	b118      	cbz	r0, 80057c6 <__swbuf_r+0x12>
 80057be:	6983      	ldr	r3, [r0, #24]
 80057c0:	b90b      	cbnz	r3, 80057c6 <__swbuf_r+0x12>
 80057c2:	f000 f9d9 	bl	8005b78 <__sinit>
 80057c6:	4b21      	ldr	r3, [pc, #132]	; (800584c <__swbuf_r+0x98>)
 80057c8:	429c      	cmp	r4, r3
 80057ca:	d12b      	bne.n	8005824 <__swbuf_r+0x70>
 80057cc:	686c      	ldr	r4, [r5, #4]
 80057ce:	69a3      	ldr	r3, [r4, #24]
 80057d0:	60a3      	str	r3, [r4, #8]
 80057d2:	89a3      	ldrh	r3, [r4, #12]
 80057d4:	071a      	lsls	r2, r3, #28
 80057d6:	d52f      	bpl.n	8005838 <__swbuf_r+0x84>
 80057d8:	6923      	ldr	r3, [r4, #16]
 80057da:	b36b      	cbz	r3, 8005838 <__swbuf_r+0x84>
 80057dc:	6923      	ldr	r3, [r4, #16]
 80057de:	6820      	ldr	r0, [r4, #0]
 80057e0:	1ac0      	subs	r0, r0, r3
 80057e2:	6963      	ldr	r3, [r4, #20]
 80057e4:	b2f6      	uxtb	r6, r6
 80057e6:	4283      	cmp	r3, r0
 80057e8:	4637      	mov	r7, r6
 80057ea:	dc04      	bgt.n	80057f6 <__swbuf_r+0x42>
 80057ec:	4621      	mov	r1, r4
 80057ee:	4628      	mov	r0, r5
 80057f0:	f000 f92e 	bl	8005a50 <_fflush_r>
 80057f4:	bb30      	cbnz	r0, 8005844 <__swbuf_r+0x90>
 80057f6:	68a3      	ldr	r3, [r4, #8]
 80057f8:	3b01      	subs	r3, #1
 80057fa:	60a3      	str	r3, [r4, #8]
 80057fc:	6823      	ldr	r3, [r4, #0]
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	6022      	str	r2, [r4, #0]
 8005802:	701e      	strb	r6, [r3, #0]
 8005804:	6963      	ldr	r3, [r4, #20]
 8005806:	3001      	adds	r0, #1
 8005808:	4283      	cmp	r3, r0
 800580a:	d004      	beq.n	8005816 <__swbuf_r+0x62>
 800580c:	89a3      	ldrh	r3, [r4, #12]
 800580e:	07db      	lsls	r3, r3, #31
 8005810:	d506      	bpl.n	8005820 <__swbuf_r+0x6c>
 8005812:	2e0a      	cmp	r6, #10
 8005814:	d104      	bne.n	8005820 <__swbuf_r+0x6c>
 8005816:	4621      	mov	r1, r4
 8005818:	4628      	mov	r0, r5
 800581a:	f000 f919 	bl	8005a50 <_fflush_r>
 800581e:	b988      	cbnz	r0, 8005844 <__swbuf_r+0x90>
 8005820:	4638      	mov	r0, r7
 8005822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005824:	4b0a      	ldr	r3, [pc, #40]	; (8005850 <__swbuf_r+0x9c>)
 8005826:	429c      	cmp	r4, r3
 8005828:	d101      	bne.n	800582e <__swbuf_r+0x7a>
 800582a:	68ac      	ldr	r4, [r5, #8]
 800582c:	e7cf      	b.n	80057ce <__swbuf_r+0x1a>
 800582e:	4b09      	ldr	r3, [pc, #36]	; (8005854 <__swbuf_r+0xa0>)
 8005830:	429c      	cmp	r4, r3
 8005832:	bf08      	it	eq
 8005834:	68ec      	ldreq	r4, [r5, #12]
 8005836:	e7ca      	b.n	80057ce <__swbuf_r+0x1a>
 8005838:	4621      	mov	r1, r4
 800583a:	4628      	mov	r0, r5
 800583c:	f000 f80c 	bl	8005858 <__swsetup_r>
 8005840:	2800      	cmp	r0, #0
 8005842:	d0cb      	beq.n	80057dc <__swbuf_r+0x28>
 8005844:	f04f 37ff 	mov.w	r7, #4294967295
 8005848:	e7ea      	b.n	8005820 <__swbuf_r+0x6c>
 800584a:	bf00      	nop
 800584c:	08007914 	.word	0x08007914
 8005850:	08007934 	.word	0x08007934
 8005854:	080078f4 	.word	0x080078f4

08005858 <__swsetup_r>:
 8005858:	4b32      	ldr	r3, [pc, #200]	; (8005924 <__swsetup_r+0xcc>)
 800585a:	b570      	push	{r4, r5, r6, lr}
 800585c:	681d      	ldr	r5, [r3, #0]
 800585e:	4606      	mov	r6, r0
 8005860:	460c      	mov	r4, r1
 8005862:	b125      	cbz	r5, 800586e <__swsetup_r+0x16>
 8005864:	69ab      	ldr	r3, [r5, #24]
 8005866:	b913      	cbnz	r3, 800586e <__swsetup_r+0x16>
 8005868:	4628      	mov	r0, r5
 800586a:	f000 f985 	bl	8005b78 <__sinit>
 800586e:	4b2e      	ldr	r3, [pc, #184]	; (8005928 <__swsetup_r+0xd0>)
 8005870:	429c      	cmp	r4, r3
 8005872:	d10f      	bne.n	8005894 <__swsetup_r+0x3c>
 8005874:	686c      	ldr	r4, [r5, #4]
 8005876:	89a3      	ldrh	r3, [r4, #12]
 8005878:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800587c:	0719      	lsls	r1, r3, #28
 800587e:	d42c      	bmi.n	80058da <__swsetup_r+0x82>
 8005880:	06dd      	lsls	r5, r3, #27
 8005882:	d411      	bmi.n	80058a8 <__swsetup_r+0x50>
 8005884:	2309      	movs	r3, #9
 8005886:	6033      	str	r3, [r6, #0]
 8005888:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800588c:	81a3      	strh	r3, [r4, #12]
 800588e:	f04f 30ff 	mov.w	r0, #4294967295
 8005892:	e03e      	b.n	8005912 <__swsetup_r+0xba>
 8005894:	4b25      	ldr	r3, [pc, #148]	; (800592c <__swsetup_r+0xd4>)
 8005896:	429c      	cmp	r4, r3
 8005898:	d101      	bne.n	800589e <__swsetup_r+0x46>
 800589a:	68ac      	ldr	r4, [r5, #8]
 800589c:	e7eb      	b.n	8005876 <__swsetup_r+0x1e>
 800589e:	4b24      	ldr	r3, [pc, #144]	; (8005930 <__swsetup_r+0xd8>)
 80058a0:	429c      	cmp	r4, r3
 80058a2:	bf08      	it	eq
 80058a4:	68ec      	ldreq	r4, [r5, #12]
 80058a6:	e7e6      	b.n	8005876 <__swsetup_r+0x1e>
 80058a8:	0758      	lsls	r0, r3, #29
 80058aa:	d512      	bpl.n	80058d2 <__swsetup_r+0x7a>
 80058ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058ae:	b141      	cbz	r1, 80058c2 <__swsetup_r+0x6a>
 80058b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058b4:	4299      	cmp	r1, r3
 80058b6:	d002      	beq.n	80058be <__swsetup_r+0x66>
 80058b8:	4630      	mov	r0, r6
 80058ba:	f7ff fb9d 	bl	8004ff8 <_free_r>
 80058be:	2300      	movs	r3, #0
 80058c0:	6363      	str	r3, [r4, #52]	; 0x34
 80058c2:	89a3      	ldrh	r3, [r4, #12]
 80058c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80058c8:	81a3      	strh	r3, [r4, #12]
 80058ca:	2300      	movs	r3, #0
 80058cc:	6063      	str	r3, [r4, #4]
 80058ce:	6923      	ldr	r3, [r4, #16]
 80058d0:	6023      	str	r3, [r4, #0]
 80058d2:	89a3      	ldrh	r3, [r4, #12]
 80058d4:	f043 0308 	orr.w	r3, r3, #8
 80058d8:	81a3      	strh	r3, [r4, #12]
 80058da:	6923      	ldr	r3, [r4, #16]
 80058dc:	b94b      	cbnz	r3, 80058f2 <__swsetup_r+0x9a>
 80058de:	89a3      	ldrh	r3, [r4, #12]
 80058e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80058e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058e8:	d003      	beq.n	80058f2 <__swsetup_r+0x9a>
 80058ea:	4621      	mov	r1, r4
 80058ec:	4630      	mov	r0, r6
 80058ee:	f000 fa09 	bl	8005d04 <__smakebuf_r>
 80058f2:	89a0      	ldrh	r0, [r4, #12]
 80058f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058f8:	f010 0301 	ands.w	r3, r0, #1
 80058fc:	d00a      	beq.n	8005914 <__swsetup_r+0xbc>
 80058fe:	2300      	movs	r3, #0
 8005900:	60a3      	str	r3, [r4, #8]
 8005902:	6963      	ldr	r3, [r4, #20]
 8005904:	425b      	negs	r3, r3
 8005906:	61a3      	str	r3, [r4, #24]
 8005908:	6923      	ldr	r3, [r4, #16]
 800590a:	b943      	cbnz	r3, 800591e <__swsetup_r+0xc6>
 800590c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005910:	d1ba      	bne.n	8005888 <__swsetup_r+0x30>
 8005912:	bd70      	pop	{r4, r5, r6, pc}
 8005914:	0781      	lsls	r1, r0, #30
 8005916:	bf58      	it	pl
 8005918:	6963      	ldrpl	r3, [r4, #20]
 800591a:	60a3      	str	r3, [r4, #8]
 800591c:	e7f4      	b.n	8005908 <__swsetup_r+0xb0>
 800591e:	2000      	movs	r0, #0
 8005920:	e7f7      	b.n	8005912 <__swsetup_r+0xba>
 8005922:	bf00      	nop
 8005924:	20000f50 	.word	0x20000f50
 8005928:	08007914 	.word	0x08007914
 800592c:	08007934 	.word	0x08007934
 8005930:	080078f4 	.word	0x080078f4

08005934 <abort>:
 8005934:	b508      	push	{r3, lr}
 8005936:	2006      	movs	r0, #6
 8005938:	f000 fa58 	bl	8005dec <raise>
 800593c:	2001      	movs	r0, #1
 800593e:	f7fc ffa5 	bl	800288c <_exit>
	...

08005944 <__sflush_r>:
 8005944:	898a      	ldrh	r2, [r1, #12]
 8005946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800594a:	4605      	mov	r5, r0
 800594c:	0710      	lsls	r0, r2, #28
 800594e:	460c      	mov	r4, r1
 8005950:	d458      	bmi.n	8005a04 <__sflush_r+0xc0>
 8005952:	684b      	ldr	r3, [r1, #4]
 8005954:	2b00      	cmp	r3, #0
 8005956:	dc05      	bgt.n	8005964 <__sflush_r+0x20>
 8005958:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800595a:	2b00      	cmp	r3, #0
 800595c:	dc02      	bgt.n	8005964 <__sflush_r+0x20>
 800595e:	2000      	movs	r0, #0
 8005960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005964:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005966:	2e00      	cmp	r6, #0
 8005968:	d0f9      	beq.n	800595e <__sflush_r+0x1a>
 800596a:	2300      	movs	r3, #0
 800596c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005970:	682f      	ldr	r7, [r5, #0]
 8005972:	602b      	str	r3, [r5, #0]
 8005974:	d032      	beq.n	80059dc <__sflush_r+0x98>
 8005976:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005978:	89a3      	ldrh	r3, [r4, #12]
 800597a:	075a      	lsls	r2, r3, #29
 800597c:	d505      	bpl.n	800598a <__sflush_r+0x46>
 800597e:	6863      	ldr	r3, [r4, #4]
 8005980:	1ac0      	subs	r0, r0, r3
 8005982:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005984:	b10b      	cbz	r3, 800598a <__sflush_r+0x46>
 8005986:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005988:	1ac0      	subs	r0, r0, r3
 800598a:	2300      	movs	r3, #0
 800598c:	4602      	mov	r2, r0
 800598e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005990:	6a21      	ldr	r1, [r4, #32]
 8005992:	4628      	mov	r0, r5
 8005994:	47b0      	blx	r6
 8005996:	1c43      	adds	r3, r0, #1
 8005998:	89a3      	ldrh	r3, [r4, #12]
 800599a:	d106      	bne.n	80059aa <__sflush_r+0x66>
 800599c:	6829      	ldr	r1, [r5, #0]
 800599e:	291d      	cmp	r1, #29
 80059a0:	d82c      	bhi.n	80059fc <__sflush_r+0xb8>
 80059a2:	4a2a      	ldr	r2, [pc, #168]	; (8005a4c <__sflush_r+0x108>)
 80059a4:	40ca      	lsrs	r2, r1
 80059a6:	07d6      	lsls	r6, r2, #31
 80059a8:	d528      	bpl.n	80059fc <__sflush_r+0xb8>
 80059aa:	2200      	movs	r2, #0
 80059ac:	6062      	str	r2, [r4, #4]
 80059ae:	04d9      	lsls	r1, r3, #19
 80059b0:	6922      	ldr	r2, [r4, #16]
 80059b2:	6022      	str	r2, [r4, #0]
 80059b4:	d504      	bpl.n	80059c0 <__sflush_r+0x7c>
 80059b6:	1c42      	adds	r2, r0, #1
 80059b8:	d101      	bne.n	80059be <__sflush_r+0x7a>
 80059ba:	682b      	ldr	r3, [r5, #0]
 80059bc:	b903      	cbnz	r3, 80059c0 <__sflush_r+0x7c>
 80059be:	6560      	str	r0, [r4, #84]	; 0x54
 80059c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059c2:	602f      	str	r7, [r5, #0]
 80059c4:	2900      	cmp	r1, #0
 80059c6:	d0ca      	beq.n	800595e <__sflush_r+0x1a>
 80059c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059cc:	4299      	cmp	r1, r3
 80059ce:	d002      	beq.n	80059d6 <__sflush_r+0x92>
 80059d0:	4628      	mov	r0, r5
 80059d2:	f7ff fb11 	bl	8004ff8 <_free_r>
 80059d6:	2000      	movs	r0, #0
 80059d8:	6360      	str	r0, [r4, #52]	; 0x34
 80059da:	e7c1      	b.n	8005960 <__sflush_r+0x1c>
 80059dc:	6a21      	ldr	r1, [r4, #32]
 80059de:	2301      	movs	r3, #1
 80059e0:	4628      	mov	r0, r5
 80059e2:	47b0      	blx	r6
 80059e4:	1c41      	adds	r1, r0, #1
 80059e6:	d1c7      	bne.n	8005978 <__sflush_r+0x34>
 80059e8:	682b      	ldr	r3, [r5, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d0c4      	beq.n	8005978 <__sflush_r+0x34>
 80059ee:	2b1d      	cmp	r3, #29
 80059f0:	d001      	beq.n	80059f6 <__sflush_r+0xb2>
 80059f2:	2b16      	cmp	r3, #22
 80059f4:	d101      	bne.n	80059fa <__sflush_r+0xb6>
 80059f6:	602f      	str	r7, [r5, #0]
 80059f8:	e7b1      	b.n	800595e <__sflush_r+0x1a>
 80059fa:	89a3      	ldrh	r3, [r4, #12]
 80059fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a00:	81a3      	strh	r3, [r4, #12]
 8005a02:	e7ad      	b.n	8005960 <__sflush_r+0x1c>
 8005a04:	690f      	ldr	r7, [r1, #16]
 8005a06:	2f00      	cmp	r7, #0
 8005a08:	d0a9      	beq.n	800595e <__sflush_r+0x1a>
 8005a0a:	0793      	lsls	r3, r2, #30
 8005a0c:	680e      	ldr	r6, [r1, #0]
 8005a0e:	bf08      	it	eq
 8005a10:	694b      	ldreq	r3, [r1, #20]
 8005a12:	600f      	str	r7, [r1, #0]
 8005a14:	bf18      	it	ne
 8005a16:	2300      	movne	r3, #0
 8005a18:	eba6 0807 	sub.w	r8, r6, r7
 8005a1c:	608b      	str	r3, [r1, #8]
 8005a1e:	f1b8 0f00 	cmp.w	r8, #0
 8005a22:	dd9c      	ble.n	800595e <__sflush_r+0x1a>
 8005a24:	6a21      	ldr	r1, [r4, #32]
 8005a26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005a28:	4643      	mov	r3, r8
 8005a2a:	463a      	mov	r2, r7
 8005a2c:	4628      	mov	r0, r5
 8005a2e:	47b0      	blx	r6
 8005a30:	2800      	cmp	r0, #0
 8005a32:	dc06      	bgt.n	8005a42 <__sflush_r+0xfe>
 8005a34:	89a3      	ldrh	r3, [r4, #12]
 8005a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a3a:	81a3      	strh	r3, [r4, #12]
 8005a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a40:	e78e      	b.n	8005960 <__sflush_r+0x1c>
 8005a42:	4407      	add	r7, r0
 8005a44:	eba8 0800 	sub.w	r8, r8, r0
 8005a48:	e7e9      	b.n	8005a1e <__sflush_r+0xda>
 8005a4a:	bf00      	nop
 8005a4c:	20400001 	.word	0x20400001

08005a50 <_fflush_r>:
 8005a50:	b538      	push	{r3, r4, r5, lr}
 8005a52:	690b      	ldr	r3, [r1, #16]
 8005a54:	4605      	mov	r5, r0
 8005a56:	460c      	mov	r4, r1
 8005a58:	b913      	cbnz	r3, 8005a60 <_fflush_r+0x10>
 8005a5a:	2500      	movs	r5, #0
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	bd38      	pop	{r3, r4, r5, pc}
 8005a60:	b118      	cbz	r0, 8005a6a <_fflush_r+0x1a>
 8005a62:	6983      	ldr	r3, [r0, #24]
 8005a64:	b90b      	cbnz	r3, 8005a6a <_fflush_r+0x1a>
 8005a66:	f000 f887 	bl	8005b78 <__sinit>
 8005a6a:	4b14      	ldr	r3, [pc, #80]	; (8005abc <_fflush_r+0x6c>)
 8005a6c:	429c      	cmp	r4, r3
 8005a6e:	d11b      	bne.n	8005aa8 <_fflush_r+0x58>
 8005a70:	686c      	ldr	r4, [r5, #4]
 8005a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d0ef      	beq.n	8005a5a <_fflush_r+0xa>
 8005a7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a7c:	07d0      	lsls	r0, r2, #31
 8005a7e:	d404      	bmi.n	8005a8a <_fflush_r+0x3a>
 8005a80:	0599      	lsls	r1, r3, #22
 8005a82:	d402      	bmi.n	8005a8a <_fflush_r+0x3a>
 8005a84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a86:	f000 f915 	bl	8005cb4 <__retarget_lock_acquire_recursive>
 8005a8a:	4628      	mov	r0, r5
 8005a8c:	4621      	mov	r1, r4
 8005a8e:	f7ff ff59 	bl	8005944 <__sflush_r>
 8005a92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a94:	07da      	lsls	r2, r3, #31
 8005a96:	4605      	mov	r5, r0
 8005a98:	d4e0      	bmi.n	8005a5c <_fflush_r+0xc>
 8005a9a:	89a3      	ldrh	r3, [r4, #12]
 8005a9c:	059b      	lsls	r3, r3, #22
 8005a9e:	d4dd      	bmi.n	8005a5c <_fflush_r+0xc>
 8005aa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005aa2:	f000 f908 	bl	8005cb6 <__retarget_lock_release_recursive>
 8005aa6:	e7d9      	b.n	8005a5c <_fflush_r+0xc>
 8005aa8:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <_fflush_r+0x70>)
 8005aaa:	429c      	cmp	r4, r3
 8005aac:	d101      	bne.n	8005ab2 <_fflush_r+0x62>
 8005aae:	68ac      	ldr	r4, [r5, #8]
 8005ab0:	e7df      	b.n	8005a72 <_fflush_r+0x22>
 8005ab2:	4b04      	ldr	r3, [pc, #16]	; (8005ac4 <_fflush_r+0x74>)
 8005ab4:	429c      	cmp	r4, r3
 8005ab6:	bf08      	it	eq
 8005ab8:	68ec      	ldreq	r4, [r5, #12]
 8005aba:	e7da      	b.n	8005a72 <_fflush_r+0x22>
 8005abc:	08007914 	.word	0x08007914
 8005ac0:	08007934 	.word	0x08007934
 8005ac4:	080078f4 	.word	0x080078f4

08005ac8 <std>:
 8005ac8:	2300      	movs	r3, #0
 8005aca:	b510      	push	{r4, lr}
 8005acc:	4604      	mov	r4, r0
 8005ace:	e9c0 3300 	strd	r3, r3, [r0]
 8005ad2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ad6:	6083      	str	r3, [r0, #8]
 8005ad8:	8181      	strh	r1, [r0, #12]
 8005ada:	6643      	str	r3, [r0, #100]	; 0x64
 8005adc:	81c2      	strh	r2, [r0, #14]
 8005ade:	6183      	str	r3, [r0, #24]
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	2208      	movs	r2, #8
 8005ae4:	305c      	adds	r0, #92	; 0x5c
 8005ae6:	f7ff fa7f 	bl	8004fe8 <memset>
 8005aea:	4b05      	ldr	r3, [pc, #20]	; (8005b00 <std+0x38>)
 8005aec:	6263      	str	r3, [r4, #36]	; 0x24
 8005aee:	4b05      	ldr	r3, [pc, #20]	; (8005b04 <std+0x3c>)
 8005af0:	62a3      	str	r3, [r4, #40]	; 0x28
 8005af2:	4b05      	ldr	r3, [pc, #20]	; (8005b08 <std+0x40>)
 8005af4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005af6:	4b05      	ldr	r3, [pc, #20]	; (8005b0c <std+0x44>)
 8005af8:	6224      	str	r4, [r4, #32]
 8005afa:	6323      	str	r3, [r4, #48]	; 0x30
 8005afc:	bd10      	pop	{r4, pc}
 8005afe:	bf00      	nop
 8005b00:	08005e25 	.word	0x08005e25
 8005b04:	08005e47 	.word	0x08005e47
 8005b08:	08005e7f 	.word	0x08005e7f
 8005b0c:	08005ea3 	.word	0x08005ea3

08005b10 <_cleanup_r>:
 8005b10:	4901      	ldr	r1, [pc, #4]	; (8005b18 <_cleanup_r+0x8>)
 8005b12:	f000 b8af 	b.w	8005c74 <_fwalk_reent>
 8005b16:	bf00      	nop
 8005b18:	08005a51 	.word	0x08005a51

08005b1c <__sfmoreglue>:
 8005b1c:	b570      	push	{r4, r5, r6, lr}
 8005b1e:	2268      	movs	r2, #104	; 0x68
 8005b20:	1e4d      	subs	r5, r1, #1
 8005b22:	4355      	muls	r5, r2
 8005b24:	460e      	mov	r6, r1
 8005b26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005b2a:	f7ff fad1 	bl	80050d0 <_malloc_r>
 8005b2e:	4604      	mov	r4, r0
 8005b30:	b140      	cbz	r0, 8005b44 <__sfmoreglue+0x28>
 8005b32:	2100      	movs	r1, #0
 8005b34:	e9c0 1600 	strd	r1, r6, [r0]
 8005b38:	300c      	adds	r0, #12
 8005b3a:	60a0      	str	r0, [r4, #8]
 8005b3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005b40:	f7ff fa52 	bl	8004fe8 <memset>
 8005b44:	4620      	mov	r0, r4
 8005b46:	bd70      	pop	{r4, r5, r6, pc}

08005b48 <__sfp_lock_acquire>:
 8005b48:	4801      	ldr	r0, [pc, #4]	; (8005b50 <__sfp_lock_acquire+0x8>)
 8005b4a:	f000 b8b3 	b.w	8005cb4 <__retarget_lock_acquire_recursive>
 8005b4e:	bf00      	nop
 8005b50:	200017e1 	.word	0x200017e1

08005b54 <__sfp_lock_release>:
 8005b54:	4801      	ldr	r0, [pc, #4]	; (8005b5c <__sfp_lock_release+0x8>)
 8005b56:	f000 b8ae 	b.w	8005cb6 <__retarget_lock_release_recursive>
 8005b5a:	bf00      	nop
 8005b5c:	200017e1 	.word	0x200017e1

08005b60 <__sinit_lock_acquire>:
 8005b60:	4801      	ldr	r0, [pc, #4]	; (8005b68 <__sinit_lock_acquire+0x8>)
 8005b62:	f000 b8a7 	b.w	8005cb4 <__retarget_lock_acquire_recursive>
 8005b66:	bf00      	nop
 8005b68:	200017e2 	.word	0x200017e2

08005b6c <__sinit_lock_release>:
 8005b6c:	4801      	ldr	r0, [pc, #4]	; (8005b74 <__sinit_lock_release+0x8>)
 8005b6e:	f000 b8a2 	b.w	8005cb6 <__retarget_lock_release_recursive>
 8005b72:	bf00      	nop
 8005b74:	200017e2 	.word	0x200017e2

08005b78 <__sinit>:
 8005b78:	b510      	push	{r4, lr}
 8005b7a:	4604      	mov	r4, r0
 8005b7c:	f7ff fff0 	bl	8005b60 <__sinit_lock_acquire>
 8005b80:	69a3      	ldr	r3, [r4, #24]
 8005b82:	b11b      	cbz	r3, 8005b8c <__sinit+0x14>
 8005b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b88:	f7ff bff0 	b.w	8005b6c <__sinit_lock_release>
 8005b8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005b90:	6523      	str	r3, [r4, #80]	; 0x50
 8005b92:	4b13      	ldr	r3, [pc, #76]	; (8005be0 <__sinit+0x68>)
 8005b94:	4a13      	ldr	r2, [pc, #76]	; (8005be4 <__sinit+0x6c>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	62a2      	str	r2, [r4, #40]	; 0x28
 8005b9a:	42a3      	cmp	r3, r4
 8005b9c:	bf04      	itt	eq
 8005b9e:	2301      	moveq	r3, #1
 8005ba0:	61a3      	streq	r3, [r4, #24]
 8005ba2:	4620      	mov	r0, r4
 8005ba4:	f000 f820 	bl	8005be8 <__sfp>
 8005ba8:	6060      	str	r0, [r4, #4]
 8005baa:	4620      	mov	r0, r4
 8005bac:	f000 f81c 	bl	8005be8 <__sfp>
 8005bb0:	60a0      	str	r0, [r4, #8]
 8005bb2:	4620      	mov	r0, r4
 8005bb4:	f000 f818 	bl	8005be8 <__sfp>
 8005bb8:	2200      	movs	r2, #0
 8005bba:	60e0      	str	r0, [r4, #12]
 8005bbc:	2104      	movs	r1, #4
 8005bbe:	6860      	ldr	r0, [r4, #4]
 8005bc0:	f7ff ff82 	bl	8005ac8 <std>
 8005bc4:	68a0      	ldr	r0, [r4, #8]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	2109      	movs	r1, #9
 8005bca:	f7ff ff7d 	bl	8005ac8 <std>
 8005bce:	68e0      	ldr	r0, [r4, #12]
 8005bd0:	2202      	movs	r2, #2
 8005bd2:	2112      	movs	r1, #18
 8005bd4:	f7ff ff78 	bl	8005ac8 <std>
 8005bd8:	2301      	movs	r3, #1
 8005bda:	61a3      	str	r3, [r4, #24]
 8005bdc:	e7d2      	b.n	8005b84 <__sinit+0xc>
 8005bde:	bf00      	nop
 8005be0:	080078bc 	.word	0x080078bc
 8005be4:	08005b11 	.word	0x08005b11

08005be8 <__sfp>:
 8005be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bea:	4607      	mov	r7, r0
 8005bec:	f7ff ffac 	bl	8005b48 <__sfp_lock_acquire>
 8005bf0:	4b1e      	ldr	r3, [pc, #120]	; (8005c6c <__sfp+0x84>)
 8005bf2:	681e      	ldr	r6, [r3, #0]
 8005bf4:	69b3      	ldr	r3, [r6, #24]
 8005bf6:	b913      	cbnz	r3, 8005bfe <__sfp+0x16>
 8005bf8:	4630      	mov	r0, r6
 8005bfa:	f7ff ffbd 	bl	8005b78 <__sinit>
 8005bfe:	3648      	adds	r6, #72	; 0x48
 8005c00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005c04:	3b01      	subs	r3, #1
 8005c06:	d503      	bpl.n	8005c10 <__sfp+0x28>
 8005c08:	6833      	ldr	r3, [r6, #0]
 8005c0a:	b30b      	cbz	r3, 8005c50 <__sfp+0x68>
 8005c0c:	6836      	ldr	r6, [r6, #0]
 8005c0e:	e7f7      	b.n	8005c00 <__sfp+0x18>
 8005c10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005c14:	b9d5      	cbnz	r5, 8005c4c <__sfp+0x64>
 8005c16:	4b16      	ldr	r3, [pc, #88]	; (8005c70 <__sfp+0x88>)
 8005c18:	60e3      	str	r3, [r4, #12]
 8005c1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005c1e:	6665      	str	r5, [r4, #100]	; 0x64
 8005c20:	f000 f847 	bl	8005cb2 <__retarget_lock_init_recursive>
 8005c24:	f7ff ff96 	bl	8005b54 <__sfp_lock_release>
 8005c28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005c2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005c30:	6025      	str	r5, [r4, #0]
 8005c32:	61a5      	str	r5, [r4, #24]
 8005c34:	2208      	movs	r2, #8
 8005c36:	4629      	mov	r1, r5
 8005c38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005c3c:	f7ff f9d4 	bl	8004fe8 <memset>
 8005c40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005c44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005c48:	4620      	mov	r0, r4
 8005c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c4c:	3468      	adds	r4, #104	; 0x68
 8005c4e:	e7d9      	b.n	8005c04 <__sfp+0x1c>
 8005c50:	2104      	movs	r1, #4
 8005c52:	4638      	mov	r0, r7
 8005c54:	f7ff ff62 	bl	8005b1c <__sfmoreglue>
 8005c58:	4604      	mov	r4, r0
 8005c5a:	6030      	str	r0, [r6, #0]
 8005c5c:	2800      	cmp	r0, #0
 8005c5e:	d1d5      	bne.n	8005c0c <__sfp+0x24>
 8005c60:	f7ff ff78 	bl	8005b54 <__sfp_lock_release>
 8005c64:	230c      	movs	r3, #12
 8005c66:	603b      	str	r3, [r7, #0]
 8005c68:	e7ee      	b.n	8005c48 <__sfp+0x60>
 8005c6a:	bf00      	nop
 8005c6c:	080078bc 	.word	0x080078bc
 8005c70:	ffff0001 	.word	0xffff0001

08005c74 <_fwalk_reent>:
 8005c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c78:	4606      	mov	r6, r0
 8005c7a:	4688      	mov	r8, r1
 8005c7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005c80:	2700      	movs	r7, #0
 8005c82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c86:	f1b9 0901 	subs.w	r9, r9, #1
 8005c8a:	d505      	bpl.n	8005c98 <_fwalk_reent+0x24>
 8005c8c:	6824      	ldr	r4, [r4, #0]
 8005c8e:	2c00      	cmp	r4, #0
 8005c90:	d1f7      	bne.n	8005c82 <_fwalk_reent+0xe>
 8005c92:	4638      	mov	r0, r7
 8005c94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c98:	89ab      	ldrh	r3, [r5, #12]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d907      	bls.n	8005cae <_fwalk_reent+0x3a>
 8005c9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	d003      	beq.n	8005cae <_fwalk_reent+0x3a>
 8005ca6:	4629      	mov	r1, r5
 8005ca8:	4630      	mov	r0, r6
 8005caa:	47c0      	blx	r8
 8005cac:	4307      	orrs	r7, r0
 8005cae:	3568      	adds	r5, #104	; 0x68
 8005cb0:	e7e9      	b.n	8005c86 <_fwalk_reent+0x12>

08005cb2 <__retarget_lock_init_recursive>:
 8005cb2:	4770      	bx	lr

08005cb4 <__retarget_lock_acquire_recursive>:
 8005cb4:	4770      	bx	lr

08005cb6 <__retarget_lock_release_recursive>:
 8005cb6:	4770      	bx	lr

08005cb8 <__swhatbuf_r>:
 8005cb8:	b570      	push	{r4, r5, r6, lr}
 8005cba:	460e      	mov	r6, r1
 8005cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cc0:	2900      	cmp	r1, #0
 8005cc2:	b096      	sub	sp, #88	; 0x58
 8005cc4:	4614      	mov	r4, r2
 8005cc6:	461d      	mov	r5, r3
 8005cc8:	da08      	bge.n	8005cdc <__swhatbuf_r+0x24>
 8005cca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	602a      	str	r2, [r5, #0]
 8005cd2:	061a      	lsls	r2, r3, #24
 8005cd4:	d410      	bmi.n	8005cf8 <__swhatbuf_r+0x40>
 8005cd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cda:	e00e      	b.n	8005cfa <__swhatbuf_r+0x42>
 8005cdc:	466a      	mov	r2, sp
 8005cde:	f000 f907 	bl	8005ef0 <_fstat_r>
 8005ce2:	2800      	cmp	r0, #0
 8005ce4:	dbf1      	blt.n	8005cca <__swhatbuf_r+0x12>
 8005ce6:	9a01      	ldr	r2, [sp, #4]
 8005ce8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005cec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005cf0:	425a      	negs	r2, r3
 8005cf2:	415a      	adcs	r2, r3
 8005cf4:	602a      	str	r2, [r5, #0]
 8005cf6:	e7ee      	b.n	8005cd6 <__swhatbuf_r+0x1e>
 8005cf8:	2340      	movs	r3, #64	; 0x40
 8005cfa:	2000      	movs	r0, #0
 8005cfc:	6023      	str	r3, [r4, #0]
 8005cfe:	b016      	add	sp, #88	; 0x58
 8005d00:	bd70      	pop	{r4, r5, r6, pc}
	...

08005d04 <__smakebuf_r>:
 8005d04:	898b      	ldrh	r3, [r1, #12]
 8005d06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d08:	079d      	lsls	r5, r3, #30
 8005d0a:	4606      	mov	r6, r0
 8005d0c:	460c      	mov	r4, r1
 8005d0e:	d507      	bpl.n	8005d20 <__smakebuf_r+0x1c>
 8005d10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d14:	6023      	str	r3, [r4, #0]
 8005d16:	6123      	str	r3, [r4, #16]
 8005d18:	2301      	movs	r3, #1
 8005d1a:	6163      	str	r3, [r4, #20]
 8005d1c:	b002      	add	sp, #8
 8005d1e:	bd70      	pop	{r4, r5, r6, pc}
 8005d20:	ab01      	add	r3, sp, #4
 8005d22:	466a      	mov	r2, sp
 8005d24:	f7ff ffc8 	bl	8005cb8 <__swhatbuf_r>
 8005d28:	9900      	ldr	r1, [sp, #0]
 8005d2a:	4605      	mov	r5, r0
 8005d2c:	4630      	mov	r0, r6
 8005d2e:	f7ff f9cf 	bl	80050d0 <_malloc_r>
 8005d32:	b948      	cbnz	r0, 8005d48 <__smakebuf_r+0x44>
 8005d34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d38:	059a      	lsls	r2, r3, #22
 8005d3a:	d4ef      	bmi.n	8005d1c <__smakebuf_r+0x18>
 8005d3c:	f023 0303 	bic.w	r3, r3, #3
 8005d40:	f043 0302 	orr.w	r3, r3, #2
 8005d44:	81a3      	strh	r3, [r4, #12]
 8005d46:	e7e3      	b.n	8005d10 <__smakebuf_r+0xc>
 8005d48:	4b0d      	ldr	r3, [pc, #52]	; (8005d80 <__smakebuf_r+0x7c>)
 8005d4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005d4c:	89a3      	ldrh	r3, [r4, #12]
 8005d4e:	6020      	str	r0, [r4, #0]
 8005d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d54:	81a3      	strh	r3, [r4, #12]
 8005d56:	9b00      	ldr	r3, [sp, #0]
 8005d58:	6163      	str	r3, [r4, #20]
 8005d5a:	9b01      	ldr	r3, [sp, #4]
 8005d5c:	6120      	str	r0, [r4, #16]
 8005d5e:	b15b      	cbz	r3, 8005d78 <__smakebuf_r+0x74>
 8005d60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d64:	4630      	mov	r0, r6
 8005d66:	f000 f8d5 	bl	8005f14 <_isatty_r>
 8005d6a:	b128      	cbz	r0, 8005d78 <__smakebuf_r+0x74>
 8005d6c:	89a3      	ldrh	r3, [r4, #12]
 8005d6e:	f023 0303 	bic.w	r3, r3, #3
 8005d72:	f043 0301 	orr.w	r3, r3, #1
 8005d76:	81a3      	strh	r3, [r4, #12]
 8005d78:	89a0      	ldrh	r0, [r4, #12]
 8005d7a:	4305      	orrs	r5, r0
 8005d7c:	81a5      	strh	r5, [r4, #12]
 8005d7e:	e7cd      	b.n	8005d1c <__smakebuf_r+0x18>
 8005d80:	08005b11 	.word	0x08005b11

08005d84 <__malloc_lock>:
 8005d84:	4801      	ldr	r0, [pc, #4]	; (8005d8c <__malloc_lock+0x8>)
 8005d86:	f7ff bf95 	b.w	8005cb4 <__retarget_lock_acquire_recursive>
 8005d8a:	bf00      	nop
 8005d8c:	200017e0 	.word	0x200017e0

08005d90 <__malloc_unlock>:
 8005d90:	4801      	ldr	r0, [pc, #4]	; (8005d98 <__malloc_unlock+0x8>)
 8005d92:	f7ff bf90 	b.w	8005cb6 <__retarget_lock_release_recursive>
 8005d96:	bf00      	nop
 8005d98:	200017e0 	.word	0x200017e0

08005d9c <_raise_r>:
 8005d9c:	291f      	cmp	r1, #31
 8005d9e:	b538      	push	{r3, r4, r5, lr}
 8005da0:	4604      	mov	r4, r0
 8005da2:	460d      	mov	r5, r1
 8005da4:	d904      	bls.n	8005db0 <_raise_r+0x14>
 8005da6:	2316      	movs	r3, #22
 8005da8:	6003      	str	r3, [r0, #0]
 8005daa:	f04f 30ff 	mov.w	r0, #4294967295
 8005dae:	bd38      	pop	{r3, r4, r5, pc}
 8005db0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005db2:	b112      	cbz	r2, 8005dba <_raise_r+0x1e>
 8005db4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005db8:	b94b      	cbnz	r3, 8005dce <_raise_r+0x32>
 8005dba:	4620      	mov	r0, r4
 8005dbc:	f000 f830 	bl	8005e20 <_getpid_r>
 8005dc0:	462a      	mov	r2, r5
 8005dc2:	4601      	mov	r1, r0
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dca:	f000 b817 	b.w	8005dfc <_kill_r>
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d00a      	beq.n	8005de8 <_raise_r+0x4c>
 8005dd2:	1c59      	adds	r1, r3, #1
 8005dd4:	d103      	bne.n	8005dde <_raise_r+0x42>
 8005dd6:	2316      	movs	r3, #22
 8005dd8:	6003      	str	r3, [r0, #0]
 8005dda:	2001      	movs	r0, #1
 8005ddc:	e7e7      	b.n	8005dae <_raise_r+0x12>
 8005dde:	2400      	movs	r4, #0
 8005de0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005de4:	4628      	mov	r0, r5
 8005de6:	4798      	blx	r3
 8005de8:	2000      	movs	r0, #0
 8005dea:	e7e0      	b.n	8005dae <_raise_r+0x12>

08005dec <raise>:
 8005dec:	4b02      	ldr	r3, [pc, #8]	; (8005df8 <raise+0xc>)
 8005dee:	4601      	mov	r1, r0
 8005df0:	6818      	ldr	r0, [r3, #0]
 8005df2:	f7ff bfd3 	b.w	8005d9c <_raise_r>
 8005df6:	bf00      	nop
 8005df8:	20000f50 	.word	0x20000f50

08005dfc <_kill_r>:
 8005dfc:	b538      	push	{r3, r4, r5, lr}
 8005dfe:	4d07      	ldr	r5, [pc, #28]	; (8005e1c <_kill_r+0x20>)
 8005e00:	2300      	movs	r3, #0
 8005e02:	4604      	mov	r4, r0
 8005e04:	4608      	mov	r0, r1
 8005e06:	4611      	mov	r1, r2
 8005e08:	602b      	str	r3, [r5, #0]
 8005e0a:	f7fc fd37 	bl	800287c <_kill>
 8005e0e:	1c43      	adds	r3, r0, #1
 8005e10:	d102      	bne.n	8005e18 <_kill_r+0x1c>
 8005e12:	682b      	ldr	r3, [r5, #0]
 8005e14:	b103      	cbz	r3, 8005e18 <_kill_r+0x1c>
 8005e16:	6023      	str	r3, [r4, #0]
 8005e18:	bd38      	pop	{r3, r4, r5, pc}
 8005e1a:	bf00      	nop
 8005e1c:	200017e4 	.word	0x200017e4

08005e20 <_getpid_r>:
 8005e20:	f7fc bd2a 	b.w	8002878 <_getpid>

08005e24 <__sread>:
 8005e24:	b510      	push	{r4, lr}
 8005e26:	460c      	mov	r4, r1
 8005e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e2c:	f000 f894 	bl	8005f58 <_read_r>
 8005e30:	2800      	cmp	r0, #0
 8005e32:	bfab      	itete	ge
 8005e34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e36:	89a3      	ldrhlt	r3, [r4, #12]
 8005e38:	181b      	addge	r3, r3, r0
 8005e3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e3e:	bfac      	ite	ge
 8005e40:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e42:	81a3      	strhlt	r3, [r4, #12]
 8005e44:	bd10      	pop	{r4, pc}

08005e46 <__swrite>:
 8005e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e4a:	461f      	mov	r7, r3
 8005e4c:	898b      	ldrh	r3, [r1, #12]
 8005e4e:	05db      	lsls	r3, r3, #23
 8005e50:	4605      	mov	r5, r0
 8005e52:	460c      	mov	r4, r1
 8005e54:	4616      	mov	r6, r2
 8005e56:	d505      	bpl.n	8005e64 <__swrite+0x1e>
 8005e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f000 f868 	bl	8005f34 <_lseek_r>
 8005e64:	89a3      	ldrh	r3, [r4, #12]
 8005e66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e6e:	81a3      	strh	r3, [r4, #12]
 8005e70:	4632      	mov	r2, r6
 8005e72:	463b      	mov	r3, r7
 8005e74:	4628      	mov	r0, r5
 8005e76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e7a:	f000 b817 	b.w	8005eac <_write_r>

08005e7e <__sseek>:
 8005e7e:	b510      	push	{r4, lr}
 8005e80:	460c      	mov	r4, r1
 8005e82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e86:	f000 f855 	bl	8005f34 <_lseek_r>
 8005e8a:	1c43      	adds	r3, r0, #1
 8005e8c:	89a3      	ldrh	r3, [r4, #12]
 8005e8e:	bf15      	itete	ne
 8005e90:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e9a:	81a3      	strheq	r3, [r4, #12]
 8005e9c:	bf18      	it	ne
 8005e9e:	81a3      	strhne	r3, [r4, #12]
 8005ea0:	bd10      	pop	{r4, pc}

08005ea2 <__sclose>:
 8005ea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ea6:	f000 b813 	b.w	8005ed0 <_close_r>
	...

08005eac <_write_r>:
 8005eac:	b538      	push	{r3, r4, r5, lr}
 8005eae:	4d07      	ldr	r5, [pc, #28]	; (8005ecc <_write_r+0x20>)
 8005eb0:	4604      	mov	r4, r0
 8005eb2:	4608      	mov	r0, r1
 8005eb4:	4611      	mov	r1, r2
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	602a      	str	r2, [r5, #0]
 8005eba:	461a      	mov	r2, r3
 8005ebc:	f7fc fcfc 	bl	80028b8 <_write>
 8005ec0:	1c43      	adds	r3, r0, #1
 8005ec2:	d102      	bne.n	8005eca <_write_r+0x1e>
 8005ec4:	682b      	ldr	r3, [r5, #0]
 8005ec6:	b103      	cbz	r3, 8005eca <_write_r+0x1e>
 8005ec8:	6023      	str	r3, [r4, #0]
 8005eca:	bd38      	pop	{r3, r4, r5, pc}
 8005ecc:	200017e4 	.word	0x200017e4

08005ed0 <_close_r>:
 8005ed0:	b538      	push	{r3, r4, r5, lr}
 8005ed2:	4d06      	ldr	r5, [pc, #24]	; (8005eec <_close_r+0x1c>)
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	4604      	mov	r4, r0
 8005ed8:	4608      	mov	r0, r1
 8005eda:	602b      	str	r3, [r5, #0]
 8005edc:	f7fc fcfa 	bl	80028d4 <_close>
 8005ee0:	1c43      	adds	r3, r0, #1
 8005ee2:	d102      	bne.n	8005eea <_close_r+0x1a>
 8005ee4:	682b      	ldr	r3, [r5, #0]
 8005ee6:	b103      	cbz	r3, 8005eea <_close_r+0x1a>
 8005ee8:	6023      	str	r3, [r4, #0]
 8005eea:	bd38      	pop	{r3, r4, r5, pc}
 8005eec:	200017e4 	.word	0x200017e4

08005ef0 <_fstat_r>:
 8005ef0:	b538      	push	{r3, r4, r5, lr}
 8005ef2:	4d07      	ldr	r5, [pc, #28]	; (8005f10 <_fstat_r+0x20>)
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	4604      	mov	r4, r0
 8005ef8:	4608      	mov	r0, r1
 8005efa:	4611      	mov	r1, r2
 8005efc:	602b      	str	r3, [r5, #0]
 8005efe:	f7fc fcec 	bl	80028da <_fstat>
 8005f02:	1c43      	adds	r3, r0, #1
 8005f04:	d102      	bne.n	8005f0c <_fstat_r+0x1c>
 8005f06:	682b      	ldr	r3, [r5, #0]
 8005f08:	b103      	cbz	r3, 8005f0c <_fstat_r+0x1c>
 8005f0a:	6023      	str	r3, [r4, #0]
 8005f0c:	bd38      	pop	{r3, r4, r5, pc}
 8005f0e:	bf00      	nop
 8005f10:	200017e4 	.word	0x200017e4

08005f14 <_isatty_r>:
 8005f14:	b538      	push	{r3, r4, r5, lr}
 8005f16:	4d06      	ldr	r5, [pc, #24]	; (8005f30 <_isatty_r+0x1c>)
 8005f18:	2300      	movs	r3, #0
 8005f1a:	4604      	mov	r4, r0
 8005f1c:	4608      	mov	r0, r1
 8005f1e:	602b      	str	r3, [r5, #0]
 8005f20:	f7fc fce0 	bl	80028e4 <_isatty>
 8005f24:	1c43      	adds	r3, r0, #1
 8005f26:	d102      	bne.n	8005f2e <_isatty_r+0x1a>
 8005f28:	682b      	ldr	r3, [r5, #0]
 8005f2a:	b103      	cbz	r3, 8005f2e <_isatty_r+0x1a>
 8005f2c:	6023      	str	r3, [r4, #0]
 8005f2e:	bd38      	pop	{r3, r4, r5, pc}
 8005f30:	200017e4 	.word	0x200017e4

08005f34 <_lseek_r>:
 8005f34:	b538      	push	{r3, r4, r5, lr}
 8005f36:	4d07      	ldr	r5, [pc, #28]	; (8005f54 <_lseek_r+0x20>)
 8005f38:	4604      	mov	r4, r0
 8005f3a:	4608      	mov	r0, r1
 8005f3c:	4611      	mov	r1, r2
 8005f3e:	2200      	movs	r2, #0
 8005f40:	602a      	str	r2, [r5, #0]
 8005f42:	461a      	mov	r2, r3
 8005f44:	f7fc fcd0 	bl	80028e8 <_lseek>
 8005f48:	1c43      	adds	r3, r0, #1
 8005f4a:	d102      	bne.n	8005f52 <_lseek_r+0x1e>
 8005f4c:	682b      	ldr	r3, [r5, #0]
 8005f4e:	b103      	cbz	r3, 8005f52 <_lseek_r+0x1e>
 8005f50:	6023      	str	r3, [r4, #0]
 8005f52:	bd38      	pop	{r3, r4, r5, pc}
 8005f54:	200017e4 	.word	0x200017e4

08005f58 <_read_r>:
 8005f58:	b538      	push	{r3, r4, r5, lr}
 8005f5a:	4d07      	ldr	r5, [pc, #28]	; (8005f78 <_read_r+0x20>)
 8005f5c:	4604      	mov	r4, r0
 8005f5e:	4608      	mov	r0, r1
 8005f60:	4611      	mov	r1, r2
 8005f62:	2200      	movs	r2, #0
 8005f64:	602a      	str	r2, [r5, #0]
 8005f66:	461a      	mov	r2, r3
 8005f68:	f7fc fc96 	bl	8002898 <_read>
 8005f6c:	1c43      	adds	r3, r0, #1
 8005f6e:	d102      	bne.n	8005f76 <_read_r+0x1e>
 8005f70:	682b      	ldr	r3, [r5, #0]
 8005f72:	b103      	cbz	r3, 8005f76 <_read_r+0x1e>
 8005f74:	6023      	str	r3, [r4, #0]
 8005f76:	bd38      	pop	{r3, r4, r5, pc}
 8005f78:	200017e4 	.word	0x200017e4
 8005f7c:	00000000 	.word	0x00000000

08005f80 <cos>:
 8005f80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f82:	ec53 2b10 	vmov	r2, r3, d0
 8005f86:	4826      	ldr	r0, [pc, #152]	; (8006020 <cos+0xa0>)
 8005f88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005f8c:	4281      	cmp	r1, r0
 8005f8e:	dc06      	bgt.n	8005f9e <cos+0x1e>
 8005f90:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8006018 <cos+0x98>
 8005f94:	b005      	add	sp, #20
 8005f96:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f9a:	f000 bacd 	b.w	8006538 <__kernel_cos>
 8005f9e:	4821      	ldr	r0, [pc, #132]	; (8006024 <cos+0xa4>)
 8005fa0:	4281      	cmp	r1, r0
 8005fa2:	dd09      	ble.n	8005fb8 <cos+0x38>
 8005fa4:	ee10 0a10 	vmov	r0, s0
 8005fa8:	4619      	mov	r1, r3
 8005faa:	f7fa f965 	bl	8000278 <__aeabi_dsub>
 8005fae:	ec41 0b10 	vmov	d0, r0, r1
 8005fb2:	b005      	add	sp, #20
 8005fb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8005fb8:	4668      	mov	r0, sp
 8005fba:	f000 f8ad 	bl	8006118 <__ieee754_rem_pio2>
 8005fbe:	f000 0003 	and.w	r0, r0, #3
 8005fc2:	2801      	cmp	r0, #1
 8005fc4:	d00b      	beq.n	8005fde <cos+0x5e>
 8005fc6:	2802      	cmp	r0, #2
 8005fc8:	d016      	beq.n	8005ff8 <cos+0x78>
 8005fca:	b9e0      	cbnz	r0, 8006006 <cos+0x86>
 8005fcc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005fd0:	ed9d 0b00 	vldr	d0, [sp]
 8005fd4:	f000 fab0 	bl	8006538 <__kernel_cos>
 8005fd8:	ec51 0b10 	vmov	r0, r1, d0
 8005fdc:	e7e7      	b.n	8005fae <cos+0x2e>
 8005fde:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005fe2:	ed9d 0b00 	vldr	d0, [sp]
 8005fe6:	f000 febf 	bl	8006d68 <__kernel_sin>
 8005fea:	ec53 2b10 	vmov	r2, r3, d0
 8005fee:	ee10 0a10 	vmov	r0, s0
 8005ff2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005ff6:	e7da      	b.n	8005fae <cos+0x2e>
 8005ff8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005ffc:	ed9d 0b00 	vldr	d0, [sp]
 8006000:	f000 fa9a 	bl	8006538 <__kernel_cos>
 8006004:	e7f1      	b.n	8005fea <cos+0x6a>
 8006006:	ed9d 1b02 	vldr	d1, [sp, #8]
 800600a:	ed9d 0b00 	vldr	d0, [sp]
 800600e:	2001      	movs	r0, #1
 8006010:	f000 feaa 	bl	8006d68 <__kernel_sin>
 8006014:	e7e0      	b.n	8005fd8 <cos+0x58>
 8006016:	bf00      	nop
	...
 8006020:	3fe921fb 	.word	0x3fe921fb
 8006024:	7fefffff 	.word	0x7fefffff

08006028 <sin>:
 8006028:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800602a:	ec53 2b10 	vmov	r2, r3, d0
 800602e:	4828      	ldr	r0, [pc, #160]	; (80060d0 <sin+0xa8>)
 8006030:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006034:	4281      	cmp	r1, r0
 8006036:	dc07      	bgt.n	8006048 <sin+0x20>
 8006038:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80060c8 <sin+0xa0>
 800603c:	2000      	movs	r0, #0
 800603e:	b005      	add	sp, #20
 8006040:	f85d eb04 	ldr.w	lr, [sp], #4
 8006044:	f000 be90 	b.w	8006d68 <__kernel_sin>
 8006048:	4822      	ldr	r0, [pc, #136]	; (80060d4 <sin+0xac>)
 800604a:	4281      	cmp	r1, r0
 800604c:	dd09      	ble.n	8006062 <sin+0x3a>
 800604e:	ee10 0a10 	vmov	r0, s0
 8006052:	4619      	mov	r1, r3
 8006054:	f7fa f910 	bl	8000278 <__aeabi_dsub>
 8006058:	ec41 0b10 	vmov	d0, r0, r1
 800605c:	b005      	add	sp, #20
 800605e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006062:	4668      	mov	r0, sp
 8006064:	f000 f858 	bl	8006118 <__ieee754_rem_pio2>
 8006068:	f000 0003 	and.w	r0, r0, #3
 800606c:	2801      	cmp	r0, #1
 800606e:	d00c      	beq.n	800608a <sin+0x62>
 8006070:	2802      	cmp	r0, #2
 8006072:	d011      	beq.n	8006098 <sin+0x70>
 8006074:	b9f0      	cbnz	r0, 80060b4 <sin+0x8c>
 8006076:	ed9d 1b02 	vldr	d1, [sp, #8]
 800607a:	ed9d 0b00 	vldr	d0, [sp]
 800607e:	2001      	movs	r0, #1
 8006080:	f000 fe72 	bl	8006d68 <__kernel_sin>
 8006084:	ec51 0b10 	vmov	r0, r1, d0
 8006088:	e7e6      	b.n	8006058 <sin+0x30>
 800608a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800608e:	ed9d 0b00 	vldr	d0, [sp]
 8006092:	f000 fa51 	bl	8006538 <__kernel_cos>
 8006096:	e7f5      	b.n	8006084 <sin+0x5c>
 8006098:	ed9d 1b02 	vldr	d1, [sp, #8]
 800609c:	ed9d 0b00 	vldr	d0, [sp]
 80060a0:	2001      	movs	r0, #1
 80060a2:	f000 fe61 	bl	8006d68 <__kernel_sin>
 80060a6:	ec53 2b10 	vmov	r2, r3, d0
 80060aa:	ee10 0a10 	vmov	r0, s0
 80060ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80060b2:	e7d1      	b.n	8006058 <sin+0x30>
 80060b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80060b8:	ed9d 0b00 	vldr	d0, [sp]
 80060bc:	f000 fa3c 	bl	8006538 <__kernel_cos>
 80060c0:	e7f1      	b.n	80060a6 <sin+0x7e>
 80060c2:	bf00      	nop
 80060c4:	f3af 8000 	nop.w
	...
 80060d0:	3fe921fb 	.word	0x3fe921fb
 80060d4:	7fefffff 	.word	0x7fefffff

080060d8 <sqrtf>:
 80060d8:	b508      	push	{r3, lr}
 80060da:	ed2d 8b02 	vpush	{d8}
 80060de:	eeb0 8a40 	vmov.f32	s16, s0
 80060e2:	f000 fa25 	bl	8006530 <__ieee754_sqrtf>
 80060e6:	eeb4 8a48 	vcmp.f32	s16, s16
 80060ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ee:	d60c      	bvs.n	800610a <sqrtf+0x32>
 80060f0:	eddf 8a07 	vldr	s17, [pc, #28]	; 8006110 <sqrtf+0x38>
 80060f4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80060f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060fc:	d505      	bpl.n	800610a <sqrtf+0x32>
 80060fe:	f7fe ff19 	bl	8004f34 <__errno>
 8006102:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006106:	2321      	movs	r3, #33	; 0x21
 8006108:	6003      	str	r3, [r0, #0]
 800610a:	ecbd 8b02 	vpop	{d8}
 800610e:	bd08      	pop	{r3, pc}
	...

08006118 <__ieee754_rem_pio2>:
 8006118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800611c:	ed2d 8b02 	vpush	{d8}
 8006120:	ec55 4b10 	vmov	r4, r5, d0
 8006124:	4bca      	ldr	r3, [pc, #808]	; (8006450 <__ieee754_rem_pio2+0x338>)
 8006126:	b08b      	sub	sp, #44	; 0x2c
 8006128:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800612c:	4598      	cmp	r8, r3
 800612e:	4682      	mov	sl, r0
 8006130:	9502      	str	r5, [sp, #8]
 8006132:	dc08      	bgt.n	8006146 <__ieee754_rem_pio2+0x2e>
 8006134:	2200      	movs	r2, #0
 8006136:	2300      	movs	r3, #0
 8006138:	ed80 0b00 	vstr	d0, [r0]
 800613c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006140:	f04f 0b00 	mov.w	fp, #0
 8006144:	e028      	b.n	8006198 <__ieee754_rem_pio2+0x80>
 8006146:	4bc3      	ldr	r3, [pc, #780]	; (8006454 <__ieee754_rem_pio2+0x33c>)
 8006148:	4598      	cmp	r8, r3
 800614a:	dc78      	bgt.n	800623e <__ieee754_rem_pio2+0x126>
 800614c:	9b02      	ldr	r3, [sp, #8]
 800614e:	4ec2      	ldr	r6, [pc, #776]	; (8006458 <__ieee754_rem_pio2+0x340>)
 8006150:	2b00      	cmp	r3, #0
 8006152:	ee10 0a10 	vmov	r0, s0
 8006156:	a3b0      	add	r3, pc, #704	; (adr r3, 8006418 <__ieee754_rem_pio2+0x300>)
 8006158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615c:	4629      	mov	r1, r5
 800615e:	dd39      	ble.n	80061d4 <__ieee754_rem_pio2+0xbc>
 8006160:	f7fa f88a 	bl	8000278 <__aeabi_dsub>
 8006164:	45b0      	cmp	r8, r6
 8006166:	4604      	mov	r4, r0
 8006168:	460d      	mov	r5, r1
 800616a:	d01b      	beq.n	80061a4 <__ieee754_rem_pio2+0x8c>
 800616c:	a3ac      	add	r3, pc, #688	; (adr r3, 8006420 <__ieee754_rem_pio2+0x308>)
 800616e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006172:	f7fa f881 	bl	8000278 <__aeabi_dsub>
 8006176:	4602      	mov	r2, r0
 8006178:	460b      	mov	r3, r1
 800617a:	e9ca 2300 	strd	r2, r3, [sl]
 800617e:	4620      	mov	r0, r4
 8006180:	4629      	mov	r1, r5
 8006182:	f7fa f879 	bl	8000278 <__aeabi_dsub>
 8006186:	a3a6      	add	r3, pc, #664	; (adr r3, 8006420 <__ieee754_rem_pio2+0x308>)
 8006188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618c:	f7fa f874 	bl	8000278 <__aeabi_dsub>
 8006190:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006194:	f04f 0b01 	mov.w	fp, #1
 8006198:	4658      	mov	r0, fp
 800619a:	b00b      	add	sp, #44	; 0x2c
 800619c:	ecbd 8b02 	vpop	{d8}
 80061a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a4:	a3a0      	add	r3, pc, #640	; (adr r3, 8006428 <__ieee754_rem_pio2+0x310>)
 80061a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061aa:	f7fa f865 	bl	8000278 <__aeabi_dsub>
 80061ae:	a3a0      	add	r3, pc, #640	; (adr r3, 8006430 <__ieee754_rem_pio2+0x318>)
 80061b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b4:	4604      	mov	r4, r0
 80061b6:	460d      	mov	r5, r1
 80061b8:	f7fa f85e 	bl	8000278 <__aeabi_dsub>
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	e9ca 2300 	strd	r2, r3, [sl]
 80061c4:	4620      	mov	r0, r4
 80061c6:	4629      	mov	r1, r5
 80061c8:	f7fa f856 	bl	8000278 <__aeabi_dsub>
 80061cc:	a398      	add	r3, pc, #608	; (adr r3, 8006430 <__ieee754_rem_pio2+0x318>)
 80061ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d2:	e7db      	b.n	800618c <__ieee754_rem_pio2+0x74>
 80061d4:	f7fa f852 	bl	800027c <__adddf3>
 80061d8:	45b0      	cmp	r8, r6
 80061da:	4604      	mov	r4, r0
 80061dc:	460d      	mov	r5, r1
 80061de:	d016      	beq.n	800620e <__ieee754_rem_pio2+0xf6>
 80061e0:	a38f      	add	r3, pc, #572	; (adr r3, 8006420 <__ieee754_rem_pio2+0x308>)
 80061e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e6:	f7fa f849 	bl	800027c <__adddf3>
 80061ea:	4602      	mov	r2, r0
 80061ec:	460b      	mov	r3, r1
 80061ee:	e9ca 2300 	strd	r2, r3, [sl]
 80061f2:	4620      	mov	r0, r4
 80061f4:	4629      	mov	r1, r5
 80061f6:	f7fa f83f 	bl	8000278 <__aeabi_dsub>
 80061fa:	a389      	add	r3, pc, #548	; (adr r3, 8006420 <__ieee754_rem_pio2+0x308>)
 80061fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006200:	f7fa f83c 	bl	800027c <__adddf3>
 8006204:	f04f 3bff 	mov.w	fp, #4294967295
 8006208:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800620c:	e7c4      	b.n	8006198 <__ieee754_rem_pio2+0x80>
 800620e:	a386      	add	r3, pc, #536	; (adr r3, 8006428 <__ieee754_rem_pio2+0x310>)
 8006210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006214:	f7fa f832 	bl	800027c <__adddf3>
 8006218:	a385      	add	r3, pc, #532	; (adr r3, 8006430 <__ieee754_rem_pio2+0x318>)
 800621a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621e:	4604      	mov	r4, r0
 8006220:	460d      	mov	r5, r1
 8006222:	f7fa f82b 	bl	800027c <__adddf3>
 8006226:	4602      	mov	r2, r0
 8006228:	460b      	mov	r3, r1
 800622a:	e9ca 2300 	strd	r2, r3, [sl]
 800622e:	4620      	mov	r0, r4
 8006230:	4629      	mov	r1, r5
 8006232:	f7fa f821 	bl	8000278 <__aeabi_dsub>
 8006236:	a37e      	add	r3, pc, #504	; (adr r3, 8006430 <__ieee754_rem_pio2+0x318>)
 8006238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623c:	e7e0      	b.n	8006200 <__ieee754_rem_pio2+0xe8>
 800623e:	4b87      	ldr	r3, [pc, #540]	; (800645c <__ieee754_rem_pio2+0x344>)
 8006240:	4598      	cmp	r8, r3
 8006242:	f300 80d9 	bgt.w	80063f8 <__ieee754_rem_pio2+0x2e0>
 8006246:	f000 fe4d 	bl	8006ee4 <fabs>
 800624a:	ec55 4b10 	vmov	r4, r5, d0
 800624e:	ee10 0a10 	vmov	r0, s0
 8006252:	a379      	add	r3, pc, #484	; (adr r3, 8006438 <__ieee754_rem_pio2+0x320>)
 8006254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006258:	4629      	mov	r1, r5
 800625a:	f7fa f9c5 	bl	80005e8 <__aeabi_dmul>
 800625e:	4b80      	ldr	r3, [pc, #512]	; (8006460 <__ieee754_rem_pio2+0x348>)
 8006260:	2200      	movs	r2, #0
 8006262:	f7fa f80b 	bl	800027c <__adddf3>
 8006266:	f7fa fc59 	bl	8000b1c <__aeabi_d2iz>
 800626a:	4683      	mov	fp, r0
 800626c:	f7fa f952 	bl	8000514 <__aeabi_i2d>
 8006270:	4602      	mov	r2, r0
 8006272:	460b      	mov	r3, r1
 8006274:	ec43 2b18 	vmov	d8, r2, r3
 8006278:	a367      	add	r3, pc, #412	; (adr r3, 8006418 <__ieee754_rem_pio2+0x300>)
 800627a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627e:	f7fa f9b3 	bl	80005e8 <__aeabi_dmul>
 8006282:	4602      	mov	r2, r0
 8006284:	460b      	mov	r3, r1
 8006286:	4620      	mov	r0, r4
 8006288:	4629      	mov	r1, r5
 800628a:	f7f9 fff5 	bl	8000278 <__aeabi_dsub>
 800628e:	a364      	add	r3, pc, #400	; (adr r3, 8006420 <__ieee754_rem_pio2+0x308>)
 8006290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006294:	4606      	mov	r6, r0
 8006296:	460f      	mov	r7, r1
 8006298:	ec51 0b18 	vmov	r0, r1, d8
 800629c:	f7fa f9a4 	bl	80005e8 <__aeabi_dmul>
 80062a0:	f1bb 0f1f 	cmp.w	fp, #31
 80062a4:	4604      	mov	r4, r0
 80062a6:	460d      	mov	r5, r1
 80062a8:	dc0d      	bgt.n	80062c6 <__ieee754_rem_pio2+0x1ae>
 80062aa:	4b6e      	ldr	r3, [pc, #440]	; (8006464 <__ieee754_rem_pio2+0x34c>)
 80062ac:	f10b 32ff 	add.w	r2, fp, #4294967295
 80062b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062b4:	4543      	cmp	r3, r8
 80062b6:	d006      	beq.n	80062c6 <__ieee754_rem_pio2+0x1ae>
 80062b8:	4622      	mov	r2, r4
 80062ba:	462b      	mov	r3, r5
 80062bc:	4630      	mov	r0, r6
 80062be:	4639      	mov	r1, r7
 80062c0:	f7f9 ffda 	bl	8000278 <__aeabi_dsub>
 80062c4:	e00f      	b.n	80062e6 <__ieee754_rem_pio2+0x1ce>
 80062c6:	462b      	mov	r3, r5
 80062c8:	4622      	mov	r2, r4
 80062ca:	4630      	mov	r0, r6
 80062cc:	4639      	mov	r1, r7
 80062ce:	f7f9 ffd3 	bl	8000278 <__aeabi_dsub>
 80062d2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80062d6:	9303      	str	r3, [sp, #12]
 80062d8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80062dc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80062e0:	f1b8 0f10 	cmp.w	r8, #16
 80062e4:	dc02      	bgt.n	80062ec <__ieee754_rem_pio2+0x1d4>
 80062e6:	e9ca 0100 	strd	r0, r1, [sl]
 80062ea:	e039      	b.n	8006360 <__ieee754_rem_pio2+0x248>
 80062ec:	a34e      	add	r3, pc, #312	; (adr r3, 8006428 <__ieee754_rem_pio2+0x310>)
 80062ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f2:	ec51 0b18 	vmov	r0, r1, d8
 80062f6:	f7fa f977 	bl	80005e8 <__aeabi_dmul>
 80062fa:	4604      	mov	r4, r0
 80062fc:	460d      	mov	r5, r1
 80062fe:	4602      	mov	r2, r0
 8006300:	460b      	mov	r3, r1
 8006302:	4630      	mov	r0, r6
 8006304:	4639      	mov	r1, r7
 8006306:	f7f9 ffb7 	bl	8000278 <__aeabi_dsub>
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	4680      	mov	r8, r0
 8006310:	4689      	mov	r9, r1
 8006312:	4630      	mov	r0, r6
 8006314:	4639      	mov	r1, r7
 8006316:	f7f9 ffaf 	bl	8000278 <__aeabi_dsub>
 800631a:	4622      	mov	r2, r4
 800631c:	462b      	mov	r3, r5
 800631e:	f7f9 ffab 	bl	8000278 <__aeabi_dsub>
 8006322:	a343      	add	r3, pc, #268	; (adr r3, 8006430 <__ieee754_rem_pio2+0x318>)
 8006324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006328:	4604      	mov	r4, r0
 800632a:	460d      	mov	r5, r1
 800632c:	ec51 0b18 	vmov	r0, r1, d8
 8006330:	f7fa f95a 	bl	80005e8 <__aeabi_dmul>
 8006334:	4622      	mov	r2, r4
 8006336:	462b      	mov	r3, r5
 8006338:	f7f9 ff9e 	bl	8000278 <__aeabi_dsub>
 800633c:	4602      	mov	r2, r0
 800633e:	460b      	mov	r3, r1
 8006340:	4604      	mov	r4, r0
 8006342:	460d      	mov	r5, r1
 8006344:	4640      	mov	r0, r8
 8006346:	4649      	mov	r1, r9
 8006348:	f7f9 ff96 	bl	8000278 <__aeabi_dsub>
 800634c:	9a03      	ldr	r2, [sp, #12]
 800634e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	2b31      	cmp	r3, #49	; 0x31
 8006356:	dc24      	bgt.n	80063a2 <__ieee754_rem_pio2+0x28a>
 8006358:	e9ca 0100 	strd	r0, r1, [sl]
 800635c:	4646      	mov	r6, r8
 800635e:	464f      	mov	r7, r9
 8006360:	e9da 8900 	ldrd	r8, r9, [sl]
 8006364:	4630      	mov	r0, r6
 8006366:	4642      	mov	r2, r8
 8006368:	464b      	mov	r3, r9
 800636a:	4639      	mov	r1, r7
 800636c:	f7f9 ff84 	bl	8000278 <__aeabi_dsub>
 8006370:	462b      	mov	r3, r5
 8006372:	4622      	mov	r2, r4
 8006374:	f7f9 ff80 	bl	8000278 <__aeabi_dsub>
 8006378:	9b02      	ldr	r3, [sp, #8]
 800637a:	2b00      	cmp	r3, #0
 800637c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006380:	f6bf af0a 	bge.w	8006198 <__ieee754_rem_pio2+0x80>
 8006384:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006388:	f8ca 3004 	str.w	r3, [sl, #4]
 800638c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006390:	f8ca 8000 	str.w	r8, [sl]
 8006394:	f8ca 0008 	str.w	r0, [sl, #8]
 8006398:	f8ca 300c 	str.w	r3, [sl, #12]
 800639c:	f1cb 0b00 	rsb	fp, fp, #0
 80063a0:	e6fa      	b.n	8006198 <__ieee754_rem_pio2+0x80>
 80063a2:	a327      	add	r3, pc, #156	; (adr r3, 8006440 <__ieee754_rem_pio2+0x328>)
 80063a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a8:	ec51 0b18 	vmov	r0, r1, d8
 80063ac:	f7fa f91c 	bl	80005e8 <__aeabi_dmul>
 80063b0:	4604      	mov	r4, r0
 80063b2:	460d      	mov	r5, r1
 80063b4:	4602      	mov	r2, r0
 80063b6:	460b      	mov	r3, r1
 80063b8:	4640      	mov	r0, r8
 80063ba:	4649      	mov	r1, r9
 80063bc:	f7f9 ff5c 	bl	8000278 <__aeabi_dsub>
 80063c0:	4602      	mov	r2, r0
 80063c2:	460b      	mov	r3, r1
 80063c4:	4606      	mov	r6, r0
 80063c6:	460f      	mov	r7, r1
 80063c8:	4640      	mov	r0, r8
 80063ca:	4649      	mov	r1, r9
 80063cc:	f7f9 ff54 	bl	8000278 <__aeabi_dsub>
 80063d0:	4622      	mov	r2, r4
 80063d2:	462b      	mov	r3, r5
 80063d4:	f7f9 ff50 	bl	8000278 <__aeabi_dsub>
 80063d8:	a31b      	add	r3, pc, #108	; (adr r3, 8006448 <__ieee754_rem_pio2+0x330>)
 80063da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063de:	4604      	mov	r4, r0
 80063e0:	460d      	mov	r5, r1
 80063e2:	ec51 0b18 	vmov	r0, r1, d8
 80063e6:	f7fa f8ff 	bl	80005e8 <__aeabi_dmul>
 80063ea:	4622      	mov	r2, r4
 80063ec:	462b      	mov	r3, r5
 80063ee:	f7f9 ff43 	bl	8000278 <__aeabi_dsub>
 80063f2:	4604      	mov	r4, r0
 80063f4:	460d      	mov	r5, r1
 80063f6:	e75f      	b.n	80062b8 <__ieee754_rem_pio2+0x1a0>
 80063f8:	4b1b      	ldr	r3, [pc, #108]	; (8006468 <__ieee754_rem_pio2+0x350>)
 80063fa:	4598      	cmp	r8, r3
 80063fc:	dd36      	ble.n	800646c <__ieee754_rem_pio2+0x354>
 80063fe:	ee10 2a10 	vmov	r2, s0
 8006402:	462b      	mov	r3, r5
 8006404:	4620      	mov	r0, r4
 8006406:	4629      	mov	r1, r5
 8006408:	f7f9 ff36 	bl	8000278 <__aeabi_dsub>
 800640c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006410:	e9ca 0100 	strd	r0, r1, [sl]
 8006414:	e694      	b.n	8006140 <__ieee754_rem_pio2+0x28>
 8006416:	bf00      	nop
 8006418:	54400000 	.word	0x54400000
 800641c:	3ff921fb 	.word	0x3ff921fb
 8006420:	1a626331 	.word	0x1a626331
 8006424:	3dd0b461 	.word	0x3dd0b461
 8006428:	1a600000 	.word	0x1a600000
 800642c:	3dd0b461 	.word	0x3dd0b461
 8006430:	2e037073 	.word	0x2e037073
 8006434:	3ba3198a 	.word	0x3ba3198a
 8006438:	6dc9c883 	.word	0x6dc9c883
 800643c:	3fe45f30 	.word	0x3fe45f30
 8006440:	2e000000 	.word	0x2e000000
 8006444:	3ba3198a 	.word	0x3ba3198a
 8006448:	252049c1 	.word	0x252049c1
 800644c:	397b839a 	.word	0x397b839a
 8006450:	3fe921fb 	.word	0x3fe921fb
 8006454:	4002d97b 	.word	0x4002d97b
 8006458:	3ff921fb 	.word	0x3ff921fb
 800645c:	413921fb 	.word	0x413921fb
 8006460:	3fe00000 	.word	0x3fe00000
 8006464:	08007954 	.word	0x08007954
 8006468:	7fefffff 	.word	0x7fefffff
 800646c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8006470:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8006474:	ee10 0a10 	vmov	r0, s0
 8006478:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800647c:	ee10 6a10 	vmov	r6, s0
 8006480:	460f      	mov	r7, r1
 8006482:	f7fa fb4b 	bl	8000b1c <__aeabi_d2iz>
 8006486:	f7fa f845 	bl	8000514 <__aeabi_i2d>
 800648a:	4602      	mov	r2, r0
 800648c:	460b      	mov	r3, r1
 800648e:	4630      	mov	r0, r6
 8006490:	4639      	mov	r1, r7
 8006492:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006496:	f7f9 feef 	bl	8000278 <__aeabi_dsub>
 800649a:	4b23      	ldr	r3, [pc, #140]	; (8006528 <__ieee754_rem_pio2+0x410>)
 800649c:	2200      	movs	r2, #0
 800649e:	f7fa f8a3 	bl	80005e8 <__aeabi_dmul>
 80064a2:	460f      	mov	r7, r1
 80064a4:	4606      	mov	r6, r0
 80064a6:	f7fa fb39 	bl	8000b1c <__aeabi_d2iz>
 80064aa:	f7fa f833 	bl	8000514 <__aeabi_i2d>
 80064ae:	4602      	mov	r2, r0
 80064b0:	460b      	mov	r3, r1
 80064b2:	4630      	mov	r0, r6
 80064b4:	4639      	mov	r1, r7
 80064b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80064ba:	f7f9 fedd 	bl	8000278 <__aeabi_dsub>
 80064be:	4b1a      	ldr	r3, [pc, #104]	; (8006528 <__ieee754_rem_pio2+0x410>)
 80064c0:	2200      	movs	r2, #0
 80064c2:	f7fa f891 	bl	80005e8 <__aeabi_dmul>
 80064c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80064ca:	ad04      	add	r5, sp, #16
 80064cc:	f04f 0803 	mov.w	r8, #3
 80064d0:	46a9      	mov	r9, r5
 80064d2:	2600      	movs	r6, #0
 80064d4:	2700      	movs	r7, #0
 80064d6:	4632      	mov	r2, r6
 80064d8:	463b      	mov	r3, r7
 80064da:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80064de:	46c3      	mov	fp, r8
 80064e0:	3d08      	subs	r5, #8
 80064e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80064e6:	f7fa fae7 	bl	8000ab8 <__aeabi_dcmpeq>
 80064ea:	2800      	cmp	r0, #0
 80064ec:	d1f3      	bne.n	80064d6 <__ieee754_rem_pio2+0x3be>
 80064ee:	4b0f      	ldr	r3, [pc, #60]	; (800652c <__ieee754_rem_pio2+0x414>)
 80064f0:	9301      	str	r3, [sp, #4]
 80064f2:	2302      	movs	r3, #2
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	4622      	mov	r2, r4
 80064f8:	465b      	mov	r3, fp
 80064fa:	4651      	mov	r1, sl
 80064fc:	4648      	mov	r0, r9
 80064fe:	f000 f8e3 	bl	80066c8 <__kernel_rem_pio2>
 8006502:	9b02      	ldr	r3, [sp, #8]
 8006504:	2b00      	cmp	r3, #0
 8006506:	4683      	mov	fp, r0
 8006508:	f6bf ae46 	bge.w	8006198 <__ieee754_rem_pio2+0x80>
 800650c:	e9da 2100 	ldrd	r2, r1, [sl]
 8006510:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006514:	e9ca 2300 	strd	r2, r3, [sl]
 8006518:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800651c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006520:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8006524:	e73a      	b.n	800639c <__ieee754_rem_pio2+0x284>
 8006526:	bf00      	nop
 8006528:	41700000 	.word	0x41700000
 800652c:	080079d4 	.word	0x080079d4

08006530 <__ieee754_sqrtf>:
 8006530:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006534:	4770      	bx	lr
	...

08006538 <__kernel_cos>:
 8006538:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800653c:	ec57 6b10 	vmov	r6, r7, d0
 8006540:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006544:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006548:	ed8d 1b00 	vstr	d1, [sp]
 800654c:	da07      	bge.n	800655e <__kernel_cos+0x26>
 800654e:	ee10 0a10 	vmov	r0, s0
 8006552:	4639      	mov	r1, r7
 8006554:	f7fa fae2 	bl	8000b1c <__aeabi_d2iz>
 8006558:	2800      	cmp	r0, #0
 800655a:	f000 8088 	beq.w	800666e <__kernel_cos+0x136>
 800655e:	4632      	mov	r2, r6
 8006560:	463b      	mov	r3, r7
 8006562:	4630      	mov	r0, r6
 8006564:	4639      	mov	r1, r7
 8006566:	f7fa f83f 	bl	80005e8 <__aeabi_dmul>
 800656a:	4b51      	ldr	r3, [pc, #324]	; (80066b0 <__kernel_cos+0x178>)
 800656c:	2200      	movs	r2, #0
 800656e:	4604      	mov	r4, r0
 8006570:	460d      	mov	r5, r1
 8006572:	f7fa f839 	bl	80005e8 <__aeabi_dmul>
 8006576:	a340      	add	r3, pc, #256	; (adr r3, 8006678 <__kernel_cos+0x140>)
 8006578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657c:	4682      	mov	sl, r0
 800657e:	468b      	mov	fp, r1
 8006580:	4620      	mov	r0, r4
 8006582:	4629      	mov	r1, r5
 8006584:	f7fa f830 	bl	80005e8 <__aeabi_dmul>
 8006588:	a33d      	add	r3, pc, #244	; (adr r3, 8006680 <__kernel_cos+0x148>)
 800658a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658e:	f7f9 fe75 	bl	800027c <__adddf3>
 8006592:	4622      	mov	r2, r4
 8006594:	462b      	mov	r3, r5
 8006596:	f7fa f827 	bl	80005e8 <__aeabi_dmul>
 800659a:	a33b      	add	r3, pc, #236	; (adr r3, 8006688 <__kernel_cos+0x150>)
 800659c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a0:	f7f9 fe6a 	bl	8000278 <__aeabi_dsub>
 80065a4:	4622      	mov	r2, r4
 80065a6:	462b      	mov	r3, r5
 80065a8:	f7fa f81e 	bl	80005e8 <__aeabi_dmul>
 80065ac:	a338      	add	r3, pc, #224	; (adr r3, 8006690 <__kernel_cos+0x158>)
 80065ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b2:	f7f9 fe63 	bl	800027c <__adddf3>
 80065b6:	4622      	mov	r2, r4
 80065b8:	462b      	mov	r3, r5
 80065ba:	f7fa f815 	bl	80005e8 <__aeabi_dmul>
 80065be:	a336      	add	r3, pc, #216	; (adr r3, 8006698 <__kernel_cos+0x160>)
 80065c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c4:	f7f9 fe58 	bl	8000278 <__aeabi_dsub>
 80065c8:	4622      	mov	r2, r4
 80065ca:	462b      	mov	r3, r5
 80065cc:	f7fa f80c 	bl	80005e8 <__aeabi_dmul>
 80065d0:	a333      	add	r3, pc, #204	; (adr r3, 80066a0 <__kernel_cos+0x168>)
 80065d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d6:	f7f9 fe51 	bl	800027c <__adddf3>
 80065da:	4622      	mov	r2, r4
 80065dc:	462b      	mov	r3, r5
 80065de:	f7fa f803 	bl	80005e8 <__aeabi_dmul>
 80065e2:	4622      	mov	r2, r4
 80065e4:	462b      	mov	r3, r5
 80065e6:	f7f9 ffff 	bl	80005e8 <__aeabi_dmul>
 80065ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065ee:	4604      	mov	r4, r0
 80065f0:	460d      	mov	r5, r1
 80065f2:	4630      	mov	r0, r6
 80065f4:	4639      	mov	r1, r7
 80065f6:	f7f9 fff7 	bl	80005e8 <__aeabi_dmul>
 80065fa:	460b      	mov	r3, r1
 80065fc:	4602      	mov	r2, r0
 80065fe:	4629      	mov	r1, r5
 8006600:	4620      	mov	r0, r4
 8006602:	f7f9 fe39 	bl	8000278 <__aeabi_dsub>
 8006606:	4b2b      	ldr	r3, [pc, #172]	; (80066b4 <__kernel_cos+0x17c>)
 8006608:	4598      	cmp	r8, r3
 800660a:	4606      	mov	r6, r0
 800660c:	460f      	mov	r7, r1
 800660e:	dc10      	bgt.n	8006632 <__kernel_cos+0xfa>
 8006610:	4602      	mov	r2, r0
 8006612:	460b      	mov	r3, r1
 8006614:	4650      	mov	r0, sl
 8006616:	4659      	mov	r1, fp
 8006618:	f7f9 fe2e 	bl	8000278 <__aeabi_dsub>
 800661c:	460b      	mov	r3, r1
 800661e:	4926      	ldr	r1, [pc, #152]	; (80066b8 <__kernel_cos+0x180>)
 8006620:	4602      	mov	r2, r0
 8006622:	2000      	movs	r0, #0
 8006624:	f7f9 fe28 	bl	8000278 <__aeabi_dsub>
 8006628:	ec41 0b10 	vmov	d0, r0, r1
 800662c:	b003      	add	sp, #12
 800662e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006632:	4b22      	ldr	r3, [pc, #136]	; (80066bc <__kernel_cos+0x184>)
 8006634:	4920      	ldr	r1, [pc, #128]	; (80066b8 <__kernel_cos+0x180>)
 8006636:	4598      	cmp	r8, r3
 8006638:	bfcc      	ite	gt
 800663a:	4d21      	ldrgt	r5, [pc, #132]	; (80066c0 <__kernel_cos+0x188>)
 800663c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8006640:	2400      	movs	r4, #0
 8006642:	4622      	mov	r2, r4
 8006644:	462b      	mov	r3, r5
 8006646:	2000      	movs	r0, #0
 8006648:	f7f9 fe16 	bl	8000278 <__aeabi_dsub>
 800664c:	4622      	mov	r2, r4
 800664e:	4680      	mov	r8, r0
 8006650:	4689      	mov	r9, r1
 8006652:	462b      	mov	r3, r5
 8006654:	4650      	mov	r0, sl
 8006656:	4659      	mov	r1, fp
 8006658:	f7f9 fe0e 	bl	8000278 <__aeabi_dsub>
 800665c:	4632      	mov	r2, r6
 800665e:	463b      	mov	r3, r7
 8006660:	f7f9 fe0a 	bl	8000278 <__aeabi_dsub>
 8006664:	4602      	mov	r2, r0
 8006666:	460b      	mov	r3, r1
 8006668:	4640      	mov	r0, r8
 800666a:	4649      	mov	r1, r9
 800666c:	e7da      	b.n	8006624 <__kernel_cos+0xec>
 800666e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80066a8 <__kernel_cos+0x170>
 8006672:	e7db      	b.n	800662c <__kernel_cos+0xf4>
 8006674:	f3af 8000 	nop.w
 8006678:	be8838d4 	.word	0xbe8838d4
 800667c:	bda8fae9 	.word	0xbda8fae9
 8006680:	bdb4b1c4 	.word	0xbdb4b1c4
 8006684:	3e21ee9e 	.word	0x3e21ee9e
 8006688:	809c52ad 	.word	0x809c52ad
 800668c:	3e927e4f 	.word	0x3e927e4f
 8006690:	19cb1590 	.word	0x19cb1590
 8006694:	3efa01a0 	.word	0x3efa01a0
 8006698:	16c15177 	.word	0x16c15177
 800669c:	3f56c16c 	.word	0x3f56c16c
 80066a0:	5555554c 	.word	0x5555554c
 80066a4:	3fa55555 	.word	0x3fa55555
 80066a8:	00000000 	.word	0x00000000
 80066ac:	3ff00000 	.word	0x3ff00000
 80066b0:	3fe00000 	.word	0x3fe00000
 80066b4:	3fd33332 	.word	0x3fd33332
 80066b8:	3ff00000 	.word	0x3ff00000
 80066bc:	3fe90000 	.word	0x3fe90000
 80066c0:	3fd20000 	.word	0x3fd20000
 80066c4:	00000000 	.word	0x00000000

080066c8 <__kernel_rem_pio2>:
 80066c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066cc:	ed2d 8b02 	vpush	{d8}
 80066d0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80066d4:	f112 0f14 	cmn.w	r2, #20
 80066d8:	9308      	str	r3, [sp, #32]
 80066da:	9101      	str	r1, [sp, #4]
 80066dc:	4bc4      	ldr	r3, [pc, #784]	; (80069f0 <__kernel_rem_pio2+0x328>)
 80066de:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80066e0:	900b      	str	r0, [sp, #44]	; 0x2c
 80066e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80066e6:	9302      	str	r3, [sp, #8]
 80066e8:	9b08      	ldr	r3, [sp, #32]
 80066ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80066ee:	bfa8      	it	ge
 80066f0:	1ed4      	subge	r4, r2, #3
 80066f2:	9306      	str	r3, [sp, #24]
 80066f4:	bfb2      	itee	lt
 80066f6:	2400      	movlt	r4, #0
 80066f8:	2318      	movge	r3, #24
 80066fa:	fb94 f4f3 	sdivge	r4, r4, r3
 80066fe:	f06f 0317 	mvn.w	r3, #23
 8006702:	fb04 3303 	mla	r3, r4, r3, r3
 8006706:	eb03 0a02 	add.w	sl, r3, r2
 800670a:	9b02      	ldr	r3, [sp, #8]
 800670c:	9a06      	ldr	r2, [sp, #24]
 800670e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80069e0 <__kernel_rem_pio2+0x318>
 8006712:	eb03 0802 	add.w	r8, r3, r2
 8006716:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006718:	1aa7      	subs	r7, r4, r2
 800671a:	ae22      	add	r6, sp, #136	; 0x88
 800671c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006720:	2500      	movs	r5, #0
 8006722:	4545      	cmp	r5, r8
 8006724:	dd13      	ble.n	800674e <__kernel_rem_pio2+0x86>
 8006726:	9b08      	ldr	r3, [sp, #32]
 8006728:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80069e0 <__kernel_rem_pio2+0x318>
 800672c:	aa22      	add	r2, sp, #136	; 0x88
 800672e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006732:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8006736:	f04f 0800 	mov.w	r8, #0
 800673a:	9b02      	ldr	r3, [sp, #8]
 800673c:	4598      	cmp	r8, r3
 800673e:	dc2f      	bgt.n	80067a0 <__kernel_rem_pio2+0xd8>
 8006740:	ed8d 8b04 	vstr	d8, [sp, #16]
 8006744:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8006748:	462f      	mov	r7, r5
 800674a:	2600      	movs	r6, #0
 800674c:	e01b      	b.n	8006786 <__kernel_rem_pio2+0xbe>
 800674e:	42ef      	cmn	r7, r5
 8006750:	d407      	bmi.n	8006762 <__kernel_rem_pio2+0x9a>
 8006752:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006756:	f7f9 fedd 	bl	8000514 <__aeabi_i2d>
 800675a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800675e:	3501      	adds	r5, #1
 8006760:	e7df      	b.n	8006722 <__kernel_rem_pio2+0x5a>
 8006762:	ec51 0b18 	vmov	r0, r1, d8
 8006766:	e7f8      	b.n	800675a <__kernel_rem_pio2+0x92>
 8006768:	e9d7 2300 	ldrd	r2, r3, [r7]
 800676c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006770:	f7f9 ff3a 	bl	80005e8 <__aeabi_dmul>
 8006774:	4602      	mov	r2, r0
 8006776:	460b      	mov	r3, r1
 8006778:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800677c:	f7f9 fd7e 	bl	800027c <__adddf3>
 8006780:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006784:	3601      	adds	r6, #1
 8006786:	9b06      	ldr	r3, [sp, #24]
 8006788:	429e      	cmp	r6, r3
 800678a:	f1a7 0708 	sub.w	r7, r7, #8
 800678e:	ddeb      	ble.n	8006768 <__kernel_rem_pio2+0xa0>
 8006790:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006794:	f108 0801 	add.w	r8, r8, #1
 8006798:	ecab 7b02 	vstmia	fp!, {d7}
 800679c:	3508      	adds	r5, #8
 800679e:	e7cc      	b.n	800673a <__kernel_rem_pio2+0x72>
 80067a0:	9b02      	ldr	r3, [sp, #8]
 80067a2:	aa0e      	add	r2, sp, #56	; 0x38
 80067a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80067a8:	930d      	str	r3, [sp, #52]	; 0x34
 80067aa:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80067ac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80067b0:	9c02      	ldr	r4, [sp, #8]
 80067b2:	930c      	str	r3, [sp, #48]	; 0x30
 80067b4:	00e3      	lsls	r3, r4, #3
 80067b6:	930a      	str	r3, [sp, #40]	; 0x28
 80067b8:	ab9a      	add	r3, sp, #616	; 0x268
 80067ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80067be:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80067c2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80067c6:	ab72      	add	r3, sp, #456	; 0x1c8
 80067c8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80067cc:	46c3      	mov	fp, r8
 80067ce:	46a1      	mov	r9, r4
 80067d0:	f1b9 0f00 	cmp.w	r9, #0
 80067d4:	f1a5 0508 	sub.w	r5, r5, #8
 80067d8:	dc77      	bgt.n	80068ca <__kernel_rem_pio2+0x202>
 80067da:	ec47 6b10 	vmov	d0, r6, r7
 80067de:	4650      	mov	r0, sl
 80067e0:	f000 fc0a 	bl	8006ff8 <scalbn>
 80067e4:	ec57 6b10 	vmov	r6, r7, d0
 80067e8:	2200      	movs	r2, #0
 80067ea:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80067ee:	ee10 0a10 	vmov	r0, s0
 80067f2:	4639      	mov	r1, r7
 80067f4:	f7f9 fef8 	bl	80005e8 <__aeabi_dmul>
 80067f8:	ec41 0b10 	vmov	d0, r0, r1
 80067fc:	f000 fb7c 	bl	8006ef8 <floor>
 8006800:	4b7c      	ldr	r3, [pc, #496]	; (80069f4 <__kernel_rem_pio2+0x32c>)
 8006802:	ec51 0b10 	vmov	r0, r1, d0
 8006806:	2200      	movs	r2, #0
 8006808:	f7f9 feee 	bl	80005e8 <__aeabi_dmul>
 800680c:	4602      	mov	r2, r0
 800680e:	460b      	mov	r3, r1
 8006810:	4630      	mov	r0, r6
 8006812:	4639      	mov	r1, r7
 8006814:	f7f9 fd30 	bl	8000278 <__aeabi_dsub>
 8006818:	460f      	mov	r7, r1
 800681a:	4606      	mov	r6, r0
 800681c:	f7fa f97e 	bl	8000b1c <__aeabi_d2iz>
 8006820:	9004      	str	r0, [sp, #16]
 8006822:	f7f9 fe77 	bl	8000514 <__aeabi_i2d>
 8006826:	4602      	mov	r2, r0
 8006828:	460b      	mov	r3, r1
 800682a:	4630      	mov	r0, r6
 800682c:	4639      	mov	r1, r7
 800682e:	f7f9 fd23 	bl	8000278 <__aeabi_dsub>
 8006832:	f1ba 0f00 	cmp.w	sl, #0
 8006836:	4606      	mov	r6, r0
 8006838:	460f      	mov	r7, r1
 800683a:	dd6d      	ble.n	8006918 <__kernel_rem_pio2+0x250>
 800683c:	1e62      	subs	r2, r4, #1
 800683e:	ab0e      	add	r3, sp, #56	; 0x38
 8006840:	9d04      	ldr	r5, [sp, #16]
 8006842:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006846:	f1ca 0118 	rsb	r1, sl, #24
 800684a:	fa40 f301 	asr.w	r3, r0, r1
 800684e:	441d      	add	r5, r3
 8006850:	408b      	lsls	r3, r1
 8006852:	1ac0      	subs	r0, r0, r3
 8006854:	ab0e      	add	r3, sp, #56	; 0x38
 8006856:	9504      	str	r5, [sp, #16]
 8006858:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800685c:	f1ca 0317 	rsb	r3, sl, #23
 8006860:	fa40 fb03 	asr.w	fp, r0, r3
 8006864:	f1bb 0f00 	cmp.w	fp, #0
 8006868:	dd65      	ble.n	8006936 <__kernel_rem_pio2+0x26e>
 800686a:	9b04      	ldr	r3, [sp, #16]
 800686c:	2200      	movs	r2, #0
 800686e:	3301      	adds	r3, #1
 8006870:	9304      	str	r3, [sp, #16]
 8006872:	4615      	mov	r5, r2
 8006874:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006878:	4294      	cmp	r4, r2
 800687a:	f300 809c 	bgt.w	80069b6 <__kernel_rem_pio2+0x2ee>
 800687e:	f1ba 0f00 	cmp.w	sl, #0
 8006882:	dd07      	ble.n	8006894 <__kernel_rem_pio2+0x1cc>
 8006884:	f1ba 0f01 	cmp.w	sl, #1
 8006888:	f000 80c0 	beq.w	8006a0c <__kernel_rem_pio2+0x344>
 800688c:	f1ba 0f02 	cmp.w	sl, #2
 8006890:	f000 80c6 	beq.w	8006a20 <__kernel_rem_pio2+0x358>
 8006894:	f1bb 0f02 	cmp.w	fp, #2
 8006898:	d14d      	bne.n	8006936 <__kernel_rem_pio2+0x26e>
 800689a:	4632      	mov	r2, r6
 800689c:	463b      	mov	r3, r7
 800689e:	4956      	ldr	r1, [pc, #344]	; (80069f8 <__kernel_rem_pio2+0x330>)
 80068a0:	2000      	movs	r0, #0
 80068a2:	f7f9 fce9 	bl	8000278 <__aeabi_dsub>
 80068a6:	4606      	mov	r6, r0
 80068a8:	460f      	mov	r7, r1
 80068aa:	2d00      	cmp	r5, #0
 80068ac:	d043      	beq.n	8006936 <__kernel_rem_pio2+0x26e>
 80068ae:	4650      	mov	r0, sl
 80068b0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80069e8 <__kernel_rem_pio2+0x320>
 80068b4:	f000 fba0 	bl	8006ff8 <scalbn>
 80068b8:	4630      	mov	r0, r6
 80068ba:	4639      	mov	r1, r7
 80068bc:	ec53 2b10 	vmov	r2, r3, d0
 80068c0:	f7f9 fcda 	bl	8000278 <__aeabi_dsub>
 80068c4:	4606      	mov	r6, r0
 80068c6:	460f      	mov	r7, r1
 80068c8:	e035      	b.n	8006936 <__kernel_rem_pio2+0x26e>
 80068ca:	4b4c      	ldr	r3, [pc, #304]	; (80069fc <__kernel_rem_pio2+0x334>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	4630      	mov	r0, r6
 80068d0:	4639      	mov	r1, r7
 80068d2:	f7f9 fe89 	bl	80005e8 <__aeabi_dmul>
 80068d6:	f7fa f921 	bl	8000b1c <__aeabi_d2iz>
 80068da:	f7f9 fe1b 	bl	8000514 <__aeabi_i2d>
 80068de:	4602      	mov	r2, r0
 80068e0:	460b      	mov	r3, r1
 80068e2:	ec43 2b18 	vmov	d8, r2, r3
 80068e6:	4b46      	ldr	r3, [pc, #280]	; (8006a00 <__kernel_rem_pio2+0x338>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	f7f9 fe7d 	bl	80005e8 <__aeabi_dmul>
 80068ee:	4602      	mov	r2, r0
 80068f0:	460b      	mov	r3, r1
 80068f2:	4630      	mov	r0, r6
 80068f4:	4639      	mov	r1, r7
 80068f6:	f7f9 fcbf 	bl	8000278 <__aeabi_dsub>
 80068fa:	f7fa f90f 	bl	8000b1c <__aeabi_d2iz>
 80068fe:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006902:	f84b 0b04 	str.w	r0, [fp], #4
 8006906:	ec51 0b18 	vmov	r0, r1, d8
 800690a:	f7f9 fcb7 	bl	800027c <__adddf3>
 800690e:	f109 39ff 	add.w	r9, r9, #4294967295
 8006912:	4606      	mov	r6, r0
 8006914:	460f      	mov	r7, r1
 8006916:	e75b      	b.n	80067d0 <__kernel_rem_pio2+0x108>
 8006918:	d106      	bne.n	8006928 <__kernel_rem_pio2+0x260>
 800691a:	1e63      	subs	r3, r4, #1
 800691c:	aa0e      	add	r2, sp, #56	; 0x38
 800691e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006922:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8006926:	e79d      	b.n	8006864 <__kernel_rem_pio2+0x19c>
 8006928:	4b36      	ldr	r3, [pc, #216]	; (8006a04 <__kernel_rem_pio2+0x33c>)
 800692a:	2200      	movs	r2, #0
 800692c:	f7fa f8e2 	bl	8000af4 <__aeabi_dcmpge>
 8006930:	2800      	cmp	r0, #0
 8006932:	d13d      	bne.n	80069b0 <__kernel_rem_pio2+0x2e8>
 8006934:	4683      	mov	fp, r0
 8006936:	2200      	movs	r2, #0
 8006938:	2300      	movs	r3, #0
 800693a:	4630      	mov	r0, r6
 800693c:	4639      	mov	r1, r7
 800693e:	f7fa f8bb 	bl	8000ab8 <__aeabi_dcmpeq>
 8006942:	2800      	cmp	r0, #0
 8006944:	f000 80c0 	beq.w	8006ac8 <__kernel_rem_pio2+0x400>
 8006948:	1e65      	subs	r5, r4, #1
 800694a:	462b      	mov	r3, r5
 800694c:	2200      	movs	r2, #0
 800694e:	9902      	ldr	r1, [sp, #8]
 8006950:	428b      	cmp	r3, r1
 8006952:	da6c      	bge.n	8006a2e <__kernel_rem_pio2+0x366>
 8006954:	2a00      	cmp	r2, #0
 8006956:	f000 8089 	beq.w	8006a6c <__kernel_rem_pio2+0x3a4>
 800695a:	ab0e      	add	r3, sp, #56	; 0x38
 800695c:	f1aa 0a18 	sub.w	sl, sl, #24
 8006960:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006964:	2b00      	cmp	r3, #0
 8006966:	f000 80ad 	beq.w	8006ac4 <__kernel_rem_pio2+0x3fc>
 800696a:	4650      	mov	r0, sl
 800696c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80069e8 <__kernel_rem_pio2+0x320>
 8006970:	f000 fb42 	bl	8006ff8 <scalbn>
 8006974:	ab9a      	add	r3, sp, #616	; 0x268
 8006976:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800697a:	ec57 6b10 	vmov	r6, r7, d0
 800697e:	00ec      	lsls	r4, r5, #3
 8006980:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8006984:	46aa      	mov	sl, r5
 8006986:	f1ba 0f00 	cmp.w	sl, #0
 800698a:	f280 80d6 	bge.w	8006b3a <__kernel_rem_pio2+0x472>
 800698e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80069e0 <__kernel_rem_pio2+0x318>
 8006992:	462e      	mov	r6, r5
 8006994:	2e00      	cmp	r6, #0
 8006996:	f2c0 8104 	blt.w	8006ba2 <__kernel_rem_pio2+0x4da>
 800699a:	ab72      	add	r3, sp, #456	; 0x1c8
 800699c:	ed8d 8b06 	vstr	d8, [sp, #24]
 80069a0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8006a08 <__kernel_rem_pio2+0x340>
 80069a4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80069a8:	f04f 0800 	mov.w	r8, #0
 80069ac:	1baf      	subs	r7, r5, r6
 80069ae:	e0ea      	b.n	8006b86 <__kernel_rem_pio2+0x4be>
 80069b0:	f04f 0b02 	mov.w	fp, #2
 80069b4:	e759      	b.n	800686a <__kernel_rem_pio2+0x1a2>
 80069b6:	f8d8 3000 	ldr.w	r3, [r8]
 80069ba:	b955      	cbnz	r5, 80069d2 <__kernel_rem_pio2+0x30a>
 80069bc:	b123      	cbz	r3, 80069c8 <__kernel_rem_pio2+0x300>
 80069be:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80069c2:	f8c8 3000 	str.w	r3, [r8]
 80069c6:	2301      	movs	r3, #1
 80069c8:	3201      	adds	r2, #1
 80069ca:	f108 0804 	add.w	r8, r8, #4
 80069ce:	461d      	mov	r5, r3
 80069d0:	e752      	b.n	8006878 <__kernel_rem_pio2+0x1b0>
 80069d2:	1acb      	subs	r3, r1, r3
 80069d4:	f8c8 3000 	str.w	r3, [r8]
 80069d8:	462b      	mov	r3, r5
 80069da:	e7f5      	b.n	80069c8 <__kernel_rem_pio2+0x300>
 80069dc:	f3af 8000 	nop.w
	...
 80069ec:	3ff00000 	.word	0x3ff00000
 80069f0:	08007b20 	.word	0x08007b20
 80069f4:	40200000 	.word	0x40200000
 80069f8:	3ff00000 	.word	0x3ff00000
 80069fc:	3e700000 	.word	0x3e700000
 8006a00:	41700000 	.word	0x41700000
 8006a04:	3fe00000 	.word	0x3fe00000
 8006a08:	08007ae0 	.word	0x08007ae0
 8006a0c:	1e62      	subs	r2, r4, #1
 8006a0e:	ab0e      	add	r3, sp, #56	; 0x38
 8006a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a14:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006a18:	a90e      	add	r1, sp, #56	; 0x38
 8006a1a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006a1e:	e739      	b.n	8006894 <__kernel_rem_pio2+0x1cc>
 8006a20:	1e62      	subs	r2, r4, #1
 8006a22:	ab0e      	add	r3, sp, #56	; 0x38
 8006a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a28:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006a2c:	e7f4      	b.n	8006a18 <__kernel_rem_pio2+0x350>
 8006a2e:	a90e      	add	r1, sp, #56	; 0x38
 8006a30:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006a34:	3b01      	subs	r3, #1
 8006a36:	430a      	orrs	r2, r1
 8006a38:	e789      	b.n	800694e <__kernel_rem_pio2+0x286>
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006a40:	2900      	cmp	r1, #0
 8006a42:	d0fa      	beq.n	8006a3a <__kernel_rem_pio2+0x372>
 8006a44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a46:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8006a4a:	446a      	add	r2, sp
 8006a4c:	3a98      	subs	r2, #152	; 0x98
 8006a4e:	920a      	str	r2, [sp, #40]	; 0x28
 8006a50:	9a08      	ldr	r2, [sp, #32]
 8006a52:	18e3      	adds	r3, r4, r3
 8006a54:	18a5      	adds	r5, r4, r2
 8006a56:	aa22      	add	r2, sp, #136	; 0x88
 8006a58:	f104 0801 	add.w	r8, r4, #1
 8006a5c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8006a60:	9304      	str	r3, [sp, #16]
 8006a62:	9b04      	ldr	r3, [sp, #16]
 8006a64:	4543      	cmp	r3, r8
 8006a66:	da04      	bge.n	8006a72 <__kernel_rem_pio2+0x3aa>
 8006a68:	461c      	mov	r4, r3
 8006a6a:	e6a3      	b.n	80067b4 <__kernel_rem_pio2+0xec>
 8006a6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e7e4      	b.n	8006a3c <__kernel_rem_pio2+0x374>
 8006a72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a74:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006a78:	f7f9 fd4c 	bl	8000514 <__aeabi_i2d>
 8006a7c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8006a80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a82:	46ab      	mov	fp, r5
 8006a84:	461c      	mov	r4, r3
 8006a86:	f04f 0900 	mov.w	r9, #0
 8006a8a:	2600      	movs	r6, #0
 8006a8c:	2700      	movs	r7, #0
 8006a8e:	9b06      	ldr	r3, [sp, #24]
 8006a90:	4599      	cmp	r9, r3
 8006a92:	dd06      	ble.n	8006aa2 <__kernel_rem_pio2+0x3da>
 8006a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a96:	e8e3 6702 	strd	r6, r7, [r3], #8
 8006a9a:	f108 0801 	add.w	r8, r8, #1
 8006a9e:	930a      	str	r3, [sp, #40]	; 0x28
 8006aa0:	e7df      	b.n	8006a62 <__kernel_rem_pio2+0x39a>
 8006aa2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006aa6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006aaa:	f7f9 fd9d 	bl	80005e8 <__aeabi_dmul>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	4630      	mov	r0, r6
 8006ab4:	4639      	mov	r1, r7
 8006ab6:	f7f9 fbe1 	bl	800027c <__adddf3>
 8006aba:	f109 0901 	add.w	r9, r9, #1
 8006abe:	4606      	mov	r6, r0
 8006ac0:	460f      	mov	r7, r1
 8006ac2:	e7e4      	b.n	8006a8e <__kernel_rem_pio2+0x3c6>
 8006ac4:	3d01      	subs	r5, #1
 8006ac6:	e748      	b.n	800695a <__kernel_rem_pio2+0x292>
 8006ac8:	ec47 6b10 	vmov	d0, r6, r7
 8006acc:	f1ca 0000 	rsb	r0, sl, #0
 8006ad0:	f000 fa92 	bl	8006ff8 <scalbn>
 8006ad4:	ec57 6b10 	vmov	r6, r7, d0
 8006ad8:	4ba0      	ldr	r3, [pc, #640]	; (8006d5c <__kernel_rem_pio2+0x694>)
 8006ada:	ee10 0a10 	vmov	r0, s0
 8006ade:	2200      	movs	r2, #0
 8006ae0:	4639      	mov	r1, r7
 8006ae2:	f7fa f807 	bl	8000af4 <__aeabi_dcmpge>
 8006ae6:	b1f8      	cbz	r0, 8006b28 <__kernel_rem_pio2+0x460>
 8006ae8:	4b9d      	ldr	r3, [pc, #628]	; (8006d60 <__kernel_rem_pio2+0x698>)
 8006aea:	2200      	movs	r2, #0
 8006aec:	4630      	mov	r0, r6
 8006aee:	4639      	mov	r1, r7
 8006af0:	f7f9 fd7a 	bl	80005e8 <__aeabi_dmul>
 8006af4:	f7fa f812 	bl	8000b1c <__aeabi_d2iz>
 8006af8:	4680      	mov	r8, r0
 8006afa:	f7f9 fd0b 	bl	8000514 <__aeabi_i2d>
 8006afe:	4b97      	ldr	r3, [pc, #604]	; (8006d5c <__kernel_rem_pio2+0x694>)
 8006b00:	2200      	movs	r2, #0
 8006b02:	f7f9 fd71 	bl	80005e8 <__aeabi_dmul>
 8006b06:	460b      	mov	r3, r1
 8006b08:	4602      	mov	r2, r0
 8006b0a:	4639      	mov	r1, r7
 8006b0c:	4630      	mov	r0, r6
 8006b0e:	f7f9 fbb3 	bl	8000278 <__aeabi_dsub>
 8006b12:	f7fa f803 	bl	8000b1c <__aeabi_d2iz>
 8006b16:	1c65      	adds	r5, r4, #1
 8006b18:	ab0e      	add	r3, sp, #56	; 0x38
 8006b1a:	f10a 0a18 	add.w	sl, sl, #24
 8006b1e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006b22:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006b26:	e720      	b.n	800696a <__kernel_rem_pio2+0x2a2>
 8006b28:	4630      	mov	r0, r6
 8006b2a:	4639      	mov	r1, r7
 8006b2c:	f7f9 fff6 	bl	8000b1c <__aeabi_d2iz>
 8006b30:	ab0e      	add	r3, sp, #56	; 0x38
 8006b32:	4625      	mov	r5, r4
 8006b34:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006b38:	e717      	b.n	800696a <__kernel_rem_pio2+0x2a2>
 8006b3a:	ab0e      	add	r3, sp, #56	; 0x38
 8006b3c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8006b40:	f7f9 fce8 	bl	8000514 <__aeabi_i2d>
 8006b44:	4632      	mov	r2, r6
 8006b46:	463b      	mov	r3, r7
 8006b48:	f7f9 fd4e 	bl	80005e8 <__aeabi_dmul>
 8006b4c:	4b84      	ldr	r3, [pc, #528]	; (8006d60 <__kernel_rem_pio2+0x698>)
 8006b4e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8006b52:	2200      	movs	r2, #0
 8006b54:	4630      	mov	r0, r6
 8006b56:	4639      	mov	r1, r7
 8006b58:	f7f9 fd46 	bl	80005e8 <__aeabi_dmul>
 8006b5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b60:	4606      	mov	r6, r0
 8006b62:	460f      	mov	r7, r1
 8006b64:	e70f      	b.n	8006986 <__kernel_rem_pio2+0x2be>
 8006b66:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8006b6a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8006b6e:	f7f9 fd3b 	bl	80005e8 <__aeabi_dmul>
 8006b72:	4602      	mov	r2, r0
 8006b74:	460b      	mov	r3, r1
 8006b76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b7a:	f7f9 fb7f 	bl	800027c <__adddf3>
 8006b7e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b82:	f108 0801 	add.w	r8, r8, #1
 8006b86:	9b02      	ldr	r3, [sp, #8]
 8006b88:	4598      	cmp	r8, r3
 8006b8a:	dc01      	bgt.n	8006b90 <__kernel_rem_pio2+0x4c8>
 8006b8c:	45b8      	cmp	r8, r7
 8006b8e:	ddea      	ble.n	8006b66 <__kernel_rem_pio2+0x49e>
 8006b90:	ed9d 7b06 	vldr	d7, [sp, #24]
 8006b94:	ab4a      	add	r3, sp, #296	; 0x128
 8006b96:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006b9a:	ed87 7b00 	vstr	d7, [r7]
 8006b9e:	3e01      	subs	r6, #1
 8006ba0:	e6f8      	b.n	8006994 <__kernel_rem_pio2+0x2cc>
 8006ba2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	dc0b      	bgt.n	8006bc0 <__kernel_rem_pio2+0x4f8>
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	dc35      	bgt.n	8006c18 <__kernel_rem_pio2+0x550>
 8006bac:	d059      	beq.n	8006c62 <__kernel_rem_pio2+0x59a>
 8006bae:	9b04      	ldr	r3, [sp, #16]
 8006bb0:	f003 0007 	and.w	r0, r3, #7
 8006bb4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8006bb8:	ecbd 8b02 	vpop	{d8}
 8006bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bc0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8006bc2:	2b03      	cmp	r3, #3
 8006bc4:	d1f3      	bne.n	8006bae <__kernel_rem_pio2+0x4e6>
 8006bc6:	ab4a      	add	r3, sp, #296	; 0x128
 8006bc8:	4423      	add	r3, r4
 8006bca:	9306      	str	r3, [sp, #24]
 8006bcc:	461c      	mov	r4, r3
 8006bce:	469a      	mov	sl, r3
 8006bd0:	9502      	str	r5, [sp, #8]
 8006bd2:	9b02      	ldr	r3, [sp, #8]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f1aa 0a08 	sub.w	sl, sl, #8
 8006bda:	dc6b      	bgt.n	8006cb4 <__kernel_rem_pio2+0x5ec>
 8006bdc:	46aa      	mov	sl, r5
 8006bde:	f1ba 0f01 	cmp.w	sl, #1
 8006be2:	f1a4 0408 	sub.w	r4, r4, #8
 8006be6:	f300 8085 	bgt.w	8006cf4 <__kernel_rem_pio2+0x62c>
 8006bea:	9c06      	ldr	r4, [sp, #24]
 8006bec:	2000      	movs	r0, #0
 8006bee:	3408      	adds	r4, #8
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	2d01      	cmp	r5, #1
 8006bf4:	f300 809d 	bgt.w	8006d32 <__kernel_rem_pio2+0x66a>
 8006bf8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8006bfc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8006c00:	f1bb 0f00 	cmp.w	fp, #0
 8006c04:	f040 809b 	bne.w	8006d3e <__kernel_rem_pio2+0x676>
 8006c08:	9b01      	ldr	r3, [sp, #4]
 8006c0a:	e9c3 5600 	strd	r5, r6, [r3]
 8006c0e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8006c12:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006c16:	e7ca      	b.n	8006bae <__kernel_rem_pio2+0x4e6>
 8006c18:	3408      	adds	r4, #8
 8006c1a:	ab4a      	add	r3, sp, #296	; 0x128
 8006c1c:	441c      	add	r4, r3
 8006c1e:	462e      	mov	r6, r5
 8006c20:	2000      	movs	r0, #0
 8006c22:	2100      	movs	r1, #0
 8006c24:	2e00      	cmp	r6, #0
 8006c26:	da36      	bge.n	8006c96 <__kernel_rem_pio2+0x5ce>
 8006c28:	f1bb 0f00 	cmp.w	fp, #0
 8006c2c:	d039      	beq.n	8006ca2 <__kernel_rem_pio2+0x5da>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c34:	9c01      	ldr	r4, [sp, #4]
 8006c36:	e9c4 2300 	strd	r2, r3, [r4]
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8006c42:	f7f9 fb19 	bl	8000278 <__aeabi_dsub>
 8006c46:	ae4c      	add	r6, sp, #304	; 0x130
 8006c48:	2401      	movs	r4, #1
 8006c4a:	42a5      	cmp	r5, r4
 8006c4c:	da2c      	bge.n	8006ca8 <__kernel_rem_pio2+0x5e0>
 8006c4e:	f1bb 0f00 	cmp.w	fp, #0
 8006c52:	d002      	beq.n	8006c5a <__kernel_rem_pio2+0x592>
 8006c54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c58:	4619      	mov	r1, r3
 8006c5a:	9b01      	ldr	r3, [sp, #4]
 8006c5c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006c60:	e7a5      	b.n	8006bae <__kernel_rem_pio2+0x4e6>
 8006c62:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8006c66:	eb0d 0403 	add.w	r4, sp, r3
 8006c6a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8006c6e:	2000      	movs	r0, #0
 8006c70:	2100      	movs	r1, #0
 8006c72:	2d00      	cmp	r5, #0
 8006c74:	da09      	bge.n	8006c8a <__kernel_rem_pio2+0x5c2>
 8006c76:	f1bb 0f00 	cmp.w	fp, #0
 8006c7a:	d002      	beq.n	8006c82 <__kernel_rem_pio2+0x5ba>
 8006c7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c80:	4619      	mov	r1, r3
 8006c82:	9b01      	ldr	r3, [sp, #4]
 8006c84:	e9c3 0100 	strd	r0, r1, [r3]
 8006c88:	e791      	b.n	8006bae <__kernel_rem_pio2+0x4e6>
 8006c8a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006c8e:	f7f9 faf5 	bl	800027c <__adddf3>
 8006c92:	3d01      	subs	r5, #1
 8006c94:	e7ed      	b.n	8006c72 <__kernel_rem_pio2+0x5aa>
 8006c96:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006c9a:	f7f9 faef 	bl	800027c <__adddf3>
 8006c9e:	3e01      	subs	r6, #1
 8006ca0:	e7c0      	b.n	8006c24 <__kernel_rem_pio2+0x55c>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	e7c5      	b.n	8006c34 <__kernel_rem_pio2+0x56c>
 8006ca8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8006cac:	f7f9 fae6 	bl	800027c <__adddf3>
 8006cb0:	3401      	adds	r4, #1
 8006cb2:	e7ca      	b.n	8006c4a <__kernel_rem_pio2+0x582>
 8006cb4:	e9da 8900 	ldrd	r8, r9, [sl]
 8006cb8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8006cbc:	9b02      	ldr	r3, [sp, #8]
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	9302      	str	r3, [sp, #8]
 8006cc2:	4632      	mov	r2, r6
 8006cc4:	463b      	mov	r3, r7
 8006cc6:	4640      	mov	r0, r8
 8006cc8:	4649      	mov	r1, r9
 8006cca:	f7f9 fad7 	bl	800027c <__adddf3>
 8006cce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	4640      	mov	r0, r8
 8006cd8:	4649      	mov	r1, r9
 8006cda:	f7f9 facd 	bl	8000278 <__aeabi_dsub>
 8006cde:	4632      	mov	r2, r6
 8006ce0:	463b      	mov	r3, r7
 8006ce2:	f7f9 facb 	bl	800027c <__adddf3>
 8006ce6:	ed9d 7b08 	vldr	d7, [sp, #32]
 8006cea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006cee:	ed8a 7b00 	vstr	d7, [sl]
 8006cf2:	e76e      	b.n	8006bd2 <__kernel_rem_pio2+0x50a>
 8006cf4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006cf8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8006cfc:	4640      	mov	r0, r8
 8006cfe:	4632      	mov	r2, r6
 8006d00:	463b      	mov	r3, r7
 8006d02:	4649      	mov	r1, r9
 8006d04:	f7f9 faba 	bl	800027c <__adddf3>
 8006d08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	460b      	mov	r3, r1
 8006d10:	4640      	mov	r0, r8
 8006d12:	4649      	mov	r1, r9
 8006d14:	f7f9 fab0 	bl	8000278 <__aeabi_dsub>
 8006d18:	4632      	mov	r2, r6
 8006d1a:	463b      	mov	r3, r7
 8006d1c:	f7f9 faae 	bl	800027c <__adddf3>
 8006d20:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006d24:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006d28:	ed84 7b00 	vstr	d7, [r4]
 8006d2c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d30:	e755      	b.n	8006bde <__kernel_rem_pio2+0x516>
 8006d32:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006d36:	f7f9 faa1 	bl	800027c <__adddf3>
 8006d3a:	3d01      	subs	r5, #1
 8006d3c:	e759      	b.n	8006bf2 <__kernel_rem_pio2+0x52a>
 8006d3e:	9b01      	ldr	r3, [sp, #4]
 8006d40:	9a01      	ldr	r2, [sp, #4]
 8006d42:	601d      	str	r5, [r3, #0]
 8006d44:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8006d48:	605c      	str	r4, [r3, #4]
 8006d4a:	609f      	str	r7, [r3, #8]
 8006d4c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8006d50:	60d3      	str	r3, [r2, #12]
 8006d52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d56:	6110      	str	r0, [r2, #16]
 8006d58:	6153      	str	r3, [r2, #20]
 8006d5a:	e728      	b.n	8006bae <__kernel_rem_pio2+0x4e6>
 8006d5c:	41700000 	.word	0x41700000
 8006d60:	3e700000 	.word	0x3e700000
 8006d64:	00000000 	.word	0x00000000

08006d68 <__kernel_sin>:
 8006d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d6c:	ed2d 8b04 	vpush	{d8-d9}
 8006d70:	eeb0 8a41 	vmov.f32	s16, s2
 8006d74:	eef0 8a61 	vmov.f32	s17, s3
 8006d78:	ec55 4b10 	vmov	r4, r5, d0
 8006d7c:	b083      	sub	sp, #12
 8006d7e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006d82:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006d86:	9001      	str	r0, [sp, #4]
 8006d88:	da06      	bge.n	8006d98 <__kernel_sin+0x30>
 8006d8a:	ee10 0a10 	vmov	r0, s0
 8006d8e:	4629      	mov	r1, r5
 8006d90:	f7f9 fec4 	bl	8000b1c <__aeabi_d2iz>
 8006d94:	2800      	cmp	r0, #0
 8006d96:	d051      	beq.n	8006e3c <__kernel_sin+0xd4>
 8006d98:	4622      	mov	r2, r4
 8006d9a:	462b      	mov	r3, r5
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	4629      	mov	r1, r5
 8006da0:	f7f9 fc22 	bl	80005e8 <__aeabi_dmul>
 8006da4:	4682      	mov	sl, r0
 8006da6:	468b      	mov	fp, r1
 8006da8:	4602      	mov	r2, r0
 8006daa:	460b      	mov	r3, r1
 8006dac:	4620      	mov	r0, r4
 8006dae:	4629      	mov	r1, r5
 8006db0:	f7f9 fc1a 	bl	80005e8 <__aeabi_dmul>
 8006db4:	a341      	add	r3, pc, #260	; (adr r3, 8006ebc <__kernel_sin+0x154>)
 8006db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dba:	4680      	mov	r8, r0
 8006dbc:	4689      	mov	r9, r1
 8006dbe:	4650      	mov	r0, sl
 8006dc0:	4659      	mov	r1, fp
 8006dc2:	f7f9 fc11 	bl	80005e8 <__aeabi_dmul>
 8006dc6:	a33f      	add	r3, pc, #252	; (adr r3, 8006ec4 <__kernel_sin+0x15c>)
 8006dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dcc:	f7f9 fa54 	bl	8000278 <__aeabi_dsub>
 8006dd0:	4652      	mov	r2, sl
 8006dd2:	465b      	mov	r3, fp
 8006dd4:	f7f9 fc08 	bl	80005e8 <__aeabi_dmul>
 8006dd8:	a33c      	add	r3, pc, #240	; (adr r3, 8006ecc <__kernel_sin+0x164>)
 8006dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dde:	f7f9 fa4d 	bl	800027c <__adddf3>
 8006de2:	4652      	mov	r2, sl
 8006de4:	465b      	mov	r3, fp
 8006de6:	f7f9 fbff 	bl	80005e8 <__aeabi_dmul>
 8006dea:	a33a      	add	r3, pc, #232	; (adr r3, 8006ed4 <__kernel_sin+0x16c>)
 8006dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df0:	f7f9 fa42 	bl	8000278 <__aeabi_dsub>
 8006df4:	4652      	mov	r2, sl
 8006df6:	465b      	mov	r3, fp
 8006df8:	f7f9 fbf6 	bl	80005e8 <__aeabi_dmul>
 8006dfc:	a337      	add	r3, pc, #220	; (adr r3, 8006edc <__kernel_sin+0x174>)
 8006dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e02:	f7f9 fa3b 	bl	800027c <__adddf3>
 8006e06:	9b01      	ldr	r3, [sp, #4]
 8006e08:	4606      	mov	r6, r0
 8006e0a:	460f      	mov	r7, r1
 8006e0c:	b9eb      	cbnz	r3, 8006e4a <__kernel_sin+0xe2>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	460b      	mov	r3, r1
 8006e12:	4650      	mov	r0, sl
 8006e14:	4659      	mov	r1, fp
 8006e16:	f7f9 fbe7 	bl	80005e8 <__aeabi_dmul>
 8006e1a:	a325      	add	r3, pc, #148	; (adr r3, 8006eb0 <__kernel_sin+0x148>)
 8006e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e20:	f7f9 fa2a 	bl	8000278 <__aeabi_dsub>
 8006e24:	4642      	mov	r2, r8
 8006e26:	464b      	mov	r3, r9
 8006e28:	f7f9 fbde 	bl	80005e8 <__aeabi_dmul>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	460b      	mov	r3, r1
 8006e30:	4620      	mov	r0, r4
 8006e32:	4629      	mov	r1, r5
 8006e34:	f7f9 fa22 	bl	800027c <__adddf3>
 8006e38:	4604      	mov	r4, r0
 8006e3a:	460d      	mov	r5, r1
 8006e3c:	ec45 4b10 	vmov	d0, r4, r5
 8006e40:	b003      	add	sp, #12
 8006e42:	ecbd 8b04 	vpop	{d8-d9}
 8006e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e4a:	4b1b      	ldr	r3, [pc, #108]	; (8006eb8 <__kernel_sin+0x150>)
 8006e4c:	ec51 0b18 	vmov	r0, r1, d8
 8006e50:	2200      	movs	r2, #0
 8006e52:	f7f9 fbc9 	bl	80005e8 <__aeabi_dmul>
 8006e56:	4632      	mov	r2, r6
 8006e58:	ec41 0b19 	vmov	d9, r0, r1
 8006e5c:	463b      	mov	r3, r7
 8006e5e:	4640      	mov	r0, r8
 8006e60:	4649      	mov	r1, r9
 8006e62:	f7f9 fbc1 	bl	80005e8 <__aeabi_dmul>
 8006e66:	4602      	mov	r2, r0
 8006e68:	460b      	mov	r3, r1
 8006e6a:	ec51 0b19 	vmov	r0, r1, d9
 8006e6e:	f7f9 fa03 	bl	8000278 <__aeabi_dsub>
 8006e72:	4652      	mov	r2, sl
 8006e74:	465b      	mov	r3, fp
 8006e76:	f7f9 fbb7 	bl	80005e8 <__aeabi_dmul>
 8006e7a:	ec53 2b18 	vmov	r2, r3, d8
 8006e7e:	f7f9 f9fb 	bl	8000278 <__aeabi_dsub>
 8006e82:	a30b      	add	r3, pc, #44	; (adr r3, 8006eb0 <__kernel_sin+0x148>)
 8006e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e88:	4606      	mov	r6, r0
 8006e8a:	460f      	mov	r7, r1
 8006e8c:	4640      	mov	r0, r8
 8006e8e:	4649      	mov	r1, r9
 8006e90:	f7f9 fbaa 	bl	80005e8 <__aeabi_dmul>
 8006e94:	4602      	mov	r2, r0
 8006e96:	460b      	mov	r3, r1
 8006e98:	4630      	mov	r0, r6
 8006e9a:	4639      	mov	r1, r7
 8006e9c:	f7f9 f9ee 	bl	800027c <__adddf3>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	4629      	mov	r1, r5
 8006ea8:	f7f9 f9e6 	bl	8000278 <__aeabi_dsub>
 8006eac:	e7c4      	b.n	8006e38 <__kernel_sin+0xd0>
 8006eae:	bf00      	nop
 8006eb0:	55555549 	.word	0x55555549
 8006eb4:	3fc55555 	.word	0x3fc55555
 8006eb8:	3fe00000 	.word	0x3fe00000
 8006ebc:	5acfd57c 	.word	0x5acfd57c
 8006ec0:	3de5d93a 	.word	0x3de5d93a
 8006ec4:	8a2b9ceb 	.word	0x8a2b9ceb
 8006ec8:	3e5ae5e6 	.word	0x3e5ae5e6
 8006ecc:	57b1fe7d 	.word	0x57b1fe7d
 8006ed0:	3ec71de3 	.word	0x3ec71de3
 8006ed4:	19c161d5 	.word	0x19c161d5
 8006ed8:	3f2a01a0 	.word	0x3f2a01a0
 8006edc:	1110f8a6 	.word	0x1110f8a6
 8006ee0:	3f811111 	.word	0x3f811111

08006ee4 <fabs>:
 8006ee4:	ec51 0b10 	vmov	r0, r1, d0
 8006ee8:	ee10 2a10 	vmov	r2, s0
 8006eec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006ef0:	ec43 2b10 	vmov	d0, r2, r3
 8006ef4:	4770      	bx	lr
	...

08006ef8 <floor>:
 8006ef8:	ec51 0b10 	vmov	r0, r1, d0
 8006efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f00:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006f04:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006f08:	2e13      	cmp	r6, #19
 8006f0a:	ee10 5a10 	vmov	r5, s0
 8006f0e:	ee10 8a10 	vmov	r8, s0
 8006f12:	460c      	mov	r4, r1
 8006f14:	dc32      	bgt.n	8006f7c <floor+0x84>
 8006f16:	2e00      	cmp	r6, #0
 8006f18:	da14      	bge.n	8006f44 <floor+0x4c>
 8006f1a:	a333      	add	r3, pc, #204	; (adr r3, 8006fe8 <floor+0xf0>)
 8006f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f20:	f7f9 f9ac 	bl	800027c <__adddf3>
 8006f24:	2200      	movs	r2, #0
 8006f26:	2300      	movs	r3, #0
 8006f28:	f7f9 fdee 	bl	8000b08 <__aeabi_dcmpgt>
 8006f2c:	b138      	cbz	r0, 8006f3e <floor+0x46>
 8006f2e:	2c00      	cmp	r4, #0
 8006f30:	da57      	bge.n	8006fe2 <floor+0xea>
 8006f32:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006f36:	431d      	orrs	r5, r3
 8006f38:	d001      	beq.n	8006f3e <floor+0x46>
 8006f3a:	4c2d      	ldr	r4, [pc, #180]	; (8006ff0 <floor+0xf8>)
 8006f3c:	2500      	movs	r5, #0
 8006f3e:	4621      	mov	r1, r4
 8006f40:	4628      	mov	r0, r5
 8006f42:	e025      	b.n	8006f90 <floor+0x98>
 8006f44:	4f2b      	ldr	r7, [pc, #172]	; (8006ff4 <floor+0xfc>)
 8006f46:	4137      	asrs	r7, r6
 8006f48:	ea01 0307 	and.w	r3, r1, r7
 8006f4c:	4303      	orrs	r3, r0
 8006f4e:	d01f      	beq.n	8006f90 <floor+0x98>
 8006f50:	a325      	add	r3, pc, #148	; (adr r3, 8006fe8 <floor+0xf0>)
 8006f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f56:	f7f9 f991 	bl	800027c <__adddf3>
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	f7f9 fdd3 	bl	8000b08 <__aeabi_dcmpgt>
 8006f62:	2800      	cmp	r0, #0
 8006f64:	d0eb      	beq.n	8006f3e <floor+0x46>
 8006f66:	2c00      	cmp	r4, #0
 8006f68:	bfbe      	ittt	lt
 8006f6a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006f6e:	fa43 f606 	asrlt.w	r6, r3, r6
 8006f72:	19a4      	addlt	r4, r4, r6
 8006f74:	ea24 0407 	bic.w	r4, r4, r7
 8006f78:	2500      	movs	r5, #0
 8006f7a:	e7e0      	b.n	8006f3e <floor+0x46>
 8006f7c:	2e33      	cmp	r6, #51	; 0x33
 8006f7e:	dd0b      	ble.n	8006f98 <floor+0xa0>
 8006f80:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006f84:	d104      	bne.n	8006f90 <floor+0x98>
 8006f86:	ee10 2a10 	vmov	r2, s0
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	f7f9 f976 	bl	800027c <__adddf3>
 8006f90:	ec41 0b10 	vmov	d0, r0, r1
 8006f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f98:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8006fa0:	fa23 f707 	lsr.w	r7, r3, r7
 8006fa4:	4207      	tst	r7, r0
 8006fa6:	d0f3      	beq.n	8006f90 <floor+0x98>
 8006fa8:	a30f      	add	r3, pc, #60	; (adr r3, 8006fe8 <floor+0xf0>)
 8006faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fae:	f7f9 f965 	bl	800027c <__adddf3>
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	f7f9 fda7 	bl	8000b08 <__aeabi_dcmpgt>
 8006fba:	2800      	cmp	r0, #0
 8006fbc:	d0bf      	beq.n	8006f3e <floor+0x46>
 8006fbe:	2c00      	cmp	r4, #0
 8006fc0:	da02      	bge.n	8006fc8 <floor+0xd0>
 8006fc2:	2e14      	cmp	r6, #20
 8006fc4:	d103      	bne.n	8006fce <floor+0xd6>
 8006fc6:	3401      	adds	r4, #1
 8006fc8:	ea25 0507 	bic.w	r5, r5, r7
 8006fcc:	e7b7      	b.n	8006f3e <floor+0x46>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006fd4:	fa03 f606 	lsl.w	r6, r3, r6
 8006fd8:	4435      	add	r5, r6
 8006fda:	4545      	cmp	r5, r8
 8006fdc:	bf38      	it	cc
 8006fde:	18e4      	addcc	r4, r4, r3
 8006fe0:	e7f2      	b.n	8006fc8 <floor+0xd0>
 8006fe2:	2500      	movs	r5, #0
 8006fe4:	462c      	mov	r4, r5
 8006fe6:	e7aa      	b.n	8006f3e <floor+0x46>
 8006fe8:	8800759c 	.word	0x8800759c
 8006fec:	7e37e43c 	.word	0x7e37e43c
 8006ff0:	bff00000 	.word	0xbff00000
 8006ff4:	000fffff 	.word	0x000fffff

08006ff8 <scalbn>:
 8006ff8:	b570      	push	{r4, r5, r6, lr}
 8006ffa:	ec55 4b10 	vmov	r4, r5, d0
 8006ffe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007002:	4606      	mov	r6, r0
 8007004:	462b      	mov	r3, r5
 8007006:	b99a      	cbnz	r2, 8007030 <scalbn+0x38>
 8007008:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800700c:	4323      	orrs	r3, r4
 800700e:	d036      	beq.n	800707e <scalbn+0x86>
 8007010:	4b39      	ldr	r3, [pc, #228]	; (80070f8 <scalbn+0x100>)
 8007012:	4629      	mov	r1, r5
 8007014:	ee10 0a10 	vmov	r0, s0
 8007018:	2200      	movs	r2, #0
 800701a:	f7f9 fae5 	bl	80005e8 <__aeabi_dmul>
 800701e:	4b37      	ldr	r3, [pc, #220]	; (80070fc <scalbn+0x104>)
 8007020:	429e      	cmp	r6, r3
 8007022:	4604      	mov	r4, r0
 8007024:	460d      	mov	r5, r1
 8007026:	da10      	bge.n	800704a <scalbn+0x52>
 8007028:	a32b      	add	r3, pc, #172	; (adr r3, 80070d8 <scalbn+0xe0>)
 800702a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702e:	e03a      	b.n	80070a6 <scalbn+0xae>
 8007030:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007034:	428a      	cmp	r2, r1
 8007036:	d10c      	bne.n	8007052 <scalbn+0x5a>
 8007038:	ee10 2a10 	vmov	r2, s0
 800703c:	4620      	mov	r0, r4
 800703e:	4629      	mov	r1, r5
 8007040:	f7f9 f91c 	bl	800027c <__adddf3>
 8007044:	4604      	mov	r4, r0
 8007046:	460d      	mov	r5, r1
 8007048:	e019      	b.n	800707e <scalbn+0x86>
 800704a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800704e:	460b      	mov	r3, r1
 8007050:	3a36      	subs	r2, #54	; 0x36
 8007052:	4432      	add	r2, r6
 8007054:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007058:	428a      	cmp	r2, r1
 800705a:	dd08      	ble.n	800706e <scalbn+0x76>
 800705c:	2d00      	cmp	r5, #0
 800705e:	a120      	add	r1, pc, #128	; (adr r1, 80070e0 <scalbn+0xe8>)
 8007060:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007064:	da1c      	bge.n	80070a0 <scalbn+0xa8>
 8007066:	a120      	add	r1, pc, #128	; (adr r1, 80070e8 <scalbn+0xf0>)
 8007068:	e9d1 0100 	ldrd	r0, r1, [r1]
 800706c:	e018      	b.n	80070a0 <scalbn+0xa8>
 800706e:	2a00      	cmp	r2, #0
 8007070:	dd08      	ble.n	8007084 <scalbn+0x8c>
 8007072:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007076:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800707a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800707e:	ec45 4b10 	vmov	d0, r4, r5
 8007082:	bd70      	pop	{r4, r5, r6, pc}
 8007084:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007088:	da19      	bge.n	80070be <scalbn+0xc6>
 800708a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800708e:	429e      	cmp	r6, r3
 8007090:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007094:	dd0a      	ble.n	80070ac <scalbn+0xb4>
 8007096:	a112      	add	r1, pc, #72	; (adr r1, 80070e0 <scalbn+0xe8>)
 8007098:	e9d1 0100 	ldrd	r0, r1, [r1]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1e2      	bne.n	8007066 <scalbn+0x6e>
 80070a0:	a30f      	add	r3, pc, #60	; (adr r3, 80070e0 <scalbn+0xe8>)
 80070a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a6:	f7f9 fa9f 	bl	80005e8 <__aeabi_dmul>
 80070aa:	e7cb      	b.n	8007044 <scalbn+0x4c>
 80070ac:	a10a      	add	r1, pc, #40	; (adr r1, 80070d8 <scalbn+0xe0>)
 80070ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d0b8      	beq.n	8007028 <scalbn+0x30>
 80070b6:	a10e      	add	r1, pc, #56	; (adr r1, 80070f0 <scalbn+0xf8>)
 80070b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070bc:	e7b4      	b.n	8007028 <scalbn+0x30>
 80070be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80070c2:	3236      	adds	r2, #54	; 0x36
 80070c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80070c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80070cc:	4620      	mov	r0, r4
 80070ce:	4b0c      	ldr	r3, [pc, #48]	; (8007100 <scalbn+0x108>)
 80070d0:	2200      	movs	r2, #0
 80070d2:	e7e8      	b.n	80070a6 <scalbn+0xae>
 80070d4:	f3af 8000 	nop.w
 80070d8:	c2f8f359 	.word	0xc2f8f359
 80070dc:	01a56e1f 	.word	0x01a56e1f
 80070e0:	8800759c 	.word	0x8800759c
 80070e4:	7e37e43c 	.word	0x7e37e43c
 80070e8:	8800759c 	.word	0x8800759c
 80070ec:	fe37e43c 	.word	0xfe37e43c
 80070f0:	c2f8f359 	.word	0xc2f8f359
 80070f4:	81a56e1f 	.word	0x81a56e1f
 80070f8:	43500000 	.word	0x43500000
 80070fc:	ffff3cb0 	.word	0xffff3cb0
 8007100:	3c900000 	.word	0x3c900000

08007104 <_init>:
 8007104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007106:	bf00      	nop
 8007108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800710a:	bc08      	pop	{r3}
 800710c:	469e      	mov	lr, r3
 800710e:	4770      	bx	lr

08007110 <_fini>:
 8007110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007112:	bf00      	nop
 8007114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007116:	bc08      	pop	{r3}
 8007118:	469e      	mov	lr, r3
 800711a:	4770      	bx	lr
