
HEPL-Footware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  08005dd4  08005dd4  00015dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800636c  0800636c  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  0800636c  0800636c  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800636c  0800636c  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800636c  0800636c  0001636c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006370  08006370  00016370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08006374  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  20000094  08006408  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08006408  00020380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000132de  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027f8  00000000  00000000  000333a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000cfed  00000000  00000000  00035b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec8  00000000  00000000  00042b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e68  00000000  00000000  00043a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024c85  00000000  00000000  000448b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000157cf  00000000  00000000  0006953d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9956  00000000  00000000  0007ed0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00158662  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000034d4  00000000  00000000  001586b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005dbc 	.word	0x08005dbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	08005dbc 	.word	0x08005dbc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2f>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b24:	bf24      	itt	cs
 8000b26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_d2f+0x30>
 8000b30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b44:	bf08      	it	eq
 8000b46:	f020 0001 	biceq.w	r0, r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b50:	d121      	bne.n	8000b96 <__aeabi_d2f+0x7a>
 8000b52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b56:	bfbc      	itt	lt
 8000b58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	4770      	bxlt	lr
 8000b5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b66:	f1c2 0218 	rsb	r2, r2, #24
 8000b6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b72:	fa20 f002 	lsr.w	r0, r0, r2
 8000b76:	bf18      	it	ne
 8000b78:	f040 0001 	orrne.w	r0, r0, #1
 8000b7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b88:	ea40 000c 	orr.w	r0, r0, ip
 8000b8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b94:	e7cc      	b.n	8000b30 <__aeabi_d2f+0x14>
 8000b96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9a:	d107      	bne.n	8000bac <__aeabi_d2f+0x90>
 8000b9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba0:	bf1e      	ittt	ne
 8000ba2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ba6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000baa:	4770      	bxne	lr
 8000bac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <IMU_convertAccel>:
		IMU_writeRegister(IMU, buf, 1);
	}
}

float IMU_convertAccel(uint8_t H_byte, uint8_t L_byte) {
	int16_t reading = (int16_t)(H_byte << 8) + L_byte;
 8000bbc:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8000bc0:	b209      	sxth	r1, r1

	// (Full-scale val / Max LSB val) * reading (LSB) = Accel (g)
	return XL_SCALE_FACTOR * reading;
 8000bc2:	ee07 1a90 	vmov	s15, r1
 8000bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8000bca:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8000bd4 <IMU_convertAccel+0x18>
 8000bce:	ee27 0a80 	vmul.f32	s0, s15, s0
 8000bd2:	4770      	bx	lr
 8000bd4:	3b1cd806 	.word	0x3b1cd806

08000bd8 <IMU_convertGyro>:

float IMU_convertGyro(uint8_t H_byte, uint8_t L_byte) {
	int16_t reading = (int16_t)(H_byte << 8) + L_byte;
 8000bd8:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8000bdc:	b209      	sxth	r1, r1

	// (Full-scale val / Max LSB val) * reading (LSB) = Accel (g)
	return GYRO_SCALE_FACTOR * reading;
 8000bde:	ee07 1a90 	vmov	s15, r1
 8000be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8000be6:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8000bf0 <IMU_convertGyro+0x18>
 8000bea:	ee27 0a80 	vmul.f32	s0, s15, s0
 8000bee:	4770      	bx	lr
 8000bf0:	3d0f5dff 	.word	0x3d0f5dff

08000bf4 <IMU_chipSelect>:
	__enable_irq();

	return status;
}

void IMU_chipSelect(uint8_t chipID) {
 8000bf4:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOB, (1 << chipID), 0); // PB0,1,2 for IMU 0,1,2
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	4081      	lsls	r1, r0
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	b289      	uxth	r1, r1
 8000bfe:	4802      	ldr	r0, [pc, #8]	; (8000c08 <IMU_chipSelect+0x14>)
 8000c00:	f001 fc3e 	bl	8002480 <HAL_GPIO_WritePin>
}
 8000c04:	bd08      	pop	{r3, pc}
 8000c06:	bf00      	nop
 8000c08:	48000400 	.word	0x48000400

08000c0c <IMU_chipRelease>:

void IMU_chipRelease(uint8_t chipID) {
 8000c0c:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOB, (1 << chipID), 1); // PB0,1,2 for IMU 0,1,2
 8000c0e:	2201      	movs	r2, #1
 8000c10:	fa02 f100 	lsl.w	r1, r2, r0
 8000c14:	b289      	uxth	r1, r1
 8000c16:	4802      	ldr	r0, [pc, #8]	; (8000c20 <IMU_chipRelease+0x14>)
 8000c18:	f001 fc32 	bl	8002480 <HAL_GPIO_WritePin>
}
 8000c1c:	bd08      	pop	{r3, pc}
 8000c1e:	bf00      	nop
 8000c20:	48000400 	.word	0x48000400

08000c24 <IMU_readRegister>:
HAL_StatusTypeDef IMU_readRegister(IMU* IMU, uint8_t reg_addr, uint8_t* rx_buf, int num_bytes) {
 8000c24:	b570      	push	{r4, r5, r6, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	4604      	mov	r4, r0
 8000c2a:	4615      	mov	r5, r2
 8000c2c:	461e      	mov	r6, r3
	uint8_t reg_buffer[1] = {reg_addr | 0x80};
 8000c2e:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8000c32:	f88d 1004 	strb.w	r1, [sp, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c36:	b672      	cpsid	i
	IMU_chipSelect(IMU->chipID);
 8000c38:	7f00      	ldrb	r0, [r0, #28]
 8000c3a:	f7ff ffdb 	bl	8000bf4 <IMU_chipSelect>
	HAL_SPI_Transmit(IMU->hspi, (uint8_t *)reg_buffer, 1, SPI_TIMEOUT);
 8000c3e:	2301      	movs	r3, #1
 8000c40:	461a      	mov	r2, r3
 8000c42:	a901      	add	r1, sp, #4
 8000c44:	6820      	ldr	r0, [r4, #0]
 8000c46:	f002 fae0 	bl	800320a <HAL_SPI_Transmit>
	status = HAL_SPI_Receive(IMU->hspi, (uint8_t *)rx_buf, num_bytes, SPI_TIMEOUT);
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	b2b2      	uxth	r2, r6
 8000c4e:	4629      	mov	r1, r5
 8000c50:	6820      	ldr	r0, [r4, #0]
 8000c52:	f002 fd4a 	bl	80036ea <HAL_SPI_Receive>
 8000c56:	4605      	mov	r5, r0
	IMU_chipRelease(IMU->chipID);
 8000c58:	7f20      	ldrb	r0, [r4, #28]
 8000c5a:	f7ff ffd7 	bl	8000c0c <IMU_chipRelease>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c5e:	b662      	cpsie	i
}
 8000c60:	4628      	mov	r0, r5
 8000c62:	b002      	add	sp, #8
 8000c64:	bd70      	pop	{r4, r5, r6, pc}

08000c66 <IMU_readSensorData>:
void IMU_readSensorData(IMU* IMU, SensorData* data) {
 8000c66:	b530      	push	{r4, r5, lr}
 8000c68:	b085      	sub	sp, #20
 8000c6a:	4605      	mov	r5, r0
 8000c6c:	460c      	mov	r4, r1
	IMU_readRegister(IMU, OUTX_L_G, buf, 12);
 8000c6e:	230c      	movs	r3, #12
 8000c70:	aa01      	add	r2, sp, #4
 8000c72:	2122      	movs	r1, #34	; 0x22
 8000c74:	f7ff ffd6 	bl	8000c24 <IMU_readRegister>
	data->G_X = IMU_convertGyro(buf[1], buf[0]) - IMU->GX_offset;
 8000c78:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8000c7c:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8000c80:	f7ff ffaa 	bl	8000bd8 <IMU_convertGyro>
 8000c84:	edd5 7a04 	vldr	s15, [r5, #16]
 8000c88:	ee30 0a67 	vsub.f32	s0, s0, s15
 8000c8c:	ed84 0a03 	vstr	s0, [r4, #12]
	data->G_Y = IMU_convertGyro(buf[3], buf[2]) - IMU->GY_offset;
 8000c90:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8000c94:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000c98:	f7ff ff9e 	bl	8000bd8 <IMU_convertGyro>
 8000c9c:	edd5 7a05 	vldr	s15, [r5, #20]
 8000ca0:	ee30 0a67 	vsub.f32	s0, s0, s15
 8000ca4:	ed84 0a04 	vstr	s0, [r4, #16]
	data->G_Z = IMU_convertGyro(buf[5], buf[4]) - IMU->GZ_offset;
 8000ca8:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8000cac:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8000cb0:	f7ff ff92 	bl	8000bd8 <IMU_convertGyro>
 8000cb4:	edd5 7a06 	vldr	s15, [r5, #24]
 8000cb8:	ee30 0a67 	vsub.f32	s0, s0, s15
 8000cbc:	ed84 0a05 	vstr	s0, [r4, #20]
	data->XL_X = IMU_convertAccel(buf[7], buf[6]) + IMU->X_offset;
 8000cc0:	f89d 100a 	ldrb.w	r1, [sp, #10]
 8000cc4:	f89d 000b 	ldrb.w	r0, [sp, #11]
 8000cc8:	f7ff ff78 	bl	8000bbc <IMU_convertAccel>
 8000ccc:	edd5 7a01 	vldr	s15, [r5, #4]
 8000cd0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000cd4:	ed84 0a00 	vstr	s0, [r4]
	data->XL_Y = IMU_convertAccel(buf[9], buf[8]) + IMU->Y_offset;
 8000cd8:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8000cdc:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8000ce0:	f7ff ff6c 	bl	8000bbc <IMU_convertAccel>
 8000ce4:	edd5 7a02 	vldr	s15, [r5, #8]
 8000ce8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000cec:	ed84 0a01 	vstr	s0, [r4, #4]
	data->XL_Z = IMU_convertAccel(buf[11], buf[10]) - IMU->Z_offset;
 8000cf0:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8000cf4:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8000cf8:	f7ff ff60 	bl	8000bbc <IMU_convertAccel>
 8000cfc:	edd5 7a03 	vldr	s15, [r5, #12]
 8000d00:	ee30 0a67 	vsub.f32	s0, s0, s15
 8000d04:	ed84 0a02 	vstr	s0, [r4, #8]
}
 8000d08:	b005      	add	sp, #20
 8000d0a:	bd30      	pop	{r4, r5, pc}

08000d0c <IMU_writeRegister>:
HAL_StatusTypeDef IMU_writeRegister(IMU* IMU, uint8_t* tx_buf, int num_bytes) {
 8000d0c:	b570      	push	{r4, r5, r6, lr}
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460e      	mov	r6, r1
 8000d12:	4615      	mov	r5, r2
  __ASM volatile ("cpsid i" : : : "memory");
 8000d14:	b672      	cpsid	i
	IMU_chipSelect(IMU->chipID);
 8000d16:	7f00      	ldrb	r0, [r0, #28]
 8000d18:	f7ff ff6c 	bl	8000bf4 <IMU_chipSelect>
	status = HAL_SPI_Transmit(IMU->hspi, (uint8_t *)tx_buf, num_bytes + 1, SPI_TIMEOUT);
 8000d1c:	1c6a      	adds	r2, r5, #1
 8000d1e:	2301      	movs	r3, #1
 8000d20:	b292      	uxth	r2, r2
 8000d22:	4631      	mov	r1, r6
 8000d24:	6820      	ldr	r0, [r4, #0]
 8000d26:	f002 fa70 	bl	800320a <HAL_SPI_Transmit>
 8000d2a:	4605      	mov	r5, r0
	IMU_chipRelease(IMU->chipID);
 8000d2c:	7f20      	ldrb	r0, [r4, #28]
 8000d2e:	f7ff ff6d 	bl	8000c0c <IMU_chipRelease>
  __ASM volatile ("cpsie i" : : : "memory");
 8000d32:	b662      	cpsie	i
}
 8000d34:	4628      	mov	r0, r5
 8000d36:	bd70      	pop	{r4, r5, r6, pc}

08000d38 <IMU_init>:
void IMU_init(SPI_HandleTypeDef* hspi, IMU* IMU, uint8_t chipID) {
 8000d38:	b510      	push	{r4, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	460c      	mov	r4, r1
	IMU->hspi = hspi;
 8000d3e:	6008      	str	r0, [r1, #0]
	IMU->X_offset = IMU_offsets[3*chipID + 0];
 8000d40:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8000d44:	4869      	ldr	r0, [pc, #420]	; (8000eec <IMU_init+0x1b4>)
 8000d46:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8000d4a:	6809      	ldr	r1, [r1, #0]
 8000d4c:	6061      	str	r1, [r4, #4]
	IMU->Y_offset = IMU_offsets[3*chipID + 1];
 8000d4e:	f103 0c01 	add.w	ip, r3, #1
 8000d52:	eb00 018c 	add.w	r1, r0, ip, lsl #2
 8000d56:	6809      	ldr	r1, [r1, #0]
 8000d58:	60a1      	str	r1, [r4, #8]
	IMU->Z_offset = IMU_offsets[3*chipID + 2];
 8000d5a:	f103 0e02 	add.w	lr, r3, #2
 8000d5e:	eb00 008e 	add.w	r0, r0, lr, lsl #2
 8000d62:	6801      	ldr	r1, [r0, #0]
 8000d64:	60e1      	str	r1, [r4, #12]
	IMU->GX_offset = IMU_Goffsets[3*chipID + 0];
 8000d66:	4962      	ldr	r1, [pc, #392]	; (8000ef0 <IMU_init+0x1b8>)
 8000d68:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	6123      	str	r3, [r4, #16]
	IMU->GY_offset = IMU_Goffsets[3*chipID + 1];
 8000d70:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 8000d74:	f8dc 3000 	ldr.w	r3, [ip]
 8000d78:	6163      	str	r3, [r4, #20]
	IMU->GZ_offset = IMU_Goffsets[3*chipID + 2];
 8000d7a:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8000d7e:	680b      	ldr	r3, [r1, #0]
 8000d80:	61a3      	str	r3, [r4, #24]
	IMU->chipID = chipID;
 8000d82:	7722      	strb	r2, [r4, #28]
	buf[0] = CTRL3_C;
 8000d84:	2312      	movs	r3, #18
 8000d86:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = 0x04;
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	f88d 3005 	strb.w	r3, [sp, #5]
	IMU_writeRegister(IMU, buf, 1);
 8000d90:	2201      	movs	r2, #1
 8000d92:	eb0d 0103 	add.w	r1, sp, r3
 8000d96:	4620      	mov	r0, r4
 8000d98:	f7ff ffb8 	bl	8000d0c <IMU_writeRegister>
	IMU_readRegister(IMU, WHO_AM_I, buf, 1);
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	aa01      	add	r2, sp, #4
 8000da0:	210f      	movs	r1, #15
 8000da2:	4620      	mov	r0, r4
 8000da4:	f7ff ff3e 	bl	8000c24 <IMU_readRegister>
	assert(buf[0] == WHO_I_AM_ID); // Crash if not connected properly
 8000da8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000dac:	2b6a      	cmp	r3, #106	; 0x6a
 8000dae:	d153      	bne.n	8000e58 <IMU_init+0x120>
	if (IS_COMP_FILTER) { // Complementary Filter Setup
 8000db0:	4b50      	ldr	r3, [pc, #320]	; (8000ef4 <IMU_init+0x1bc>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d055      	beq.n	8000e64 <IMU_init+0x12c>
		buf[0] = CTRL1_XL;
 8000db8:	2310      	movs	r3, #16
 8000dba:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x3E;
 8000dbe:	233e      	movs	r3, #62	; 0x3e
 8000dc0:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	a901      	add	r1, sp, #4
 8000dc8:	4620      	mov	r0, r4
 8000dca:	f7ff ff9f 	bl	8000d0c <IMU_writeRegister>
		buf[0] = CTRL2_G;
 8000dce:	2311      	movs	r3, #17
 8000dd0:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x38;
 8000dd4:	2338      	movs	r3, #56	; 0x38
 8000dd6:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000dda:	2201      	movs	r2, #1
 8000ddc:	a901      	add	r1, sp, #4
 8000dde:	4620      	mov	r0, r4
 8000de0:	f7ff ff94 	bl	8000d0c <IMU_writeRegister>
		buf[0] = INT2_CTRL;
 8000de4:	230e      	movs	r3, #14
 8000de6:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x03;
 8000dea:	2303      	movs	r3, #3
 8000dec:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000df0:	2201      	movs	r2, #1
 8000df2:	a901      	add	r1, sp, #4
 8000df4:	4620      	mov	r0, r4
 8000df6:	f7ff ff89 	bl	8000d0c <IMU_writeRegister>
		buf[0] = CTRL5_C;
 8000dfa:	2314      	movs	r3, #20
 8000dfc:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x60;
 8000e00:	2360      	movs	r3, #96	; 0x60
 8000e02:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000e06:	2201      	movs	r2, #1
 8000e08:	a901      	add	r1, sp, #4
 8000e0a:	4620      	mov	r0, r4
 8000e0c:	f7ff ff7e 	bl	8000d0c <IMU_writeRegister>
		buf[0] = CTRL6_C;
 8000e10:	2315      	movs	r3, #21
 8000e12:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x04;
 8000e16:	2304      	movs	r3, #4
 8000e18:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	eb0d 0103 	add.w	r1, sp, r3
 8000e22:	4620      	mov	r0, r4
 8000e24:	f7ff ff72 	bl	8000d0c <IMU_writeRegister>
		buf[0] = CTRL7_G;
 8000e28:	2316      	movs	r3, #22
 8000e2a:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x70;
 8000e2e:	2370      	movs	r3, #112	; 0x70
 8000e30:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000e34:	2201      	movs	r2, #1
 8000e36:	a901      	add	r1, sp, #4
 8000e38:	4620      	mov	r0, r4
 8000e3a:	f7ff ff67 	bl	8000d0c <IMU_writeRegister>
		buf[0] = CTRL8_XL;
 8000e3e:	2317      	movs	r3, #23
 8000e40:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x00;
 8000e44:	2300      	movs	r3, #0
 8000e46:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	a901      	add	r1, sp, #4
 8000e4e:	4620      	mov	r0, r4
 8000e50:	f7ff ff5c 	bl	8000d0c <IMU_writeRegister>
}
 8000e54:	b004      	add	sp, #16
 8000e56:	bd10      	pop	{r4, pc}
	assert(buf[0] == WHO_I_AM_ID); // Crash if not connected properly
 8000e58:	4b27      	ldr	r3, [pc, #156]	; (8000ef8 <IMU_init+0x1c0>)
 8000e5a:	4a28      	ldr	r2, [pc, #160]	; (8000efc <IMU_init+0x1c4>)
 8000e5c:	212c      	movs	r1, #44	; 0x2c
 8000e5e:	4828      	ldr	r0, [pc, #160]	; (8000f00 <IMU_init+0x1c8>)
 8000e60:	f003 f984 	bl	800416c <__assert_func>
		buf[0] = CTRL1_XL;
 8000e64:	2310      	movs	r3, #16
 8000e66:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x3C;
 8000e6a:	233c      	movs	r3, #60	; 0x3c
 8000e6c:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000e70:	2201      	movs	r2, #1
 8000e72:	a901      	add	r1, sp, #4
 8000e74:	4620      	mov	r0, r4
 8000e76:	f7ff ff49 	bl	8000d0c <IMU_writeRegister>
		buf[0] = CTRL2_G;
 8000e7a:	2311      	movs	r3, #17
 8000e7c:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x38;
 8000e80:	2338      	movs	r3, #56	; 0x38
 8000e82:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000e86:	2201      	movs	r2, #1
 8000e88:	a901      	add	r1, sp, #4
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	f7ff ff3e 	bl	8000d0c <IMU_writeRegister>
		buf[0] = INT2_CTRL;
 8000e90:	230e      	movs	r3, #14
 8000e92:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x03;
 8000e96:	2303      	movs	r3, #3
 8000e98:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	a901      	add	r1, sp, #4
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	f7ff ff33 	bl	8000d0c <IMU_writeRegister>
		buf[0] = CTRL5_C;
 8000ea6:	2314      	movs	r3, #20
 8000ea8:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x60;
 8000eac:	2360      	movs	r3, #96	; 0x60
 8000eae:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	a901      	add	r1, sp, #4
 8000eb6:	4620      	mov	r0, r4
 8000eb8:	f7ff ff28 	bl	8000d0c <IMU_writeRegister>
		buf[0] = CTRL6_C;
 8000ebc:	2315      	movs	r3, #21
 8000ebe:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x04;
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	eb0d 0103 	add.w	r1, sp, r3
 8000ece:	4620      	mov	r0, r4
 8000ed0:	f7ff ff1c 	bl	8000d0c <IMU_writeRegister>
		buf[0] = CTRL7_G;
 8000ed4:	2316      	movs	r3, #22
 8000ed6:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x00;
 8000eda:	2300      	movs	r3, #0
 8000edc:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	a901      	add	r1, sp, #4
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	f7ff ff11 	bl	8000d0c <IMU_writeRegister>
}
 8000eea:	e7b3      	b.n	8000e54 <IMU_init+0x11c>
 8000eec:	200000d4 	.word	0x200000d4
 8000ef0:	200000b0 	.word	0x200000b0
 8000ef4:	08005e80 	.word	0x08005e80
 8000ef8:	08005dd4 	.word	0x08005dd4
 8000efc:	08005e00 	.word	0x08005e00
 8000f00:	08005dec 	.word	0x08005dec

08000f04 <XBeeChecksum>:
// modifies frame[]. pass payload to be sent in data[].
uint8_t XBeeChecksum(uint8_t frame[], uint8_t frame_size)
{
	uint8_t checksum = 0;
	uint8_t ret = 0;
	for (int i = 0; i < frame_size; i++) // skip bytes 0-2, and last
 8000f04:	2200      	movs	r2, #0
	uint8_t checksum = 0;
 8000f06:	4613      	mov	r3, r2
	for (int i = 0; i < frame_size; i++) // skip bytes 0-2, and last
 8000f08:	e006      	b.n	8000f18 <XBeeChecksum+0x14>
	{
		uint8_t temp = frame[i+3];
 8000f0a:	f102 0c03 	add.w	ip, r2, #3
 8000f0e:	f810 c00c 	ldrb.w	ip, [r0, ip]
		checksum += temp;
 8000f12:	4463      	add	r3, ip
 8000f14:	b2db      	uxtb	r3, r3
	for (int i = 0; i < frame_size; i++) // skip bytes 0-2, and last
 8000f16:	3201      	adds	r2, #1
 8000f18:	4291      	cmp	r1, r2
 8000f1a:	dcf6      	bgt.n	8000f0a <XBeeChecksum+0x6>
	}
	checksum = 0x00FF - checksum;
 8000f1c:	43d8      	mvns	r0, r3
	ret = (uint8_t)(checksum & 0x00FF);
	return ret;
}
 8000f1e:	b2c0      	uxtb	r0, r0
 8000f20:	4770      	bx	lr

08000f22 <makeXBeeFrame>:
			uint8_t frame_id,
			uint8_t data_size, // in bytes
			uint8_t data[],
			uint8_t frame[],
			uint64_t dest_addr
){
 8000f22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f24:	468c      	mov	ip, r1
 8000f26:	4615      	mov	r5, r2
 8000f28:	9c06      	ldr	r4, [sp, #24]
 8000f2a:	9f08      	ldr	r7, [sp, #32]
 8000f2c:	9e09      	ldr	r6, [sp, #36]	; 0x24
	// only do 14 bytes of data to avoid exceeding x-byte frame size
	if (data_size > 20) { data_size = 20; }
 8000f2e:	2a14      	cmp	r2, #20
 8000f30:	d900      	bls.n	8000f34 <makeXBeeFrame+0x12>
 8000f32:	2514      	movs	r5, #20

	uint16_t frame_size = 0x0E + data_size;
 8000f34:	f105 020e 	add.w	r2, r5, #14
	uint32_t checksum = 0;

	frame[0] = XBEE_START;
 8000f38:	217e      	movs	r1, #126	; 0x7e
 8000f3a:	7021      	strb	r1, [r4, #0]
	frame[1] = ((frame_size) >> 8) & 0x00FF; // length upper byte
 8000f3c:	0a12      	lsrs	r2, r2, #8
 8000f3e:	7062      	strb	r2, [r4, #1]
	frame[2] = ((frame_size) >> 0) & 0x00FF; // length lower byte
 8000f40:	f105 010e 	add.w	r1, r5, #14
 8000f44:	b2c9      	uxtb	r1, r1
 8000f46:	70a1      	strb	r1, [r4, #2]
	frame[3] = frame_type;
 8000f48:	70e0      	strb	r0, [r4, #3]
	frame[4] = frame_id;
 8000f4a:	f884 c004 	strb.w	ip, [r4, #4]
	for (int i = 0; i < 8; i++) // write 64-bit dest
 8000f4e:	f04f 0c00 	mov.w	ip, #0
 8000f52:	e014      	b.n	8000f7e <makeXBeeFrame+0x5c>
	{
		uint8_t temp = (dest_addr >> 8*(7-i));
 8000f54:	f1cc 0007 	rsb	r0, ip, #7
 8000f58:	00c0      	lsls	r0, r0, #3
 8000f5a:	f1c0 0e20 	rsb	lr, r0, #32
 8000f5e:	f1a0 0220 	sub.w	r2, r0, #32
 8000f62:	fa27 f000 	lsr.w	r0, r7, r0
 8000f66:	fa06 fe0e 	lsl.w	lr, r6, lr
 8000f6a:	ea40 000e 	orr.w	r0, r0, lr
 8000f6e:	fa26 f202 	lsr.w	r2, r6, r2
 8000f72:	4310      	orrs	r0, r2
		frame[i + 5] = temp;
 8000f74:	f10c 0205 	add.w	r2, ip, #5
 8000f78:	54a0      	strb	r0, [r4, r2]
	for (int i = 0; i < 8; i++) // write 64-bit dest
 8000f7a:	f10c 0c01 	add.w	ip, ip, #1
 8000f7e:	f1bc 0f07 	cmp.w	ip, #7
 8000f82:	dde7      	ble.n	8000f54 <makeXBeeFrame+0x32>
	}
	frame[13] = 0xFF; // 16-bit addr upper
 8000f84:	22ff      	movs	r2, #255	; 0xff
 8000f86:	7362      	strb	r2, [r4, #13]
	frame[14] = 0xFE; // 16-bit addr lower
 8000f88:	22fe      	movs	r2, #254	; 0xfe
 8000f8a:	73a2      	strb	r2, [r4, #14]
	frame[15] = 0x00; // broadcast_radius
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	73e0      	strb	r0, [r4, #15]
	frame[16] = 0x00; // options
 8000f90:	7420      	strb	r0, [r4, #16]
	for (int i = 0; i < data_size; i++) // add data payload to frame
 8000f92:	e004      	b.n	8000f9e <makeXBeeFrame+0x7c>
	{
		uint8_t temp = data[i];
 8000f94:	5c1e      	ldrb	r6, [r3, r0]
		frame[i + 17] = temp;
 8000f96:	f100 0211 	add.w	r2, r0, #17
 8000f9a:	54a6      	strb	r6, [r4, r2]
	for (int i = 0; i < data_size; i++) // add data payload to frame
 8000f9c:	3001      	adds	r0, #1
 8000f9e:	4285      	cmp	r5, r0
 8000fa0:	dcf8      	bgt.n	8000f94 <makeXBeeFrame+0x72>
	}

	// update checksum
	checksum = XBeeChecksum(frame, frame_size);
 8000fa2:	4620      	mov	r0, r4
 8000fa4:	f7ff ffae 	bl	8000f04 <XBeeChecksum>
	frame[data_size + 17] = checksum;
 8000fa8:	f105 0311 	add.w	r3, r5, #17
 8000fac:	54e0      	strb	r0, [r4, r3]
	return frame_size + 4;
 8000fae:	f105 0012 	add.w	r0, r5, #18
}
 8000fb2:	b2c0      	uxtb	r0, r0
 8000fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000fb8 <XBeeTransmitReceive>:
void XBeeTransmitReceive(uint8_t* data_buf, uint8_t* xbee_rx_buf, uint8_t tx_data_size, uint64_t dest_addr) {
 8000fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fbc:	b08c      	sub	sp, #48	; 0x30
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	460c      	mov	r4, r1
	uint8_t tx_size = makeXBeeFrame(XBEE_TRANSMIT_FRAME, 0x01, tx_data_size, data_buf, xbee_tx_buf, dest_addr);
 8000fc2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8000fc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000fca:	f10d 0810 	add.w	r8, sp, #16
 8000fce:	f8cd 8000 	str.w	r8, [sp]
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	2010      	movs	r0, #16
 8000fd6:	f7ff ffa4 	bl	8000f22 <makeXBeeFrame>
 8000fda:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(XBEE_CS_PORT, XBEE_CS_PIN, 0);
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <XBeeTransmitReceive+0x58>)
 8000fde:	881f      	ldrh	r7, [r3, #0]
 8000fe0:	4e0c      	ldr	r6, [pc, #48]	; (8001014 <XBeeTransmitReceive+0x5c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	4639      	mov	r1, r7
 8000fe6:	6830      	ldr	r0, [r6, #0]
 8000fe8:	f001 fa4a 	bl	8002480 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsid i" : : : "memory");
 8000fec:	b672      	cpsid	i
	HAL_SPI_TransmitReceive(&XBEE_SPI, xbee_tx_buf, xbee_rx_buf, tx_size, 7);
 8000fee:	2307      	movs	r3, #7
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	b2ab      	uxth	r3, r5
 8000ff4:	4622      	mov	r2, r4
 8000ff6:	4641      	mov	r1, r8
 8000ff8:	4807      	ldr	r0, [pc, #28]	; (8001018 <XBeeTransmitReceive+0x60>)
 8000ffa:	f002 fa07 	bl	800340c <HAL_SPI_TransmitReceive>
  __ASM volatile ("cpsie i" : : : "memory");
 8000ffe:	b662      	cpsie	i
	HAL_GPIO_WritePin(XBEE_CS_PORT, XBEE_CS_PIN, 1);
 8001000:	2201      	movs	r2, #1
 8001002:	4639      	mov	r1, r7
 8001004:	6830      	ldr	r0, [r6, #0]
 8001006:	f001 fa3b 	bl	8002480 <HAL_GPIO_WritePin>
}
 800100a:	b00c      	add	sp, #48	; 0x30
 800100c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001010:	08005e84 	.word	0x08005e84
 8001014:	20000018 	.word	0x20000018
 8001018:	200001e8 	.word	0x200001e8

0800101c <updateDirection>:
		calibrated = 1;
		heading = 0;
	}
}

void updateDirection(float timeDelta) {
 800101c:	b510      	push	{r4, lr}
 800101e:	ed2d 8b02 	vpush	{d8}

	float term1 = 2 * (q_f32[0] * q_f32[2] - q_f32[1] * q_f32[3]);
	float term2 = 1 - 2 * (q_f32[2] * q_f32[2] - q_f32[3] * q_f32[3]);
	heading = atan2f(term1, term2);*/

	if (personWeight) {
 8001022:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <updateDirection+0x98>)
 8001024:	edd3 7a00 	vldr	s15, [r3]
 8001028:	eef5 7a40 	vcmp.f32	s15, #0.0
 800102c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001030:	d032      	beq.n	8001098 <updateDirection+0x7c>
		heading += w_avg_b0_f32[2] * timeDelta * DIR_ADJUSTMENT*personWeight;
 8001032:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <updateDirection+0x9c>)
 8001034:	ed93 7a02 	vldr	s14, [r3, #8]
 8001038:	ee20 0a47 	vnmul.f32	s0, s0, s14
 800103c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001040:	4b1e      	ldr	r3, [pc, #120]	; (80010bc <updateDirection+0xa0>)
 8001042:	edd3 7a00 	vldr	s15, [r3]
 8001046:	ee37 0a80 	vadd.f32	s0, s15, s0
 800104a:	ed83 0a00 	vstr	s0, [r3]
	} else {
		heading += w_avg_b0_f32[2] * timeDelta * DIR_ADJUSTMENT;
	}

	heading = (float)((int)heading % 360);
 800104e:	4c1b      	ldr	r4, [pc, #108]	; (80010bc <updateDirection+0xa0>)
 8001050:	edd4 7a00 	vldr	s15, [r4]
 8001054:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001058:	ee17 2a90 	vmov	r2, s15
 800105c:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <updateDirection+0xa4>)
 800105e:	fb83 1302 	smull	r1, r3, r3, r2
 8001062:	1899      	adds	r1, r3, r2
 8001064:	17d3      	asrs	r3, r2, #31
 8001066:	ebc3 2321 	rsb	r3, r3, r1, asr #8
 800106a:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800106e:	fb01 2313 	mls	r3, r1, r3, r2
 8001072:	ee07 3a90 	vmov	s15, r3
 8001076:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800107a:	ed84 0a00 	vstr	s0, [r4]

	heading = roundf(heading/5) * 5;
 800107e:	eeb1 8a04 	vmov.f32	s16, #20	; 0x40a00000  5.0
 8001082:	ee80 0a08 	vdiv.f32	s0, s0, s16
 8001086:	f004 f8f7 	bl	8005278 <roundf>
 800108a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800108e:	ed84 0a00 	vstr	s0, [r4]

}
 8001092:	ecbd 8b02 	vpop	{d8}
 8001096:	bd10      	pop	{r4, pc}
		heading += w_avg_b0_f32[2] * timeDelta * DIR_ADJUSTMENT;
 8001098:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <updateDirection+0x9c>)
 800109a:	edd3 7a02 	vldr	s15, [r3, #8]
 800109e:	ee67 7a80 	vmul.f32	s15, s15, s0
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <updateDirection+0xa0>)
 80010a4:	ed93 0a00 	vldr	s0, [r3]
 80010a8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80010ac:	ed83 0a00 	vstr	s0, [r3]
 80010b0:	e7cd      	b.n	800104e <updateDirection+0x32>
 80010b2:	bf00      	nop
 80010b4:	20000100 	.word	0x20000100
 80010b8:	20000118 	.word	0x20000118
 80010bc:	200000fc 	.word	0x200000fc
 80010c0:	b60b60b7 	.word	0xb60b60b7

080010c4 <returnCurrentPosition>:


}

float returnCurrentPosition(Position* returnPos) {
	returnPos->X = pos.X;
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <returnCurrentPosition+0x18>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	6002      	str	r2, [r0, #0]
	returnPos->Y = pos.Y;
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	6042      	str	r2, [r0, #4]
	returnPos->Z = pos.Z;
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	6083      	str	r3, [r0, #8]

	return heading;
}
 80010d2:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <returnCurrentPosition+0x1c>)
 80010d4:	ed93 0a00 	vldr	s0, [r3]
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20000108 	.word	0x20000108
 80010e0:	200000fc 	.word	0x200000fc

080010e4 <getNextGyroReading>:

	// Determine |w_avg_b0|
	w_avg_b0_mag = vec_mag_f32(w_avg_b0_f32);
}

void getNextGyroReading(SensorData* IMU0_data, SensorData* IMU1_data, SensorData* IMU2_data, float* gyroOut) {
 80010e4:	b530      	push	{r4, r5, lr}
	w_avg_x_ring[w_oldest] = (IMU0_data->G_X + IMU1_data->G_X + IMU2_data->G_X) / 3;
 80010e6:	edd0 7a03 	vldr	s15, [r0, #12]
 80010ea:	ed91 7a03 	vldr	s14, [r1, #12]
 80010ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010f2:	ed92 7a03 	vldr	s14, [r2, #12]
 80010f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010fa:	4d2d      	ldr	r5, [pc, #180]	; (80011b0 <getNextGyroReading+0xcc>)
 80010fc:	f895 c000 	ldrb.w	ip, [r5]
 8001100:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001104:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001108:	4c2a      	ldr	r4, [pc, #168]	; (80011b4 <getNextGyroReading+0xd0>)
 800110a:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 800110e:	edc4 6a00 	vstr	s13, [r4]
	w_avg_y_ring[w_oldest] = (IMU0_data->G_Y + IMU1_data->G_Y + IMU2_data->G_Y) / 3;
 8001112:	edd0 7a04 	vldr	s15, [r0, #16]
 8001116:	edd1 6a04 	vldr	s13, [r1, #16]
 800111a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800111e:	edd2 6a04 	vldr	s13, [r2, #16]
 8001122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001126:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800112a:	4c23      	ldr	r4, [pc, #140]	; (80011b8 <getNextGyroReading+0xd4>)
 800112c:	eb04 0e8c 	add.w	lr, r4, ip, lsl #2
 8001130:	edce 6a00 	vstr	s13, [lr]
	w_avg_z_ring[w_oldest] = (IMU0_data->G_Z + IMU1_data->G_Z + IMU2_data->G_Z) / 3;
 8001134:	edd0 7a05 	vldr	s15, [r0, #20]
 8001138:	edd1 6a05 	vldr	s13, [r1, #20]
 800113c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001140:	edd2 6a05 	vldr	s13, [r2, #20]
 8001144:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001148:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800114c:	4a1b      	ldr	r2, [pc, #108]	; (80011bc <getNextGyroReading+0xd8>)
 800114e:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 8001152:	edc2 6a00 	vstr	s13, [r2]

	w_oldest = (w_oldest + 1) % RING_SIZE;
 8001156:	2200      	movs	r2, #0
 8001158:	702a      	strb	r2, [r5, #0]

	gyroOut[0] = 0;
 800115a:	2100      	movs	r1, #0
 800115c:	6019      	str	r1, [r3, #0]
	gyroOut[1] = 0;
 800115e:	6059      	str	r1, [r3, #4]
	gyroOut[2] = 0;
 8001160:	6099      	str	r1, [r3, #8]

	int i;
	for(i = 0; i < RING_SIZE; ++i) {
 8001162:	2a00      	cmp	r2, #0
 8001164:	dd00      	ble.n	8001168 <getNextGyroReading+0x84>
	}

	gyroOut[0] /= RING_SIZE;
	gyroOut[1] /= RING_SIZE;
	gyroOut[2] /= RING_SIZE;
}
 8001166:	bd30      	pop	{r4, r5, pc}
		gyroOut[0] += w_avg_x_ring[i];
 8001168:	4912      	ldr	r1, [pc, #72]	; (80011b4 <getNextGyroReading+0xd0>)
 800116a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800116e:	ed91 7a00 	vldr	s14, [r1]
 8001172:	edd3 7a00 	vldr	s15, [r3]
 8001176:	ee77 7a87 	vadd.f32	s15, s15, s14
 800117a:	edc3 7a00 	vstr	s15, [r3]
		gyroOut[1] += w_avg_y_ring[i];
 800117e:	490e      	ldr	r1, [pc, #56]	; (80011b8 <getNextGyroReading+0xd4>)
 8001180:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8001184:	ed91 7a00 	vldr	s14, [r1]
 8001188:	edd3 7a01 	vldr	s15, [r3, #4]
 800118c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001190:	edc3 7a01 	vstr	s15, [r3, #4]
		gyroOut[2] += w_avg_z_ring[i];
 8001194:	4909      	ldr	r1, [pc, #36]	; (80011bc <getNextGyroReading+0xd8>)
 8001196:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800119a:	ed91 7a00 	vldr	s14, [r1]
 800119e:	edd3 7a02 	vldr	s15, [r3, #8]
 80011a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011a6:	edc3 7a02 	vstr	s15, [r3, #8]
	for(i = 0; i < RING_SIZE; ++i) {
 80011aa:	3201      	adds	r2, #1
 80011ac:	e7d9      	b.n	8001162 <getNextGyroReading+0x7e>
 80011ae:	bf00      	nop
 80011b0:	20000134 	.word	0x20000134
 80011b4:	20000128 	.word	0x20000128
 80011b8:	2000012c 	.word	0x2000012c
 80011bc:	20000130 	.word	0x20000130

080011c0 <createZUPTNode>:
	}

	return curr_phase;
}

ZUPTNode* createZUPTNode(float w_mag) {
 80011c0:	b508      	push	{r3, lr}
 80011c2:	ed2d 8b02 	vpush	{d8}
 80011c6:	eeb0 8a40 	vmov.f32	s16, s0
	ZUPTNode* node = (ZUPTNode*)malloc(sizeof(ZUPTNode));
 80011ca:	2008      	movs	r0, #8
 80011cc:	f003 f828 	bl	8004220 <malloc>

	node->next = NULL;
 80011d0:	2200      	movs	r2, #0
 80011d2:	6002      	str	r2, [r0, #0]
	node->w_mag_sq = w_mag * w_mag;
 80011d4:	ee28 8a08 	vmul.f32	s16, s16, s16
 80011d8:	ed80 8a01 	vstr	s16, [r0, #4]

	return node;
}
 80011dc:	ecbd 8b02 	vpop	{d8}
 80011e0:	bd08      	pop	{r3, pc}
	...

080011e4 <initZUPT>:
void initZUPT(void) {
 80011e4:	b538      	push	{r3, r4, r5, lr}
	ZUPTHead = (ZUPTNode*)createZUPTNode(0.0);
 80011e6:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800120c <initZUPT+0x28>
 80011ea:	f7ff ffe9 	bl	80011c0 <createZUPTNode>
 80011ee:	4605      	mov	r5, r0
 80011f0:	4b07      	ldr	r3, [pc, #28]	; (8001210 <initZUPT+0x2c>)
 80011f2:	6018      	str	r0, [r3, #0]
	for(i = 0; i < ZUPT_W-1; ++i) {
 80011f4:	2400      	movs	r4, #0
 80011f6:	e006      	b.n	8001206 <initZUPT+0x22>
		tempNode->next = (ZUPTNode*)createZUPTNode(0.0);
 80011f8:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800120c <initZUPT+0x28>
 80011fc:	f7ff ffe0 	bl	80011c0 <createZUPTNode>
 8001200:	6028      	str	r0, [r5, #0]
	for(i = 0; i < ZUPT_W-1; ++i) {
 8001202:	3401      	adds	r4, #1
		tempNode = (ZUPTNode*)tempNode->next;
 8001204:	4605      	mov	r5, r0
	for(i = 0; i < ZUPT_W-1; ++i) {
 8001206:	2c0d      	cmp	r4, #13
 8001208:	ddf6      	ble.n	80011f8 <initZUPT+0x14>
}
 800120a:	bd38      	pop	{r3, r4, r5, pc}
 800120c:	00000000 	.word	0x00000000
 8001210:	200000f8 	.word	0x200000f8
 8001214:	00000000 	.word	0x00000000

08001218 <detectZUPTPhase>:
enum PHASE detectZUPTPhase(void) {
 8001218:	b510      	push	{r4, lr}
 800121a:	ed2d 8b02 	vpush	{d8}
	assert(ZUPTHead != NULL);
 800121e:	4b40      	ldr	r3, [pc, #256]	; (8001320 <detectZUPTPhase+0x108>)
 8001220:	6818      	ldr	r0, [r3, #0]
 8001222:	b188      	cbz	r0, 8001248 <detectZUPTPhase+0x30>
	ZUPTNode* tempNode = (ZUPTNode*)ZUPTHead->next;
 8001224:	6804      	ldr	r4, [r0, #0]
	free(ZUPTHead);
 8001226:	f003 f803 	bl	8004230 <free>
	ZUPTHead = tempNode;
 800122a:	4b3d      	ldr	r3, [pc, #244]	; (8001320 <detectZUPTPhase+0x108>)
 800122c:	601c      	str	r4, [r3, #0]
	for(i = 0; i < ZUPT_W-2; ++i) {
 800122e:	2300      	movs	r3, #0
	float sum = 0;
 8001230:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8001324 <detectZUPTPhase+0x10c>
	for(i = 0; i < ZUPT_W-2; ++i) {
 8001234:	2b0c      	cmp	r3, #12
 8001236:	dc15      	bgt.n	8001264 <detectZUPTPhase+0x4c>
		assert(tempNode != NULL);
 8001238:	b16c      	cbz	r4, 8001256 <detectZUPTPhase+0x3e>
		sum += tempNode->w_mag_sq;
 800123a:	ed94 7a01 	vldr	s14, [r4, #4]
 800123e:	ee77 7a87 	vadd.f32	s15, s15, s14
		tempNode = (ZUPTNode*)tempNode->next;
 8001242:	6824      	ldr	r4, [r4, #0]
	for(i = 0; i < ZUPT_W-2; ++i) {
 8001244:	3301      	adds	r3, #1
 8001246:	e7f5      	b.n	8001234 <detectZUPTPhase+0x1c>
	assert(ZUPTHead != NULL);
 8001248:	4b37      	ldr	r3, [pc, #220]	; (8001328 <detectZUPTPhase+0x110>)
 800124a:	4a38      	ldr	r2, [pc, #224]	; (800132c <detectZUPTPhase+0x114>)
 800124c:	f240 1107 	movw	r1, #263	; 0x107
 8001250:	4837      	ldr	r0, [pc, #220]	; (8001330 <detectZUPTPhase+0x118>)
 8001252:	f002 ff8b 	bl	800416c <__assert_func>
		assert(tempNode != NULL);
 8001256:	4b37      	ldr	r3, [pc, #220]	; (8001334 <detectZUPTPhase+0x11c>)
 8001258:	4a34      	ldr	r2, [pc, #208]	; (800132c <detectZUPTPhase+0x114>)
 800125a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800125e:	4834      	ldr	r0, [pc, #208]	; (8001330 <detectZUPTPhase+0x118>)
 8001260:	f002 ff84 	bl	800416c <__assert_func>
	assert(tempNode != NULL);
 8001264:	2c00      	cmp	r4, #0
 8001266:	d03d      	beq.n	80012e4 <detectZUPTPhase+0xcc>
	sum += tempNode->w_mag_sq; // last node
 8001268:	ed94 8a01 	vldr	s16, [r4, #4]
 800126c:	ee38 8a27 	vadd.f32	s16, s16, s15
	tempNode->next = (ZUPTNode*)createZUPTNode(w_avg_b0_mag);
 8001270:	4b31      	ldr	r3, [pc, #196]	; (8001338 <detectZUPTPhase+0x120>)
 8001272:	ed93 0a00 	vldr	s0, [r3]
 8001276:	f7ff ffa3 	bl	80011c0 <createZUPTNode>
 800127a:	6020      	str	r0, [r4, #0]
	assert(tempNode->next != NULL);
 800127c:	2800      	cmp	r0, #0
 800127e:	d038      	beq.n	80012f2 <detectZUPTPhase+0xda>
	sum += tempNode->w_mag_sq;
 8001280:	edd0 7a01 	vldr	s15, [r0, #4]
	float Tw = sum * ZUPT_SCALE_FACTOR;
 8001284:	ee77 7a88 	vadd.f32	s15, s15, s16
 8001288:	ee17 0a90 	vmov	r0, s15
 800128c:	f7ff f954 	bl	8000538 <__aeabi_f2d>
 8001290:	a321      	add	r3, pc, #132	; (adr r3, 8001318 <detectZUPTPhase+0x100>)
 8001292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001296:	f7ff fad1 	bl	800083c <__aeabi_ddiv>
 800129a:	f7ff fc3f 	bl	8000b1c <__aeabi_d2f>
 800129e:	ee07 0a90 	vmov	s15, r0
	enum PHASE detected_phase = (Tw < ZUPT_THRESHOLD) ? STANCE : SWING;
 80012a2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800133c <detectZUPTPhase+0x124>
 80012a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ae:	bf4c      	ite	mi
 80012b0:	2301      	movmi	r3, #1
 80012b2:	2300      	movpl	r3, #0
	if (detected_phase != curr_phase) {
 80012b4:	4a22      	ldr	r2, [pc, #136]	; (8001340 <detectZUPTPhase+0x128>)
 80012b6:	7812      	ldrb	r2, [r2, #0]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d00e      	beq.n	80012da <detectZUPTPhase+0xc2>
		if (detected_phase == SWING) {
 80012bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c4:	d41c      	bmi.n	8001300 <detectZUPTPhase+0xe8>
			++phase_counter;
 80012c6:	4a1f      	ldr	r2, [pc, #124]	; (8001344 <detectZUPTPhase+0x12c>)
 80012c8:	7813      	ldrb	r3, [r2, #0]
 80012ca:	3301      	adds	r3, #1
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	7013      	strb	r3, [r2, #0]
			curr_phase = (phase_counter == PHASE_INTERVAL_THRESHOLD) ? SWING : STANCE;
 80012d0:	3b07      	subs	r3, #7
 80012d2:	bf18      	it	ne
 80012d4:	2301      	movne	r3, #1
 80012d6:	4a1a      	ldr	r2, [pc, #104]	; (8001340 <detectZUPTPhase+0x128>)
 80012d8:	7013      	strb	r3, [r2, #0]
}
 80012da:	4b19      	ldr	r3, [pc, #100]	; (8001340 <detectZUPTPhase+0x128>)
 80012dc:	7818      	ldrb	r0, [r3, #0]
 80012de:	ecbd 8b02 	vpop	{d8}
 80012e2:	bd10      	pop	{r4, pc}
	assert(tempNode != NULL);
 80012e4:	4b13      	ldr	r3, [pc, #76]	; (8001334 <detectZUPTPhase+0x11c>)
 80012e6:	4a11      	ldr	r2, [pc, #68]	; (800132c <detectZUPTPhase+0x114>)
 80012e8:	f44f 718a 	mov.w	r1, #276	; 0x114
 80012ec:	4810      	ldr	r0, [pc, #64]	; (8001330 <detectZUPTPhase+0x118>)
 80012ee:	f002 ff3d 	bl	800416c <__assert_func>
	assert(tempNode->next != NULL);
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <detectZUPTPhase+0x130>)
 80012f4:	4a0d      	ldr	r2, [pc, #52]	; (800132c <detectZUPTPhase+0x114>)
 80012f6:	f240 1119 	movw	r1, #281	; 0x119
 80012fa:	480d      	ldr	r0, [pc, #52]	; (8001330 <detectZUPTPhase+0x118>)
 80012fc:	f002 ff36 	bl	800416c <__assert_func>
			--phase_counter;
 8001300:	4a10      	ldr	r2, [pc, #64]	; (8001344 <detectZUPTPhase+0x12c>)
 8001302:	7813      	ldrb	r3, [r2, #0]
 8001304:	3b01      	subs	r3, #1
 8001306:	b2db      	uxtb	r3, r3
 8001308:	7013      	strb	r3, [r2, #0]
			curr_phase = (phase_counter == 0) ? STANCE : SWING;
 800130a:	fab3 f383 	clz	r3, r3
 800130e:	095b      	lsrs	r3, r3, #5
 8001310:	4a0b      	ldr	r2, [pc, #44]	; (8001340 <detectZUPTPhase+0x128>)
 8001312:	7013      	strb	r3, [r2, #0]
 8001314:	e7e1      	b.n	80012da <detectZUPTPhase+0xc2>
 8001316:	bf00      	nop
 8001318:	b3333334 	.word	0xb3333334
 800131c:	3f589374 	.word	0x3f589374
 8001320:	200000f8 	.word	0x200000f8
 8001324:	00000000 	.word	0x00000000
 8001328:	08005e0c 	.word	0x08005e0c
 800132c:	08005e70 	.word	0x08005e70
 8001330:	08005e20 	.word	0x08005e20
 8001334:	08005e44 	.word	0x08005e44
 8001338:	20000124 	.word	0x20000124
 800133c:	47ea6000 	.word	0x47ea6000
 8001340:	20000000 	.word	0x20000000
 8001344:	20000104 	.word	0x20000104
 8001348:	08005e58 	.word	0x08005e58

0800134c <initRingBuffers>:
	initQuaternion(IMU0_data, IMU1_data, IMU2_data);

	heading = 0;
}

void initRingBuffers(SensorData* IMU0_data, SensorData* IMU1_data, SensorData* IMU2_data) {
 800134c:	b084      	sub	sp, #16
	float w_avg_tmp[3];
	w_avg_tmp[0] = (IMU0_data->G_X + IMU1_data->G_X + IMU2_data->G_X) / 3;
 800134e:	edd0 7a03 	vldr	s15, [r0, #12]
 8001352:	ed91 7a03 	vldr	s14, [r1, #12]
 8001356:	ee77 7a87 	vadd.f32	s15, s15, s14
 800135a:	ed92 7a03 	vldr	s14, [r2, #12]
 800135e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001362:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001366:	eec7 5a87 	vdiv.f32	s11, s15, s14
 800136a:	edcd 5a01 	vstr	s11, [sp, #4]
	w_avg_tmp[1] = (IMU0_data->G_Y + IMU1_data->G_Y + IMU2_data->G_Y) / 3;
 800136e:	edd0 7a04 	vldr	s15, [r0, #16]
 8001372:	edd1 6a04 	vldr	s13, [r1, #16]
 8001376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800137a:	edd2 6a04 	vldr	s13, [r2, #16]
 800137e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001382:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8001386:	ed8d 6a02 	vstr	s12, [sp, #8]
	w_avg_tmp[2] = (IMU0_data->G_Z + IMU1_data->G_Z + IMU2_data->G_Z) / 3;
 800138a:	edd0 7a05 	vldr	s15, [r0, #20]
 800138e:	edd1 6a05 	vldr	s13, [r1, #20]
 8001392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001396:	edd2 6a05 	vldr	s13, [r2, #20]
 800139a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800139e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013a2:	edcd 6a03 	vstr	s13, [sp, #12]

	int i;
	for(i = 0; i < RING_SIZE; ++i) {
 80013a6:	2300      	movs	r3, #0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	dd01      	ble.n	80013b0 <initRingBuffers+0x64>
		w_avg_x_ring[i] = w_avg_tmp[0];
		w_avg_y_ring[i] = w_avg_tmp[1];
		w_avg_z_ring[i] = w_avg_tmp[2];
	}
}
 80013ac:	b004      	add	sp, #16
 80013ae:	4770      	bx	lr
		w_avg_x_ring[i] = w_avg_tmp[0];
 80013b0:	4a08      	ldr	r2, [pc, #32]	; (80013d4 <initRingBuffers+0x88>)
 80013b2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80013b6:	edc2 5a00 	vstr	s11, [r2]
		w_avg_y_ring[i] = w_avg_tmp[1];
 80013ba:	4a07      	ldr	r2, [pc, #28]	; (80013d8 <initRingBuffers+0x8c>)
 80013bc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80013c0:	ed82 6a00 	vstr	s12, [r2]
		w_avg_z_ring[i] = w_avg_tmp[2];
 80013c4:	4a05      	ldr	r2, [pc, #20]	; (80013dc <initRingBuffers+0x90>)
 80013c6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80013ca:	edc2 6a00 	vstr	s13, [r2]
	for(i = 0; i < RING_SIZE; ++i) {
 80013ce:	3301      	adds	r3, #1
 80013d0:	e7ea      	b.n	80013a8 <initRingBuffers+0x5c>
 80013d2:	bf00      	nop
 80013d4:	20000128 	.word	0x20000128
 80013d8:	2000012c 	.word	0x2000012c
 80013dc:	20000130 	.word	0x20000130

080013e0 <dot_f32>:

float dot_f32(float* a, float* b) {
	return (a[0]*b[0]) + (a[1]*b[1]) + (a[2]*b[2]);
 80013e0:	edd0 7a00 	vldr	s15, [r0]
 80013e4:	ed91 0a00 	vldr	s0, [r1]
 80013e8:	ee67 7a80 	vmul.f32	s15, s15, s0
 80013ec:	ed90 0a01 	vldr	s0, [r0, #4]
 80013f0:	ed91 7a01 	vldr	s14, [r1, #4]
 80013f4:	ee20 0a07 	vmul.f32	s0, s0, s14
 80013f8:	ee77 7a80 	vadd.f32	s15, s15, s0
 80013fc:	ed90 0a02 	vldr	s0, [r0, #8]
 8001400:	ed91 7a02 	vldr	s14, [r1, #8]
 8001404:	ee20 0a07 	vmul.f32	s0, s0, s14
}
 8001408:	ee37 0a80 	vadd.f32	s0, s15, s0
 800140c:	4770      	bx	lr

0800140e <cross_f32>:

void cross_f32(float* a, float* b, float* c) {
	c[0] = a[1] * b[2] - a[2] * b[1];
 800140e:	edd0 7a01 	vldr	s15, [r0, #4]
 8001412:	ed91 7a02 	vldr	s14, [r1, #8]
 8001416:	ee67 7a87 	vmul.f32	s15, s15, s14
 800141a:	ed90 7a02 	vldr	s14, [r0, #8]
 800141e:	edd1 6a01 	vldr	s13, [r1, #4]
 8001422:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001426:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800142a:	edc2 7a00 	vstr	s15, [r2]
	c[1] = a[2] * b[0] - a[0] * b[2];
 800142e:	edd0 7a02 	vldr	s15, [r0, #8]
 8001432:	ed91 7a00 	vldr	s14, [r1]
 8001436:	ee67 7a87 	vmul.f32	s15, s15, s14
 800143a:	ed90 7a00 	vldr	s14, [r0]
 800143e:	edd1 6a02 	vldr	s13, [r1, #8]
 8001442:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001446:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800144a:	edc2 7a01 	vstr	s15, [r2, #4]
	c[2] = a[0] * b[1] - a[1] * b[0];
 800144e:	edd0 7a00 	vldr	s15, [r0]
 8001452:	ed91 7a01 	vldr	s14, [r1, #4]
 8001456:	ee67 7a87 	vmul.f32	s15, s15, s14
 800145a:	ed90 7a01 	vldr	s14, [r0, #4]
 800145e:	edd1 6a00 	vldr	s13, [r1]
 8001462:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001466:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800146a:	edc2 7a02 	vstr	s15, [r2, #8]
}
 800146e:	4770      	bx	lr

08001470 <vec_mag_f32>:

float vec_mag_f32(float* vec) {
	float mag = (vec[0]*vec[0]) + (vec[1]*vec[1]) + (vec[2]*vec[2]);
 8001470:	ed90 0a00 	vldr	s0, [r0]
 8001474:	ee20 0a00 	vmul.f32	s0, s0, s0
 8001478:	edd0 7a01 	vldr	s15, [r0, #4]
 800147c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001480:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001484:	edd0 7a02 	vldr	s15, [r0, #8]
 8001488:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800148c:	ee30 0a27 	vadd.f32	s0, s0, s15
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001490:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001498:	db03      	blt.n	80014a2 <vec_mag_f32+0x32>
float vec_mag_f32(float* vec) {
 800149a:	b508      	push	{r3, lr}
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 800149c:	f003 ff56 	bl	800534c <sqrtf>
	arm_sqrt_f32(mag, &mag);
	return mag;
}
 80014a0:	bd08      	pop	{r3, pc}

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 80014a2:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80014a8 <vec_mag_f32+0x38>
 80014a6:	4770      	bx	lr
 80014a8:	00000000 	.word	0x00000000

080014ac <calculateAvgAngularRate>:
		SensorData* IMU2_data) {
 80014ac:	b510      	push	{r4, lr}
	getNextGyroReading(IMU0_data, IMU1_data, IMU2_data, w_avg_b0_f32);
 80014ae:	4c05      	ldr	r4, [pc, #20]	; (80014c4 <calculateAvgAngularRate+0x18>)
 80014b0:	4623      	mov	r3, r4
 80014b2:	f7ff fe17 	bl	80010e4 <getNextGyroReading>
	w_avg_b0_mag = vec_mag_f32(w_avg_b0_f32);
 80014b6:	4620      	mov	r0, r4
 80014b8:	f7ff ffda 	bl	8001470 <vec_mag_f32>
 80014bc:	4b02      	ldr	r3, [pc, #8]	; (80014c8 <calculateAvgAngularRate+0x1c>)
 80014be:	ed83 0a00 	vstr	s0, [r3]
}
 80014c2:	bd10      	pop	{r4, pc}
 80014c4:	20000118 	.word	0x20000118
 80014c8:	20000124 	.word	0x20000124
 80014cc:	00000000 	.word	0x00000000

080014d0 <calculatePosition>:
void calculatePosition(SensorData* IMU0_data, SensorData* IMU1_data, SensorData* IMU2_data, float timeDelta) {
 80014d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014d4:	ed2d 8b02 	vpush	{d8}
 80014d8:	b085      	sub	sp, #20
 80014da:	4606      	mov	r6, r0
 80014dc:	460d      	mov	r5, r1
 80014de:	4614      	mov	r4, r2
 80014e0:	ee10 7a10 	vmov	r7, s0
	calculateAvgAngularRate(IMU0_data, IMU1_data, IMU2_data);
 80014e4:	f7ff ffe2 	bl	80014ac <calculateAvgAngularRate>
	averageAcc[0] = (IMU0_data->XL_X + IMU1_data->XL_X + IMU2_data->XL_X) / 3;
 80014e8:	edd6 7a00 	vldr	s15, [r6]
 80014ec:	ed95 7a00 	vldr	s14, [r5]
 80014f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014f4:	ed94 7a00 	vldr	s14, [r4]
 80014f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014fc:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001500:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001504:	edcd 6a01 	vstr	s13, [sp, #4]
	averageAcc[1] = (IMU0_data->XL_Y + IMU1_data->XL_Y + IMU2_data->XL_Y) / 3;
 8001508:	edd6 7a01 	vldr	s15, [r6, #4]
 800150c:	edd5 6a01 	vldr	s13, [r5, #4]
 8001510:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001514:	edd4 6a01 	vldr	s13, [r4, #4]
 8001518:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800151c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001520:	edcd 6a02 	vstr	s13, [sp, #8]
	averageAcc[2] = (IMU0_data->XL_Z + IMU1_data->XL_Z + IMU2_data->XL_Z) / 3;
 8001524:	edd6 7a02 	vldr	s15, [r6, #8]
 8001528:	edd5 6a02 	vldr	s13, [r5, #8]
 800152c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001530:	edd4 6a02 	vldr	s13, [r4, #8]
 8001534:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001538:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800153c:	edcd 6a03 	vstr	s13, [sp, #12]
	detectZUPTPhase();
 8001540:	f7ff fe6a 	bl	8001218 <detectZUPTPhase>
	if (curr_phase == SWING) {
 8001544:	4b6a      	ldr	r3, [pc, #424]	; (80016f0 <calculatePosition+0x220>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	f040 80c0 	bne.w	80016ce <calculatePosition+0x1fe>
		if(w_avg_b0_f32[2] > Z_TURN_THRESHOLD && averageAcc[0] < xOffset - 0.07){
 800154e:	4b69      	ldr	r3, [pc, #420]	; (80016f4 <calculatePosition+0x224>)
 8001550:	ed93 8a02 	vldr	s16, [r3, #8]
 8001554:	eef2 7a0a 	vmov.f32	s15, #42	; 0x41500000  13.0
 8001558:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800155c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001560:	dd2a      	ble.n	80015b8 <calculatePosition+0xe8>
 8001562:	9801      	ldr	r0, [sp, #4]
 8001564:	f7fe ffe8 	bl	8000538 <__aeabi_f2d>
 8001568:	4604      	mov	r4, r0
 800156a:	460d      	mov	r5, r1
 800156c:	4b62      	ldr	r3, [pc, #392]	; (80016f8 <calculatePosition+0x228>)
 800156e:	6818      	ldr	r0, [r3, #0]
 8001570:	f7fe ffe2 	bl	8000538 <__aeabi_f2d>
 8001574:	a35a      	add	r3, pc, #360	; (adr r3, 80016e0 <calculatePosition+0x210>)
 8001576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157a:	f7fe fe7d 	bl	8000278 <__aeabi_dsub>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4620      	mov	r0, r4
 8001584:	4629      	mov	r1, r5
 8001586:	f7ff faa1 	bl	8000acc <__aeabi_dcmplt>
 800158a:	b1a8      	cbz	r0, 80015b8 <calculatePosition+0xe8>
			if(upDownCounter > 4 ){
 800158c:	4b5b      	ldr	r3, [pc, #364]	; (80016fc <calculatePosition+0x22c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b04      	cmp	r3, #4
 8001592:	dc0c      	bgt.n	80015ae <calculatePosition+0xde>
			upDownCounter+= 2;
 8001594:	4a59      	ldr	r2, [pc, #356]	; (80016fc <calculatePosition+0x22c>)
 8001596:	6813      	ldr	r3, [r2, #0]
 8001598:	3302      	adds	r3, #2
 800159a:	6013      	str	r3, [r2, #0]
			if(upDownCounter > upDownSaturation) upDownCounter = upDownSaturation;
 800159c:	4a58      	ldr	r2, [pc, #352]	; (8001700 <calculatePosition+0x230>)
 800159e:	f992 2000 	ldrsb.w	r2, [r2]
 80015a2:	4293      	cmp	r3, r2
 80015a4:	f340 8096 	ble.w	80016d4 <calculatePosition+0x204>
 80015a8:	4b54      	ldr	r3, [pc, #336]	; (80016fc <calculatePosition+0x22c>)
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	e092      	b.n	80016d4 <calculatePosition+0x204>
				updateDirection(timeDelta);
 80015ae:	ee00 7a10 	vmov	s0, r7
 80015b2:	f7ff fd33 	bl	800101c <updateDirection>
 80015b6:	e7ed      	b.n	8001594 <calculatePosition+0xc4>
		else if(w_avg_b0_f32[2] < -1*Z_TURN_THRESHOLD && averageAcc[0] > xOffset + 0.07){
 80015b8:	eefa 7a0a 	vmov.f32	s15, #170	; 0xc1500000 -13.0
 80015bc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80015c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c4:	d52b      	bpl.n	800161e <calculatePosition+0x14e>
 80015c6:	9801      	ldr	r0, [sp, #4]
 80015c8:	f7fe ffb6 	bl	8000538 <__aeabi_f2d>
 80015cc:	4604      	mov	r4, r0
 80015ce:	460d      	mov	r5, r1
 80015d0:	4b49      	ldr	r3, [pc, #292]	; (80016f8 <calculatePosition+0x228>)
 80015d2:	6818      	ldr	r0, [r3, #0]
 80015d4:	f7fe ffb0 	bl	8000538 <__aeabi_f2d>
 80015d8:	a341      	add	r3, pc, #260	; (adr r3, 80016e0 <calculatePosition+0x210>)
 80015da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015de:	f7fe fe4d 	bl	800027c <__adddf3>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4620      	mov	r0, r4
 80015e8:	4629      	mov	r1, r5
 80015ea:	f7ff fa8d 	bl	8000b08 <__aeabi_dcmpgt>
 80015ee:	b1b0      	cbz	r0, 800161e <calculatePosition+0x14e>
			if(upDownCounter < -4 ){
 80015f0:	4b42      	ldr	r3, [pc, #264]	; (80016fc <calculatePosition+0x22c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f113 0f04 	cmn.w	r3, #4
 80015f8:	db0c      	blt.n	8001614 <calculatePosition+0x144>
			upDownCounter-=2;
 80015fa:	4a40      	ldr	r2, [pc, #256]	; (80016fc <calculatePosition+0x22c>)
 80015fc:	6813      	ldr	r3, [r2, #0]
 80015fe:	3b02      	subs	r3, #2
 8001600:	6013      	str	r3, [r2, #0]
			if(upDownCounter < -1*upDownSaturation) upDownCounter = -1*upDownSaturation;
 8001602:	4a3f      	ldr	r2, [pc, #252]	; (8001700 <calculatePosition+0x230>)
 8001604:	f992 2000 	ldrsb.w	r2, [r2]
 8001608:	4252      	negs	r2, r2
 800160a:	4293      	cmp	r3, r2
 800160c:	da62      	bge.n	80016d4 <calculatePosition+0x204>
 800160e:	4b3b      	ldr	r3, [pc, #236]	; (80016fc <calculatePosition+0x22c>)
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	e05f      	b.n	80016d4 <calculatePosition+0x204>
				updateDirection(timeDelta);
 8001614:	ee00 7a10 	vmov	s0, r7
 8001618:	f7ff fd00 	bl	800101c <updateDirection>
 800161c:	e7ed      	b.n	80015fa <calculatePosition+0x12a>
		else if(vec_mag_f32(averageAcc) >  10.5){
 800161e:	a801      	add	r0, sp, #4
 8001620:	f7ff ff26 	bl	8001470 <vec_mag_f32>
 8001624:	eef2 7a05 	vmov.f32	s15, #37	; 0x41280000  10.5
 8001628:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800162c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001630:	dd50      	ble.n	80016d4 <calculatePosition+0x204>
			pos.X += VELOCITY_ADJUSTMENT*AVG_VELOCITY*cosf(heading*deg2rad)*timeDelta;
 8001632:	4b34      	ldr	r3, [pc, #208]	; (8001704 <calculatePosition+0x234>)
 8001634:	ed93 8a00 	vldr	s16, [r3]
 8001638:	eddf 7a33 	vldr	s15, [pc, #204]	; 8001708 <calculatePosition+0x238>
 800163c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8001640:	eeb0 0a48 	vmov.f32	s0, s16
 8001644:	f003 fdd4 	bl	80051f0 <cosf>
 8001648:	ee10 0a10 	vmov	r0, s0
 800164c:	f7fe ff74 	bl	8000538 <__aeabi_f2d>
 8001650:	a325      	add	r3, pc, #148	; (adr r3, 80016e8 <calculatePosition+0x218>)
 8001652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001656:	f7fe ffc7 	bl	80005e8 <__aeabi_dmul>
 800165a:	4604      	mov	r4, r0
 800165c:	460d      	mov	r5, r1
 800165e:	4638      	mov	r0, r7
 8001660:	f7fe ff6a 	bl	8000538 <__aeabi_f2d>
 8001664:	4606      	mov	r6, r0
 8001666:	460f      	mov	r7, r1
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4620      	mov	r0, r4
 800166e:	4629      	mov	r1, r5
 8001670:	f7fe ffba 	bl	80005e8 <__aeabi_dmul>
 8001674:	4680      	mov	r8, r0
 8001676:	4689      	mov	r9, r1
 8001678:	4c24      	ldr	r4, [pc, #144]	; (800170c <calculatePosition+0x23c>)
 800167a:	6820      	ldr	r0, [r4, #0]
 800167c:	f7fe ff5c 	bl	8000538 <__aeabi_f2d>
 8001680:	4642      	mov	r2, r8
 8001682:	464b      	mov	r3, r9
 8001684:	f7fe fdfa 	bl	800027c <__adddf3>
 8001688:	f7ff fa48 	bl	8000b1c <__aeabi_d2f>
 800168c:	6020      	str	r0, [r4, #0]
			pos.Y += VELOCITY_ADJUSTMENT*AVG_VELOCITY*sinf(heading*deg2rad)*timeDelta;
 800168e:	eeb0 0a48 	vmov.f32	s0, s16
 8001692:	f003 fe15 	bl	80052c0 <sinf>
 8001696:	ee10 0a10 	vmov	r0, s0
 800169a:	f7fe ff4d 	bl	8000538 <__aeabi_f2d>
 800169e:	a312      	add	r3, pc, #72	; (adr r3, 80016e8 <calculatePosition+0x218>)
 80016a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a4:	f7fe ffa0 	bl	80005e8 <__aeabi_dmul>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4630      	mov	r0, r6
 80016ae:	4639      	mov	r1, r7
 80016b0:	f7fe ff9a 	bl	80005e8 <__aeabi_dmul>
 80016b4:	4606      	mov	r6, r0
 80016b6:	460f      	mov	r7, r1
 80016b8:	6860      	ldr	r0, [r4, #4]
 80016ba:	f7fe ff3d 	bl	8000538 <__aeabi_f2d>
 80016be:	4632      	mov	r2, r6
 80016c0:	463b      	mov	r3, r7
 80016c2:	f7fe fddb 	bl	800027c <__adddf3>
 80016c6:	f7ff fa29 	bl	8000b1c <__aeabi_d2f>
 80016ca:	6060      	str	r0, [r4, #4]
 80016cc:	e002      	b.n	80016d4 <calculatePosition+0x204>
		upDownCounter = 0;
 80016ce:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <calculatePosition+0x22c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
}
 80016d4:	b005      	add	sp, #20
 80016d6:	ecbd 8b02 	vpop	{d8}
 80016da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80016de:	bf00      	nop
 80016e0:	1eb851ec 	.word	0x1eb851ec
 80016e4:	3fb1eb85 	.word	0x3fb1eb85
 80016e8:	ef34d6a1 	.word	0xef34d6a1
 80016ec:	3fe74538 	.word	0x3fe74538
 80016f0:	20000000 	.word	0x20000000
 80016f4:	20000118 	.word	0x20000118
 80016f8:	20000138 	.word	0x20000138
 80016fc:	20000114 	.word	0x20000114
 8001700:	20000014 	.word	0x20000014
 8001704:	200000fc 	.word	0x200000fc
 8001708:	3c8efa35 	.word	0x3c8efa35
 800170c:	20000108 	.word	0x20000108

08001710 <initQuaternion>:
	float bData[3] = {b->pData[0], b->pData[1], b->pData[2]};

	cross_f32(aData, bData, c->pData);
}

void initQuaternion(SensorData* IMU0_data, SensorData* IMU1_data, SensorData* IMU2_data) {
 8001710:	b5d0      	push	{r4, r6, r7, lr}
 8001712:	ed2d 8b02 	vpush	{d8}
 8001716:	b092      	sub	sp, #72	; 0x48
	float avg_XL[3];
	avg_XL[0] = (IMU0_data->XL_X + IMU1_data->XL_X + IMU2_data->XL_X) / 3;
 8001718:	edd0 7a00 	vldr	s15, [r0]
 800171c:	ed91 7a00 	vldr	s14, [r1]
 8001720:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001724:	ed92 7a00 	vldr	s14, [r2]
 8001728:	ee77 7a87 	vadd.f32	s15, s15, s14
 800172c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001730:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001734:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
	avg_XL[1] = (IMU0_data->XL_Y + IMU1_data->XL_Y + IMU2_data->XL_Y) / 3;
 8001738:	edd0 7a01 	vldr	s15, [r0, #4]
 800173c:	edd1 6a01 	vldr	s13, [r1, #4]
 8001740:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001744:	edd2 6a01 	vldr	s13, [r2, #4]
 8001748:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800174c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001750:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
	avg_XL[2] = (IMU0_data->XL_Z + IMU1_data->XL_Z + IMU2_data->XL_Z) / 3;
 8001754:	edd0 7a02 	vldr	s15, [r0, #8]
 8001758:	edd1 6a02 	vldr	s13, [r1, #8]
 800175c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001760:	edd2 6a02 	vldr	s13, [r2, #8]
 8001764:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001768:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800176c:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44

	float mag_avg_XL = vec_mag_f32(avg_XL);
 8001770:	a80f      	add	r0, sp, #60	; 0x3c
 8001772:	f7ff fe7d 	bl	8001470 <vec_mag_f32>

	// Normalize average acceleration vector
	avg_XL[0] /= mag_avg_XL;
 8001776:	ed9d 7a0f 	vldr	s14, [sp, #60]	; 0x3c
 800177a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800177e:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
	avg_XL[1] /= mag_avg_XL;
 8001782:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
 8001786:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800178a:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
	avg_XL[2] /= mag_avg_XL;
 800178e:	ed9d 7a11 	vldr	s14, [sp, #68]	; 0x44
 8001792:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8001796:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44

	float norm_g[3] = {0,0,1}; // Normalized vector for g_nav
 800179a:	2300      	movs	r3, #0
 800179c:	930c      	str	r3, [sp, #48]	; 0x30
 800179e:	930d      	str	r3, [sp, #52]	; 0x34
 80017a0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80017a4:	930e      	str	r3, [sp, #56]	; 0x38

	// q = [1+dot(r, r') cross(r, r') --> From conjugation: r' = q x [0 r] x q*

	float dot_prod = dot_f32(avg_XL, norm_g);
 80017a6:	a90c      	add	r1, sp, #48	; 0x30
 80017a8:	a80f      	add	r0, sp, #60	; 0x3c
 80017aa:	f7ff fe19 	bl	80013e0 <dot_f32>
 80017ae:	ee10 4a10 	vmov	r4, s0
	float cross_prod[3];
	cross_f32(avg_XL, norm_g, cross_prod);
 80017b2:	aa09      	add	r2, sp, #36	; 0x24
 80017b4:	a90c      	add	r1, sp, #48	; 0x30
 80017b6:	a80f      	add	r0, sp, #60	; 0x3c
 80017b8:	f7ff fe29 	bl	800140e <cross_f32>

	if (dot_prod > 0.999999) {
 80017bc:	4620      	mov	r0, r4
 80017be:	f7fe febb 	bl	8000538 <__aeabi_f2d>
 80017c2:	4606      	mov	r6, r0
 80017c4:	460f      	mov	r7, r1
 80017c6:	a33b      	add	r3, pc, #236	; (adr r3, 80018b4 <initQuaternion+0x1a4>)
 80017c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017cc:	f7ff f99c 	bl	8000b08 <__aeabi_dcmpgt>
 80017d0:	b180      	cbz	r0, 80017f4 <initQuaternion+0xe4>
		q_f32[0] = 1;
 80017d2:	4b37      	ldr	r3, [pc, #220]	; (80018b0 <initQuaternion+0x1a0>)
 80017d4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80017d8:	601a      	str	r2, [r3, #0]
		q_f32[1] = 0;
 80017da:	2200      	movs	r2, #0
 80017dc:	605a      	str	r2, [r3, #4]
		q_f32[2] = 0;
 80017de:	609a      	str	r2, [r3, #8]
		q_f32[3] = 0;
 80017e0:	60da      	str	r2, [r3, #12]
		q_f32[2] = cross_prod[1];
		q_f32[3] = cross_prod[2];

    }

	arm_quaternion_normalize_f32(q_f32, q_f32, 1); // normalize initial quaternion
 80017e2:	4833      	ldr	r0, [pc, #204]	; (80018b0 <initQuaternion+0x1a0>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	4601      	mov	r1, r0
 80017e8:	f002 fc69 	bl	80040be <arm_quaternion_normalize_f32>
}
 80017ec:	b012      	add	sp, #72	; 0x48
 80017ee:	ecbd 8b02 	vpop	{d8}
 80017f2:	bdd0      	pop	{r4, r6, r7, pc}
	} else if (dot_prod < -0.999999) {
 80017f4:	a32a      	add	r3, pc, #168	; (adr r3, 80018a0 <initQuaternion+0x190>)
 80017f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fa:	4630      	mov	r0, r6
 80017fc:	4639      	mov	r1, r7
 80017fe:	f7ff f965 	bl	8000acc <__aeabi_dcmplt>
 8001802:	b978      	cbnz	r0, 8001824 <initQuaternion+0x114>
		q_f32[0] = 1 + dot_prod;
 8001804:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001808:	ee07 4a10 	vmov	s14, r4
 800180c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001810:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <initQuaternion+0x1a0>)
 8001812:	edc3 7a00 	vstr	s15, [r3]
		q_f32[1] = cross_prod[0];
 8001816:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001818:	605a      	str	r2, [r3, #4]
		q_f32[2] = cross_prod[1];
 800181a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800181c:	609a      	str	r2, [r3, #8]
		q_f32[3] = cross_prod[2];
 800181e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	e7de      	b.n	80017e2 <initQuaternion+0xd2>
		float xUnit[3] = {1,0,0};
 8001824:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001828:	9200      	str	r2, [sp, #0]
 800182a:	2300      	movs	r3, #0
 800182c:	9301      	str	r3, [sp, #4]
 800182e:	9302      	str	r3, [sp, #8]
		float yUnit[3] = {0,1,0};
 8001830:	9303      	str	r3, [sp, #12]
 8001832:	9204      	str	r2, [sp, #16]
 8001834:	9305      	str	r3, [sp, #20]
        cross_f32(xUnit, avg_XL, tempVec);
 8001836:	aa06      	add	r2, sp, #24
 8001838:	a90f      	add	r1, sp, #60	; 0x3c
 800183a:	4668      	mov	r0, sp
 800183c:	f7ff fde7 	bl	800140e <cross_f32>
        float tempVecMag = vec_mag_f32(tempVec);
 8001840:	a806      	add	r0, sp, #24
 8001842:	f7ff fe15 	bl	8001470 <vec_mag_f32>
 8001846:	eeb0 8a40 	vmov.f32	s16, s0
        if (tempVecMag < 0.000001) {
 800184a:	ee10 0a10 	vmov	r0, s0
 800184e:	f7fe fe73 	bl	8000538 <__aeabi_f2d>
 8001852:	a315      	add	r3, pc, #84	; (adr r3, 80018a8 <initQuaternion+0x198>)
 8001854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001858:	f7ff f938 	bl	8000acc <__aeabi_dcmplt>
 800185c:	b9a8      	cbnz	r0, 800188a <initQuaternion+0x17a>
        q_f32[0] = 0;
 800185e:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <initQuaternion+0x1a0>)
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
        q_f32[1] = tempVec[0] / tempVecMag;
 8001864:	ed9d 7a06 	vldr	s14, [sp, #24]
 8001868:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800186c:	edc3 7a01 	vstr	s15, [r3, #4]
        q_f32[2] = tempVec[1] / tempVecMag;
 8001870:	ed9d 7a07 	vldr	s14, [sp, #28]
 8001874:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8001878:	edc3 7a02 	vstr	s15, [r3, #8]
        q_f32[3] = tempVec[2] / tempVecMag;
 800187c:	ed9d 7a08 	vldr	s14, [sp, #32]
 8001880:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8001884:	edc3 7a03 	vstr	s15, [r3, #12]
 8001888:	e7ab      	b.n	80017e2 <initQuaternion+0xd2>
            cross_f32(yUnit, avg_XL, tempVec);
 800188a:	aa06      	add	r2, sp, #24
 800188c:	a90f      	add	r1, sp, #60	; 0x3c
 800188e:	a803      	add	r0, sp, #12
 8001890:	f7ff fdbd 	bl	800140e <cross_f32>
			tempVecMag = vec_mag_f32(tempVec);
 8001894:	a806      	add	r0, sp, #24
 8001896:	f7ff fdeb 	bl	8001470 <vec_mag_f32>
 800189a:	eeb0 8a40 	vmov.f32	s16, s0
 800189e:	e7de      	b.n	800185e <initQuaternion+0x14e>
 80018a0:	e7210be9 	.word	0xe7210be9
 80018a4:	bfeffffd 	.word	0xbfeffffd
 80018a8:	a0b5ed8d 	.word	0xa0b5ed8d
 80018ac:	3eb0c6f7 	.word	0x3eb0c6f7
 80018b0:	20000004 	.word	0x20000004
 80018b4:	e7210be9 	.word	0xe7210be9
 80018b8:	3feffffd 	.word	0x3feffffd

080018bc <init_heuristic_processing>:
void init_heuristic_processing(SensorData* IMU0_data,  SensorData* IMU1_data,  SensorData* IMU2_data) {
 80018bc:	b570      	push	{r4, r5, r6, lr}
 80018be:	4606      	mov	r6, r0
 80018c0:	460d      	mov	r5, r1
 80018c2:	4614      	mov	r4, r2
	initZUPT();
 80018c4:	f7ff fc8e 	bl	80011e4 <initZUPT>
	initRingBuffers(IMU0_data, IMU1_data, IMU2_data);
 80018c8:	4622      	mov	r2, r4
 80018ca:	4629      	mov	r1, r5
 80018cc:	4630      	mov	r0, r6
 80018ce:	f7ff fd3d 	bl	800134c <initRingBuffers>
	initQuaternion(IMU0_data, IMU1_data, IMU2_data);
 80018d2:	4622      	mov	r2, r4
 80018d4:	4629      	mov	r1, r5
 80018d6:	4630      	mov	r0, r6
 80018d8:	f7ff ff1a 	bl	8001710 <initQuaternion>
	xOffset = (IMU0_data->XL_X + IMU1_data->XL_X + IMU2_data->XL_X) / 3;
 80018dc:	edd6 7a00 	vldr	s15, [r6]
 80018e0:	ed95 7a00 	vldr	s14, [r5]
 80018e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018e8:	ed94 7a00 	vldr	s14, [r4]
 80018ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018f0:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80018f4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80018f8:	4b01      	ldr	r3, [pc, #4]	; (8001900 <init_heuristic_processing+0x44>)
 80018fa:	ed83 7a00 	vstr	s14, [r3]
}
 80018fe:	bd70      	pop	{r4, r5, r6, pc}
 8001900:	20000138 	.word	0x20000138

08001904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001908:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190a:	2400      	movs	r4, #0
 800190c:	9403      	str	r4, [sp, #12]
 800190e:	9404      	str	r4, [sp, #16]
 8001910:	9405      	str	r4, [sp, #20]
 8001912:	9406      	str	r4, [sp, #24]
 8001914:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001916:	4b50      	ldr	r3, [pc, #320]	; (8001a58 <MX_GPIO_Init+0x154>)
 8001918:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800191a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800191e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001920:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001922:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001926:	9200      	str	r2, [sp, #0]
 8001928:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800192c:	f042 0201 	orr.w	r2, r2, #1
 8001930:	64da      	str	r2, [r3, #76]	; 0x4c
 8001932:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001934:	f002 0201 	and.w	r2, r2, #1
 8001938:	9201      	str	r2, [sp, #4]
 800193a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800193c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800193e:	f042 0202 	orr.w	r2, r2, #2
 8001942:	64da      	str	r2, [r3, #76]	; 0x4c
 8001944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	9302      	str	r3, [sp, #8]
 800194c:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU1_CS_Pin|IMU2_CS_Pin|IMU3_CS_Pin|FLASH_CS_Pin, GPIO_PIN_RESET);
 800194e:	4e43      	ldr	r6, [pc, #268]	; (8001a5c <MX_GPIO_Init+0x158>)
 8001950:	4622      	mov	r2, r4
 8001952:	f242 0107 	movw	r1, #8199	; 0x2007
 8001956:	4630      	mov	r0, r6
 8001958:	f000 fd92 	bl	8002480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XBEE_CS_GPIO_Port, XBEE_CS_Pin, GPIO_PIN_RESET);
 800195c:	4622      	mov	r2, r4
 800195e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001962:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001966:	f000 fd8b 	bl	8002480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_3, GPIO_PIN_RESET);
 800196a:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8001a60 <MX_GPIO_Init+0x15c>
 800196e:	4622      	mov	r2, r4
 8001970:	2108      	movs	r1, #8
 8001972:	4640      	mov	r0, r8
 8001974:	f000 fd84 	bl	8002480 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MAG_INT_Pin MAG_INT_TRG_Pin IMU3_INT1_Pin IMU3_INT2_Pin
                           IMU2_INT1_Pin IMU2_INT2_Pin IMU1_INT1_Pin IMU1_INT2_Pin */
  GPIO_InitStruct.Pin = MAG_INT_Pin|MAG_INT_TRG_Pin|IMU3_INT1_Pin|IMU3_INT2_Pin
 8001978:	f641 631d 	movw	r3, #7709	; 0x1e1d
 800197c:	9303      	str	r3, [sp, #12]
                          |IMU2_INT1_Pin|IMU2_INT2_Pin|IMU1_INT1_Pin|IMU1_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800197e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001982:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001986:	a903      	add	r1, sp, #12
 8001988:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800198c:	f000 fc94 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU1_CS_Pin IMU2_CS_Pin IMU3_CS_Pin FLASH_CS_Pin */
  GPIO_InitStruct.Pin = IMU1_CS_Pin|IMU2_CS_Pin|IMU3_CS_Pin|FLASH_CS_Pin;
 8001990:	f242 0307 	movw	r3, #8199	; 0x2007
 8001994:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001996:	2701      	movs	r7, #1
 8001998:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199e:	a903      	add	r1, sp, #12
 80019a0:	4630      	mov	r0, r6
 80019a2:	f000 fc89 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80019a6:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80019aa:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	f04f 0902 	mov.w	r9, #2
 80019b0:	f8cd 9010 	str.w	r9, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b6:	2503      	movs	r5, #3
 80019b8:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019ba:	2305      	movs	r3, #5
 80019bc:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019be:	a903      	add	r1, sp, #12
 80019c0:	4630      	mov	r0, r6
 80019c2:	f000 fc79 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : XBEE_CS_Pin */
  GPIO_InitStruct.Pin = XBEE_CS_Pin;
 80019c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019ca:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019cc:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(XBEE_CS_GPIO_Port, &GPIO_InitStruct);
 80019d2:	a903      	add	r1, sp, #12
 80019d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019d8:	f000 fc6e 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_ATTN_Pin */
  GPIO_InitStruct.Pin = SPI3_ATTN_Pin;
 80019dc:	2380      	movs	r3, #128	; 0x80
 80019de:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e0:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(SPI3_ATTN_GPIO_Port, &GPIO_InitStruct);
 80019e4:	a903      	add	r1, sp, #12
 80019e6:	4630      	mov	r0, r6
 80019e8:	f000 fc66 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019ec:	2308      	movs	r3, #8
 80019ee:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f0:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019f2:	f8cd 9014 	str.w	r9, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019f8:	a903      	add	r1, sp, #12
 80019fa:	4640      	mov	r0, r8
 80019fc:	f000 fc5c 	bl	80022b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 4, 0);
 8001a00:	4622      	mov	r2, r4
 8001a02:	2104      	movs	r1, #4
 8001a04:	2006      	movs	r0, #6
 8001a06:	f000 fbfd 	bl	8002204 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001a0a:	2006      	movs	r0, #6
 8001a0c:	f000 fc32 	bl	8002274 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 3, 0);
 8001a10:	4622      	mov	r2, r4
 8001a12:	4629      	mov	r1, r5
 8001a14:	2009      	movs	r0, #9
 8001a16:	f000 fbf5 	bl	8002204 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001a1a:	2009      	movs	r0, #9
 8001a1c:	f000 fc2a 	bl	8002274 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 3, 0);
 8001a20:	4622      	mov	r2, r4
 8001a22:	4629      	mov	r1, r5
 8001a24:	200a      	movs	r0, #10
 8001a26:	f000 fbed 	bl	8002204 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001a2a:	200a      	movs	r0, #10
 8001a2c:	f000 fc22 	bl	8002274 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8001a30:	4622      	mov	r2, r4
 8001a32:	4629      	mov	r1, r5
 8001a34:	2017      	movs	r0, #23
 8001a36:	f000 fbe5 	bl	8002204 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a3a:	2017      	movs	r0, #23
 8001a3c:	f000 fc1a 	bl	8002274 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001a40:	4622      	mov	r2, r4
 8001a42:	4629      	mov	r1, r5
 8001a44:	2028      	movs	r0, #40	; 0x28
 8001a46:	f000 fbdd 	bl	8002204 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a4a:	2028      	movs	r0, #40	; 0x28
 8001a4c:	f000 fc12 	bl	8002274 <HAL_NVIC_EnableIRQ>

}
 8001a50:	b009      	add	sp, #36	; 0x24
 8001a52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a56:	bf00      	nop
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	48000400 	.word	0x48000400
 8001a60:	48001c00 	.word	0x48001c00
 8001a64:	00000000 	.word	0x00000000

08001a68 <sendCurrentPosition>:
uint8_t sendCurrentPosition(uint8_t state) {
 8001a68:	b530      	push	{r4, r5, lr}
 8001a6a:	b095      	sub	sp, #84	; 0x54
	float heading = returnCurrentPosition(&pos);
 8001a6c:	a811      	add	r0, sp, #68	; 0x44
 8001a6e:	f7ff fb29 	bl	80010c4 <returnCurrentPosition>
 8001a72:	ed8d 0a03 	vstr	s0, [sp, #12]
	uint32_t IMUX = *(int*)&pos.X;
 8001a76:	9d11      	ldr	r5, [sp, #68]	; 0x44
	uint32_t IMUY = *(int*)&pos.Y;
 8001a78:	9c12      	ldr	r4, [sp, #72]	; 0x48
	uint32_t IMUZ = *(int*)&pos.Z;
 8001a7a:	9813      	ldr	r0, [sp, #76]	; 0x4c
	uint32_t quatW = *(int*)&heading; // x_opt
 8001a7c:	9903      	ldr	r1, [sp, #12]
	for (i = 0; i < 3; ++i) {
 8001a7e:	2200      	movs	r2, #0
 8001a80:	e00a      	b.n	8001a98 <sendCurrentPosition+0x30>
	  data_buf[i] = (IMUX >> (3-i)*8) & 0xFF;
 8001a82:	f1c2 0303 	rsb	r3, r2, #3
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	fa25 f303 	lsr.w	r3, r5, r3
 8001a8c:	f102 0c50 	add.w	ip, r2, #80	; 0x50
 8001a90:	44ec      	add	ip, sp
 8001a92:	f80c 3c1c 	strb.w	r3, [ip, #-28]
	for (i = 0; i < 3; ++i) {
 8001a96:	3201      	adds	r2, #1
 8001a98:	2a02      	cmp	r2, #2
 8001a9a:	ddf2      	ble.n	8001a82 <sendCurrentPosition+0x1a>
	for (i = 0; i < 3; ++i) {
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	e00b      	b.n	8001ab8 <sendCurrentPosition+0x50>
	  data_buf[i+4] = (IMUY >> (3-i)*8) & 0xFF;
 8001aa0:	f1c2 0303 	rsb	r3, r2, #3
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	fa24 f303 	lsr.w	r3, r4, r3
 8001aaa:	f102 0554 	add.w	r5, r2, #84	; 0x54
 8001aae:	eb0d 0c05 	add.w	ip, sp, r5
 8001ab2:	f80c 3c1c 	strb.w	r3, [ip, #-28]
	for (i = 0; i < 3; ++i) {
 8001ab6:	3201      	adds	r2, #1
 8001ab8:	2a02      	cmp	r2, #2
 8001aba:	ddf1      	ble.n	8001aa0 <sendCurrentPosition+0x38>
	for (i = 0; i < 3; ++i) {
 8001abc:	2200      	movs	r2, #0
 8001abe:	e00b      	b.n	8001ad8 <sendCurrentPosition+0x70>
	  data_buf[i+8] = (IMUZ >> (3-i)*8) & 0xFF;
 8001ac0:	f1c2 0303 	rsb	r3, r2, #3
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	fa20 f303 	lsr.w	r3, r0, r3
 8001aca:	f102 0458 	add.w	r4, r2, #88	; 0x58
 8001ace:	eb0d 0c04 	add.w	ip, sp, r4
 8001ad2:	f80c 3c1c 	strb.w	r3, [ip, #-28]
	for (i = 0; i < 3; ++i) {
 8001ad6:	3201      	adds	r2, #1
 8001ad8:	2a02      	cmp	r2, #2
 8001ada:	ddf1      	ble.n	8001ac0 <sendCurrentPosition+0x58>
	for (i = 0; i < 3; ++i) {
 8001adc:	2200      	movs	r2, #0
 8001ade:	e00a      	b.n	8001af6 <sendCurrentPosition+0x8e>
	  data_buf[i+12] = (quatW >> (3-i)*8) & 0xFF;
 8001ae0:	f1c2 0303 	rsb	r3, r2, #3
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	fa21 f303 	lsr.w	r3, r1, r3
 8001aea:	f102 005c 	add.w	r0, r2, #92	; 0x5c
 8001aee:	4468      	add	r0, sp
 8001af0:	f800 3c1c 	strb.w	r3, [r0, #-28]
	for (i = 0; i < 3; ++i) {
 8001af4:	3201      	adds	r2, #1
 8001af6:	2a02      	cmp	r2, #2
 8001af8:	ddf2      	ble.n	8001ae0 <sendCurrentPosition+0x78>
	if (ctr == 0) {
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <sendCurrentPosition+0xd8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	b183      	cbz	r3, 8001b22 <sendCurrentPosition+0xba>
	ctr = (ctr + 1) % CTR_MOD;
 8001b00:	480f      	ldr	r0, [pc, #60]	; (8001b40 <sendCurrentPosition+0xd8>)
 8001b02:	6802      	ldr	r2, [r0, #0]
 8001b04:	3201      	adds	r2, #1
 8001b06:	490f      	ldr	r1, [pc, #60]	; (8001b44 <sendCurrentPosition+0xdc>)
 8001b08:	fb81 3102 	smull	r3, r1, r1, r2
 8001b0c:	17d3      	asrs	r3, r2, #31
 8001b0e:	ebc3 0361 	rsb	r3, r3, r1, asr #1
 8001b12:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	6003      	str	r3, [r0, #0]
}
 8001b1a:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8001b1e:	b015      	add	sp, #84	; 0x54
 8001b20:	bd30      	pop	{r4, r5, pc}
		XBeeTransmitReceive(data_buf, xbee_rx_buf, TX_DATA_BUF_SZ, COMPUTER_ADDR);
 8001b22:	a305      	add	r3, pc, #20	; (adr r3, 8001b38 <sendCurrentPosition+0xd0>)
 8001b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b28:	e9cd 2300 	strd	r2, r3, [sp]
 8001b2c:	2210      	movs	r2, #16
 8001b2e:	a905      	add	r1, sp, #20
 8001b30:	a80d      	add	r0, sp, #52	; 0x34
 8001b32:	f7ff fa41 	bl	8000fb8 <XBeeTransmitReceive>
 8001b36:	e7e3      	b.n	8001b00 <sendCurrentPosition+0x98>
 8001b38:	4108245c 	.word	0x4108245c
 8001b3c:	0013a200 	.word	0x0013a200
 8001b40:	2000024c 	.word	0x2000024c
 8001b44:	66666667 	.word	0x66666667

08001b48 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8001b48:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b4a:	e7fe      	b.n	8001b4a <Error_Handler+0x2>

08001b4c <MX_SPI1_Init>:
{
 8001b4c:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 8001b4e:	480f      	ldr	r0, [pc, #60]	; (8001b8c <MX_SPI1_Init+0x40>)
 8001b50:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <MX_SPI1_Init+0x44>)
 8001b52:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b54:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001b58:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b5e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001b62:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b64:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b66:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b6c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001b6e:	2210      	movs	r2, #16
 8001b70:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b72:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b74:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b76:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001b78:	2207      	movs	r2, #7
 8001b7a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b7c:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001b7e:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b80:	f001 fad4 	bl	800312c <HAL_SPI_Init>
 8001b84:	b900      	cbnz	r0, 8001b88 <MX_SPI1_Init+0x3c>
}
 8001b86:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001b88:	f7ff ffde 	bl	8001b48 <Error_Handler>
 8001b8c:	20000250 	.word	0x20000250
 8001b90:	40013000 	.word	0x40013000

08001b94 <MX_SPI3_Init>:
{
 8001b94:	b508      	push	{r3, lr}
  hspi3.Instance = SPI3;
 8001b96:	4810      	ldr	r0, [pc, #64]	; (8001bd8 <MX_SPI3_Init+0x44>)
 8001b98:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <MX_SPI3_Init+0x48>)
 8001b9a:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001b9c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001ba0:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ba6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001baa:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bac:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bae:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001bb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bb4:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001bb6:	2210      	movs	r2, #16
 8001bb8:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bba:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bbc:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bbe:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001bc0:	2207      	movs	r2, #7
 8001bc2:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001bc4:	6303      	str	r3, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bc6:	2308      	movs	r3, #8
 8001bc8:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001bca:	f001 faaf 	bl	800312c <HAL_SPI_Init>
 8001bce:	b900      	cbnz	r0, 8001bd2 <MX_SPI3_Init+0x3e>
}
 8001bd0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001bd2:	f7ff ffb9 	bl	8001b48 <Error_Handler>
 8001bd6:	bf00      	nop
 8001bd8:	200002b4 	.word	0x200002b4
 8001bdc:	40003c00 	.word	0x40003c00

08001be0 <MX_TIM2_Init>:
{
 8001be0:	b500      	push	{lr}
 8001be2:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001be4:	2300      	movs	r3, #0
 8001be6:	930a      	str	r3, [sp, #40]	; 0x28
 8001be8:	930b      	str	r3, [sp, #44]	; 0x2c
 8001bea:	930c      	str	r3, [sp, #48]	; 0x30
 8001bec:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bee:	9307      	str	r3, [sp, #28]
 8001bf0:	9308      	str	r3, [sp, #32]
 8001bf2:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	9301      	str	r3, [sp, #4]
 8001bf8:	9302      	str	r3, [sp, #8]
 8001bfa:	9303      	str	r3, [sp, #12]
 8001bfc:	9304      	str	r3, [sp, #16]
 8001bfe:	9305      	str	r3, [sp, #20]
 8001c00:	9306      	str	r3, [sp, #24]
  htim2.Instance = TIM2;
 8001c02:	481d      	ldr	r0, [pc, #116]	; (8001c78 <MX_TIM2_Init+0x98>)
 8001c04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c08:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 7999;
 8001c0a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001c0e:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c10:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 40;
 8001c12:	2228      	movs	r2, #40	; 0x28
 8001c14:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c16:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c18:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c1a:	f002 f8af 	bl	8003d7c <HAL_TIM_Base_Init>
 8001c1e:	bb00      	cbnz	r0, 8001c62 <MX_TIM2_Init+0x82>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c24:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c26:	a90a      	add	r1, sp, #40	; 0x28
 8001c28:	4813      	ldr	r0, [pc, #76]	; (8001c78 <MX_TIM2_Init+0x98>)
 8001c2a:	f002 f98d 	bl	8003f48 <HAL_TIM_ConfigClockSource>
 8001c2e:	b9d0      	cbnz	r0, 8001c66 <MX_TIM2_Init+0x86>
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001c30:	4811      	ldr	r0, [pc, #68]	; (8001c78 <MX_TIM2_Init+0x98>)
 8001c32:	f002 f8d3 	bl	8003ddc <HAL_TIM_OC_Init>
 8001c36:	b9c0      	cbnz	r0, 8001c6a <MX_TIM2_Init+0x8a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c3c:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c3e:	a907      	add	r1, sp, #28
 8001c40:	480d      	ldr	r0, [pc, #52]	; (8001c78 <MX_TIM2_Init+0x98>)
 8001c42:	f002 fa01 	bl	8004048 <HAL_TIMEx_MasterConfigSynchronization>
 8001c46:	b990      	cbnz	r0, 8001c6e <MX_TIM2_Init+0x8e>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001c48:	2200      	movs	r2, #0
 8001c4a:	9200      	str	r2, [sp, #0]
  sConfigOC.Pulse = 0;
 8001c4c:	9201      	str	r2, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c4e:	9202      	str	r2, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c50:	9204      	str	r2, [sp, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c52:	4669      	mov	r1, sp
 8001c54:	4808      	ldr	r0, [pc, #32]	; (8001c78 <MX_TIM2_Init+0x98>)
 8001c56:	f002 f92d 	bl	8003eb4 <HAL_TIM_OC_ConfigChannel>
 8001c5a:	b950      	cbnz	r0, 8001c72 <MX_TIM2_Init+0x92>
}
 8001c5c:	b00f      	add	sp, #60	; 0x3c
 8001c5e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001c62:	f7ff ff71 	bl	8001b48 <Error_Handler>
    Error_Handler();
 8001c66:	f7ff ff6f 	bl	8001b48 <Error_Handler>
    Error_Handler();
 8001c6a:	f7ff ff6d 	bl	8001b48 <Error_Handler>
    Error_Handler();
 8001c6e:	f7ff ff6b 	bl	8001b48 <Error_Handler>
    Error_Handler();
 8001c72:	f7ff ff69 	bl	8001b48 <Error_Handler>
 8001c76:	bf00      	nop
 8001c78:	20000318 	.word	0x20000318

08001c7c <SystemClock_Config>:
{
 8001c7c:	b500      	push	{lr}
 8001c7e:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c80:	2244      	movs	r2, #68	; 0x44
 8001c82:	2100      	movs	r1, #0
 8001c84:	a805      	add	r0, sp, #20
 8001c86:	f002 fae9 	bl	800425c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	9301      	str	r3, [sp, #4]
 8001c90:	9302      	str	r3, [sp, #8]
 8001c92:	9303      	str	r3, [sp, #12]
 8001c94:	9304      	str	r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001c96:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c9a:	f000 fc0d 	bl	80024b8 <HAL_PWREx_ControlVoltageScaling>
 8001c9e:	b9d0      	cbnz	r0, 8001cd6 <SystemClock_Config+0x5a>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001ca0:	2310      	movs	r3, #16
 8001ca2:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8001cac:	2280      	movs	r2, #128	; 0x80
 8001cae:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001cb0:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cb2:	a805      	add	r0, sp, #20
 8001cb4:	f000 fcea 	bl	800268c <HAL_RCC_OscConfig>
 8001cb8:	b978      	cbnz	r0, 8001cda <SystemClock_Config+0x5e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cba:	230f      	movs	r3, #15
 8001cbc:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	9101      	str	r1, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cc2:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cc4:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cc6:	9104      	str	r1, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001cc8:	4668      	mov	r0, sp
 8001cca:	f001 f815 	bl	8002cf8 <HAL_RCC_ClockConfig>
 8001cce:	b930      	cbnz	r0, 8001cde <SystemClock_Config+0x62>
}
 8001cd0:	b017      	add	sp, #92	; 0x5c
 8001cd2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001cd6:	f7ff ff37 	bl	8001b48 <Error_Handler>
    Error_Handler();
 8001cda:	f7ff ff35 	bl	8001b48 <Error_Handler>
    Error_Handler();
 8001cde:	f7ff ff33 	bl	8001b48 <Error_Handler>
	...

08001ce4 <main>:
{
 8001ce4:	b580      	push	{r7, lr}
  HAL_Init();
 8001ce6:	f000 fa3f 	bl	8002168 <HAL_Init>
  SystemClock_Config();
 8001cea:	f7ff ffc7 	bl	8001c7c <SystemClock_Config>
  MX_GPIO_Init();
 8001cee:	f7ff fe09 	bl	8001904 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001cf2:	f7ff ff2b 	bl	8001b4c <MX_SPI1_Init>
  MX_SPI3_Init();
 8001cf6:	f7ff ff4d 	bl	8001b94 <MX_SPI3_Init>
  MX_TIM2_Init();
 8001cfa:	f7ff ff71 	bl	8001be0 <MX_TIM2_Init>
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 8001cfe:	483e      	ldr	r0, [pc, #248]	; (8001df8 <main+0x114>)
 8001d00:	f001 fefa 	bl	8003af8 <HAL_TIM_Base_Start_IT>
 8001d04:	b108      	cbz	r0, 8001d0a <main+0x26>
      Error_Handler();
 8001d06:	f7ff ff1f 	bl	8001b48 <Error_Handler>
  XBEE_SPI = hspi3;
 8001d0a:	2264      	movs	r2, #100	; 0x64
 8001d0c:	493b      	ldr	r1, [pc, #236]	; (8001dfc <main+0x118>)
 8001d0e:	483c      	ldr	r0, [pc, #240]	; (8001e00 <main+0x11c>)
 8001d10:	f002 fa96 	bl	8004240 <memcpy>
  IMU_init(&hspi1, &IMU0, 0);
 8001d14:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8001e20 <main+0x13c>
 8001d18:	4c3a      	ldr	r4, [pc, #232]	; (8001e04 <main+0x120>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	4649      	mov	r1, r9
 8001d1e:	4620      	mov	r0, r4
 8001d20:	f7ff f80a 	bl	8000d38 <IMU_init>
  IMU_init(&hspi1, &IMU1, 1);
 8001d24:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8001e24 <main+0x140>
 8001d28:	2201      	movs	r2, #1
 8001d2a:	4641      	mov	r1, r8
 8001d2c:	4620      	mov	r0, r4
 8001d2e:	f7ff f803 	bl	8000d38 <IMU_init>
  IMU_init(&hspi1, &IMU2, 2);
 8001d32:	4f35      	ldr	r7, [pc, #212]	; (8001e08 <main+0x124>)
 8001d34:	2202      	movs	r2, #2
 8001d36:	4639      	mov	r1, r7
 8001d38:	4620      	mov	r0, r4
 8001d3a:	f7fe fffd 	bl	8000d38 <IMU_init>
  HAL_Delay(500);
 8001d3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d42:	f000 fa39 	bl	80021b8 <HAL_Delay>
  IMU_readSensorData(&IMU0, &IMU0_data);
 8001d46:	4c31      	ldr	r4, [pc, #196]	; (8001e0c <main+0x128>)
 8001d48:	4621      	mov	r1, r4
 8001d4a:	4648      	mov	r0, r9
 8001d4c:	f7fe ff8b 	bl	8000c66 <IMU_readSensorData>
  IMU_readSensorData(&IMU1, &IMU1_data);
 8001d50:	4d2f      	ldr	r5, [pc, #188]	; (8001e10 <main+0x12c>)
 8001d52:	4629      	mov	r1, r5
 8001d54:	4640      	mov	r0, r8
 8001d56:	f7fe ff86 	bl	8000c66 <IMU_readSensorData>
  IMU_readSensorData(&IMU2, &IMU2_data);
 8001d5a:	4e2e      	ldr	r6, [pc, #184]	; (8001e14 <main+0x130>)
 8001d5c:	4631      	mov	r1, r6
 8001d5e:	4638      	mov	r0, r7
 8001d60:	f7fe ff81 	bl	8000c66 <IMU_readSensorData>
  HAL_Delay(500);
 8001d64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d68:	f000 fa26 	bl	80021b8 <HAL_Delay>
  IMU_readSensorData(&IMU0, &IMU0_data);
 8001d6c:	4621      	mov	r1, r4
 8001d6e:	4648      	mov	r0, r9
 8001d70:	f7fe ff79 	bl	8000c66 <IMU_readSensorData>
  IMU_readSensorData(&IMU1, &IMU1_data);
 8001d74:	4629      	mov	r1, r5
 8001d76:	4640      	mov	r0, r8
 8001d78:	f7fe ff75 	bl	8000c66 <IMU_readSensorData>
  IMU_readSensorData(&IMU2, &IMU2_data);
 8001d7c:	4631      	mov	r1, r6
 8001d7e:	4638      	mov	r0, r7
 8001d80:	f7fe ff71 	bl	8000c66 <IMU_readSensorData>
  init_heuristic_processing(&IMU0_data, &IMU1_data, &IMU2_data);
 8001d84:	4632      	mov	r2, r6
 8001d86:	4629      	mov	r1, r5
 8001d88:	4620      	mov	r0, r4
 8001d8a:	f7ff fd97 	bl	80018bc <init_heuristic_processing>
	  if (DRDY_flag || periodic_tx_flag) {
 8001d8e:	4b22      	ldr	r3, [pc, #136]	; (8001e18 <main+0x134>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	b913      	cbnz	r3, 8001d9a <main+0xb6>
 8001d94:	4b21      	ldr	r3, [pc, #132]	; (8001e1c <main+0x138>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	b1e3      	cbz	r3, 8001dd4 <main+0xf0>
			  IMU_readSensorData(&IMU0, &IMU0_data);
 8001d9a:	4c1c      	ldr	r4, [pc, #112]	; (8001e0c <main+0x128>)
 8001d9c:	4621      	mov	r1, r4
 8001d9e:	4820      	ldr	r0, [pc, #128]	; (8001e20 <main+0x13c>)
 8001da0:	f7fe ff61 	bl	8000c66 <IMU_readSensorData>
			  IMU_readSensorData(&IMU1, &IMU1_data);
 8001da4:	4d1a      	ldr	r5, [pc, #104]	; (8001e10 <main+0x12c>)
 8001da6:	4629      	mov	r1, r5
 8001da8:	481e      	ldr	r0, [pc, #120]	; (8001e24 <main+0x140>)
 8001daa:	f7fe ff5c 	bl	8000c66 <IMU_readSensorData>
			  IMU_readSensorData(&IMU2, &IMU2_data);
 8001dae:	4e19      	ldr	r6, [pc, #100]	; (8001e14 <main+0x130>)
 8001db0:	4631      	mov	r1, r6
 8001db2:	4815      	ldr	r0, [pc, #84]	; (8001e08 <main+0x124>)
 8001db4:	f7fe ff57 	bl	8000c66 <IMU_readSensorData>
			  calculatePosition(&IMU0_data, &IMU1_data, &IMU2_data, timeDelta);
 8001db8:	4b1b      	ldr	r3, [pc, #108]	; (8001e28 <main+0x144>)
 8001dba:	ed93 0a00 	vldr	s0, [r3]
 8001dbe:	4632      	mov	r2, r6
 8001dc0:	4629      	mov	r1, r5
 8001dc2:	4620      	mov	r0, r4
 8001dc4:	f7ff fb84 	bl	80014d0 <calculatePosition>
			  DRDY_flag = 0;
 8001dc8:	4b13      	ldr	r3, [pc, #76]	; (8001e18 <main+0x134>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	701a      	strb	r2, [r3, #0]
			  new_data_flag = 1;
 8001dce:	4b17      	ldr	r3, [pc, #92]	; (8001e2c <main+0x148>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	701a      	strb	r2, [r3, #0]
	  if (periodic_tx_flag && new_data_flag) {
 8001dd4:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <main+0x138>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0d8      	beq.n	8001d8e <main+0xaa>
 8001ddc:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <main+0x148>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0d4      	beq.n	8001d8e <main+0xaa>
		  sendCurrentPosition(RUN_STATE);
 8001de4:	2001      	movs	r0, #1
 8001de6:	f7ff fe3f 	bl	8001a68 <sendCurrentPosition>
		  periodic_tx_flag = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	4a0b      	ldr	r2, [pc, #44]	; (8001e1c <main+0x138>)
 8001dee:	7013      	strb	r3, [r2, #0]
		  new_data_flag = 0;
 8001df0:	4a0e      	ldr	r2, [pc, #56]	; (8001e2c <main+0x148>)
 8001df2:	7013      	strb	r3, [r2, #0]
 8001df4:	e7cb      	b.n	8001d8e <main+0xaa>
 8001df6:	bf00      	nop
 8001df8:	20000318 	.word	0x20000318
 8001dfc:	200002b4 	.word	0x200002b4
 8001e00:	200001e8 	.word	0x200001e8
 8001e04:	20000250 	.word	0x20000250
 8001e08:	200001b0 	.word	0x200001b0
 8001e0c:	20000160 	.word	0x20000160
 8001e10:	20000198 	.word	0x20000198
 8001e14:	200001d0 	.word	0x200001d0
 8001e18:	2000013c 	.word	0x2000013c
 8001e1c:	2000001c 	.word	0x2000001c
 8001e20:	20000140 	.word	0x20000140
 8001e24:	20000178 	.word	0x20000178
 8001e28:	20000020 	.word	0x20000020
 8001e2c:	20000364 	.word	0x20000364

08001e30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e30:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <HAL_MspInit+0x2c>)
 8001e34:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e36:	f042 0201 	orr.w	r2, r2, #1
 8001e3a:	661a      	str	r2, [r3, #96]	; 0x60
 8001e3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e3e:	f002 0201 	and.w	r2, r2, #1
 8001e42:	9200      	str	r2, [sp, #0]
 8001e44:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e46:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e48:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e4c:	659a      	str	r2, [r3, #88]	; 0x58
 8001e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e54:	9301      	str	r3, [sp, #4]
 8001e56:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e58:	b002      	add	sp, #8
 8001e5a:	4770      	bx	lr
 8001e5c:	40021000 	.word	0x40021000

08001e60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e60:	b500      	push	{lr}
 8001e62:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	2300      	movs	r3, #0
 8001e66:	9305      	str	r3, [sp, #20]
 8001e68:	9306      	str	r3, [sp, #24]
 8001e6a:	9307      	str	r3, [sp, #28]
 8001e6c:	9308      	str	r3, [sp, #32]
 8001e6e:	9309      	str	r3, [sp, #36]	; 0x24
  if(hspi->Instance==SPI1)
 8001e70:	6803      	ldr	r3, [r0, #0]
 8001e72:	4a25      	ldr	r2, [pc, #148]	; (8001f08 <HAL_SPI_MspInit+0xa8>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d005      	beq.n	8001e84 <HAL_SPI_MspInit+0x24>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 8001e78:	4a24      	ldr	r2, [pc, #144]	; (8001f0c <HAL_SPI_MspInit+0xac>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d023      	beq.n	8001ec6 <HAL_SPI_MspInit+0x66>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001e7e:	b00b      	add	sp, #44	; 0x2c
 8001e80:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e84:	4b22      	ldr	r3, [pc, #136]	; (8001f10 <HAL_SPI_MspInit+0xb0>)
 8001e86:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001e8c:	661a      	str	r2, [r3, #96]	; 0x60
 8001e8e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e90:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001e94:	9201      	str	r2, [sp, #4]
 8001e96:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e9a:	f042 0201 	orr.w	r2, r2, #1
 8001e9e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	9302      	str	r3, [sp, #8]
 8001ea8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8001eaa:	23c2      	movs	r3, #194	; 0xc2
 8001eac:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001eb6:	2305      	movs	r3, #5
 8001eb8:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eba:	a905      	add	r1, sp, #20
 8001ebc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ec0:	f000 f9fa 	bl	80022b8 <HAL_GPIO_Init>
 8001ec4:	e7db      	b.n	8001e7e <HAL_SPI_MspInit+0x1e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ec6:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <HAL_SPI_MspInit+0xb0>)
 8001ec8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001eca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ece:	659a      	str	r2, [r3, #88]	; 0x58
 8001ed0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ed2:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001ed6:	9203      	str	r2, [sp, #12]
 8001ed8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001edc:	f042 0202 	orr.w	r2, r2, #2
 8001ee0:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	9304      	str	r3, [sp, #16]
 8001eea:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001eec:	2338      	movs	r3, #56	; 0x38
 8001eee:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ef8:	2306      	movs	r3, #6
 8001efa:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efc:	a905      	add	r1, sp, #20
 8001efe:	4805      	ldr	r0, [pc, #20]	; (8001f14 <HAL_SPI_MspInit+0xb4>)
 8001f00:	f000 f9da 	bl	80022b8 <HAL_GPIO_Init>
}
 8001f04:	e7bb      	b.n	8001e7e <HAL_SPI_MspInit+0x1e>
 8001f06:	bf00      	nop
 8001f08:	40013000 	.word	0x40013000
 8001f0c:	40003c00 	.word	0x40003c00
 8001f10:	40021000 	.word	0x40021000
 8001f14:	48000400 	.word	0x48000400

08001f18 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8001f18:	6803      	ldr	r3, [r0, #0]
 8001f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f1e:	d000      	beq.n	8001f22 <HAL_TIM_Base_MspInit+0xa>
 8001f20:	4770      	bx	lr
{
 8001f22:	b500      	push	{lr}
 8001f24:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f26:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001f2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f2c:	f042 0201 	orr.w	r2, r2, #1
 8001f30:	659a      	str	r2, [r3, #88]	; 0x58
 8001f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	9301      	str	r3, [sp, #4]
 8001f3a:	9b01      	ldr	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	4611      	mov	r1, r2
 8001f40:	201c      	movs	r0, #28
 8001f42:	f000 f95f 	bl	8002204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f46:	201c      	movs	r0, #28
 8001f48:	f000 f994 	bl	8002274 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f4c:	b003      	add	sp, #12
 8001f4e:	f85d fb04 	ldr.w	pc, [sp], #4

08001f52 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f52:	e7fe      	b.n	8001f52 <NMI_Handler>

08001f54 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f54:	e7fe      	b.n	8001f54 <HardFault_Handler>

08001f56 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f56:	e7fe      	b.n	8001f56 <MemManage_Handler>

08001f58 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f58:	e7fe      	b.n	8001f58 <BusFault_Handler>

08001f5a <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f5a:	e7fe      	b.n	8001f5a <UsageFault_Handler>

08001f5c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f5c:	4770      	bx	lr

08001f5e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f5e:	4770      	bx	lr

08001f60 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f60:	4770      	bx	lr

08001f62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f62:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f64:	f000 f916 	bl	8002194 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f68:	bd08      	pop	{r3, pc}

08001f6a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001f6a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MAG_INT_Pin);
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	f000 fa8d 	bl	800248c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001f72:	bd08      	pop	{r3, pc}

08001f74 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001f74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU3_INT1_Pin);
 8001f76:	2008      	movs	r0, #8
 8001f78:	f000 fa88 	bl	800248c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  DRDY_flag = 1;
 8001f7c:	4b01      	ldr	r3, [pc, #4]	; (8001f84 <EXTI3_IRQHandler+0x10>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI3_IRQn 1 */
}
 8001f82:	bd08      	pop	{r3, pc}
 8001f84:	2000013c 	.word	0x2000013c

08001f88 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001f88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU3_INT2_Pin);
 8001f8a:	2010      	movs	r0, #16
 8001f8c:	f000 fa7e 	bl	800248c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  DRDY_flag = 1;
 8001f90:	4b01      	ldr	r3, [pc, #4]	; (8001f98 <EXTI4_IRQHandler+0x10>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI4_IRQn 1 */
}
 8001f96:	bd08      	pop	{r3, pc}
 8001f98:	2000013c 	.word	0x2000013c

08001f9c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU2_INT1_Pin);
 8001f9e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001fa2:	f000 fa73 	bl	800248c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  DRDY_flag = 1;
 8001fa6:	4b02      	ldr	r3, [pc, #8]	; (8001fb0 <EXTI9_5_IRQHandler+0x14>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001fac:	bd08      	pop	{r3, pc}
 8001fae:	bf00      	nop
 8001fb0:	2000013c 	.word	0x2000013c

08001fb4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fb4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fb6:	4803      	ldr	r0, [pc, #12]	; (8001fc4 <TIM2_IRQHandler+0x10>)
 8001fb8:	f001 fdda 	bl	8003b70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  periodic_tx_flag = 1;
 8001fbc:	4b02      	ldr	r3, [pc, #8]	; (8001fc8 <TIM2_IRQHandler+0x14>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 8001fc2:	bd08      	pop	{r3, pc}
 8001fc4:	20000318 	.word	0x20000318
 8001fc8:	2000001c 	.word	0x2000001c

08001fcc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fcc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU2_INT2_Pin);
 8001fce:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001fd2:	f000 fa5b 	bl	800248c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IMU1_INT1_Pin);
 8001fd6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001fda:	f000 fa57 	bl	800248c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IMU1_INT2_Pin);
 8001fde:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001fe2:	f000 fa53 	bl	800248c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  DRDY_flag = 1;
 8001fe6:	4b02      	ldr	r3, [pc, #8]	; (8001ff0 <EXTI15_10_IRQHandler+0x24>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001fec:	bd08      	pop	{r3, pc}
 8001fee:	bf00      	nop
 8001ff0:	2000013c 	.word	0x2000013c

08001ff4 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	4770      	bx	lr

08001ff8 <_kill>:

int _kill(int pid, int sig)
{
 8001ff8:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ffa:	f002 f8d5 	bl	80041a8 <__errno>
 8001ffe:	2316      	movs	r3, #22
 8002000:	6003      	str	r3, [r0, #0]
  return -1;
}
 8002002:	f04f 30ff 	mov.w	r0, #4294967295
 8002006:	bd08      	pop	{r3, pc}

08002008 <_exit>:

void _exit (int status)
{
 8002008:	b508      	push	{r3, lr}
  _kill(status, -1);
 800200a:	f04f 31ff 	mov.w	r1, #4294967295
 800200e:	f7ff fff3 	bl	8001ff8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002012:	e7fe      	b.n	8002012 <_exit+0xa>

08002014 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002014:	b570      	push	{r4, r5, r6, lr}
 8002016:	460c      	mov	r4, r1
 8002018:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201a:	2500      	movs	r5, #0
 800201c:	e006      	b.n	800202c <_read+0x18>
  {
    *ptr++ = __io_getchar();
 800201e:	f3af 8000 	nop.w
 8002022:	4621      	mov	r1, r4
 8002024:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002028:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 800202a:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800202c:	42b5      	cmp	r5, r6
 800202e:	dbf6      	blt.n	800201e <_read+0xa>
  }

  return len;
}
 8002030:	4630      	mov	r0, r6
 8002032:	bd70      	pop	{r4, r5, r6, pc}

08002034 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002034:	b570      	push	{r4, r5, r6, lr}
 8002036:	460c      	mov	r4, r1
 8002038:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203a:	2500      	movs	r5, #0
 800203c:	e004      	b.n	8002048 <_write+0x14>
  {
    __io_putchar(*ptr++);
 800203e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002042:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002046:	3501      	adds	r5, #1
 8002048:	42b5      	cmp	r5, r6
 800204a:	dbf8      	blt.n	800203e <_write+0xa>
  }
  return len;
}
 800204c:	4630      	mov	r0, r6
 800204e:	bd70      	pop	{r4, r5, r6, pc}

08002050 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8002050:	f04f 30ff 	mov.w	r0, #4294967295
 8002054:	4770      	bx	lr

08002056 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002056:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800205a:	604b      	str	r3, [r1, #4]
  return 0;
}
 800205c:	2000      	movs	r0, #0
 800205e:	4770      	bx	lr

08002060 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002060:	2001      	movs	r0, #1
 8002062:	4770      	bx	lr

08002064 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002064:	2000      	movs	r0, #0
 8002066:	4770      	bx	lr

08002068 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002068:	b510      	push	{r4, lr}
 800206a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800206c:	4a0c      	ldr	r2, [pc, #48]	; (80020a0 <_sbrk+0x38>)
 800206e:	490d      	ldr	r1, [pc, #52]	; (80020a4 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002070:	480d      	ldr	r0, [pc, #52]	; (80020a8 <_sbrk+0x40>)
 8002072:	6800      	ldr	r0, [r0, #0]
 8002074:	b140      	cbz	r0, 8002088 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002076:	480c      	ldr	r0, [pc, #48]	; (80020a8 <_sbrk+0x40>)
 8002078:	6800      	ldr	r0, [r0, #0]
 800207a:	4403      	add	r3, r0
 800207c:	1a52      	subs	r2, r2, r1
 800207e:	4293      	cmp	r3, r2
 8002080:	d806      	bhi.n	8002090 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002082:	4a09      	ldr	r2, [pc, #36]	; (80020a8 <_sbrk+0x40>)
 8002084:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002086:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002088:	4807      	ldr	r0, [pc, #28]	; (80020a8 <_sbrk+0x40>)
 800208a:	4c08      	ldr	r4, [pc, #32]	; (80020ac <_sbrk+0x44>)
 800208c:	6004      	str	r4, [r0, #0]
 800208e:	e7f2      	b.n	8002076 <_sbrk+0xe>
    errno = ENOMEM;
 8002090:	f002 f88a 	bl	80041a8 <__errno>
 8002094:	230c      	movs	r3, #12
 8002096:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002098:	f04f 30ff 	mov.w	r0, #4294967295
 800209c:	e7f3      	b.n	8002086 <_sbrk+0x1e>
 800209e:	bf00      	nop
 80020a0:	20010000 	.word	0x20010000
 80020a4:	00000400 	.word	0x00000400
 80020a8:	20000368 	.word	0x20000368
 80020ac:	20000380 	.word	0x20000380

080020b0 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80020b0:	4a03      	ldr	r2, [pc, #12]	; (80020c0 <SystemInit+0x10>)
 80020b2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80020b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020ba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80020be:	4770      	bx	lr
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020c8:	f7ff fff2 	bl	80020b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020cc:	480c      	ldr	r0, [pc, #48]	; (8002100 <LoopForever+0x6>)
  ldr r1, =_edata
 80020ce:	490d      	ldr	r1, [pc, #52]	; (8002104 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020d0:	4a0d      	ldr	r2, [pc, #52]	; (8002108 <LoopForever+0xe>)
  movs r3, #0
 80020d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020d4:	e002      	b.n	80020dc <LoopCopyDataInit>

080020d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020da:	3304      	adds	r3, #4

080020dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e0:	d3f9      	bcc.n	80020d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020e2:	4a0a      	ldr	r2, [pc, #40]	; (800210c <LoopForever+0x12>)
  ldr r4, =_ebss
 80020e4:	4c0a      	ldr	r4, [pc, #40]	; (8002110 <LoopForever+0x16>)
  movs r3, #0
 80020e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e8:	e001      	b.n	80020ee <LoopFillZerobss>

080020ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020ec:	3204      	adds	r2, #4

080020ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f0:	d3fb      	bcc.n	80020ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020f2:	f002 f871 	bl	80041d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020f6:	f7ff fdf5 	bl	8001ce4 <main>

080020fa <LoopForever>:

LoopForever:
    b LoopForever
 80020fa:	e7fe      	b.n	80020fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80020fc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002104:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8002108:	08006374 	.word	0x08006374
  ldr r2, =_sbss
 800210c:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8002110:	20000380 	.word	0x20000380

08002114 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002114:	e7fe      	b.n	8002114 <ADC1_IRQHandler>
	...

08002118 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002118:	4b10      	ldr	r3, [pc, #64]	; (800215c <HAL_InitTick+0x44>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	b90b      	cbnz	r3, 8002122 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800211e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8002120:	4770      	bx	lr
{
 8002122:	b510      	push	{r4, lr}
 8002124:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002126:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800212a:	fbb0 f3f3 	udiv	r3, r0, r3
 800212e:	4a0c      	ldr	r2, [pc, #48]	; (8002160 <HAL_InitTick+0x48>)
 8002130:	6810      	ldr	r0, [r2, #0]
 8002132:	fbb0 f0f3 	udiv	r0, r0, r3
 8002136:	f000 f8ab 	bl	8002290 <HAL_SYSTICK_Config>
 800213a:	b968      	cbnz	r0, 8002158 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800213c:	2c0f      	cmp	r4, #15
 800213e:	d901      	bls.n	8002144 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8002140:	2001      	movs	r0, #1
 8002142:	e00a      	b.n	800215a <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002144:	2200      	movs	r2, #0
 8002146:	4621      	mov	r1, r4
 8002148:	f04f 30ff 	mov.w	r0, #4294967295
 800214c:	f000 f85a 	bl	8002204 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002150:	4b04      	ldr	r3, [pc, #16]	; (8002164 <HAL_InitTick+0x4c>)
 8002152:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8002154:	2000      	movs	r0, #0
 8002156:	e000      	b.n	800215a <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8002158:	2001      	movs	r0, #1
}
 800215a:	bd10      	pop	{r4, pc}
 800215c:	20000028 	.word	0x20000028
 8002160:	20000024 	.word	0x20000024
 8002164:	2000002c 	.word	0x2000002c

08002168 <HAL_Init>:
{
 8002168:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800216a:	4a09      	ldr	r2, [pc, #36]	; (8002190 <HAL_Init+0x28>)
 800216c:	6813      	ldr	r3, [r2, #0]
 800216e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002172:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002174:	2003      	movs	r0, #3
 8002176:	f000 f833 	bl	80021e0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800217a:	200f      	movs	r0, #15
 800217c:	f7ff ffcc 	bl	8002118 <HAL_InitTick>
 8002180:	b110      	cbz	r0, 8002188 <HAL_Init+0x20>
    status = HAL_ERROR;
 8002182:	2401      	movs	r4, #1
}
 8002184:	4620      	mov	r0, r4
 8002186:	bd10      	pop	{r4, pc}
 8002188:	4604      	mov	r4, r0
    HAL_MspInit();
 800218a:	f7ff fe51 	bl	8001e30 <HAL_MspInit>
 800218e:	e7f9      	b.n	8002184 <HAL_Init+0x1c>
 8002190:	40022000 	.word	0x40022000

08002194 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002194:	4b03      	ldr	r3, [pc, #12]	; (80021a4 <HAL_IncTick+0x10>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	4a03      	ldr	r2, [pc, #12]	; (80021a8 <HAL_IncTick+0x14>)
 800219a:	6811      	ldr	r1, [r2, #0]
 800219c:	440b      	add	r3, r1
 800219e:	6013      	str	r3, [r2, #0]
}
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	20000028 	.word	0x20000028
 80021a8:	2000036c 	.word	0x2000036c

080021ac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80021ac:	4b01      	ldr	r3, [pc, #4]	; (80021b4 <HAL_GetTick+0x8>)
 80021ae:	6818      	ldr	r0, [r3, #0]
}
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	2000036c 	.word	0x2000036c

080021b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021b8:	b538      	push	{r3, r4, r5, lr}
 80021ba:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80021bc:	f7ff fff6 	bl	80021ac <HAL_GetTick>
 80021c0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021c2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80021c6:	d002      	beq.n	80021ce <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 80021c8:	4b04      	ldr	r3, [pc, #16]	; (80021dc <HAL_Delay+0x24>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021ce:	f7ff ffed 	bl	80021ac <HAL_GetTick>
 80021d2:	1b40      	subs	r0, r0, r5
 80021d4:	42a0      	cmp	r0, r4
 80021d6:	d3fa      	bcc.n	80021ce <HAL_Delay+0x16>
  {
  }
}
 80021d8:	bd38      	pop	{r3, r4, r5, pc}
 80021da:	bf00      	nop
 80021dc:	20000028 	.word	0x20000028

080021e0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021e0:	4a07      	ldr	r2, [pc, #28]	; (8002200 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80021e2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021e4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80021e8:	041b      	lsls	r3, r3, #16
 80021ea:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021ec:	0200      	lsls	r0, r0, #8
 80021ee:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021f2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80021f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80021fc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80021fe:	4770      	bx	lr
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002204:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002206:	4b19      	ldr	r3, [pc, #100]	; (800226c <HAL_NVIC_SetPriority+0x68>)
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800220e:	f1c3 0c07 	rsb	ip, r3, #7
 8002212:	f1bc 0f04 	cmp.w	ip, #4
 8002216:	bf28      	it	cs
 8002218:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800221c:	f103 0e04 	add.w	lr, r3, #4
 8002220:	f1be 0f06 	cmp.w	lr, #6
 8002224:	d918      	bls.n	8002258 <HAL_NVIC_SetPriority+0x54>
 8002226:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002228:	f04f 3eff 	mov.w	lr, #4294967295
 800222c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002230:	ea21 010c 	bic.w	r1, r1, ip
 8002234:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002236:	fa0e f303 	lsl.w	r3, lr, r3
 800223a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800223e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002240:	2800      	cmp	r0, #0
 8002242:	db0b      	blt.n	800225c <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002244:	0109      	lsls	r1, r1, #4
 8002246:	b2c9      	uxtb	r1, r1
 8002248:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800224c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002250:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002254:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002258:	2300      	movs	r3, #0
 800225a:	e7e5      	b.n	8002228 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225c:	f000 000f 	and.w	r0, r0, #15
 8002260:	0109      	lsls	r1, r1, #4
 8002262:	b2c9      	uxtb	r1, r1
 8002264:	4b02      	ldr	r3, [pc, #8]	; (8002270 <HAL_NVIC_SetPriority+0x6c>)
 8002266:	5419      	strb	r1, [r3, r0]
 8002268:	e7f4      	b.n	8002254 <HAL_NVIC_SetPriority+0x50>
 800226a:	bf00      	nop
 800226c:	e000ed00 	.word	0xe000ed00
 8002270:	e000ed14 	.word	0xe000ed14

08002274 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002274:	2800      	cmp	r0, #0
 8002276:	db07      	blt.n	8002288 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002278:	f000 021f 	and.w	r2, r0, #31
 800227c:	0940      	lsrs	r0, r0, #5
 800227e:	2301      	movs	r3, #1
 8002280:	4093      	lsls	r3, r2
 8002282:	4a02      	ldr	r2, [pc, #8]	; (800228c <HAL_NVIC_EnableIRQ+0x18>)
 8002284:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	e000e100 	.word	0xe000e100

08002290 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002290:	3801      	subs	r0, #1
 8002292:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002296:	d20b      	bcs.n	80022b0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002298:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800229c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229e:	4a05      	ldr	r2, [pc, #20]	; (80022b4 <HAL_SYSTICK_Config+0x24>)
 80022a0:	21f0      	movs	r1, #240	; 0xf0
 80022a2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a6:	2000      	movs	r0, #0
 80022a8:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022aa:	2207      	movs	r2, #7
 80022ac:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022ae:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80022b0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80022b2:	4770      	bx	lr
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ba:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 80022bc:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022be:	e062      	b.n	8002386 <HAL_GPIO_Init+0xce>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022c0:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022c2:	005e      	lsls	r6, r3, #1
 80022c4:	2403      	movs	r4, #3
 80022c6:	40b4      	lsls	r4, r6
 80022c8:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022cc:	68cc      	ldr	r4, [r1, #12]
 80022ce:	40b4      	lsls	r4, r6
 80022d0:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80022d2:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022d4:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022d6:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022da:	684c      	ldr	r4, [r1, #4]
 80022dc:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80022e0:	409c      	lsls	r4, r3
 80022e2:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 80022e6:	6044      	str	r4, [r0, #4]
 80022e8:	e05e      	b.n	80023a8 <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022ea:	08dd      	lsrs	r5, r3, #3
 80022ec:	3508      	adds	r5, #8
 80022ee:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022f2:	f003 0407 	and.w	r4, r3, #7
 80022f6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80022fa:	240f      	movs	r4, #15
 80022fc:	fa04 f40c 	lsl.w	r4, r4, ip
 8002300:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002304:	690c      	ldr	r4, [r1, #16]
 8002306:	fa04 f40c 	lsl.w	r4, r4, ip
 800230a:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 800230e:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8002312:	e060      	b.n	80023d6 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002314:	2404      	movs	r4, #4
 8002316:	e000      	b.n	800231a <HAL_GPIO_Init+0x62>
 8002318:	2400      	movs	r4, #0
 800231a:	fa04 f40e 	lsl.w	r4, r4, lr
 800231e:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002320:	f10c 0c02 	add.w	ip, ip, #2
 8002324:	4d52      	ldr	r5, [pc, #328]	; (8002470 <HAL_GPIO_Init+0x1b8>)
 8002326:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800232a:	4c52      	ldr	r4, [pc, #328]	; (8002474 <HAL_GPIO_Init+0x1bc>)
 800232c:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 800232e:	43d4      	mvns	r4, r2
 8002330:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002334:	684f      	ldr	r7, [r1, #4]
 8002336:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800233a:	d001      	beq.n	8002340 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 800233c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8002340:	4d4c      	ldr	r5, [pc, #304]	; (8002474 <HAL_GPIO_Init+0x1bc>)
 8002342:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8002344:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8002346:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800234a:	684f      	ldr	r7, [r1, #4]
 800234c:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8002350:	d001      	beq.n	8002356 <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 8002352:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8002356:	4d47      	ldr	r5, [pc, #284]	; (8002474 <HAL_GPIO_Init+0x1bc>)
 8002358:	60ee      	str	r6, [r5, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800235a:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800235c:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002360:	684f      	ldr	r7, [r1, #4]
 8002362:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002366:	d001      	beq.n	800236c <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 8002368:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 800236c:	4d41      	ldr	r5, [pc, #260]	; (8002474 <HAL_GPIO_Init+0x1bc>)
 800236e:	606e      	str	r6, [r5, #4]

        temp = EXTI->IMR1;
 8002370:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8002372:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002374:	684e      	ldr	r6, [r1, #4]
 8002376:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 800237a:	d001      	beq.n	8002380 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 800237c:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 8002380:	4a3c      	ldr	r2, [pc, #240]	; (8002474 <HAL_GPIO_Init+0x1bc>)
 8002382:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 8002384:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002386:	680a      	ldr	r2, [r1, #0]
 8002388:	fa32 f403 	lsrs.w	r4, r2, r3
 800238c:	d06e      	beq.n	800246c <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800238e:	f04f 0c01 	mov.w	ip, #1
 8002392:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8002396:	ea1c 0202 	ands.w	r2, ip, r2
 800239a:	d0f3      	beq.n	8002384 <HAL_GPIO_Init+0xcc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800239c:	684c      	ldr	r4, [r1, #4]
 800239e:	f004 0403 	and.w	r4, r4, #3
 80023a2:	3c01      	subs	r4, #1
 80023a4:	2c01      	cmp	r4, #1
 80023a6:	d98b      	bls.n	80022c0 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023a8:	684c      	ldr	r4, [r1, #4]
 80023aa:	f004 0403 	and.w	r4, r4, #3
 80023ae:	2c03      	cmp	r4, #3
 80023b0:	d00c      	beq.n	80023cc <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 80023b2:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023b4:	005d      	lsls	r5, r3, #1
 80023b6:	f04f 0c03 	mov.w	ip, #3
 80023ba:	fa0c fc05 	lsl.w	ip, ip, r5
 80023be:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023c2:	688c      	ldr	r4, [r1, #8]
 80023c4:	40ac      	lsls	r4, r5
 80023c6:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 80023ca:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023cc:	684c      	ldr	r4, [r1, #4]
 80023ce:	f004 0403 	and.w	r4, r4, #3
 80023d2:	2c02      	cmp	r4, #2
 80023d4:	d089      	beq.n	80022ea <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 80023d6:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023d8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80023dc:	f04f 0c03 	mov.w	ip, #3
 80023e0:	fa0c fc0e 	lsl.w	ip, ip, lr
 80023e4:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023e8:	684c      	ldr	r4, [r1, #4]
 80023ea:	f004 0403 	and.w	r4, r4, #3
 80023ee:	fa04 f40e 	lsl.w	r4, r4, lr
 80023f2:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80023f6:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023f8:	684c      	ldr	r4, [r1, #4]
 80023fa:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 80023fe:	d0c1      	beq.n	8002384 <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002400:	4c1d      	ldr	r4, [pc, #116]	; (8002478 <HAL_GPIO_Init+0x1c0>)
 8002402:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8002404:	f045 0501 	orr.w	r5, r5, #1
 8002408:	6625      	str	r5, [r4, #96]	; 0x60
 800240a:	6e24      	ldr	r4, [r4, #96]	; 0x60
 800240c:	f004 0401 	and.w	r4, r4, #1
 8002410:	9401      	str	r4, [sp, #4]
 8002412:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002414:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8002418:	f10c 0502 	add.w	r5, ip, #2
 800241c:	4c14      	ldr	r4, [pc, #80]	; (8002470 <HAL_GPIO_Init+0x1b8>)
 800241e:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002422:	f003 0403 	and.w	r4, r3, #3
 8002426:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800242a:	240f      	movs	r4, #15
 800242c:	fa04 f40e 	lsl.w	r4, r4, lr
 8002430:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002434:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8002438:	f43f af6e 	beq.w	8002318 <HAL_GPIO_Init+0x60>
 800243c:	4c0f      	ldr	r4, [pc, #60]	; (800247c <HAL_GPIO_Init+0x1c4>)
 800243e:	42a0      	cmp	r0, r4
 8002440:	d00e      	beq.n	8002460 <HAL_GPIO_Init+0x1a8>
 8002442:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002446:	42a0      	cmp	r0, r4
 8002448:	d00c      	beq.n	8002464 <HAL_GPIO_Init+0x1ac>
 800244a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800244e:	42a0      	cmp	r0, r4
 8002450:	d00a      	beq.n	8002468 <HAL_GPIO_Init+0x1b0>
 8002452:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002456:	42a0      	cmp	r0, r4
 8002458:	f43f af5c 	beq.w	8002314 <HAL_GPIO_Init+0x5c>
 800245c:	2407      	movs	r4, #7
 800245e:	e75c      	b.n	800231a <HAL_GPIO_Init+0x62>
 8002460:	2401      	movs	r4, #1
 8002462:	e75a      	b.n	800231a <HAL_GPIO_Init+0x62>
 8002464:	2402      	movs	r4, #2
 8002466:	e758      	b.n	800231a <HAL_GPIO_Init+0x62>
 8002468:	2403      	movs	r4, #3
 800246a:	e756      	b.n	800231a <HAL_GPIO_Init+0x62>
  }
}
 800246c:	b003      	add	sp, #12
 800246e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002470:	40010000 	.word	0x40010000
 8002474:	40010400 	.word	0x40010400
 8002478:	40021000 	.word	0x40021000
 800247c:	48000400 	.word	0x48000400

08002480 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002480:	b10a      	cbz	r2, 8002486 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002482:	6181      	str	r1, [r0, #24]
 8002484:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002486:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002488:	4770      	bx	lr

0800248a <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800248a:	4770      	bx	lr

0800248c <HAL_GPIO_EXTI_IRQHandler>:
{
 800248c:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800248e:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	4203      	tst	r3, r0
 8002494:	d100      	bne.n	8002498 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8002496:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002498:	4b02      	ldr	r3, [pc, #8]	; (80024a4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800249a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800249c:	f7ff fff5 	bl	800248a <HAL_GPIO_EXTI_Callback>
}
 80024a0:	e7f9      	b.n	8002496 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80024a2:	bf00      	nop
 80024a4:	40010400 	.word	0x40010400

080024a8 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80024a8:	4b02      	ldr	r3, [pc, #8]	; (80024b4 <HAL_PWREx_GetVoltageRange+0xc>)
 80024aa:	6818      	ldr	r0, [r3, #0]
#endif
}
 80024ac:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	40007000 	.word	0x40007000

080024b8 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024b8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80024bc:	d00f      	beq.n	80024de <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024be:	4b1f      	ldr	r3, [pc, #124]	; (800253c <HAL_PWREx_ControlVoltageScaling+0x84>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ca:	d034      	beq.n	8002536 <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024cc:	4a1b      	ldr	r2, [pc, #108]	; (800253c <HAL_PWREx_ControlVoltageScaling+0x84>)
 80024ce:	6813      	ldr	r3, [r2, #0]
 80024d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024d8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024da:	2000      	movs	r0, #0
 80024dc:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80024de:	4b17      	ldr	r3, [pc, #92]	; (800253c <HAL_PWREx_ControlVoltageScaling+0x84>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024ea:	d020      	beq.n	800252e <HAL_PWREx_ControlVoltageScaling+0x76>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024ec:	4a13      	ldr	r2, [pc, #76]	; (800253c <HAL_PWREx_ControlVoltageScaling+0x84>)
 80024ee:	6813      	ldr	r3, [r2, #0]
 80024f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024f8:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80024fa:	4b11      	ldr	r3, [pc, #68]	; (8002540 <HAL_PWREx_ControlVoltageScaling+0x88>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2232      	movs	r2, #50	; 0x32
 8002500:	fb02 f303 	mul.w	r3, r2, r3
 8002504:	4a0f      	ldr	r2, [pc, #60]	; (8002544 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8002506:	fba2 2303 	umull	r2, r3, r2, r3
 800250a:	0c9b      	lsrs	r3, r3, #18
 800250c:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800250e:	e000      	b.n	8002512 <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 8002510:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002512:	4a0a      	ldr	r2, [pc, #40]	; (800253c <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002514:	6952      	ldr	r2, [r2, #20]
 8002516:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800251a:	d001      	beq.n	8002520 <HAL_PWREx_ControlVoltageScaling+0x68>
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1f7      	bne.n	8002510 <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002528:	d103      	bne.n	8002532 <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 800252a:	2000      	movs	r0, #0
 800252c:	4770      	bx	lr
 800252e:	2000      	movs	r0, #0
 8002530:	4770      	bx	lr
        return HAL_TIMEOUT;
 8002532:	2003      	movs	r0, #3
 8002534:	4770      	bx	lr
  return HAL_OK;
 8002536:	2000      	movs	r0, #0
}
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	40007000 	.word	0x40007000
 8002540:	20000024 	.word	0x20000024
 8002544:	431bde83 	.word	0x431bde83

08002548 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002548:	b530      	push	{r4, r5, lr}
 800254a:	b083      	sub	sp, #12
 800254c:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800254e:	4b20      	ldr	r3, [pc, #128]	; (80025d0 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8002550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002552:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002556:	d00b      	beq.n	8002570 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002558:	f7ff ffa6 	bl	80024a8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800255c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002560:	d017      	beq.n	8002592 <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002562:	2c80      	cmp	r4, #128	; 0x80
 8002564:	d81f      	bhi.n	80025a6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002566:	d02d      	beq.n	80025c4 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002568:	2c70      	cmp	r4, #112	; 0x70
 800256a:	d02d      	beq.n	80025c8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800256c:	2100      	movs	r1, #0
 800256e:	e01b      	b.n	80025a8 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002570:	4d17      	ldr	r5, [pc, #92]	; (80025d0 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8002572:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002578:	65ab      	str	r3, [r5, #88]	; 0x58
 800257a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800257c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002580:	9301      	str	r3, [sp, #4]
 8002582:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002584:	f7ff ff90 	bl	80024a8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002588:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800258a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800258e:	65ab      	str	r3, [r5, #88]	; 0x58
 8002590:	e7e4      	b.n	800255c <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8002592:	2c80      	cmp	r4, #128	; 0x80
 8002594:	d903      	bls.n	800259e <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8002596:	2ca0      	cmp	r4, #160	; 0xa0
 8002598:	d903      	bls.n	80025a2 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 800259a:	2102      	movs	r1, #2
 800259c:	e004      	b.n	80025a8 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800259e:	2100      	movs	r1, #0
 80025a0:	e002      	b.n	80025a8 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 80025a2:	2101      	movs	r1, #1
 80025a4:	e000      	b.n	80025a8 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 80025a6:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025a8:	4a0a      	ldr	r2, [pc, #40]	; (80025d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 80025aa:	6813      	ldr	r3, [r2, #0]
 80025ac:	f023 0307 	bic.w	r3, r3, #7
 80025b0:	430b      	orrs	r3, r1
 80025b2:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025b4:	6813      	ldr	r3, [r2, #0]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	428b      	cmp	r3, r1
 80025bc:	d106      	bne.n	80025cc <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80025be:	2000      	movs	r0, #0
}
 80025c0:	b003      	add	sp, #12
 80025c2:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 80025c4:	2102      	movs	r1, #2
 80025c6:	e7ef      	b.n	80025a8 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 80025c8:	2101      	movs	r1, #1
 80025ca:	e7ed      	b.n	80025a8 <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 80025cc:	2001      	movs	r0, #1
 80025ce:	e7f7      	b.n	80025c0 <RCC_SetFlashLatencyFromMSIRange+0x78>
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40022000 	.word	0x40022000

080025d8 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025d8:	4a28      	ldr	r2, [pc, #160]	; (800267c <HAL_RCC_GetSysClockFreq+0xa4>)
 80025da:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025dc:	68d2      	ldr	r2, [r2, #12]
 80025de:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025e2:	f013 030c 	ands.w	r3, r3, #12
 80025e6:	d00a      	beq.n	80025fe <HAL_RCC_GetSysClockFreq+0x26>
 80025e8:	2b0c      	cmp	r3, #12
 80025ea:	d006      	beq.n	80025fa <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d01f      	beq.n	8002630 <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d020      	beq.n	8002636 <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80025f4:	2000      	movs	r0, #0
 80025f6:	4602      	mov	r2, r0
 80025f8:	e010      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025fa:	2a01      	cmp	r2, #1
 80025fc:	d1f6      	bne.n	80025ec <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025fe:	4a1f      	ldr	r2, [pc, #124]	; (800267c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002600:	6812      	ldr	r2, [r2, #0]
 8002602:	f012 0f08 	tst.w	r2, #8
 8002606:	d10c      	bne.n	8002622 <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002608:	4a1c      	ldr	r2, [pc, #112]	; (800267c <HAL_RCC_GetSysClockFreq+0xa4>)
 800260a:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 800260e:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8002612:	491b      	ldr	r1, [pc, #108]	; (8002680 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002614:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002618:	b143      	cbz	r3, 800262c <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800261a:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800261c:	2b0c      	cmp	r3, #12
 800261e:	d00d      	beq.n	800263c <HAL_RCC_GetSysClockFreq+0x64>
}
 8002620:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002622:	4a16      	ldr	r2, [pc, #88]	; (800267c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002624:	6812      	ldr	r2, [r2, #0]
 8002626:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800262a:	e7f2      	b.n	8002612 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 800262c:	4610      	mov	r0, r2
 800262e:	e7f5      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 8002630:	4814      	ldr	r0, [pc, #80]	; (8002684 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002632:	2200      	movs	r2, #0
 8002634:	e7f2      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8002636:	4814      	ldr	r0, [pc, #80]	; (8002688 <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002638:	2200      	movs	r2, #0
 800263a:	e7ef      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800263c:	4b0f      	ldr	r3, [pc, #60]	; (800267c <HAL_RCC_GetSysClockFreq+0xa4>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002644:	2b02      	cmp	r3, #2
 8002646:	d016      	beq.n	8002676 <HAL_RCC_GetSysClockFreq+0x9e>
 8002648:	2b03      	cmp	r3, #3
 800264a:	d100      	bne.n	800264e <HAL_RCC_GetSysClockFreq+0x76>
      pllvco = HSE_VALUE;
 800264c:	4a0e      	ldr	r2, [pc, #56]	; (8002688 <HAL_RCC_GetSysClockFreq+0xb0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800264e:	490b      	ldr	r1, [pc, #44]	; (800267c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002650:	68c8      	ldr	r0, [r1, #12]
 8002652:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8002656:	1c43      	adds	r3, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002658:	68c8      	ldr	r0, [r1, #12]
 800265a:	f3c0 2006 	ubfx	r0, r0, #8, #7
 800265e:	fb02 f000 	mul.w	r0, r2, r0
 8002662:	fbb0 f0f3 	udiv	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002666:	68cb      	ldr	r3, [r1, #12]
 8002668:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800266c:	3301      	adds	r3, #1
 800266e:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 8002670:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8002674:	e7d4      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0x48>
    switch (pllsource)
 8002676:	4a03      	ldr	r2, [pc, #12]	; (8002684 <HAL_RCC_GetSysClockFreq+0xac>)
 8002678:	e7e9      	b.n	800264e <HAL_RCC_GetSysClockFreq+0x76>
 800267a:	bf00      	nop
 800267c:	40021000 	.word	0x40021000
 8002680:	08005e98 	.word	0x08005e98
 8002684:	00f42400 	.word	0x00f42400
 8002688:	007a1200 	.word	0x007a1200

0800268c <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800268c:	2800      	cmp	r0, #0
 800268e:	f000 831c 	beq.w	8002cca <HAL_RCC_OscConfig+0x63e>
{
 8002692:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002694:	b083      	sub	sp, #12
 8002696:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002698:	4b96      	ldr	r3, [pc, #600]	; (80028f4 <HAL_RCC_OscConfig+0x268>)
 800269a:	689d      	ldr	r5, [r3, #8]
 800269c:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026a0:	68de      	ldr	r6, [r3, #12]
 80026a2:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026a6:	6803      	ldr	r3, [r0, #0]
 80026a8:	f013 0f10 	tst.w	r3, #16
 80026ac:	d05a      	beq.n	8002764 <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026ae:	b1e5      	cbz	r5, 80026ea <HAL_RCC_OscConfig+0x5e>
 80026b0:	2d0c      	cmp	r5, #12
 80026b2:	d018      	beq.n	80026e6 <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026b4:	69a3      	ldr	r3, [r4, #24]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 80bb 	beq.w	8002832 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 80026bc:	4a8d      	ldr	r2, [pc, #564]	; (80028f4 <HAL_RCC_OscConfig+0x268>)
 80026be:	6813      	ldr	r3, [r2, #0]
 80026c0:	f043 0301 	orr.w	r3, r3, #1
 80026c4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80026c6:	f7ff fd71 	bl	80021ac <HAL_GetTick>
 80026ca:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026cc:	4b89      	ldr	r3, [pc, #548]	; (80028f4 <HAL_RCC_OscConfig+0x268>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f013 0f02 	tst.w	r3, #2
 80026d4:	f040 809a 	bne.w	800280c <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026d8:	f7ff fd68 	bl	80021ac <HAL_GetTick>
 80026dc:	1bc0      	subs	r0, r0, r7
 80026de:	2802      	cmp	r0, #2
 80026e0:	d9f4      	bls.n	80026cc <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 80026e2:	2003      	movs	r0, #3
 80026e4:	e2fc      	b.n	8002ce0 <HAL_RCC_OscConfig+0x654>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80026e6:	2e01      	cmp	r6, #1
 80026e8:	d1e4      	bne.n	80026b4 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026ea:	4b82      	ldr	r3, [pc, #520]	; (80028f4 <HAL_RCC_OscConfig+0x268>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f013 0f02 	tst.w	r3, #2
 80026f2:	d003      	beq.n	80026fc <HAL_RCC_OscConfig+0x70>
 80026f4:	69a3      	ldr	r3, [r4, #24]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 82e9 	beq.w	8002cce <HAL_RCC_OscConfig+0x642>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026fc:	6a20      	ldr	r0, [r4, #32]
 80026fe:	4b7d      	ldr	r3, [pc, #500]	; (80028f4 <HAL_RCC_OscConfig+0x268>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f013 0f08 	tst.w	r3, #8
 8002706:	d05b      	beq.n	80027c0 <HAL_RCC_OscConfig+0x134>
 8002708:	4b7a      	ldr	r3, [pc, #488]	; (80028f4 <HAL_RCC_OscConfig+0x268>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002710:	4298      	cmp	r0, r3
 8002712:	d85c      	bhi.n	80027ce <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002714:	4b77      	ldr	r3, [pc, #476]	; (80028f4 <HAL_RCC_OscConfig+0x268>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	f042 0208 	orr.w	r2, r2, #8
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002724:	6a21      	ldr	r1, [r4, #32]
 8002726:	430a      	orrs	r2, r1
 8002728:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002730:	69e1      	ldr	r1, [r4, #28]
 8002732:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002736:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002738:	2d00      	cmp	r5, #0
 800273a:	d060      	beq.n	80027fe <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800273c:	f7ff ff4c 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8002740:	4b6c      	ldr	r3, [pc, #432]	; (80028f4 <HAL_RCC_OscConfig+0x268>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002748:	4a6b      	ldr	r2, [pc, #428]	; (80028f8 <HAL_RCC_OscConfig+0x26c>)
 800274a:	5cd3      	ldrb	r3, [r2, r3]
 800274c:	f003 031f 	and.w	r3, r3, #31
 8002750:	40d8      	lsrs	r0, r3
 8002752:	4b6a      	ldr	r3, [pc, #424]	; (80028fc <HAL_RCC_OscConfig+0x270>)
 8002754:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8002756:	4b6a      	ldr	r3, [pc, #424]	; (8002900 <HAL_RCC_OscConfig+0x274>)
 8002758:	6818      	ldr	r0, [r3, #0]
 800275a:	f7ff fcdd 	bl	8002118 <HAL_InitTick>
        if(status != HAL_OK)
 800275e:	2800      	cmp	r0, #0
 8002760:	f040 82be 	bne.w	8002ce0 <HAL_RCC_OscConfig+0x654>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002764:	6823      	ldr	r3, [r4, #0]
 8002766:	f013 0f01 	tst.w	r3, #1
 800276a:	f000 8081 	beq.w	8002870 <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800276e:	2d08      	cmp	r5, #8
 8002770:	d075      	beq.n	800285e <HAL_RCC_OscConfig+0x1d2>
 8002772:	2d0c      	cmp	r5, #12
 8002774:	d071      	beq.n	800285a <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002776:	6863      	ldr	r3, [r4, #4]
 8002778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800277c:	f000 8097 	beq.w	80028ae <HAL_RCC_OscConfig+0x222>
 8002780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002784:	f000 8099 	beq.w	80028ba <HAL_RCC_OscConfig+0x22e>
 8002788:	4b5a      	ldr	r3, [pc, #360]	; (80028f4 <HAL_RCC_OscConfig+0x268>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002798:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800279a:	6863      	ldr	r3, [r4, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 8099 	beq.w	80028d4 <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 80027a2:	f7ff fd03 	bl	80021ac <HAL_GetTick>
 80027a6:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027a8:	4b52      	ldr	r3, [pc, #328]	; (80028f4 <HAL_RCC_OscConfig+0x268>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80027b0:	d15e      	bne.n	8002870 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b2:	f7ff fcfb 	bl	80021ac <HAL_GetTick>
 80027b6:	1bc0      	subs	r0, r0, r7
 80027b8:	2864      	cmp	r0, #100	; 0x64
 80027ba:	d9f5      	bls.n	80027a8 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 80027bc:	2003      	movs	r0, #3
 80027be:	e28f      	b.n	8002ce0 <HAL_RCC_OscConfig+0x654>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027c0:	4b4c      	ldr	r3, [pc, #304]	; (80028f4 <HAL_RCC_OscConfig+0x268>)
 80027c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027c6:	091b      	lsrs	r3, r3, #4
 80027c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027cc:	e7a0      	b.n	8002710 <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027ce:	f7ff febb 	bl	8002548 <RCC_SetFlashLatencyFromMSIRange>
 80027d2:	2800      	cmp	r0, #0
 80027d4:	f040 827d 	bne.w	8002cd2 <HAL_RCC_OscConfig+0x646>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027d8:	4b46      	ldr	r3, [pc, #280]	; (80028f4 <HAL_RCC_OscConfig+0x268>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	f042 0208 	orr.w	r2, r2, #8
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80027e8:	6a21      	ldr	r1, [r4, #32]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80027f4:	69e1      	ldr	r1, [r4, #28]
 80027f6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80027fa:	605a      	str	r2, [r3, #4]
 80027fc:	e79e      	b.n	800273c <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027fe:	6a20      	ldr	r0, [r4, #32]
 8002800:	f7ff fea2 	bl	8002548 <RCC_SetFlashLatencyFromMSIRange>
 8002804:	2800      	cmp	r0, #0
 8002806:	d099      	beq.n	800273c <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 8002808:	2001      	movs	r0, #1
 800280a:	e269      	b.n	8002ce0 <HAL_RCC_OscConfig+0x654>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800280c:	4b39      	ldr	r3, [pc, #228]	; (80028f4 <HAL_RCC_OscConfig+0x268>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	f042 0208 	orr.w	r2, r2, #8
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800281c:	6a21      	ldr	r1, [r4, #32]
 800281e:	430a      	orrs	r2, r1
 8002820:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002828:	69e1      	ldr	r1, [r4, #28]
 800282a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800282e:	605a      	str	r2, [r3, #4]
 8002830:	e798      	b.n	8002764 <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 8002832:	4a30      	ldr	r2, [pc, #192]	; (80028f4 <HAL_RCC_OscConfig+0x268>)
 8002834:	6813      	ldr	r3, [r2, #0]
 8002836:	f023 0301 	bic.w	r3, r3, #1
 800283a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800283c:	f7ff fcb6 	bl	80021ac <HAL_GetTick>
 8002840:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002842:	4b2c      	ldr	r3, [pc, #176]	; (80028f4 <HAL_RCC_OscConfig+0x268>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f013 0f02 	tst.w	r3, #2
 800284a:	d08b      	beq.n	8002764 <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800284c:	f7ff fcae 	bl	80021ac <HAL_GetTick>
 8002850:	1bc0      	subs	r0, r0, r7
 8002852:	2802      	cmp	r0, #2
 8002854:	d9f5      	bls.n	8002842 <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 8002856:	2003      	movs	r0, #3
 8002858:	e242      	b.n	8002ce0 <HAL_RCC_OscConfig+0x654>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800285a:	2e03      	cmp	r6, #3
 800285c:	d18b      	bne.n	8002776 <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800285e:	4b25      	ldr	r3, [pc, #148]	; (80028f4 <HAL_RCC_OscConfig+0x268>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002866:	d003      	beq.n	8002870 <HAL_RCC_OscConfig+0x1e4>
 8002868:	6863      	ldr	r3, [r4, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 8233 	beq.w	8002cd6 <HAL_RCC_OscConfig+0x64a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002870:	6823      	ldr	r3, [r4, #0]
 8002872:	f013 0f02 	tst.w	r3, #2
 8002876:	d058      	beq.n	800292a <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002878:	2d04      	cmp	r5, #4
 800287a:	d045      	beq.n	8002908 <HAL_RCC_OscConfig+0x27c>
 800287c:	2d0c      	cmp	r5, #12
 800287e:	d041      	beq.n	8002904 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002880:	68e3      	ldr	r3, [r4, #12]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d077      	beq.n	8002976 <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 8002886:	4a1b      	ldr	r2, [pc, #108]	; (80028f4 <HAL_RCC_OscConfig+0x268>)
 8002888:	6813      	ldr	r3, [r2, #0]
 800288a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800288e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002890:	f7ff fc8c 	bl	80021ac <HAL_GetTick>
 8002894:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002896:	4b17      	ldr	r3, [pc, #92]	; (80028f4 <HAL_RCC_OscConfig+0x268>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800289e:	d161      	bne.n	8002964 <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a0:	f7ff fc84 	bl	80021ac <HAL_GetTick>
 80028a4:	1b80      	subs	r0, r0, r6
 80028a6:	2802      	cmp	r0, #2
 80028a8:	d9f5      	bls.n	8002896 <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 80028aa:	2003      	movs	r0, #3
 80028ac:	e218      	b.n	8002ce0 <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ae:	4a11      	ldr	r2, [pc, #68]	; (80028f4 <HAL_RCC_OscConfig+0x268>)
 80028b0:	6813      	ldr	r3, [r2, #0]
 80028b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	e76f      	b.n	800279a <HAL_RCC_OscConfig+0x10e>
 80028ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028be:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	e762      	b.n	800279a <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 80028d4:	f7ff fc6a 	bl	80021ac <HAL_GetTick>
 80028d8:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028da:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <HAL_RCC_OscConfig+0x268>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80028e2:	d0c5      	beq.n	8002870 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e4:	f7ff fc62 	bl	80021ac <HAL_GetTick>
 80028e8:	1bc0      	subs	r0, r0, r7
 80028ea:	2864      	cmp	r0, #100	; 0x64
 80028ec:	d9f5      	bls.n	80028da <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 80028ee:	2003      	movs	r0, #3
 80028f0:	e1f6      	b.n	8002ce0 <HAL_RCC_OscConfig+0x654>
 80028f2:	bf00      	nop
 80028f4:	40021000 	.word	0x40021000
 80028f8:	08005e88 	.word	0x08005e88
 80028fc:	20000024 	.word	0x20000024
 8002900:	2000002c 	.word	0x2000002c
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002904:	2e02      	cmp	r6, #2
 8002906:	d1bb      	bne.n	8002880 <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002908:	4ba4      	ldr	r3, [pc, #656]	; (8002b9c <HAL_RCC_OscConfig+0x510>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002910:	d003      	beq.n	800291a <HAL_RCC_OscConfig+0x28e>
 8002912:	68e3      	ldr	r3, [r4, #12]
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 81e0 	beq.w	8002cda <HAL_RCC_OscConfig+0x64e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800291a:	4aa0      	ldr	r2, [pc, #640]	; (8002b9c <HAL_RCC_OscConfig+0x510>)
 800291c:	6853      	ldr	r3, [r2, #4]
 800291e:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002922:	6921      	ldr	r1, [r4, #16]
 8002924:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002928:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800292a:	6823      	ldr	r3, [r4, #0]
 800292c:	f013 0f08 	tst.w	r3, #8
 8002930:	d04c      	beq.n	80029cc <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002932:	6963      	ldr	r3, [r4, #20]
 8002934:	b39b      	cbz	r3, 800299e <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 8002936:	4a99      	ldr	r2, [pc, #612]	; (8002b9c <HAL_RCC_OscConfig+0x510>)
 8002938:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002944:	f7ff fc32 	bl	80021ac <HAL_GetTick>
 8002948:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800294a:	4b94      	ldr	r3, [pc, #592]	; (8002b9c <HAL_RCC_OscConfig+0x510>)
 800294c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002950:	f013 0f02 	tst.w	r3, #2
 8002954:	d13a      	bne.n	80029cc <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002956:	f7ff fc29 	bl	80021ac <HAL_GetTick>
 800295a:	1b80      	subs	r0, r0, r6
 800295c:	2802      	cmp	r0, #2
 800295e:	d9f4      	bls.n	800294a <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 8002960:	2003      	movs	r0, #3
 8002962:	e1bd      	b.n	8002ce0 <HAL_RCC_OscConfig+0x654>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002964:	4a8d      	ldr	r2, [pc, #564]	; (8002b9c <HAL_RCC_OscConfig+0x510>)
 8002966:	6853      	ldr	r3, [r2, #4]
 8002968:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800296c:	6921      	ldr	r1, [r4, #16]
 800296e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002972:	6053      	str	r3, [r2, #4]
 8002974:	e7d9      	b.n	800292a <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 8002976:	4a89      	ldr	r2, [pc, #548]	; (8002b9c <HAL_RCC_OscConfig+0x510>)
 8002978:	6813      	ldr	r3, [r2, #0]
 800297a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800297e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002980:	f7ff fc14 	bl	80021ac <HAL_GetTick>
 8002984:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002986:	4b85      	ldr	r3, [pc, #532]	; (8002b9c <HAL_RCC_OscConfig+0x510>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800298e:	d0cc      	beq.n	800292a <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002990:	f7ff fc0c 	bl	80021ac <HAL_GetTick>
 8002994:	1b80      	subs	r0, r0, r6
 8002996:	2802      	cmp	r0, #2
 8002998:	d9f5      	bls.n	8002986 <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 800299a:	2003      	movs	r0, #3
 800299c:	e1a0      	b.n	8002ce0 <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_LSI_DISABLE();
 800299e:	4a7f      	ldr	r2, [pc, #508]	; (8002b9c <HAL_RCC_OscConfig+0x510>)
 80029a0:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80029a4:	f023 0301 	bic.w	r3, r3, #1
 80029a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80029ac:	f7ff fbfe 	bl	80021ac <HAL_GetTick>
 80029b0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029b2:	4b7a      	ldr	r3, [pc, #488]	; (8002b9c <HAL_RCC_OscConfig+0x510>)
 80029b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029b8:	f013 0f02 	tst.w	r3, #2
 80029bc:	d006      	beq.n	80029cc <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029be:	f7ff fbf5 	bl	80021ac <HAL_GetTick>
 80029c2:	1b80      	subs	r0, r0, r6
 80029c4:	2802      	cmp	r0, #2
 80029c6:	d9f4      	bls.n	80029b2 <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 80029c8:	2003      	movs	r0, #3
 80029ca:	e189      	b.n	8002ce0 <HAL_RCC_OscConfig+0x654>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029cc:	6823      	ldr	r3, [r4, #0]
 80029ce:	f013 0f04 	tst.w	r3, #4
 80029d2:	d07a      	beq.n	8002aca <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80029d4:	4b71      	ldr	r3, [pc, #452]	; (8002b9c <HAL_RCC_OscConfig+0x510>)
 80029d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80029dc:	d136      	bne.n	8002a4c <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 80029de:	4b6f      	ldr	r3, [pc, #444]	; (8002b9c <HAL_RCC_OscConfig+0x510>)
 80029e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80029e6:	659a      	str	r2, [r3, #88]	; 0x58
 80029e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ee:	9301      	str	r3, [sp, #4]
 80029f0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80029f2:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029f4:	4b6a      	ldr	r3, [pc, #424]	; (8002ba0 <HAL_RCC_OscConfig+0x514>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80029fc:	d028      	beq.n	8002a50 <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029fe:	68a3      	ldr	r3, [r4, #8]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d039      	beq.n	8002a78 <HAL_RCC_OscConfig+0x3ec>
 8002a04:	2b05      	cmp	r3, #5
 8002a06:	d03f      	beq.n	8002a88 <HAL_RCC_OscConfig+0x3fc>
 8002a08:	4b64      	ldr	r3, [pc, #400]	; (8002b9c <HAL_RCC_OscConfig+0x510>)
 8002a0a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002a0e:	f022 0201 	bic.w	r2, r2, #1
 8002a12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002a16:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002a1a:	f022 0204 	bic.w	r2, r2, #4
 8002a1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a22:	68a3      	ldr	r3, [r4, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d03d      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 8002a28:	f7ff fbc0 	bl	80021ac <HAL_GetTick>
 8002a2c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a2e:	4b5b      	ldr	r3, [pc, #364]	; (8002b9c <HAL_RCC_OscConfig+0x510>)
 8002a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a34:	f013 0f02 	tst.w	r3, #2
 8002a38:	d146      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a3a:	f7ff fbb7 	bl	80021ac <HAL_GetTick>
 8002a3e:	1bc0      	subs	r0, r0, r7
 8002a40:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a44:	4298      	cmp	r0, r3
 8002a46:	d9f2      	bls.n	8002a2e <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 8002a48:	2003      	movs	r0, #3
 8002a4a:	e149      	b.n	8002ce0 <HAL_RCC_OscConfig+0x654>
    FlagStatus       pwrclkchanged = RESET;
 8002a4c:	2600      	movs	r6, #0
 8002a4e:	e7d1      	b.n	80029f4 <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a50:	4a53      	ldr	r2, [pc, #332]	; (8002ba0 <HAL_RCC_OscConfig+0x514>)
 8002a52:	6813      	ldr	r3, [r2, #0]
 8002a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a58:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002a5a:	f7ff fba7 	bl	80021ac <HAL_GetTick>
 8002a5e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a60:	4b4f      	ldr	r3, [pc, #316]	; (8002ba0 <HAL_RCC_OscConfig+0x514>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002a68:	d1c9      	bne.n	80029fe <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6a:	f7ff fb9f 	bl	80021ac <HAL_GetTick>
 8002a6e:	1bc0      	subs	r0, r0, r7
 8002a70:	2802      	cmp	r0, #2
 8002a72:	d9f5      	bls.n	8002a60 <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 8002a74:	2003      	movs	r0, #3
 8002a76:	e133      	b.n	8002ce0 <HAL_RCC_OscConfig+0x654>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a78:	4a48      	ldr	r2, [pc, #288]	; (8002b9c <HAL_RCC_OscConfig+0x510>)
 8002a7a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002a7e:	f043 0301 	orr.w	r3, r3, #1
 8002a82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a86:	e7cc      	b.n	8002a22 <HAL_RCC_OscConfig+0x396>
 8002a88:	4b44      	ldr	r3, [pc, #272]	; (8002b9c <HAL_RCC_OscConfig+0x510>)
 8002a8a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002a8e:	f042 0204 	orr.w	r2, r2, #4
 8002a92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002a96:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002a9a:	f042 0201 	orr.w	r2, r2, #1
 8002a9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002aa2:	e7be      	b.n	8002a22 <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 8002aa4:	f7ff fb82 	bl	80021ac <HAL_GetTick>
 8002aa8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002aaa:	4b3c      	ldr	r3, [pc, #240]	; (8002b9c <HAL_RCC_OscConfig+0x510>)
 8002aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab0:	f013 0f02 	tst.w	r3, #2
 8002ab4:	d008      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab6:	f7ff fb79 	bl	80021ac <HAL_GetTick>
 8002aba:	1bc0      	subs	r0, r0, r7
 8002abc:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ac0:	4298      	cmp	r0, r3
 8002ac2:	d9f2      	bls.n	8002aaa <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 8002ac4:	2003      	movs	r0, #3
 8002ac6:	e10b      	b.n	8002ce0 <HAL_RCC_OscConfig+0x654>
    if(pwrclkchanged == SET)
 8002ac8:	b9e6      	cbnz	r6, 8002b04 <HAL_RCC_OscConfig+0x478>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002aca:	6823      	ldr	r3, [r4, #0]
 8002acc:	f013 0f20 	tst.w	r3, #32
 8002ad0:	d035      	beq.n	8002b3e <HAL_RCC_OscConfig+0x4b2>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ad2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ad4:	b1e3      	cbz	r3, 8002b10 <HAL_RCC_OscConfig+0x484>
      __HAL_RCC_HSI48_ENABLE();
 8002ad6:	4a31      	ldr	r2, [pc, #196]	; (8002b9c <HAL_RCC_OscConfig+0x510>)
 8002ad8:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002ae4:	f7ff fb62 	bl	80021ac <HAL_GetTick>
 8002ae8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002aea:	4b2c      	ldr	r3, [pc, #176]	; (8002b9c <HAL_RCC_OscConfig+0x510>)
 8002aec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002af0:	f013 0f02 	tst.w	r3, #2
 8002af4:	d123      	bne.n	8002b3e <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002af6:	f7ff fb59 	bl	80021ac <HAL_GetTick>
 8002afa:	1b80      	subs	r0, r0, r6
 8002afc:	2802      	cmp	r0, #2
 8002afe:	d9f4      	bls.n	8002aea <HAL_RCC_OscConfig+0x45e>
          return HAL_TIMEOUT;
 8002b00:	2003      	movs	r0, #3
 8002b02:	e0ed      	b.n	8002ce0 <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b04:	4a25      	ldr	r2, [pc, #148]	; (8002b9c <HAL_RCC_OscConfig+0x510>)
 8002b06:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002b08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b0c:	6593      	str	r3, [r2, #88]	; 0x58
 8002b0e:	e7dc      	b.n	8002aca <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_HSI48_DISABLE();
 8002b10:	4a22      	ldr	r2, [pc, #136]	; (8002b9c <HAL_RCC_OscConfig+0x510>)
 8002b12:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8002b16:	f023 0301 	bic.w	r3, r3, #1
 8002b1a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002b1e:	f7ff fb45 	bl	80021ac <HAL_GetTick>
 8002b22:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b24:	4b1d      	ldr	r3, [pc, #116]	; (8002b9c <HAL_RCC_OscConfig+0x510>)
 8002b26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b2a:	f013 0f02 	tst.w	r3, #2
 8002b2e:	d006      	beq.n	8002b3e <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b30:	f7ff fb3c 	bl	80021ac <HAL_GetTick>
 8002b34:	1b80      	subs	r0, r0, r6
 8002b36:	2802      	cmp	r0, #2
 8002b38:	d9f4      	bls.n	8002b24 <HAL_RCC_OscConfig+0x498>
          return HAL_TIMEOUT;
 8002b3a:	2003      	movs	r0, #3
 8002b3c:	e0d0      	b.n	8002ce0 <HAL_RCC_OscConfig+0x654>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 80cc 	beq.w	8002cde <HAL_RCC_OscConfig+0x652>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d017      	beq.n	8002b7a <HAL_RCC_OscConfig+0x4ee>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b4a:	2d0c      	cmp	r5, #12
 8002b4c:	f000 80cc 	beq.w	8002ce8 <HAL_RCC_OscConfig+0x65c>
        __HAL_RCC_PLL_DISABLE();
 8002b50:	4a12      	ldr	r2, [pc, #72]	; (8002b9c <HAL_RCC_OscConfig+0x510>)
 8002b52:	6813      	ldr	r3, [r2, #0]
 8002b54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b58:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002b5a:	f7ff fb27 	bl	80021ac <HAL_GetTick>
 8002b5e:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b60:	4b0e      	ldr	r3, [pc, #56]	; (8002b9c <HAL_RCC_OscConfig+0x510>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002b68:	f000 80a8 	beq.w	8002cbc <HAL_RCC_OscConfig+0x630>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6c:	f7ff fb1e 	bl	80021ac <HAL_GetTick>
 8002b70:	1b00      	subs	r0, r0, r4
 8002b72:	2802      	cmp	r0, #2
 8002b74:	d9f4      	bls.n	8002b60 <HAL_RCC_OscConfig+0x4d4>
            return HAL_TIMEOUT;
 8002b76:	2003      	movs	r0, #3
 8002b78:	e0b2      	b.n	8002ce0 <HAL_RCC_OscConfig+0x654>
      pll_config = RCC->PLLCFGR;
 8002b7a:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <HAL_RCC_OscConfig+0x510>)
 8002b7c:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b7e:	f003 0103 	and.w	r1, r3, #3
 8002b82:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002b84:	4291      	cmp	r1, r2
 8002b86:	d00d      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x518>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b88:	2d0c      	cmp	r5, #12
 8002b8a:	f000 80ab 	beq.w	8002ce4 <HAL_RCC_OscConfig+0x658>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b8e:	4b03      	ldr	r3, [pc, #12]	; (8002b9c <HAL_RCC_OscConfig+0x510>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8002b96:	d02f      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x56c>
            return HAL_ERROR;
 8002b98:	2001      	movs	r0, #1
 8002b9a:	e0a1      	b.n	8002ce0 <HAL_RCC_OscConfig+0x654>
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	40007000 	.word	0x40007000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ba4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ba8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002baa:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bac:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002bb0:	d1ea      	bne.n	8002b88 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bb2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002bb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bb8:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002bbc:	d1e4      	bne.n	8002b88 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002bbe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002bc2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bc4:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8002bc8:	d1de      	bne.n	8002b88 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bca:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8002bce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002bd0:	0852      	lsrs	r2, r2, #1
 8002bd2:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002bd4:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002bd8:	d1d6      	bne.n	8002b88 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bda:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002bde:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002be0:	0852      	lsrs	r2, r2, #1
 8002be2:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002be4:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8002be8:	d1ce      	bne.n	8002b88 <HAL_RCC_OscConfig+0x4fc>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bea:	4b40      	ldr	r3, [pc, #256]	; (8002cec <HAL_RCC_OscConfig+0x660>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002bf2:	d049      	beq.n	8002c88 <HAL_RCC_OscConfig+0x5fc>
  return HAL_OK;
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	e073      	b.n	8002ce0 <HAL_RCC_OscConfig+0x654>
            __HAL_RCC_PLL_DISABLE();
 8002bf8:	4a3c      	ldr	r2, [pc, #240]	; (8002cec <HAL_RCC_OscConfig+0x660>)
 8002bfa:	6813      	ldr	r3, [r2, #0]
 8002bfc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c00:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8002c02:	f7ff fad3 	bl	80021ac <HAL_GetTick>
 8002c06:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c08:	4b38      	ldr	r3, [pc, #224]	; (8002cec <HAL_RCC_OscConfig+0x660>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002c10:	d006      	beq.n	8002c20 <HAL_RCC_OscConfig+0x594>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c12:	f7ff facb 	bl	80021ac <HAL_GetTick>
 8002c16:	1b40      	subs	r0, r0, r5
 8002c18:	2802      	cmp	r0, #2
 8002c1a:	d9f5      	bls.n	8002c08 <HAL_RCC_OscConfig+0x57c>
                return HAL_TIMEOUT;
 8002c1c:	2003      	movs	r0, #3
 8002c1e:	e05f      	b.n	8002ce0 <HAL_RCC_OscConfig+0x654>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c20:	4a32      	ldr	r2, [pc, #200]	; (8002cec <HAL_RCC_OscConfig+0x660>)
 8002c22:	68d3      	ldr	r3, [r2, #12]
 8002c24:	4932      	ldr	r1, [pc, #200]	; (8002cf0 <HAL_RCC_OscConfig+0x664>)
 8002c26:	4019      	ands	r1, r3
 8002c28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c2a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002c2c:	3801      	subs	r0, #1
 8002c2e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8002c32:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002c34:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002c38:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002c3a:	0840      	lsrs	r0, r0, #1
 8002c3c:	3801      	subs	r0, #1
 8002c3e:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8002c42:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002c44:	0840      	lsrs	r0, r0, #1
 8002c46:	3801      	subs	r0, #1
 8002c48:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8002c4c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002c4e:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8002c52:	430b      	orrs	r3, r1
 8002c54:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 8002c56:	6813      	ldr	r3, [r2, #0]
 8002c58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c5c:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c5e:	68d3      	ldr	r3, [r2, #12]
 8002c60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c64:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 8002c66:	f7ff faa1 	bl	80021ac <HAL_GetTick>
 8002c6a:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c6c:	4b1f      	ldr	r3, [pc, #124]	; (8002cec <HAL_RCC_OscConfig+0x660>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002c74:	d106      	bne.n	8002c84 <HAL_RCC_OscConfig+0x5f8>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c76:	f7ff fa99 	bl	80021ac <HAL_GetTick>
 8002c7a:	1b00      	subs	r0, r0, r4
 8002c7c:	2802      	cmp	r0, #2
 8002c7e:	d9f5      	bls.n	8002c6c <HAL_RCC_OscConfig+0x5e0>
                return HAL_TIMEOUT;
 8002c80:	2003      	movs	r0, #3
 8002c82:	e02d      	b.n	8002ce0 <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 8002c84:	2000      	movs	r0, #0
 8002c86:	e02b      	b.n	8002ce0 <HAL_RCC_OscConfig+0x654>
          __HAL_RCC_PLL_ENABLE();
 8002c88:	4b18      	ldr	r3, [pc, #96]	; (8002cec <HAL_RCC_OscConfig+0x660>)
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002c90:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002c98:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 8002c9a:	f7ff fa87 	bl	80021ac <HAL_GetTick>
 8002c9e:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ca0:	4b12      	ldr	r3, [pc, #72]	; (8002cec <HAL_RCC_OscConfig+0x660>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002ca8:	d106      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x62c>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002caa:	f7ff fa7f 	bl	80021ac <HAL_GetTick>
 8002cae:	1b03      	subs	r3, r0, r4
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d9f5      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x614>
              return HAL_TIMEOUT;
 8002cb4:	2003      	movs	r0, #3
 8002cb6:	e013      	b.n	8002ce0 <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 8002cb8:	2000      	movs	r0, #0
 8002cba:	e011      	b.n	8002ce0 <HAL_RCC_OscConfig+0x654>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002cbc:	4a0b      	ldr	r2, [pc, #44]	; (8002cec <HAL_RCC_OscConfig+0x660>)
 8002cbe:	68d1      	ldr	r1, [r2, #12]
 8002cc0:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <HAL_RCC_OscConfig+0x668>)
 8002cc2:	400b      	ands	r3, r1
 8002cc4:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8002cc6:	2000      	movs	r0, #0
 8002cc8:	e00a      	b.n	8002ce0 <HAL_RCC_OscConfig+0x654>
    return HAL_ERROR;
 8002cca:	2001      	movs	r0, #1
}
 8002ccc:	4770      	bx	lr
        return HAL_ERROR;
 8002cce:	2001      	movs	r0, #1
 8002cd0:	e006      	b.n	8002ce0 <HAL_RCC_OscConfig+0x654>
            return HAL_ERROR;
 8002cd2:	2001      	movs	r0, #1
 8002cd4:	e004      	b.n	8002ce0 <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 8002cd6:	2001      	movs	r0, #1
 8002cd8:	e002      	b.n	8002ce0 <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 8002cda:	2001      	movs	r0, #1
 8002cdc:	e000      	b.n	8002ce0 <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 8002cde:	2000      	movs	r0, #0
}
 8002ce0:	b003      	add	sp, #12
 8002ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8002ce4:	2001      	movs	r0, #1
 8002ce6:	e7fb      	b.n	8002ce0 <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 8002ce8:	2001      	movs	r0, #1
 8002cea:	e7f9      	b.n	8002ce0 <HAL_RCC_OscConfig+0x654>
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	019d808c 	.word	0x019d808c
 8002cf4:	feeefffc 	.word	0xfeeefffc

08002cf8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002cf8:	2800      	cmp	r0, #0
 8002cfa:	f000 80af 	beq.w	8002e5c <HAL_RCC_ClockConfig+0x164>
{
 8002cfe:	b570      	push	{r4, r5, r6, lr}
 8002d00:	460d      	mov	r5, r1
 8002d02:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d04:	4b59      	ldr	r3, [pc, #356]	; (8002e6c <HAL_RCC_ClockConfig+0x174>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	428b      	cmp	r3, r1
 8002d0e:	d20b      	bcs.n	8002d28 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d10:	4a56      	ldr	r2, [pc, #344]	; (8002e6c <HAL_RCC_ClockConfig+0x174>)
 8002d12:	6813      	ldr	r3, [r2, #0]
 8002d14:	f023 0307 	bic.w	r3, r3, #7
 8002d18:	430b      	orrs	r3, r1
 8002d1a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1c:	6813      	ldr	r3, [r2, #0]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	428b      	cmp	r3, r1
 8002d24:	f040 809c 	bne.w	8002e60 <HAL_RCC_ClockConfig+0x168>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d28:	6823      	ldr	r3, [r4, #0]
 8002d2a:	f013 0f02 	tst.w	r3, #2
 8002d2e:	d00c      	beq.n	8002d4a <HAL_RCC_ClockConfig+0x52>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d30:	68a2      	ldr	r2, [r4, #8]
 8002d32:	4b4f      	ldr	r3, [pc, #316]	; (8002e70 <HAL_RCC_ClockConfig+0x178>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d905      	bls.n	8002d4a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d3e:	494c      	ldr	r1, [pc, #304]	; (8002e70 <HAL_RCC_ClockConfig+0x178>)
 8002d40:	688b      	ldr	r3, [r1, #8]
 8002d42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d46:	431a      	orrs	r2, r3
 8002d48:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d4a:	6823      	ldr	r3, [r4, #0]
 8002d4c:	f013 0f01 	tst.w	r3, #1
 8002d50:	d039      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0xce>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d52:	6863      	ldr	r3, [r4, #4]
 8002d54:	2b03      	cmp	r3, #3
 8002d56:	d009      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x74>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d026      	beq.n	8002daa <HAL_RCC_ClockConfig+0xb2>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d5c:	bb63      	cbnz	r3, 8002db8 <HAL_RCC_ClockConfig+0xc0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d5e:	4a44      	ldr	r2, [pc, #272]	; (8002e70 <HAL_RCC_ClockConfig+0x178>)
 8002d60:	6812      	ldr	r2, [r2, #0]
 8002d62:	f012 0f02 	tst.w	r2, #2
 8002d66:	d106      	bne.n	8002d76 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8002d68:	2001      	movs	r0, #1
 8002d6a:	e076      	b.n	8002e5a <HAL_RCC_ClockConfig+0x162>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d6c:	4a40      	ldr	r2, [pc, #256]	; (8002e70 <HAL_RCC_ClockConfig+0x178>)
 8002d6e:	6812      	ldr	r2, [r2, #0]
 8002d70:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002d74:	d076      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x16c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d76:	493e      	ldr	r1, [pc, #248]	; (8002e70 <HAL_RCC_ClockConfig+0x178>)
 8002d78:	688a      	ldr	r2, [r1, #8]
 8002d7a:	f022 0203 	bic.w	r2, r2, #3
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002d82:	f7ff fa13 	bl	80021ac <HAL_GetTick>
 8002d86:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d88:	4b39      	ldr	r3, [pc, #228]	; (8002e70 <HAL_RCC_ClockConfig+0x178>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 030c 	and.w	r3, r3, #12
 8002d90:	6862      	ldr	r2, [r4, #4]
 8002d92:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002d96:	d016      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0xce>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d98:	f7ff fa08 	bl	80021ac <HAL_GetTick>
 8002d9c:	1b80      	subs	r0, r0, r6
 8002d9e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002da2:	4298      	cmp	r0, r3
 8002da4:	d9f0      	bls.n	8002d88 <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 8002da6:	2003      	movs	r0, #3
 8002da8:	e057      	b.n	8002e5a <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002daa:	4a31      	ldr	r2, [pc, #196]	; (8002e70 <HAL_RCC_ClockConfig+0x178>)
 8002dac:	6812      	ldr	r2, [r2, #0]
 8002dae:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002db2:	d1e0      	bne.n	8002d76 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8002db4:	2001      	movs	r0, #1
 8002db6:	e050      	b.n	8002e5a <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002db8:	4a2d      	ldr	r2, [pc, #180]	; (8002e70 <HAL_RCC_ClockConfig+0x178>)
 8002dba:	6812      	ldr	r2, [r2, #0]
 8002dbc:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002dc0:	d1d9      	bne.n	8002d76 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8002dc2:	2001      	movs	r0, #1
 8002dc4:	e049      	b.n	8002e5a <HAL_RCC_ClockConfig+0x162>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc6:	6823      	ldr	r3, [r4, #0]
 8002dc8:	f013 0f02 	tst.w	r3, #2
 8002dcc:	d00c      	beq.n	8002de8 <HAL_RCC_ClockConfig+0xf0>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002dce:	68a2      	ldr	r2, [r4, #8]
 8002dd0:	4b27      	ldr	r3, [pc, #156]	; (8002e70 <HAL_RCC_ClockConfig+0x178>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d205      	bcs.n	8002de8 <HAL_RCC_ClockConfig+0xf0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ddc:	4924      	ldr	r1, [pc, #144]	; (8002e70 <HAL_RCC_ClockConfig+0x178>)
 8002dde:	688b      	ldr	r3, [r1, #8]
 8002de0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002de4:	431a      	orrs	r2, r3
 8002de6:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002de8:	4b20      	ldr	r3, [pc, #128]	; (8002e6c <HAL_RCC_ClockConfig+0x174>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	42ab      	cmp	r3, r5
 8002df2:	d90a      	bls.n	8002e0a <HAL_RCC_ClockConfig+0x112>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df4:	4a1d      	ldr	r2, [pc, #116]	; (8002e6c <HAL_RCC_ClockConfig+0x174>)
 8002df6:	6813      	ldr	r3, [r2, #0]
 8002df8:	f023 0307 	bic.w	r3, r3, #7
 8002dfc:	432b      	orrs	r3, r5
 8002dfe:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e00:	6813      	ldr	r3, [r2, #0]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	42ab      	cmp	r3, r5
 8002e08:	d12e      	bne.n	8002e68 <HAL_RCC_ClockConfig+0x170>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e0a:	6823      	ldr	r3, [r4, #0]
 8002e0c:	f013 0f04 	tst.w	r3, #4
 8002e10:	d006      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x128>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e12:	4a17      	ldr	r2, [pc, #92]	; (8002e70 <HAL_RCC_ClockConfig+0x178>)
 8002e14:	6893      	ldr	r3, [r2, #8]
 8002e16:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e1a:	68e1      	ldr	r1, [r4, #12]
 8002e1c:	430b      	orrs	r3, r1
 8002e1e:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e20:	6823      	ldr	r3, [r4, #0]
 8002e22:	f013 0f08 	tst.w	r3, #8
 8002e26:	d007      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e28:	4a11      	ldr	r2, [pc, #68]	; (8002e70 <HAL_RCC_ClockConfig+0x178>)
 8002e2a:	6893      	ldr	r3, [r2, #8]
 8002e2c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002e30:	6921      	ldr	r1, [r4, #16]
 8002e32:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002e36:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e38:	f7ff fbce 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8002e3c:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <HAL_RCC_ClockConfig+0x178>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002e44:	4a0b      	ldr	r2, [pc, #44]	; (8002e74 <HAL_RCC_ClockConfig+0x17c>)
 8002e46:	5cd3      	ldrb	r3, [r2, r3]
 8002e48:	f003 031f 	and.w	r3, r3, #31
 8002e4c:	40d8      	lsrs	r0, r3
 8002e4e:	4b0a      	ldr	r3, [pc, #40]	; (8002e78 <HAL_RCC_ClockConfig+0x180>)
 8002e50:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8002e52:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <HAL_RCC_ClockConfig+0x184>)
 8002e54:	6818      	ldr	r0, [r3, #0]
 8002e56:	f7ff f95f 	bl	8002118 <HAL_InitTick>
}
 8002e5a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002e5c:	2001      	movs	r0, #1
}
 8002e5e:	4770      	bx	lr
      return HAL_ERROR;
 8002e60:	2001      	movs	r0, #1
 8002e62:	e7fa      	b.n	8002e5a <HAL_RCC_ClockConfig+0x162>
        return HAL_ERROR;
 8002e64:	2001      	movs	r0, #1
 8002e66:	e7f8      	b.n	8002e5a <HAL_RCC_ClockConfig+0x162>
      return HAL_ERROR;
 8002e68:	2001      	movs	r0, #1
 8002e6a:	e7f6      	b.n	8002e5a <HAL_RCC_ClockConfig+0x162>
 8002e6c:	40022000 	.word	0x40022000
 8002e70:	40021000 	.word	0x40021000
 8002e74:	08005e88 	.word	0x08005e88
 8002e78:	20000024 	.word	0x20000024
 8002e7c:	2000002c 	.word	0x2000002c

08002e80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	4605      	mov	r5, r0
 8002e88:	4688      	mov	r8, r1
 8002e8a:	4617      	mov	r7, r2
 8002e8c:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e8e:	f7ff f98d 	bl	80021ac <HAL_GetTick>
 8002e92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e94:	1a1b      	subs	r3, r3, r0
 8002e96:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8002e9a:	f7ff f987 	bl	80021ac <HAL_GetTick>
 8002e9e:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ea0:	4b2b      	ldr	r3, [pc, #172]	; (8002f50 <SPI_WaitFlagStateUntilTimeout+0xd0>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8002ea8:	fb09 f303 	mul.w	r3, r9, r3
 8002eac:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002eae:	682b      	ldr	r3, [r5, #0]
 8002eb0:	689c      	ldr	r4, [r3, #8]
 8002eb2:	ea38 0304 	bics.w	r3, r8, r4
 8002eb6:	bf0c      	ite	eq
 8002eb8:	f04f 0c01 	moveq.w	ip, #1
 8002ebc:	f04f 0c00 	movne.w	ip, #0
 8002ec0:	45bc      	cmp	ip, r7
 8002ec2:	d040      	beq.n	8002f46 <SPI_WaitFlagStateUntilTimeout+0xc6>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ec4:	f1b6 3fff 	cmp.w	r6, #4294967295
 8002ec8:	d0f1      	beq.n	8002eae <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002eca:	f7ff f96f 	bl	80021ac <HAL_GetTick>
 8002ece:	eba0 000a 	sub.w	r0, r0, sl
 8002ed2:	4548      	cmp	r0, r9
 8002ed4:	d20a      	bcs.n	8002eec <SPI_WaitFlagStateUntilTimeout+0x6c>
 8002ed6:	f1b9 0f00 	cmp.w	r9, #0
 8002eda:	d007      	beq.n	8002eec <SPI_WaitFlagStateUntilTimeout+0x6c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002edc:	9a01      	ldr	r2, [sp, #4]
 8002ede:	b102      	cbz	r2, 8002ee2 <SPI_WaitFlagStateUntilTimeout+0x62>
 8002ee0:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8002ee2:	9b01      	ldr	r3, [sp, #4]
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	9301      	str	r3, [sp, #4]
 8002ee8:	4691      	mov	r9, r2
 8002eea:	e7e0      	b.n	8002eae <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002eec:	682a      	ldr	r2, [r5, #0]
 8002eee:	6853      	ldr	r3, [r2, #4]
 8002ef0:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002ef4:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ef6:	686b      	ldr	r3, [r5, #4]
 8002ef8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002efc:	d00b      	beq.n	8002f16 <SPI_WaitFlagStateUntilTimeout+0x96>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002efe:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002f00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f04:	d014      	beq.n	8002f30 <SPI_WaitFlagStateUntilTimeout+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 8002f06:	2301      	movs	r3, #1
 8002f08:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 8002f12:	2003      	movs	r0, #3
 8002f14:	e018      	b.n	8002f48 <SPI_WaitFlagStateUntilTimeout+0xc8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f16:	68ab      	ldr	r3, [r5, #8]
 8002f18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f1c:	d002      	beq.n	8002f24 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f22:	d1ec      	bne.n	8002efe <SPI_WaitFlagStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 8002f24:	682a      	ldr	r2, [r5, #0]
 8002f26:	6813      	ldr	r3, [r2, #0]
 8002f28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	e7e6      	b.n	8002efe <SPI_WaitFlagStateUntilTimeout+0x7e>
          SPI_RESET_CRC(hspi);
 8002f30:	682a      	ldr	r2, [r5, #0]
 8002f32:	6813      	ldr	r3, [r2, #0]
 8002f34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	682a      	ldr	r2, [r5, #0]
 8002f3c:	6813      	ldr	r3, [r2, #0]
 8002f3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	e7df      	b.n	8002f06 <SPI_WaitFlagStateUntilTimeout+0x86>
    }
  }

  return HAL_OK;
 8002f46:	2000      	movs	r0, #0
}
 8002f48:	b002      	add	sp, #8
 8002f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f4e:	bf00      	nop
 8002f50:	20000024 	.word	0x20000024

08002f54 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f58:	b082      	sub	sp, #8
 8002f5a:	4606      	mov	r6, r0
 8002f5c:	460c      	mov	r4, r1
 8002f5e:	4615      	mov	r5, r2
 8002f60:	461f      	mov	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002f62:	2300      	movs	r3, #0
 8002f64:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002f68:	f7ff f920 	bl	80021ac <HAL_GetTick>
 8002f6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f6e:	1a1b      	subs	r3, r3, r0
 8002f70:	eb03 0807 	add.w	r8, r3, r7
  tmp_tickstart = HAL_GetTick();
 8002f74:	f7ff f91a 	bl	80021ac <HAL_GetTick>
 8002f78:	4681      	mov	r9, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002f7a:	f8d6 a000 	ldr.w	sl, [r6]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002f7e:	4b31      	ldr	r3, [pc, #196]	; (8003044 <SPI_WaitFifoStateUntilTimeout+0xf0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002f86:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8002f8a:	0d1b      	lsrs	r3, r3, #20
 8002f8c:	fb08 f303 	mul.w	r3, r8, r3
 8002f90:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8002f92:	e002      	b.n	8002f9a <SPI_WaitFifoStateUntilTimeout+0x46>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8002f94:	f1b7 3fff 	cmp.w	r7, #4294967295
 8002f98:	d112      	bne.n	8002fc0 <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 8002f9a:	6833      	ldr	r3, [r6, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	ea03 0c04 	and.w	ip, r3, r4
 8002fa2:	45ac      	cmp	ip, r5
 8002fa4:	d04a      	beq.n	800303c <SPI_WaitFifoStateUntilTimeout+0xe8>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002fa6:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8002faa:	d1f3      	bne.n	8002f94 <SPI_WaitFifoStateUntilTimeout+0x40>
 8002fac:	2d00      	cmp	r5, #0
 8002fae:	d1f1      	bne.n	8002f94 <SPI_WaitFifoStateUntilTimeout+0x40>
      tmpreg8 = *ptmpreg8;
 8002fb0:	f89a 300c 	ldrb.w	r3, [sl, #12]
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8002fba:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002fbe:	e7e9      	b.n	8002f94 <SPI_WaitFifoStateUntilTimeout+0x40>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002fc0:	f7ff f8f4 	bl	80021ac <HAL_GetTick>
 8002fc4:	eba0 0009 	sub.w	r0, r0, r9
 8002fc8:	4540      	cmp	r0, r8
 8002fca:	d20a      	bcs.n	8002fe2 <SPI_WaitFifoStateUntilTimeout+0x8e>
 8002fcc:	f1b8 0f00 	cmp.w	r8, #0
 8002fd0:	d007      	beq.n	8002fe2 <SPI_WaitFifoStateUntilTimeout+0x8e>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002fd2:	9a01      	ldr	r2, [sp, #4]
 8002fd4:	b102      	cbz	r2, 8002fd8 <SPI_WaitFifoStateUntilTimeout+0x84>
 8002fd6:	4642      	mov	r2, r8
      {
        tmp_timeout = 0U;
      }
      count--;
 8002fd8:	9b01      	ldr	r3, [sp, #4]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	9301      	str	r3, [sp, #4]
 8002fde:	4690      	mov	r8, r2
 8002fe0:	e7db      	b.n	8002f9a <SPI_WaitFifoStateUntilTimeout+0x46>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fe2:	6832      	ldr	r2, [r6, #0]
 8002fe4:	6853      	ldr	r3, [r2, #4]
 8002fe6:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002fea:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fec:	6873      	ldr	r3, [r6, #4]
 8002fee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ff2:	d00b      	beq.n	800300c <SPI_WaitFifoStateUntilTimeout+0xb8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ff4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ffa:	d014      	beq.n	8003026 <SPI_WaitFifoStateUntilTimeout+0xd2>
        hspi->State = HAL_SPI_STATE_READY;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8003002:	2300      	movs	r3, #0
 8003004:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 8003008:	2003      	movs	r0, #3
 800300a:	e018      	b.n	800303e <SPI_WaitFifoStateUntilTimeout+0xea>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800300c:	68b3      	ldr	r3, [r6, #8]
 800300e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003012:	d002      	beq.n	800301a <SPI_WaitFifoStateUntilTimeout+0xc6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003018:	d1ec      	bne.n	8002ff4 <SPI_WaitFifoStateUntilTimeout+0xa0>
          __HAL_SPI_DISABLE(hspi);
 800301a:	6832      	ldr	r2, [r6, #0]
 800301c:	6813      	ldr	r3, [r2, #0]
 800301e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003022:	6013      	str	r3, [r2, #0]
 8003024:	e7e6      	b.n	8002ff4 <SPI_WaitFifoStateUntilTimeout+0xa0>
          SPI_RESET_CRC(hspi);
 8003026:	6832      	ldr	r2, [r6, #0]
 8003028:	6813      	ldr	r3, [r2, #0]
 800302a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	6832      	ldr	r2, [r6, #0]
 8003032:	6813      	ldr	r3, [r2, #0]
 8003034:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	e7df      	b.n	8002ffc <SPI_WaitFifoStateUntilTimeout+0xa8>
    }
  }

  return HAL_OK;
 800303c:	2000      	movs	r0, #0
}
 800303e:	b002      	add	sp, #8
 8003040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003044:	20000024 	.word	0x20000024

08003048 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003048:	b570      	push	{r4, r5, r6, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	4604      	mov	r4, r0
 800304e:	460d      	mov	r5, r1
 8003050:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003052:	9200      	str	r2, [sp, #0]
 8003054:	460b      	mov	r3, r1
 8003056:	2200      	movs	r2, #0
 8003058:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800305c:	f7ff ff7a 	bl	8002f54 <SPI_WaitFifoStateUntilTimeout>
 8003060:	b9b0      	cbnz	r0, 8003090 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003062:	9600      	str	r6, [sp, #0]
 8003064:	462b      	mov	r3, r5
 8003066:	2200      	movs	r2, #0
 8003068:	2180      	movs	r1, #128	; 0x80
 800306a:	4620      	mov	r0, r4
 800306c:	f7ff ff08 	bl	8002e80 <SPI_WaitFlagStateUntilTimeout>
 8003070:	b9a8      	cbnz	r0, 800309e <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003072:	9600      	str	r6, [sp, #0]
 8003074:	462b      	mov	r3, r5
 8003076:	2200      	movs	r2, #0
 8003078:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800307c:	4620      	mov	r0, r4
 800307e:	f7ff ff69 	bl	8002f54 <SPI_WaitFifoStateUntilTimeout>
 8003082:	b150      	cbz	r0, 800309a <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003084:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003086:	f043 0320 	orr.w	r3, r3, #32
 800308a:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800308c:	2003      	movs	r0, #3
 800308e:	e004      	b.n	800309a <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003090:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003092:	f043 0320 	orr.w	r3, r3, #32
 8003096:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003098:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 800309a:	b002      	add	sp, #8
 800309c:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800309e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80030a0:	f043 0320 	orr.w	r3, r3, #32
 80030a4:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80030a6:	2003      	movs	r0, #3
 80030a8:	e7f7      	b.n	800309a <SPI_EndRxTxTransaction+0x52>

080030aa <SPI_EndRxTransaction>:
{
 80030aa:	b570      	push	{r4, r5, r6, lr}
 80030ac:	b082      	sub	sp, #8
 80030ae:	4604      	mov	r4, r0
 80030b0:	460d      	mov	r5, r1
 80030b2:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030b4:	6843      	ldr	r3, [r0, #4]
 80030b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030ba:	d00d      	beq.n	80030d8 <SPI_EndRxTransaction+0x2e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030bc:	9600      	str	r6, [sp, #0]
 80030be:	462b      	mov	r3, r5
 80030c0:	2200      	movs	r2, #0
 80030c2:	2180      	movs	r1, #128	; 0x80
 80030c4:	4620      	mov	r0, r4
 80030c6:	f7ff fedb 	bl	8002e80 <SPI_WaitFlagStateUntilTimeout>
 80030ca:	b990      	cbnz	r0, 80030f2 <SPI_EndRxTransaction+0x48>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030cc:	6863      	ldr	r3, [r4, #4]
 80030ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030d2:	d014      	beq.n	80030fe <SPI_EndRxTransaction+0x54>
}
 80030d4:	b002      	add	sp, #8
 80030d6:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030d8:	6883      	ldr	r3, [r0, #8]
 80030da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030de:	d002      	beq.n	80030e6 <SPI_EndRxTransaction+0x3c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030e4:	d1ea      	bne.n	80030bc <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 80030e6:	6822      	ldr	r2, [r4, #0]
 80030e8:	6813      	ldr	r3, [r2, #0]
 80030ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030ee:	6013      	str	r3, [r2, #0]
 80030f0:	e7e4      	b.n	80030bc <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030f2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80030f4:	f043 0320 	orr.w	r3, r3, #32
 80030f8:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80030fa:	2003      	movs	r0, #3
 80030fc:	e7ea      	b.n	80030d4 <SPI_EndRxTransaction+0x2a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030fe:	68a3      	ldr	r3, [r4, #8]
 8003100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003104:	d002      	beq.n	800310c <SPI_EndRxTransaction+0x62>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800310a:	d1e3      	bne.n	80030d4 <SPI_EndRxTransaction+0x2a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800310c:	9600      	str	r6, [sp, #0]
 800310e:	462b      	mov	r3, r5
 8003110:	2200      	movs	r2, #0
 8003112:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003116:	4620      	mov	r0, r4
 8003118:	f7ff ff1c 	bl	8002f54 <SPI_WaitFifoStateUntilTimeout>
 800311c:	2800      	cmp	r0, #0
 800311e:	d0d9      	beq.n	80030d4 <SPI_EndRxTransaction+0x2a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003120:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003122:	f043 0320 	orr.w	r3, r3, #32
 8003126:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8003128:	2003      	movs	r0, #3
 800312a:	e7d3      	b.n	80030d4 <SPI_EndRxTransaction+0x2a>

0800312c <HAL_SPI_Init>:
  if (hspi == NULL)
 800312c:	2800      	cmp	r0, #0
 800312e:	d06a      	beq.n	8003206 <HAL_SPI_Init+0xda>
{
 8003130:	b510      	push	{r4, lr}
 8003132:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003134:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003136:	b933      	cbnz	r3, 8003146 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003138:	6843      	ldr	r3, [r0, #4]
 800313a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800313e:	d005      	beq.n	800314c <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003140:	2300      	movs	r3, #0
 8003142:	61c3      	str	r3, [r0, #28]
 8003144:	e002      	b.n	800314c <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003146:	2300      	movs	r3, #0
 8003148:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800314a:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800314c:	2300      	movs	r3, #0
 800314e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003150:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003154:	2b00      	cmp	r3, #0
 8003156:	d04d      	beq.n	80031f4 <HAL_SPI_Init+0xc8>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003158:	2302      	movs	r3, #2
 800315a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800315e:	6822      	ldr	r2, [r4, #0]
 8003160:	6813      	ldr	r3, [r2, #0]
 8003162:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003166:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003168:	68e3      	ldr	r3, [r4, #12]
 800316a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800316e:	d947      	bls.n	8003200 <HAL_SPI_Init+0xd4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003170:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003172:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003176:	d004      	beq.n	8003182 <HAL_SPI_Init+0x56>
 8003178:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800317c:	d001      	beq.n	8003182 <HAL_SPI_Init+0x56>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800317e:	2300      	movs	r3, #0
 8003180:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003182:	6863      	ldr	r3, [r4, #4]
 8003184:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003188:	68a1      	ldr	r1, [r4, #8]
 800318a:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 800318e:	430b      	orrs	r3, r1
 8003190:	6921      	ldr	r1, [r4, #16]
 8003192:	f001 0102 	and.w	r1, r1, #2
 8003196:	430b      	orrs	r3, r1
 8003198:	6961      	ldr	r1, [r4, #20]
 800319a:	f001 0101 	and.w	r1, r1, #1
 800319e:	430b      	orrs	r3, r1
 80031a0:	69a1      	ldr	r1, [r4, #24]
 80031a2:	f401 7100 	and.w	r1, r1, #512	; 0x200
 80031a6:	430b      	orrs	r3, r1
 80031a8:	69e1      	ldr	r1, [r4, #28]
 80031aa:	f001 0138 	and.w	r1, r1, #56	; 0x38
 80031ae:	430b      	orrs	r3, r1
 80031b0:	6a21      	ldr	r1, [r4, #32]
 80031b2:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80031b6:	430b      	orrs	r3, r1
 80031b8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80031ba:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 80031be:	6820      	ldr	r0, [r4, #0]
 80031c0:	430b      	orrs	r3, r1
 80031c2:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80031c4:	8b63      	ldrh	r3, [r4, #26]
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80031cc:	f001 0110 	and.w	r1, r1, #16
 80031d0:	430b      	orrs	r3, r1
 80031d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031d4:	f001 0108 	and.w	r1, r1, #8
 80031d8:	430b      	orrs	r3, r1
 80031da:	68e1      	ldr	r1, [r4, #12]
 80031dc:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 80031e0:	430b      	orrs	r3, r1
 80031e2:	6821      	ldr	r1, [r4, #0]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	604b      	str	r3, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031e8:	2000      	movs	r0, #0
 80031ea:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031ec:	2301      	movs	r3, #1
 80031ee:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 80031f2:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80031f4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80031f8:	4620      	mov	r0, r4
 80031fa:	f7fe fe31 	bl	8001e60 <HAL_SPI_MspInit>
 80031fe:	e7ab      	b.n	8003158 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003200:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003204:	e7b5      	b.n	8003172 <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8003206:	2001      	movs	r0, #1
}
 8003208:	4770      	bx	lr

0800320a <HAL_SPI_Transmit>:
{
 800320a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800320e:	b083      	sub	sp, #12
 8003210:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8003212:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8003216:	2b01      	cmp	r3, #1
 8003218:	f000 80f6 	beq.w	8003408 <HAL_SPI_Transmit+0x1fe>
 800321c:	4604      	mov	r4, r0
 800321e:	4688      	mov	r8, r1
 8003220:	4691      	mov	r9, r2
 8003222:	2301      	movs	r3, #1
 8003224:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003228:	f7fe ffc0 	bl	80021ac <HAL_GetTick>
 800322c:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800322e:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 8003232:	b2f6      	uxtb	r6, r6
 8003234:	2e01      	cmp	r6, #1
 8003236:	f040 80d4 	bne.w	80033e2 <HAL_SPI_Transmit+0x1d8>
  if ((pData == NULL) || (Size == 0U))
 800323a:	f1b8 0f00 	cmp.w	r8, #0
 800323e:	f000 80d1 	beq.w	80033e4 <HAL_SPI_Transmit+0x1da>
 8003242:	f1b9 0f00 	cmp.w	r9, #0
 8003246:	f000 80cd 	beq.w	80033e4 <HAL_SPI_Transmit+0x1da>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800324a:	2303      	movs	r3, #3
 800324c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003250:	2300      	movs	r3, #0
 8003252:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003254:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003258:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800325c:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003260:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003262:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003266:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 800326a:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 800326c:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800326e:	68a3      	ldr	r3, [r4, #8]
 8003270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003274:	d01e      	beq.n	80032b4 <HAL_SPI_Transmit+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003276:	6823      	ldr	r3, [r4, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800327e:	d103      	bne.n	8003288 <HAL_SPI_Transmit+0x7e>
    __HAL_SPI_ENABLE(hspi);
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003286:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003288:	68e3      	ldr	r3, [r4, #12]
 800328a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800328e:	d942      	bls.n	8003316 <HAL_SPI_Transmit+0x10c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003290:	6863      	ldr	r3, [r4, #4]
 8003292:	b113      	cbz	r3, 800329a <HAL_SPI_Transmit+0x90>
 8003294:	f1b9 0f01 	cmp.w	r9, #1
 8003298:	d123      	bne.n	80032e2 <HAL_SPI_Transmit+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800329a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800329c:	6823      	ldr	r3, [r4, #0]
 800329e:	8812      	ldrh	r2, [r2, #0]
 80032a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80032a4:	3302      	adds	r3, #2
 80032a6:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80032a8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80032b2:	e016      	b.n	80032e2 <HAL_SPI_Transmit+0xd8>
    __HAL_SPI_DISABLE(hspi);
 80032b4:	6822      	ldr	r2, [r4, #0]
 80032b6:	6813      	ldr	r3, [r2, #0]
 80032b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032bc:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80032be:	6822      	ldr	r2, [r4, #0]
 80032c0:	6813      	ldr	r3, [r2, #0]
 80032c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032c6:	6013      	str	r3, [r2, #0]
 80032c8:	e7d5      	b.n	8003276 <HAL_SPI_Transmit+0x6c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032ca:	f7fe ff6f 	bl	80021ac <HAL_GetTick>
 80032ce:	1bc0      	subs	r0, r0, r7
 80032d0:	42a8      	cmp	r0, r5
 80032d2:	d303      	bcc.n	80032dc <HAL_SPI_Transmit+0xd2>
 80032d4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80032d8:	f040 808e 	bne.w	80033f8 <HAL_SPI_Transmit+0x1ee>
 80032dc:	2d00      	cmp	r5, #0
 80032de:	f000 808d 	beq.w	80033fc <HAL_SPI_Transmit+0x1f2>
    while (hspi->TxXferCount > 0U)
 80032e2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d066      	beq.n	80033b8 <HAL_SPI_Transmit+0x1ae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032ea:	6823      	ldr	r3, [r4, #0]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	f012 0f02 	tst.w	r2, #2
 80032f2:	d0ea      	beq.n	80032ca <HAL_SPI_Transmit+0xc0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032f4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80032f6:	8812      	ldrh	r2, [r2, #0]
 80032f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80032fc:	3302      	adds	r3, #2
 80032fe:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003300:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 8003304:	fa1f fc8c 	uxth.w	ip, ip
 8003308:	f10c 3cff 	add.w	ip, ip, #4294967295
 800330c:	fa1f fc8c 	uxth.w	ip, ip
 8003310:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 8003314:	e7e5      	b.n	80032e2 <HAL_SPI_Transmit+0xd8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003316:	6863      	ldr	r3, [r4, #4]
 8003318:	b113      	cbz	r3, 8003320 <HAL_SPI_Transmit+0x116>
 800331a:	f1b9 0f01 	cmp.w	r9, #1
 800331e:	d133      	bne.n	8003388 <HAL_SPI_Transmit+0x17e>
      if (hspi->TxXferCount > 1U)
 8003320:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003322:	b29b      	uxth	r3, r3
 8003324:	2b01      	cmp	r3, #1
 8003326:	d90c      	bls.n	8003342 <HAL_SPI_Transmit+0x138>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003328:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800332a:	6823      	ldr	r3, [r4, #0]
 800332c:	8812      	ldrh	r2, [r2, #0]
 800332e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003330:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003332:	3302      	adds	r3, #2
 8003334:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003336:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003338:	b29b      	uxth	r3, r3
 800333a:	3b02      	subs	r3, #2
 800333c:	b29b      	uxth	r3, r3
 800333e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003340:	e022      	b.n	8003388 <HAL_SPI_Transmit+0x17e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003342:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003344:	6823      	ldr	r3, [r4, #0]
 8003346:	7812      	ldrb	r2, [r2, #0]
 8003348:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 800334a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800334c:	3301      	adds	r3, #1
 800334e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003350:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003352:	b29b      	uxth	r3, r3
 8003354:	3b01      	subs	r3, #1
 8003356:	b29b      	uxth	r3, r3
 8003358:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800335a:	e015      	b.n	8003388 <HAL_SPI_Transmit+0x17e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800335c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8003362:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003364:	3301      	adds	r3, #1
 8003366:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8003368:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800336a:	b29b      	uxth	r3, r3
 800336c:	3b01      	subs	r3, #1
 800336e:	b29b      	uxth	r3, r3
 8003370:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003372:	e009      	b.n	8003388 <HAL_SPI_Transmit+0x17e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003374:	f7fe ff1a 	bl	80021ac <HAL_GetTick>
 8003378:	1bc0      	subs	r0, r0, r7
 800337a:	42a8      	cmp	r0, r5
 800337c:	d302      	bcc.n	8003384 <HAL_SPI_Transmit+0x17a>
 800337e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003382:	d13d      	bne.n	8003400 <HAL_SPI_Transmit+0x1f6>
 8003384:	2d00      	cmp	r5, #0
 8003386:	d03d      	beq.n	8003404 <HAL_SPI_Transmit+0x1fa>
    while (hspi->TxXferCount > 0U)
 8003388:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800338a:	b29b      	uxth	r3, r3
 800338c:	b1a3      	cbz	r3, 80033b8 <HAL_SPI_Transmit+0x1ae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800338e:	6822      	ldr	r2, [r4, #0]
 8003390:	6893      	ldr	r3, [r2, #8]
 8003392:	f013 0f02 	tst.w	r3, #2
 8003396:	d0ed      	beq.n	8003374 <HAL_SPI_Transmit+0x16a>
        if (hspi->TxXferCount > 1U)
 8003398:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800339a:	b29b      	uxth	r3, r3
 800339c:	2b01      	cmp	r3, #1
 800339e:	d9dd      	bls.n	800335c <HAL_SPI_Transmit+0x152>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80033a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80033a8:	3302      	adds	r3, #2
 80033aa:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80033ac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	3b02      	subs	r3, #2
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80033b6:	e7e7      	b.n	8003388 <HAL_SPI_Transmit+0x17e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033b8:	463a      	mov	r2, r7
 80033ba:	4629      	mov	r1, r5
 80033bc:	4620      	mov	r0, r4
 80033be:	f7ff fe43 	bl	8003048 <SPI_EndRxTxTransaction>
 80033c2:	b108      	cbz	r0, 80033c8 <HAL_SPI_Transmit+0x1be>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033c4:	2320      	movs	r3, #32
 80033c6:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033c8:	68a3      	ldr	r3, [r4, #8]
 80033ca:	b933      	cbnz	r3, 80033da <HAL_SPI_Transmit+0x1d0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033cc:	9301      	str	r3, [sp, #4]
 80033ce:	6823      	ldr	r3, [r4, #0]
 80033d0:	68da      	ldr	r2, [r3, #12]
 80033d2:	9201      	str	r2, [sp, #4]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	9301      	str	r3, [sp, #4]
 80033d8:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033da:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80033dc:	b913      	cbnz	r3, 80033e4 <HAL_SPI_Transmit+0x1da>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033de:	2600      	movs	r6, #0
 80033e0:	e000      	b.n	80033e4 <HAL_SPI_Transmit+0x1da>
    errorcode = HAL_BUSY;
 80033e2:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 80033e4:	2301      	movs	r3, #1
 80033e6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80033ea:	2300      	movs	r3, #0
 80033ec:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80033f0:	4630      	mov	r0, r6
 80033f2:	b003      	add	sp, #12
 80033f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 80033f8:	2603      	movs	r6, #3
 80033fa:	e7f3      	b.n	80033e4 <HAL_SPI_Transmit+0x1da>
 80033fc:	2603      	movs	r6, #3
 80033fe:	e7f1      	b.n	80033e4 <HAL_SPI_Transmit+0x1da>
          errorcode = HAL_TIMEOUT;
 8003400:	2603      	movs	r6, #3
 8003402:	e7ef      	b.n	80033e4 <HAL_SPI_Transmit+0x1da>
 8003404:	2603      	movs	r6, #3
 8003406:	e7ed      	b.n	80033e4 <HAL_SPI_Transmit+0x1da>
  __HAL_LOCK(hspi);
 8003408:	2602      	movs	r6, #2
 800340a:	e7f1      	b.n	80033f0 <HAL_SPI_Transmit+0x1e6>

0800340c <HAL_SPI_TransmitReceive>:
{
 800340c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003410:	461f      	mov	r7, r3
 8003412:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 8003414:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8003418:	2b01      	cmp	r3, #1
 800341a:	f000 8164 	beq.w	80036e6 <HAL_SPI_TransmitReceive+0x2da>
 800341e:	4604      	mov	r4, r0
 8003420:	4688      	mov	r8, r1
 8003422:	4691      	mov	r9, r2
 8003424:	2301      	movs	r3, #1
 8003426:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800342a:	f7fe febf 	bl	80021ac <HAL_GetTick>
 800342e:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8003430:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003434:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8003436:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003438:	2b01      	cmp	r3, #1
 800343a:	d00a      	beq.n	8003452 <HAL_SPI_TransmitReceive+0x46>
 800343c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003440:	f040 8138 	bne.w	80036b4 <HAL_SPI_TransmitReceive+0x2a8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003444:	68a2      	ldr	r2, [r4, #8]
 8003446:	2a00      	cmp	r2, #0
 8003448:	f040 813d 	bne.w	80036c6 <HAL_SPI_TransmitReceive+0x2ba>
 800344c:	2b04      	cmp	r3, #4
 800344e:	f040 813c 	bne.w	80036ca <HAL_SPI_TransmitReceive+0x2be>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003452:	f1b8 0f00 	cmp.w	r8, #0
 8003456:	f000 813a 	beq.w	80036ce <HAL_SPI_TransmitReceive+0x2c2>
 800345a:	f1b9 0f00 	cmp.w	r9, #0
 800345e:	f000 8138 	beq.w	80036d2 <HAL_SPI_TransmitReceive+0x2c6>
 8003462:	2f00      	cmp	r7, #0
 8003464:	f000 8137 	beq.w	80036d6 <HAL_SPI_TransmitReceive+0x2ca>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003468:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b04      	cmp	r3, #4
 8003470:	d002      	beq.n	8003478 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003472:	2305      	movs	r3, #5
 8003474:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003478:	2300      	movs	r3, #0
 800347a:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800347c:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003480:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003484:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003488:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800348c:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800348e:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8003490:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003492:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003494:	68e3      	ldr	r3, [r4, #12]
 8003496:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800349a:	d801      	bhi.n	80034a0 <HAL_SPI_TransmitReceive+0x94>
 800349c:	2f01      	cmp	r7, #1
 800349e:	d923      	bls.n	80034e8 <HAL_SPI_TransmitReceive+0xdc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034a0:	6822      	ldr	r2, [r4, #0]
 80034a2:	6853      	ldr	r3, [r2, #4]
 80034a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034a8:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034aa:	6823      	ldr	r3, [r4, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	f012 0f40 	tst.w	r2, #64	; 0x40
 80034b2:	d103      	bne.n	80034bc <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034ba:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034bc:	68e3      	ldr	r3, [r4, #12]
 80034be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034c2:	d958      	bls.n	8003576 <HAL_SPI_TransmitReceive+0x16a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034c4:	6863      	ldr	r3, [r4, #4]
 80034c6:	b10b      	cbz	r3, 80034cc <HAL_SPI_TransmitReceive+0xc0>
 80034c8:	2f01      	cmp	r7, #1
 80034ca:	d10b      	bne.n	80034e4 <HAL_SPI_TransmitReceive+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034cc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80034ce:	6823      	ldr	r3, [r4, #0]
 80034d0:	8812      	ldrh	r2, [r2, #0]
 80034d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80034d6:	3302      	adds	r3, #2
 80034d8:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80034da:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80034dc:	b29b      	uxth	r3, r3
 80034de:	3b01      	subs	r3, #1
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80034e4:	2701      	movs	r7, #1
 80034e6:	e031      	b.n	800354c <HAL_SPI_TransmitReceive+0x140>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034e8:	6822      	ldr	r2, [r4, #0]
 80034ea:	6853      	ldr	r3, [r2, #4]
 80034ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034f0:	6053      	str	r3, [r2, #4]
 80034f2:	e7da      	b.n	80034aa <HAL_SPI_TransmitReceive+0x9e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034f4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80034f6:	8812      	ldrh	r2, [r2, #0]
 80034f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80034fc:	3302      	adds	r3, #2
 80034fe:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003500:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003502:	b29b      	uxth	r3, r3
 8003504:	3b01      	subs	r3, #1
 8003506:	b29b      	uxth	r3, r3
 8003508:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800350a:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800350c:	6823      	ldr	r3, [r4, #0]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	f012 0f01 	tst.w	r2, #1
 8003514:	d011      	beq.n	800353a <HAL_SPI_TransmitReceive+0x12e>
 8003516:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800351a:	b292      	uxth	r2, r2
 800351c:	b16a      	cbz	r2, 800353a <HAL_SPI_TransmitReceive+0x12e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003522:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003524:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003526:	3302      	adds	r3, #2
 8003528:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800352a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800352e:	b29b      	uxth	r3, r3
 8003530:	3b01      	subs	r3, #1
 8003532:	b29b      	uxth	r3, r3
 8003534:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8003538:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800353a:	f7fe fe37 	bl	80021ac <HAL_GetTick>
 800353e:	1b83      	subs	r3, r0, r6
 8003540:	42ab      	cmp	r3, r5
 8003542:	d303      	bcc.n	800354c <HAL_SPI_TransmitReceive+0x140>
 8003544:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003548:	f040 80c7 	bne.w	80036da <HAL_SPI_TransmitReceive+0x2ce>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800354c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800354e:	b29b      	uxth	r3, r3
 8003550:	b92b      	cbnz	r3, 800355e <HAL_SPI_TransmitReceive+0x152>
 8003552:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003556:	b29b      	uxth	r3, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 80a1 	beq.w	80036a0 <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800355e:	6823      	ldr	r3, [r4, #0]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	f012 0f02 	tst.w	r2, #2
 8003566:	d0d1      	beq.n	800350c <HAL_SPI_TransmitReceive+0x100>
 8003568:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800356a:	b292      	uxth	r2, r2
 800356c:	2a00      	cmp	r2, #0
 800356e:	d0cd      	beq.n	800350c <HAL_SPI_TransmitReceive+0x100>
 8003570:	2f00      	cmp	r7, #0
 8003572:	d0cb      	beq.n	800350c <HAL_SPI_TransmitReceive+0x100>
 8003574:	e7be      	b.n	80034f4 <HAL_SPI_TransmitReceive+0xe8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003576:	6863      	ldr	r3, [r4, #4]
 8003578:	b10b      	cbz	r3, 800357e <HAL_SPI_TransmitReceive+0x172>
 800357a:	2f01      	cmp	r7, #1
 800357c:	d10f      	bne.n	800359e <HAL_SPI_TransmitReceive+0x192>
      if (hspi->TxXferCount > 1U)
 800357e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003580:	b29b      	uxth	r3, r3
 8003582:	2b01      	cmp	r3, #1
 8003584:	d90d      	bls.n	80035a2 <HAL_SPI_TransmitReceive+0x196>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003586:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003588:	6823      	ldr	r3, [r4, #0]
 800358a:	8812      	ldrh	r2, [r2, #0]
 800358c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800358e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003590:	3302      	adds	r3, #2
 8003592:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003594:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003596:	b29b      	uxth	r3, r3
 8003598:	3b02      	subs	r3, #2
 800359a:	b29b      	uxth	r3, r3
 800359c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800359e:	2701      	movs	r7, #1
 80035a0:	e049      	b.n	8003636 <HAL_SPI_TransmitReceive+0x22a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80035a2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80035a4:	6823      	ldr	r3, [r4, #0]
 80035a6:	7812      	ldrb	r2, [r2, #0]
 80035a8:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80035aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80035ac:	3301      	adds	r3, #1
 80035ae:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80035b0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80035ba:	e7f0      	b.n	800359e <HAL_SPI_TransmitReceive+0x192>
        if (hspi->TxXferCount > 1U)
 80035bc:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80035be:	b292      	uxth	r2, r2
 80035c0:	2a01      	cmp	r2, #1
 80035c2:	d90c      	bls.n	80035de <HAL_SPI_TransmitReceive+0x1d2>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80035c6:	8812      	ldrh	r2, [r2, #0]
 80035c8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80035ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80035cc:	3302      	adds	r3, #2
 80035ce:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80035d0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	3b02      	subs	r3, #2
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80035da:	2700      	movs	r7, #0
 80035dc:	e03d      	b.n	800365a <HAL_SPI_TransmitReceive+0x24e>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80035de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80035e0:	7812      	ldrb	r2, [r2, #0]
 80035e2:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 80035e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80035e6:	3301      	adds	r3, #1
 80035e8:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80035ea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	3b01      	subs	r3, #1
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80035f4:	2700      	movs	r7, #0
 80035f6:	e030      	b.n	800365a <HAL_SPI_TransmitReceive+0x24e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035f8:	6822      	ldr	r2, [r4, #0]
 80035fa:	6853      	ldr	r3, [r2, #4]
 80035fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003600:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8003602:	2701      	movs	r7, #1
 8003604:	e00d      	b.n	8003622 <HAL_SPI_TransmitReceive+0x216>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003606:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003608:	7b1b      	ldrb	r3, [r3, #12]
 800360a:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 800360c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800360e:	3301      	adds	r3, #1
 8003610:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8003612:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003616:	b29b      	uxth	r3, r3
 8003618:	3b01      	subs	r3, #1
 800361a:	b29b      	uxth	r3, r3
 800361c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8003620:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003622:	f7fe fdc3 	bl	80021ac <HAL_GetTick>
 8003626:	1b80      	subs	r0, r0, r6
 8003628:	42a8      	cmp	r0, r5
 800362a:	d302      	bcc.n	8003632 <HAL_SPI_TransmitReceive+0x226>
 800362c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003630:	d155      	bne.n	80036de <HAL_SPI_TransmitReceive+0x2d2>
 8003632:	2d00      	cmp	r5, #0
 8003634:	d055      	beq.n	80036e2 <HAL_SPI_TransmitReceive+0x2d6>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003636:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003638:	b29b      	uxth	r3, r3
 800363a:	b923      	cbnz	r3, 8003646 <HAL_SPI_TransmitReceive+0x23a>
 800363c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003640:	b29b      	uxth	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d02c      	beq.n	80036a0 <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003646:	6823      	ldr	r3, [r4, #0]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	f012 0f02 	tst.w	r2, #2
 800364e:	d004      	beq.n	800365a <HAL_SPI_TransmitReceive+0x24e>
 8003650:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003652:	b292      	uxth	r2, r2
 8003654:	b10a      	cbz	r2, 800365a <HAL_SPI_TransmitReceive+0x24e>
 8003656:	2f00      	cmp	r7, #0
 8003658:	d1b0      	bne.n	80035bc <HAL_SPI_TransmitReceive+0x1b0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800365a:	6823      	ldr	r3, [r4, #0]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	f012 0f01 	tst.w	r2, #1
 8003662:	d0de      	beq.n	8003622 <HAL_SPI_TransmitReceive+0x216>
 8003664:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003668:	b292      	uxth	r2, r2
 800366a:	2a00      	cmp	r2, #0
 800366c:	d0d9      	beq.n	8003622 <HAL_SPI_TransmitReceive+0x216>
        if (hspi->RxXferCount > 1U)
 800366e:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003672:	b292      	uxth	r2, r2
 8003674:	2a01      	cmp	r2, #1
 8003676:	d9c6      	bls.n	8003606 <HAL_SPI_TransmitReceive+0x1fa>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800367c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800367e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003680:	3302      	adds	r3, #2
 8003682:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003684:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003688:	b29b      	uxth	r3, r3
 800368a:	3b02      	subs	r3, #2
 800368c:	b29b      	uxth	r3, r3
 800368e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003692:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003696:	b29b      	uxth	r3, r3
 8003698:	2b01      	cmp	r3, #1
 800369a:	d9ad      	bls.n	80035f8 <HAL_SPI_TransmitReceive+0x1ec>
        txallowed = 1U;
 800369c:	2701      	movs	r7, #1
 800369e:	e7c0      	b.n	8003622 <HAL_SPI_TransmitReceive+0x216>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036a0:	4632      	mov	r2, r6
 80036a2:	4629      	mov	r1, r5
 80036a4:	4620      	mov	r0, r4
 80036a6:	f7ff fccf 	bl	8003048 <SPI_EndRxTxTransaction>
 80036aa:	b120      	cbz	r0, 80036b6 <HAL_SPI_TransmitReceive+0x2aa>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036ac:	2320      	movs	r3, #32
 80036ae:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 80036b0:	2001      	movs	r0, #1
 80036b2:	e000      	b.n	80036b6 <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_BUSY;
 80036b4:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80036b6:	2301      	movs	r3, #1
 80036b8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80036bc:	2300      	movs	r3, #0
 80036be:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80036c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 80036c6:	2002      	movs	r0, #2
 80036c8:	e7f5      	b.n	80036b6 <HAL_SPI_TransmitReceive+0x2aa>
 80036ca:	2002      	movs	r0, #2
 80036cc:	e7f3      	b.n	80036b6 <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_ERROR;
 80036ce:	2001      	movs	r0, #1
 80036d0:	e7f1      	b.n	80036b6 <HAL_SPI_TransmitReceive+0x2aa>
 80036d2:	2001      	movs	r0, #1
 80036d4:	e7ef      	b.n	80036b6 <HAL_SPI_TransmitReceive+0x2aa>
 80036d6:	2001      	movs	r0, #1
 80036d8:	e7ed      	b.n	80036b6 <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 80036da:	2003      	movs	r0, #3
 80036dc:	e7eb      	b.n	80036b6 <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 80036de:	2003      	movs	r0, #3
 80036e0:	e7e9      	b.n	80036b6 <HAL_SPI_TransmitReceive+0x2aa>
 80036e2:	2003      	movs	r0, #3
 80036e4:	e7e7      	b.n	80036b6 <HAL_SPI_TransmitReceive+0x2aa>
  __HAL_LOCK(hspi);
 80036e6:	2002      	movs	r0, #2
 80036e8:	e7eb      	b.n	80036c2 <HAL_SPI_TransmitReceive+0x2b6>

080036ea <HAL_SPI_Receive>:
{
 80036ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036ee:	b083      	sub	sp, #12
 80036f0:	4604      	mov	r4, r0
 80036f2:	4688      	mov	r8, r1
 80036f4:	4691      	mov	r9, r2
 80036f6:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80036f8:	6840      	ldr	r0, [r0, #4]
 80036fa:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 80036fe:	d043      	beq.n	8003788 <HAL_SPI_Receive+0x9e>
  __HAL_LOCK(hspi);
 8003700:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8003704:	2b01      	cmp	r3, #1
 8003706:	f000 80c3 	beq.w	8003890 <HAL_SPI_Receive+0x1a6>
 800370a:	2301      	movs	r3, #1
 800370c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003710:	f7fe fd4c 	bl	80021ac <HAL_GetTick>
 8003714:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003716:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 800371a:	b2f6      	uxtb	r6, r6
 800371c:	2e01      	cmp	r6, #1
 800371e:	f040 80a4 	bne.w	800386a <HAL_SPI_Receive+0x180>
  if ((pData == NULL) || (Size == 0U))
 8003722:	f1b8 0f00 	cmp.w	r8, #0
 8003726:	f000 80a1 	beq.w	800386c <HAL_SPI_Receive+0x182>
 800372a:	f1b9 0f00 	cmp.w	r9, #0
 800372e:	f000 809d 	beq.w	800386c <HAL_SPI_Receive+0x182>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003732:	2304      	movs	r3, #4
 8003734:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003738:	2300      	movs	r3, #0
 800373a:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800373c:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003740:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003744:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003748:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800374a:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800374c:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800374e:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003750:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003752:	68e3      	ldr	r3, [r4, #12]
 8003754:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003758:	d924      	bls.n	80037a4 <HAL_SPI_Receive+0xba>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800375a:	6822      	ldr	r2, [r4, #0]
 800375c:	6853      	ldr	r3, [r2, #4]
 800375e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003762:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003764:	68a3      	ldr	r3, [r4, #8]
 8003766:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800376a:	d021      	beq.n	80037b0 <HAL_SPI_Receive+0xc6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800376c:	6823      	ldr	r3, [r4, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003774:	d103      	bne.n	800377e <HAL_SPI_Receive+0x94>
    __HAL_SPI_ENABLE(hspi);
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800377c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800377e:	68e3      	ldr	r3, [r4, #12]
 8003780:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003784:	d929      	bls.n	80037da <HAL_SPI_Receive+0xf0>
 8003786:	e04a      	b.n	800381e <HAL_SPI_Receive+0x134>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003788:	68a3      	ldr	r3, [r4, #8]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1b8      	bne.n	8003700 <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800378e:	2304      	movs	r3, #4
 8003790:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003794:	9500      	str	r5, [sp, #0]
 8003796:	4613      	mov	r3, r2
 8003798:	460a      	mov	r2, r1
 800379a:	4620      	mov	r0, r4
 800379c:	f7ff fe36 	bl	800340c <HAL_SPI_TransmitReceive>
 80037a0:	4606      	mov	r6, r0
 80037a2:	e069      	b.n	8003878 <HAL_SPI_Receive+0x18e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037a4:	6822      	ldr	r2, [r4, #0]
 80037a6:	6853      	ldr	r3, [r2, #4]
 80037a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037ac:	6053      	str	r3, [r2, #4]
 80037ae:	e7d9      	b.n	8003764 <HAL_SPI_Receive+0x7a>
    __HAL_SPI_DISABLE(hspi);
 80037b0:	6822      	ldr	r2, [r4, #0]
 80037b2:	6813      	ldr	r3, [r2, #0]
 80037b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037b8:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 80037ba:	6822      	ldr	r2, [r4, #0]
 80037bc:	6813      	ldr	r3, [r2, #0]
 80037be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037c2:	6013      	str	r3, [r2, #0]
 80037c4:	e7d2      	b.n	800376c <HAL_SPI_Receive+0x82>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037c6:	f7fe fcf1 	bl	80021ac <HAL_GetTick>
 80037ca:	1bc0      	subs	r0, r0, r7
 80037cc:	42a8      	cmp	r0, r5
 80037ce:	d302      	bcc.n	80037d6 <HAL_SPI_Receive+0xec>
 80037d0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80037d4:	d154      	bne.n	8003880 <HAL_SPI_Receive+0x196>
 80037d6:	2d00      	cmp	r5, #0
 80037d8:	d054      	beq.n	8003884 <HAL_SPI_Receive+0x19a>
    while (hspi->RxXferCount > 0U)
 80037da:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80037de:	b29b      	uxth	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d036      	beq.n	8003852 <HAL_SPI_Receive+0x168>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80037e4:	6823      	ldr	r3, [r4, #0]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	f012 0f01 	tst.w	r2, #1
 80037ec:	d0eb      	beq.n	80037c6 <HAL_SPI_Receive+0xdc>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80037ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80037f0:	7b1b      	ldrb	r3, [r3, #12]
 80037f2:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80037f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037f6:	3301      	adds	r3, #1
 80037f8:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80037fa:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80037fe:	b29b      	uxth	r3, r3
 8003800:	3b01      	subs	r3, #1
 8003802:	b29b      	uxth	r3, r3
 8003804:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8003808:	e7e7      	b.n	80037da <HAL_SPI_Receive+0xf0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800380a:	f7fe fccf 	bl	80021ac <HAL_GetTick>
 800380e:	1bc0      	subs	r0, r0, r7
 8003810:	42a8      	cmp	r0, r5
 8003812:	d302      	bcc.n	800381a <HAL_SPI_Receive+0x130>
 8003814:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003818:	d136      	bne.n	8003888 <HAL_SPI_Receive+0x19e>
 800381a:	2d00      	cmp	r5, #0
 800381c:	d036      	beq.n	800388c <HAL_SPI_Receive+0x1a2>
    while (hspi->RxXferCount > 0U)
 800381e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003822:	b29b      	uxth	r3, r3
 8003824:	b1ab      	cbz	r3, 8003852 <HAL_SPI_Receive+0x168>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003826:	6823      	ldr	r3, [r4, #0]
 8003828:	689a      	ldr	r2, [r3, #8]
 800382a:	f012 0f01 	tst.w	r2, #1
 800382e:	d0ec      	beq.n	800380a <HAL_SPI_Receive+0x120>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003834:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003836:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003838:	3302      	adds	r3, #2
 800383a:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800383c:	f8b4 c046 	ldrh.w	ip, [r4, #70]	; 0x46
 8003840:	fa1f fc8c 	uxth.w	ip, ip
 8003844:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003848:	fa1f fc8c 	uxth.w	ip, ip
 800384c:	f8a4 c046 	strh.w	ip, [r4, #70]	; 0x46
 8003850:	e7e5      	b.n	800381e <HAL_SPI_Receive+0x134>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003852:	463a      	mov	r2, r7
 8003854:	4629      	mov	r1, r5
 8003856:	4620      	mov	r0, r4
 8003858:	f7ff fc27 	bl	80030aa <SPI_EndRxTransaction>
 800385c:	b108      	cbz	r0, 8003862 <HAL_SPI_Receive+0x178>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800385e:	2320      	movs	r3, #32
 8003860:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003862:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003864:	b913      	cbnz	r3, 800386c <HAL_SPI_Receive+0x182>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003866:	2600      	movs	r6, #0
 8003868:	e000      	b.n	800386c <HAL_SPI_Receive+0x182>
    errorcode = HAL_BUSY;
 800386a:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 800386c:	2301      	movs	r3, #1
 800386e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003872:	2300      	movs	r3, #0
 8003874:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8003878:	4630      	mov	r0, r6
 800387a:	b003      	add	sp, #12
 800387c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8003880:	2603      	movs	r6, #3
 8003882:	e7f3      	b.n	800386c <HAL_SPI_Receive+0x182>
 8003884:	2603      	movs	r6, #3
 8003886:	e7f1      	b.n	800386c <HAL_SPI_Receive+0x182>
          errorcode = HAL_TIMEOUT;
 8003888:	2603      	movs	r6, #3
 800388a:	e7ef      	b.n	800386c <HAL_SPI_Receive+0x182>
 800388c:	2603      	movs	r6, #3
 800388e:	e7ed      	b.n	800386c <HAL_SPI_Receive+0x182>
  __HAL_LOCK(hspi);
 8003890:	2602      	movs	r6, #2
 8003892:	e7f1      	b.n	8003878 <HAL_SPI_Receive+0x18e>

08003894 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003894:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003896:	6a03      	ldr	r3, [r0, #32]
 8003898:	f023 0301 	bic.w	r3, r3, #1
 800389c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800389e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a0:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038a2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80038a8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038ac:	680c      	ldr	r4, [r1, #0]
 80038ae:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038b0:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038b4:	688c      	ldr	r4, [r1, #8]
 80038b6:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038b8:	4c15      	ldr	r4, [pc, #84]	; (8003910 <TIM_OC1_SetConfig+0x7c>)
 80038ba:	42a0      	cmp	r0, r4
 80038bc:	d007      	beq.n	80038ce <TIM_OC1_SetConfig+0x3a>
 80038be:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 80038c2:	42a0      	cmp	r0, r4
 80038c4:	d003      	beq.n	80038ce <TIM_OC1_SetConfig+0x3a>
 80038c6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80038ca:	42a0      	cmp	r0, r4
 80038cc:	d105      	bne.n	80038da <TIM_OC1_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038ce:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038d2:	68cc      	ldr	r4, [r1, #12]
 80038d4:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038d6:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038da:	4c0d      	ldr	r4, [pc, #52]	; (8003910 <TIM_OC1_SetConfig+0x7c>)
 80038dc:	42a0      	cmp	r0, r4
 80038de:	d007      	beq.n	80038f0 <TIM_OC1_SetConfig+0x5c>
 80038e0:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 80038e4:	42a0      	cmp	r0, r4
 80038e6:	d003      	beq.n	80038f0 <TIM_OC1_SetConfig+0x5c>
 80038e8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80038ec:	42a0      	cmp	r0, r4
 80038ee:	d107      	bne.n	8003900 <TIM_OC1_SetConfig+0x6c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038f0:	f425 7c40 	bic.w	ip, r5, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038f4:	694c      	ldr	r4, [r1, #20]
 80038f6:	ea44 0c0c 	orr.w	ip, r4, ip
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038fa:	698d      	ldr	r5, [r1, #24]
 80038fc:	ea45 050c 	orr.w	r5, r5, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003900:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003902:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003904:	684a      	ldr	r2, [r1, #4]
 8003906:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003908:	6203      	str	r3, [r0, #32]
}
 800390a:	bc30      	pop	{r4, r5}
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	40012c00 	.word	0x40012c00

08003914 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003914:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003916:	6a03      	ldr	r3, [r0, #32]
 8003918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800391c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800391e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003920:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003922:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003924:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003928:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800392c:	680d      	ldr	r5, [r1, #0]
 800392e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003930:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003934:	688d      	ldr	r5, [r1, #8]
 8003936:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800393a:	4d12      	ldr	r5, [pc, #72]	; (8003984 <TIM_OC3_SetConfig+0x70>)
 800393c:	42a8      	cmp	r0, r5
 800393e:	d019      	beq.n	8003974 <TIM_OC3_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003940:	4d10      	ldr	r5, [pc, #64]	; (8003984 <TIM_OC3_SetConfig+0x70>)
 8003942:	42a8      	cmp	r0, r5
 8003944:	d007      	beq.n	8003956 <TIM_OC3_SetConfig+0x42>
 8003946:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800394a:	42a8      	cmp	r0, r5
 800394c:	d003      	beq.n	8003956 <TIM_OC3_SetConfig+0x42>
 800394e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003952:	42a8      	cmp	r0, r5
 8003954:	d107      	bne.n	8003966 <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003956:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800395a:	694d      	ldr	r5, [r1, #20]
 800395c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003960:	698d      	ldr	r5, [r1, #24]
 8003962:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003966:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003968:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800396a:	684a      	ldr	r2, [r1, #4]
 800396c:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800396e:	6203      	str	r3, [r0, #32]
}
 8003970:	bc30      	pop	{r4, r5}
 8003972:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8003974:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003978:	68cd      	ldr	r5, [r1, #12]
 800397a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800397e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003982:	e7dd      	b.n	8003940 <TIM_OC3_SetConfig+0x2c>
 8003984:	40012c00 	.word	0x40012c00

08003988 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003988:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800398a:	6a03      	ldr	r3, [r0, #32]
 800398c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003990:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003992:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003994:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003996:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003998:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800399c:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039a0:	680d      	ldr	r5, [r1, #0]
 80039a2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039aa:	688d      	ldr	r5, [r1, #8]
 80039ac:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039b0:	4d0b      	ldr	r5, [pc, #44]	; (80039e0 <TIM_OC4_SetConfig+0x58>)
 80039b2:	42a8      	cmp	r0, r5
 80039b4:	d007      	beq.n	80039c6 <TIM_OC4_SetConfig+0x3e>
 80039b6:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80039ba:	42a8      	cmp	r0, r5
 80039bc:	d003      	beq.n	80039c6 <TIM_OC4_SetConfig+0x3e>
 80039be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80039c2:	42a8      	cmp	r0, r5
 80039c4:	d104      	bne.n	80039d0 <TIM_OC4_SetConfig+0x48>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039c6:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039ca:	694d      	ldr	r5, [r1, #20]
 80039cc:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039d2:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039d4:	684b      	ldr	r3, [r1, #4]
 80039d6:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039d8:	6202      	str	r2, [r0, #32]
}
 80039da:	bc30      	pop	{r4, r5}
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	40012c00 	.word	0x40012c00

080039e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80039e4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80039e6:	6a03      	ldr	r3, [r0, #32]
 80039e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ec:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ee:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039f0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80039f2:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80039f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80039f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039fc:	680d      	ldr	r5, [r1, #0]
 80039fe:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003a00:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003a04:	688d      	ldr	r5, [r1, #8]
 8003a06:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a0a:	4d0b      	ldr	r5, [pc, #44]	; (8003a38 <TIM_OC5_SetConfig+0x54>)
 8003a0c:	42a8      	cmp	r0, r5
 8003a0e:	d007      	beq.n	8003a20 <TIM_OC5_SetConfig+0x3c>
 8003a10:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003a14:	42a8      	cmp	r0, r5
 8003a16:	d003      	beq.n	8003a20 <TIM_OC5_SetConfig+0x3c>
 8003a18:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003a1c:	42a8      	cmp	r0, r5
 8003a1e:	d104      	bne.n	8003a2a <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003a20:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003a24:	694d      	ldr	r5, [r1, #20]
 8003a26:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a2a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a2c:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003a2e:	684a      	ldr	r2, [r1, #4]
 8003a30:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a32:	6203      	str	r3, [r0, #32]
}
 8003a34:	bc30      	pop	{r4, r5}
 8003a36:	4770      	bx	lr
 8003a38:	40012c00 	.word	0x40012c00

08003a3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a3c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003a3e:	6a03      	ldr	r3, [r0, #32]
 8003a40:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003a44:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a46:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a48:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a4a:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003a4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a54:	680d      	ldr	r5, [r1, #0]
 8003a56:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003a5a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003a5e:	688d      	ldr	r5, [r1, #8]
 8003a60:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a64:	4d0b      	ldr	r5, [pc, #44]	; (8003a94 <TIM_OC6_SetConfig+0x58>)
 8003a66:	42a8      	cmp	r0, r5
 8003a68:	d007      	beq.n	8003a7a <TIM_OC6_SetConfig+0x3e>
 8003a6a:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003a6e:	42a8      	cmp	r0, r5
 8003a70:	d003      	beq.n	8003a7a <TIM_OC6_SetConfig+0x3e>
 8003a72:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003a76:	42a8      	cmp	r0, r5
 8003a78:	d104      	bne.n	8003a84 <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003a7a:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003a7e:	694d      	ldr	r5, [r1, #20]
 8003a80:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a84:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a86:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003a88:	684b      	ldr	r3, [r1, #4]
 8003a8a:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a8c:	6202      	str	r2, [r0, #32]
}
 8003a8e:	bc30      	pop	{r4, r5}
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	40012c00 	.word	0x40012c00

08003a98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a98:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a9a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a9c:	6a04      	ldr	r4, [r0, #32]
 8003a9e:	f024 0401 	bic.w	r4, r4, #1
 8003aa2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aa4:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003aa6:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003aaa:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003aae:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8003ab2:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ab4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003ab6:	6203      	str	r3, [r0, #32]
}
 8003ab8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003abe:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ac0:	6a04      	ldr	r4, [r0, #32]
 8003ac2:	f024 0410 	bic.w	r4, r4, #16
 8003ac6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ac8:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003aca:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003acc:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ad0:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ad4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ad8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003adc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003ade:	6203      	str	r3, [r0, #32]
}
 8003ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ae6:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003aec:	430b      	orrs	r3, r1
 8003aee:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003af2:	6083      	str	r3, [r0, #8]
}
 8003af4:	4770      	bx	lr
	...

08003af8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003af8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d126      	bne.n	8003b50 <HAL_TIM_Base_Start_IT+0x58>
  htim->State = HAL_TIM_STATE_BUSY;
 8003b02:	2302      	movs	r3, #2
 8003b04:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b08:	6802      	ldr	r2, [r0, #0]
 8003b0a:	68d3      	ldr	r3, [r2, #12]
 8003b0c:	f043 0301 	orr.w	r3, r3, #1
 8003b10:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b12:	6803      	ldr	r3, [r0, #0]
 8003b14:	4a11      	ldr	r2, [pc, #68]	; (8003b5c <HAL_TIM_Base_Start_IT+0x64>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d00c      	beq.n	8003b34 <HAL_TIM_Base_Start_IT+0x3c>
 8003b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b1e:	d009      	beq.n	8003b34 <HAL_TIM_Base_Start_IT+0x3c>
 8003b20:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d005      	beq.n	8003b34 <HAL_TIM_Base_Start_IT+0x3c>
    __HAL_TIM_ENABLE(htim);
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	f042 0201 	orr.w	r2, r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003b30:	2000      	movs	r0, #0
 8003b32:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b34:	6899      	ldr	r1, [r3, #8]
 8003b36:	4a0a      	ldr	r2, [pc, #40]	; (8003b60 <HAL_TIM_Base_Start_IT+0x68>)
 8003b38:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b3a:	2a06      	cmp	r2, #6
 8003b3c:	d00a      	beq.n	8003b54 <HAL_TIM_Base_Start_IT+0x5c>
 8003b3e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003b42:	d009      	beq.n	8003b58 <HAL_TIM_Base_Start_IT+0x60>
      __HAL_TIM_ENABLE(htim);
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	f042 0201 	orr.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003b4c:	2000      	movs	r0, #0
 8003b4e:	4770      	bx	lr
    return HAL_ERROR;
 8003b50:	2001      	movs	r0, #1
 8003b52:	4770      	bx	lr
  return HAL_OK;
 8003b54:	2000      	movs	r0, #0
 8003b56:	4770      	bx	lr
 8003b58:	2000      	movs	r0, #0
}
 8003b5a:	4770      	bx	lr
 8003b5c:	40012c00 	.word	0x40012c00
 8003b60:	00010007 	.word	0x00010007

08003b64 <HAL_TIM_OC_MspInit>:
}
 8003b64:	4770      	bx	lr

08003b66 <HAL_TIM_PeriodElapsedCallback>:
}
 8003b66:	4770      	bx	lr

08003b68 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8003b68:	4770      	bx	lr

08003b6a <HAL_TIM_IC_CaptureCallback>:
}
 8003b6a:	4770      	bx	lr

08003b6c <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8003b6c:	4770      	bx	lr

08003b6e <HAL_TIM_TriggerCallback>:
}
 8003b6e:	4770      	bx	lr

08003b70 <HAL_TIM_IRQHandler>:
{
 8003b70:	b510      	push	{r4, lr}
 8003b72:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b74:	6803      	ldr	r3, [r0, #0]
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	f012 0f02 	tst.w	r2, #2
 8003b7c:	d011      	beq.n	8003ba2 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b7e:	68da      	ldr	r2, [r3, #12]
 8003b80:	f012 0f02 	tst.w	r2, #2
 8003b84:	d00d      	beq.n	8003ba2 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b86:	f06f 0202 	mvn.w	r2, #2
 8003b8a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b90:	6803      	ldr	r3, [r0, #0]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	f013 0f03 	tst.w	r3, #3
 8003b98:	d079      	beq.n	8003c8e <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8003b9a:	f7ff ffe6 	bl	8003b6a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ba2:	6823      	ldr	r3, [r4, #0]
 8003ba4:	691a      	ldr	r2, [r3, #16]
 8003ba6:	f012 0f04 	tst.w	r2, #4
 8003baa:	d012      	beq.n	8003bd2 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	f012 0f04 	tst.w	r2, #4
 8003bb2:	d00e      	beq.n	8003bd2 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bb4:	f06f 0204 	mvn.w	r2, #4
 8003bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bba:	2302      	movs	r3, #2
 8003bbc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bbe:	6823      	ldr	r3, [r4, #0]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003bc6:	d068      	beq.n	8003c9a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003bc8:	4620      	mov	r0, r4
 8003bca:	f7ff ffce 	bl	8003b6a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bd2:	6823      	ldr	r3, [r4, #0]
 8003bd4:	691a      	ldr	r2, [r3, #16]
 8003bd6:	f012 0f08 	tst.w	r2, #8
 8003bda:	d012      	beq.n	8003c02 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bdc:	68da      	ldr	r2, [r3, #12]
 8003bde:	f012 0f08 	tst.w	r2, #8
 8003be2:	d00e      	beq.n	8003c02 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003be4:	f06f 0208 	mvn.w	r2, #8
 8003be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bea:	2304      	movs	r3, #4
 8003bec:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bee:	6823      	ldr	r3, [r4, #0]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	f013 0f03 	tst.w	r3, #3
 8003bf6:	d057      	beq.n	8003ca8 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8003bf8:	4620      	mov	r0, r4
 8003bfa:	f7ff ffb6 	bl	8003b6a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c02:	6823      	ldr	r3, [r4, #0]
 8003c04:	691a      	ldr	r2, [r3, #16]
 8003c06:	f012 0f10 	tst.w	r2, #16
 8003c0a:	d012      	beq.n	8003c32 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	f012 0f10 	tst.w	r2, #16
 8003c12:	d00e      	beq.n	8003c32 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c14:	f06f 0210 	mvn.w	r2, #16
 8003c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c1a:	2308      	movs	r3, #8
 8003c1c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003c26:	d046      	beq.n	8003cb6 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8003c28:	4620      	mov	r0, r4
 8003c2a:	f7ff ff9e 	bl	8003b6a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	691a      	ldr	r2, [r3, #16]
 8003c36:	f012 0f01 	tst.w	r2, #1
 8003c3a:	d003      	beq.n	8003c44 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c3c:	68da      	ldr	r2, [r3, #12]
 8003c3e:	f012 0f01 	tst.w	r2, #1
 8003c42:	d13f      	bne.n	8003cc4 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c44:	6823      	ldr	r3, [r4, #0]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003c4c:	d003      	beq.n	8003c56 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003c54:	d13d      	bne.n	8003cd2 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c56:	6823      	ldr	r3, [r4, #0]
 8003c58:	691a      	ldr	r2, [r3, #16]
 8003c5a:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003c5e:	d003      	beq.n	8003c68 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003c66:	d13b      	bne.n	8003ce0 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c68:	6823      	ldr	r3, [r4, #0]
 8003c6a:	691a      	ldr	r2, [r3, #16]
 8003c6c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003c70:	d003      	beq.n	8003c7a <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c72:	68da      	ldr	r2, [r3, #12]
 8003c74:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003c78:	d139      	bne.n	8003cee <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c7a:	6823      	ldr	r3, [r4, #0]
 8003c7c:	691a      	ldr	r2, [r3, #16]
 8003c7e:	f012 0f20 	tst.w	r2, #32
 8003c82:	d003      	beq.n	8003c8c <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	f012 0f20 	tst.w	r2, #32
 8003c8a:	d137      	bne.n	8003cfc <HAL_TIM_IRQHandler+0x18c>
}
 8003c8c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c8e:	f7ff ff6b 	bl	8003b68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c92:	4620      	mov	r0, r4
 8003c94:	f7ff ff6a 	bl	8003b6c <HAL_TIM_PWM_PulseFinishedCallback>
 8003c98:	e781      	b.n	8003b9e <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	f7ff ff64 	bl	8003b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	f7ff ff63 	bl	8003b6c <HAL_TIM_PWM_PulseFinishedCallback>
 8003ca6:	e792      	b.n	8003bce <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ca8:	4620      	mov	r0, r4
 8003caa:	f7ff ff5d 	bl	8003b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cae:	4620      	mov	r0, r4
 8003cb0:	f7ff ff5c 	bl	8003b6c <HAL_TIM_PWM_PulseFinishedCallback>
 8003cb4:	e7a3      	b.n	8003bfe <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cb6:	4620      	mov	r0, r4
 8003cb8:	f7ff ff56 	bl	8003b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cbc:	4620      	mov	r0, r4
 8003cbe:	f7ff ff55 	bl	8003b6c <HAL_TIM_PWM_PulseFinishedCallback>
 8003cc2:	e7b4      	b.n	8003c2e <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cc4:	f06f 0201 	mvn.w	r2, #1
 8003cc8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cca:	4620      	mov	r0, r4
 8003ccc:	f7ff ff4b 	bl	8003b66 <HAL_TIM_PeriodElapsedCallback>
 8003cd0:	e7b8      	b.n	8003c44 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cd2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cd6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003cd8:	4620      	mov	r0, r4
 8003cda:	f000 f9ee 	bl	80040ba <HAL_TIMEx_BreakCallback>
 8003cde:	e7ba      	b.n	8003c56 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ce0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003ce4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003ce6:	4620      	mov	r0, r4
 8003ce8:	f000 f9e8 	bl	80040bc <HAL_TIMEx_Break2Callback>
 8003cec:	e7bc      	b.n	8003c68 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cf2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003cf4:	4620      	mov	r0, r4
 8003cf6:	f7ff ff3a 	bl	8003b6e <HAL_TIM_TriggerCallback>
 8003cfa:	e7be      	b.n	8003c7a <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cfc:	f06f 0220 	mvn.w	r2, #32
 8003d00:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003d02:	4620      	mov	r0, r4
 8003d04:	f000 f9d8 	bl	80040b8 <HAL_TIMEx_CommutCallback>
}
 8003d08:	e7c0      	b.n	8003c8c <HAL_TIM_IRQHandler+0x11c>
	...

08003d0c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003d0c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d0e:	4a1a      	ldr	r2, [pc, #104]	; (8003d78 <TIM_Base_SetConfig+0x6c>)
 8003d10:	4290      	cmp	r0, r2
 8003d12:	d002      	beq.n	8003d1a <TIM_Base_SetConfig+0xe>
 8003d14:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003d18:	d103      	bne.n	8003d22 <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003d1e:	684a      	ldr	r2, [r1, #4]
 8003d20:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d22:	4a15      	ldr	r2, [pc, #84]	; (8003d78 <TIM_Base_SetConfig+0x6c>)
 8003d24:	4290      	cmp	r0, r2
 8003d26:	d00a      	beq.n	8003d3e <TIM_Base_SetConfig+0x32>
 8003d28:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003d2c:	d007      	beq.n	8003d3e <TIM_Base_SetConfig+0x32>
 8003d2e:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8003d32:	4290      	cmp	r0, r2
 8003d34:	d003      	beq.n	8003d3e <TIM_Base_SetConfig+0x32>
 8003d36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d3a:	4290      	cmp	r0, r2
 8003d3c:	d103      	bne.n	8003d46 <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d42:	68ca      	ldr	r2, [r1, #12]
 8003d44:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d4a:	694a      	ldr	r2, [r1, #20]
 8003d4c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003d4e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d50:	688b      	ldr	r3, [r1, #8]
 8003d52:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003d54:	680b      	ldr	r3, [r1, #0]
 8003d56:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d58:	4b07      	ldr	r3, [pc, #28]	; (8003d78 <TIM_Base_SetConfig+0x6c>)
 8003d5a:	4298      	cmp	r0, r3
 8003d5c:	d007      	beq.n	8003d6e <TIM_Base_SetConfig+0x62>
 8003d5e:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8003d62:	4298      	cmp	r0, r3
 8003d64:	d003      	beq.n	8003d6e <TIM_Base_SetConfig+0x62>
 8003d66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d6a:	4298      	cmp	r0, r3
 8003d6c:	d101      	bne.n	8003d72 <TIM_Base_SetConfig+0x66>
    TIMx->RCR = Structure->RepetitionCounter;
 8003d6e:	690b      	ldr	r3, [r1, #16]
 8003d70:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003d72:	2301      	movs	r3, #1
 8003d74:	6143      	str	r3, [r0, #20]
}
 8003d76:	4770      	bx	lr
 8003d78:	40012c00 	.word	0x40012c00

08003d7c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003d7c:	b360      	cbz	r0, 8003dd8 <HAL_TIM_Base_Init+0x5c>
{
 8003d7e:	b510      	push	{r4, lr}
 8003d80:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003d82:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003d86:	b313      	cbz	r3, 8003dce <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8003d88:	2302      	movs	r3, #2
 8003d8a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d8e:	4621      	mov	r1, r4
 8003d90:	f851 0b04 	ldr.w	r0, [r1], #4
 8003d94:	f7ff ffba 	bl	8003d0c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d9e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003da2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003da6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003daa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003dae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003db2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003dba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003dbe:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003dc2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003dc6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003dca:	2000      	movs	r0, #0
}
 8003dcc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003dce:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003dd2:	f7fe f8a1 	bl	8001f18 <HAL_TIM_Base_MspInit>
 8003dd6:	e7d7      	b.n	8003d88 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003dd8:	2001      	movs	r0, #1
}
 8003dda:	4770      	bx	lr

08003ddc <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8003ddc:	b360      	cbz	r0, 8003e38 <HAL_TIM_OC_Init+0x5c>
{
 8003dde:	b510      	push	{r4, lr}
 8003de0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003de2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003de6:	b313      	cbz	r3, 8003e2e <HAL_TIM_OC_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8003de8:	2302      	movs	r3, #2
 8003dea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003dee:	4621      	mov	r1, r4
 8003df0:	f851 0b04 	ldr.w	r0, [r1], #4
 8003df4:	f7ff ff8a 	bl	8003d0c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dfe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003e02:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003e06:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003e0a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003e0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e16:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003e1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e1e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003e22:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003e26:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003e2a:	2000      	movs	r0, #0
}
 8003e2c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003e2e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8003e32:	f7ff fe97 	bl	8003b64 <HAL_TIM_OC_MspInit>
 8003e36:	e7d7      	b.n	8003de8 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8003e38:	2001      	movs	r0, #1
}
 8003e3a:	4770      	bx	lr

08003e3c <TIM_OC2_SetConfig>:
{
 8003e3c:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e3e:	6a03      	ldr	r3, [r0, #32]
 8003e40:	f023 0310 	bic.w	r3, r3, #16
 8003e44:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003e46:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003e48:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003e4a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e4c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003e50:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e54:	680d      	ldr	r5, [r1, #0]
 8003e56:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8003e5a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e5e:	688d      	ldr	r5, [r1, #8]
 8003e60:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e64:	4d12      	ldr	r5, [pc, #72]	; (8003eb0 <TIM_OC2_SetConfig+0x74>)
 8003e66:	42a8      	cmp	r0, r5
 8003e68:	d019      	beq.n	8003e9e <TIM_OC2_SetConfig+0x62>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e6a:	4d11      	ldr	r5, [pc, #68]	; (8003eb0 <TIM_OC2_SetConfig+0x74>)
 8003e6c:	42a8      	cmp	r0, r5
 8003e6e:	d007      	beq.n	8003e80 <TIM_OC2_SetConfig+0x44>
 8003e70:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003e74:	42a8      	cmp	r0, r5
 8003e76:	d003      	beq.n	8003e80 <TIM_OC2_SetConfig+0x44>
 8003e78:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003e7c:	42a8      	cmp	r0, r5
 8003e7e:	d107      	bne.n	8003e90 <TIM_OC2_SetConfig+0x54>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e80:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e84:	694d      	ldr	r5, [r1, #20]
 8003e86:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e8a:	698d      	ldr	r5, [r1, #24]
 8003e8c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8003e90:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003e92:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003e94:	684a      	ldr	r2, [r1, #4]
 8003e96:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003e98:	6203      	str	r3, [r0, #32]
}
 8003e9a:	bc30      	pop	{r4, r5}
 8003e9c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ea2:	68cd      	ldr	r5, [r1, #12]
 8003ea4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ea8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eac:	e7dd      	b.n	8003e6a <TIM_OC2_SetConfig+0x2e>
 8003eae:	bf00      	nop
 8003eb0:	40012c00 	.word	0x40012c00

08003eb4 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8003eb4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d036      	beq.n	8003f2a <HAL_TIM_OC_ConfigChannel+0x76>
{
 8003ebc:	b510      	push	{r4, lr}
 8003ebe:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8003ec6:	2a14      	cmp	r2, #20
 8003ec8:	d82a      	bhi.n	8003f20 <HAL_TIM_OC_ConfigChannel+0x6c>
 8003eca:	e8df f002 	tbb	[pc, r2]
 8003ece:	290b      	.short	0x290b
 8003ed0:	29102929 	.word	0x29102929
 8003ed4:	29152929 	.word	0x29152929
 8003ed8:	291a2929 	.word	0x291a2929
 8003edc:	291f2929 	.word	0x291f2929
 8003ee0:	2929      	.short	0x2929
 8003ee2:	24          	.byte	0x24
 8003ee3:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ee4:	6800      	ldr	r0, [r0, #0]
 8003ee6:	f7ff fcd5 	bl	8003894 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003eea:	2000      	movs	r0, #0
      break;
 8003eec:	e019      	b.n	8003f22 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003eee:	6800      	ldr	r0, [r0, #0]
 8003ef0:	f7ff ffa4 	bl	8003e3c <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003ef4:	2000      	movs	r0, #0
      break;
 8003ef6:	e014      	b.n	8003f22 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ef8:	6800      	ldr	r0, [r0, #0]
 8003efa:	f7ff fd0b 	bl	8003914 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003efe:	2000      	movs	r0, #0
      break;
 8003f00:	e00f      	b.n	8003f22 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f02:	6800      	ldr	r0, [r0, #0]
 8003f04:	f7ff fd40 	bl	8003988 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003f08:	2000      	movs	r0, #0
      break;
 8003f0a:	e00a      	b.n	8003f22 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003f0c:	6800      	ldr	r0, [r0, #0]
 8003f0e:	f7ff fd69 	bl	80039e4 <TIM_OC5_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003f12:	2000      	movs	r0, #0
      break;
 8003f14:	e005      	b.n	8003f22 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f16:	6800      	ldr	r0, [r0, #0]
 8003f18:	f7ff fd90 	bl	8003a3c <TIM_OC6_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003f1c:	2000      	movs	r0, #0
      break;
 8003f1e:	e000      	b.n	8003f22 <HAL_TIM_OC_ConfigChannel+0x6e>
  switch (Channel)
 8003f20:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003f22:	2300      	movs	r3, #0
 8003f24:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003f28:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8003f2a:	2002      	movs	r0, #2
}
 8003f2c:	4770      	bx	lr

08003f2e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f2e:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f30:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f32:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f36:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f40:	6082      	str	r2, [r0, #8]
}
 8003f42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003f48:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d076      	beq.n	800403e <HAL_TIM_ConfigClockSource+0xf6>
{
 8003f50:	b510      	push	{r4, lr}
 8003f52:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003f54:	2301      	movs	r3, #1
 8003f56:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003f60:	6802      	ldr	r2, [r0, #0]
 8003f62:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f64:	4b37      	ldr	r3, [pc, #220]	; (8004044 <HAL_TIM_ConfigClockSource+0xfc>)
 8003f66:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8003f68:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003f6a:	680b      	ldr	r3, [r1, #0]
 8003f6c:	2b60      	cmp	r3, #96	; 0x60
 8003f6e:	d04c      	beq.n	800400a <HAL_TIM_ConfigClockSource+0xc2>
 8003f70:	d829      	bhi.n	8003fc6 <HAL_TIM_ConfigClockSource+0x7e>
 8003f72:	2b40      	cmp	r3, #64	; 0x40
 8003f74:	d054      	beq.n	8004020 <HAL_TIM_ConfigClockSource+0xd8>
 8003f76:	d90c      	bls.n	8003f92 <HAL_TIM_ConfigClockSource+0x4a>
 8003f78:	2b50      	cmp	r3, #80	; 0x50
 8003f7a:	d122      	bne.n	8003fc2 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f7c:	68ca      	ldr	r2, [r1, #12]
 8003f7e:	6849      	ldr	r1, [r1, #4]
 8003f80:	6820      	ldr	r0, [r4, #0]
 8003f82:	f7ff fd89 	bl	8003a98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f86:	2150      	movs	r1, #80	; 0x50
 8003f88:	6820      	ldr	r0, [r4, #0]
 8003f8a:	f7ff fdac 	bl	8003ae6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003f8e:	2000      	movs	r0, #0
      break;
 8003f90:	e005      	b.n	8003f9e <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8003f92:	2b20      	cmp	r3, #32
 8003f94:	d00d      	beq.n	8003fb2 <HAL_TIM_ConfigClockSource+0x6a>
 8003f96:	d909      	bls.n	8003fac <HAL_TIM_ConfigClockSource+0x64>
 8003f98:	2b30      	cmp	r3, #48	; 0x30
 8003f9a:	d00a      	beq.n	8003fb2 <HAL_TIM_ConfigClockSource+0x6a>
      status = HAL_ERROR;
 8003f9c:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003faa:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8003fac:	b10b      	cbz	r3, 8003fb2 <HAL_TIM_ConfigClockSource+0x6a>
 8003fae:	2b10      	cmp	r3, #16
 8003fb0:	d105      	bne.n	8003fbe <HAL_TIM_ConfigClockSource+0x76>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	6820      	ldr	r0, [r4, #0]
 8003fb6:	f7ff fd96 	bl	8003ae6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003fba:	2000      	movs	r0, #0
      break;
 8003fbc:	e7ef      	b.n	8003f9e <HAL_TIM_ConfigClockSource+0x56>
      status = HAL_ERROR;
 8003fbe:	2001      	movs	r0, #1
 8003fc0:	e7ed      	b.n	8003f9e <HAL_TIM_ConfigClockSource+0x56>
 8003fc2:	2001      	movs	r0, #1
 8003fc4:	e7eb      	b.n	8003f9e <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8003fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fca:	d034      	beq.n	8004036 <HAL_TIM_ConfigClockSource+0xee>
 8003fcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fd0:	d10c      	bne.n	8003fec <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ETR_SetConfig(htim->Instance,
 8003fd2:	68cb      	ldr	r3, [r1, #12]
 8003fd4:	684a      	ldr	r2, [r1, #4]
 8003fd6:	6889      	ldr	r1, [r1, #8]
 8003fd8:	6820      	ldr	r0, [r4, #0]
 8003fda:	f7ff ffa8 	bl	8003f2e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fde:	6822      	ldr	r2, [r4, #0]
 8003fe0:	6893      	ldr	r3, [r2, #8]
 8003fe2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fe6:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe8:	2000      	movs	r0, #0
      break;
 8003fea:	e7d8      	b.n	8003f9e <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8003fec:	2b70      	cmp	r3, #112	; 0x70
 8003fee:	d124      	bne.n	800403a <HAL_TIM_ConfigClockSource+0xf2>
      TIM_ETR_SetConfig(htim->Instance,
 8003ff0:	68cb      	ldr	r3, [r1, #12]
 8003ff2:	684a      	ldr	r2, [r1, #4]
 8003ff4:	6889      	ldr	r1, [r1, #8]
 8003ff6:	6820      	ldr	r0, [r4, #0]
 8003ff8:	f7ff ff99 	bl	8003f2e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ffc:	6822      	ldr	r2, [r4, #0]
 8003ffe:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004000:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004004:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004006:	2000      	movs	r0, #0
      break;
 8004008:	e7c9      	b.n	8003f9e <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800400a:	68ca      	ldr	r2, [r1, #12]
 800400c:	6849      	ldr	r1, [r1, #4]
 800400e:	6820      	ldr	r0, [r4, #0]
 8004010:	f7ff fd55 	bl	8003abe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004014:	2160      	movs	r1, #96	; 0x60
 8004016:	6820      	ldr	r0, [r4, #0]
 8004018:	f7ff fd65 	bl	8003ae6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800401c:	2000      	movs	r0, #0
      break;
 800401e:	e7be      	b.n	8003f9e <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004020:	68ca      	ldr	r2, [r1, #12]
 8004022:	6849      	ldr	r1, [r1, #4]
 8004024:	6820      	ldr	r0, [r4, #0]
 8004026:	f7ff fd37 	bl	8003a98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800402a:	2140      	movs	r1, #64	; 0x40
 800402c:	6820      	ldr	r0, [r4, #0]
 800402e:	f7ff fd5a 	bl	8003ae6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004032:	2000      	movs	r0, #0
      break;
 8004034:	e7b3      	b.n	8003f9e <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8004036:	2000      	movs	r0, #0
 8004038:	e7b1      	b.n	8003f9e <HAL_TIM_ConfigClockSource+0x56>
      status = HAL_ERROR;
 800403a:	2001      	movs	r0, #1
 800403c:	e7af      	b.n	8003f9e <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 800403e:	2002      	movs	r0, #2
}
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	fffe0088 	.word	0xfffe0088

08004048 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004048:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800404c:	2b01      	cmp	r3, #1
 800404e:	d02f      	beq.n	80040b0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
{
 8004050:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8004052:	2301      	movs	r3, #1
 8004054:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004058:	2302      	movs	r3, #2
 800405a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800405e:	6802      	ldr	r2, [r0, #0]
 8004060:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004062:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004064:	4d13      	ldr	r5, [pc, #76]	; (80040b4 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8004066:	42aa      	cmp	r2, r5
 8004068:	d01d      	beq.n	80040a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800406a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800406e:	680d      	ldr	r5, [r1, #0]
 8004070:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004072:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004074:	6803      	ldr	r3, [r0, #0]
 8004076:	4a0f      	ldr	r2, [pc, #60]	; (80040b4 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d006      	beq.n	800408a <HAL_TIMEx_MasterConfigSynchronization+0x42>
 800407c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004080:	d003      	beq.n	800408a <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8004082:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8004086:	4293      	cmp	r3, r2
 8004088:	d104      	bne.n	8004094 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800408a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800408e:	688a      	ldr	r2, [r1, #8]
 8004090:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004092:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004094:	2301      	movs	r3, #1
 8004096:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800409a:	2300      	movs	r3, #0
 800409c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80040a0:	4618      	mov	r0, r3
}
 80040a2:	bc30      	pop	{r4, r5}
 80040a4:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 80040a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80040aa:	684d      	ldr	r5, [r1, #4]
 80040ac:	432b      	orrs	r3, r5
 80040ae:	e7dc      	b.n	800406a <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 80040b0:	2002      	movs	r0, #2
}
 80040b2:	4770      	bx	lr
 80040b4:	40012c00 	.word	0x40012c00

080040b8 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040b8:	4770      	bx	lr

080040ba <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040ba:	4770      	bx	lr

080040bc <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80040bc:	4770      	bx	lr

080040be <arm_quaternion_normalize_f32>:

#else
void arm_quaternion_normalize_f32(const float32_t *pInputQuaternions, 
    float32_t *pNormalizedQuaternions, 
    uint32_t nbQuaternions)
{
 80040be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040c2:	b085      	sub	sp, #20
 80040c4:	4607      	mov	r7, r0
 80040c6:	460e      	mov	r6, r1
 80040c8:	9203      	str	r2, [sp, #12]
   float32_t temp;

   for(uint32_t i=0; i < nbQuaternions; i++)
 80040ca:	2500      	movs	r5, #0
 80040cc:	e048      	b.n	8004160 <arm_quaternion_normalize_f32+0xa2>
   {
      temp = SQ(pInputQuaternions[4 * i + 0]) +
 80040ce:	012c      	lsls	r4, r5, #4
 80040d0:	eb07 1b05 	add.w	fp, r7, r5, lsl #4
 80040d4:	ed9b 0a00 	vldr	s0, [fp]
 80040d8:	ee20 0a00 	vmul.f32	s0, s0, s0
             SQ(pInputQuaternions[4 * i + 1]) +
 80040dc:	1d23      	adds	r3, r4, #4
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	eb07 0a03 	add.w	sl, r7, r3
 80040e4:	edda 7a00 	vldr	s15, [sl]
 80040e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
      temp = SQ(pInputQuaternions[4 * i + 0]) +
 80040ec:	ee30 0a27 	vadd.f32	s0, s0, s15
             SQ(pInputQuaternions[4 * i + 2]) +
 80040f0:	f104 0208 	add.w	r2, r4, #8
 80040f4:	9201      	str	r2, [sp, #4]
 80040f6:	eb07 0902 	add.w	r9, r7, r2
 80040fa:	edd9 7a00 	vldr	s15, [r9]
 80040fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
             SQ(pInputQuaternions[4 * i + 1]) +
 8004102:	ee30 0a27 	vadd.f32	s0, s0, s15
             SQ(pInputQuaternions[4 * i + 3]);
 8004106:	f104 010c 	add.w	r1, r4, #12
 800410a:	9102      	str	r1, [sp, #8]
 800410c:	eb07 0801 	add.w	r8, r7, r1
 8004110:	edd8 7a00 	vldr	s15, [r8]
 8004114:	ee67 7aa7 	vmul.f32	s15, s15, s15
      temp = sqrtf(temp);
 8004118:	ee30 0a27 	vadd.f32	s0, s0, s15
 800411c:	f001 f916 	bl	800534c <sqrtf>

      pNormalizedQuaternions[4 * i + 0] = pInputQuaternions[4 * i + 0] / temp;
 8004120:	ed9b 7a00 	vldr	s14, [fp]
 8004124:	4434      	add	r4, r6
 8004126:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800412a:	edc4 7a00 	vstr	s15, [r4]
      pNormalizedQuaternions[4 * i + 1] = pInputQuaternions[4 * i + 1] / temp;
 800412e:	ed9a 7a00 	vldr	s14, [sl]
 8004132:	9b00      	ldr	r3, [sp, #0]
 8004134:	18f3      	adds	r3, r6, r3
 8004136:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800413a:	edc3 7a00 	vstr	s15, [r3]
      pNormalizedQuaternions[4 * i + 2] = pInputQuaternions[4 * i + 2] / temp;
 800413e:	ed99 7a00 	vldr	s14, [r9]
 8004142:	9a01      	ldr	r2, [sp, #4]
 8004144:	18b3      	adds	r3, r6, r2
 8004146:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800414a:	edc3 7a00 	vstr	s15, [r3]
      pNormalizedQuaternions[4 * i + 3] = pInputQuaternions[4 * i + 3] / temp;
 800414e:	ed98 7a00 	vldr	s14, [r8]
 8004152:	9902      	ldr	r1, [sp, #8]
 8004154:	1873      	adds	r3, r6, r1
 8004156:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800415a:	edc3 7a00 	vstr	s15, [r3]
   for(uint32_t i=0; i < nbQuaternions; i++)
 800415e:	3501      	adds	r5, #1
 8004160:	9b03      	ldr	r3, [sp, #12]
 8004162:	429d      	cmp	r5, r3
 8004164:	d3b3      	bcc.n	80040ce <arm_quaternion_normalize_f32+0x10>
   }
}
 8004166:	b005      	add	sp, #20
 8004168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800416c <__assert_func>:
 800416c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800416e:	4614      	mov	r4, r2
 8004170:	461a      	mov	r2, r3
 8004172:	4b09      	ldr	r3, [pc, #36]	; (8004198 <__assert_func+0x2c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4605      	mov	r5, r0
 8004178:	68d8      	ldr	r0, [r3, #12]
 800417a:	b14c      	cbz	r4, 8004190 <__assert_func+0x24>
 800417c:	4b07      	ldr	r3, [pc, #28]	; (800419c <__assert_func+0x30>)
 800417e:	9100      	str	r1, [sp, #0]
 8004180:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004184:	4906      	ldr	r1, [pc, #24]	; (80041a0 <__assert_func+0x34>)
 8004186:	462b      	mov	r3, r5
 8004188:	f000 f814 	bl	80041b4 <fiprintf>
 800418c:	f000 fd0c 	bl	8004ba8 <abort>
 8004190:	4b04      	ldr	r3, [pc, #16]	; (80041a4 <__assert_func+0x38>)
 8004192:	461c      	mov	r4, r3
 8004194:	e7f3      	b.n	800417e <__assert_func+0x12>
 8004196:	bf00      	nop
 8004198:	20000030 	.word	0x20000030
 800419c:	08005ec8 	.word	0x08005ec8
 80041a0:	08005ed5 	.word	0x08005ed5
 80041a4:	08005f03 	.word	0x08005f03

080041a8 <__errno>:
 80041a8:	4b01      	ldr	r3, [pc, #4]	; (80041b0 <__errno+0x8>)
 80041aa:	6818      	ldr	r0, [r3, #0]
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	20000030 	.word	0x20000030

080041b4 <fiprintf>:
 80041b4:	b40e      	push	{r1, r2, r3}
 80041b6:	b503      	push	{r0, r1, lr}
 80041b8:	4601      	mov	r1, r0
 80041ba:	ab03      	add	r3, sp, #12
 80041bc:	4805      	ldr	r0, [pc, #20]	; (80041d4 <fiprintf+0x20>)
 80041be:	f853 2b04 	ldr.w	r2, [r3], #4
 80041c2:	6800      	ldr	r0, [r0, #0]
 80041c4:	9301      	str	r3, [sp, #4]
 80041c6:	f000 f95b 	bl	8004480 <_vfiprintf_r>
 80041ca:	b002      	add	sp, #8
 80041cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80041d0:	b003      	add	sp, #12
 80041d2:	4770      	bx	lr
 80041d4:	20000030 	.word	0x20000030

080041d8 <__libc_init_array>:
 80041d8:	b570      	push	{r4, r5, r6, lr}
 80041da:	4d0d      	ldr	r5, [pc, #52]	; (8004210 <__libc_init_array+0x38>)
 80041dc:	4c0d      	ldr	r4, [pc, #52]	; (8004214 <__libc_init_array+0x3c>)
 80041de:	1b64      	subs	r4, r4, r5
 80041e0:	10a4      	asrs	r4, r4, #2
 80041e2:	2600      	movs	r6, #0
 80041e4:	42a6      	cmp	r6, r4
 80041e6:	d109      	bne.n	80041fc <__libc_init_array+0x24>
 80041e8:	4d0b      	ldr	r5, [pc, #44]	; (8004218 <__libc_init_array+0x40>)
 80041ea:	4c0c      	ldr	r4, [pc, #48]	; (800421c <__libc_init_array+0x44>)
 80041ec:	f001 fde6 	bl	8005dbc <_init>
 80041f0:	1b64      	subs	r4, r4, r5
 80041f2:	10a4      	asrs	r4, r4, #2
 80041f4:	2600      	movs	r6, #0
 80041f6:	42a6      	cmp	r6, r4
 80041f8:	d105      	bne.n	8004206 <__libc_init_array+0x2e>
 80041fa:	bd70      	pop	{r4, r5, r6, pc}
 80041fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004200:	4798      	blx	r3
 8004202:	3601      	adds	r6, #1
 8004204:	e7ee      	b.n	80041e4 <__libc_init_array+0xc>
 8004206:	f855 3b04 	ldr.w	r3, [r5], #4
 800420a:	4798      	blx	r3
 800420c:	3601      	adds	r6, #1
 800420e:	e7f2      	b.n	80041f6 <__libc_init_array+0x1e>
 8004210:	0800636c 	.word	0x0800636c
 8004214:	0800636c 	.word	0x0800636c
 8004218:	0800636c 	.word	0x0800636c
 800421c:	08006370 	.word	0x08006370

08004220 <malloc>:
 8004220:	4b02      	ldr	r3, [pc, #8]	; (800422c <malloc+0xc>)
 8004222:	4601      	mov	r1, r0
 8004224:	6818      	ldr	r0, [r3, #0]
 8004226:	f000 b88d 	b.w	8004344 <_malloc_r>
 800422a:	bf00      	nop
 800422c:	20000030 	.word	0x20000030

08004230 <free>:
 8004230:	4b02      	ldr	r3, [pc, #8]	; (800423c <free+0xc>)
 8004232:	4601      	mov	r1, r0
 8004234:	6818      	ldr	r0, [r3, #0]
 8004236:	f000 b819 	b.w	800426c <_free_r>
 800423a:	bf00      	nop
 800423c:	20000030 	.word	0x20000030

08004240 <memcpy>:
 8004240:	440a      	add	r2, r1
 8004242:	4291      	cmp	r1, r2
 8004244:	f100 33ff 	add.w	r3, r0, #4294967295
 8004248:	d100      	bne.n	800424c <memcpy+0xc>
 800424a:	4770      	bx	lr
 800424c:	b510      	push	{r4, lr}
 800424e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004252:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004256:	4291      	cmp	r1, r2
 8004258:	d1f9      	bne.n	800424e <memcpy+0xe>
 800425a:	bd10      	pop	{r4, pc}

0800425c <memset>:
 800425c:	4402      	add	r2, r0
 800425e:	4603      	mov	r3, r0
 8004260:	4293      	cmp	r3, r2
 8004262:	d100      	bne.n	8004266 <memset+0xa>
 8004264:	4770      	bx	lr
 8004266:	f803 1b01 	strb.w	r1, [r3], #1
 800426a:	e7f9      	b.n	8004260 <memset+0x4>

0800426c <_free_r>:
 800426c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800426e:	2900      	cmp	r1, #0
 8004270:	d044      	beq.n	80042fc <_free_r+0x90>
 8004272:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004276:	9001      	str	r0, [sp, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	f1a1 0404 	sub.w	r4, r1, #4
 800427e:	bfb8      	it	lt
 8004280:	18e4      	addlt	r4, r4, r3
 8004282:	f000 feb9 	bl	8004ff8 <__malloc_lock>
 8004286:	4a1e      	ldr	r2, [pc, #120]	; (8004300 <_free_r+0x94>)
 8004288:	9801      	ldr	r0, [sp, #4]
 800428a:	6813      	ldr	r3, [r2, #0]
 800428c:	b933      	cbnz	r3, 800429c <_free_r+0x30>
 800428e:	6063      	str	r3, [r4, #4]
 8004290:	6014      	str	r4, [r2, #0]
 8004292:	b003      	add	sp, #12
 8004294:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004298:	f000 beb4 	b.w	8005004 <__malloc_unlock>
 800429c:	42a3      	cmp	r3, r4
 800429e:	d908      	bls.n	80042b2 <_free_r+0x46>
 80042a0:	6825      	ldr	r5, [r4, #0]
 80042a2:	1961      	adds	r1, r4, r5
 80042a4:	428b      	cmp	r3, r1
 80042a6:	bf01      	itttt	eq
 80042a8:	6819      	ldreq	r1, [r3, #0]
 80042aa:	685b      	ldreq	r3, [r3, #4]
 80042ac:	1949      	addeq	r1, r1, r5
 80042ae:	6021      	streq	r1, [r4, #0]
 80042b0:	e7ed      	b.n	800428e <_free_r+0x22>
 80042b2:	461a      	mov	r2, r3
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	b10b      	cbz	r3, 80042bc <_free_r+0x50>
 80042b8:	42a3      	cmp	r3, r4
 80042ba:	d9fa      	bls.n	80042b2 <_free_r+0x46>
 80042bc:	6811      	ldr	r1, [r2, #0]
 80042be:	1855      	adds	r5, r2, r1
 80042c0:	42a5      	cmp	r5, r4
 80042c2:	d10b      	bne.n	80042dc <_free_r+0x70>
 80042c4:	6824      	ldr	r4, [r4, #0]
 80042c6:	4421      	add	r1, r4
 80042c8:	1854      	adds	r4, r2, r1
 80042ca:	42a3      	cmp	r3, r4
 80042cc:	6011      	str	r1, [r2, #0]
 80042ce:	d1e0      	bne.n	8004292 <_free_r+0x26>
 80042d0:	681c      	ldr	r4, [r3, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	6053      	str	r3, [r2, #4]
 80042d6:	4421      	add	r1, r4
 80042d8:	6011      	str	r1, [r2, #0]
 80042da:	e7da      	b.n	8004292 <_free_r+0x26>
 80042dc:	d902      	bls.n	80042e4 <_free_r+0x78>
 80042de:	230c      	movs	r3, #12
 80042e0:	6003      	str	r3, [r0, #0]
 80042e2:	e7d6      	b.n	8004292 <_free_r+0x26>
 80042e4:	6825      	ldr	r5, [r4, #0]
 80042e6:	1961      	adds	r1, r4, r5
 80042e8:	428b      	cmp	r3, r1
 80042ea:	bf04      	itt	eq
 80042ec:	6819      	ldreq	r1, [r3, #0]
 80042ee:	685b      	ldreq	r3, [r3, #4]
 80042f0:	6063      	str	r3, [r4, #4]
 80042f2:	bf04      	itt	eq
 80042f4:	1949      	addeq	r1, r1, r5
 80042f6:	6021      	streq	r1, [r4, #0]
 80042f8:	6054      	str	r4, [r2, #4]
 80042fa:	e7ca      	b.n	8004292 <_free_r+0x26>
 80042fc:	b003      	add	sp, #12
 80042fe:	bd30      	pop	{r4, r5, pc}
 8004300:	20000370 	.word	0x20000370

08004304 <sbrk_aligned>:
 8004304:	b570      	push	{r4, r5, r6, lr}
 8004306:	4e0e      	ldr	r6, [pc, #56]	; (8004340 <sbrk_aligned+0x3c>)
 8004308:	460c      	mov	r4, r1
 800430a:	6831      	ldr	r1, [r6, #0]
 800430c:	4605      	mov	r5, r0
 800430e:	b911      	cbnz	r1, 8004316 <sbrk_aligned+0x12>
 8004310:	f000 fb7a 	bl	8004a08 <_sbrk_r>
 8004314:	6030      	str	r0, [r6, #0]
 8004316:	4621      	mov	r1, r4
 8004318:	4628      	mov	r0, r5
 800431a:	f000 fb75 	bl	8004a08 <_sbrk_r>
 800431e:	1c43      	adds	r3, r0, #1
 8004320:	d00a      	beq.n	8004338 <sbrk_aligned+0x34>
 8004322:	1cc4      	adds	r4, r0, #3
 8004324:	f024 0403 	bic.w	r4, r4, #3
 8004328:	42a0      	cmp	r0, r4
 800432a:	d007      	beq.n	800433c <sbrk_aligned+0x38>
 800432c:	1a21      	subs	r1, r4, r0
 800432e:	4628      	mov	r0, r5
 8004330:	f000 fb6a 	bl	8004a08 <_sbrk_r>
 8004334:	3001      	adds	r0, #1
 8004336:	d101      	bne.n	800433c <sbrk_aligned+0x38>
 8004338:	f04f 34ff 	mov.w	r4, #4294967295
 800433c:	4620      	mov	r0, r4
 800433e:	bd70      	pop	{r4, r5, r6, pc}
 8004340:	20000374 	.word	0x20000374

08004344 <_malloc_r>:
 8004344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004348:	1ccd      	adds	r5, r1, #3
 800434a:	f025 0503 	bic.w	r5, r5, #3
 800434e:	3508      	adds	r5, #8
 8004350:	2d0c      	cmp	r5, #12
 8004352:	bf38      	it	cc
 8004354:	250c      	movcc	r5, #12
 8004356:	2d00      	cmp	r5, #0
 8004358:	4607      	mov	r7, r0
 800435a:	db01      	blt.n	8004360 <_malloc_r+0x1c>
 800435c:	42a9      	cmp	r1, r5
 800435e:	d905      	bls.n	800436c <_malloc_r+0x28>
 8004360:	230c      	movs	r3, #12
 8004362:	603b      	str	r3, [r7, #0]
 8004364:	2600      	movs	r6, #0
 8004366:	4630      	mov	r0, r6
 8004368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800436c:	4e2e      	ldr	r6, [pc, #184]	; (8004428 <_malloc_r+0xe4>)
 800436e:	f000 fe43 	bl	8004ff8 <__malloc_lock>
 8004372:	6833      	ldr	r3, [r6, #0]
 8004374:	461c      	mov	r4, r3
 8004376:	bb34      	cbnz	r4, 80043c6 <_malloc_r+0x82>
 8004378:	4629      	mov	r1, r5
 800437a:	4638      	mov	r0, r7
 800437c:	f7ff ffc2 	bl	8004304 <sbrk_aligned>
 8004380:	1c43      	adds	r3, r0, #1
 8004382:	4604      	mov	r4, r0
 8004384:	d14d      	bne.n	8004422 <_malloc_r+0xde>
 8004386:	6834      	ldr	r4, [r6, #0]
 8004388:	4626      	mov	r6, r4
 800438a:	2e00      	cmp	r6, #0
 800438c:	d140      	bne.n	8004410 <_malloc_r+0xcc>
 800438e:	6823      	ldr	r3, [r4, #0]
 8004390:	4631      	mov	r1, r6
 8004392:	4638      	mov	r0, r7
 8004394:	eb04 0803 	add.w	r8, r4, r3
 8004398:	f000 fb36 	bl	8004a08 <_sbrk_r>
 800439c:	4580      	cmp	r8, r0
 800439e:	d13a      	bne.n	8004416 <_malloc_r+0xd2>
 80043a0:	6821      	ldr	r1, [r4, #0]
 80043a2:	3503      	adds	r5, #3
 80043a4:	1a6d      	subs	r5, r5, r1
 80043a6:	f025 0503 	bic.w	r5, r5, #3
 80043aa:	3508      	adds	r5, #8
 80043ac:	2d0c      	cmp	r5, #12
 80043ae:	bf38      	it	cc
 80043b0:	250c      	movcc	r5, #12
 80043b2:	4629      	mov	r1, r5
 80043b4:	4638      	mov	r0, r7
 80043b6:	f7ff ffa5 	bl	8004304 <sbrk_aligned>
 80043ba:	3001      	adds	r0, #1
 80043bc:	d02b      	beq.n	8004416 <_malloc_r+0xd2>
 80043be:	6823      	ldr	r3, [r4, #0]
 80043c0:	442b      	add	r3, r5
 80043c2:	6023      	str	r3, [r4, #0]
 80043c4:	e00e      	b.n	80043e4 <_malloc_r+0xa0>
 80043c6:	6822      	ldr	r2, [r4, #0]
 80043c8:	1b52      	subs	r2, r2, r5
 80043ca:	d41e      	bmi.n	800440a <_malloc_r+0xc6>
 80043cc:	2a0b      	cmp	r2, #11
 80043ce:	d916      	bls.n	80043fe <_malloc_r+0xba>
 80043d0:	1961      	adds	r1, r4, r5
 80043d2:	42a3      	cmp	r3, r4
 80043d4:	6025      	str	r5, [r4, #0]
 80043d6:	bf18      	it	ne
 80043d8:	6059      	strne	r1, [r3, #4]
 80043da:	6863      	ldr	r3, [r4, #4]
 80043dc:	bf08      	it	eq
 80043de:	6031      	streq	r1, [r6, #0]
 80043e0:	5162      	str	r2, [r4, r5]
 80043e2:	604b      	str	r3, [r1, #4]
 80043e4:	4638      	mov	r0, r7
 80043e6:	f104 060b 	add.w	r6, r4, #11
 80043ea:	f000 fe0b 	bl	8005004 <__malloc_unlock>
 80043ee:	f026 0607 	bic.w	r6, r6, #7
 80043f2:	1d23      	adds	r3, r4, #4
 80043f4:	1af2      	subs	r2, r6, r3
 80043f6:	d0b6      	beq.n	8004366 <_malloc_r+0x22>
 80043f8:	1b9b      	subs	r3, r3, r6
 80043fa:	50a3      	str	r3, [r4, r2]
 80043fc:	e7b3      	b.n	8004366 <_malloc_r+0x22>
 80043fe:	6862      	ldr	r2, [r4, #4]
 8004400:	42a3      	cmp	r3, r4
 8004402:	bf0c      	ite	eq
 8004404:	6032      	streq	r2, [r6, #0]
 8004406:	605a      	strne	r2, [r3, #4]
 8004408:	e7ec      	b.n	80043e4 <_malloc_r+0xa0>
 800440a:	4623      	mov	r3, r4
 800440c:	6864      	ldr	r4, [r4, #4]
 800440e:	e7b2      	b.n	8004376 <_malloc_r+0x32>
 8004410:	4634      	mov	r4, r6
 8004412:	6876      	ldr	r6, [r6, #4]
 8004414:	e7b9      	b.n	800438a <_malloc_r+0x46>
 8004416:	230c      	movs	r3, #12
 8004418:	603b      	str	r3, [r7, #0]
 800441a:	4638      	mov	r0, r7
 800441c:	f000 fdf2 	bl	8005004 <__malloc_unlock>
 8004420:	e7a1      	b.n	8004366 <_malloc_r+0x22>
 8004422:	6025      	str	r5, [r4, #0]
 8004424:	e7de      	b.n	80043e4 <_malloc_r+0xa0>
 8004426:	bf00      	nop
 8004428:	20000370 	.word	0x20000370

0800442c <__sfputc_r>:
 800442c:	6893      	ldr	r3, [r2, #8]
 800442e:	3b01      	subs	r3, #1
 8004430:	2b00      	cmp	r3, #0
 8004432:	b410      	push	{r4}
 8004434:	6093      	str	r3, [r2, #8]
 8004436:	da08      	bge.n	800444a <__sfputc_r+0x1e>
 8004438:	6994      	ldr	r4, [r2, #24]
 800443a:	42a3      	cmp	r3, r4
 800443c:	db01      	blt.n	8004442 <__sfputc_r+0x16>
 800443e:	290a      	cmp	r1, #10
 8004440:	d103      	bne.n	800444a <__sfputc_r+0x1e>
 8004442:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004446:	f000 baef 	b.w	8004a28 <__swbuf_r>
 800444a:	6813      	ldr	r3, [r2, #0]
 800444c:	1c58      	adds	r0, r3, #1
 800444e:	6010      	str	r0, [r2, #0]
 8004450:	7019      	strb	r1, [r3, #0]
 8004452:	4608      	mov	r0, r1
 8004454:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004458:	4770      	bx	lr

0800445a <__sfputs_r>:
 800445a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800445c:	4606      	mov	r6, r0
 800445e:	460f      	mov	r7, r1
 8004460:	4614      	mov	r4, r2
 8004462:	18d5      	adds	r5, r2, r3
 8004464:	42ac      	cmp	r4, r5
 8004466:	d101      	bne.n	800446c <__sfputs_r+0x12>
 8004468:	2000      	movs	r0, #0
 800446a:	e007      	b.n	800447c <__sfputs_r+0x22>
 800446c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004470:	463a      	mov	r2, r7
 8004472:	4630      	mov	r0, r6
 8004474:	f7ff ffda 	bl	800442c <__sfputc_r>
 8004478:	1c43      	adds	r3, r0, #1
 800447a:	d1f3      	bne.n	8004464 <__sfputs_r+0xa>
 800447c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004480 <_vfiprintf_r>:
 8004480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004484:	460d      	mov	r5, r1
 8004486:	b09d      	sub	sp, #116	; 0x74
 8004488:	4614      	mov	r4, r2
 800448a:	4698      	mov	r8, r3
 800448c:	4606      	mov	r6, r0
 800448e:	b118      	cbz	r0, 8004498 <_vfiprintf_r+0x18>
 8004490:	6983      	ldr	r3, [r0, #24]
 8004492:	b90b      	cbnz	r3, 8004498 <_vfiprintf_r+0x18>
 8004494:	f000 fcaa 	bl	8004dec <__sinit>
 8004498:	4b89      	ldr	r3, [pc, #548]	; (80046c0 <_vfiprintf_r+0x240>)
 800449a:	429d      	cmp	r5, r3
 800449c:	d11b      	bne.n	80044d6 <_vfiprintf_r+0x56>
 800449e:	6875      	ldr	r5, [r6, #4]
 80044a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044a2:	07d9      	lsls	r1, r3, #31
 80044a4:	d405      	bmi.n	80044b2 <_vfiprintf_r+0x32>
 80044a6:	89ab      	ldrh	r3, [r5, #12]
 80044a8:	059a      	lsls	r2, r3, #22
 80044aa:	d402      	bmi.n	80044b2 <_vfiprintf_r+0x32>
 80044ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044ae:	f000 fd3b 	bl	8004f28 <__retarget_lock_acquire_recursive>
 80044b2:	89ab      	ldrh	r3, [r5, #12]
 80044b4:	071b      	lsls	r3, r3, #28
 80044b6:	d501      	bpl.n	80044bc <_vfiprintf_r+0x3c>
 80044b8:	692b      	ldr	r3, [r5, #16]
 80044ba:	b9eb      	cbnz	r3, 80044f8 <_vfiprintf_r+0x78>
 80044bc:	4629      	mov	r1, r5
 80044be:	4630      	mov	r0, r6
 80044c0:	f000 fb04 	bl	8004acc <__swsetup_r>
 80044c4:	b1c0      	cbz	r0, 80044f8 <_vfiprintf_r+0x78>
 80044c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044c8:	07dc      	lsls	r4, r3, #31
 80044ca:	d50e      	bpl.n	80044ea <_vfiprintf_r+0x6a>
 80044cc:	f04f 30ff 	mov.w	r0, #4294967295
 80044d0:	b01d      	add	sp, #116	; 0x74
 80044d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044d6:	4b7b      	ldr	r3, [pc, #492]	; (80046c4 <_vfiprintf_r+0x244>)
 80044d8:	429d      	cmp	r5, r3
 80044da:	d101      	bne.n	80044e0 <_vfiprintf_r+0x60>
 80044dc:	68b5      	ldr	r5, [r6, #8]
 80044de:	e7df      	b.n	80044a0 <_vfiprintf_r+0x20>
 80044e0:	4b79      	ldr	r3, [pc, #484]	; (80046c8 <_vfiprintf_r+0x248>)
 80044e2:	429d      	cmp	r5, r3
 80044e4:	bf08      	it	eq
 80044e6:	68f5      	ldreq	r5, [r6, #12]
 80044e8:	e7da      	b.n	80044a0 <_vfiprintf_r+0x20>
 80044ea:	89ab      	ldrh	r3, [r5, #12]
 80044ec:	0598      	lsls	r0, r3, #22
 80044ee:	d4ed      	bmi.n	80044cc <_vfiprintf_r+0x4c>
 80044f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044f2:	f000 fd1a 	bl	8004f2a <__retarget_lock_release_recursive>
 80044f6:	e7e9      	b.n	80044cc <_vfiprintf_r+0x4c>
 80044f8:	2300      	movs	r3, #0
 80044fa:	9309      	str	r3, [sp, #36]	; 0x24
 80044fc:	2320      	movs	r3, #32
 80044fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004502:	f8cd 800c 	str.w	r8, [sp, #12]
 8004506:	2330      	movs	r3, #48	; 0x30
 8004508:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80046cc <_vfiprintf_r+0x24c>
 800450c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004510:	f04f 0901 	mov.w	r9, #1
 8004514:	4623      	mov	r3, r4
 8004516:	469a      	mov	sl, r3
 8004518:	f813 2b01 	ldrb.w	r2, [r3], #1
 800451c:	b10a      	cbz	r2, 8004522 <_vfiprintf_r+0xa2>
 800451e:	2a25      	cmp	r2, #37	; 0x25
 8004520:	d1f9      	bne.n	8004516 <_vfiprintf_r+0x96>
 8004522:	ebba 0b04 	subs.w	fp, sl, r4
 8004526:	d00b      	beq.n	8004540 <_vfiprintf_r+0xc0>
 8004528:	465b      	mov	r3, fp
 800452a:	4622      	mov	r2, r4
 800452c:	4629      	mov	r1, r5
 800452e:	4630      	mov	r0, r6
 8004530:	f7ff ff93 	bl	800445a <__sfputs_r>
 8004534:	3001      	adds	r0, #1
 8004536:	f000 80aa 	beq.w	800468e <_vfiprintf_r+0x20e>
 800453a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800453c:	445a      	add	r2, fp
 800453e:	9209      	str	r2, [sp, #36]	; 0x24
 8004540:	f89a 3000 	ldrb.w	r3, [sl]
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 80a2 	beq.w	800468e <_vfiprintf_r+0x20e>
 800454a:	2300      	movs	r3, #0
 800454c:	f04f 32ff 	mov.w	r2, #4294967295
 8004550:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004554:	f10a 0a01 	add.w	sl, sl, #1
 8004558:	9304      	str	r3, [sp, #16]
 800455a:	9307      	str	r3, [sp, #28]
 800455c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004560:	931a      	str	r3, [sp, #104]	; 0x68
 8004562:	4654      	mov	r4, sl
 8004564:	2205      	movs	r2, #5
 8004566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800456a:	4858      	ldr	r0, [pc, #352]	; (80046cc <_vfiprintf_r+0x24c>)
 800456c:	f7fb fe30 	bl	80001d0 <memchr>
 8004570:	9a04      	ldr	r2, [sp, #16]
 8004572:	b9d8      	cbnz	r0, 80045ac <_vfiprintf_r+0x12c>
 8004574:	06d1      	lsls	r1, r2, #27
 8004576:	bf44      	itt	mi
 8004578:	2320      	movmi	r3, #32
 800457a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800457e:	0713      	lsls	r3, r2, #28
 8004580:	bf44      	itt	mi
 8004582:	232b      	movmi	r3, #43	; 0x2b
 8004584:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004588:	f89a 3000 	ldrb.w	r3, [sl]
 800458c:	2b2a      	cmp	r3, #42	; 0x2a
 800458e:	d015      	beq.n	80045bc <_vfiprintf_r+0x13c>
 8004590:	9a07      	ldr	r2, [sp, #28]
 8004592:	4654      	mov	r4, sl
 8004594:	2000      	movs	r0, #0
 8004596:	f04f 0c0a 	mov.w	ip, #10
 800459a:	4621      	mov	r1, r4
 800459c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045a0:	3b30      	subs	r3, #48	; 0x30
 80045a2:	2b09      	cmp	r3, #9
 80045a4:	d94e      	bls.n	8004644 <_vfiprintf_r+0x1c4>
 80045a6:	b1b0      	cbz	r0, 80045d6 <_vfiprintf_r+0x156>
 80045a8:	9207      	str	r2, [sp, #28]
 80045aa:	e014      	b.n	80045d6 <_vfiprintf_r+0x156>
 80045ac:	eba0 0308 	sub.w	r3, r0, r8
 80045b0:	fa09 f303 	lsl.w	r3, r9, r3
 80045b4:	4313      	orrs	r3, r2
 80045b6:	9304      	str	r3, [sp, #16]
 80045b8:	46a2      	mov	sl, r4
 80045ba:	e7d2      	b.n	8004562 <_vfiprintf_r+0xe2>
 80045bc:	9b03      	ldr	r3, [sp, #12]
 80045be:	1d19      	adds	r1, r3, #4
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	9103      	str	r1, [sp, #12]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	bfbb      	ittet	lt
 80045c8:	425b      	neglt	r3, r3
 80045ca:	f042 0202 	orrlt.w	r2, r2, #2
 80045ce:	9307      	strge	r3, [sp, #28]
 80045d0:	9307      	strlt	r3, [sp, #28]
 80045d2:	bfb8      	it	lt
 80045d4:	9204      	strlt	r2, [sp, #16]
 80045d6:	7823      	ldrb	r3, [r4, #0]
 80045d8:	2b2e      	cmp	r3, #46	; 0x2e
 80045da:	d10c      	bne.n	80045f6 <_vfiprintf_r+0x176>
 80045dc:	7863      	ldrb	r3, [r4, #1]
 80045de:	2b2a      	cmp	r3, #42	; 0x2a
 80045e0:	d135      	bne.n	800464e <_vfiprintf_r+0x1ce>
 80045e2:	9b03      	ldr	r3, [sp, #12]
 80045e4:	1d1a      	adds	r2, r3, #4
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	9203      	str	r2, [sp, #12]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	bfb8      	it	lt
 80045ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80045f2:	3402      	adds	r4, #2
 80045f4:	9305      	str	r3, [sp, #20]
 80045f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80046dc <_vfiprintf_r+0x25c>
 80045fa:	7821      	ldrb	r1, [r4, #0]
 80045fc:	2203      	movs	r2, #3
 80045fe:	4650      	mov	r0, sl
 8004600:	f7fb fde6 	bl	80001d0 <memchr>
 8004604:	b140      	cbz	r0, 8004618 <_vfiprintf_r+0x198>
 8004606:	2340      	movs	r3, #64	; 0x40
 8004608:	eba0 000a 	sub.w	r0, r0, sl
 800460c:	fa03 f000 	lsl.w	r0, r3, r0
 8004610:	9b04      	ldr	r3, [sp, #16]
 8004612:	4303      	orrs	r3, r0
 8004614:	3401      	adds	r4, #1
 8004616:	9304      	str	r3, [sp, #16]
 8004618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800461c:	482c      	ldr	r0, [pc, #176]	; (80046d0 <_vfiprintf_r+0x250>)
 800461e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004622:	2206      	movs	r2, #6
 8004624:	f7fb fdd4 	bl	80001d0 <memchr>
 8004628:	2800      	cmp	r0, #0
 800462a:	d03f      	beq.n	80046ac <_vfiprintf_r+0x22c>
 800462c:	4b29      	ldr	r3, [pc, #164]	; (80046d4 <_vfiprintf_r+0x254>)
 800462e:	bb1b      	cbnz	r3, 8004678 <_vfiprintf_r+0x1f8>
 8004630:	9b03      	ldr	r3, [sp, #12]
 8004632:	3307      	adds	r3, #7
 8004634:	f023 0307 	bic.w	r3, r3, #7
 8004638:	3308      	adds	r3, #8
 800463a:	9303      	str	r3, [sp, #12]
 800463c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800463e:	443b      	add	r3, r7
 8004640:	9309      	str	r3, [sp, #36]	; 0x24
 8004642:	e767      	b.n	8004514 <_vfiprintf_r+0x94>
 8004644:	fb0c 3202 	mla	r2, ip, r2, r3
 8004648:	460c      	mov	r4, r1
 800464a:	2001      	movs	r0, #1
 800464c:	e7a5      	b.n	800459a <_vfiprintf_r+0x11a>
 800464e:	2300      	movs	r3, #0
 8004650:	3401      	adds	r4, #1
 8004652:	9305      	str	r3, [sp, #20]
 8004654:	4619      	mov	r1, r3
 8004656:	f04f 0c0a 	mov.w	ip, #10
 800465a:	4620      	mov	r0, r4
 800465c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004660:	3a30      	subs	r2, #48	; 0x30
 8004662:	2a09      	cmp	r2, #9
 8004664:	d903      	bls.n	800466e <_vfiprintf_r+0x1ee>
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0c5      	beq.n	80045f6 <_vfiprintf_r+0x176>
 800466a:	9105      	str	r1, [sp, #20]
 800466c:	e7c3      	b.n	80045f6 <_vfiprintf_r+0x176>
 800466e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004672:	4604      	mov	r4, r0
 8004674:	2301      	movs	r3, #1
 8004676:	e7f0      	b.n	800465a <_vfiprintf_r+0x1da>
 8004678:	ab03      	add	r3, sp, #12
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	462a      	mov	r2, r5
 800467e:	4b16      	ldr	r3, [pc, #88]	; (80046d8 <_vfiprintf_r+0x258>)
 8004680:	a904      	add	r1, sp, #16
 8004682:	4630      	mov	r0, r6
 8004684:	f3af 8000 	nop.w
 8004688:	4607      	mov	r7, r0
 800468a:	1c78      	adds	r0, r7, #1
 800468c:	d1d6      	bne.n	800463c <_vfiprintf_r+0x1bc>
 800468e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004690:	07d9      	lsls	r1, r3, #31
 8004692:	d405      	bmi.n	80046a0 <_vfiprintf_r+0x220>
 8004694:	89ab      	ldrh	r3, [r5, #12]
 8004696:	059a      	lsls	r2, r3, #22
 8004698:	d402      	bmi.n	80046a0 <_vfiprintf_r+0x220>
 800469a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800469c:	f000 fc45 	bl	8004f2a <__retarget_lock_release_recursive>
 80046a0:	89ab      	ldrh	r3, [r5, #12]
 80046a2:	065b      	lsls	r3, r3, #25
 80046a4:	f53f af12 	bmi.w	80044cc <_vfiprintf_r+0x4c>
 80046a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046aa:	e711      	b.n	80044d0 <_vfiprintf_r+0x50>
 80046ac:	ab03      	add	r3, sp, #12
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	462a      	mov	r2, r5
 80046b2:	4b09      	ldr	r3, [pc, #36]	; (80046d8 <_vfiprintf_r+0x258>)
 80046b4:	a904      	add	r1, sp, #16
 80046b6:	4630      	mov	r0, r6
 80046b8:	f000 f880 	bl	80047bc <_printf_i>
 80046bc:	e7e4      	b.n	8004688 <_vfiprintf_r+0x208>
 80046be:	bf00      	nop
 80046c0:	08005f5c 	.word	0x08005f5c
 80046c4:	08005f7c 	.word	0x08005f7c
 80046c8:	08005f3c 	.word	0x08005f3c
 80046cc:	08005f08 	.word	0x08005f08
 80046d0:	08005f12 	.word	0x08005f12
 80046d4:	00000000 	.word	0x00000000
 80046d8:	0800445b 	.word	0x0800445b
 80046dc:	08005f0e 	.word	0x08005f0e

080046e0 <_printf_common>:
 80046e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046e4:	4616      	mov	r6, r2
 80046e6:	4699      	mov	r9, r3
 80046e8:	688a      	ldr	r2, [r1, #8]
 80046ea:	690b      	ldr	r3, [r1, #16]
 80046ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046f0:	4293      	cmp	r3, r2
 80046f2:	bfb8      	it	lt
 80046f4:	4613      	movlt	r3, r2
 80046f6:	6033      	str	r3, [r6, #0]
 80046f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046fc:	4607      	mov	r7, r0
 80046fe:	460c      	mov	r4, r1
 8004700:	b10a      	cbz	r2, 8004706 <_printf_common+0x26>
 8004702:	3301      	adds	r3, #1
 8004704:	6033      	str	r3, [r6, #0]
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	0699      	lsls	r1, r3, #26
 800470a:	bf42      	ittt	mi
 800470c:	6833      	ldrmi	r3, [r6, #0]
 800470e:	3302      	addmi	r3, #2
 8004710:	6033      	strmi	r3, [r6, #0]
 8004712:	6825      	ldr	r5, [r4, #0]
 8004714:	f015 0506 	ands.w	r5, r5, #6
 8004718:	d106      	bne.n	8004728 <_printf_common+0x48>
 800471a:	f104 0a19 	add.w	sl, r4, #25
 800471e:	68e3      	ldr	r3, [r4, #12]
 8004720:	6832      	ldr	r2, [r6, #0]
 8004722:	1a9b      	subs	r3, r3, r2
 8004724:	42ab      	cmp	r3, r5
 8004726:	dc26      	bgt.n	8004776 <_printf_common+0x96>
 8004728:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800472c:	1e13      	subs	r3, r2, #0
 800472e:	6822      	ldr	r2, [r4, #0]
 8004730:	bf18      	it	ne
 8004732:	2301      	movne	r3, #1
 8004734:	0692      	lsls	r2, r2, #26
 8004736:	d42b      	bmi.n	8004790 <_printf_common+0xb0>
 8004738:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800473c:	4649      	mov	r1, r9
 800473e:	4638      	mov	r0, r7
 8004740:	47c0      	blx	r8
 8004742:	3001      	adds	r0, #1
 8004744:	d01e      	beq.n	8004784 <_printf_common+0xa4>
 8004746:	6823      	ldr	r3, [r4, #0]
 8004748:	68e5      	ldr	r5, [r4, #12]
 800474a:	6832      	ldr	r2, [r6, #0]
 800474c:	f003 0306 	and.w	r3, r3, #6
 8004750:	2b04      	cmp	r3, #4
 8004752:	bf08      	it	eq
 8004754:	1aad      	subeq	r5, r5, r2
 8004756:	68a3      	ldr	r3, [r4, #8]
 8004758:	6922      	ldr	r2, [r4, #16]
 800475a:	bf0c      	ite	eq
 800475c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004760:	2500      	movne	r5, #0
 8004762:	4293      	cmp	r3, r2
 8004764:	bfc4      	itt	gt
 8004766:	1a9b      	subgt	r3, r3, r2
 8004768:	18ed      	addgt	r5, r5, r3
 800476a:	2600      	movs	r6, #0
 800476c:	341a      	adds	r4, #26
 800476e:	42b5      	cmp	r5, r6
 8004770:	d11a      	bne.n	80047a8 <_printf_common+0xc8>
 8004772:	2000      	movs	r0, #0
 8004774:	e008      	b.n	8004788 <_printf_common+0xa8>
 8004776:	2301      	movs	r3, #1
 8004778:	4652      	mov	r2, sl
 800477a:	4649      	mov	r1, r9
 800477c:	4638      	mov	r0, r7
 800477e:	47c0      	blx	r8
 8004780:	3001      	adds	r0, #1
 8004782:	d103      	bne.n	800478c <_printf_common+0xac>
 8004784:	f04f 30ff 	mov.w	r0, #4294967295
 8004788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800478c:	3501      	adds	r5, #1
 800478e:	e7c6      	b.n	800471e <_printf_common+0x3e>
 8004790:	18e1      	adds	r1, r4, r3
 8004792:	1c5a      	adds	r2, r3, #1
 8004794:	2030      	movs	r0, #48	; 0x30
 8004796:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800479a:	4422      	add	r2, r4
 800479c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047a4:	3302      	adds	r3, #2
 80047a6:	e7c7      	b.n	8004738 <_printf_common+0x58>
 80047a8:	2301      	movs	r3, #1
 80047aa:	4622      	mov	r2, r4
 80047ac:	4649      	mov	r1, r9
 80047ae:	4638      	mov	r0, r7
 80047b0:	47c0      	blx	r8
 80047b2:	3001      	adds	r0, #1
 80047b4:	d0e6      	beq.n	8004784 <_printf_common+0xa4>
 80047b6:	3601      	adds	r6, #1
 80047b8:	e7d9      	b.n	800476e <_printf_common+0x8e>
	...

080047bc <_printf_i>:
 80047bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047c0:	7e0f      	ldrb	r7, [r1, #24]
 80047c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80047c4:	2f78      	cmp	r7, #120	; 0x78
 80047c6:	4691      	mov	r9, r2
 80047c8:	4680      	mov	r8, r0
 80047ca:	460c      	mov	r4, r1
 80047cc:	469a      	mov	sl, r3
 80047ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80047d2:	d807      	bhi.n	80047e4 <_printf_i+0x28>
 80047d4:	2f62      	cmp	r7, #98	; 0x62
 80047d6:	d80a      	bhi.n	80047ee <_printf_i+0x32>
 80047d8:	2f00      	cmp	r7, #0
 80047da:	f000 80d8 	beq.w	800498e <_printf_i+0x1d2>
 80047de:	2f58      	cmp	r7, #88	; 0x58
 80047e0:	f000 80a3 	beq.w	800492a <_printf_i+0x16e>
 80047e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80047ec:	e03a      	b.n	8004864 <_printf_i+0xa8>
 80047ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80047f2:	2b15      	cmp	r3, #21
 80047f4:	d8f6      	bhi.n	80047e4 <_printf_i+0x28>
 80047f6:	a101      	add	r1, pc, #4	; (adr r1, 80047fc <_printf_i+0x40>)
 80047f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047fc:	08004855 	.word	0x08004855
 8004800:	08004869 	.word	0x08004869
 8004804:	080047e5 	.word	0x080047e5
 8004808:	080047e5 	.word	0x080047e5
 800480c:	080047e5 	.word	0x080047e5
 8004810:	080047e5 	.word	0x080047e5
 8004814:	08004869 	.word	0x08004869
 8004818:	080047e5 	.word	0x080047e5
 800481c:	080047e5 	.word	0x080047e5
 8004820:	080047e5 	.word	0x080047e5
 8004824:	080047e5 	.word	0x080047e5
 8004828:	08004975 	.word	0x08004975
 800482c:	08004899 	.word	0x08004899
 8004830:	08004957 	.word	0x08004957
 8004834:	080047e5 	.word	0x080047e5
 8004838:	080047e5 	.word	0x080047e5
 800483c:	08004997 	.word	0x08004997
 8004840:	080047e5 	.word	0x080047e5
 8004844:	08004899 	.word	0x08004899
 8004848:	080047e5 	.word	0x080047e5
 800484c:	080047e5 	.word	0x080047e5
 8004850:	0800495f 	.word	0x0800495f
 8004854:	682b      	ldr	r3, [r5, #0]
 8004856:	1d1a      	adds	r2, r3, #4
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	602a      	str	r2, [r5, #0]
 800485c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004860:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004864:	2301      	movs	r3, #1
 8004866:	e0a3      	b.n	80049b0 <_printf_i+0x1f4>
 8004868:	6820      	ldr	r0, [r4, #0]
 800486a:	6829      	ldr	r1, [r5, #0]
 800486c:	0606      	lsls	r6, r0, #24
 800486e:	f101 0304 	add.w	r3, r1, #4
 8004872:	d50a      	bpl.n	800488a <_printf_i+0xce>
 8004874:	680e      	ldr	r6, [r1, #0]
 8004876:	602b      	str	r3, [r5, #0]
 8004878:	2e00      	cmp	r6, #0
 800487a:	da03      	bge.n	8004884 <_printf_i+0xc8>
 800487c:	232d      	movs	r3, #45	; 0x2d
 800487e:	4276      	negs	r6, r6
 8004880:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004884:	485e      	ldr	r0, [pc, #376]	; (8004a00 <_printf_i+0x244>)
 8004886:	230a      	movs	r3, #10
 8004888:	e019      	b.n	80048be <_printf_i+0x102>
 800488a:	680e      	ldr	r6, [r1, #0]
 800488c:	602b      	str	r3, [r5, #0]
 800488e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004892:	bf18      	it	ne
 8004894:	b236      	sxthne	r6, r6
 8004896:	e7ef      	b.n	8004878 <_printf_i+0xbc>
 8004898:	682b      	ldr	r3, [r5, #0]
 800489a:	6820      	ldr	r0, [r4, #0]
 800489c:	1d19      	adds	r1, r3, #4
 800489e:	6029      	str	r1, [r5, #0]
 80048a0:	0601      	lsls	r1, r0, #24
 80048a2:	d501      	bpl.n	80048a8 <_printf_i+0xec>
 80048a4:	681e      	ldr	r6, [r3, #0]
 80048a6:	e002      	b.n	80048ae <_printf_i+0xf2>
 80048a8:	0646      	lsls	r6, r0, #25
 80048aa:	d5fb      	bpl.n	80048a4 <_printf_i+0xe8>
 80048ac:	881e      	ldrh	r6, [r3, #0]
 80048ae:	4854      	ldr	r0, [pc, #336]	; (8004a00 <_printf_i+0x244>)
 80048b0:	2f6f      	cmp	r7, #111	; 0x6f
 80048b2:	bf0c      	ite	eq
 80048b4:	2308      	moveq	r3, #8
 80048b6:	230a      	movne	r3, #10
 80048b8:	2100      	movs	r1, #0
 80048ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048be:	6865      	ldr	r5, [r4, #4]
 80048c0:	60a5      	str	r5, [r4, #8]
 80048c2:	2d00      	cmp	r5, #0
 80048c4:	bfa2      	ittt	ge
 80048c6:	6821      	ldrge	r1, [r4, #0]
 80048c8:	f021 0104 	bicge.w	r1, r1, #4
 80048cc:	6021      	strge	r1, [r4, #0]
 80048ce:	b90e      	cbnz	r6, 80048d4 <_printf_i+0x118>
 80048d0:	2d00      	cmp	r5, #0
 80048d2:	d04d      	beq.n	8004970 <_printf_i+0x1b4>
 80048d4:	4615      	mov	r5, r2
 80048d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80048da:	fb03 6711 	mls	r7, r3, r1, r6
 80048de:	5dc7      	ldrb	r7, [r0, r7]
 80048e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80048e4:	4637      	mov	r7, r6
 80048e6:	42bb      	cmp	r3, r7
 80048e8:	460e      	mov	r6, r1
 80048ea:	d9f4      	bls.n	80048d6 <_printf_i+0x11a>
 80048ec:	2b08      	cmp	r3, #8
 80048ee:	d10b      	bne.n	8004908 <_printf_i+0x14c>
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	07de      	lsls	r6, r3, #31
 80048f4:	d508      	bpl.n	8004908 <_printf_i+0x14c>
 80048f6:	6923      	ldr	r3, [r4, #16]
 80048f8:	6861      	ldr	r1, [r4, #4]
 80048fa:	4299      	cmp	r1, r3
 80048fc:	bfde      	ittt	le
 80048fe:	2330      	movle	r3, #48	; 0x30
 8004900:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004904:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004908:	1b52      	subs	r2, r2, r5
 800490a:	6122      	str	r2, [r4, #16]
 800490c:	f8cd a000 	str.w	sl, [sp]
 8004910:	464b      	mov	r3, r9
 8004912:	aa03      	add	r2, sp, #12
 8004914:	4621      	mov	r1, r4
 8004916:	4640      	mov	r0, r8
 8004918:	f7ff fee2 	bl	80046e0 <_printf_common>
 800491c:	3001      	adds	r0, #1
 800491e:	d14c      	bne.n	80049ba <_printf_i+0x1fe>
 8004920:	f04f 30ff 	mov.w	r0, #4294967295
 8004924:	b004      	add	sp, #16
 8004926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800492a:	4835      	ldr	r0, [pc, #212]	; (8004a00 <_printf_i+0x244>)
 800492c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004930:	6829      	ldr	r1, [r5, #0]
 8004932:	6823      	ldr	r3, [r4, #0]
 8004934:	f851 6b04 	ldr.w	r6, [r1], #4
 8004938:	6029      	str	r1, [r5, #0]
 800493a:	061d      	lsls	r5, r3, #24
 800493c:	d514      	bpl.n	8004968 <_printf_i+0x1ac>
 800493e:	07df      	lsls	r7, r3, #31
 8004940:	bf44      	itt	mi
 8004942:	f043 0320 	orrmi.w	r3, r3, #32
 8004946:	6023      	strmi	r3, [r4, #0]
 8004948:	b91e      	cbnz	r6, 8004952 <_printf_i+0x196>
 800494a:	6823      	ldr	r3, [r4, #0]
 800494c:	f023 0320 	bic.w	r3, r3, #32
 8004950:	6023      	str	r3, [r4, #0]
 8004952:	2310      	movs	r3, #16
 8004954:	e7b0      	b.n	80048b8 <_printf_i+0xfc>
 8004956:	6823      	ldr	r3, [r4, #0]
 8004958:	f043 0320 	orr.w	r3, r3, #32
 800495c:	6023      	str	r3, [r4, #0]
 800495e:	2378      	movs	r3, #120	; 0x78
 8004960:	4828      	ldr	r0, [pc, #160]	; (8004a04 <_printf_i+0x248>)
 8004962:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004966:	e7e3      	b.n	8004930 <_printf_i+0x174>
 8004968:	0659      	lsls	r1, r3, #25
 800496a:	bf48      	it	mi
 800496c:	b2b6      	uxthmi	r6, r6
 800496e:	e7e6      	b.n	800493e <_printf_i+0x182>
 8004970:	4615      	mov	r5, r2
 8004972:	e7bb      	b.n	80048ec <_printf_i+0x130>
 8004974:	682b      	ldr	r3, [r5, #0]
 8004976:	6826      	ldr	r6, [r4, #0]
 8004978:	6961      	ldr	r1, [r4, #20]
 800497a:	1d18      	adds	r0, r3, #4
 800497c:	6028      	str	r0, [r5, #0]
 800497e:	0635      	lsls	r5, r6, #24
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	d501      	bpl.n	8004988 <_printf_i+0x1cc>
 8004984:	6019      	str	r1, [r3, #0]
 8004986:	e002      	b.n	800498e <_printf_i+0x1d2>
 8004988:	0670      	lsls	r0, r6, #25
 800498a:	d5fb      	bpl.n	8004984 <_printf_i+0x1c8>
 800498c:	8019      	strh	r1, [r3, #0]
 800498e:	2300      	movs	r3, #0
 8004990:	6123      	str	r3, [r4, #16]
 8004992:	4615      	mov	r5, r2
 8004994:	e7ba      	b.n	800490c <_printf_i+0x150>
 8004996:	682b      	ldr	r3, [r5, #0]
 8004998:	1d1a      	adds	r2, r3, #4
 800499a:	602a      	str	r2, [r5, #0]
 800499c:	681d      	ldr	r5, [r3, #0]
 800499e:	6862      	ldr	r2, [r4, #4]
 80049a0:	2100      	movs	r1, #0
 80049a2:	4628      	mov	r0, r5
 80049a4:	f7fb fc14 	bl	80001d0 <memchr>
 80049a8:	b108      	cbz	r0, 80049ae <_printf_i+0x1f2>
 80049aa:	1b40      	subs	r0, r0, r5
 80049ac:	6060      	str	r0, [r4, #4]
 80049ae:	6863      	ldr	r3, [r4, #4]
 80049b0:	6123      	str	r3, [r4, #16]
 80049b2:	2300      	movs	r3, #0
 80049b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049b8:	e7a8      	b.n	800490c <_printf_i+0x150>
 80049ba:	6923      	ldr	r3, [r4, #16]
 80049bc:	462a      	mov	r2, r5
 80049be:	4649      	mov	r1, r9
 80049c0:	4640      	mov	r0, r8
 80049c2:	47d0      	blx	sl
 80049c4:	3001      	adds	r0, #1
 80049c6:	d0ab      	beq.n	8004920 <_printf_i+0x164>
 80049c8:	6823      	ldr	r3, [r4, #0]
 80049ca:	079b      	lsls	r3, r3, #30
 80049cc:	d413      	bmi.n	80049f6 <_printf_i+0x23a>
 80049ce:	68e0      	ldr	r0, [r4, #12]
 80049d0:	9b03      	ldr	r3, [sp, #12]
 80049d2:	4298      	cmp	r0, r3
 80049d4:	bfb8      	it	lt
 80049d6:	4618      	movlt	r0, r3
 80049d8:	e7a4      	b.n	8004924 <_printf_i+0x168>
 80049da:	2301      	movs	r3, #1
 80049dc:	4632      	mov	r2, r6
 80049de:	4649      	mov	r1, r9
 80049e0:	4640      	mov	r0, r8
 80049e2:	47d0      	blx	sl
 80049e4:	3001      	adds	r0, #1
 80049e6:	d09b      	beq.n	8004920 <_printf_i+0x164>
 80049e8:	3501      	adds	r5, #1
 80049ea:	68e3      	ldr	r3, [r4, #12]
 80049ec:	9903      	ldr	r1, [sp, #12]
 80049ee:	1a5b      	subs	r3, r3, r1
 80049f0:	42ab      	cmp	r3, r5
 80049f2:	dcf2      	bgt.n	80049da <_printf_i+0x21e>
 80049f4:	e7eb      	b.n	80049ce <_printf_i+0x212>
 80049f6:	2500      	movs	r5, #0
 80049f8:	f104 0619 	add.w	r6, r4, #25
 80049fc:	e7f5      	b.n	80049ea <_printf_i+0x22e>
 80049fe:	bf00      	nop
 8004a00:	08005f19 	.word	0x08005f19
 8004a04:	08005f2a 	.word	0x08005f2a

08004a08 <_sbrk_r>:
 8004a08:	b538      	push	{r3, r4, r5, lr}
 8004a0a:	4d06      	ldr	r5, [pc, #24]	; (8004a24 <_sbrk_r+0x1c>)
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	4604      	mov	r4, r0
 8004a10:	4608      	mov	r0, r1
 8004a12:	602b      	str	r3, [r5, #0]
 8004a14:	f7fd fb28 	bl	8002068 <_sbrk>
 8004a18:	1c43      	adds	r3, r0, #1
 8004a1a:	d102      	bne.n	8004a22 <_sbrk_r+0x1a>
 8004a1c:	682b      	ldr	r3, [r5, #0]
 8004a1e:	b103      	cbz	r3, 8004a22 <_sbrk_r+0x1a>
 8004a20:	6023      	str	r3, [r4, #0]
 8004a22:	bd38      	pop	{r3, r4, r5, pc}
 8004a24:	2000037c 	.word	0x2000037c

08004a28 <__swbuf_r>:
 8004a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2a:	460e      	mov	r6, r1
 8004a2c:	4614      	mov	r4, r2
 8004a2e:	4605      	mov	r5, r0
 8004a30:	b118      	cbz	r0, 8004a3a <__swbuf_r+0x12>
 8004a32:	6983      	ldr	r3, [r0, #24]
 8004a34:	b90b      	cbnz	r3, 8004a3a <__swbuf_r+0x12>
 8004a36:	f000 f9d9 	bl	8004dec <__sinit>
 8004a3a:	4b21      	ldr	r3, [pc, #132]	; (8004ac0 <__swbuf_r+0x98>)
 8004a3c:	429c      	cmp	r4, r3
 8004a3e:	d12b      	bne.n	8004a98 <__swbuf_r+0x70>
 8004a40:	686c      	ldr	r4, [r5, #4]
 8004a42:	69a3      	ldr	r3, [r4, #24]
 8004a44:	60a3      	str	r3, [r4, #8]
 8004a46:	89a3      	ldrh	r3, [r4, #12]
 8004a48:	071a      	lsls	r2, r3, #28
 8004a4a:	d52f      	bpl.n	8004aac <__swbuf_r+0x84>
 8004a4c:	6923      	ldr	r3, [r4, #16]
 8004a4e:	b36b      	cbz	r3, 8004aac <__swbuf_r+0x84>
 8004a50:	6923      	ldr	r3, [r4, #16]
 8004a52:	6820      	ldr	r0, [r4, #0]
 8004a54:	1ac0      	subs	r0, r0, r3
 8004a56:	6963      	ldr	r3, [r4, #20]
 8004a58:	b2f6      	uxtb	r6, r6
 8004a5a:	4283      	cmp	r3, r0
 8004a5c:	4637      	mov	r7, r6
 8004a5e:	dc04      	bgt.n	8004a6a <__swbuf_r+0x42>
 8004a60:	4621      	mov	r1, r4
 8004a62:	4628      	mov	r0, r5
 8004a64:	f000 f92e 	bl	8004cc4 <_fflush_r>
 8004a68:	bb30      	cbnz	r0, 8004ab8 <__swbuf_r+0x90>
 8004a6a:	68a3      	ldr	r3, [r4, #8]
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	60a3      	str	r3, [r4, #8]
 8004a70:	6823      	ldr	r3, [r4, #0]
 8004a72:	1c5a      	adds	r2, r3, #1
 8004a74:	6022      	str	r2, [r4, #0]
 8004a76:	701e      	strb	r6, [r3, #0]
 8004a78:	6963      	ldr	r3, [r4, #20]
 8004a7a:	3001      	adds	r0, #1
 8004a7c:	4283      	cmp	r3, r0
 8004a7e:	d004      	beq.n	8004a8a <__swbuf_r+0x62>
 8004a80:	89a3      	ldrh	r3, [r4, #12]
 8004a82:	07db      	lsls	r3, r3, #31
 8004a84:	d506      	bpl.n	8004a94 <__swbuf_r+0x6c>
 8004a86:	2e0a      	cmp	r6, #10
 8004a88:	d104      	bne.n	8004a94 <__swbuf_r+0x6c>
 8004a8a:	4621      	mov	r1, r4
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	f000 f919 	bl	8004cc4 <_fflush_r>
 8004a92:	b988      	cbnz	r0, 8004ab8 <__swbuf_r+0x90>
 8004a94:	4638      	mov	r0, r7
 8004a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a98:	4b0a      	ldr	r3, [pc, #40]	; (8004ac4 <__swbuf_r+0x9c>)
 8004a9a:	429c      	cmp	r4, r3
 8004a9c:	d101      	bne.n	8004aa2 <__swbuf_r+0x7a>
 8004a9e:	68ac      	ldr	r4, [r5, #8]
 8004aa0:	e7cf      	b.n	8004a42 <__swbuf_r+0x1a>
 8004aa2:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <__swbuf_r+0xa0>)
 8004aa4:	429c      	cmp	r4, r3
 8004aa6:	bf08      	it	eq
 8004aa8:	68ec      	ldreq	r4, [r5, #12]
 8004aaa:	e7ca      	b.n	8004a42 <__swbuf_r+0x1a>
 8004aac:	4621      	mov	r1, r4
 8004aae:	4628      	mov	r0, r5
 8004ab0:	f000 f80c 	bl	8004acc <__swsetup_r>
 8004ab4:	2800      	cmp	r0, #0
 8004ab6:	d0cb      	beq.n	8004a50 <__swbuf_r+0x28>
 8004ab8:	f04f 37ff 	mov.w	r7, #4294967295
 8004abc:	e7ea      	b.n	8004a94 <__swbuf_r+0x6c>
 8004abe:	bf00      	nop
 8004ac0:	08005f5c 	.word	0x08005f5c
 8004ac4:	08005f7c 	.word	0x08005f7c
 8004ac8:	08005f3c 	.word	0x08005f3c

08004acc <__swsetup_r>:
 8004acc:	4b32      	ldr	r3, [pc, #200]	; (8004b98 <__swsetup_r+0xcc>)
 8004ace:	b570      	push	{r4, r5, r6, lr}
 8004ad0:	681d      	ldr	r5, [r3, #0]
 8004ad2:	4606      	mov	r6, r0
 8004ad4:	460c      	mov	r4, r1
 8004ad6:	b125      	cbz	r5, 8004ae2 <__swsetup_r+0x16>
 8004ad8:	69ab      	ldr	r3, [r5, #24]
 8004ada:	b913      	cbnz	r3, 8004ae2 <__swsetup_r+0x16>
 8004adc:	4628      	mov	r0, r5
 8004ade:	f000 f985 	bl	8004dec <__sinit>
 8004ae2:	4b2e      	ldr	r3, [pc, #184]	; (8004b9c <__swsetup_r+0xd0>)
 8004ae4:	429c      	cmp	r4, r3
 8004ae6:	d10f      	bne.n	8004b08 <__swsetup_r+0x3c>
 8004ae8:	686c      	ldr	r4, [r5, #4]
 8004aea:	89a3      	ldrh	r3, [r4, #12]
 8004aec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004af0:	0719      	lsls	r1, r3, #28
 8004af2:	d42c      	bmi.n	8004b4e <__swsetup_r+0x82>
 8004af4:	06dd      	lsls	r5, r3, #27
 8004af6:	d411      	bmi.n	8004b1c <__swsetup_r+0x50>
 8004af8:	2309      	movs	r3, #9
 8004afa:	6033      	str	r3, [r6, #0]
 8004afc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004b00:	81a3      	strh	r3, [r4, #12]
 8004b02:	f04f 30ff 	mov.w	r0, #4294967295
 8004b06:	e03e      	b.n	8004b86 <__swsetup_r+0xba>
 8004b08:	4b25      	ldr	r3, [pc, #148]	; (8004ba0 <__swsetup_r+0xd4>)
 8004b0a:	429c      	cmp	r4, r3
 8004b0c:	d101      	bne.n	8004b12 <__swsetup_r+0x46>
 8004b0e:	68ac      	ldr	r4, [r5, #8]
 8004b10:	e7eb      	b.n	8004aea <__swsetup_r+0x1e>
 8004b12:	4b24      	ldr	r3, [pc, #144]	; (8004ba4 <__swsetup_r+0xd8>)
 8004b14:	429c      	cmp	r4, r3
 8004b16:	bf08      	it	eq
 8004b18:	68ec      	ldreq	r4, [r5, #12]
 8004b1a:	e7e6      	b.n	8004aea <__swsetup_r+0x1e>
 8004b1c:	0758      	lsls	r0, r3, #29
 8004b1e:	d512      	bpl.n	8004b46 <__swsetup_r+0x7a>
 8004b20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b22:	b141      	cbz	r1, 8004b36 <__swsetup_r+0x6a>
 8004b24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b28:	4299      	cmp	r1, r3
 8004b2a:	d002      	beq.n	8004b32 <__swsetup_r+0x66>
 8004b2c:	4630      	mov	r0, r6
 8004b2e:	f7ff fb9d 	bl	800426c <_free_r>
 8004b32:	2300      	movs	r3, #0
 8004b34:	6363      	str	r3, [r4, #52]	; 0x34
 8004b36:	89a3      	ldrh	r3, [r4, #12]
 8004b38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b3c:	81a3      	strh	r3, [r4, #12]
 8004b3e:	2300      	movs	r3, #0
 8004b40:	6063      	str	r3, [r4, #4]
 8004b42:	6923      	ldr	r3, [r4, #16]
 8004b44:	6023      	str	r3, [r4, #0]
 8004b46:	89a3      	ldrh	r3, [r4, #12]
 8004b48:	f043 0308 	orr.w	r3, r3, #8
 8004b4c:	81a3      	strh	r3, [r4, #12]
 8004b4e:	6923      	ldr	r3, [r4, #16]
 8004b50:	b94b      	cbnz	r3, 8004b66 <__swsetup_r+0x9a>
 8004b52:	89a3      	ldrh	r3, [r4, #12]
 8004b54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b5c:	d003      	beq.n	8004b66 <__swsetup_r+0x9a>
 8004b5e:	4621      	mov	r1, r4
 8004b60:	4630      	mov	r0, r6
 8004b62:	f000 fa09 	bl	8004f78 <__smakebuf_r>
 8004b66:	89a0      	ldrh	r0, [r4, #12]
 8004b68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b6c:	f010 0301 	ands.w	r3, r0, #1
 8004b70:	d00a      	beq.n	8004b88 <__swsetup_r+0xbc>
 8004b72:	2300      	movs	r3, #0
 8004b74:	60a3      	str	r3, [r4, #8]
 8004b76:	6963      	ldr	r3, [r4, #20]
 8004b78:	425b      	negs	r3, r3
 8004b7a:	61a3      	str	r3, [r4, #24]
 8004b7c:	6923      	ldr	r3, [r4, #16]
 8004b7e:	b943      	cbnz	r3, 8004b92 <__swsetup_r+0xc6>
 8004b80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b84:	d1ba      	bne.n	8004afc <__swsetup_r+0x30>
 8004b86:	bd70      	pop	{r4, r5, r6, pc}
 8004b88:	0781      	lsls	r1, r0, #30
 8004b8a:	bf58      	it	pl
 8004b8c:	6963      	ldrpl	r3, [r4, #20]
 8004b8e:	60a3      	str	r3, [r4, #8]
 8004b90:	e7f4      	b.n	8004b7c <__swsetup_r+0xb0>
 8004b92:	2000      	movs	r0, #0
 8004b94:	e7f7      	b.n	8004b86 <__swsetup_r+0xba>
 8004b96:	bf00      	nop
 8004b98:	20000030 	.word	0x20000030
 8004b9c:	08005f5c 	.word	0x08005f5c
 8004ba0:	08005f7c 	.word	0x08005f7c
 8004ba4:	08005f3c 	.word	0x08005f3c

08004ba8 <abort>:
 8004ba8:	b508      	push	{r3, lr}
 8004baa:	2006      	movs	r0, #6
 8004bac:	f000 fa58 	bl	8005060 <raise>
 8004bb0:	2001      	movs	r0, #1
 8004bb2:	f7fd fa29 	bl	8002008 <_exit>
	...

08004bb8 <__sflush_r>:
 8004bb8:	898a      	ldrh	r2, [r1, #12]
 8004bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bbe:	4605      	mov	r5, r0
 8004bc0:	0710      	lsls	r0, r2, #28
 8004bc2:	460c      	mov	r4, r1
 8004bc4:	d458      	bmi.n	8004c78 <__sflush_r+0xc0>
 8004bc6:	684b      	ldr	r3, [r1, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	dc05      	bgt.n	8004bd8 <__sflush_r+0x20>
 8004bcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	dc02      	bgt.n	8004bd8 <__sflush_r+0x20>
 8004bd2:	2000      	movs	r0, #0
 8004bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004bda:	2e00      	cmp	r6, #0
 8004bdc:	d0f9      	beq.n	8004bd2 <__sflush_r+0x1a>
 8004bde:	2300      	movs	r3, #0
 8004be0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004be4:	682f      	ldr	r7, [r5, #0]
 8004be6:	602b      	str	r3, [r5, #0]
 8004be8:	d032      	beq.n	8004c50 <__sflush_r+0x98>
 8004bea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004bec:	89a3      	ldrh	r3, [r4, #12]
 8004bee:	075a      	lsls	r2, r3, #29
 8004bf0:	d505      	bpl.n	8004bfe <__sflush_r+0x46>
 8004bf2:	6863      	ldr	r3, [r4, #4]
 8004bf4:	1ac0      	subs	r0, r0, r3
 8004bf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004bf8:	b10b      	cbz	r3, 8004bfe <__sflush_r+0x46>
 8004bfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004bfc:	1ac0      	subs	r0, r0, r3
 8004bfe:	2300      	movs	r3, #0
 8004c00:	4602      	mov	r2, r0
 8004c02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c04:	6a21      	ldr	r1, [r4, #32]
 8004c06:	4628      	mov	r0, r5
 8004c08:	47b0      	blx	r6
 8004c0a:	1c43      	adds	r3, r0, #1
 8004c0c:	89a3      	ldrh	r3, [r4, #12]
 8004c0e:	d106      	bne.n	8004c1e <__sflush_r+0x66>
 8004c10:	6829      	ldr	r1, [r5, #0]
 8004c12:	291d      	cmp	r1, #29
 8004c14:	d82c      	bhi.n	8004c70 <__sflush_r+0xb8>
 8004c16:	4a2a      	ldr	r2, [pc, #168]	; (8004cc0 <__sflush_r+0x108>)
 8004c18:	40ca      	lsrs	r2, r1
 8004c1a:	07d6      	lsls	r6, r2, #31
 8004c1c:	d528      	bpl.n	8004c70 <__sflush_r+0xb8>
 8004c1e:	2200      	movs	r2, #0
 8004c20:	6062      	str	r2, [r4, #4]
 8004c22:	04d9      	lsls	r1, r3, #19
 8004c24:	6922      	ldr	r2, [r4, #16]
 8004c26:	6022      	str	r2, [r4, #0]
 8004c28:	d504      	bpl.n	8004c34 <__sflush_r+0x7c>
 8004c2a:	1c42      	adds	r2, r0, #1
 8004c2c:	d101      	bne.n	8004c32 <__sflush_r+0x7a>
 8004c2e:	682b      	ldr	r3, [r5, #0]
 8004c30:	b903      	cbnz	r3, 8004c34 <__sflush_r+0x7c>
 8004c32:	6560      	str	r0, [r4, #84]	; 0x54
 8004c34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c36:	602f      	str	r7, [r5, #0]
 8004c38:	2900      	cmp	r1, #0
 8004c3a:	d0ca      	beq.n	8004bd2 <__sflush_r+0x1a>
 8004c3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c40:	4299      	cmp	r1, r3
 8004c42:	d002      	beq.n	8004c4a <__sflush_r+0x92>
 8004c44:	4628      	mov	r0, r5
 8004c46:	f7ff fb11 	bl	800426c <_free_r>
 8004c4a:	2000      	movs	r0, #0
 8004c4c:	6360      	str	r0, [r4, #52]	; 0x34
 8004c4e:	e7c1      	b.n	8004bd4 <__sflush_r+0x1c>
 8004c50:	6a21      	ldr	r1, [r4, #32]
 8004c52:	2301      	movs	r3, #1
 8004c54:	4628      	mov	r0, r5
 8004c56:	47b0      	blx	r6
 8004c58:	1c41      	adds	r1, r0, #1
 8004c5a:	d1c7      	bne.n	8004bec <__sflush_r+0x34>
 8004c5c:	682b      	ldr	r3, [r5, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d0c4      	beq.n	8004bec <__sflush_r+0x34>
 8004c62:	2b1d      	cmp	r3, #29
 8004c64:	d001      	beq.n	8004c6a <__sflush_r+0xb2>
 8004c66:	2b16      	cmp	r3, #22
 8004c68:	d101      	bne.n	8004c6e <__sflush_r+0xb6>
 8004c6a:	602f      	str	r7, [r5, #0]
 8004c6c:	e7b1      	b.n	8004bd2 <__sflush_r+0x1a>
 8004c6e:	89a3      	ldrh	r3, [r4, #12]
 8004c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c74:	81a3      	strh	r3, [r4, #12]
 8004c76:	e7ad      	b.n	8004bd4 <__sflush_r+0x1c>
 8004c78:	690f      	ldr	r7, [r1, #16]
 8004c7a:	2f00      	cmp	r7, #0
 8004c7c:	d0a9      	beq.n	8004bd2 <__sflush_r+0x1a>
 8004c7e:	0793      	lsls	r3, r2, #30
 8004c80:	680e      	ldr	r6, [r1, #0]
 8004c82:	bf08      	it	eq
 8004c84:	694b      	ldreq	r3, [r1, #20]
 8004c86:	600f      	str	r7, [r1, #0]
 8004c88:	bf18      	it	ne
 8004c8a:	2300      	movne	r3, #0
 8004c8c:	eba6 0807 	sub.w	r8, r6, r7
 8004c90:	608b      	str	r3, [r1, #8]
 8004c92:	f1b8 0f00 	cmp.w	r8, #0
 8004c96:	dd9c      	ble.n	8004bd2 <__sflush_r+0x1a>
 8004c98:	6a21      	ldr	r1, [r4, #32]
 8004c9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004c9c:	4643      	mov	r3, r8
 8004c9e:	463a      	mov	r2, r7
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	47b0      	blx	r6
 8004ca4:	2800      	cmp	r0, #0
 8004ca6:	dc06      	bgt.n	8004cb6 <__sflush_r+0xfe>
 8004ca8:	89a3      	ldrh	r3, [r4, #12]
 8004caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cae:	81a3      	strh	r3, [r4, #12]
 8004cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb4:	e78e      	b.n	8004bd4 <__sflush_r+0x1c>
 8004cb6:	4407      	add	r7, r0
 8004cb8:	eba8 0800 	sub.w	r8, r8, r0
 8004cbc:	e7e9      	b.n	8004c92 <__sflush_r+0xda>
 8004cbe:	bf00      	nop
 8004cc0:	20400001 	.word	0x20400001

08004cc4 <_fflush_r>:
 8004cc4:	b538      	push	{r3, r4, r5, lr}
 8004cc6:	690b      	ldr	r3, [r1, #16]
 8004cc8:	4605      	mov	r5, r0
 8004cca:	460c      	mov	r4, r1
 8004ccc:	b913      	cbnz	r3, 8004cd4 <_fflush_r+0x10>
 8004cce:	2500      	movs	r5, #0
 8004cd0:	4628      	mov	r0, r5
 8004cd2:	bd38      	pop	{r3, r4, r5, pc}
 8004cd4:	b118      	cbz	r0, 8004cde <_fflush_r+0x1a>
 8004cd6:	6983      	ldr	r3, [r0, #24]
 8004cd8:	b90b      	cbnz	r3, 8004cde <_fflush_r+0x1a>
 8004cda:	f000 f887 	bl	8004dec <__sinit>
 8004cde:	4b14      	ldr	r3, [pc, #80]	; (8004d30 <_fflush_r+0x6c>)
 8004ce0:	429c      	cmp	r4, r3
 8004ce2:	d11b      	bne.n	8004d1c <_fflush_r+0x58>
 8004ce4:	686c      	ldr	r4, [r5, #4]
 8004ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d0ef      	beq.n	8004cce <_fflush_r+0xa>
 8004cee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004cf0:	07d0      	lsls	r0, r2, #31
 8004cf2:	d404      	bmi.n	8004cfe <_fflush_r+0x3a>
 8004cf4:	0599      	lsls	r1, r3, #22
 8004cf6:	d402      	bmi.n	8004cfe <_fflush_r+0x3a>
 8004cf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cfa:	f000 f915 	bl	8004f28 <__retarget_lock_acquire_recursive>
 8004cfe:	4628      	mov	r0, r5
 8004d00:	4621      	mov	r1, r4
 8004d02:	f7ff ff59 	bl	8004bb8 <__sflush_r>
 8004d06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d08:	07da      	lsls	r2, r3, #31
 8004d0a:	4605      	mov	r5, r0
 8004d0c:	d4e0      	bmi.n	8004cd0 <_fflush_r+0xc>
 8004d0e:	89a3      	ldrh	r3, [r4, #12]
 8004d10:	059b      	lsls	r3, r3, #22
 8004d12:	d4dd      	bmi.n	8004cd0 <_fflush_r+0xc>
 8004d14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d16:	f000 f908 	bl	8004f2a <__retarget_lock_release_recursive>
 8004d1a:	e7d9      	b.n	8004cd0 <_fflush_r+0xc>
 8004d1c:	4b05      	ldr	r3, [pc, #20]	; (8004d34 <_fflush_r+0x70>)
 8004d1e:	429c      	cmp	r4, r3
 8004d20:	d101      	bne.n	8004d26 <_fflush_r+0x62>
 8004d22:	68ac      	ldr	r4, [r5, #8]
 8004d24:	e7df      	b.n	8004ce6 <_fflush_r+0x22>
 8004d26:	4b04      	ldr	r3, [pc, #16]	; (8004d38 <_fflush_r+0x74>)
 8004d28:	429c      	cmp	r4, r3
 8004d2a:	bf08      	it	eq
 8004d2c:	68ec      	ldreq	r4, [r5, #12]
 8004d2e:	e7da      	b.n	8004ce6 <_fflush_r+0x22>
 8004d30:	08005f5c 	.word	0x08005f5c
 8004d34:	08005f7c 	.word	0x08005f7c
 8004d38:	08005f3c 	.word	0x08005f3c

08004d3c <std>:
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	b510      	push	{r4, lr}
 8004d40:	4604      	mov	r4, r0
 8004d42:	e9c0 3300 	strd	r3, r3, [r0]
 8004d46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d4a:	6083      	str	r3, [r0, #8]
 8004d4c:	8181      	strh	r1, [r0, #12]
 8004d4e:	6643      	str	r3, [r0, #100]	; 0x64
 8004d50:	81c2      	strh	r2, [r0, #14]
 8004d52:	6183      	str	r3, [r0, #24]
 8004d54:	4619      	mov	r1, r3
 8004d56:	2208      	movs	r2, #8
 8004d58:	305c      	adds	r0, #92	; 0x5c
 8004d5a:	f7ff fa7f 	bl	800425c <memset>
 8004d5e:	4b05      	ldr	r3, [pc, #20]	; (8004d74 <std+0x38>)
 8004d60:	6263      	str	r3, [r4, #36]	; 0x24
 8004d62:	4b05      	ldr	r3, [pc, #20]	; (8004d78 <std+0x3c>)
 8004d64:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d66:	4b05      	ldr	r3, [pc, #20]	; (8004d7c <std+0x40>)
 8004d68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d6a:	4b05      	ldr	r3, [pc, #20]	; (8004d80 <std+0x44>)
 8004d6c:	6224      	str	r4, [r4, #32]
 8004d6e:	6323      	str	r3, [r4, #48]	; 0x30
 8004d70:	bd10      	pop	{r4, pc}
 8004d72:	bf00      	nop
 8004d74:	08005099 	.word	0x08005099
 8004d78:	080050bb 	.word	0x080050bb
 8004d7c:	080050f3 	.word	0x080050f3
 8004d80:	08005117 	.word	0x08005117

08004d84 <_cleanup_r>:
 8004d84:	4901      	ldr	r1, [pc, #4]	; (8004d8c <_cleanup_r+0x8>)
 8004d86:	f000 b8af 	b.w	8004ee8 <_fwalk_reent>
 8004d8a:	bf00      	nop
 8004d8c:	08004cc5 	.word	0x08004cc5

08004d90 <__sfmoreglue>:
 8004d90:	b570      	push	{r4, r5, r6, lr}
 8004d92:	2268      	movs	r2, #104	; 0x68
 8004d94:	1e4d      	subs	r5, r1, #1
 8004d96:	4355      	muls	r5, r2
 8004d98:	460e      	mov	r6, r1
 8004d9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004d9e:	f7ff fad1 	bl	8004344 <_malloc_r>
 8004da2:	4604      	mov	r4, r0
 8004da4:	b140      	cbz	r0, 8004db8 <__sfmoreglue+0x28>
 8004da6:	2100      	movs	r1, #0
 8004da8:	e9c0 1600 	strd	r1, r6, [r0]
 8004dac:	300c      	adds	r0, #12
 8004dae:	60a0      	str	r0, [r4, #8]
 8004db0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004db4:	f7ff fa52 	bl	800425c <memset>
 8004db8:	4620      	mov	r0, r4
 8004dba:	bd70      	pop	{r4, r5, r6, pc}

08004dbc <__sfp_lock_acquire>:
 8004dbc:	4801      	ldr	r0, [pc, #4]	; (8004dc4 <__sfp_lock_acquire+0x8>)
 8004dbe:	f000 b8b3 	b.w	8004f28 <__retarget_lock_acquire_recursive>
 8004dc2:	bf00      	nop
 8004dc4:	20000379 	.word	0x20000379

08004dc8 <__sfp_lock_release>:
 8004dc8:	4801      	ldr	r0, [pc, #4]	; (8004dd0 <__sfp_lock_release+0x8>)
 8004dca:	f000 b8ae 	b.w	8004f2a <__retarget_lock_release_recursive>
 8004dce:	bf00      	nop
 8004dd0:	20000379 	.word	0x20000379

08004dd4 <__sinit_lock_acquire>:
 8004dd4:	4801      	ldr	r0, [pc, #4]	; (8004ddc <__sinit_lock_acquire+0x8>)
 8004dd6:	f000 b8a7 	b.w	8004f28 <__retarget_lock_acquire_recursive>
 8004dda:	bf00      	nop
 8004ddc:	2000037a 	.word	0x2000037a

08004de0 <__sinit_lock_release>:
 8004de0:	4801      	ldr	r0, [pc, #4]	; (8004de8 <__sinit_lock_release+0x8>)
 8004de2:	f000 b8a2 	b.w	8004f2a <__retarget_lock_release_recursive>
 8004de6:	bf00      	nop
 8004de8:	2000037a 	.word	0x2000037a

08004dec <__sinit>:
 8004dec:	b510      	push	{r4, lr}
 8004dee:	4604      	mov	r4, r0
 8004df0:	f7ff fff0 	bl	8004dd4 <__sinit_lock_acquire>
 8004df4:	69a3      	ldr	r3, [r4, #24]
 8004df6:	b11b      	cbz	r3, 8004e00 <__sinit+0x14>
 8004df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dfc:	f7ff bff0 	b.w	8004de0 <__sinit_lock_release>
 8004e00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004e04:	6523      	str	r3, [r4, #80]	; 0x50
 8004e06:	4b13      	ldr	r3, [pc, #76]	; (8004e54 <__sinit+0x68>)
 8004e08:	4a13      	ldr	r2, [pc, #76]	; (8004e58 <__sinit+0x6c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004e0e:	42a3      	cmp	r3, r4
 8004e10:	bf04      	itt	eq
 8004e12:	2301      	moveq	r3, #1
 8004e14:	61a3      	streq	r3, [r4, #24]
 8004e16:	4620      	mov	r0, r4
 8004e18:	f000 f820 	bl	8004e5c <__sfp>
 8004e1c:	6060      	str	r0, [r4, #4]
 8004e1e:	4620      	mov	r0, r4
 8004e20:	f000 f81c 	bl	8004e5c <__sfp>
 8004e24:	60a0      	str	r0, [r4, #8]
 8004e26:	4620      	mov	r0, r4
 8004e28:	f000 f818 	bl	8004e5c <__sfp>
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	60e0      	str	r0, [r4, #12]
 8004e30:	2104      	movs	r1, #4
 8004e32:	6860      	ldr	r0, [r4, #4]
 8004e34:	f7ff ff82 	bl	8004d3c <std>
 8004e38:	68a0      	ldr	r0, [r4, #8]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	2109      	movs	r1, #9
 8004e3e:	f7ff ff7d 	bl	8004d3c <std>
 8004e42:	68e0      	ldr	r0, [r4, #12]
 8004e44:	2202      	movs	r2, #2
 8004e46:	2112      	movs	r1, #18
 8004e48:	f7ff ff78 	bl	8004d3c <std>
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	61a3      	str	r3, [r4, #24]
 8004e50:	e7d2      	b.n	8004df8 <__sinit+0xc>
 8004e52:	bf00      	nop
 8004e54:	08005f04 	.word	0x08005f04
 8004e58:	08004d85 	.word	0x08004d85

08004e5c <__sfp>:
 8004e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e5e:	4607      	mov	r7, r0
 8004e60:	f7ff ffac 	bl	8004dbc <__sfp_lock_acquire>
 8004e64:	4b1e      	ldr	r3, [pc, #120]	; (8004ee0 <__sfp+0x84>)
 8004e66:	681e      	ldr	r6, [r3, #0]
 8004e68:	69b3      	ldr	r3, [r6, #24]
 8004e6a:	b913      	cbnz	r3, 8004e72 <__sfp+0x16>
 8004e6c:	4630      	mov	r0, r6
 8004e6e:	f7ff ffbd 	bl	8004dec <__sinit>
 8004e72:	3648      	adds	r6, #72	; 0x48
 8004e74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	d503      	bpl.n	8004e84 <__sfp+0x28>
 8004e7c:	6833      	ldr	r3, [r6, #0]
 8004e7e:	b30b      	cbz	r3, 8004ec4 <__sfp+0x68>
 8004e80:	6836      	ldr	r6, [r6, #0]
 8004e82:	e7f7      	b.n	8004e74 <__sfp+0x18>
 8004e84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e88:	b9d5      	cbnz	r5, 8004ec0 <__sfp+0x64>
 8004e8a:	4b16      	ldr	r3, [pc, #88]	; (8004ee4 <__sfp+0x88>)
 8004e8c:	60e3      	str	r3, [r4, #12]
 8004e8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e92:	6665      	str	r5, [r4, #100]	; 0x64
 8004e94:	f000 f847 	bl	8004f26 <__retarget_lock_init_recursive>
 8004e98:	f7ff ff96 	bl	8004dc8 <__sfp_lock_release>
 8004e9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004ea0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004ea4:	6025      	str	r5, [r4, #0]
 8004ea6:	61a5      	str	r5, [r4, #24]
 8004ea8:	2208      	movs	r2, #8
 8004eaa:	4629      	mov	r1, r5
 8004eac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004eb0:	f7ff f9d4 	bl	800425c <memset>
 8004eb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004eb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004ebc:	4620      	mov	r0, r4
 8004ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ec0:	3468      	adds	r4, #104	; 0x68
 8004ec2:	e7d9      	b.n	8004e78 <__sfp+0x1c>
 8004ec4:	2104      	movs	r1, #4
 8004ec6:	4638      	mov	r0, r7
 8004ec8:	f7ff ff62 	bl	8004d90 <__sfmoreglue>
 8004ecc:	4604      	mov	r4, r0
 8004ece:	6030      	str	r0, [r6, #0]
 8004ed0:	2800      	cmp	r0, #0
 8004ed2:	d1d5      	bne.n	8004e80 <__sfp+0x24>
 8004ed4:	f7ff ff78 	bl	8004dc8 <__sfp_lock_release>
 8004ed8:	230c      	movs	r3, #12
 8004eda:	603b      	str	r3, [r7, #0]
 8004edc:	e7ee      	b.n	8004ebc <__sfp+0x60>
 8004ede:	bf00      	nop
 8004ee0:	08005f04 	.word	0x08005f04
 8004ee4:	ffff0001 	.word	0xffff0001

08004ee8 <_fwalk_reent>:
 8004ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004eec:	4606      	mov	r6, r0
 8004eee:	4688      	mov	r8, r1
 8004ef0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ef4:	2700      	movs	r7, #0
 8004ef6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004efa:	f1b9 0901 	subs.w	r9, r9, #1
 8004efe:	d505      	bpl.n	8004f0c <_fwalk_reent+0x24>
 8004f00:	6824      	ldr	r4, [r4, #0]
 8004f02:	2c00      	cmp	r4, #0
 8004f04:	d1f7      	bne.n	8004ef6 <_fwalk_reent+0xe>
 8004f06:	4638      	mov	r0, r7
 8004f08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f0c:	89ab      	ldrh	r3, [r5, #12]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d907      	bls.n	8004f22 <_fwalk_reent+0x3a>
 8004f12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f16:	3301      	adds	r3, #1
 8004f18:	d003      	beq.n	8004f22 <_fwalk_reent+0x3a>
 8004f1a:	4629      	mov	r1, r5
 8004f1c:	4630      	mov	r0, r6
 8004f1e:	47c0      	blx	r8
 8004f20:	4307      	orrs	r7, r0
 8004f22:	3568      	adds	r5, #104	; 0x68
 8004f24:	e7e9      	b.n	8004efa <_fwalk_reent+0x12>

08004f26 <__retarget_lock_init_recursive>:
 8004f26:	4770      	bx	lr

08004f28 <__retarget_lock_acquire_recursive>:
 8004f28:	4770      	bx	lr

08004f2a <__retarget_lock_release_recursive>:
 8004f2a:	4770      	bx	lr

08004f2c <__swhatbuf_r>:
 8004f2c:	b570      	push	{r4, r5, r6, lr}
 8004f2e:	460e      	mov	r6, r1
 8004f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f34:	2900      	cmp	r1, #0
 8004f36:	b096      	sub	sp, #88	; 0x58
 8004f38:	4614      	mov	r4, r2
 8004f3a:	461d      	mov	r5, r3
 8004f3c:	da08      	bge.n	8004f50 <__swhatbuf_r+0x24>
 8004f3e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	602a      	str	r2, [r5, #0]
 8004f46:	061a      	lsls	r2, r3, #24
 8004f48:	d410      	bmi.n	8004f6c <__swhatbuf_r+0x40>
 8004f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f4e:	e00e      	b.n	8004f6e <__swhatbuf_r+0x42>
 8004f50:	466a      	mov	r2, sp
 8004f52:	f000 f907 	bl	8005164 <_fstat_r>
 8004f56:	2800      	cmp	r0, #0
 8004f58:	dbf1      	blt.n	8004f3e <__swhatbuf_r+0x12>
 8004f5a:	9a01      	ldr	r2, [sp, #4]
 8004f5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004f60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004f64:	425a      	negs	r2, r3
 8004f66:	415a      	adcs	r2, r3
 8004f68:	602a      	str	r2, [r5, #0]
 8004f6a:	e7ee      	b.n	8004f4a <__swhatbuf_r+0x1e>
 8004f6c:	2340      	movs	r3, #64	; 0x40
 8004f6e:	2000      	movs	r0, #0
 8004f70:	6023      	str	r3, [r4, #0]
 8004f72:	b016      	add	sp, #88	; 0x58
 8004f74:	bd70      	pop	{r4, r5, r6, pc}
	...

08004f78 <__smakebuf_r>:
 8004f78:	898b      	ldrh	r3, [r1, #12]
 8004f7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f7c:	079d      	lsls	r5, r3, #30
 8004f7e:	4606      	mov	r6, r0
 8004f80:	460c      	mov	r4, r1
 8004f82:	d507      	bpl.n	8004f94 <__smakebuf_r+0x1c>
 8004f84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f88:	6023      	str	r3, [r4, #0]
 8004f8a:	6123      	str	r3, [r4, #16]
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	6163      	str	r3, [r4, #20]
 8004f90:	b002      	add	sp, #8
 8004f92:	bd70      	pop	{r4, r5, r6, pc}
 8004f94:	ab01      	add	r3, sp, #4
 8004f96:	466a      	mov	r2, sp
 8004f98:	f7ff ffc8 	bl	8004f2c <__swhatbuf_r>
 8004f9c:	9900      	ldr	r1, [sp, #0]
 8004f9e:	4605      	mov	r5, r0
 8004fa0:	4630      	mov	r0, r6
 8004fa2:	f7ff f9cf 	bl	8004344 <_malloc_r>
 8004fa6:	b948      	cbnz	r0, 8004fbc <__smakebuf_r+0x44>
 8004fa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fac:	059a      	lsls	r2, r3, #22
 8004fae:	d4ef      	bmi.n	8004f90 <__smakebuf_r+0x18>
 8004fb0:	f023 0303 	bic.w	r3, r3, #3
 8004fb4:	f043 0302 	orr.w	r3, r3, #2
 8004fb8:	81a3      	strh	r3, [r4, #12]
 8004fba:	e7e3      	b.n	8004f84 <__smakebuf_r+0xc>
 8004fbc:	4b0d      	ldr	r3, [pc, #52]	; (8004ff4 <__smakebuf_r+0x7c>)
 8004fbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8004fc0:	89a3      	ldrh	r3, [r4, #12]
 8004fc2:	6020      	str	r0, [r4, #0]
 8004fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fc8:	81a3      	strh	r3, [r4, #12]
 8004fca:	9b00      	ldr	r3, [sp, #0]
 8004fcc:	6163      	str	r3, [r4, #20]
 8004fce:	9b01      	ldr	r3, [sp, #4]
 8004fd0:	6120      	str	r0, [r4, #16]
 8004fd2:	b15b      	cbz	r3, 8004fec <__smakebuf_r+0x74>
 8004fd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fd8:	4630      	mov	r0, r6
 8004fda:	f000 f8d5 	bl	8005188 <_isatty_r>
 8004fde:	b128      	cbz	r0, 8004fec <__smakebuf_r+0x74>
 8004fe0:	89a3      	ldrh	r3, [r4, #12]
 8004fe2:	f023 0303 	bic.w	r3, r3, #3
 8004fe6:	f043 0301 	orr.w	r3, r3, #1
 8004fea:	81a3      	strh	r3, [r4, #12]
 8004fec:	89a0      	ldrh	r0, [r4, #12]
 8004fee:	4305      	orrs	r5, r0
 8004ff0:	81a5      	strh	r5, [r4, #12]
 8004ff2:	e7cd      	b.n	8004f90 <__smakebuf_r+0x18>
 8004ff4:	08004d85 	.word	0x08004d85

08004ff8 <__malloc_lock>:
 8004ff8:	4801      	ldr	r0, [pc, #4]	; (8005000 <__malloc_lock+0x8>)
 8004ffa:	f7ff bf95 	b.w	8004f28 <__retarget_lock_acquire_recursive>
 8004ffe:	bf00      	nop
 8005000:	20000378 	.word	0x20000378

08005004 <__malloc_unlock>:
 8005004:	4801      	ldr	r0, [pc, #4]	; (800500c <__malloc_unlock+0x8>)
 8005006:	f7ff bf90 	b.w	8004f2a <__retarget_lock_release_recursive>
 800500a:	bf00      	nop
 800500c:	20000378 	.word	0x20000378

08005010 <_raise_r>:
 8005010:	291f      	cmp	r1, #31
 8005012:	b538      	push	{r3, r4, r5, lr}
 8005014:	4604      	mov	r4, r0
 8005016:	460d      	mov	r5, r1
 8005018:	d904      	bls.n	8005024 <_raise_r+0x14>
 800501a:	2316      	movs	r3, #22
 800501c:	6003      	str	r3, [r0, #0]
 800501e:	f04f 30ff 	mov.w	r0, #4294967295
 8005022:	bd38      	pop	{r3, r4, r5, pc}
 8005024:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005026:	b112      	cbz	r2, 800502e <_raise_r+0x1e>
 8005028:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800502c:	b94b      	cbnz	r3, 8005042 <_raise_r+0x32>
 800502e:	4620      	mov	r0, r4
 8005030:	f000 f830 	bl	8005094 <_getpid_r>
 8005034:	462a      	mov	r2, r5
 8005036:	4601      	mov	r1, r0
 8005038:	4620      	mov	r0, r4
 800503a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800503e:	f000 b817 	b.w	8005070 <_kill_r>
 8005042:	2b01      	cmp	r3, #1
 8005044:	d00a      	beq.n	800505c <_raise_r+0x4c>
 8005046:	1c59      	adds	r1, r3, #1
 8005048:	d103      	bne.n	8005052 <_raise_r+0x42>
 800504a:	2316      	movs	r3, #22
 800504c:	6003      	str	r3, [r0, #0]
 800504e:	2001      	movs	r0, #1
 8005050:	e7e7      	b.n	8005022 <_raise_r+0x12>
 8005052:	2400      	movs	r4, #0
 8005054:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005058:	4628      	mov	r0, r5
 800505a:	4798      	blx	r3
 800505c:	2000      	movs	r0, #0
 800505e:	e7e0      	b.n	8005022 <_raise_r+0x12>

08005060 <raise>:
 8005060:	4b02      	ldr	r3, [pc, #8]	; (800506c <raise+0xc>)
 8005062:	4601      	mov	r1, r0
 8005064:	6818      	ldr	r0, [r3, #0]
 8005066:	f7ff bfd3 	b.w	8005010 <_raise_r>
 800506a:	bf00      	nop
 800506c:	20000030 	.word	0x20000030

08005070 <_kill_r>:
 8005070:	b538      	push	{r3, r4, r5, lr}
 8005072:	4d07      	ldr	r5, [pc, #28]	; (8005090 <_kill_r+0x20>)
 8005074:	2300      	movs	r3, #0
 8005076:	4604      	mov	r4, r0
 8005078:	4608      	mov	r0, r1
 800507a:	4611      	mov	r1, r2
 800507c:	602b      	str	r3, [r5, #0]
 800507e:	f7fc ffbb 	bl	8001ff8 <_kill>
 8005082:	1c43      	adds	r3, r0, #1
 8005084:	d102      	bne.n	800508c <_kill_r+0x1c>
 8005086:	682b      	ldr	r3, [r5, #0]
 8005088:	b103      	cbz	r3, 800508c <_kill_r+0x1c>
 800508a:	6023      	str	r3, [r4, #0]
 800508c:	bd38      	pop	{r3, r4, r5, pc}
 800508e:	bf00      	nop
 8005090:	2000037c 	.word	0x2000037c

08005094 <_getpid_r>:
 8005094:	f7fc bfae 	b.w	8001ff4 <_getpid>

08005098 <__sread>:
 8005098:	b510      	push	{r4, lr}
 800509a:	460c      	mov	r4, r1
 800509c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050a0:	f000 f894 	bl	80051cc <_read_r>
 80050a4:	2800      	cmp	r0, #0
 80050a6:	bfab      	itete	ge
 80050a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80050aa:	89a3      	ldrhlt	r3, [r4, #12]
 80050ac:	181b      	addge	r3, r3, r0
 80050ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80050b2:	bfac      	ite	ge
 80050b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80050b6:	81a3      	strhlt	r3, [r4, #12]
 80050b8:	bd10      	pop	{r4, pc}

080050ba <__swrite>:
 80050ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050be:	461f      	mov	r7, r3
 80050c0:	898b      	ldrh	r3, [r1, #12]
 80050c2:	05db      	lsls	r3, r3, #23
 80050c4:	4605      	mov	r5, r0
 80050c6:	460c      	mov	r4, r1
 80050c8:	4616      	mov	r6, r2
 80050ca:	d505      	bpl.n	80050d8 <__swrite+0x1e>
 80050cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050d0:	2302      	movs	r3, #2
 80050d2:	2200      	movs	r2, #0
 80050d4:	f000 f868 	bl	80051a8 <_lseek_r>
 80050d8:	89a3      	ldrh	r3, [r4, #12]
 80050da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050e2:	81a3      	strh	r3, [r4, #12]
 80050e4:	4632      	mov	r2, r6
 80050e6:	463b      	mov	r3, r7
 80050e8:	4628      	mov	r0, r5
 80050ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050ee:	f000 b817 	b.w	8005120 <_write_r>

080050f2 <__sseek>:
 80050f2:	b510      	push	{r4, lr}
 80050f4:	460c      	mov	r4, r1
 80050f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050fa:	f000 f855 	bl	80051a8 <_lseek_r>
 80050fe:	1c43      	adds	r3, r0, #1
 8005100:	89a3      	ldrh	r3, [r4, #12]
 8005102:	bf15      	itete	ne
 8005104:	6560      	strne	r0, [r4, #84]	; 0x54
 8005106:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800510a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800510e:	81a3      	strheq	r3, [r4, #12]
 8005110:	bf18      	it	ne
 8005112:	81a3      	strhne	r3, [r4, #12]
 8005114:	bd10      	pop	{r4, pc}

08005116 <__sclose>:
 8005116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800511a:	f000 b813 	b.w	8005144 <_close_r>
	...

08005120 <_write_r>:
 8005120:	b538      	push	{r3, r4, r5, lr}
 8005122:	4d07      	ldr	r5, [pc, #28]	; (8005140 <_write_r+0x20>)
 8005124:	4604      	mov	r4, r0
 8005126:	4608      	mov	r0, r1
 8005128:	4611      	mov	r1, r2
 800512a:	2200      	movs	r2, #0
 800512c:	602a      	str	r2, [r5, #0]
 800512e:	461a      	mov	r2, r3
 8005130:	f7fc ff80 	bl	8002034 <_write>
 8005134:	1c43      	adds	r3, r0, #1
 8005136:	d102      	bne.n	800513e <_write_r+0x1e>
 8005138:	682b      	ldr	r3, [r5, #0]
 800513a:	b103      	cbz	r3, 800513e <_write_r+0x1e>
 800513c:	6023      	str	r3, [r4, #0]
 800513e:	bd38      	pop	{r3, r4, r5, pc}
 8005140:	2000037c 	.word	0x2000037c

08005144 <_close_r>:
 8005144:	b538      	push	{r3, r4, r5, lr}
 8005146:	4d06      	ldr	r5, [pc, #24]	; (8005160 <_close_r+0x1c>)
 8005148:	2300      	movs	r3, #0
 800514a:	4604      	mov	r4, r0
 800514c:	4608      	mov	r0, r1
 800514e:	602b      	str	r3, [r5, #0]
 8005150:	f7fc ff7e 	bl	8002050 <_close>
 8005154:	1c43      	adds	r3, r0, #1
 8005156:	d102      	bne.n	800515e <_close_r+0x1a>
 8005158:	682b      	ldr	r3, [r5, #0]
 800515a:	b103      	cbz	r3, 800515e <_close_r+0x1a>
 800515c:	6023      	str	r3, [r4, #0]
 800515e:	bd38      	pop	{r3, r4, r5, pc}
 8005160:	2000037c 	.word	0x2000037c

08005164 <_fstat_r>:
 8005164:	b538      	push	{r3, r4, r5, lr}
 8005166:	4d07      	ldr	r5, [pc, #28]	; (8005184 <_fstat_r+0x20>)
 8005168:	2300      	movs	r3, #0
 800516a:	4604      	mov	r4, r0
 800516c:	4608      	mov	r0, r1
 800516e:	4611      	mov	r1, r2
 8005170:	602b      	str	r3, [r5, #0]
 8005172:	f7fc ff70 	bl	8002056 <_fstat>
 8005176:	1c43      	adds	r3, r0, #1
 8005178:	d102      	bne.n	8005180 <_fstat_r+0x1c>
 800517a:	682b      	ldr	r3, [r5, #0]
 800517c:	b103      	cbz	r3, 8005180 <_fstat_r+0x1c>
 800517e:	6023      	str	r3, [r4, #0]
 8005180:	bd38      	pop	{r3, r4, r5, pc}
 8005182:	bf00      	nop
 8005184:	2000037c 	.word	0x2000037c

08005188 <_isatty_r>:
 8005188:	b538      	push	{r3, r4, r5, lr}
 800518a:	4d06      	ldr	r5, [pc, #24]	; (80051a4 <_isatty_r+0x1c>)
 800518c:	2300      	movs	r3, #0
 800518e:	4604      	mov	r4, r0
 8005190:	4608      	mov	r0, r1
 8005192:	602b      	str	r3, [r5, #0]
 8005194:	f7fc ff64 	bl	8002060 <_isatty>
 8005198:	1c43      	adds	r3, r0, #1
 800519a:	d102      	bne.n	80051a2 <_isatty_r+0x1a>
 800519c:	682b      	ldr	r3, [r5, #0]
 800519e:	b103      	cbz	r3, 80051a2 <_isatty_r+0x1a>
 80051a0:	6023      	str	r3, [r4, #0]
 80051a2:	bd38      	pop	{r3, r4, r5, pc}
 80051a4:	2000037c 	.word	0x2000037c

080051a8 <_lseek_r>:
 80051a8:	b538      	push	{r3, r4, r5, lr}
 80051aa:	4d07      	ldr	r5, [pc, #28]	; (80051c8 <_lseek_r+0x20>)
 80051ac:	4604      	mov	r4, r0
 80051ae:	4608      	mov	r0, r1
 80051b0:	4611      	mov	r1, r2
 80051b2:	2200      	movs	r2, #0
 80051b4:	602a      	str	r2, [r5, #0]
 80051b6:	461a      	mov	r2, r3
 80051b8:	f7fc ff54 	bl	8002064 <_lseek>
 80051bc:	1c43      	adds	r3, r0, #1
 80051be:	d102      	bne.n	80051c6 <_lseek_r+0x1e>
 80051c0:	682b      	ldr	r3, [r5, #0]
 80051c2:	b103      	cbz	r3, 80051c6 <_lseek_r+0x1e>
 80051c4:	6023      	str	r3, [r4, #0]
 80051c6:	bd38      	pop	{r3, r4, r5, pc}
 80051c8:	2000037c 	.word	0x2000037c

080051cc <_read_r>:
 80051cc:	b538      	push	{r3, r4, r5, lr}
 80051ce:	4d07      	ldr	r5, [pc, #28]	; (80051ec <_read_r+0x20>)
 80051d0:	4604      	mov	r4, r0
 80051d2:	4608      	mov	r0, r1
 80051d4:	4611      	mov	r1, r2
 80051d6:	2200      	movs	r2, #0
 80051d8:	602a      	str	r2, [r5, #0]
 80051da:	461a      	mov	r2, r3
 80051dc:	f7fc ff1a 	bl	8002014 <_read>
 80051e0:	1c43      	adds	r3, r0, #1
 80051e2:	d102      	bne.n	80051ea <_read_r+0x1e>
 80051e4:	682b      	ldr	r3, [r5, #0]
 80051e6:	b103      	cbz	r3, 80051ea <_read_r+0x1e>
 80051e8:	6023      	str	r3, [r4, #0]
 80051ea:	bd38      	pop	{r3, r4, r5, pc}
 80051ec:	2000037c 	.word	0x2000037c

080051f0 <cosf>:
 80051f0:	ee10 3a10 	vmov	r3, s0
 80051f4:	b507      	push	{r0, r1, r2, lr}
 80051f6:	4a1e      	ldr	r2, [pc, #120]	; (8005270 <cosf+0x80>)
 80051f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051fc:	4293      	cmp	r3, r2
 80051fe:	dc06      	bgt.n	800520e <cosf+0x1e>
 8005200:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8005274 <cosf+0x84>
 8005204:	b003      	add	sp, #12
 8005206:	f85d eb04 	ldr.w	lr, [sp], #4
 800520a:	f000 b9fd 	b.w	8005608 <__kernel_cosf>
 800520e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005212:	db04      	blt.n	800521e <cosf+0x2e>
 8005214:	ee30 0a40 	vsub.f32	s0, s0, s0
 8005218:	b003      	add	sp, #12
 800521a:	f85d fb04 	ldr.w	pc, [sp], #4
 800521e:	4668      	mov	r0, sp
 8005220:	f000 f8b2 	bl	8005388 <__ieee754_rem_pio2f>
 8005224:	f000 0003 	and.w	r0, r0, #3
 8005228:	2801      	cmp	r0, #1
 800522a:	d009      	beq.n	8005240 <cosf+0x50>
 800522c:	2802      	cmp	r0, #2
 800522e:	d010      	beq.n	8005252 <cosf+0x62>
 8005230:	b9b0      	cbnz	r0, 8005260 <cosf+0x70>
 8005232:	eddd 0a01 	vldr	s1, [sp, #4]
 8005236:	ed9d 0a00 	vldr	s0, [sp]
 800523a:	f000 f9e5 	bl	8005608 <__kernel_cosf>
 800523e:	e7eb      	b.n	8005218 <cosf+0x28>
 8005240:	eddd 0a01 	vldr	s1, [sp, #4]
 8005244:	ed9d 0a00 	vldr	s0, [sp]
 8005248:	f000 fcb4 	bl	8005bb4 <__kernel_sinf>
 800524c:	eeb1 0a40 	vneg.f32	s0, s0
 8005250:	e7e2      	b.n	8005218 <cosf+0x28>
 8005252:	eddd 0a01 	vldr	s1, [sp, #4]
 8005256:	ed9d 0a00 	vldr	s0, [sp]
 800525a:	f000 f9d5 	bl	8005608 <__kernel_cosf>
 800525e:	e7f5      	b.n	800524c <cosf+0x5c>
 8005260:	eddd 0a01 	vldr	s1, [sp, #4]
 8005264:	ed9d 0a00 	vldr	s0, [sp]
 8005268:	2001      	movs	r0, #1
 800526a:	f000 fca3 	bl	8005bb4 <__kernel_sinf>
 800526e:	e7d3      	b.n	8005218 <cosf+0x28>
 8005270:	3f490fd8 	.word	0x3f490fd8
 8005274:	00000000 	.word	0x00000000

08005278 <roundf>:
 8005278:	ee10 0a10 	vmov	r0, s0
 800527c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8005280:	3a7f      	subs	r2, #127	; 0x7f
 8005282:	2a16      	cmp	r2, #22
 8005284:	dc15      	bgt.n	80052b2 <roundf+0x3a>
 8005286:	2a00      	cmp	r2, #0
 8005288:	da08      	bge.n	800529c <roundf+0x24>
 800528a:	3201      	adds	r2, #1
 800528c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8005290:	d101      	bne.n	8005296 <roundf+0x1e>
 8005292:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8005296:	ee00 3a10 	vmov	s0, r3
 800529a:	4770      	bx	lr
 800529c:	4907      	ldr	r1, [pc, #28]	; (80052bc <roundf+0x44>)
 800529e:	4111      	asrs	r1, r2
 80052a0:	4208      	tst	r0, r1
 80052a2:	d0fa      	beq.n	800529a <roundf+0x22>
 80052a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80052a8:	4113      	asrs	r3, r2
 80052aa:	4403      	add	r3, r0
 80052ac:	ea23 0301 	bic.w	r3, r3, r1
 80052b0:	e7f1      	b.n	8005296 <roundf+0x1e>
 80052b2:	2a80      	cmp	r2, #128	; 0x80
 80052b4:	d1f1      	bne.n	800529a <roundf+0x22>
 80052b6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80052ba:	4770      	bx	lr
 80052bc:	007fffff 	.word	0x007fffff

080052c0 <sinf>:
 80052c0:	ee10 3a10 	vmov	r3, s0
 80052c4:	b507      	push	{r0, r1, r2, lr}
 80052c6:	4a1f      	ldr	r2, [pc, #124]	; (8005344 <sinf+0x84>)
 80052c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052cc:	4293      	cmp	r3, r2
 80052ce:	dc07      	bgt.n	80052e0 <sinf+0x20>
 80052d0:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8005348 <sinf+0x88>
 80052d4:	2000      	movs	r0, #0
 80052d6:	b003      	add	sp, #12
 80052d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80052dc:	f000 bc6a 	b.w	8005bb4 <__kernel_sinf>
 80052e0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80052e4:	db04      	blt.n	80052f0 <sinf+0x30>
 80052e6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80052ea:	b003      	add	sp, #12
 80052ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80052f0:	4668      	mov	r0, sp
 80052f2:	f000 f849 	bl	8005388 <__ieee754_rem_pio2f>
 80052f6:	f000 0003 	and.w	r0, r0, #3
 80052fa:	2801      	cmp	r0, #1
 80052fc:	d00a      	beq.n	8005314 <sinf+0x54>
 80052fe:	2802      	cmp	r0, #2
 8005300:	d00f      	beq.n	8005322 <sinf+0x62>
 8005302:	b9c0      	cbnz	r0, 8005336 <sinf+0x76>
 8005304:	eddd 0a01 	vldr	s1, [sp, #4]
 8005308:	ed9d 0a00 	vldr	s0, [sp]
 800530c:	2001      	movs	r0, #1
 800530e:	f000 fc51 	bl	8005bb4 <__kernel_sinf>
 8005312:	e7ea      	b.n	80052ea <sinf+0x2a>
 8005314:	eddd 0a01 	vldr	s1, [sp, #4]
 8005318:	ed9d 0a00 	vldr	s0, [sp]
 800531c:	f000 f974 	bl	8005608 <__kernel_cosf>
 8005320:	e7e3      	b.n	80052ea <sinf+0x2a>
 8005322:	eddd 0a01 	vldr	s1, [sp, #4]
 8005326:	ed9d 0a00 	vldr	s0, [sp]
 800532a:	2001      	movs	r0, #1
 800532c:	f000 fc42 	bl	8005bb4 <__kernel_sinf>
 8005330:	eeb1 0a40 	vneg.f32	s0, s0
 8005334:	e7d9      	b.n	80052ea <sinf+0x2a>
 8005336:	eddd 0a01 	vldr	s1, [sp, #4]
 800533a:	ed9d 0a00 	vldr	s0, [sp]
 800533e:	f000 f963 	bl	8005608 <__kernel_cosf>
 8005342:	e7f5      	b.n	8005330 <sinf+0x70>
 8005344:	3f490fd8 	.word	0x3f490fd8
 8005348:	00000000 	.word	0x00000000

0800534c <sqrtf>:
 800534c:	b508      	push	{r3, lr}
 800534e:	ed2d 8b02 	vpush	{d8}
 8005352:	eeb0 8a40 	vmov.f32	s16, s0
 8005356:	f000 f953 	bl	8005600 <__ieee754_sqrtf>
 800535a:	eeb4 8a48 	vcmp.f32	s16, s16
 800535e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005362:	d60c      	bvs.n	800537e <sqrtf+0x32>
 8005364:	eddf 8a07 	vldr	s17, [pc, #28]	; 8005384 <sqrtf+0x38>
 8005368:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800536c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005370:	d505      	bpl.n	800537e <sqrtf+0x32>
 8005372:	f7fe ff19 	bl	80041a8 <__errno>
 8005376:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800537a:	2321      	movs	r3, #33	; 0x21
 800537c:	6003      	str	r3, [r0, #0]
 800537e:	ecbd 8b02 	vpop	{d8}
 8005382:	bd08      	pop	{r3, pc}
 8005384:	00000000 	.word	0x00000000

08005388 <__ieee754_rem_pio2f>:
 8005388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800538a:	ee10 6a10 	vmov	r6, s0
 800538e:	4b8e      	ldr	r3, [pc, #568]	; (80055c8 <__ieee754_rem_pio2f+0x240>)
 8005390:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8005394:	429d      	cmp	r5, r3
 8005396:	b087      	sub	sp, #28
 8005398:	eef0 7a40 	vmov.f32	s15, s0
 800539c:	4604      	mov	r4, r0
 800539e:	dc05      	bgt.n	80053ac <__ieee754_rem_pio2f+0x24>
 80053a0:	2300      	movs	r3, #0
 80053a2:	ed80 0a00 	vstr	s0, [r0]
 80053a6:	6043      	str	r3, [r0, #4]
 80053a8:	2000      	movs	r0, #0
 80053aa:	e01a      	b.n	80053e2 <__ieee754_rem_pio2f+0x5a>
 80053ac:	4b87      	ldr	r3, [pc, #540]	; (80055cc <__ieee754_rem_pio2f+0x244>)
 80053ae:	429d      	cmp	r5, r3
 80053b0:	dc46      	bgt.n	8005440 <__ieee754_rem_pio2f+0xb8>
 80053b2:	2e00      	cmp	r6, #0
 80053b4:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80055d0 <__ieee754_rem_pio2f+0x248>
 80053b8:	4b86      	ldr	r3, [pc, #536]	; (80055d4 <__ieee754_rem_pio2f+0x24c>)
 80053ba:	f025 050f 	bic.w	r5, r5, #15
 80053be:	dd1f      	ble.n	8005400 <__ieee754_rem_pio2f+0x78>
 80053c0:	429d      	cmp	r5, r3
 80053c2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80053c6:	d00e      	beq.n	80053e6 <__ieee754_rem_pio2f+0x5e>
 80053c8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80055d8 <__ieee754_rem_pio2f+0x250>
 80053cc:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80053d0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80053d4:	ed80 0a00 	vstr	s0, [r0]
 80053d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80053dc:	2001      	movs	r0, #1
 80053de:	edc4 7a01 	vstr	s15, [r4, #4]
 80053e2:	b007      	add	sp, #28
 80053e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053e6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80055dc <__ieee754_rem_pio2f+0x254>
 80053ea:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80055e0 <__ieee754_rem_pio2f+0x258>
 80053ee:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80053f2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80053f6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80053fa:	edc0 6a00 	vstr	s13, [r0]
 80053fe:	e7eb      	b.n	80053d8 <__ieee754_rem_pio2f+0x50>
 8005400:	429d      	cmp	r5, r3
 8005402:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005406:	d00e      	beq.n	8005426 <__ieee754_rem_pio2f+0x9e>
 8005408:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80055d8 <__ieee754_rem_pio2f+0x250>
 800540c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8005410:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8005414:	ed80 0a00 	vstr	s0, [r0]
 8005418:	ee77 7a87 	vadd.f32	s15, s15, s14
 800541c:	f04f 30ff 	mov.w	r0, #4294967295
 8005420:	edc4 7a01 	vstr	s15, [r4, #4]
 8005424:	e7dd      	b.n	80053e2 <__ieee754_rem_pio2f+0x5a>
 8005426:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80055dc <__ieee754_rem_pio2f+0x254>
 800542a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80055e0 <__ieee754_rem_pio2f+0x258>
 800542e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005432:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005436:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800543a:	edc0 6a00 	vstr	s13, [r0]
 800543e:	e7eb      	b.n	8005418 <__ieee754_rem_pio2f+0x90>
 8005440:	4b68      	ldr	r3, [pc, #416]	; (80055e4 <__ieee754_rem_pio2f+0x25c>)
 8005442:	429d      	cmp	r5, r3
 8005444:	dc72      	bgt.n	800552c <__ieee754_rem_pio2f+0x1a4>
 8005446:	f000 fbfd 	bl	8005c44 <fabsf>
 800544a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80055e8 <__ieee754_rem_pio2f+0x260>
 800544e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005452:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005456:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800545a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800545e:	ee17 0a90 	vmov	r0, s15
 8005462:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80055d0 <__ieee754_rem_pio2f+0x248>
 8005466:	eea7 0a67 	vfms.f32	s0, s14, s15
 800546a:	281f      	cmp	r0, #31
 800546c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80055d8 <__ieee754_rem_pio2f+0x250>
 8005470:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005474:	eeb1 6a47 	vneg.f32	s12, s14
 8005478:	ee70 6a67 	vsub.f32	s13, s0, s15
 800547c:	ee16 2a90 	vmov	r2, s13
 8005480:	dc1c      	bgt.n	80054bc <__ieee754_rem_pio2f+0x134>
 8005482:	495a      	ldr	r1, [pc, #360]	; (80055ec <__ieee754_rem_pio2f+0x264>)
 8005484:	1e47      	subs	r7, r0, #1
 8005486:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800548a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800548e:	428b      	cmp	r3, r1
 8005490:	d014      	beq.n	80054bc <__ieee754_rem_pio2f+0x134>
 8005492:	6022      	str	r2, [r4, #0]
 8005494:	ed94 7a00 	vldr	s14, [r4]
 8005498:	ee30 0a47 	vsub.f32	s0, s0, s14
 800549c:	2e00      	cmp	r6, #0
 800549e:	ee30 0a67 	vsub.f32	s0, s0, s15
 80054a2:	ed84 0a01 	vstr	s0, [r4, #4]
 80054a6:	da9c      	bge.n	80053e2 <__ieee754_rem_pio2f+0x5a>
 80054a8:	eeb1 7a47 	vneg.f32	s14, s14
 80054ac:	eeb1 0a40 	vneg.f32	s0, s0
 80054b0:	ed84 7a00 	vstr	s14, [r4]
 80054b4:	ed84 0a01 	vstr	s0, [r4, #4]
 80054b8:	4240      	negs	r0, r0
 80054ba:	e792      	b.n	80053e2 <__ieee754_rem_pio2f+0x5a>
 80054bc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80054c0:	15eb      	asrs	r3, r5, #23
 80054c2:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80054c6:	2d08      	cmp	r5, #8
 80054c8:	dde3      	ble.n	8005492 <__ieee754_rem_pio2f+0x10a>
 80054ca:	eddf 7a44 	vldr	s15, [pc, #272]	; 80055dc <__ieee754_rem_pio2f+0x254>
 80054ce:	eddf 5a44 	vldr	s11, [pc, #272]	; 80055e0 <__ieee754_rem_pio2f+0x258>
 80054d2:	eef0 6a40 	vmov.f32	s13, s0
 80054d6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80054da:	ee30 0a66 	vsub.f32	s0, s0, s13
 80054de:	eea6 0a27 	vfma.f32	s0, s12, s15
 80054e2:	eef0 7a40 	vmov.f32	s15, s0
 80054e6:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80054ea:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80054ee:	ee15 2a90 	vmov	r2, s11
 80054f2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80054f6:	1a5b      	subs	r3, r3, r1
 80054f8:	2b19      	cmp	r3, #25
 80054fa:	dc04      	bgt.n	8005506 <__ieee754_rem_pio2f+0x17e>
 80054fc:	edc4 5a00 	vstr	s11, [r4]
 8005500:	eeb0 0a66 	vmov.f32	s0, s13
 8005504:	e7c6      	b.n	8005494 <__ieee754_rem_pio2f+0x10c>
 8005506:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80055f0 <__ieee754_rem_pio2f+0x268>
 800550a:	eeb0 0a66 	vmov.f32	s0, s13
 800550e:	eea6 0a25 	vfma.f32	s0, s12, s11
 8005512:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8005516:	eddf 6a37 	vldr	s13, [pc, #220]	; 80055f4 <__ieee754_rem_pio2f+0x26c>
 800551a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800551e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8005522:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005526:	ed84 7a00 	vstr	s14, [r4]
 800552a:	e7b3      	b.n	8005494 <__ieee754_rem_pio2f+0x10c>
 800552c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8005530:	db06      	blt.n	8005540 <__ieee754_rem_pio2f+0x1b8>
 8005532:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005536:	edc0 7a01 	vstr	s15, [r0, #4]
 800553a:	edc0 7a00 	vstr	s15, [r0]
 800553e:	e733      	b.n	80053a8 <__ieee754_rem_pio2f+0x20>
 8005540:	15ea      	asrs	r2, r5, #23
 8005542:	3a86      	subs	r2, #134	; 0x86
 8005544:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8005548:	ee07 3a90 	vmov	s15, r3
 800554c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005550:	eddf 6a29 	vldr	s13, [pc, #164]	; 80055f8 <__ieee754_rem_pio2f+0x270>
 8005554:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005558:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800555c:	ed8d 7a03 	vstr	s14, [sp, #12]
 8005560:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005564:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005568:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800556c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005570:	ed8d 7a04 	vstr	s14, [sp, #16]
 8005574:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005578:	eef5 7a40 	vcmp.f32	s15, #0.0
 800557c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005580:	edcd 7a05 	vstr	s15, [sp, #20]
 8005584:	d11e      	bne.n	80055c4 <__ieee754_rem_pio2f+0x23c>
 8005586:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800558a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800558e:	bf14      	ite	ne
 8005590:	2302      	movne	r3, #2
 8005592:	2301      	moveq	r3, #1
 8005594:	4919      	ldr	r1, [pc, #100]	; (80055fc <__ieee754_rem_pio2f+0x274>)
 8005596:	9101      	str	r1, [sp, #4]
 8005598:	2102      	movs	r1, #2
 800559a:	9100      	str	r1, [sp, #0]
 800559c:	a803      	add	r0, sp, #12
 800559e:	4621      	mov	r1, r4
 80055a0:	f000 f892 	bl	80056c8 <__kernel_rem_pio2f>
 80055a4:	2e00      	cmp	r6, #0
 80055a6:	f6bf af1c 	bge.w	80053e2 <__ieee754_rem_pio2f+0x5a>
 80055aa:	edd4 7a00 	vldr	s15, [r4]
 80055ae:	eef1 7a67 	vneg.f32	s15, s15
 80055b2:	edc4 7a00 	vstr	s15, [r4]
 80055b6:	edd4 7a01 	vldr	s15, [r4, #4]
 80055ba:	eef1 7a67 	vneg.f32	s15, s15
 80055be:	edc4 7a01 	vstr	s15, [r4, #4]
 80055c2:	e779      	b.n	80054b8 <__ieee754_rem_pio2f+0x130>
 80055c4:	2303      	movs	r3, #3
 80055c6:	e7e5      	b.n	8005594 <__ieee754_rem_pio2f+0x20c>
 80055c8:	3f490fd8 	.word	0x3f490fd8
 80055cc:	4016cbe3 	.word	0x4016cbe3
 80055d0:	3fc90f80 	.word	0x3fc90f80
 80055d4:	3fc90fd0 	.word	0x3fc90fd0
 80055d8:	37354443 	.word	0x37354443
 80055dc:	37354400 	.word	0x37354400
 80055e0:	2e85a308 	.word	0x2e85a308
 80055e4:	43490f80 	.word	0x43490f80
 80055e8:	3f22f984 	.word	0x3f22f984
 80055ec:	08005f9c 	.word	0x08005f9c
 80055f0:	2e85a300 	.word	0x2e85a300
 80055f4:	248d3132 	.word	0x248d3132
 80055f8:	43800000 	.word	0x43800000
 80055fc:	0800601c 	.word	0x0800601c

08005600 <__ieee754_sqrtf>:
 8005600:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8005604:	4770      	bx	lr
	...

08005608 <__kernel_cosf>:
 8005608:	ee10 3a10 	vmov	r3, s0
 800560c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005610:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8005614:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005618:	da05      	bge.n	8005626 <__kernel_cosf+0x1e>
 800561a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800561e:	ee17 2a90 	vmov	r2, s15
 8005622:	2a00      	cmp	r2, #0
 8005624:	d03d      	beq.n	80056a2 <__kernel_cosf+0x9a>
 8005626:	ee60 5a00 	vmul.f32	s11, s0, s0
 800562a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80056a8 <__kernel_cosf+0xa0>
 800562e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80056ac <__kernel_cosf+0xa4>
 8005632:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80056b0 <__kernel_cosf+0xa8>
 8005636:	4a1f      	ldr	r2, [pc, #124]	; (80056b4 <__kernel_cosf+0xac>)
 8005638:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800563c:	4293      	cmp	r3, r2
 800563e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80056b8 <__kernel_cosf+0xb0>
 8005642:	eee7 7a25 	vfma.f32	s15, s14, s11
 8005646:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80056bc <__kernel_cosf+0xb4>
 800564a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800564e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80056c0 <__kernel_cosf+0xb8>
 8005652:	eee7 7a25 	vfma.f32	s15, s14, s11
 8005656:	eeb0 7a66 	vmov.f32	s14, s13
 800565a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800565e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8005662:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8005666:	ee67 6a25 	vmul.f32	s13, s14, s11
 800566a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800566e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005672:	dc04      	bgt.n	800567e <__kernel_cosf+0x76>
 8005674:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005678:	ee36 0a47 	vsub.f32	s0, s12, s14
 800567c:	4770      	bx	lr
 800567e:	4a11      	ldr	r2, [pc, #68]	; (80056c4 <__kernel_cosf+0xbc>)
 8005680:	4293      	cmp	r3, r2
 8005682:	bfda      	itte	le
 8005684:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8005688:	ee06 3a90 	vmovle	s13, r3
 800568c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8005690:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005694:	ee36 0a66 	vsub.f32	s0, s12, s13
 8005698:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800569c:	ee30 0a67 	vsub.f32	s0, s0, s15
 80056a0:	4770      	bx	lr
 80056a2:	eeb0 0a46 	vmov.f32	s0, s12
 80056a6:	4770      	bx	lr
 80056a8:	ad47d74e 	.word	0xad47d74e
 80056ac:	310f74f6 	.word	0x310f74f6
 80056b0:	3d2aaaab 	.word	0x3d2aaaab
 80056b4:	3e999999 	.word	0x3e999999
 80056b8:	b493f27c 	.word	0xb493f27c
 80056bc:	37d00d01 	.word	0x37d00d01
 80056c0:	bab60b61 	.word	0xbab60b61
 80056c4:	3f480000 	.word	0x3f480000

080056c8 <__kernel_rem_pio2f>:
 80056c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056cc:	ed2d 8b04 	vpush	{d8-d9}
 80056d0:	b0d9      	sub	sp, #356	; 0x164
 80056d2:	4688      	mov	r8, r1
 80056d4:	9002      	str	r0, [sp, #8]
 80056d6:	49bb      	ldr	r1, [pc, #748]	; (80059c4 <__kernel_rem_pio2f+0x2fc>)
 80056d8:	9866      	ldr	r0, [sp, #408]	; 0x198
 80056da:	9301      	str	r3, [sp, #4]
 80056dc:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 80056e0:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 80056e4:	1e59      	subs	r1, r3, #1
 80056e6:	1d13      	adds	r3, r2, #4
 80056e8:	db27      	blt.n	800573a <__kernel_rem_pio2f+0x72>
 80056ea:	f1b2 0b03 	subs.w	fp, r2, #3
 80056ee:	bf48      	it	mi
 80056f0:	f102 0b04 	addmi.w	fp, r2, #4
 80056f4:	ea4f 00eb 	mov.w	r0, fp, asr #3
 80056f8:	1c45      	adds	r5, r0, #1
 80056fa:	00ec      	lsls	r4, r5, #3
 80056fc:	1a47      	subs	r7, r0, r1
 80056fe:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80059d4 <__kernel_rem_pio2f+0x30c>
 8005702:	9403      	str	r4, [sp, #12]
 8005704:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8005708:	eb0a 0c01 	add.w	ip, sl, r1
 800570c:	ae1c      	add	r6, sp, #112	; 0x70
 800570e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8005712:	2400      	movs	r4, #0
 8005714:	4564      	cmp	r4, ip
 8005716:	dd12      	ble.n	800573e <__kernel_rem_pio2f+0x76>
 8005718:	9b01      	ldr	r3, [sp, #4]
 800571a:	ac1c      	add	r4, sp, #112	; 0x70
 800571c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8005720:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8005724:	f04f 0c00 	mov.w	ip, #0
 8005728:	45d4      	cmp	ip, sl
 800572a:	dc27      	bgt.n	800577c <__kernel_rem_pio2f+0xb4>
 800572c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8005730:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80059d4 <__kernel_rem_pio2f+0x30c>
 8005734:	4627      	mov	r7, r4
 8005736:	2600      	movs	r6, #0
 8005738:	e016      	b.n	8005768 <__kernel_rem_pio2f+0xa0>
 800573a:	2000      	movs	r0, #0
 800573c:	e7dc      	b.n	80056f8 <__kernel_rem_pio2f+0x30>
 800573e:	42e7      	cmn	r7, r4
 8005740:	bf5d      	ittte	pl
 8005742:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8005746:	ee07 3a90 	vmovpl	s15, r3
 800574a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800574e:	eef0 7a47 	vmovmi.f32	s15, s14
 8005752:	ece6 7a01 	vstmia	r6!, {s15}
 8005756:	3401      	adds	r4, #1
 8005758:	e7dc      	b.n	8005714 <__kernel_rem_pio2f+0x4c>
 800575a:	ecf9 6a01 	vldmia	r9!, {s13}
 800575e:	ed97 7a00 	vldr	s14, [r7]
 8005762:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005766:	3601      	adds	r6, #1
 8005768:	428e      	cmp	r6, r1
 800576a:	f1a7 0704 	sub.w	r7, r7, #4
 800576e:	ddf4      	ble.n	800575a <__kernel_rem_pio2f+0x92>
 8005770:	eceb 7a01 	vstmia	fp!, {s15}
 8005774:	f10c 0c01 	add.w	ip, ip, #1
 8005778:	3404      	adds	r4, #4
 800577a:	e7d5      	b.n	8005728 <__kernel_rem_pio2f+0x60>
 800577c:	ab08      	add	r3, sp, #32
 800577e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8005782:	eddf 8a93 	vldr	s17, [pc, #588]	; 80059d0 <__kernel_rem_pio2f+0x308>
 8005786:	ed9f 9a91 	vldr	s18, [pc, #580]	; 80059cc <__kernel_rem_pio2f+0x304>
 800578a:	9304      	str	r3, [sp, #16]
 800578c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8005790:	4656      	mov	r6, sl
 8005792:	00b3      	lsls	r3, r6, #2
 8005794:	9305      	str	r3, [sp, #20]
 8005796:	ab58      	add	r3, sp, #352	; 0x160
 8005798:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800579c:	ac08      	add	r4, sp, #32
 800579e:	ab44      	add	r3, sp, #272	; 0x110
 80057a0:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80057a4:	46a4      	mov	ip, r4
 80057a6:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80057aa:	4637      	mov	r7, r6
 80057ac:	2f00      	cmp	r7, #0
 80057ae:	f1a0 0004 	sub.w	r0, r0, #4
 80057b2:	dc4f      	bgt.n	8005854 <__kernel_rem_pio2f+0x18c>
 80057b4:	4628      	mov	r0, r5
 80057b6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80057ba:	f000 fa8d 	bl	8005cd8 <scalbnf>
 80057be:	eeb0 8a40 	vmov.f32	s16, s0
 80057c2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80057c6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80057ca:	f000 fa43 	bl	8005c54 <floorf>
 80057ce:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80057d2:	eea0 8a67 	vfms.f32	s16, s0, s15
 80057d6:	2d00      	cmp	r5, #0
 80057d8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80057dc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80057e0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80057e4:	ee17 9a90 	vmov	r9, s15
 80057e8:	ee38 8a40 	vsub.f32	s16, s16, s0
 80057ec:	dd44      	ble.n	8005878 <__kernel_rem_pio2f+0x1b0>
 80057ee:	f106 3cff 	add.w	ip, r6, #4294967295
 80057f2:	ab08      	add	r3, sp, #32
 80057f4:	f1c5 0e08 	rsb	lr, r5, #8
 80057f8:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80057fc:	fa47 f00e 	asr.w	r0, r7, lr
 8005800:	4481      	add	r9, r0
 8005802:	fa00 f00e 	lsl.w	r0, r0, lr
 8005806:	1a3f      	subs	r7, r7, r0
 8005808:	f1c5 0007 	rsb	r0, r5, #7
 800580c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8005810:	4107      	asrs	r7, r0
 8005812:	2f00      	cmp	r7, #0
 8005814:	dd3f      	ble.n	8005896 <__kernel_rem_pio2f+0x1ce>
 8005816:	f04f 0e00 	mov.w	lr, #0
 800581a:	f109 0901 	add.w	r9, r9, #1
 800581e:	4673      	mov	r3, lr
 8005820:	4576      	cmp	r6, lr
 8005822:	dc6b      	bgt.n	80058fc <__kernel_rem_pio2f+0x234>
 8005824:	2d00      	cmp	r5, #0
 8005826:	dd04      	ble.n	8005832 <__kernel_rem_pio2f+0x16a>
 8005828:	2d01      	cmp	r5, #1
 800582a:	d078      	beq.n	800591e <__kernel_rem_pio2f+0x256>
 800582c:	2d02      	cmp	r5, #2
 800582e:	f000 8081 	beq.w	8005934 <__kernel_rem_pio2f+0x26c>
 8005832:	2f02      	cmp	r7, #2
 8005834:	d12f      	bne.n	8005896 <__kernel_rem_pio2f+0x1ce>
 8005836:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800583a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800583e:	b353      	cbz	r3, 8005896 <__kernel_rem_pio2f+0x1ce>
 8005840:	4628      	mov	r0, r5
 8005842:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8005846:	f000 fa47 	bl	8005cd8 <scalbnf>
 800584a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800584e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8005852:	e020      	b.n	8005896 <__kernel_rem_pio2f+0x1ce>
 8005854:	ee60 7a28 	vmul.f32	s15, s0, s17
 8005858:	3f01      	subs	r7, #1
 800585a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800585e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005862:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8005866:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800586a:	ecac 0a01 	vstmia	ip!, {s0}
 800586e:	ed90 0a00 	vldr	s0, [r0]
 8005872:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005876:	e799      	b.n	80057ac <__kernel_rem_pio2f+0xe4>
 8005878:	d105      	bne.n	8005886 <__kernel_rem_pio2f+0x1be>
 800587a:	1e70      	subs	r0, r6, #1
 800587c:	ab08      	add	r3, sp, #32
 800587e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8005882:	11ff      	asrs	r7, r7, #7
 8005884:	e7c5      	b.n	8005812 <__kernel_rem_pio2f+0x14a>
 8005886:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800588a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800588e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005892:	da31      	bge.n	80058f8 <__kernel_rem_pio2f+0x230>
 8005894:	2700      	movs	r7, #0
 8005896:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800589a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800589e:	f040 809b 	bne.w	80059d8 <__kernel_rem_pio2f+0x310>
 80058a2:	1e74      	subs	r4, r6, #1
 80058a4:	46a4      	mov	ip, r4
 80058a6:	2000      	movs	r0, #0
 80058a8:	45d4      	cmp	ip, sl
 80058aa:	da4a      	bge.n	8005942 <__kernel_rem_pio2f+0x27a>
 80058ac:	2800      	cmp	r0, #0
 80058ae:	d07a      	beq.n	80059a6 <__kernel_rem_pio2f+0x2de>
 80058b0:	ab08      	add	r3, sp, #32
 80058b2:	3d08      	subs	r5, #8
 80058b4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f000 8081 	beq.w	80059c0 <__kernel_rem_pio2f+0x2f8>
 80058be:	4628      	mov	r0, r5
 80058c0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80058c4:	00a5      	lsls	r5, r4, #2
 80058c6:	f000 fa07 	bl	8005cd8 <scalbnf>
 80058ca:	aa44      	add	r2, sp, #272	; 0x110
 80058cc:	1d2b      	adds	r3, r5, #4
 80058ce:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80059d0 <__kernel_rem_pio2f+0x308>
 80058d2:	18d1      	adds	r1, r2, r3
 80058d4:	4622      	mov	r2, r4
 80058d6:	2a00      	cmp	r2, #0
 80058d8:	f280 80ae 	bge.w	8005a38 <__kernel_rem_pio2f+0x370>
 80058dc:	4622      	mov	r2, r4
 80058de:	2a00      	cmp	r2, #0
 80058e0:	f2c0 80cc 	blt.w	8005a7c <__kernel_rem_pio2f+0x3b4>
 80058e4:	a944      	add	r1, sp, #272	; 0x110
 80058e6:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 80058ea:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 80059c8 <__kernel_rem_pio2f+0x300>
 80058ee:	eddf 7a39 	vldr	s15, [pc, #228]	; 80059d4 <__kernel_rem_pio2f+0x30c>
 80058f2:	2000      	movs	r0, #0
 80058f4:	1aa1      	subs	r1, r4, r2
 80058f6:	e0b6      	b.n	8005a66 <__kernel_rem_pio2f+0x39e>
 80058f8:	2702      	movs	r7, #2
 80058fa:	e78c      	b.n	8005816 <__kernel_rem_pio2f+0x14e>
 80058fc:	6820      	ldr	r0, [r4, #0]
 80058fe:	b94b      	cbnz	r3, 8005914 <__kernel_rem_pio2f+0x24c>
 8005900:	b118      	cbz	r0, 800590a <__kernel_rem_pio2f+0x242>
 8005902:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8005906:	6020      	str	r0, [r4, #0]
 8005908:	2001      	movs	r0, #1
 800590a:	f10e 0e01 	add.w	lr, lr, #1
 800590e:	3404      	adds	r4, #4
 8005910:	4603      	mov	r3, r0
 8005912:	e785      	b.n	8005820 <__kernel_rem_pio2f+0x158>
 8005914:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8005918:	6020      	str	r0, [r4, #0]
 800591a:	4618      	mov	r0, r3
 800591c:	e7f5      	b.n	800590a <__kernel_rem_pio2f+0x242>
 800591e:	1e74      	subs	r4, r6, #1
 8005920:	a808      	add	r0, sp, #32
 8005922:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8005926:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800592a:	f10d 0c20 	add.w	ip, sp, #32
 800592e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8005932:	e77e      	b.n	8005832 <__kernel_rem_pio2f+0x16a>
 8005934:	1e74      	subs	r4, r6, #1
 8005936:	a808      	add	r0, sp, #32
 8005938:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800593c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8005940:	e7f3      	b.n	800592a <__kernel_rem_pio2f+0x262>
 8005942:	ab08      	add	r3, sp, #32
 8005944:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8005948:	f10c 3cff 	add.w	ip, ip, #4294967295
 800594c:	4318      	orrs	r0, r3
 800594e:	e7ab      	b.n	80058a8 <__kernel_rem_pio2f+0x1e0>
 8005950:	f10c 0c01 	add.w	ip, ip, #1
 8005954:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8005958:	2c00      	cmp	r4, #0
 800595a:	d0f9      	beq.n	8005950 <__kernel_rem_pio2f+0x288>
 800595c:	9b05      	ldr	r3, [sp, #20]
 800595e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8005962:	eb0d 0003 	add.w	r0, sp, r3
 8005966:	9b01      	ldr	r3, [sp, #4]
 8005968:	18f4      	adds	r4, r6, r3
 800596a:	ab1c      	add	r3, sp, #112	; 0x70
 800596c:	1c77      	adds	r7, r6, #1
 800596e:	384c      	subs	r0, #76	; 0x4c
 8005970:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005974:	4466      	add	r6, ip
 8005976:	42be      	cmp	r6, r7
 8005978:	f6ff af0b 	blt.w	8005792 <__kernel_rem_pio2f+0xca>
 800597c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8005980:	f8dd e008 	ldr.w	lr, [sp, #8]
 8005984:	ee07 3a90 	vmov	s15, r3
 8005988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800598c:	f04f 0c00 	mov.w	ip, #0
 8005990:	ece4 7a01 	vstmia	r4!, {s15}
 8005994:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80059d4 <__kernel_rem_pio2f+0x30c>
 8005998:	46a1      	mov	r9, r4
 800599a:	458c      	cmp	ip, r1
 800599c:	dd07      	ble.n	80059ae <__kernel_rem_pio2f+0x2e6>
 800599e:	ece0 7a01 	vstmia	r0!, {s15}
 80059a2:	3701      	adds	r7, #1
 80059a4:	e7e7      	b.n	8005976 <__kernel_rem_pio2f+0x2ae>
 80059a6:	9804      	ldr	r0, [sp, #16]
 80059a8:	f04f 0c01 	mov.w	ip, #1
 80059ac:	e7d2      	b.n	8005954 <__kernel_rem_pio2f+0x28c>
 80059ae:	ecfe 6a01 	vldmia	lr!, {s13}
 80059b2:	ed39 7a01 	vldmdb	r9!, {s14}
 80059b6:	f10c 0c01 	add.w	ip, ip, #1
 80059ba:	eee6 7a87 	vfma.f32	s15, s13, s14
 80059be:	e7ec      	b.n	800599a <__kernel_rem_pio2f+0x2d2>
 80059c0:	3c01      	subs	r4, #1
 80059c2:	e775      	b.n	80058b0 <__kernel_rem_pio2f+0x1e8>
 80059c4:	08006360 	.word	0x08006360
 80059c8:	08006334 	.word	0x08006334
 80059cc:	43800000 	.word	0x43800000
 80059d0:	3b800000 	.word	0x3b800000
 80059d4:	00000000 	.word	0x00000000
 80059d8:	9b03      	ldr	r3, [sp, #12]
 80059da:	eeb0 0a48 	vmov.f32	s0, s16
 80059de:	1a98      	subs	r0, r3, r2
 80059e0:	f000 f97a 	bl	8005cd8 <scalbnf>
 80059e4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80059cc <__kernel_rem_pio2f+0x304>
 80059e8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80059ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059f0:	db19      	blt.n	8005a26 <__kernel_rem_pio2f+0x35e>
 80059f2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80059d0 <__kernel_rem_pio2f+0x308>
 80059f6:	ee60 7a27 	vmul.f32	s15, s0, s15
 80059fa:	aa08      	add	r2, sp, #32
 80059fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a00:	1c74      	adds	r4, r6, #1
 8005a02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a06:	3508      	adds	r5, #8
 8005a08:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8005a0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a10:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005a14:	ee10 3a10 	vmov	r3, s0
 8005a18:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8005a1c:	ee17 3a90 	vmov	r3, s15
 8005a20:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8005a24:	e74b      	b.n	80058be <__kernel_rem_pio2f+0x1f6>
 8005a26:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005a2a:	aa08      	add	r2, sp, #32
 8005a2c:	ee10 3a10 	vmov	r3, s0
 8005a30:	4634      	mov	r4, r6
 8005a32:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8005a36:	e742      	b.n	80058be <__kernel_rem_pio2f+0x1f6>
 8005a38:	a808      	add	r0, sp, #32
 8005a3a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8005a3e:	9001      	str	r0, [sp, #4]
 8005a40:	ee07 0a90 	vmov	s15, r0
 8005a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a48:	3a01      	subs	r2, #1
 8005a4a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005a4e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005a52:	ed61 7a01 	vstmdb	r1!, {s15}
 8005a56:	e73e      	b.n	80058d6 <__kernel_rem_pio2f+0x20e>
 8005a58:	ecfc 6a01 	vldmia	ip!, {s13}
 8005a5c:	ecb6 7a01 	vldmia	r6!, {s14}
 8005a60:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005a64:	3001      	adds	r0, #1
 8005a66:	4550      	cmp	r0, sl
 8005a68:	dc01      	bgt.n	8005a6e <__kernel_rem_pio2f+0x3a6>
 8005a6a:	4288      	cmp	r0, r1
 8005a6c:	ddf4      	ble.n	8005a58 <__kernel_rem_pio2f+0x390>
 8005a6e:	a858      	add	r0, sp, #352	; 0x160
 8005a70:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005a74:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8005a78:	3a01      	subs	r2, #1
 8005a7a:	e730      	b.n	80058de <__kernel_rem_pio2f+0x216>
 8005a7c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8005a7e:	2a02      	cmp	r2, #2
 8005a80:	dc09      	bgt.n	8005a96 <__kernel_rem_pio2f+0x3ce>
 8005a82:	2a00      	cmp	r2, #0
 8005a84:	dc2a      	bgt.n	8005adc <__kernel_rem_pio2f+0x414>
 8005a86:	d043      	beq.n	8005b10 <__kernel_rem_pio2f+0x448>
 8005a88:	f009 0007 	and.w	r0, r9, #7
 8005a8c:	b059      	add	sp, #356	; 0x164
 8005a8e:	ecbd 8b04 	vpop	{d8-d9}
 8005a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a96:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8005a98:	2b03      	cmp	r3, #3
 8005a9a:	d1f5      	bne.n	8005a88 <__kernel_rem_pio2f+0x3c0>
 8005a9c:	ab30      	add	r3, sp, #192	; 0xc0
 8005a9e:	442b      	add	r3, r5
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	4620      	mov	r0, r4
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	f1a1 0104 	sub.w	r1, r1, #4
 8005aac:	dc51      	bgt.n	8005b52 <__kernel_rem_pio2f+0x48a>
 8005aae:	4621      	mov	r1, r4
 8005ab0:	2901      	cmp	r1, #1
 8005ab2:	f1a2 0204 	sub.w	r2, r2, #4
 8005ab6:	dc5c      	bgt.n	8005b72 <__kernel_rem_pio2f+0x4aa>
 8005ab8:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80059d4 <__kernel_rem_pio2f+0x30c>
 8005abc:	3304      	adds	r3, #4
 8005abe:	2c01      	cmp	r4, #1
 8005ac0:	dc67      	bgt.n	8005b92 <__kernel_rem_pio2f+0x4ca>
 8005ac2:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8005ac6:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8005aca:	2f00      	cmp	r7, #0
 8005acc:	d167      	bne.n	8005b9e <__kernel_rem_pio2f+0x4d6>
 8005ace:	edc8 6a00 	vstr	s13, [r8]
 8005ad2:	ed88 7a01 	vstr	s14, [r8, #4]
 8005ad6:	edc8 7a02 	vstr	s15, [r8, #8]
 8005ada:	e7d5      	b.n	8005a88 <__kernel_rem_pio2f+0x3c0>
 8005adc:	aa30      	add	r2, sp, #192	; 0xc0
 8005ade:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 80059d4 <__kernel_rem_pio2f+0x30c>
 8005ae2:	4413      	add	r3, r2
 8005ae4:	4622      	mov	r2, r4
 8005ae6:	2a00      	cmp	r2, #0
 8005ae8:	da24      	bge.n	8005b34 <__kernel_rem_pio2f+0x46c>
 8005aea:	b34f      	cbz	r7, 8005b40 <__kernel_rem_pio2f+0x478>
 8005aec:	eef1 7a47 	vneg.f32	s15, s14
 8005af0:	edc8 7a00 	vstr	s15, [r8]
 8005af4:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8005af8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005afc:	aa31      	add	r2, sp, #196	; 0xc4
 8005afe:	2301      	movs	r3, #1
 8005b00:	429c      	cmp	r4, r3
 8005b02:	da20      	bge.n	8005b46 <__kernel_rem_pio2f+0x47e>
 8005b04:	b10f      	cbz	r7, 8005b0a <__kernel_rem_pio2f+0x442>
 8005b06:	eef1 7a67 	vneg.f32	s15, s15
 8005b0a:	edc8 7a01 	vstr	s15, [r8, #4]
 8005b0e:	e7bb      	b.n	8005a88 <__kernel_rem_pio2f+0x3c0>
 8005b10:	aa30      	add	r2, sp, #192	; 0xc0
 8005b12:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 80059d4 <__kernel_rem_pio2f+0x30c>
 8005b16:	4413      	add	r3, r2
 8005b18:	2c00      	cmp	r4, #0
 8005b1a:	da05      	bge.n	8005b28 <__kernel_rem_pio2f+0x460>
 8005b1c:	b10f      	cbz	r7, 8005b22 <__kernel_rem_pio2f+0x45a>
 8005b1e:	eef1 7a67 	vneg.f32	s15, s15
 8005b22:	edc8 7a00 	vstr	s15, [r8]
 8005b26:	e7af      	b.n	8005a88 <__kernel_rem_pio2f+0x3c0>
 8005b28:	ed33 7a01 	vldmdb	r3!, {s14}
 8005b2c:	3c01      	subs	r4, #1
 8005b2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b32:	e7f1      	b.n	8005b18 <__kernel_rem_pio2f+0x450>
 8005b34:	ed73 7a01 	vldmdb	r3!, {s15}
 8005b38:	3a01      	subs	r2, #1
 8005b3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b3e:	e7d2      	b.n	8005ae6 <__kernel_rem_pio2f+0x41e>
 8005b40:	eef0 7a47 	vmov.f32	s15, s14
 8005b44:	e7d4      	b.n	8005af0 <__kernel_rem_pio2f+0x428>
 8005b46:	ecb2 7a01 	vldmia	r2!, {s14}
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b50:	e7d6      	b.n	8005b00 <__kernel_rem_pio2f+0x438>
 8005b52:	edd1 7a00 	vldr	s15, [r1]
 8005b56:	edd1 6a01 	vldr	s13, [r1, #4]
 8005b5a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005b5e:	3801      	subs	r0, #1
 8005b60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b64:	ed81 7a00 	vstr	s14, [r1]
 8005b68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b6c:	edc1 7a01 	vstr	s15, [r1, #4]
 8005b70:	e799      	b.n	8005aa6 <__kernel_rem_pio2f+0x3de>
 8005b72:	edd2 7a00 	vldr	s15, [r2]
 8005b76:	edd2 6a01 	vldr	s13, [r2, #4]
 8005b7a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005b7e:	3901      	subs	r1, #1
 8005b80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b84:	ed82 7a00 	vstr	s14, [r2]
 8005b88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b8c:	edc2 7a01 	vstr	s15, [r2, #4]
 8005b90:	e78e      	b.n	8005ab0 <__kernel_rem_pio2f+0x3e8>
 8005b92:	ed33 7a01 	vldmdb	r3!, {s14}
 8005b96:	3c01      	subs	r4, #1
 8005b98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b9c:	e78f      	b.n	8005abe <__kernel_rem_pio2f+0x3f6>
 8005b9e:	eef1 6a66 	vneg.f32	s13, s13
 8005ba2:	eeb1 7a47 	vneg.f32	s14, s14
 8005ba6:	edc8 6a00 	vstr	s13, [r8]
 8005baa:	ed88 7a01 	vstr	s14, [r8, #4]
 8005bae:	eef1 7a67 	vneg.f32	s15, s15
 8005bb2:	e790      	b.n	8005ad6 <__kernel_rem_pio2f+0x40e>

08005bb4 <__kernel_sinf>:
 8005bb4:	ee10 3a10 	vmov	r3, s0
 8005bb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bbc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8005bc0:	da04      	bge.n	8005bcc <__kernel_sinf+0x18>
 8005bc2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005bc6:	ee17 3a90 	vmov	r3, s15
 8005bca:	b35b      	cbz	r3, 8005c24 <__kernel_sinf+0x70>
 8005bcc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005bd0:	eddf 7a15 	vldr	s15, [pc, #84]	; 8005c28 <__kernel_sinf+0x74>
 8005bd4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8005c2c <__kernel_sinf+0x78>
 8005bd8:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005bdc:	eddf 7a14 	vldr	s15, [pc, #80]	; 8005c30 <__kernel_sinf+0x7c>
 8005be0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005be4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8005c34 <__kernel_sinf+0x80>
 8005be8:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005bec:	eddf 7a12 	vldr	s15, [pc, #72]	; 8005c38 <__kernel_sinf+0x84>
 8005bf0:	ee60 6a07 	vmul.f32	s13, s0, s14
 8005bf4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005bf8:	b930      	cbnz	r0, 8005c08 <__kernel_sinf+0x54>
 8005bfa:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8005c3c <__kernel_sinf+0x88>
 8005bfe:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005c02:	eea6 0a26 	vfma.f32	s0, s12, s13
 8005c06:	4770      	bx	lr
 8005c08:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005c0c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005c10:	eee0 7a86 	vfma.f32	s15, s1, s12
 8005c14:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8005c18:	eddf 7a09 	vldr	s15, [pc, #36]	; 8005c40 <__kernel_sinf+0x8c>
 8005c1c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8005c20:	ee30 0a60 	vsub.f32	s0, s0, s1
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	2f2ec9d3 	.word	0x2f2ec9d3
 8005c2c:	b2d72f34 	.word	0xb2d72f34
 8005c30:	3638ef1b 	.word	0x3638ef1b
 8005c34:	b9500d01 	.word	0xb9500d01
 8005c38:	3c088889 	.word	0x3c088889
 8005c3c:	be2aaaab 	.word	0xbe2aaaab
 8005c40:	3e2aaaab 	.word	0x3e2aaaab

08005c44 <fabsf>:
 8005c44:	ee10 3a10 	vmov	r3, s0
 8005c48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c4c:	ee00 3a10 	vmov	s0, r3
 8005c50:	4770      	bx	lr
	...

08005c54 <floorf>:
 8005c54:	ee10 3a10 	vmov	r3, s0
 8005c58:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005c5c:	3a7f      	subs	r2, #127	; 0x7f
 8005c5e:	2a16      	cmp	r2, #22
 8005c60:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005c64:	dc2a      	bgt.n	8005cbc <floorf+0x68>
 8005c66:	2a00      	cmp	r2, #0
 8005c68:	da11      	bge.n	8005c8e <floorf+0x3a>
 8005c6a:	eddf 7a18 	vldr	s15, [pc, #96]	; 8005ccc <floorf+0x78>
 8005c6e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005c72:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c7a:	dd05      	ble.n	8005c88 <floorf+0x34>
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	da23      	bge.n	8005cc8 <floorf+0x74>
 8005c80:	4a13      	ldr	r2, [pc, #76]	; (8005cd0 <floorf+0x7c>)
 8005c82:	2900      	cmp	r1, #0
 8005c84:	bf18      	it	ne
 8005c86:	4613      	movne	r3, r2
 8005c88:	ee00 3a10 	vmov	s0, r3
 8005c8c:	4770      	bx	lr
 8005c8e:	4911      	ldr	r1, [pc, #68]	; (8005cd4 <floorf+0x80>)
 8005c90:	4111      	asrs	r1, r2
 8005c92:	420b      	tst	r3, r1
 8005c94:	d0fa      	beq.n	8005c8c <floorf+0x38>
 8005c96:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8005ccc <floorf+0x78>
 8005c9a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005c9e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ca6:	ddef      	ble.n	8005c88 <floorf+0x34>
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	bfbe      	ittt	lt
 8005cac:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8005cb0:	fa40 f202 	asrlt.w	r2, r0, r2
 8005cb4:	189b      	addlt	r3, r3, r2
 8005cb6:	ea23 0301 	bic.w	r3, r3, r1
 8005cba:	e7e5      	b.n	8005c88 <floorf+0x34>
 8005cbc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8005cc0:	d3e4      	bcc.n	8005c8c <floorf+0x38>
 8005cc2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005cc6:	4770      	bx	lr
 8005cc8:	2300      	movs	r3, #0
 8005cca:	e7dd      	b.n	8005c88 <floorf+0x34>
 8005ccc:	7149f2ca 	.word	0x7149f2ca
 8005cd0:	bf800000 	.word	0xbf800000
 8005cd4:	007fffff 	.word	0x007fffff

08005cd8 <scalbnf>:
 8005cd8:	ee10 3a10 	vmov	r3, s0
 8005cdc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8005ce0:	d025      	beq.n	8005d2e <scalbnf+0x56>
 8005ce2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005ce6:	d302      	bcc.n	8005cee <scalbnf+0x16>
 8005ce8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005cec:	4770      	bx	lr
 8005cee:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8005cf2:	d122      	bne.n	8005d3a <scalbnf+0x62>
 8005cf4:	4b2a      	ldr	r3, [pc, #168]	; (8005da0 <scalbnf+0xc8>)
 8005cf6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8005da4 <scalbnf+0xcc>
 8005cfa:	4298      	cmp	r0, r3
 8005cfc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005d00:	db16      	blt.n	8005d30 <scalbnf+0x58>
 8005d02:	ee10 3a10 	vmov	r3, s0
 8005d06:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005d0a:	3a19      	subs	r2, #25
 8005d0c:	4402      	add	r2, r0
 8005d0e:	2afe      	cmp	r2, #254	; 0xfe
 8005d10:	dd15      	ble.n	8005d3e <scalbnf+0x66>
 8005d12:	ee10 3a10 	vmov	r3, s0
 8005d16:	eddf 7a24 	vldr	s15, [pc, #144]	; 8005da8 <scalbnf+0xd0>
 8005d1a:	eddf 6a24 	vldr	s13, [pc, #144]	; 8005dac <scalbnf+0xd4>
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	eeb0 7a67 	vmov.f32	s14, s15
 8005d24:	bfb8      	it	lt
 8005d26:	eef0 7a66 	vmovlt.f32	s15, s13
 8005d2a:	ee27 0a27 	vmul.f32	s0, s14, s15
 8005d2e:	4770      	bx	lr
 8005d30:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8005db0 <scalbnf+0xd8>
 8005d34:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005d38:	4770      	bx	lr
 8005d3a:	0dd2      	lsrs	r2, r2, #23
 8005d3c:	e7e6      	b.n	8005d0c <scalbnf+0x34>
 8005d3e:	2a00      	cmp	r2, #0
 8005d40:	dd06      	ble.n	8005d50 <scalbnf+0x78>
 8005d42:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005d46:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8005d4a:	ee00 3a10 	vmov	s0, r3
 8005d4e:	4770      	bx	lr
 8005d50:	f112 0f16 	cmn.w	r2, #22
 8005d54:	da1a      	bge.n	8005d8c <scalbnf+0xb4>
 8005d56:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005d5a:	4298      	cmp	r0, r3
 8005d5c:	ee10 3a10 	vmov	r3, s0
 8005d60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d64:	dd0a      	ble.n	8005d7c <scalbnf+0xa4>
 8005d66:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005da8 <scalbnf+0xd0>
 8005d6a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005dac <scalbnf+0xd4>
 8005d6e:	eef0 7a40 	vmov.f32	s15, s0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	bf18      	it	ne
 8005d76:	eeb0 0a47 	vmovne.f32	s0, s14
 8005d7a:	e7db      	b.n	8005d34 <scalbnf+0x5c>
 8005d7c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8005db0 <scalbnf+0xd8>
 8005d80:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8005db4 <scalbnf+0xdc>
 8005d84:	eef0 7a40 	vmov.f32	s15, s0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	e7f3      	b.n	8005d74 <scalbnf+0x9c>
 8005d8c:	3219      	adds	r2, #25
 8005d8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005d92:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8005d96:	eddf 7a08 	vldr	s15, [pc, #32]	; 8005db8 <scalbnf+0xe0>
 8005d9a:	ee07 3a10 	vmov	s14, r3
 8005d9e:	e7c4      	b.n	8005d2a <scalbnf+0x52>
 8005da0:	ffff3cb0 	.word	0xffff3cb0
 8005da4:	4c000000 	.word	0x4c000000
 8005da8:	7149f2ca 	.word	0x7149f2ca
 8005dac:	f149f2ca 	.word	0xf149f2ca
 8005db0:	0da24260 	.word	0x0da24260
 8005db4:	8da24260 	.word	0x8da24260
 8005db8:	33000000 	.word	0x33000000

08005dbc <_init>:
 8005dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dbe:	bf00      	nop
 8005dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dc2:	bc08      	pop	{r3}
 8005dc4:	469e      	mov	lr, r3
 8005dc6:	4770      	bx	lr

08005dc8 <_fini>:
 8005dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dca:	bf00      	nop
 8005dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dce:	bc08      	pop	{r3}
 8005dd0:	469e      	mov	lr, r3
 8005dd2:	4770      	bx	lr
