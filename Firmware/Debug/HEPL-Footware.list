
HEPL-Footware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  080060b0  080060b0  000160b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006440  08006440  00021390  2**0
                  CONTENTS
  4 .ARM          00000000  08006440  08006440  00021390  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006440  08006440  00021390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006440  08006440  00016440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006444  08006444  00016444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001390  20000000  08006448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f8  20001390  080077d8  00021390  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a88  080077d8  00021a88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021390  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0a4  00000000  00000000  000213c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024ee  00000000  00000000  0002e464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000642a  00000000  00000000  00030952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009f8  00000000  00000000  00036d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000928  00000000  00000000  00037778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000248ad  00000000  00000000  000380a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011622  00000000  00000000  0005c94d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf768  00000000  00000000  0006df6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013d6d7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000257c  00000000  00000000  0013d728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001390 	.word	0x20001390
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006094 	.word	0x08006094

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001394 	.word	0x20001394
 80001cc:	08006094 	.word	0x08006094

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <IMU_convertAccel>:
	IMU_writeRegister(IMU, buf, 1);

}

float IMU_convertAccel(uint8_t H_byte, uint8_t L_byte) {
	int16_t reading = (int16_t)(H_byte << 8) + L_byte;
 8000c0c:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8000c10:	b209      	sxth	r1, r1

	// (Full-scale val / Max LSB val) * reading (LSB) = Accel (g)
	return XL_SCALE_FACTOR * reading;
 8000c12:	ee07 1a90 	vmov	s15, r1
 8000c16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8000c1a:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8000c24 <IMU_convertAccel+0x18>
 8000c1e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8000c22:	4770      	bx	lr
 8000c24:	39800000 	.word	0x39800000

08000c28 <IMU_convertGyro>:

float IMU_convertGyro(uint8_t H_byte, uint8_t L_byte) {
	int16_t reading = (int16_t)(H_byte << 8) + L_byte;
 8000c28:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8000c2c:	b209      	sxth	r1, r1

	// (Full-scale val / Max LSB val) * reading (LSB) = Accel (g)
	return GYRO_SCALE_FACTOR * reading;
 8000c2e:	ee07 1a90 	vmov	s15, r1
 8000c32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8000c36:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8000c40 <IMU_convertGyro+0x18>
 8000c3a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8000c3e:	4770      	bx	lr
 8000c40:	3cfa0000 	.word	0x3cfa0000

08000c44 <IMU_chipSelect>:
	__enable_irq();

	return status;
}

void IMU_chipSelect(void) {
 8000c44:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,0); //TODO
 8000c46:	2200      	movs	r2, #0
 8000c48:	2102      	movs	r1, #2
 8000c4a:	4802      	ldr	r0, [pc, #8]	; (8000c54 <IMU_chipSelect+0x10>)
 8000c4c:	f001 fc54 	bl	80024f8 <HAL_GPIO_WritePin>
}
 8000c50:	bd08      	pop	{r3, pc}
 8000c52:	bf00      	nop
 8000c54:	48000400 	.word	0x48000400

08000c58 <IMU_chipRelease>:

void IMU_chipRelease(void) {
 8000c58:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,1); //TODO
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	2102      	movs	r1, #2
 8000c5e:	4802      	ldr	r0, [pc, #8]	; (8000c68 <IMU_chipRelease+0x10>)
 8000c60:	f001 fc4a 	bl	80024f8 <HAL_GPIO_WritePin>
}
 8000c64:	bd08      	pop	{r3, pc}
 8000c66:	bf00      	nop
 8000c68:	48000400 	.word	0x48000400

08000c6c <IMU_readRegister>:
HAL_StatusTypeDef IMU_readRegister(IMU* IMU, uint8_t reg_addr, uint8_t* rx_buf, int num_bytes) {
 8000c6c:	b570      	push	{r4, r5, r6, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	4604      	mov	r4, r0
 8000c72:	4615      	mov	r5, r2
 8000c74:	461e      	mov	r6, r3
	uint8_t reg_buffer[1] = {reg_addr | 0x80};
 8000c76:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8000c7a:	f88d 1004 	strb.w	r1, [sp, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c7e:	b672      	cpsid	i
	IMU_chipSelect();
 8000c80:	f7ff ffe0 	bl	8000c44 <IMU_chipSelect>
	HAL_SPI_Transmit(IMU->hspi, (uint8_t *)reg_buffer, 1, SPI_TIMEOUT);
 8000c84:	2301      	movs	r3, #1
 8000c86:	461a      	mov	r2, r3
 8000c88:	a901      	add	r1, sp, #4
 8000c8a:	6820      	ldr	r0, [r4, #0]
 8000c8c:	f002 faeb 	bl	8003266 <HAL_SPI_Transmit>
	status = HAL_SPI_Receive(IMU->hspi, (uint8_t *)rx_buf, num_bytes, SPI_TIMEOUT);
 8000c90:	2301      	movs	r3, #1
 8000c92:	b2b2      	uxth	r2, r6
 8000c94:	4629      	mov	r1, r5
 8000c96:	6820      	ldr	r0, [r4, #0]
 8000c98:	f002 fd55 	bl	8003746 <HAL_SPI_Receive>
 8000c9c:	4604      	mov	r4, r0
	IMU_chipRelease();
 8000c9e:	f7ff ffdb 	bl	8000c58 <IMU_chipRelease>
  __ASM volatile ("cpsie i" : : : "memory");
 8000ca2:	b662      	cpsie	i
}
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	b002      	add	sp, #8
 8000ca8:	bd70      	pop	{r4, r5, r6, pc}

08000caa <IMU_readSensorData>:
void IMU_readSensorData(IMU* IMU, SensorData* data) {
 8000caa:	b510      	push	{r4, lr}
 8000cac:	b084      	sub	sp, #16
 8000cae:	460c      	mov	r4, r1
	IMU_readRegister(IMU, OUTX_L_G, buf, 12);
 8000cb0:	230c      	movs	r3, #12
 8000cb2:	aa01      	add	r2, sp, #4
 8000cb4:	2122      	movs	r1, #34	; 0x22
 8000cb6:	f7ff ffd9 	bl	8000c6c <IMU_readRegister>
	data->G_X = IMU_convertGyro(buf[1], buf[0]);
 8000cba:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8000cbe:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8000cc2:	f7ff ffb1 	bl	8000c28 <IMU_convertGyro>
 8000cc6:	ed84 0a03 	vstr	s0, [r4, #12]
	data->G_Y = IMU_convertGyro(buf[3], buf[2]);
 8000cca:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8000cce:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000cd2:	f7ff ffa9 	bl	8000c28 <IMU_convertGyro>
 8000cd6:	ed84 0a04 	vstr	s0, [r4, #16]
	data->G_Z = IMU_convertGyro(buf[5], buf[4]);
 8000cda:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8000cde:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8000ce2:	f7ff ffa1 	bl	8000c28 <IMU_convertGyro>
 8000ce6:	ed84 0a05 	vstr	s0, [r4, #20]
	data->XL_X = IMU_convertAccel(buf[7], buf[6]);
 8000cea:	f89d 100a 	ldrb.w	r1, [sp, #10]
 8000cee:	f89d 000b 	ldrb.w	r0, [sp, #11]
 8000cf2:	f7ff ff8b 	bl	8000c0c <IMU_convertAccel>
 8000cf6:	ed84 0a00 	vstr	s0, [r4]
	data->XL_Y = IMU_convertAccel(buf[9], buf[8]);
 8000cfa:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8000cfe:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8000d02:	f7ff ff83 	bl	8000c0c <IMU_convertAccel>
 8000d06:	ed84 0a01 	vstr	s0, [r4, #4]
	data->XL_Z = IMU_convertAccel(buf[11], buf[10]);
 8000d0a:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8000d0e:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8000d12:	f7ff ff7b 	bl	8000c0c <IMU_convertAccel>
 8000d16:	ed84 0a02 	vstr	s0, [r4, #8]
}
 8000d1a:	b004      	add	sp, #16
 8000d1c:	bd10      	pop	{r4, pc}

08000d1e <IMU_writeRegister>:
HAL_StatusTypeDef IMU_writeRegister(IMU* IMU, uint8_t* tx_buf, int num_bytes) {
 8000d1e:	b570      	push	{r4, r5, r6, lr}
 8000d20:	4605      	mov	r5, r0
 8000d22:	460e      	mov	r6, r1
 8000d24:	4614      	mov	r4, r2
  __ASM volatile ("cpsid i" : : : "memory");
 8000d26:	b672      	cpsid	i
	IMU_chipSelect();
 8000d28:	f7ff ff8c 	bl	8000c44 <IMU_chipSelect>
	status = HAL_SPI_Transmit(IMU->hspi, (uint8_t *)tx_buf, num_bytes + 1, SPI_TIMEOUT);
 8000d2c:	1c62      	adds	r2, r4, #1
 8000d2e:	2301      	movs	r3, #1
 8000d30:	b292      	uxth	r2, r2
 8000d32:	4631      	mov	r1, r6
 8000d34:	6828      	ldr	r0, [r5, #0]
 8000d36:	f002 fa96 	bl	8003266 <HAL_SPI_Transmit>
 8000d3a:	4604      	mov	r4, r0
	IMU_chipRelease();
 8000d3c:	f7ff ff8c 	bl	8000c58 <IMU_chipRelease>
  __ASM volatile ("cpsie i" : : : "memory");
 8000d40:	b662      	cpsie	i
}
 8000d42:	4620      	mov	r0, r4
 8000d44:	bd70      	pop	{r4, r5, r6, pc}
	...

08000d48 <IMU_init>:
void IMU_init(SPI_HandleTypeDef* hspi, IMU* IMU) {
 8000d48:	b530      	push	{r4, r5, lr}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	460c      	mov	r4, r1
	IMU->hspi = hspi;
 8000d4e:	6008      	str	r0, [r1, #0]
	IMU->X_offset = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	710b      	strb	r3, [r1, #4]
	IMU->Y_offset = 0;
 8000d54:	714b      	strb	r3, [r1, #5]
	IMU->Z_offset = 0;
 8000d56:	718b      	strb	r3, [r1, #6]
	buf[0] = CTRL3_C;
 8000d58:	2512      	movs	r5, #18
 8000d5a:	f88d 5004 	strb.w	r5, [sp, #4]
	buf[1] = 0x04;
 8000d5e:	2304      	movs	r3, #4
 8000d60:	f88d 3005 	strb.w	r3, [sp, #5]
	IMU_writeRegister(IMU, buf, 1);
 8000d64:	2201      	movs	r2, #1
 8000d66:	eb0d 0103 	add.w	r1, sp, r3
 8000d6a:	4620      	mov	r0, r4
 8000d6c:	f7ff ffd7 	bl	8000d1e <IMU_writeRegister>
	IMU_readRegister(IMU, CTRL3_C, buf, 1);
 8000d70:	2301      	movs	r3, #1
 8000d72:	aa01      	add	r2, sp, #4
 8000d74:	4629      	mov	r1, r5
 8000d76:	4620      	mov	r0, r4
 8000d78:	f7ff ff78 	bl	8000c6c <IMU_readRegister>
	IMU_readRegister(IMU, WHO_AM_I, buf, 1);
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	aa01      	add	r2, sp, #4
 8000d80:	210f      	movs	r1, #15
 8000d82:	4620      	mov	r0, r4
 8000d84:	f7ff ff72 	bl	8000c6c <IMU_readRegister>
	assert(buf[0] == WHO_I_AM_ID); // Crash if not connected properly
 8000d88:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000d8c:	2b6a      	cmp	r3, #106	; 0x6a
 8000d8e:	d12d      	bne.n	8000dec <IMU_init+0xa4>
	buf[0] = CTRL1_XL;
 8000d90:	2310      	movs	r3, #16
 8000d92:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = 0x4C;
 8000d96:	234c      	movs	r3, #76	; 0x4c
 8000d98:	f88d 3005 	strb.w	r3, [sp, #5]
	IMU_writeRegister(IMU, buf, 1);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	a901      	add	r1, sp, #4
 8000da0:	4620      	mov	r0, r4
 8000da2:	f7ff ffbc 	bl	8000d1e <IMU_writeRegister>
	buf[0] = CTRL2_G;
 8000da6:	2311      	movs	r3, #17
 8000da8:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = 0x48;
 8000dac:	2348      	movs	r3, #72	; 0x48
 8000dae:	f88d 3005 	strb.w	r3, [sp, #5]
	IMU_writeRegister(IMU, buf, 1);
 8000db2:	2201      	movs	r2, #1
 8000db4:	a901      	add	r1, sp, #4
 8000db6:	4620      	mov	r0, r4
 8000db8:	f7ff ffb1 	bl	8000d1e <IMU_writeRegister>
	buf[0] = INT2_CTRL;
 8000dbc:	230e      	movs	r3, #14
 8000dbe:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = 0x03;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	f88d 3005 	strb.w	r3, [sp, #5]
	IMU_writeRegister(IMU, buf, 1);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	a901      	add	r1, sp, #4
 8000dcc:	4620      	mov	r0, r4
 8000dce:	f7ff ffa6 	bl	8000d1e <IMU_writeRegister>
	buf[0] = CTRL5_C;
 8000dd2:	2314      	movs	r3, #20
 8000dd4:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = 0x60;
 8000dd8:	2360      	movs	r3, #96	; 0x60
 8000dda:	f88d 3005 	strb.w	r3, [sp, #5]
	IMU_writeRegister(IMU, buf, 1);
 8000dde:	2201      	movs	r2, #1
 8000de0:	a901      	add	r1, sp, #4
 8000de2:	4620      	mov	r0, r4
 8000de4:	f7ff ff9b 	bl	8000d1e <IMU_writeRegister>
}
 8000de8:	b005      	add	sp, #20
 8000dea:	bd30      	pop	{r4, r5, pc}
	assert(buf[0] == WHO_I_AM_ID); // Crash if not connected properly
 8000dec:	4b02      	ldr	r3, [pc, #8]	; (8000df8 <IMU_init+0xb0>)
 8000dee:	4a03      	ldr	r2, [pc, #12]	; (8000dfc <IMU_init+0xb4>)
 8000df0:	211b      	movs	r1, #27
 8000df2:	4803      	ldr	r0, [pc, #12]	; (8000e00 <IMU_init+0xb8>)
 8000df4:	f003 f856 	bl	8003ea4 <__assert_func>
 8000df8:	080060b0 	.word	0x080060b0
 8000dfc:	080060dc 	.word	0x080060dc
 8000e00:	080060c8 	.word	0x080060c8

08000e04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e08:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0a:	2400      	movs	r4, #0
 8000e0c:	9403      	str	r4, [sp, #12]
 8000e0e:	9404      	str	r4, [sp, #16]
 8000e10:	9405      	str	r4, [sp, #20]
 8000e12:	9406      	str	r4, [sp, #24]
 8000e14:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e16:	4b39      	ldr	r3, [pc, #228]	; (8000efc <MX_GPIO_Init+0xf8>)
 8000e18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e1e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e22:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000e26:	9200      	str	r2, [sp, #0]
 8000e28:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e2c:	f042 0201 	orr.w	r2, r2, #1
 8000e30:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e34:	f002 0201 	and.w	r2, r2, #1
 8000e38:	9201      	str	r2, [sp, #4]
 8000e3a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e3e:	f042 0202 	orr.w	r2, r2, #2
 8000e42:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	9302      	str	r3, [sp, #8]
 8000e4c:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU1_CS_Pin|IMU2_CS_Pin|IMU3_CS_Pin|FLASH_CS_Pin, GPIO_PIN_RESET);
 8000e4e:	4d2c      	ldr	r5, [pc, #176]	; (8000f00 <MX_GPIO_Init+0xfc>)
 8000e50:	4622      	mov	r2, r4
 8000e52:	f242 0107 	movw	r1, #8199	; 0x2007
 8000e56:	4628      	mov	r0, r5
 8000e58:	f001 fb4e 	bl	80024f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XBEE_CS_GPIO_Port, XBEE_CS_Pin, GPIO_PIN_RESET);
 8000e5c:	4622      	mov	r2, r4
 8000e5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e66:	f001 fb47 	bl	80024f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MAG_INT_Pin MAG_INT_TRG_Pin IMU3_INT1_Pin IMU3_INT2_Pin
                           IMU2_INT1_Pin IMU2_INT2_Pin IMU1_INT1_Pin IMU1_INT2_Pin */
  GPIO_InitStruct.Pin = MAG_INT_Pin|MAG_INT_TRG_Pin|IMU3_INT1_Pin|IMU3_INT2_Pin
 8000e6a:	f641 631d 	movw	r3, #7709	; 0x1e1d
 8000e6e:	9303      	str	r3, [sp, #12]
                          |IMU2_INT1_Pin|IMU2_INT2_Pin|IMU1_INT1_Pin|IMU1_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e70:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e74:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e78:	a903      	add	r1, sp, #12
 8000e7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e7e:	f001 fa57 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU1_CS_Pin IMU2_CS_Pin IMU3_CS_Pin FLASH_CS_Pin */
  GPIO_InitStruct.Pin = IMU1_CS_Pin|IMU2_CS_Pin|IMU3_CS_Pin|FLASH_CS_Pin;
 8000e82:	f242 0307 	movw	r3, #8199	; 0x2007
 8000e86:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e88:	f04f 0801 	mov.w	r8, #1
 8000e8c:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e94:	a903      	add	r1, sp, #12
 8000e96:	4628      	mov	r0, r5
 8000e98:	f001 fa4a 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8000e9c:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8000ea0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2702      	movs	r7, #2
 8000ea4:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea8:	2603      	movs	r6, #3
 8000eaa:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eac:	2305      	movs	r3, #5
 8000eae:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb0:	a903      	add	r1, sp, #12
 8000eb2:	4628      	mov	r0, r5
 8000eb4:	f001 fa3c 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pin : XBEE_CS_Pin */
  GPIO_InitStruct.Pin = XBEE_CS_Pin;
 8000eb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ebc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebe:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(XBEE_CS_GPIO_Port, &GPIO_InitStruct);
 8000ec6:	a903      	add	r1, sp, #12
 8000ec8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ecc:	f001 fa30 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000ed0:	2338      	movs	r3, #56	; 0x38
 8000ed2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed8:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000eda:	2306      	movs	r3, #6
 8000edc:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ede:	a903      	add	r1, sp, #12
 8000ee0:	4628      	mov	r0, r5
 8000ee2:	f001 fa25 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_ATTN_Pin */
  GPIO_InitStruct.Pin = SPI3_ATTN_Pin;
 8000ee6:	2380      	movs	r3, #128	; 0x80
 8000ee8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eea:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(SPI3_ATTN_GPIO_Port, &GPIO_InitStruct);
 8000eee:	a903      	add	r1, sp, #12
 8000ef0:	4628      	mov	r0, r5
 8000ef2:	f001 fa1d 	bl	8002330 <HAL_GPIO_Init>

}
 8000ef6:	b008      	add	sp, #32
 8000ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000efc:	40021000 	.word	0x40021000
 8000f00:	48000400 	.word	0x48000400

08000f04 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8000f04:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <Error_Handler+0x2>

08000f08 <MX_SPI1_Init>:
{
 8000f08:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 8000f0a:	480f      	ldr	r0, [pc, #60]	; (8000f48 <MX_SPI1_Init+0x40>)
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <MX_SPI1_Init+0x44>)
 8000f0e:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f10:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000f14:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f16:	2300      	movs	r3, #0
 8000f18:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f1a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f1e:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f20:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f22:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f28:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f2a:	2210      	movs	r2, #16
 8000f2c:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f2e:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f30:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f32:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f34:	2207      	movs	r2, #7
 8000f36:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f38:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f3a:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f3c:	f002 f924 	bl	8003188 <HAL_SPI_Init>
 8000f40:	b900      	cbnz	r0, 8000f44 <MX_SPI1_Init+0x3c>
}
 8000f42:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000f44:	f7ff ffde 	bl	8000f04 <Error_Handler>
 8000f48:	200013f0 	.word	0x200013f0
 8000f4c:	40013000 	.word	0x40013000

08000f50 <SystemClock_Config>:
{
 8000f50:	b500      	push	{lr}
 8000f52:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f54:	2244      	movs	r2, #68	; 0x44
 8000f56:	2100      	movs	r1, #0
 8000f58:	a805      	add	r0, sp, #20
 8000f5a:	f003 f80d 	bl	8003f78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5e:	2300      	movs	r3, #0
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	9301      	str	r3, [sp, #4]
 8000f64:	9302      	str	r3, [sp, #8]
 8000f66:	9303      	str	r3, [sp, #12]
 8000f68:	9304      	str	r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f6a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f6e:	f001 fad1 	bl	8002514 <HAL_PWREx_ControlVoltageScaling>
 8000f72:	b9d0      	cbnz	r0, 8000faa <SystemClock_Config+0x5a>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f74:	2310      	movs	r3, #16
 8000f76:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8000f80:	2280      	movs	r2, #128	; 0x80
 8000f82:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f84:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f86:	a805      	add	r0, sp, #20
 8000f88:	f001 fbae 	bl	80026e8 <HAL_RCC_OscConfig>
 8000f8c:	b978      	cbnz	r0, 8000fae <SystemClock_Config+0x5e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f8e:	230f      	movs	r3, #15
 8000f90:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000f92:	2100      	movs	r1, #0
 8000f94:	9101      	str	r1, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f96:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f98:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f9a:	9104      	str	r1, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f9c:	4668      	mov	r0, sp
 8000f9e:	f001 fed9 	bl	8002d54 <HAL_RCC_ClockConfig>
 8000fa2:	b930      	cbnz	r0, 8000fb2 <SystemClock_Config+0x62>
}
 8000fa4:	b017      	add	sp, #92	; 0x5c
 8000fa6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000faa:	f7ff ffab 	bl	8000f04 <Error_Handler>
    Error_Handler();
 8000fae:	f7ff ffa9 	bl	8000f04 <Error_Handler>
    Error_Handler();
 8000fb2:	f7ff ffa7 	bl	8000f04 <Error_Handler>
	...

08000fb8 <main>:
{
 8000fb8:	b508      	push	{r3, lr}
  HAL_Init();
 8000fba:	f001 f939 	bl	8002230 <HAL_Init>
  SystemClock_Config();
 8000fbe:	f7ff ffc7 	bl	8000f50 <SystemClock_Config>
  MX_GPIO_Init();
 8000fc2:	f7ff ff1f 	bl	8000e04 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000fc6:	f7ff ff9f 	bl	8000f08 <MX_SPI1_Init>
  IMU_init(&hspi1, &IMU0);
 8000fca:	490e      	ldr	r1, [pc, #56]	; (8001004 <main+0x4c>)
 8000fcc:	480e      	ldr	r0, [pc, #56]	; (8001008 <main+0x50>)
 8000fce:	f7ff febb 	bl	8000d48 <IMU_init>
  init_processing();
 8000fd2:	f000 fdb1 	bl	8001b38 <init_processing>
	  if (DRDY_flag || 1) {
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	; (800100c <main+0x54>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
		  IMU_readSensorData(&IMU0, &IMU0_data);
 8000fda:	4c0d      	ldr	r4, [pc, #52]	; (8001010 <main+0x58>)
 8000fdc:	4621      	mov	r1, r4
 8000fde:	4809      	ldr	r0, [pc, #36]	; (8001004 <main+0x4c>)
 8000fe0:	f7ff fe63 	bl	8000caa <IMU_readSensorData>
		  IMU_readSensorData(&IMU1, &IMU1_data);
 8000fe4:	4d0b      	ldr	r5, [pc, #44]	; (8001014 <main+0x5c>)
 8000fe6:	4629      	mov	r1, r5
 8000fe8:	480b      	ldr	r0, [pc, #44]	; (8001018 <main+0x60>)
 8000fea:	f7ff fe5e 	bl	8000caa <IMU_readSensorData>
		  calculateCorrectedState(&IMU0_data, &IMU1_data, timeDelta);
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <main+0x64>)
 8000ff0:	ed93 0a00 	vldr	s0, [r3]
 8000ff4:	4629      	mov	r1, r5
 8000ff6:	4620      	mov	r0, r4
 8000ff8:	f000 ff18 	bl	8001e2c <calculateCorrectedState>
	  if (periodic_tx_flag) {
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <main+0x68>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	e7e9      	b.n	8000fd6 <main+0x1e>
 8001002:	bf00      	nop
 8001004:	200013b0 	.word	0x200013b0
 8001008:	200013f0 	.word	0x200013f0
 800100c:	200013ac 	.word	0x200013ac
 8001010:	200013b8 	.word	0x200013b8
 8001014:	200013d8 	.word	0x200013d8
 8001018:	200013d0 	.word	0x200013d0
 800101c:	20000000 	.word	0x20000000
 8001020:	20001454 	.word	0x20001454

08001024 <calculateRotationMatrix>:
	w_avg_b0_mag = (w_avg_b0_f32[0]*w_avg_b0_f32[0]) + (w_avg_b0_f32[1]*w_avg_b0_f32[1]) + (w_avg_b0_f32[2]*w_avg_b0_f32[2]);
	arm_sqrt_f32(w_avg_b0_mag, &w_avg_b0_mag);
}

void calculateRotationMatrix(
		float timeDelta) { // TODO Verify this
 8001024:	b510      	push	{r4, lr}
 8001026:	ed2d 8b02 	vpush	{d8}
 800102a:	b084      	sub	sp, #16

	// Determine change in rotation angle / 2 (units of radians)
	float rotation_angle_div_2 = w_avg_b0_mag * timeDelta * deg2rad / 2;
 800102c:	4b2d      	ldr	r3, [pc, #180]	; (80010e4 <calculateRotationMatrix+0xc0>)
 800102e:	ed93 8a00 	vldr	s16, [r3]
 8001032:	ee28 0a00 	vmul.f32	s0, s16, s0
 8001036:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80010e8 <calculateRotationMatrix+0xc4>
 800103a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800103e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001042:	ee60 7a27 	vmul.f32	s15, s0, s15
 8001046:	ee17 4a90 	vmov	r4, s15

	float q1_3_scaling_term = (w_avg_b0_mag) ?
			(float)sin(rotation_angle_div_2) / w_avg_b0_mag : w_avg_b0_mag; // reduce number of calculations
 800104a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800104e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001052:	d00f      	beq.n	8001074 <calculateRotationMatrix+0x50>
 8001054:	ee17 0a90 	vmov	r0, s15
 8001058:	f7ff fa6e 	bl	8000538 <__aeabi_f2d>
 800105c:	ec41 0b10 	vmov	d0, r0, r1
 8001060:	f003 ffaa 	bl	8004fb8 <sin>
 8001064:	ec51 0b10 	vmov	r0, r1, d0
 8001068:	f7ff fd80 	bl	8000b6c <__aeabi_d2f>
 800106c:	ee07 0a90 	vmov	s15, r0
 8001070:	ee87 8a88 	vdiv.f32	s16, s15, s16

	// Determine change in rotation as quaternion
	float delta_q_f32[4];
	delta_q_f32[0] = (float)cos(rotation_angle_div_2);
 8001074:	4620      	mov	r0, r4
 8001076:	f7ff fa5f 	bl	8000538 <__aeabi_f2d>
 800107a:	ec41 0b10 	vmov	d0, r0, r1
 800107e:	f003 ff47 	bl	8004f10 <cos>
 8001082:	ec51 0b10 	vmov	r0, r1, d0
 8001086:	f7ff fd71 	bl	8000b6c <__aeabi_d2f>
 800108a:	9000      	str	r0, [sp, #0]
	delta_q_f32[1] = w_avg_b0_f32[0] * q1_3_scaling_term;
 800108c:	4b17      	ldr	r3, [pc, #92]	; (80010ec <calculateRotationMatrix+0xc8>)
 800108e:	edd3 7a00 	vldr	s15, [r3]
 8001092:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001096:	edcd 7a01 	vstr	s15, [sp, #4]
	delta_q_f32[2] = w_avg_b0_f32[1] * q1_3_scaling_term;
 800109a:	edd3 7a01 	vldr	s15, [r3, #4]
 800109e:	ee67 7a88 	vmul.f32	s15, s15, s16
 80010a2:	edcd 7a02 	vstr	s15, [sp, #8]
	delta_q_f32[3] = w_avg_b0_f32[2] * q1_3_scaling_term;
 80010a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80010aa:	ee27 8a88 	vmul.f32	s16, s15, s16
 80010ae:	ed8d 8a03 	vstr	s16, [sp, #12]

	arm_quaternion_normalize_f32(delta_q_f32, delta_q_f32, 1);	// q = q / |q|
 80010b2:	2201      	movs	r2, #1
 80010b4:	4669      	mov	r1, sp
 80010b6:	4668      	mov	r0, sp
 80010b8:	f002 fe1b 	bl	8003cf2 <arm_quaternion_normalize_f32>

	// Calculate new normalized quaternion
	arm_quaternion_product_single_f32(delta_q_f32, q_f32, q_f32); // q = q x delta_q
 80010bc:	4c0c      	ldr	r4, [pc, #48]	; (80010f0 <calculateRotationMatrix+0xcc>)
 80010be:	4622      	mov	r2, r4
 80010c0:	4621      	mov	r1, r4
 80010c2:	4668      	mov	r0, sp
 80010c4:	f002 fe6c 	bl	8003da0 <arm_quaternion_product_single_f32>
	arm_quaternion_normalize_f32(q_f32, q_f32, 1);	// q = q / |q|
 80010c8:	2201      	movs	r2, #1
 80010ca:	4621      	mov	r1, r4
 80010cc:	4620      	mov	r0, r4
 80010ce:	f002 fe10 	bl	8003cf2 <arm_quaternion_normalize_f32>
	// Calculate rotation matrix from board frame to nav frame using quaternion
	arm_quaternion2rotation_f32(q_f32, rotation_b0_n_f32, 1);
 80010d2:	2201      	movs	r2, #1
 80010d4:	4907      	ldr	r1, [pc, #28]	; (80010f4 <calculateRotationMatrix+0xd0>)
 80010d6:	4620      	mov	r0, r4
 80010d8:	f002 fd8a 	bl	8003bf0 <arm_quaternion2rotation_f32>
	//printf("%f %f %f %f %f %f %f %f %f\n", rotation_b0_n_f32[0], rotation_b0_n_f32[1], rotation_b0_n_f32[2], rotation_b0_n_f32[3], rotation_b0_n_f32[4], rotation_b0_n_f32[5], rotation_b0_n_f32[6], rotation_b0_n_f32[7], rotation_b0_n_f32[8]);
}
 80010dc:	b004      	add	sp, #16
 80010de:	ecbd 8b02 	vpop	{d8}
 80010e2:	bd10      	pop	{r4, pc}
 80010e4:	2000191c 	.word	0x2000191c
 80010e8:	3c8efa35 	.word	0x3c8efa35
 80010ec:	20001910 	.word	0x20001910
 80010f0:	200012b0 	.word	0x200012b0
 80010f4:	200018c4 	.word	0x200018c4

080010f8 <calculateStateEstimation>:

void calculateStateEstimation(void) { // TODO Verify this
 80010f8:	b500      	push	{lr}
 80010fa:	b09d      	sub	sp, #116	; 0x74
	 *  Define Temporary Objects
	 */

	float temp1_f32[12];
	arm_matrix_instance_f32 temp1;
	arm_mat_init_f32(&temp1, 12, 1, temp1_f32); // temp for first term of sum, 12x1
 80010fc:	ab10      	add	r3, sp, #64	; 0x40
 80010fe:	2201      	movs	r2, #1
 8001100:	210c      	movs	r1, #12
 8001102:	a80e      	add	r0, sp, #56	; 0x38
 8001104:	f002 fc0c 	bl	8003920 <arm_mat_init_f32>

	float temp2_f32[12];
	arm_matrix_instance_f32 temp2;
	arm_mat_init_f32(&temp2, 12, 1, temp2_f32); // temp for second term of sum, 12x1
 8001108:	ab02      	add	r3, sp, #8
 800110a:	2201      	movs	r2, #1
 800110c:	210c      	movs	r1, #12
 800110e:	4668      	mov	r0, sp
 8001110:	f002 fc06 	bl	8003920 <arm_mat_init_f32>

	/*
	 *  Calculation Section
	 */

	arm_mat_mult_f32(&F_matrix, &x_prev, &temp1); // F*x(k-1) --> (12x12) * (12x1)
 8001114:	aa0e      	add	r2, sp, #56	; 0x38
 8001116:	4919      	ldr	r1, [pc, #100]	; (800117c <calculateStateEstimation+0x84>)
 8001118:	4819      	ldr	r0, [pc, #100]	; (8001180 <calculateStateEstimation+0x88>)
 800111a:	f002 fcfb 	bl	8003b14 <arm_mat_mult_f32>

	arm_mat_mult_f32(&B_matrix, &u_curr, &temp2); // B*u(k) --> (12x6) * (6x1)
 800111e:	466a      	mov	r2, sp
 8001120:	4918      	ldr	r1, [pc, #96]	; (8001184 <calculateStateEstimation+0x8c>)
 8001122:	4819      	ldr	r0, [pc, #100]	; (8001188 <calculateStateEstimation+0x90>)
 8001124:	f002 fcf6 	bl	8003b14 <arm_mat_mult_f32>

	arm_mat_add_f32(&temp1, &temp2, &x_curr); // x(k) = F*x(k-1) + B*u(k)
 8001128:	4a18      	ldr	r2, [pc, #96]	; (800118c <calculateStateEstimation+0x94>)
 800112a:	4669      	mov	r1, sp
 800112c:	a80e      	add	r0, sp, #56	; 0x38
 800112e:	f002 fbdf 	bl	80038f0 <arm_mat_add_f32>

	prediction_f32[0] = (x_curr_f32[0] + x_curr_f32[3]) / 2;
 8001132:	4b17      	ldr	r3, [pc, #92]	; (8001190 <calculateStateEstimation+0x98>)
 8001134:	ed93 7a00 	vldr	s14, [r3]
 8001138:	edd3 7a03 	vldr	s15, [r3, #12]
 800113c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001140:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001144:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001148:	4a12      	ldr	r2, [pc, #72]	; (8001194 <calculateStateEstimation+0x9c>)
 800114a:	ed82 7a00 	vstr	s14, [r2]
	prediction_f32[1] = (x_curr_f32[1] + x_curr_f32[4]) / 2;
 800114e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001152:	edd3 7a04 	vldr	s15, [r3, #16]
 8001156:	ee37 7a27 	vadd.f32	s14, s14, s15
 800115a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800115e:	ed82 7a01 	vstr	s14, [r2, #4]
	prediction_f32[2] = (x_curr_f32[2] + x_curr_f32[5]) / 2;
 8001162:	edd3 7a02 	vldr	s15, [r3, #8]
 8001166:	ed93 7a05 	vldr	s14, [r3, #20]
 800116a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800116e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001172:	edc2 7a02 	vstr	s15, [r2, #8]
}
 8001176:	b01d      	add	sp, #116	; 0x74
 8001178:	f85d fb04 	ldr.w	pc, [sp], #4
 800117c:	2000198c 	.word	0x2000198c
 8001180:	20001460 	.word	0x20001460
 8001184:	200018e8 	.word	0x200018e8
 8001188:	20001458 	.word	0x20001458
 800118c:	20001984 	.word	0x20001984
 8001190:	200012c0 	.word	0x200012c0
 8001194:	200018b0 	.word	0x200018b0

08001198 <calculateStateEstimationErrorCovariance>:

void calculateStateEstimationErrorCovariance(void) {
 8001198:	b510      	push	{r4, lr}
 800119a:	f5ad 6d92 	sub.w	sp, sp, #1168	; 0x490
	 *  Define Temporary Objects
	 */

	float temp12x12_0_f32[144];
	arm_matrix_instance_f32 temp12x12_0;
	arm_mat_init_f32(&temp12x12_0, 12, 12, temp12x12_0_f32); // Temp 12x12 matrix
 800119e:	ab94      	add	r3, sp, #592	; 0x250
 80011a0:	220c      	movs	r2, #12
 80011a2:	4611      	mov	r1, r2
 80011a4:	a892      	add	r0, sp, #584	; 0x248
 80011a6:	f002 fbbb 	bl	8003920 <arm_mat_init_f32>
	arm_mat_trans_f32(&F_matrix, &temp12x12_0);	// Initialize to transpose of F
 80011aa:	4c0e      	ldr	r4, [pc, #56]	; (80011e4 <calculateStateEstimationErrorCovariance+0x4c>)
 80011ac:	a992      	add	r1, sp, #584	; 0x248
 80011ae:	4620      	mov	r0, r4
 80011b0:	f002 fd02 	bl	8003bb8 <arm_mat_trans_f32>

	float temp12x12_1_f32[144];
	arm_matrix_instance_f32 temp12x12_1;
	arm_mat_init_f32(&temp12x12_1, 12, 12, temp12x12_1_f32); // Temp 12x12 matrix
 80011b4:	ab02      	add	r3, sp, #8
 80011b6:	220c      	movs	r2, #12
 80011b8:	4611      	mov	r1, r2
 80011ba:	4668      	mov	r0, sp
 80011bc:	f002 fbb0 	bl	8003920 <arm_mat_init_f32>
	/*
	 *  Calculation Section
	 */

	arm_mat_mult_f32(&P_prev, &temp12x12_0, &temp12x12_1);	// P(k-1)*F^T --> (12x12) * (12x12)
 80011c0:	466a      	mov	r2, sp
 80011c2:	a992      	add	r1, sp, #584	; 0x248
 80011c4:	4808      	ldr	r0, [pc, #32]	; (80011e8 <calculateStateEstimationErrorCovariance+0x50>)
 80011c6:	f002 fca5 	bl	8003b14 <arm_mat_mult_f32>

	arm_mat_mult_f32(&F_matrix, &temp12x12_1, &temp12x12_0);	// F*(P(k-1)*F^T) --> (12x12) * (12x12)
 80011ca:	aa92      	add	r2, sp, #584	; 0x248
 80011cc:	4669      	mov	r1, sp
 80011ce:	4620      	mov	r0, r4
 80011d0:	f002 fca0 	bl	8003b14 <arm_mat_mult_f32>

	arm_mat_add_f32(&temp12x12_0, &Q_prev, &P_minus);	// P-(k) = (F*P(k-1)*F^T) + Q(k-1)
 80011d4:	4a05      	ldr	r2, [pc, #20]	; (80011ec <calculateStateEstimationErrorCovariance+0x54>)
 80011d6:	4906      	ldr	r1, [pc, #24]	; (80011f0 <calculateStateEstimationErrorCovariance+0x58>)
 80011d8:	a892      	add	r0, sp, #584	; 0x248
 80011da:	f002 fb89 	bl	80038f0 <arm_mat_add_f32>

}
 80011de:	f50d 6d92 	add.w	sp, sp, #1168	; 0x490
 80011e2:	bd10      	pop	{r4, pc}
 80011e4:	20001460 	.word	0x20001460
 80011e8:	200017f8 	.word	0x200017f8
 80011ec:	200017f0 	.word	0x200017f0
 80011f0:	20001800 	.word	0x20001800

080011f4 <calculateGainMatrix>:

void calculateGainMatrix(
		arm_matrix_instance_f32* Ki, /*(12xN)*/
		arm_matrix_instance_f32* Hi, /*(Nx12)*/
		arm_matrix_instance_f32* Ri /*(NxN)*/) { // TODO Verify this
 80011f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011f8:	b089      	sub	sp, #36	; 0x24
 80011fa:	4605      	mov	r5, r0
 80011fc:	460e      	mov	r6, r1
 80011fe:	4693      	mov	fp, r2

	uint16_t N = Hi->numRows;
 8001200:	880c      	ldrh	r4, [r1, #0]

	/*
	 *  Define Temporary Objects
	 */

	float* temp12xN_0_f32 = (float*)malloc(12 * N * sizeof(float));
 8001202:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8001206:	013f      	lsls	r7, r7, #4
 8001208:	4638      	mov	r0, r7
 800120a:	f002 fea5 	bl	8003f58 <malloc>
 800120e:	4682      	mov	sl, r0
	arm_matrix_instance_f32 temp12xN_0;
	arm_mat_init_f32(&temp12xN_0, 12, N, temp12xN_0_f32); // temp matrix (12xN)
 8001210:	4603      	mov	r3, r0
 8001212:	4622      	mov	r2, r4
 8001214:	210c      	movs	r1, #12
 8001216:	a806      	add	r0, sp, #24
 8001218:	f002 fb82 	bl	8003920 <arm_mat_init_f32>
	arm_mat_trans_f32(Hi, &temp12xN_0); // init to transpose of Hi
 800121c:	a906      	add	r1, sp, #24
 800121e:	4630      	mov	r0, r6
 8001220:	f002 fcca 	bl	8003bb8 <arm_mat_trans_f32>

	float* temp12xN_1_f32 = (float*)malloc(12 * N * sizeof(float));
 8001224:	4638      	mov	r0, r7
 8001226:	f002 fe97 	bl	8003f58 <malloc>
 800122a:	4680      	mov	r8, r0
	arm_matrix_instance_f32 temp12xN_1;
	arm_mat_init_f32(&temp12xN_1, 12, N, temp12xN_1_f32); // temp matrix (12xN)
 800122c:	4603      	mov	r3, r0
 800122e:	4622      	mov	r2, r4
 8001230:	210c      	movs	r1, #12
 8001232:	a804      	add	r0, sp, #16
 8001234:	f002 fb74 	bl	8003920 <arm_mat_init_f32>

	float* tempNxN_0_f32 = (float*)malloc(N * N * sizeof(float));
 8001238:	fb04 f704 	mul.w	r7, r4, r4
 800123c:	00bf      	lsls	r7, r7, #2
 800123e:	4638      	mov	r0, r7
 8001240:	f002 fe8a 	bl	8003f58 <malloc>
 8001244:	4681      	mov	r9, r0
	arm_matrix_instance_f32 tempNxN_0;
	arm_mat_init_f32(&tempNxN_0, N, N, tempNxN_0_f32); // temp matrix (NxN)
 8001246:	4603      	mov	r3, r0
 8001248:	4622      	mov	r2, r4
 800124a:	4621      	mov	r1, r4
 800124c:	a802      	add	r0, sp, #8
 800124e:	f002 fb67 	bl	8003920 <arm_mat_init_f32>

	float* tempNxN_1_f32 = (float*)malloc(N * N * sizeof(float));
 8001252:	4638      	mov	r0, r7
 8001254:	f002 fe80 	bl	8003f58 <malloc>
 8001258:	4607      	mov	r7, r0
	arm_matrix_instance_f32 tempNxN_1;
	arm_mat_init_f32(&tempNxN_1, N, N, tempNxN_1_f32); // temp matrix (NxN)
 800125a:	4603      	mov	r3, r0
 800125c:	4622      	mov	r2, r4
 800125e:	4621      	mov	r1, r4
 8001260:	4668      	mov	r0, sp
 8001262:	f002 fb5d 	bl	8003920 <arm_mat_init_f32>

	/*
	 *  Calculation Section
	 */

	arm_mat_mult_f32(&P_minus, &temp12xN_0, &temp12xN_1);	// P-(k)*Hi^T --> (12x12) * (12xN)
 8001266:	aa04      	add	r2, sp, #16
 8001268:	a906      	add	r1, sp, #24
 800126a:	4824      	ldr	r0, [pc, #144]	; (80012fc <calculateGainMatrix+0x108>)
 800126c:	f002 fc52 	bl	8003b14 <arm_mat_mult_f32>

	arm_mat_mult_f32(Hi, &temp12xN_1, &tempNxN_0);	// Hi*(P-(k)*Hi^T) --> (Nx12) * (12xN)
 8001270:	aa02      	add	r2, sp, #8
 8001272:	a904      	add	r1, sp, #16
 8001274:	4630      	mov	r0, r6
 8001276:	f002 fc4d 	bl	8003b14 <arm_mat_mult_f32>

	arm_mat_add_f32(&tempNxN_0, Ri, &tempNxN_1);	// (Hi*P-(k)*Hi^T + Ri(k))
 800127a:	466a      	mov	r2, sp
 800127c:	4659      	mov	r1, fp
 800127e:	a802      	add	r0, sp, #8
 8001280:	f002 fb36 	bl	80038f0 <arm_mat_add_f32>

	arm_mat_inverse_f32(&tempNxN_1, &tempNxN_0);	// (Hi*P-(k)*Hi^T + Ri(k))^-1
 8001284:	a902      	add	r1, sp, #8
 8001286:	4668      	mov	r0, sp
 8001288:	f002 fb4e 	bl	8003928 <arm_mat_inverse_f32>

	arm_mat_mult_f32(&temp12xN_1, &tempNxN_0, Ki);	// Ki(k) = P-(k)*Hi^T * (Hi*P-(k)*Hi^T + Ri(k))^-1 --> (12xN) * (NxN)
 800128c:	462a      	mov	r2, r5
 800128e:	a902      	add	r1, sp, #8
 8001290:	a804      	add	r0, sp, #16
 8001292:	f002 fc3f 	bl	8003b14 <arm_mat_mult_f32>
	/*
	 *  Cleanup Section
	 */

	// Free malloc'd memory
	free(temp12xN_0_f32);
 8001296:	4650      	mov	r0, sl
 8001298:	f002 fe66 	bl	8003f68 <free>
	free(tempNxN_0_f32);
 800129c:	4648      	mov	r0, r9
 800129e:	f002 fe63 	bl	8003f68 <free>
	free(temp12xN_1_f32);
 80012a2:	4640      	mov	r0, r8
 80012a4:	f002 fe60 	bl	8003f68 <free>
	free(tempNxN_1_f32);
 80012a8:	4638      	mov	r0, r7
 80012aa:	f002 fe5d 	bl	8003f68 <free>

	gain_f32[0] = (Ki->pData[0] + Ki->pData[3]) / 2;
 80012ae:	686b      	ldr	r3, [r5, #4]
 80012b0:	ed93 7a00 	vldr	s14, [r3]
 80012b4:	edd3 7a03 	vldr	s15, [r3, #12]
 80012b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012bc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80012c0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80012c4:	4a0e      	ldr	r2, [pc, #56]	; (8001300 <calculateGainMatrix+0x10c>)
 80012c6:	ed82 7a00 	vstr	s14, [r2]
	gain_f32[1] = (Ki->pData[1] + Ki->pData[4]) / 2;
 80012ca:	ed93 7a01 	vldr	s14, [r3, #4]
 80012ce:	edd3 7a04 	vldr	s15, [r3, #16]
 80012d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012d6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80012da:	ed82 7a01 	vstr	s14, [r2, #4]
	gain_f32[2] = (Ki->pData[2] + Ki->pData[5]) / 2;
 80012de:	686b      	ldr	r3, [r5, #4]
 80012e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80012e4:	ed93 7a05 	vldr	s14, [r3, #20]
 80012e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80012f0:	edc2 7a02 	vstr	s15, [r2, #8]
}
 80012f4:	b009      	add	sp, #36	; 0x24
 80012f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012fa:	bf00      	nop
 80012fc:	200017f0 	.word	0x200017f0
 8001300:	20001888 	.word	0x20001888

08001304 <calculateOptimalStateEstimation>:
#define Z_THRES 0.1

void calculateOptimalStateEstimation(
		arm_matrix_instance_f32* Ki, /*(12xN)*/
		arm_matrix_instance_f32* Zi, /*(Nx1)*/
		arm_matrix_instance_f32* Hi /*(Nx12)*/) { // TODO Verify this
 8001304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001308:	b093      	sub	sp, #76	; 0x4c
 800130a:	4680      	mov	r8, r0
 800130c:	460e      	mov	r6, r1
 800130e:	4691      	mov	r9, r2

	uint16_t N = Zi->numRows;
 8001310:	880f      	ldrh	r7, [r1, #0]

	/*
	 *  Define Temporary Objects
	 */

	float* tempNx1_0_f32 = (float*)malloc(N * sizeof(float));
 8001312:	00bc      	lsls	r4, r7, #2
 8001314:	4620      	mov	r0, r4
 8001316:	f002 fe1f 	bl	8003f58 <malloc>
 800131a:	4605      	mov	r5, r0
	arm_matrix_instance_f32 tempNx1_0;
	arm_mat_init_f32(&tempNx1_0, N, 1, tempNx1_0_f32); // Will temporarily store some operation results, (Nx1)
 800131c:	4603      	mov	r3, r0
 800131e:	2201      	movs	r2, #1
 8001320:	4639      	mov	r1, r7
 8001322:	a810      	add	r0, sp, #64	; 0x40
 8001324:	f002 fafc 	bl	8003920 <arm_mat_init_f32>

	float* tempNx1_1_f32 = (float*)malloc(N * sizeof(float));
 8001328:	4620      	mov	r0, r4
 800132a:	f002 fe15 	bl	8003f58 <malloc>
 800132e:	4604      	mov	r4, r0
	arm_matrix_instance_f32 tempNx1_1;
	arm_mat_init_f32(&tempNx1_1, N, 1, tempNx1_1_f32); // Will temporarily store some operation results, (Nx1)
 8001330:	4603      	mov	r3, r0
 8001332:	2201      	movs	r2, #1
 8001334:	4639      	mov	r1, r7
 8001336:	a80e      	add	r0, sp, #56	; 0x38
 8001338:	f002 faf2 	bl	8003920 <arm_mat_init_f32>

	float temp12x1_f32[12];
	arm_matrix_instance_f32 temp12x1;
	arm_mat_init_f32(&temp12x1, 12, 1, temp12x1_f32); // Will temporarily store some operation results, (12x1)
 800133c:	ab02      	add	r3, sp, #8
 800133e:	2201      	movs	r2, #1
 8001340:	210c      	movs	r1, #12
 8001342:	4668      	mov	r0, sp
 8001344:	f002 faec 	bl	8003920 <arm_mat_init_f32>

	/*
	 *  Calculation Section
	 */

	arm_mat_mult_f32(Hi, &x_curr, &tempNx1_0);	// Hi*x(k) --> (Nx12) * (12x1)
 8001348:	4f1f      	ldr	r7, [pc, #124]	; (80013c8 <calculateOptimalStateEstimation+0xc4>)
 800134a:	aa10      	add	r2, sp, #64	; 0x40
 800134c:	4639      	mov	r1, r7
 800134e:	4648      	mov	r0, r9
 8001350:	f002 fbe0 	bl	8003b14 <arm_mat_mult_f32>

	// Calculate correction factor
	arm_mat_sub_f32(Zi, &tempNx1_0, &tempNx1_1);	// (Zi(k) - Hi*x(k)) -> tempNx1
 8001354:	aa0e      	add	r2, sp, #56	; 0x38
 8001356:	a910      	add	r1, sp, #64	; 0x40
 8001358:	4630      	mov	r0, r6
 800135a:	f002 fc15 	bl	8003b88 <arm_mat_sub_f32>
//	printf("%f %f %f\n", tempNx1_f32[3], tempNx1_f32[4], tempNx1_f32[5]); // should be ideally zero

	// Weight correction factor by Kalman Gain
	arm_mat_mult_f32(Ki, &tempNx1_1, &temp12x1); // Ki(k) * (Zi(k) - Hi*x(k)) --> (12xN) * (Nx1) -> temp12x1
 800135e:	466a      	mov	r2, sp
 8001360:	a90e      	add	r1, sp, #56	; 0x38
 8001362:	4640      	mov	r0, r8
 8001364:	f002 fbd6 	bl	8003b14 <arm_mat_mult_f32>

	correction_f32[0] = (temp12x1_f32[0] + temp12x1_f32[3]) / 2;
 8001368:	ed9d 7a02 	vldr	s14, [sp, #8]
 800136c:	eddd 7a05 	vldr	s15, [sp, #20]
 8001370:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001374:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001378:	ee27 7a26 	vmul.f32	s14, s14, s13
 800137c:	4b13      	ldr	r3, [pc, #76]	; (80013cc <calculateOptimalStateEstimation+0xc8>)
 800137e:	ed83 7a00 	vstr	s14, [r3]
	correction_f32[1] = (temp12x1_f32[1] + temp12x1_f32[4]) / 2;
 8001382:	ed9d 7a03 	vldr	s14, [sp, #12]
 8001386:	eddd 7a06 	vldr	s15, [sp, #24]
 800138a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800138e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001392:	ed83 7a01 	vstr	s14, [r3, #4]
	correction_f32[2] = (temp12x1_f32[2] + temp12x1_f32[5]) / 2;
 8001396:	eddd 7a04 	vldr	s15, [sp, #16]
 800139a:	ed9d 7a07 	vldr	s14, [sp, #28]
 800139e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80013a6:	edc3 7a02 	vstr	s15, [r3, #8]

//	printf("X_curr_before: %f \n", (x_curr_f32[0] + x_curr_f32[3]) / 2);
//	printf("Correction: %f \n", (temp12x1_f32[0] + temp12x1_f32[3]) / 2);

	// Add weighted correction factor
	arm_mat_add_f32(&x_curr, &temp12x1, &x_curr); // x(k) <= x_best(k) = x(k) + Ki(k) * (Zi(k) - Hi*x(k))
 80013aa:	463a      	mov	r2, r7
 80013ac:	4669      	mov	r1, sp
 80013ae:	4638      	mov	r0, r7
 80013b0:	f002 fa9e 	bl	80038f0 <arm_mat_add_f32>
	/*
	 *  Cleanup Section
	 */

	// Free malloc'd memory
	free(tempNx1_0_f32);
 80013b4:	4628      	mov	r0, r5
 80013b6:	f002 fdd7 	bl	8003f68 <free>
	free(tempNx1_1_f32);
 80013ba:	4620      	mov	r0, r4
 80013bc:	f002 fdd4 	bl	8003f68 <free>
}
 80013c0:	b013      	add	sp, #76	; 0x4c
 80013c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013c6:	bf00      	nop
 80013c8:	20001984 	.word	0x20001984
 80013cc:	20001874 	.word	0x20001874

080013d0 <calculateOptimalEstimationErrorCovariance>:

void calculateOptimalEstimationErrorCovariance(
		arm_matrix_instance_f32* Ki, /*(12xN)*/
		arm_matrix_instance_f32* Hi, /*(Nx12)*/
		arm_matrix_instance_f32* Ri /*(NxN)*/) { // TODO Verify this
 80013d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013d4:	f6ad 1d34 	subw	sp, sp, #2356	; 0x934
 80013d8:	4605      	mov	r5, r0
 80013da:	4688      	mov	r8, r1
 80013dc:	4691      	mov	r9, r2

	uint16_t N = Hi->numRows;
 80013de:	880c      	ldrh	r4, [r1, #0]

	/*
	 *  Define Temporary Objects
	 */

	float* tempNx12_0_f32 = (float*)malloc(12 * N * sizeof(float));
 80013e0:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 80013e4:	013f      	lsls	r7, r7, #4
 80013e6:	4638      	mov	r0, r7
 80013e8:	f002 fdb6 	bl	8003f58 <malloc>
 80013ec:	4606      	mov	r6, r0
	arm_matrix_instance_f32 tempNx12_0;
	arm_mat_init_f32(&tempNx12_0, N, 12, tempNx12_0_f32); // temp matrix (Nx12)
 80013ee:	4603      	mov	r3, r0
 80013f0:	220c      	movs	r2, #12
 80013f2:	4621      	mov	r1, r4
 80013f4:	f60d 1028 	addw	r0, sp, #2344	; 0x928
 80013f8:	f002 fa92 	bl	8003920 <arm_mat_init_f32>
	arm_mat_trans_f32(Ki, &tempNx12_0); // init to transpose of Ki
 80013fc:	f60d 1128 	addw	r1, sp, #2344	; 0x928
 8001400:	4628      	mov	r0, r5
 8001402:	f002 fbd9 	bl	8003bb8 <arm_mat_trans_f32>

	float* temp12xN_0_f32 = (float*)malloc(12 * N * sizeof(float));
 8001406:	4638      	mov	r0, r7
 8001408:	f002 fda6 	bl	8003f58 <malloc>
 800140c:	4607      	mov	r7, r0
	arm_matrix_instance_f32 temp12xN_0;
	arm_mat_init_f32(&temp12xN_0, 12, N, temp12xN_0_f32); // temp matrix (12xN)
 800140e:	4603      	mov	r3, r0
 8001410:	4622      	mov	r2, r4
 8001412:	210c      	movs	r1, #12
 8001414:	f50d 6012 	add.w	r0, sp, #2336	; 0x920
 8001418:	f002 fa82 	bl	8003920 <arm_mat_init_f32>

	float Identity12x12_f32[144] = {
 800141c:	f50d 64dc 	add.w	r4, sp, #1760	; 0x6e0
 8001420:	f44f 7210 	mov.w	r2, #576	; 0x240
 8001424:	2100      	movs	r1, #0
 8001426:	4620      	mov	r0, r4
 8001428:	f002 fda6 	bl	8003f78 <memset>
 800142c:	f04f 5c7e 	mov.w	ip, #1065353216	; 0x3f800000
 8001430:	f8c4 c000 	str.w	ip, [r4]
 8001434:	f8c4 c034 	str.w	ip, [r4, #52]	; 0x34
 8001438:	f8c4 c068 	str.w	ip, [r4, #104]	; 0x68
 800143c:	f8c4 c09c 	str.w	ip, [r4, #156]	; 0x9c
 8001440:	f8c4 c0d0 	str.w	ip, [r4, #208]	; 0xd0
 8001444:	f8c4 c104 	str.w	ip, [r4, #260]	; 0x104
 8001448:	f8c4 c138 	str.w	ip, [r4, #312]	; 0x138
 800144c:	f8c4 c16c 	str.w	ip, [r4, #364]	; 0x16c
 8001450:	f8c4 c1a0 	str.w	ip, [r4, #416]	; 0x1a0
 8001454:	f8c4 c1d4 	str.w	ip, [r4, #468]	; 0x1d4
 8001458:	f8c4 c208 	str.w	ip, [r4, #520]	; 0x208
 800145c:	f8c4 c23c 	str.w	ip, [r4, #572]	; 0x23c
			0,0,0,	0,0,0,	0,0,0,	1,0,0,
			0,0,0,	0,0,0,	0,0,0,	0,1,0,
			0,0,0,	0,0,0,	0,0,0,	0,0,1,
	};
	arm_matrix_instance_f32 Identity12x12;
	arm_mat_init_f32(&Identity12x12, 12, 12, Identity12x12_f32); // 12x12 Identity matrix
 8001460:	4623      	mov	r3, r4
 8001462:	220c      	movs	r2, #12
 8001464:	4611      	mov	r1, r2
 8001466:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
 800146a:	f002 fa59 	bl	8003920 <arm_mat_init_f32>

	float temp12x12_0_f32[144];
	arm_matrix_instance_f32 temp12x12_0;
	arm_mat_init_f32(&temp12x12_0, 12, 12, temp12x12_0_f32); // Temp 12x12 matrix 0
 800146e:	f50d 6393 	add.w	r3, sp, #1176	; 0x498
 8001472:	220c      	movs	r2, #12
 8001474:	4611      	mov	r1, r2
 8001476:	f50d 6092 	add.w	r0, sp, #1168	; 0x490
 800147a:	f002 fa51 	bl	8003920 <arm_mat_init_f32>

	float temp12x12_1_f32[144];
	arm_matrix_instance_f32 temp12x12_1;
	arm_mat_init_f32(&temp12x12_1, 12, 12, temp12x12_1_f32); // Temp 12x12 matrix 1
 800147e:	ab94      	add	r3, sp, #592	; 0x250
 8001480:	220c      	movs	r2, #12
 8001482:	4611      	mov	r1, r2
 8001484:	a892      	add	r0, sp, #584	; 0x248
 8001486:	f002 fa4b 	bl	8003920 <arm_mat_init_f32>

	float temp12x12_2_f32[144];
	arm_matrix_instance_f32 temp12x12_2;
	arm_mat_init_f32(&temp12x12_2, 12, 12, temp12x12_2_f32); // Temp 12x12 matrix 2
 800148a:	ab02      	add	r3, sp, #8
 800148c:	220c      	movs	r2, #12
 800148e:	4611      	mov	r1, r2
 8001490:	4668      	mov	r0, sp
 8001492:	f002 fa45 	bl	8003920 <arm_mat_init_f32>

	/*
	 *  Calculation Section
	 */

	arm_mat_mult_f32(Ki, Hi, &temp12x12_0);	// Ki(k)*Hi --> (12xN) * (Nx12)
 8001496:	f50d 6292 	add.w	r2, sp, #1168	; 0x490
 800149a:	4641      	mov	r1, r8
 800149c:	4628      	mov	r0, r5
 800149e:	f002 fb39 	bl	8003b14 <arm_mat_mult_f32>

	arm_mat_sub_f32(&Identity12x12, &temp12x12_0, &temp12x12_0); // I - (Ki(k)*Hi)
 80014a2:	f50d 6292 	add.w	r2, sp, #1168	; 0x490
 80014a6:	4611      	mov	r1, r2
 80014a8:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
 80014ac:	f002 fb6c 	bl	8003b88 <arm_mat_sub_f32>

	arm_mat_trans_f32(&temp12x12_0, &temp12x12_1); 	// I - (Ki(k)*Hi)^T
 80014b0:	a992      	add	r1, sp, #584	; 0x248
 80014b2:	f50d 6092 	add.w	r0, sp, #1168	; 0x490
 80014b6:	f002 fb7f 	bl	8003bb8 <arm_mat_trans_f32>

	arm_mat_mult_f32(&temp12x12_0, &P_minus, &temp12x12_2);	// (I - Ki(k)*Hi)*P-(k) --> (12x12) * (12x12)
 80014ba:	466a      	mov	r2, sp
 80014bc:	4913      	ldr	r1, [pc, #76]	; (800150c <calculateOptimalEstimationErrorCovariance+0x13c>)
 80014be:	f50d 6092 	add.w	r0, sp, #1168	; 0x490
 80014c2:	f002 fb27 	bl	8003b14 <arm_mat_mult_f32>

	arm_mat_mult_f32(&temp12x12_2, &temp12x12_1, &temp12x12_0);	// (I - Ki(k)*Hi)*P-(k)*(I - (Ki(k)*Hi)^T
 80014c6:	f50d 6292 	add.w	r2, sp, #1168	; 0x490
 80014ca:	a992      	add	r1, sp, #584	; 0x248
 80014cc:	4668      	mov	r0, sp
 80014ce:	f002 fb21 	bl	8003b14 <arm_mat_mult_f32>

	arm_mat_mult_f32(Ki, Ri, &temp12xN_0);	// Ki(k)*Ri --> (12xN) * (NxN)
 80014d2:	f50d 6212 	add.w	r2, sp, #2336	; 0x920
 80014d6:	4649      	mov	r1, r9
 80014d8:	4628      	mov	r0, r5
 80014da:	f002 fb1b 	bl	8003b14 <arm_mat_mult_f32>

	arm_mat_mult_f32(&temp12xN_0, &tempNx12_0, &temp12x12_1);	// Ki(k)*Ri*Ki(k)^T --> (12xN) * (Nx12)
 80014de:	aa92      	add	r2, sp, #584	; 0x248
 80014e0:	f60d 1128 	addw	r1, sp, #2344	; 0x928
 80014e4:	f50d 6012 	add.w	r0, sp, #2336	; 0x920
 80014e8:	f002 fb14 	bl	8003b14 <arm_mat_mult_f32>

	arm_mat_add_f32(&temp12x12_0, &temp12x12_1, &P_curr);	// P(k) = (I - Ki(k)*Hi)*P-(k)*(I - (Ki(k)*Hi)^T + Ki(k)*Ri*Ki(k)^T
 80014ec:	4a08      	ldr	r2, [pc, #32]	; (8001510 <calculateOptimalEstimationErrorCovariance+0x140>)
 80014ee:	a992      	add	r1, sp, #584	; 0x248
 80014f0:	f50d 6092 	add.w	r0, sp, #1168	; 0x490
 80014f4:	f002 f9fc 	bl	80038f0 <arm_mat_add_f32>

	/*
	 *  Cleanup Section
	 */

	free(temp12xN_0_f32);
 80014f8:	4638      	mov	r0, r7
 80014fa:	f002 fd35 	bl	8003f68 <free>
	free(tempNx12_0_f32);
 80014fe:	4630      	mov	r0, r6
 8001500:	f002 fd32 	bl	8003f68 <free>

}
 8001504:	f60d 1d34 	addw	sp, sp, #2356	; 0x934
 8001508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800150c:	200017f0 	.word	0x200017f0
 8001510:	200017e8 	.word	0x200017e8

08001514 <updateFMatrix>:

void updateFMatrix(
		float timeDelta) { // TODO Verify this

	int i;
	for(i = 0; i < 6; ++i) { // Update specific indices of F matrix
 8001514:	2300      	movs	r3, #0
 8001516:	e00a      	b.n	800152e <updateFMatrix+0x1a>
		F_matrix_f32[6 + (13*i)] = timeDelta;
 8001518:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800151c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8001520:	3206      	adds	r2, #6
 8001522:	4904      	ldr	r1, [pc, #16]	; (8001534 <updateFMatrix+0x20>)
 8001524:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001528:	ed82 0a00 	vstr	s0, [r2]
	for(i = 0; i < 6; ++i) { // Update specific indices of F matrix
 800152c:	3301      	adds	r3, #1
 800152e:	2b05      	cmp	r3, #5
 8001530:	ddf2      	ble.n	8001518 <updateFMatrix+0x4>
	}
}
 8001532:	4770      	bx	lr
 8001534:	20000124 	.word	0x20000124

08001538 <updateBMatrix>:

void updateBMatrix(
		float timeDelta) { // TODO Verify this

	float dt2 = timeDelta * timeDelta / 2;
 8001538:	ee60 7a00 	vmul.f32	s15, s0, s0
 800153c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001540:	ee67 7a87 	vmul.f32	s15, s15, s14

	int i;
	for(i = 0; i < 6; ++i) { // Update specific indices of B matrix with (timeDelta^2)/2
 8001544:	2300      	movs	r3, #0
 8001546:	e007      	b.n	8001558 <updateBMatrix+0x20>
		B_matrix_f32[(7*i)] = dt2;
 8001548:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 800154c:	4a0b      	ldr	r2, [pc, #44]	; (800157c <updateBMatrix+0x44>)
 800154e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8001552:	edc2 7a00 	vstr	s15, [r2]
	for(i = 0; i < 6; ++i) { // Update specific indices of B matrix with (timeDelta^2)/2
 8001556:	3301      	adds	r3, #1
 8001558:	2b05      	cmp	r3, #5
 800155a:	ddf5      	ble.n	8001548 <updateBMatrix+0x10>
	}

	for(i = 0; i < 6; ++i) { // Update specific indices of B matrix with timeDelta
 800155c:	2300      	movs	r3, #0
 800155e:	e009      	b.n	8001574 <updateBMatrix+0x3c>
		B_matrix_f32[36 + (7*i)] = timeDelta;
 8001560:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8001564:	f102 0124 	add.w	r1, r2, #36	; 0x24
 8001568:	4a04      	ldr	r2, [pc, #16]	; (800157c <updateBMatrix+0x44>)
 800156a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800156e:	ed82 0a00 	vstr	s0, [r2]
	for(i = 0; i < 6; ++i) { // Update specific indices of B matrix with timeDelta
 8001572:	3301      	adds	r3, #1
 8001574:	2b05      	cmp	r3, #5
 8001576:	ddf3      	ble.n	8001560 <updateBMatrix+0x28>
	}
}
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	20000004 	.word	0x20000004

08001580 <updatePreviousMatrices>:
	Zi->pData[0] = tempRw_f32[0];
	Zi->pData[1] = tempRw_f32[1];
	Zi->pData[2] = tempRw_f32[2];
}

void updatePreviousMatrices(void) { // TODO Verify this
 8001580:	b500      	push	{lr}
	int i;
	int j;
	for (i = 0; i < x_curr.numRows; ++i) {
 8001582:	2300      	movs	r3, #0
 8001584:	e00a      	b.n	800159c <updatePreviousMatrices+0x1c>
		x_prev.pData[i] = x_curr.pData[i];
 8001586:	4a18      	ldr	r2, [pc, #96]	; (80015e8 <updatePreviousMatrices+0x68>)
 8001588:	6851      	ldr	r1, [r2, #4]
 800158a:	4a18      	ldr	r2, [pc, #96]	; (80015ec <updatePreviousMatrices+0x6c>)
 800158c:	6852      	ldr	r2, [r2, #4]
 800158e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001592:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001596:	6809      	ldr	r1, [r1, #0]
 8001598:	6011      	str	r1, [r2, #0]
	for (i = 0; i < x_curr.numRows; ++i) {
 800159a:	3301      	adds	r3, #1
 800159c:	4a12      	ldr	r2, [pc, #72]	; (80015e8 <updatePreviousMatrices+0x68>)
 800159e:	8812      	ldrh	r2, [r2, #0]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	dcf0      	bgt.n	8001586 <updatePreviousMatrices+0x6>
	}

	for (i = 0; i < P_prev.numRows; ++i) {
 80015a4:	f04f 0e00 	mov.w	lr, #0
 80015a8:	e015      	b.n	80015d6 <updatePreviousMatrices+0x56>
		for (j = 0; j < P_prev.numCols; ++j) {
			P_prev.pData[(i*P_prev.numCols) + j] = P_curr.pData[(i*P_curr.numCols) + j];
 80015aa:	4911      	ldr	r1, [pc, #68]	; (80015f0 <updatePreviousMatrices+0x70>)
 80015ac:	6848      	ldr	r0, [r1, #4]
 80015ae:	8849      	ldrh	r1, [r1, #2]
 80015b0:	fb0e 3c01 	mla	ip, lr, r1, r3
 80015b4:	490f      	ldr	r1, [pc, #60]	; (80015f4 <updatePreviousMatrices+0x74>)
 80015b6:	6849      	ldr	r1, [r1, #4]
 80015b8:	fb0e 3202 	mla	r2, lr, r2, r3
 80015bc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80015c0:	eb00 018c 	add.w	r1, r0, ip, lsl #2
 80015c4:	6809      	ldr	r1, [r1, #0]
 80015c6:	6011      	str	r1, [r2, #0]
		for (j = 0; j < P_prev.numCols; ++j) {
 80015c8:	3301      	adds	r3, #1
 80015ca:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <updatePreviousMatrices+0x74>)
 80015cc:	8852      	ldrh	r2, [r2, #2]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	dceb      	bgt.n	80015aa <updatePreviousMatrices+0x2a>
	for (i = 0; i < P_prev.numRows; ++i) {
 80015d2:	f10e 0e01 	add.w	lr, lr, #1
 80015d6:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <updatePreviousMatrices+0x74>)
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	4573      	cmp	r3, lr
 80015dc:	dd01      	ble.n	80015e2 <updatePreviousMatrices+0x62>
		for (j = 0; j < P_prev.numCols; ++j) {
 80015de:	2300      	movs	r3, #0
 80015e0:	e7f3      	b.n	80015ca <updatePreviousMatrices+0x4a>
		}
	}

	// TODO Update Q(k-1) somehow
}
 80015e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80015e6:	bf00      	nop
 80015e8:	20001984 	.word	0x20001984
 80015ec:	2000198c 	.word	0x2000198c
 80015f0:	200017e8 	.word	0x200017e8
 80015f4:	200017f8 	.word	0x200017f8

080015f8 <cross_product>:

void cross_product(
		arm_matrix_instance_f32* a,
		arm_matrix_instance_f32* b,
		arm_matrix_instance_f32* c) { // TODO Verify this
 80015f8:	b086      	sub	sp, #24

	// Make copy to avoid using overwritten data in calculations (ex. if a = c)
	float aData[3] = {a->pData[0], a->pData[1], a->pData[2]};
 80015fa:	6843      	ldr	r3, [r0, #4]
 80015fc:	edd3 7a00 	vldr	s15, [r3]
 8001600:	edcd 7a03 	vstr	s15, [sp, #12]
 8001604:	edd3 6a01 	vldr	s13, [r3, #4]
 8001608:	edcd 6a04 	vstr	s13, [sp, #16]
 800160c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001610:	ed8d 7a05 	vstr	s14, [sp, #20]
	float bData[3] = {b->pData[0], b->pData[1], b->pData[2]};
 8001614:	684b      	ldr	r3, [r1, #4]
 8001616:	edd3 5a00 	vldr	s11, [r3]
 800161a:	edcd 5a00 	vstr	s11, [sp]
 800161e:	ed93 5a01 	vldr	s10, [r3, #4]
 8001622:	ed8d 5a01 	vstr	s10, [sp, #4]
 8001626:	ed93 6a02 	vldr	s12, [r3, #8]
 800162a:	ed8d 6a02 	vstr	s12, [sp, #8]

	c->pData[0] = aData[1] * bData[2] - aData[2] * bData[1];
 800162e:	ee66 4a86 	vmul.f32	s9, s13, s12
 8001632:	ee27 4a05 	vmul.f32	s8, s14, s10
 8001636:	6853      	ldr	r3, [r2, #4]
 8001638:	ee74 4ac4 	vsub.f32	s9, s9, s8
 800163c:	edc3 4a00 	vstr	s9, [r3]
	c->pData[1] = aData[2] * bData[0] - aData[0] * bData[2];
 8001640:	ee27 7a25 	vmul.f32	s14, s14, s11
 8001644:	ee27 6a86 	vmul.f32	s12, s15, s12
 8001648:	6853      	ldr	r3, [r2, #4]
 800164a:	ee37 7a46 	vsub.f32	s14, s14, s12
 800164e:	ed83 7a01 	vstr	s14, [r3, #4]
	c->pData[2] = aData[0] * bData[1] - aData[1] * bData[0];
 8001652:	ee67 7a85 	vmul.f32	s15, s15, s10
 8001656:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800165a:	6853      	ldr	r3, [r2, #4]
 800165c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001660:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001664:	b006      	add	sp, #24
 8001666:	4770      	bx	lr

08001668 <updateZiVector>:
		arm_matrix_instance_f32* Zi) { // TODO Verify this
 8001668:	b530      	push	{r4, r5, lr}
 800166a:	b08b      	sub	sp, #44	; 0x2c
 800166c:	4604      	mov	r4, r0
	arm_mat_init_f32(&tempRm, 3, 1, tempRm_f32);
 800166e:	ab07      	add	r3, sp, #28
 8001670:	2201      	movs	r2, #1
 8001672:	2103      	movs	r1, #3
 8001674:	a805      	add	r0, sp, #20
 8001676:	f002 f953 	bl	8003920 <arm_mat_init_f32>
	arm_mat_init_f32(&tempRw, 3, 1, tempRw_f32);
 800167a:	ab02      	add	r3, sp, #8
 800167c:	2201      	movs	r2, #1
 800167e:	2103      	movs	r1, #3
 8001680:	4668      	mov	r0, sp
 8001682:	f002 f94d 	bl	8003920 <arm_mat_init_f32>
	arm_mat_mult_f32(&rotation_b0_n, &w_avg_b0, &tempRw);	// R_b0_n*w_avg_b0 --> (3x3) * (3x1)
 8001686:	4d12      	ldr	r5, [pc, #72]	; (80016d0 <updateZiVector+0x68>)
 8001688:	466a      	mov	r2, sp
 800168a:	4912      	ldr	r1, [pc, #72]	; (80016d4 <updateZiVector+0x6c>)
 800168c:	4628      	mov	r0, r5
 800168e:	f002 fa41 	bl	8003b14 <arm_mat_mult_f32>
	arm_mat_mult_f32(&rotation_b0_n, &m_b0, &tempRm);	// R_b0_n*m_b0 --> (3x3) * (3x1)
 8001692:	aa05      	add	r2, sp, #20
 8001694:	4910      	ldr	r1, [pc, #64]	; (80016d8 <updateZiVector+0x70>)
 8001696:	4628      	mov	r0, r5
 8001698:	f002 fa3c 	bl	8003b14 <arm_mat_mult_f32>
	Zi->pData[3] = tempRm_f32[0];
 800169c:	6863      	ldr	r3, [r4, #4]
 800169e:	9a07      	ldr	r2, [sp, #28]
 80016a0:	60da      	str	r2, [r3, #12]
	Zi->pData[4] = tempRm_f32[1];
 80016a2:	6863      	ldr	r3, [r4, #4]
 80016a4:	9a08      	ldr	r2, [sp, #32]
 80016a6:	611a      	str	r2, [r3, #16]
	Zi->pData[5] = tempRm_f32[2];
 80016a8:	6863      	ldr	r3, [r4, #4]
 80016aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80016ac:	615a      	str	r2, [r3, #20]
	cross_product(&tempRw, &tempRm, &tempRw);
 80016ae:	466a      	mov	r2, sp
 80016b0:	a905      	add	r1, sp, #20
 80016b2:	4668      	mov	r0, sp
 80016b4:	f7ff ffa0 	bl	80015f8 <cross_product>
	Zi->pData[0] = tempRw_f32[0];
 80016b8:	6863      	ldr	r3, [r4, #4]
 80016ba:	9a02      	ldr	r2, [sp, #8]
 80016bc:	601a      	str	r2, [r3, #0]
	Zi->pData[1] = tempRw_f32[1];
 80016be:	6863      	ldr	r3, [r4, #4]
 80016c0:	9a03      	ldr	r2, [sp, #12]
 80016c2:	605a      	str	r2, [r3, #4]
	Zi->pData[2] = tempRw_f32[2];
 80016c4:	6863      	ldr	r3, [r4, #4]
 80016c6:	9a04      	ldr	r2, [sp, #16]
 80016c8:	609a      	str	r2, [r3, #8]
}
 80016ca:	b00b      	add	sp, #44	; 0x2c
 80016cc:	bd30      	pop	{r4, r5, pc}
 80016ce:	bf00      	nop
 80016d0:	200018bc 	.word	0x200018bc
 80016d4:	20001908 	.word	0x20001908
 80016d8:	20001894 	.word	0x20001894

080016dc <initRingBuffers>:

void initRingBuffers(void) {
	int i;
	for(i = 0; i < RING_SIZE; ++i) {
 80016dc:	2300      	movs	r3, #0
 80016de:	e025      	b.n	800172c <initRingBuffers+0x50>
		w_avg_x_ring[i] = 0;
 80016e0:	4914      	ldr	r1, [pc, #80]	; (8001734 <initRingBuffers+0x58>)
 80016e2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80016e6:	2200      	movs	r2, #0
 80016e8:	600a      	str	r2, [r1, #0]
		w_avg_y_ring[i] = 0;
 80016ea:	4913      	ldr	r1, [pc, #76]	; (8001738 <initRingBuffers+0x5c>)
 80016ec:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80016f0:	600a      	str	r2, [r1, #0]
		w_avg_z_ring[i] = 0;
 80016f2:	4912      	ldr	r1, [pc, #72]	; (800173c <initRingBuffers+0x60>)
 80016f4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80016f8:	600a      	str	r2, [r1, #0]
		xl0_avg_x_ring[i] = 0;
 80016fa:	4911      	ldr	r1, [pc, #68]	; (8001740 <initRingBuffers+0x64>)
 80016fc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001700:	600a      	str	r2, [r1, #0]
		xl0_avg_y_ring[i] = 0;
 8001702:	4910      	ldr	r1, [pc, #64]	; (8001744 <initRingBuffers+0x68>)
 8001704:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001708:	600a      	str	r2, [r1, #0]
		xl0_avg_z_ring[i] = 0;
 800170a:	490f      	ldr	r1, [pc, #60]	; (8001748 <initRingBuffers+0x6c>)
 800170c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001710:	600a      	str	r2, [r1, #0]
		xl1_avg_x_ring[i] = 0;
 8001712:	490e      	ldr	r1, [pc, #56]	; (800174c <initRingBuffers+0x70>)
 8001714:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001718:	600a      	str	r2, [r1, #0]
		xl1_avg_y_ring[i] = 0;
 800171a:	490d      	ldr	r1, [pc, #52]	; (8001750 <initRingBuffers+0x74>)
 800171c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001720:	600a      	str	r2, [r1, #0]
		xl1_avg_z_ring[i] = 0;
 8001722:	490c      	ldr	r1, [pc, #48]	; (8001754 <initRingBuffers+0x78>)
 8001724:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001728:	600a      	str	r2, [r1, #0]
	for(i = 0; i < RING_SIZE; ++i) {
 800172a:	3301      	adds	r3, #1
 800172c:	2b07      	cmp	r3, #7
 800172e:	ddd7      	ble.n	80016e0 <initRingBuffers+0x4>
	}
}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	20001920 	.word	0x20001920
 8001738:	20001940 	.word	0x20001940
 800173c:	20001960 	.word	0x20001960
 8001740:	20001994 	.word	0x20001994
 8001744:	200019b4 	.word	0x200019b4
 8001748:	200019d4 	.word	0x200019d4
 800174c:	200019f4 	.word	0x200019f4
 8001750:	20001a14 	.word	0x20001a14
 8001754:	20001a34 	.word	0x20001a34

08001758 <getNextGyroReading>:

void getNextGyroReading(SensorData* IMU0_data, SensorData* IMU1_data, float* gyroOut) {
 8001758:	b430      	push	{r4, r5}
	w_avg_x_ring[w_oldest] = (IMU0_data->G_X + IMU1_data->G_X) / 2;
 800175a:	ed90 7a03 	vldr	s14, [r0, #12]
 800175e:	edd1 7a03 	vldr	s15, [r1, #12]
 8001762:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001766:	4d37      	ldr	r5, [pc, #220]	; (8001844 <getNextGyroReading+0xec>)
 8001768:	782b      	ldrb	r3, [r5, #0]
 800176a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800176e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001772:	4c35      	ldr	r4, [pc, #212]	; (8001848 <getNextGyroReading+0xf0>)
 8001774:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8001778:	ed84 7a00 	vstr	s14, [r4]
	w_avg_y_ring[w_oldest] = (IMU0_data->G_Y + IMU1_data->G_Y) / 2;
 800177c:	ed90 7a04 	vldr	s14, [r0, #16]
 8001780:	edd1 7a04 	vldr	s15, [r1, #16]
 8001784:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001788:	ee27 7a26 	vmul.f32	s14, s14, s13
 800178c:	4c2f      	ldr	r4, [pc, #188]	; (800184c <getNextGyroReading+0xf4>)
 800178e:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 8001792:	ed8c 7a00 	vstr	s14, [ip]
	w_avg_z_ring[w_oldest] = (IMU0_data->G_Z + IMU1_data->G_Z) / 2;
 8001796:	edd0 7a05 	vldr	s15, [r0, #20]
 800179a:	ed91 7a05 	vldr	s14, [r1, #20]
 800179e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80017a6:	492a      	ldr	r1, [pc, #168]	; (8001850 <getNextGyroReading+0xf8>)
 80017a8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80017ac:	edc1 7a00 	vstr	s15, [r1]

	w_oldest = (w_oldest + 1) % RING_SIZE;
 80017b0:	3301      	adds	r3, #1
 80017b2:	4259      	negs	r1, r3
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	f001 0107 	and.w	r1, r1, #7
 80017bc:	bf58      	it	pl
 80017be:	424b      	negpl	r3, r1
 80017c0:	702b      	strb	r3, [r5, #0]

	gyroOut[0] = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	6013      	str	r3, [r2, #0]
	gyroOut[1] = 0;
 80017c6:	6053      	str	r3, [r2, #4]
	gyroOut[2] = 0;
 80017c8:	6093      	str	r3, [r2, #8]

	int i;
	for(i = 0; i < RING_SIZE; ++i) {
 80017ca:	2300      	movs	r3, #0
 80017cc:	e021      	b.n	8001812 <getNextGyroReading+0xba>
		gyroOut[0] += w_avg_x_ring[i];
 80017ce:	491e      	ldr	r1, [pc, #120]	; (8001848 <getNextGyroReading+0xf0>)
 80017d0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80017d4:	ed91 7a00 	vldr	s14, [r1]
 80017d8:	edd2 7a00 	vldr	s15, [r2]
 80017dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017e0:	edc2 7a00 	vstr	s15, [r2]
		gyroOut[1] += w_avg_y_ring[i];
 80017e4:	4919      	ldr	r1, [pc, #100]	; (800184c <getNextGyroReading+0xf4>)
 80017e6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80017ea:	ed91 7a00 	vldr	s14, [r1]
 80017ee:	edd2 7a01 	vldr	s15, [r2, #4]
 80017f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017f6:	edc2 7a01 	vstr	s15, [r2, #4]
		gyroOut[2] += w_avg_z_ring[i];
 80017fa:	4915      	ldr	r1, [pc, #84]	; (8001850 <getNextGyroReading+0xf8>)
 80017fc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001800:	ed91 7a00 	vldr	s14, [r1]
 8001804:	edd2 7a02 	vldr	s15, [r2, #8]
 8001808:	ee77 7a87 	vadd.f32	s15, s15, s14
 800180c:	edc2 7a02 	vstr	s15, [r2, #8]
	for(i = 0; i < RING_SIZE; ++i) {
 8001810:	3301      	adds	r3, #1
 8001812:	2b07      	cmp	r3, #7
 8001814:	dddb      	ble.n	80017ce <getNextGyroReading+0x76>
	}

	gyroOut[0] /= RING_SIZE;
 8001816:	edd2 7a00 	vldr	s15, [r2]
 800181a:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 800181e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001822:	edc2 7a00 	vstr	s15, [r2]
	gyroOut[1] /= RING_SIZE;
 8001826:	edd2 7a01 	vldr	s15, [r2, #4]
 800182a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800182e:	edc2 7a01 	vstr	s15, [r2, #4]
	gyroOut[2] /= RING_SIZE;
 8001832:	edd2 7a02 	vldr	s15, [r2, #8]
 8001836:	ee67 7a87 	vmul.f32	s15, s15, s14
 800183a:	edc2 7a02 	vstr	s15, [r2, #8]
}
 800183e:	bc30      	pop	{r4, r5}
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20001980 	.word	0x20001980
 8001848:	20001920 	.word	0x20001920
 800184c:	20001940 	.word	0x20001940
 8001850:	20001960 	.word	0x20001960

08001854 <calculateAvgAngularRate>:
		SensorData* IMU1_data) { // TODO Verify this
 8001854:	b510      	push	{r4, lr}
	getNextGyroReading(IMU0_data, IMU1_data, w_avg_b0_f32);
 8001856:	4c13      	ldr	r4, [pc, #76]	; (80018a4 <calculateAvgAngularRate+0x50>)
 8001858:	4622      	mov	r2, r4
 800185a:	f7ff ff7d 	bl	8001758 <getNextGyroReading>
	w_avg_b0_mag = (w_avg_b0_f32[0]*w_avg_b0_f32[0]) + (w_avg_b0_f32[1]*w_avg_b0_f32[1]) + (w_avg_b0_f32[2]*w_avg_b0_f32[2]);
 800185e:	ed94 0a00 	vldr	s0, [r4]
 8001862:	ee20 0a00 	vmul.f32	s0, s0, s0
 8001866:	edd4 7a01 	vldr	s15, [r4, #4]
 800186a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800186e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001872:	edd4 7a02 	vldr	s15, [r4, #8]
 8001876:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800187a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800187e:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <calculateAvgAngularRate+0x54>)
 8001880:	ed83 0a00 	vstr	s0, [r3]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001884:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188c:	db05      	blt.n	800189a <calculateAvgAngularRate+0x46>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 800188e:	f003 fbeb 	bl	8005068 <sqrtf>
 8001892:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <calculateAvgAngularRate+0x54>)
 8001894:	ed83 0a00 	vstr	s0, [r3]
}
 8001898:	bd10      	pop	{r4, pc}

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 800189a:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <calculateAvgAngularRate+0x54>)
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	e7fa      	b.n	8001898 <calculateAvgAngularRate+0x44>
 80018a2:	bf00      	nop
 80018a4:	20001910 	.word	0x20001910
 80018a8:	2000191c 	.word	0x2000191c

080018ac <getNextXLReading>:

void getNextXLReading(SensorData* IMU0_data, SensorData* IMU1_data, float* xl0Out, float* xl1Out) {
 80018ac:	b530      	push	{r4, r5, lr}
	xl0_avg_x_ring[xl_oldest] = IMU0_data->XL_X;
 80018ae:	4c53      	ldr	r4, [pc, #332]	; (80019fc <getNextXLReading+0x150>)
 80018b0:	f894 c000 	ldrb.w	ip, [r4]
 80018b4:	f8d0 e000 	ldr.w	lr, [r0]
 80018b8:	4d51      	ldr	r5, [pc, #324]	; (8001a00 <getNextXLReading+0x154>)
 80018ba:	eb05 058c 	add.w	r5, r5, ip, lsl #2
 80018be:	f8c5 e000 	str.w	lr, [r5]
	xl0_avg_y_ring[xl_oldest] = IMU0_data->XL_Y;
 80018c2:	edd0 7a01 	vldr	s15, [r0, #4]
 80018c6:	4d4f      	ldr	r5, [pc, #316]	; (8001a04 <getNextXLReading+0x158>)
 80018c8:	eb05 0e8c 	add.w	lr, r5, ip, lsl #2
 80018cc:	edce 7a00 	vstr	s15, [lr]
	xl0_avg_z_ring[xl_oldest] = IMU0_data->XL_Z;
 80018d0:	6885      	ldr	r5, [r0, #8]
 80018d2:	484d      	ldr	r0, [pc, #308]	; (8001a08 <getNextXLReading+0x15c>)
 80018d4:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 80018d8:	6005      	str	r5, [r0, #0]
	xl1_avg_x_ring[xl_oldest] = IMU1_data->XL_X;
 80018da:	680d      	ldr	r5, [r1, #0]
 80018dc:	484b      	ldr	r0, [pc, #300]	; (8001a0c <getNextXLReading+0x160>)
 80018de:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 80018e2:	6005      	str	r5, [r0, #0]
	xl1_avg_y_ring[xl_oldest] = IMU1_data->XL_Y;
 80018e4:	684d      	ldr	r5, [r1, #4]
 80018e6:	484a      	ldr	r0, [pc, #296]	; (8001a10 <getNextXLReading+0x164>)
 80018e8:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 80018ec:	6005      	str	r5, [r0, #0]
	xl1_avg_z_ring[xl_oldest] = IMU1_data->XL_Z;
 80018ee:	6888      	ldr	r0, [r1, #8]
 80018f0:	4948      	ldr	r1, [pc, #288]	; (8001a14 <getNextXLReading+0x168>)
 80018f2:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 80018f6:	6008      	str	r0, [r1, #0]

	xl_oldest = (xl_oldest + 1) % RING_SIZE;
 80018f8:	f10c 0c01 	add.w	ip, ip, #1
 80018fc:	f1dc 0100 	rsbs	r1, ip, #0
 8001900:	f00c 0c07 	and.w	ip, ip, #7
 8001904:	f001 0107 	and.w	r1, r1, #7
 8001908:	bf58      	it	pl
 800190a:	f1c1 0c00 	rsbpl	ip, r1, #0
 800190e:	f884 c000 	strb.w	ip, [r4]

	xl0Out[0] = 0;
 8001912:	2100      	movs	r1, #0
 8001914:	6011      	str	r1, [r2, #0]
	xl0Out[1] = 0;
 8001916:	6051      	str	r1, [r2, #4]
	xl0Out[2] = 0;
 8001918:	6091      	str	r1, [r2, #8]
	xl1Out[0] = 0;
 800191a:	6019      	str	r1, [r3, #0]
	xl1Out[1] = 0;
 800191c:	6059      	str	r1, [r3, #4]
	xl1Out[2] = 0;
 800191e:	6099      	str	r1, [r3, #8]

	int i;
	for(i = 0; i < RING_SIZE; ++i) {
 8001920:	2100      	movs	r1, #0
 8001922:	e042      	b.n	80019aa <getNextXLReading+0xfe>
		xl0Out[0] += xl0_avg_x_ring[i];
 8001924:	4836      	ldr	r0, [pc, #216]	; (8001a00 <getNextXLReading+0x154>)
 8001926:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800192a:	ed90 7a00 	vldr	s14, [r0]
 800192e:	edd2 7a00 	vldr	s15, [r2]
 8001932:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001936:	edc2 7a00 	vstr	s15, [r2]
		xl0Out[1] += xl0_avg_y_ring[i];
 800193a:	4832      	ldr	r0, [pc, #200]	; (8001a04 <getNextXLReading+0x158>)
 800193c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8001940:	ed90 7a00 	vldr	s14, [r0]
 8001944:	edd2 7a01 	vldr	s15, [r2, #4]
 8001948:	ee77 7a87 	vadd.f32	s15, s15, s14
 800194c:	edc2 7a01 	vstr	s15, [r2, #4]
		xl0Out[2] += xl0_avg_z_ring[i];
 8001950:	482d      	ldr	r0, [pc, #180]	; (8001a08 <getNextXLReading+0x15c>)
 8001952:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8001956:	ed90 7a00 	vldr	s14, [r0]
 800195a:	edd2 7a02 	vldr	s15, [r2, #8]
 800195e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001962:	edc2 7a02 	vstr	s15, [r2, #8]
		xl1Out[0] += xl1_avg_x_ring[i];
 8001966:	4829      	ldr	r0, [pc, #164]	; (8001a0c <getNextXLReading+0x160>)
 8001968:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800196c:	ed90 7a00 	vldr	s14, [r0]
 8001970:	edd3 7a00 	vldr	s15, [r3]
 8001974:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001978:	edc3 7a00 	vstr	s15, [r3]
		xl1Out[1] += xl1_avg_y_ring[i];
 800197c:	4824      	ldr	r0, [pc, #144]	; (8001a10 <getNextXLReading+0x164>)
 800197e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8001982:	ed90 7a00 	vldr	s14, [r0]
 8001986:	edd3 7a01 	vldr	s15, [r3, #4]
 800198a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800198e:	edc3 7a01 	vstr	s15, [r3, #4]
		xl1Out[2] += xl1_avg_z_ring[i];
 8001992:	4820      	ldr	r0, [pc, #128]	; (8001a14 <getNextXLReading+0x168>)
 8001994:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8001998:	ed90 7a00 	vldr	s14, [r0]
 800199c:	edd3 7a02 	vldr	s15, [r3, #8]
 80019a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019a4:	edc3 7a02 	vstr	s15, [r3, #8]
	for(i = 0; i < RING_SIZE; ++i) {
 80019a8:	3101      	adds	r1, #1
 80019aa:	2907      	cmp	r1, #7
 80019ac:	ddba      	ble.n	8001924 <getNextXLReading+0x78>
	}

	xl0Out[0] /= RING_SIZE;
 80019ae:	ed92 7a00 	vldr	s14, [r2]
 80019b2:	eef4 7a00 	vmov.f32	s15, #64	; 0x3e000000  0.125
 80019b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ba:	ed82 7a00 	vstr	s14, [r2]
	xl0Out[1] /= RING_SIZE;
 80019be:	ed92 7a01 	vldr	s14, [r2, #4]
 80019c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019c6:	ed82 7a01 	vstr	s14, [r2, #4]
	xl0Out[2] /= RING_SIZE;
 80019ca:	ed92 7a02 	vldr	s14, [r2, #8]
 80019ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019d2:	ed82 7a02 	vstr	s14, [r2, #8]
	xl1Out[0] /= RING_SIZE;
 80019d6:	ed93 7a00 	vldr	s14, [r3]
 80019da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019de:	ed83 7a00 	vstr	s14, [r3]
	xl1Out[1] /= RING_SIZE;
 80019e2:	ed93 7a01 	vldr	s14, [r3, #4]
 80019e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ea:	ed83 7a01 	vstr	s14, [r3, #4]
	xl1Out[2] /= RING_SIZE;
 80019ee:	ed93 7a02 	vldr	s14, [r3, #8]
 80019f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019f6:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80019fa:	bd30      	pop	{r4, r5, pc}
 80019fc:	20001a6c 	.word	0x20001a6c
 8001a00:	20001994 	.word	0x20001994
 8001a04:	200019b4 	.word	0x200019b4
 8001a08:	200019d4 	.word	0x200019d4
 8001a0c:	200019f4 	.word	0x200019f4
 8001a10:	20001a14 	.word	0x20001a14
 8001a14:	20001a34 	.word	0x20001a34

08001a18 <updateUVector>:
		SensorData* IMU1_data) { // TODO Verify this
 8001a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a1a:	b095      	sub	sp, #84	; 0x54
 8001a1c:	4604      	mov	r4, r0
 8001a1e:	460d      	mov	r5, r1
	float temp0_f32[3] = {IMU0_data->XL_X, IMU0_data->XL_Y, IMU0_data->XL_Z}; // Init with IMU0 acceleration
 8001a20:	6803      	ldr	r3, [r0, #0]
 8001a22:	9311      	str	r3, [sp, #68]	; 0x44
 8001a24:	6843      	ldr	r3, [r0, #4]
 8001a26:	9312      	str	r3, [sp, #72]	; 0x48
 8001a28:	6883      	ldr	r3, [r0, #8]
 8001a2a:	9313      	str	r3, [sp, #76]	; 0x4c
	arm_mat_init_f32(&temp0, 3, 1, temp0_f32); // temp for IMU0 vector
 8001a2c:	ab11      	add	r3, sp, #68	; 0x44
 8001a2e:	2201      	movs	r2, #1
 8001a30:	2103      	movs	r1, #3
 8001a32:	a80f      	add	r0, sp, #60	; 0x3c
 8001a34:	f001 ff74 	bl	8003920 <arm_mat_init_f32>
	float temp1_f32[3] = {IMU1_data->XL_X, IMU1_data->XL_Y, IMU1_data->XL_Z}; // Init with IMU1 acceleration
 8001a38:	682b      	ldr	r3, [r5, #0]
 8001a3a:	930c      	str	r3, [sp, #48]	; 0x30
 8001a3c:	686b      	ldr	r3, [r5, #4]
 8001a3e:	930d      	str	r3, [sp, #52]	; 0x34
 8001a40:	68ab      	ldr	r3, [r5, #8]
 8001a42:	930e      	str	r3, [sp, #56]	; 0x38
	arm_mat_init_f32(&temp1, 3, 1, temp1_f32); // temp for IMU1 vector
 8001a44:	ab0c      	add	r3, sp, #48	; 0x30
 8001a46:	2201      	movs	r2, #1
 8001a48:	2103      	movs	r1, #3
 8001a4a:	a80a      	add	r0, sp, #40	; 0x28
 8001a4c:	f001 ff68 	bl	8003920 <arm_mat_init_f32>
	float temp2_f32[3] = {0,0,0};
 8001a50:	2600      	movs	r6, #0
 8001a52:	9607      	str	r6, [sp, #28]
 8001a54:	9608      	str	r6, [sp, #32]
 8001a56:	9609      	str	r6, [sp, #36]	; 0x24
	arm_mat_init_f32(&temp2, 3, 1, temp2_f32); // temp for rotated IMU0 vector
 8001a58:	ab07      	add	r3, sp, #28
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	2103      	movs	r1, #3
 8001a5e:	a805      	add	r0, sp, #20
 8001a60:	f001 ff5e 	bl	8003920 <arm_mat_init_f32>
	float temp3_f32[3] = {0,0,0};
 8001a64:	9602      	str	r6, [sp, #8]
 8001a66:	9603      	str	r6, [sp, #12]
 8001a68:	9604      	str	r6, [sp, #16]
	arm_mat_init_f32(&temp3, 3, 1, temp3_f32); // temp for rotated IMU1 vector
 8001a6a:	ab02      	add	r3, sp, #8
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	2103      	movs	r1, #3
 8001a70:	4668      	mov	r0, sp
 8001a72:	f001 ff55 	bl	8003920 <arm_mat_init_f32>
	arm_mat_mult_f32(&rotation_b0_n, &temp0, &temp2);	// R_b0_n*a0_b0 --> (3x3) * (3x1)
 8001a76:	4e16      	ldr	r6, [pc, #88]	; (8001ad0 <updateUVector+0xb8>)
 8001a78:	aa05      	add	r2, sp, #20
 8001a7a:	a90f      	add	r1, sp, #60	; 0x3c
 8001a7c:	4630      	mov	r0, r6
 8001a7e:	f002 f849 	bl	8003b14 <arm_mat_mult_f32>
	arm_mat_mult_f32(&rotation_b0_n, &temp1, &temp3);	// R_b0_n*a1_b0 --> (3x3) * (3x1)
 8001a82:	466a      	mov	r2, sp
 8001a84:	a90a      	add	r1, sp, #40	; 0x28
 8001a86:	4630      	mov	r0, r6
 8001a88:	f002 f844 	bl	8003b14 <arm_mat_mult_f32>
	arm_mat_sub_f32(&temp2, &g_n, &temp0);
 8001a8c:	4e11      	ldr	r6, [pc, #68]	; (8001ad4 <updateUVector+0xbc>)
 8001a8e:	aa0f      	add	r2, sp, #60	; 0x3c
 8001a90:	4631      	mov	r1, r6
 8001a92:	a805      	add	r0, sp, #20
 8001a94:	f002 f878 	bl	8003b88 <arm_mat_sub_f32>
	arm_mat_sub_f32(&temp3, &g_n, &temp1);
 8001a98:	aa0a      	add	r2, sp, #40	; 0x28
 8001a9a:	4631      	mov	r1, r6
 8001a9c:	4668      	mov	r0, sp
 8001a9e:	f002 f873 	bl	8003b88 <arm_mat_sub_f32>
	getNextXLReading(IMU0_data, IMU1_data, xl_b0_f32, xl_b1_f32);
 8001aa2:	4e0d      	ldr	r6, [pc, #52]	; (8001ad8 <updateUVector+0xc0>)
 8001aa4:	4f0d      	ldr	r7, [pc, #52]	; (8001adc <updateUVector+0xc4>)
 8001aa6:	4633      	mov	r3, r6
 8001aa8:	463a      	mov	r2, r7
 8001aaa:	4629      	mov	r1, r5
 8001aac:	4620      	mov	r0, r4
 8001aae:	f7ff fefd 	bl	80018ac <getNextXLReading>
	u_curr_f32[0] = xl_b0_f32[0];
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <updateUVector+0xc8>)
 8001ab6:	601a      	str	r2, [r3, #0]
	u_curr_f32[1] = xl_b0_f32[1];
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	605a      	str	r2, [r3, #4]
	u_curr_f32[2] = xl_b0_f32[2];
 8001abc:	68ba      	ldr	r2, [r7, #8]
 8001abe:	609a      	str	r2, [r3, #8]
	u_curr_f32[3] = xl_b1_f32[0];
 8001ac0:	6832      	ldr	r2, [r6, #0]
 8001ac2:	60da      	str	r2, [r3, #12]
	u_curr_f32[4] = xl_b1_f32[1];
 8001ac4:	6872      	ldr	r2, [r6, #4]
 8001ac6:	611a      	str	r2, [r3, #16]
	u_curr_f32[5] = xl_b1_f32[2];
 8001ac8:	68b2      	ldr	r2, [r6, #8]
 8001aca:	615a      	str	r2, [r3, #20]
}
 8001acc:	b015      	add	sp, #84	; 0x54
 8001ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ad0:	200018bc 	.word	0x200018bc
 8001ad4:	20001880 	.word	0x20001880
 8001ad8:	20001a60 	.word	0x20001a60
 8001adc:	20001a54 	.word	0x20001a54
 8001ae0:	200018f0 	.word	0x200018f0

08001ae4 <createZUPTNode>:
	}

	return curr_phase;
}

ZUPTNode* createZUPTNode(float w_mag) {
 8001ae4:	b508      	push	{r3, lr}
 8001ae6:	ed2d 8b02 	vpush	{d8}
 8001aea:	eeb0 8a40 	vmov.f32	s16, s0
	ZUPTNode* node = (ZUPTNode*)malloc(sizeof(ZUPTNode));
 8001aee:	2008      	movs	r0, #8
 8001af0:	f002 fa32 	bl	8003f58 <malloc>

	node->next = NULL;
 8001af4:	2200      	movs	r2, #0
 8001af6:	6002      	str	r2, [r0, #0]
	node->w_mag_sq = w_mag * w_mag;
 8001af8:	ee28 8a08 	vmul.f32	s16, s16, s16
 8001afc:	ed80 8a01 	vstr	s16, [r0, #4]

	return node;
}
 8001b00:	ecbd 8b02 	vpop	{d8}
 8001b04:	bd08      	pop	{r3, pc}
	...

08001b08 <initZUPT>:
void initZUPT(void) {
 8001b08:	b538      	push	{r3, r4, r5, lr}
	ZUPTHead = (ZUPTNode*)createZUPTNode(0.0);
 8001b0a:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8001b30 <initZUPT+0x28>
 8001b0e:	f7ff ffe9 	bl	8001ae4 <createZUPTNode>
 8001b12:	4605      	mov	r5, r0
 8001b14:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <initZUPT+0x2c>)
 8001b16:	6018      	str	r0, [r3, #0]
	for(i = 0; i < ZUPT_W-1; ++i) {
 8001b18:	2400      	movs	r4, #0
 8001b1a:	e006      	b.n	8001b2a <initZUPT+0x22>
		tempNode->next = (ZUPTNode*)createZUPTNode(0.0);
 8001b1c:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8001b30 <initZUPT+0x28>
 8001b20:	f7ff ffe0 	bl	8001ae4 <createZUPTNode>
 8001b24:	6028      	str	r0, [r5, #0]
	for(i = 0; i < ZUPT_W-1; ++i) {
 8001b26:	3401      	adds	r4, #1
		tempNode = (ZUPTNode*)tempNode->next;
 8001b28:	4605      	mov	r5, r0
	for(i = 0; i < ZUPT_W-1; ++i) {
 8001b2a:	2c12      	cmp	r4, #18
 8001b2c:	ddf6      	ble.n	8001b1c <initZUPT+0x14>
}
 8001b2e:	bd38      	pop	{r3, r4, r5, pc}
 8001b30:	00000000 	.word	0x00000000
 8001b34:	20001818 	.word	0x20001818

08001b38 <init_processing>:
void init_processing(void) {
 8001b38:	b508      	push	{r3, lr}
	arm_mat_init_f32(&m_b0, numRows, numCols, m_b0_f32);
 8001b3a:	4b44      	ldr	r3, [pc, #272]	; (8001c4c <init_processing+0x114>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	2103      	movs	r1, #3
 8001b40:	4843      	ldr	r0, [pc, #268]	; (8001c50 <init_processing+0x118>)
 8001b42:	f001 feed 	bl	8003920 <arm_mat_init_f32>
	arm_mat_init_f32(&g_n, numRows, numCols, g_n_f32);
 8001b46:	4b43      	ldr	r3, [pc, #268]	; (8001c54 <init_processing+0x11c>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	2103      	movs	r1, #3
 8001b4c:	4842      	ldr	r0, [pc, #264]	; (8001c58 <init_processing+0x120>)
 8001b4e:	f001 fee7 	bl	8003920 <arm_mat_init_f32>
	arm_mat_init_f32(&w_avg_b0, numRows, numCols, w_avg_b0_f32);
 8001b52:	4b42      	ldr	r3, [pc, #264]	; (8001c5c <init_processing+0x124>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	2103      	movs	r1, #3
 8001b58:	4841      	ldr	r0, [pc, #260]	; (8001c60 <init_processing+0x128>)
 8001b5a:	f001 fee1 	bl	8003920 <arm_mat_init_f32>
	arm_mat_init_f32(&rotation_b0_n, numRows, numCols, rotation_b0_n_f32);
 8001b5e:	4b41      	ldr	r3, [pc, #260]	; (8001c64 <init_processing+0x12c>)
 8001b60:	2203      	movs	r2, #3
 8001b62:	4611      	mov	r1, r2
 8001b64:	4840      	ldr	r0, [pc, #256]	; (8001c68 <init_processing+0x130>)
 8001b66:	f001 fedb 	bl	8003920 <arm_mat_init_f32>
	arm_mat_init_f32(&x_prev, numRows, numCols, x_prev_f32);
 8001b6a:	4b40      	ldr	r3, [pc, #256]	; (8001c6c <init_processing+0x134>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	210c      	movs	r1, #12
 8001b70:	483f      	ldr	r0, [pc, #252]	; (8001c70 <init_processing+0x138>)
 8001b72:	f001 fed5 	bl	8003920 <arm_mat_init_f32>
	arm_mat_init_f32(&x_curr, numRows, numCols, x_curr_f32);
 8001b76:	4b3f      	ldr	r3, [pc, #252]	; (8001c74 <init_processing+0x13c>)
 8001b78:	2201      	movs	r2, #1
 8001b7a:	210c      	movs	r1, #12
 8001b7c:	483e      	ldr	r0, [pc, #248]	; (8001c78 <init_processing+0x140>)
 8001b7e:	f001 fecf 	bl	8003920 <arm_mat_init_f32>
	arm_mat_init_f32(&F_matrix, numRows, numCols, F_matrix_f32);
 8001b82:	4b3e      	ldr	r3, [pc, #248]	; (8001c7c <init_processing+0x144>)
 8001b84:	220c      	movs	r2, #12
 8001b86:	4611      	mov	r1, r2
 8001b88:	483d      	ldr	r0, [pc, #244]	; (8001c80 <init_processing+0x148>)
 8001b8a:	f001 fec9 	bl	8003920 <arm_mat_init_f32>
	arm_mat_init_f32(&B_matrix, numRows, numCols, B_matrix_f32);
 8001b8e:	4b3d      	ldr	r3, [pc, #244]	; (8001c84 <init_processing+0x14c>)
 8001b90:	2206      	movs	r2, #6
 8001b92:	210c      	movs	r1, #12
 8001b94:	483c      	ldr	r0, [pc, #240]	; (8001c88 <init_processing+0x150>)
 8001b96:	f001 fec3 	bl	8003920 <arm_mat_init_f32>
	arm_mat_init_f32(&u_curr, numRows, numCols, u_curr_f32);
 8001b9a:	4b3c      	ldr	r3, [pc, #240]	; (8001c8c <init_processing+0x154>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	2106      	movs	r1, #6
 8001ba0:	483b      	ldr	r0, [pc, #236]	; (8001c90 <init_processing+0x158>)
 8001ba2:	f001 febd 	bl	8003920 <arm_mat_init_f32>
	arm_mat_init_f32(&H_swing, numRows, numCols, H_swing_f32);
 8001ba6:	4b3b      	ldr	r3, [pc, #236]	; (8001c94 <init_processing+0x15c>)
 8001ba8:	220c      	movs	r2, #12
 8001baa:	2106      	movs	r1, #6
 8001bac:	483a      	ldr	r0, [pc, #232]	; (8001c98 <init_processing+0x160>)
 8001bae:	f001 feb7 	bl	8003920 <arm_mat_init_f32>
	arm_mat_init_f32(&H_stance, numRows, numCols, H_stance_f32);
 8001bb2:	4b3a      	ldr	r3, [pc, #232]	; (8001c9c <init_processing+0x164>)
 8001bb4:	220c      	movs	r2, #12
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	4839      	ldr	r0, [pc, #228]	; (8001ca0 <init_processing+0x168>)
 8001bba:	f001 feb1 	bl	8003920 <arm_mat_init_f32>
	arm_mat_init_f32(&Z_swing, numRows, numCols, Z_swing_f32);
 8001bbe:	4b39      	ldr	r3, [pc, #228]	; (8001ca4 <init_processing+0x16c>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	2106      	movs	r1, #6
 8001bc4:	4838      	ldr	r0, [pc, #224]	; (8001ca8 <init_processing+0x170>)
 8001bc6:	f001 feab 	bl	8003920 <arm_mat_init_f32>
	arm_mat_init_f32(&Z_stance, numRows, numCols, Z_stance_f32);
 8001bca:	4b38      	ldr	r3, [pc, #224]	; (8001cac <init_processing+0x174>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	210c      	movs	r1, #12
 8001bd0:	4837      	ldr	r0, [pc, #220]	; (8001cb0 <init_processing+0x178>)
 8001bd2:	f001 fea5 	bl	8003920 <arm_mat_init_f32>
	arm_mat_init_f32(&K_swing, numRows, numCols, K_swing_f32);
 8001bd6:	4b37      	ldr	r3, [pc, #220]	; (8001cb4 <init_processing+0x17c>)
 8001bd8:	2206      	movs	r2, #6
 8001bda:	210c      	movs	r1, #12
 8001bdc:	4836      	ldr	r0, [pc, #216]	; (8001cb8 <init_processing+0x180>)
 8001bde:	f001 fe9f 	bl	8003920 <arm_mat_init_f32>
	arm_mat_init_f32(&K_stance, numRows, numCols, K_stance_f32);
 8001be2:	4b36      	ldr	r3, [pc, #216]	; (8001cbc <init_processing+0x184>)
 8001be4:	220c      	movs	r2, #12
 8001be6:	4611      	mov	r1, r2
 8001be8:	4835      	ldr	r0, [pc, #212]	; (8001cc0 <init_processing+0x188>)
 8001bea:	f001 fe99 	bl	8003920 <arm_mat_init_f32>
	arm_mat_init_f32(&R_swing, numRows, numCols, R_swing_f32);
 8001bee:	4b35      	ldr	r3, [pc, #212]	; (8001cc4 <init_processing+0x18c>)
 8001bf0:	2206      	movs	r2, #6
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	4834      	ldr	r0, [pc, #208]	; (8001cc8 <init_processing+0x190>)
 8001bf6:	f001 fe93 	bl	8003920 <arm_mat_init_f32>
	arm_mat_init_f32(&R_stance, numRows, numCols, R_stance_f32);
 8001bfa:	4b34      	ldr	r3, [pc, #208]	; (8001ccc <init_processing+0x194>)
 8001bfc:	220c      	movs	r2, #12
 8001bfe:	4611      	mov	r1, r2
 8001c00:	4833      	ldr	r0, [pc, #204]	; (8001cd0 <init_processing+0x198>)
 8001c02:	f001 fe8d 	bl	8003920 <arm_mat_init_f32>
	arm_mat_init_f32(&P_prev, numRows, numCols, P_prev_f32);
 8001c06:	4b33      	ldr	r3, [pc, #204]	; (8001cd4 <init_processing+0x19c>)
 8001c08:	220c      	movs	r2, #12
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	4832      	ldr	r0, [pc, #200]	; (8001cd8 <init_processing+0x1a0>)
 8001c0e:	f001 fe87 	bl	8003920 <arm_mat_init_f32>
	arm_mat_init_f32(&P_curr, numRows, numCols, P_curr_f32);
 8001c12:	4b32      	ldr	r3, [pc, #200]	; (8001cdc <init_processing+0x1a4>)
 8001c14:	220c      	movs	r2, #12
 8001c16:	4611      	mov	r1, r2
 8001c18:	4831      	ldr	r0, [pc, #196]	; (8001ce0 <init_processing+0x1a8>)
 8001c1a:	f001 fe81 	bl	8003920 <arm_mat_init_f32>
	arm_mat_init_f32(&P_minus, numRows, numCols, P_minus_f32);
 8001c1e:	4b31      	ldr	r3, [pc, #196]	; (8001ce4 <init_processing+0x1ac>)
 8001c20:	220c      	movs	r2, #12
 8001c22:	4611      	mov	r1, r2
 8001c24:	4830      	ldr	r0, [pc, #192]	; (8001ce8 <init_processing+0x1b0>)
 8001c26:	f001 fe7b 	bl	8003920 <arm_mat_init_f32>
	arm_mat_init_f32(&Q_prev, numRows, numCols, Q_prev_f32);
 8001c2a:	4b30      	ldr	r3, [pc, #192]	; (8001cec <init_processing+0x1b4>)
 8001c2c:	220c      	movs	r2, #12
 8001c2e:	4611      	mov	r1, r2
 8001c30:	482f      	ldr	r0, [pc, #188]	; (8001cf0 <init_processing+0x1b8>)
 8001c32:	f001 fe75 	bl	8003920 <arm_mat_init_f32>
	initZUPT(); // Initialize ZUPT phase detector
 8001c36:	f7ff ff67 	bl	8001b08 <initZUPT>
	initRingBuffers();
 8001c3a:	f7ff fd4f 	bl	80016dc <initRingBuffers>
	arm_quaternion_normalize_f32(q_f32, q_f32, 1); // normalize initial quaternion
 8001c3e:	482d      	ldr	r0, [pc, #180]	; (8001cf4 <init_processing+0x1bc>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	4601      	mov	r1, r0
 8001c44:	f002 f855 	bl	8003cf2 <arm_quaternion_normalize_f32>
}
 8001c48:	bd08      	pop	{r3, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200012a4 	.word	0x200012a4
 8001c50:	20001894 	.word	0x20001894
 8001c54:	20001298 	.word	0x20001298
 8001c58:	20001880 	.word	0x20001880
 8001c5c:	20001910 	.word	0x20001910
 8001c60:	20001908 	.word	0x20001908
 8001c64:	200018c4 	.word	0x200018c4
 8001c68:	200018bc 	.word	0x200018bc
 8001c6c:	200012f0 	.word	0x200012f0
 8001c70:	2000198c 	.word	0x2000198c
 8001c74:	200012c0 	.word	0x200012c0
 8001c78:	20001984 	.word	0x20001984
 8001c7c:	20000124 	.word	0x20000124
 8001c80:	20001460 	.word	0x20001460
 8001c84:	20000004 	.word	0x20000004
 8001c88:	20001458 	.word	0x20001458
 8001c8c:	200018f0 	.word	0x200018f0
 8001c90:	200018e8 	.word	0x200018e8
 8001c94:	200005a4 	.word	0x200005a4
 8001c98:	20001470 	.word	0x20001470
 8001c9c:	20000364 	.word	0x20000364
 8001ca0:	20001468 	.word	0x20001468
 8001ca4:	2000185c 	.word	0x2000185c
 8001ca8:	20001854 	.word	0x20001854
 8001cac:	20001824 	.word	0x20001824
 8001cb0:	2000181c 	.word	0x2000181c
 8001cb4:	200016c8 	.word	0x200016c8
 8001cb8:	200016c0 	.word	0x200016c0
 8001cbc:	20001480 	.word	0x20001480
 8001cc0:	20001478 	.word	0x20001478
 8001cc4:	20001204 	.word	0x20001204
 8001cc8:	20001810 	.word	0x20001810
 8001ccc:	20000fc4 	.word	0x20000fc4
 8001cd0:	20001808 	.word	0x20001808
 8001cd4:	20000b44 	.word	0x20000b44
 8001cd8:	200017f8 	.word	0x200017f8
 8001cdc:	200006c4 	.word	0x200006c4
 8001ce0:	200017e8 	.word	0x200017e8
 8001ce4:	20000904 	.word	0x20000904
 8001ce8:	200017f0 	.word	0x200017f0
 8001cec:	20000d84 	.word	0x20000d84
 8001cf0:	20001800 	.word	0x20001800
 8001cf4:	200012b0 	.word	0x200012b0

08001cf8 <detectZUPTPhase>:
enum PHASE detectZUPTPhase(void) {
 8001cf8:	b510      	push	{r4, lr}
 8001cfa:	ed2d 8b02 	vpush	{d8}
	assert(ZUPTHead != NULL);
 8001cfe:	4b40      	ldr	r3, [pc, #256]	; (8001e00 <detectZUPTPhase+0x108>)
 8001d00:	6818      	ldr	r0, [r3, #0]
 8001d02:	b140      	cbz	r0, 8001d16 <detectZUPTPhase+0x1e>
	ZUPTNode* tempNode = (ZUPTNode*)ZUPTHead->next;
 8001d04:	6804      	ldr	r4, [r0, #0]
	free(ZUPTHead);
 8001d06:	f002 f92f 	bl	8003f68 <free>
	ZUPTHead = tempNode;
 8001d0a:	4b3d      	ldr	r3, [pc, #244]	; (8001e00 <detectZUPTPhase+0x108>)
 8001d0c:	601c      	str	r4, [r3, #0]
	for(i = 0; i < ZUPT_W-2; ++i) {
 8001d0e:	2300      	movs	r3, #0
	float sum = 0;
 8001d10:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8001e04 <detectZUPTPhase+0x10c>
	for(i = 0; i < ZUPT_W-2; ++i) {
 8001d14:	e00c      	b.n	8001d30 <detectZUPTPhase+0x38>
	assert(ZUPTHead != NULL);
 8001d16:	4b3c      	ldr	r3, [pc, #240]	; (8001e08 <detectZUPTPhase+0x110>)
 8001d18:	4a3c      	ldr	r2, [pc, #240]	; (8001e0c <detectZUPTPhase+0x114>)
 8001d1a:	f240 419e 	movw	r1, #1182	; 0x49e
 8001d1e:	483c      	ldr	r0, [pc, #240]	; (8001e10 <detectZUPTPhase+0x118>)
 8001d20:	f002 f8c0 	bl	8003ea4 <__assert_func>
		sum += tempNode->w_mag_sq;
 8001d24:	ed94 7a01 	vldr	s14, [r4, #4]
 8001d28:	ee77 7a87 	vadd.f32	s15, s15, s14
		tempNode = (ZUPTNode*)tempNode->next;
 8001d2c:	6824      	ldr	r4, [r4, #0]
	for(i = 0; i < ZUPT_W-2; ++i) {
 8001d2e:	3301      	adds	r3, #1
 8001d30:	2b11      	cmp	r3, #17
 8001d32:	dc08      	bgt.n	8001d46 <detectZUPTPhase+0x4e>
		assert(tempNode != NULL);
 8001d34:	2c00      	cmp	r4, #0
 8001d36:	d1f5      	bne.n	8001d24 <detectZUPTPhase+0x2c>
 8001d38:	4b36      	ldr	r3, [pc, #216]	; (8001e14 <detectZUPTPhase+0x11c>)
 8001d3a:	4a34      	ldr	r2, [pc, #208]	; (8001e0c <detectZUPTPhase+0x114>)
 8001d3c:	f240 41a7 	movw	r1, #1191	; 0x4a7
 8001d40:	4833      	ldr	r0, [pc, #204]	; (8001e10 <detectZUPTPhase+0x118>)
 8001d42:	f002 f8af 	bl	8003ea4 <__assert_func>
	assert(tempNode != NULL);
 8001d46:	2c00      	cmp	r4, #0
 8001d48:	d03d      	beq.n	8001dc6 <detectZUPTPhase+0xce>
	sum += tempNode->w_mag_sq; // last node
 8001d4a:	ed94 8a01 	vldr	s16, [r4, #4]
 8001d4e:	ee38 8a27 	vadd.f32	s16, s16, s15
	tempNode->next = (ZUPTNode*)createZUPTNode(w_avg_b0_mag);
 8001d52:	4b31      	ldr	r3, [pc, #196]	; (8001e18 <detectZUPTPhase+0x120>)
 8001d54:	ed93 0a00 	vldr	s0, [r3]
 8001d58:	f7ff fec4 	bl	8001ae4 <createZUPTNode>
 8001d5c:	6020      	str	r0, [r4, #0]
	assert(tempNode->next != NULL);
 8001d5e:	2800      	cmp	r0, #0
 8001d60:	d038      	beq.n	8001dd4 <detectZUPTPhase+0xdc>
	sum += tempNode->w_mag_sq;
 8001d62:	edd0 7a01 	vldr	s15, [r0, #4]
	float Tw = sum * ZUPT_SCALE_FACTOR;
 8001d66:	ee77 7a88 	vadd.f32	s15, s15, s16
 8001d6a:	ee17 0a90 	vmov	r0, s15
 8001d6e:	f7fe fbe3 	bl	8000538 <__aeabi_f2d>
 8001d72:	a321      	add	r3, pc, #132	; (adr r3, 8001df8 <detectZUPTPhase+0x100>)
 8001d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d78:	f7fe fd60 	bl	800083c <__aeabi_ddiv>
 8001d7c:	f7fe fef6 	bl	8000b6c <__aeabi_d2f>
 8001d80:	ee07 0a90 	vmov	s15, r0
	enum PHASE detected_phase = (Tw < ZUPT_THRESHOLD) ? STANCE : SWING;
 8001d84:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001e1c <detectZUPTPhase+0x124>
 8001d88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d90:	bf4c      	ite	mi
 8001d92:	2301      	movmi	r3, #1
 8001d94:	2300      	movpl	r3, #0
	if (detected_phase != curr_phase) {
 8001d96:	4a22      	ldr	r2, [pc, #136]	; (8001e20 <detectZUPTPhase+0x128>)
 8001d98:	7812      	ldrb	r2, [r2, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d00e      	beq.n	8001dbc <detectZUPTPhase+0xc4>
		if (detected_phase == SWING) {
 8001d9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da6:	d41c      	bmi.n	8001de2 <detectZUPTPhase+0xea>
			++phase_counter;
 8001da8:	4a1e      	ldr	r2, [pc, #120]	; (8001e24 <detectZUPTPhase+0x12c>)
 8001daa:	7813      	ldrb	r3, [r2, #0]
 8001dac:	3301      	adds	r3, #1
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	7013      	strb	r3, [r2, #0]
			curr_phase = (phase_counter == PHASE_INTERVAL_THRESHOLD) ? SWING : STANCE;
 8001db2:	3b0a      	subs	r3, #10
 8001db4:	bf18      	it	ne
 8001db6:	2301      	movne	r3, #1
 8001db8:	4a19      	ldr	r2, [pc, #100]	; (8001e20 <detectZUPTPhase+0x128>)
 8001dba:	7013      	strb	r3, [r2, #0]
}
 8001dbc:	4b18      	ldr	r3, [pc, #96]	; (8001e20 <detectZUPTPhase+0x128>)
 8001dbe:	7818      	ldrb	r0, [r3, #0]
 8001dc0:	ecbd 8b02 	vpop	{d8}
 8001dc4:	bd10      	pop	{r4, pc}
	assert(tempNode != NULL);
 8001dc6:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <detectZUPTPhase+0x11c>)
 8001dc8:	4a10      	ldr	r2, [pc, #64]	; (8001e0c <detectZUPTPhase+0x114>)
 8001dca:	f240 41ab 	movw	r1, #1195	; 0x4ab
 8001dce:	4810      	ldr	r0, [pc, #64]	; (8001e10 <detectZUPTPhase+0x118>)
 8001dd0:	f002 f868 	bl	8003ea4 <__assert_func>
	assert(tempNode->next != NULL);
 8001dd4:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <detectZUPTPhase+0x130>)
 8001dd6:	4a0d      	ldr	r2, [pc, #52]	; (8001e0c <detectZUPTPhase+0x114>)
 8001dd8:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8001ddc:	480c      	ldr	r0, [pc, #48]	; (8001e10 <detectZUPTPhase+0x118>)
 8001dde:	f002 f861 	bl	8003ea4 <__assert_func>
			--phase_counter;
 8001de2:	4a10      	ldr	r2, [pc, #64]	; (8001e24 <detectZUPTPhase+0x12c>)
 8001de4:	7813      	ldrb	r3, [r2, #0]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	7013      	strb	r3, [r2, #0]
			curr_phase = (phase_counter == 0) ? STANCE : SWING;
 8001dec:	fab3 f383 	clz	r3, r3
 8001df0:	095b      	lsrs	r3, r3, #5
 8001df2:	4a0b      	ldr	r2, [pc, #44]	; (8001e20 <detectZUPTPhase+0x128>)
 8001df4:	7013      	strb	r3, [r2, #0]
 8001df6:	e7e1      	b.n	8001dbc <detectZUPTPhase+0xc4>
 8001df8:	cccccccd 	.word	0xcccccccd
 8001dfc:	3f60624d 	.word	0x3f60624d
 8001e00:	20001818 	.word	0x20001818
 8001e04:	00000000 	.word	0x00000000
 8001e08:	080060e8 	.word	0x080060e8
 8001e0c:	08006144 	.word	0x08006144
 8001e10:	080060fc 	.word	0x080060fc
 8001e14:	08006118 	.word	0x08006118
 8001e18:	2000191c 	.word	0x2000191c
 8001e1c:	4684d000 	.word	0x4684d000
 8001e20:	20001294 	.word	0x20001294
 8001e24:	200018a8 	.word	0x200018a8
 8001e28:	0800612c 	.word	0x0800612c

08001e2c <calculateCorrectedState>:
		float timeDelta) { // TODO Verify this
 8001e2c:	b530      	push	{r4, r5, lr}
 8001e2e:	ed2d 8b02 	vpush	{d8}
 8001e32:	b089      	sub	sp, #36	; 0x24
 8001e34:	4604      	mov	r4, r0
 8001e36:	460d      	mov	r5, r1
 8001e38:	eeb0 8a40 	vmov.f32	s16, s0
	calculateAvgAngularRate(IMU0_data, IMU1_data); // w_avg_b0
 8001e3c:	f7ff fd0a 	bl	8001854 <calculateAvgAngularRate>
	calculateRotationMatrix(timeDelta);	// R_b0_n
 8001e40:	eeb0 0a48 	vmov.f32	s0, s16
 8001e44:	f7ff f8ee 	bl	8001024 <calculateRotationMatrix>
	updateFMatrix(timeDelta);	// Update F with new timeDelta
 8001e48:	eeb0 0a48 	vmov.f32	s0, s16
 8001e4c:	f7ff fb62 	bl	8001514 <updateFMatrix>
	updateBMatrix(timeDelta);	// Update B with new timeDelta
 8001e50:	eeb0 0a48 	vmov.f32	s0, s16
 8001e54:	f7ff fb70 	bl	8001538 <updateBMatrix>
	updateUVector(IMU0_data, IMU1_data);	// Update u_curr with IMU data
 8001e58:	4629      	mov	r1, r5
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	f7ff fddc 	bl	8001a18 <updateUVector>
	calculateStateEstimation();	// x(k) = F*x(k-1) + B*u(k)
 8001e60:	f7ff f94a 	bl	80010f8 <calculateStateEstimation>
	calculateStateEstimationErrorCovariance();	// P-(k) = F*P(k-1)*F^T + Q(k-1)
 8001e64:	f7ff f998 	bl	8001198 <calculateStateEstimationErrorCovariance>
	phase = detectZUPTPhase();
 8001e68:	f7ff ff46 	bl	8001cf8 <detectZUPTPhase>
	if (phase == SWING) {
 8001e6c:	4604      	mov	r4, r0
 8001e6e:	2800      	cmp	r0, #0
 8001e70:	f040 8090 	bne.w	8001f94 <calculateCorrectedState+0x168>
		Hi = H_swing;
 8001e74:	4b59      	ldr	r3, [pc, #356]	; (8001fdc <calculateCorrectedState+0x1b0>)
 8001e76:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e7a:	ab08      	add	r3, sp, #32
 8001e7c:	e903 0003 	stmdb	r3, {r0, r1}
		Zi = Z_swing;
 8001e80:	4a57      	ldr	r2, [pc, #348]	; (8001fe0 <calculateCorrectedState+0x1b4>)
 8001e82:	ab04      	add	r3, sp, #16
 8001e84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e88:	e883 0003 	stmia.w	r3, {r0, r1}
		Ri = R_swing;
 8001e8c:	4a55      	ldr	r2, [pc, #340]	; (8001fe4 <calculateCorrectedState+0x1b8>)
 8001e8e:	ab02      	add	r3, sp, #8
 8001e90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e94:	e883 0003 	stmia.w	r3, {r0, r1}
		Ki = K_swing;
 8001e98:	4a53      	ldr	r2, [pc, #332]	; (8001fe8 <calculateCorrectedState+0x1bc>)
 8001e9a:	466b      	mov	r3, sp
 8001e9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ea0:	e883 0003 	stmia.w	r3, {r0, r1}
	updateZiVector(&Zi);	// Update Observation Vector Z for optimal state estimation
 8001ea4:	a804      	add	r0, sp, #16
 8001ea6:	f7ff fbdf 	bl	8001668 <updateZiVector>
	calculateGainMatrix(&Ki, &Hi, &Ri); // Ki(k) = P-(k)*Hi^T * (Hi*P-(k)*Hi^T + Ri(k))^-1
 8001eaa:	aa02      	add	r2, sp, #8
 8001eac:	a906      	add	r1, sp, #24
 8001eae:	4668      	mov	r0, sp
 8001eb0:	f7ff f9a0 	bl	80011f4 <calculateGainMatrix>
	calculateOptimalStateEstimation(&Ki, &Zi, &Hi);	// x(k) <-- x_best(k) = x(k) + Ki(k)*(Zi(k) - Hi*x(k))
 8001eb4:	aa06      	add	r2, sp, #24
 8001eb6:	a904      	add	r1, sp, #16
 8001eb8:	4668      	mov	r0, sp
 8001eba:	f7ff fa23 	bl	8001304 <calculateOptimalStateEstimation>
	if (phase == STANCE) {
 8001ebe:	2c01      	cmp	r4, #1
 8001ec0:	f000 8081 	beq.w	8001fc6 <calculateCorrectedState+0x19a>
	if (fabs(x_curr_f32[8]) > v_gate) {
 8001ec4:	4b49      	ldr	r3, [pc, #292]	; (8001fec <calculateCorrectedState+0x1c0>)
 8001ec6:	edd3 7a08 	vldr	s15, [r3, #32]
 8001eca:	eef0 6ae7 	vabs.f32	s13, s15
 8001ece:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001ff0 <calculateCorrectedState+0x1c4>
 8001ed2:	eef4 6ac7 	vcmpe.f32	s13, s14
 8001ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eda:	dd0d      	ble.n	8001ef8 <calculateCorrectedState+0xcc>
		x_curr_f32[8] = v_gate * (x_curr_f32[8] > 0 ? 1 : -1);
 8001edc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee4:	dd74      	ble.n	8001fd0 <calculateCorrectedState+0x1a4>
 8001ee6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001eea:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001ff0 <calculateCorrectedState+0x1c4>
 8001eee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ef2:	4b3e      	ldr	r3, [pc, #248]	; (8001fec <calculateCorrectedState+0x1c0>)
 8001ef4:	edc3 7a08 	vstr	s15, [r3, #32]
	if (fabs(x_curr_f32[11]) > v_gate) {
 8001ef8:	4b3c      	ldr	r3, [pc, #240]	; (8001fec <calculateCorrectedState+0x1c0>)
 8001efa:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001efe:	eef0 6ae7 	vabs.f32	s13, s15
 8001f02:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001ff0 <calculateCorrectedState+0x1c4>
 8001f06:	eef4 6ac7 	vcmpe.f32	s13, s14
 8001f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f0e:	dd0d      	ble.n	8001f2c <calculateCorrectedState+0x100>
		x_curr_f32[11] = v_gate * (x_curr_f32[11] > 0 ? 1 : -1);
 8001f10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f18:	dd5d      	ble.n	8001fd6 <calculateCorrectedState+0x1aa>
 8001f1a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001f1e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001ff0 <calculateCorrectedState+0x1c4>
 8001f22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f26:	4b31      	ldr	r3, [pc, #196]	; (8001fec <calculateCorrectedState+0x1c0>)
 8001f28:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	optimal_f32[0] = (x_curr_f32[0] + x_curr_f32[3]) / 2;
 8001f2c:	4b2f      	ldr	r3, [pc, #188]	; (8001fec <calculateCorrectedState+0x1c0>)
 8001f2e:	ed93 7a00 	vldr	s14, [r3]
 8001f32:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f3a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001f3e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001f42:	4a2c      	ldr	r2, [pc, #176]	; (8001ff4 <calculateCorrectedState+0x1c8>)
 8001f44:	ed82 7a00 	vstr	s14, [r2]
	optimal_f32[1] = (x_curr_f32[1] + x_curr_f32[4]) / 2;
 8001f48:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f4c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f54:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001f58:	ed82 7a01 	vstr	s14, [r2, #4]
	optimal_f32[2] = (x_curr_f32[2] + x_curr_f32[5]) / 2;
 8001f5c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f60:	ed93 7a05 	vldr	s14, [r3, #20]
 8001f64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f68:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f6c:	edc2 7a02 	vstr	s15, [r2, #8]
	calculateOptimalEstimationErrorCovariance(&Ki, &Hi, &Ri);	// P(k) = (I - Ki(k)*Hi)*P-(k)
 8001f70:	aa02      	add	r2, sp, #8
 8001f72:	a906      	add	r1, sp, #24
 8001f74:	4668      	mov	r0, sp
 8001f76:	f7ff fa2b 	bl	80013d0 <calculateOptimalEstimationErrorCovariance>
	updatePreviousMatrices();	// update x_prev, P_prev, (Q_prev?) // TODO Add Q_prev to this?
 8001f7a:	f7ff fb01 	bl	8001580 <updatePreviousMatrices>
	phase_out = (float)phase;
 8001f7e:	ee07 4a90 	vmov	s15, r4
 8001f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f86:	4b1c      	ldr	r3, [pc, #112]	; (8001ff8 <calculateCorrectedState+0x1cc>)
 8001f88:	edc3 7a00 	vstr	s15, [r3]
}
 8001f8c:	b009      	add	sp, #36	; 0x24
 8001f8e:	ecbd 8b02 	vpop	{d8}
 8001f92:	bd30      	pop	{r4, r5, pc}
		Hi = H_stance;
 8001f94:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <calculateCorrectedState+0x1d0>)
 8001f96:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f9a:	ab08      	add	r3, sp, #32
 8001f9c:	e903 0003 	stmdb	r3, {r0, r1}
		Zi = Z_stance;
 8001fa0:	4a17      	ldr	r2, [pc, #92]	; (8002000 <calculateCorrectedState+0x1d4>)
 8001fa2:	ab04      	add	r3, sp, #16
 8001fa4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fa8:	e883 0003 	stmia.w	r3, {r0, r1}
		Ri = R_stance;
 8001fac:	4a15      	ldr	r2, [pc, #84]	; (8002004 <calculateCorrectedState+0x1d8>)
 8001fae:	ab02      	add	r3, sp, #8
 8001fb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fb4:	e883 0003 	stmia.w	r3, {r0, r1}
		Ki = K_stance;
 8001fb8:	4a13      	ldr	r2, [pc, #76]	; (8002008 <calculateCorrectedState+0x1dc>)
 8001fba:	466b      	mov	r3, sp
 8001fbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fc0:	e883 0003 	stmia.w	r3, {r0, r1}
 8001fc4:	e76e      	b.n	8001ea4 <calculateCorrectedState+0x78>
		x_curr_f32[2] = 0;
 8001fc6:	4b09      	ldr	r3, [pc, #36]	; (8001fec <calculateCorrectedState+0x1c0>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
		x_curr_f32[5] = 0;
 8001fcc:	615a      	str	r2, [r3, #20]
 8001fce:	e779      	b.n	8001ec4 <calculateCorrectedState+0x98>
		x_curr_f32[8] = v_gate * (x_curr_f32[8] > 0 ? 1 : -1);
 8001fd0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001fd4:	e789      	b.n	8001eea <calculateCorrectedState+0xbe>
		x_curr_f32[11] = v_gate * (x_curr_f32[11] > 0 ? 1 : -1);
 8001fd6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001fda:	e7a0      	b.n	8001f1e <calculateCorrectedState+0xf2>
 8001fdc:	20001470 	.word	0x20001470
 8001fe0:	20001854 	.word	0x20001854
 8001fe4:	20001810 	.word	0x20001810
 8001fe8:	200016c0 	.word	0x200016c0
 8001fec:	200012c0 	.word	0x200012c0
 8001ff0:	3e99999a 	.word	0x3e99999a
 8001ff4:	2000189c 	.word	0x2000189c
 8001ff8:	200018ac 	.word	0x200018ac
 8001ffc:	20001468 	.word	0x20001468
 8002000:	2000181c 	.word	0x2000181c
 8002004:	20001808 	.word	0x20001808
 8002008:	20001478 	.word	0x20001478

0800200c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800200c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200e:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <HAL_MspInit+0x2c>)
 8002010:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002012:	f042 0201 	orr.w	r2, r2, #1
 8002016:	661a      	str	r2, [r3, #96]	; 0x60
 8002018:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800201a:	f002 0201 	and.w	r2, r2, #1
 800201e:	9200      	str	r2, [sp, #0]
 8002020:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002022:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002024:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002028:	659a      	str	r2, [r3, #88]	; 0x58
 800202a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002030:	9301      	str	r3, [sp, #4]
 8002032:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002034:	b002      	add	sp, #8
 8002036:	4770      	bx	lr
 8002038:	40021000 	.word	0x40021000

0800203c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800203c:	b500      	push	{lr}
 800203e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002040:	2300      	movs	r3, #0
 8002042:	9303      	str	r3, [sp, #12]
 8002044:	9304      	str	r3, [sp, #16]
 8002046:	9305      	str	r3, [sp, #20]
 8002048:	9306      	str	r3, [sp, #24]
 800204a:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 800204c:	6802      	ldr	r2, [r0, #0]
 800204e:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <HAL_SPI_MspInit+0x64>)
 8002050:	429a      	cmp	r2, r3
 8002052:	d002      	beq.n	800205a <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002054:	b009      	add	sp, #36	; 0x24
 8002056:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 800205a:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 800205e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002060:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002064:	661a      	str	r2, [r3, #96]	; 0x60
 8002066:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002068:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800206c:	9201      	str	r2, [sp, #4]
 800206e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002070:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002072:	f042 0201 	orr.w	r2, r2, #1
 8002076:	64da      	str	r2, [r3, #76]	; 0x4c
 8002078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	9302      	str	r3, [sp, #8]
 8002080:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8002082:	23c2      	movs	r3, #194	; 0xc2
 8002084:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002086:	2302      	movs	r3, #2
 8002088:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208a:	2303      	movs	r3, #3
 800208c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800208e:	2305      	movs	r3, #5
 8002090:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002092:	a903      	add	r1, sp, #12
 8002094:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002098:	f000 f94a 	bl	8002330 <HAL_GPIO_Init>
}
 800209c:	e7da      	b.n	8002054 <HAL_SPI_MspInit+0x18>
 800209e:	bf00      	nop
 80020a0:	40013000 	.word	0x40013000

080020a4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020a4:	e7fe      	b.n	80020a4 <NMI_Handler>

080020a6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020a6:	e7fe      	b.n	80020a6 <HardFault_Handler>

080020a8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a8:	e7fe      	b.n	80020a8 <MemManage_Handler>

080020aa <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020aa:	e7fe      	b.n	80020aa <BusFault_Handler>

080020ac <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020ac:	e7fe      	b.n	80020ac <UsageFault_Handler>

080020ae <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ae:	4770      	bx	lr

080020b0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020b0:	4770      	bx	lr

080020b2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020b2:	4770      	bx	lr

080020b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020b6:	f000 f8cb 	bl	8002250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020ba:	bd08      	pop	{r3, pc}

080020bc <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80020bc:	2001      	movs	r0, #1
 80020be:	4770      	bx	lr

080020c0 <_kill>:

int _kill(int pid, int sig)
{
 80020c0:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020c2:	f001 ff0d 	bl	8003ee0 <__errno>
 80020c6:	2316      	movs	r3, #22
 80020c8:	6003      	str	r3, [r0, #0]
  return -1;
}
 80020ca:	f04f 30ff 	mov.w	r0, #4294967295
 80020ce:	bd08      	pop	{r3, pc}

080020d0 <_exit>:

void _exit (int status)
{
 80020d0:	b508      	push	{r3, lr}
  _kill(status, -1);
 80020d2:	f04f 31ff 	mov.w	r1, #4294967295
 80020d6:	f7ff fff3 	bl	80020c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020da:	e7fe      	b.n	80020da <_exit+0xa>

080020dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020dc:	b570      	push	{r4, r5, r6, lr}
 80020de:	460c      	mov	r4, r1
 80020e0:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e2:	2500      	movs	r5, #0
 80020e4:	e006      	b.n	80020f4 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 80020e6:	f3af 8000 	nop.w
 80020ea:	4621      	mov	r1, r4
 80020ec:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f0:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 80020f2:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f4:	42b5      	cmp	r5, r6
 80020f6:	dbf6      	blt.n	80020e6 <_read+0xa>
  }

  return len;
}
 80020f8:	4630      	mov	r0, r6
 80020fa:	bd70      	pop	{r4, r5, r6, pc}

080020fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020fc:	b570      	push	{r4, r5, r6, lr}
 80020fe:	460c      	mov	r4, r1
 8002100:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002102:	2500      	movs	r5, #0
 8002104:	e004      	b.n	8002110 <_write+0x14>
  {
    __io_putchar(*ptr++);
 8002106:	f814 0b01 	ldrb.w	r0, [r4], #1
 800210a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800210e:	3501      	adds	r5, #1
 8002110:	42b5      	cmp	r5, r6
 8002112:	dbf8      	blt.n	8002106 <_write+0xa>
  }
  return len;
}
 8002114:	4630      	mov	r0, r6
 8002116:	bd70      	pop	{r4, r5, r6, pc}

08002118 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8002118:	f04f 30ff 	mov.w	r0, #4294967295
 800211c:	4770      	bx	lr

0800211e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800211e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002122:	604b      	str	r3, [r1, #4]
  return 0;
}
 8002124:	2000      	movs	r0, #0
 8002126:	4770      	bx	lr

08002128 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002128:	2001      	movs	r0, #1
 800212a:	4770      	bx	lr

0800212c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800212c:	2000      	movs	r0, #0
 800212e:	4770      	bx	lr

08002130 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002130:	b510      	push	{r4, lr}
 8002132:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002134:	4a0c      	ldr	r2, [pc, #48]	; (8002168 <_sbrk+0x38>)
 8002136:	490d      	ldr	r1, [pc, #52]	; (800216c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002138:	480d      	ldr	r0, [pc, #52]	; (8002170 <_sbrk+0x40>)
 800213a:	6800      	ldr	r0, [r0, #0]
 800213c:	b140      	cbz	r0, 8002150 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800213e:	480c      	ldr	r0, [pc, #48]	; (8002170 <_sbrk+0x40>)
 8002140:	6800      	ldr	r0, [r0, #0]
 8002142:	4403      	add	r3, r0
 8002144:	1a52      	subs	r2, r2, r1
 8002146:	4293      	cmp	r3, r2
 8002148:	d806      	bhi.n	8002158 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800214a:	4a09      	ldr	r2, [pc, #36]	; (8002170 <_sbrk+0x40>)
 800214c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800214e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002150:	4807      	ldr	r0, [pc, #28]	; (8002170 <_sbrk+0x40>)
 8002152:	4c08      	ldr	r4, [pc, #32]	; (8002174 <_sbrk+0x44>)
 8002154:	6004      	str	r4, [r0, #0]
 8002156:	e7f2      	b.n	800213e <_sbrk+0xe>
    errno = ENOMEM;
 8002158:	f001 fec2 	bl	8003ee0 <__errno>
 800215c:	230c      	movs	r3, #12
 800215e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002160:	f04f 30ff 	mov.w	r0, #4294967295
 8002164:	e7f3      	b.n	800214e <_sbrk+0x1e>
 8002166:	bf00      	nop
 8002168:	20010000 	.word	0x20010000
 800216c:	00000400 	.word	0x00000400
 8002170:	20001a70 	.word	0x20001a70
 8002174:	20001a88 	.word	0x20001a88

08002178 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002178:	4a03      	ldr	r2, [pc, #12]	; (8002188 <SystemInit+0x10>)
 800217a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800217e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002182:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002186:	4770      	bx	lr
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800218c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002190:	f7ff fff2 	bl	8002178 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002194:	480c      	ldr	r0, [pc, #48]	; (80021c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002196:	490d      	ldr	r1, [pc, #52]	; (80021cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002198:	4a0d      	ldr	r2, [pc, #52]	; (80021d0 <LoopForever+0xe>)
  movs r3, #0
 800219a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800219c:	e002      	b.n	80021a4 <LoopCopyDataInit>

0800219e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800219e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021a2:	3304      	adds	r3, #4

080021a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021a8:	d3f9      	bcc.n	800219e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021aa:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021ac:	4c0a      	ldr	r4, [pc, #40]	; (80021d8 <LoopForever+0x16>)
  movs r3, #0
 80021ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021b0:	e001      	b.n	80021b6 <LoopFillZerobss>

080021b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021b4:	3204      	adds	r2, #4

080021b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021b8:	d3fb      	bcc.n	80021b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021ba:	f001 fea9 	bl	8003f10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021be:	f7fe fefb 	bl	8000fb8 <main>

080021c2 <LoopForever>:

LoopForever:
    b LoopForever
 80021c2:	e7fe      	b.n	80021c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80021c4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80021c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021cc:	20001390 	.word	0x20001390
  ldr r2, =_sidata
 80021d0:	08006448 	.word	0x08006448
  ldr r2, =_sbss
 80021d4:	20001390 	.word	0x20001390
  ldr r4, =_ebss
 80021d8:	20001a88 	.word	0x20001a88

080021dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021dc:	e7fe      	b.n	80021dc <ADC1_IRQHandler>
	...

080021e0 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80021e0:	4b10      	ldr	r3, [pc, #64]	; (8002224 <HAL_InitTick+0x44>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	b90b      	cbnz	r3, 80021ea <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80021e6:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80021e8:	4770      	bx	lr
{
 80021ea:	b510      	push	{r4, lr}
 80021ec:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80021ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021f6:	4a0c      	ldr	r2, [pc, #48]	; (8002228 <HAL_InitTick+0x48>)
 80021f8:	6810      	ldr	r0, [r2, #0]
 80021fa:	fbb0 f0f3 	udiv	r0, r0, r3
 80021fe:	f000 f883 	bl	8002308 <HAL_SYSTICK_Config>
 8002202:	b968      	cbnz	r0, 8002220 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002204:	2c0f      	cmp	r4, #15
 8002206:	d901      	bls.n	800220c <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8002208:	2001      	movs	r0, #1
 800220a:	e00a      	b.n	8002222 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800220c:	2200      	movs	r2, #0
 800220e:	4621      	mov	r1, r4
 8002210:	f04f 30ff 	mov.w	r0, #4294967295
 8002214:	f000 f840 	bl	8002298 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002218:	4b04      	ldr	r3, [pc, #16]	; (800222c <HAL_InitTick+0x4c>)
 800221a:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 800221c:	2000      	movs	r0, #0
 800221e:	e000      	b.n	8002222 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8002220:	2001      	movs	r0, #1
}
 8002222:	bd10      	pop	{r4, pc}
 8002224:	20001324 	.word	0x20001324
 8002228:	20001320 	.word	0x20001320
 800222c:	20001328 	.word	0x20001328

08002230 <HAL_Init>:
{
 8002230:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002232:	2003      	movs	r0, #3
 8002234:	f000 f81e 	bl	8002274 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002238:	200f      	movs	r0, #15
 800223a:	f7ff ffd1 	bl	80021e0 <HAL_InitTick>
 800223e:	b110      	cbz	r0, 8002246 <HAL_Init+0x16>
    status = HAL_ERROR;
 8002240:	2401      	movs	r4, #1
}
 8002242:	4620      	mov	r0, r4
 8002244:	bd10      	pop	{r4, pc}
 8002246:	4604      	mov	r4, r0
    HAL_MspInit();
 8002248:	f7ff fee0 	bl	800200c <HAL_MspInit>
 800224c:	e7f9      	b.n	8002242 <HAL_Init+0x12>
	...

08002250 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002250:	4b03      	ldr	r3, [pc, #12]	; (8002260 <HAL_IncTick+0x10>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	4a03      	ldr	r2, [pc, #12]	; (8002264 <HAL_IncTick+0x14>)
 8002256:	6811      	ldr	r1, [r2, #0]
 8002258:	440b      	add	r3, r1
 800225a:	6013      	str	r3, [r2, #0]
}
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	20001324 	.word	0x20001324
 8002264:	20001a74 	.word	0x20001a74

08002268 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002268:	4b01      	ldr	r3, [pc, #4]	; (8002270 <HAL_GetTick+0x8>)
 800226a:	6818      	ldr	r0, [r3, #0]
}
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	20001a74 	.word	0x20001a74

08002274 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002274:	4a07      	ldr	r2, [pc, #28]	; (8002294 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002276:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002278:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800227c:	041b      	lsls	r3, r3, #16
 800227e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002280:	0200      	lsls	r0, r0, #8
 8002282:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002286:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002288:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800228c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002290:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002292:	4770      	bx	lr
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002298:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800229a:	4b19      	ldr	r3, [pc, #100]	; (8002300 <HAL_NVIC_SetPriority+0x68>)
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022a2:	f1c3 0c07 	rsb	ip, r3, #7
 80022a6:	f1bc 0f04 	cmp.w	ip, #4
 80022aa:	bf28      	it	cs
 80022ac:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022b0:	f103 0e04 	add.w	lr, r3, #4
 80022b4:	f1be 0f06 	cmp.w	lr, #6
 80022b8:	d918      	bls.n	80022ec <HAL_NVIC_SetPriority+0x54>
 80022ba:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022bc:	f04f 3eff 	mov.w	lr, #4294967295
 80022c0:	fa0e fc0c 	lsl.w	ip, lr, ip
 80022c4:	ea21 010c 	bic.w	r1, r1, ip
 80022c8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022ca:	fa0e f303 	lsl.w	r3, lr, r3
 80022ce:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80022d4:	2800      	cmp	r0, #0
 80022d6:	db0b      	blt.n	80022f0 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d8:	0109      	lsls	r1, r1, #4
 80022da:	b2c9      	uxtb	r1, r1
 80022dc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80022e0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80022e4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80022e8:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ec:	2300      	movs	r3, #0
 80022ee:	e7e5      	b.n	80022bc <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f0:	f000 000f 	and.w	r0, r0, #15
 80022f4:	0109      	lsls	r1, r1, #4
 80022f6:	b2c9      	uxtb	r1, r1
 80022f8:	4b02      	ldr	r3, [pc, #8]	; (8002304 <HAL_NVIC_SetPriority+0x6c>)
 80022fa:	5419      	strb	r1, [r3, r0]
 80022fc:	e7f4      	b.n	80022e8 <HAL_NVIC_SetPriority+0x50>
 80022fe:	bf00      	nop
 8002300:	e000ed00 	.word	0xe000ed00
 8002304:	e000ed14 	.word	0xe000ed14

08002308 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002308:	3801      	subs	r0, #1
 800230a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800230e:	d20b      	bcs.n	8002328 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002310:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002314:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002316:	4a05      	ldr	r2, [pc, #20]	; (800232c <HAL_SYSTICK_Config+0x24>)
 8002318:	21f0      	movs	r1, #240	; 0xf0
 800231a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800231e:	2000      	movs	r0, #0
 8002320:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002322:	2207      	movs	r2, #7
 8002324:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002326:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002328:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800232a:	4770      	bx	lr
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002332:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8002334:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002336:	e062      	b.n	80023fe <HAL_GPIO_Init+0xce>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002338:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800233a:	005e      	lsls	r6, r3, #1
 800233c:	2403      	movs	r4, #3
 800233e:	40b4      	lsls	r4, r6
 8002340:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002344:	68cc      	ldr	r4, [r1, #12]
 8002346:	40b4      	lsls	r4, r6
 8002348:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800234a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800234c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800234e:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002352:	684c      	ldr	r4, [r1, #4]
 8002354:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8002358:	409c      	lsls	r4, r3
 800235a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 800235e:	6044      	str	r4, [r0, #4]
 8002360:	e05e      	b.n	8002420 <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002362:	08dd      	lsrs	r5, r3, #3
 8002364:	3508      	adds	r5, #8
 8002366:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800236a:	f003 0407 	and.w	r4, r3, #7
 800236e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8002372:	240f      	movs	r4, #15
 8002374:	fa04 f40c 	lsl.w	r4, r4, ip
 8002378:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800237c:	690c      	ldr	r4, [r1, #16]
 800237e:	fa04 f40c 	lsl.w	r4, r4, ip
 8002382:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8002386:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 800238a:	e060      	b.n	800244e <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800238c:	2404      	movs	r4, #4
 800238e:	e000      	b.n	8002392 <HAL_GPIO_Init+0x62>
 8002390:	2400      	movs	r4, #0
 8002392:	fa04 f40e 	lsl.w	r4, r4, lr
 8002396:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002398:	f10c 0c02 	add.w	ip, ip, #2
 800239c:	4d52      	ldr	r5, [pc, #328]	; (80024e8 <HAL_GPIO_Init+0x1b8>)
 800239e:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023a2:	4c52      	ldr	r4, [pc, #328]	; (80024ec <HAL_GPIO_Init+0x1bc>)
 80023a4:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 80023a6:	43d4      	mvns	r4, r2
 80023a8:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023ac:	684f      	ldr	r7, [r1, #4]
 80023ae:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80023b2:	d001      	beq.n	80023b8 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 80023b4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80023b8:	4d4c      	ldr	r5, [pc, #304]	; (80024ec <HAL_GPIO_Init+0x1bc>)
 80023ba:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 80023bc:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 80023be:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023c2:	684f      	ldr	r7, [r1, #4]
 80023c4:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 80023c8:	d001      	beq.n	80023ce <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 80023ca:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 80023ce:	4d47      	ldr	r5, [pc, #284]	; (80024ec <HAL_GPIO_Init+0x1bc>)
 80023d0:	60ee      	str	r6, [r5, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023d2:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80023d4:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023d8:	684f      	ldr	r7, [r1, #4]
 80023da:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80023de:	d001      	beq.n	80023e4 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 80023e0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 80023e4:	4d41      	ldr	r5, [pc, #260]	; (80024ec <HAL_GPIO_Init+0x1bc>)
 80023e6:	606e      	str	r6, [r5, #4]

        temp = EXTI->IMR1;
 80023e8:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 80023ea:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023ec:	684e      	ldr	r6, [r1, #4]
 80023ee:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 80023f2:	d001      	beq.n	80023f8 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 80023f4:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 80023f8:	4a3c      	ldr	r2, [pc, #240]	; (80024ec <HAL_GPIO_Init+0x1bc>)
 80023fa:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 80023fc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023fe:	680a      	ldr	r2, [r1, #0]
 8002400:	fa32 f403 	lsrs.w	r4, r2, r3
 8002404:	d06e      	beq.n	80024e4 <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002406:	f04f 0c01 	mov.w	ip, #1
 800240a:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 800240e:	ea1c 0202 	ands.w	r2, ip, r2
 8002412:	d0f3      	beq.n	80023fc <HAL_GPIO_Init+0xcc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002414:	684c      	ldr	r4, [r1, #4]
 8002416:	f004 0403 	and.w	r4, r4, #3
 800241a:	3c01      	subs	r4, #1
 800241c:	2c01      	cmp	r4, #1
 800241e:	d98b      	bls.n	8002338 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002420:	684c      	ldr	r4, [r1, #4]
 8002422:	f004 0403 	and.w	r4, r4, #3
 8002426:	2c03      	cmp	r4, #3
 8002428:	d00c      	beq.n	8002444 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 800242a:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800242c:	005d      	lsls	r5, r3, #1
 800242e:	f04f 0c03 	mov.w	ip, #3
 8002432:	fa0c fc05 	lsl.w	ip, ip, r5
 8002436:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800243a:	688c      	ldr	r4, [r1, #8]
 800243c:	40ac      	lsls	r4, r5
 800243e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8002442:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002444:	684c      	ldr	r4, [r1, #4]
 8002446:	f004 0403 	and.w	r4, r4, #3
 800244a:	2c02      	cmp	r4, #2
 800244c:	d089      	beq.n	8002362 <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 800244e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002450:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002454:	f04f 0c03 	mov.w	ip, #3
 8002458:	fa0c fc0e 	lsl.w	ip, ip, lr
 800245c:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002460:	684c      	ldr	r4, [r1, #4]
 8002462:	f004 0403 	and.w	r4, r4, #3
 8002466:	fa04 f40e 	lsl.w	r4, r4, lr
 800246a:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800246e:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002470:	684c      	ldr	r4, [r1, #4]
 8002472:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8002476:	d0c1      	beq.n	80023fc <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002478:	4c1d      	ldr	r4, [pc, #116]	; (80024f0 <HAL_GPIO_Init+0x1c0>)
 800247a:	6e25      	ldr	r5, [r4, #96]	; 0x60
 800247c:	f045 0501 	orr.w	r5, r5, #1
 8002480:	6625      	str	r5, [r4, #96]	; 0x60
 8002482:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8002484:	f004 0401 	and.w	r4, r4, #1
 8002488:	9401      	str	r4, [sp, #4]
 800248a:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800248c:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8002490:	f10c 0502 	add.w	r5, ip, #2
 8002494:	4c14      	ldr	r4, [pc, #80]	; (80024e8 <HAL_GPIO_Init+0x1b8>)
 8002496:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800249a:	f003 0403 	and.w	r4, r3, #3
 800249e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80024a2:	240f      	movs	r4, #15
 80024a4:	fa04 f40e 	lsl.w	r4, r4, lr
 80024a8:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024ac:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80024b0:	f43f af6e 	beq.w	8002390 <HAL_GPIO_Init+0x60>
 80024b4:	4c0f      	ldr	r4, [pc, #60]	; (80024f4 <HAL_GPIO_Init+0x1c4>)
 80024b6:	42a0      	cmp	r0, r4
 80024b8:	d00e      	beq.n	80024d8 <HAL_GPIO_Init+0x1a8>
 80024ba:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80024be:	42a0      	cmp	r0, r4
 80024c0:	d00c      	beq.n	80024dc <HAL_GPIO_Init+0x1ac>
 80024c2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80024c6:	42a0      	cmp	r0, r4
 80024c8:	d00a      	beq.n	80024e0 <HAL_GPIO_Init+0x1b0>
 80024ca:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80024ce:	42a0      	cmp	r0, r4
 80024d0:	f43f af5c 	beq.w	800238c <HAL_GPIO_Init+0x5c>
 80024d4:	2407      	movs	r4, #7
 80024d6:	e75c      	b.n	8002392 <HAL_GPIO_Init+0x62>
 80024d8:	2401      	movs	r4, #1
 80024da:	e75a      	b.n	8002392 <HAL_GPIO_Init+0x62>
 80024dc:	2402      	movs	r4, #2
 80024de:	e758      	b.n	8002392 <HAL_GPIO_Init+0x62>
 80024e0:	2403      	movs	r4, #3
 80024e2:	e756      	b.n	8002392 <HAL_GPIO_Init+0x62>
  }
}
 80024e4:	b003      	add	sp, #12
 80024e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024e8:	40010000 	.word	0x40010000
 80024ec:	40010400 	.word	0x40010400
 80024f0:	40021000 	.word	0x40021000
 80024f4:	48000400 	.word	0x48000400

080024f8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024f8:	b10a      	cbz	r2, 80024fe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024fa:	6181      	str	r1, [r0, #24]
 80024fc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024fe:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002500:	4770      	bx	lr
	...

08002504 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002504:	4b02      	ldr	r3, [pc, #8]	; (8002510 <HAL_PWREx_GetVoltageRange+0xc>)
 8002506:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002508:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40007000 	.word	0x40007000

08002514 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002514:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002518:	d00f      	beq.n	800253a <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800251a:	4b1f      	ldr	r3, [pc, #124]	; (8002598 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002526:	d034      	beq.n	8002592 <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002528:	4a1b      	ldr	r2, [pc, #108]	; (8002598 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800252a:	6813      	ldr	r3, [r2, #0]
 800252c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002530:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002534:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002536:	2000      	movs	r0, #0
 8002538:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800253a:	4b17      	ldr	r3, [pc, #92]	; (8002598 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002542:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002546:	d020      	beq.n	800258a <HAL_PWREx_ControlVoltageScaling+0x76>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002548:	4a13      	ldr	r2, [pc, #76]	; (8002598 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800254a:	6813      	ldr	r3, [r2, #0]
 800254c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002550:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002554:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002556:	4b11      	ldr	r3, [pc, #68]	; (800259c <HAL_PWREx_ControlVoltageScaling+0x88>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2232      	movs	r2, #50	; 0x32
 800255c:	fb02 f303 	mul.w	r3, r2, r3
 8002560:	4a0f      	ldr	r2, [pc, #60]	; (80025a0 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8002562:	fba2 2303 	umull	r2, r3, r2, r3
 8002566:	0c9b      	lsrs	r3, r3, #18
 8002568:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800256a:	e000      	b.n	800256e <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 800256c:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800256e:	4a0a      	ldr	r2, [pc, #40]	; (8002598 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002570:	6952      	ldr	r2, [r2, #20]
 8002572:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002576:	d001      	beq.n	800257c <HAL_PWREx_ControlVoltageScaling+0x68>
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1f7      	bne.n	800256c <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800257c:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002584:	d103      	bne.n	800258e <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 8002586:	2000      	movs	r0, #0
 8002588:	4770      	bx	lr
 800258a:	2000      	movs	r0, #0
 800258c:	4770      	bx	lr
        return HAL_TIMEOUT;
 800258e:	2003      	movs	r0, #3
 8002590:	4770      	bx	lr
  return HAL_OK;
 8002592:	2000      	movs	r0, #0
}
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40007000 	.word	0x40007000
 800259c:	20001320 	.word	0x20001320
 80025a0:	431bde83 	.word	0x431bde83

080025a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025a4:	b530      	push	{r4, r5, lr}
 80025a6:	b083      	sub	sp, #12
 80025a8:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025aa:	4b20      	ldr	r3, [pc, #128]	; (800262c <RCC_SetFlashLatencyFromMSIRange+0x88>)
 80025ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ae:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80025b2:	d00b      	beq.n	80025cc <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025b4:	f7ff ffa6 	bl	8002504 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025b8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80025bc:	d017      	beq.n	80025ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80025be:	2c80      	cmp	r4, #128	; 0x80
 80025c0:	d81f      	bhi.n	8002602 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80025c2:	d02d      	beq.n	8002620 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 80025c4:	2c70      	cmp	r4, #112	; 0x70
 80025c6:	d02d      	beq.n	8002624 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025c8:	2100      	movs	r1, #0
 80025ca:	e01b      	b.n	8002604 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 80025cc:	4d17      	ldr	r5, [pc, #92]	; (800262c <RCC_SetFlashLatencyFromMSIRange+0x88>)
 80025ce:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80025d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d4:	65ab      	str	r3, [r5, #88]	; 0x58
 80025d6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80025d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025dc:	9301      	str	r3, [sp, #4]
 80025de:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80025e0:	f7ff ff90 	bl	8002504 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80025e4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80025e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ea:	65ab      	str	r3, [r5, #88]	; 0x58
 80025ec:	e7e4      	b.n	80025b8 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 80025ee:	2c80      	cmp	r4, #128	; 0x80
 80025f0:	d903      	bls.n	80025fa <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 80025f2:	2ca0      	cmp	r4, #160	; 0xa0
 80025f4:	d903      	bls.n	80025fe <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 80025f6:	2102      	movs	r1, #2
 80025f8:	e004      	b.n	8002604 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025fa:	2100      	movs	r1, #0
 80025fc:	e002      	b.n	8002604 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 80025fe:	2101      	movs	r1, #1
 8002600:	e000      	b.n	8002604 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8002602:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002604:	4a0a      	ldr	r2, [pc, #40]	; (8002630 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8002606:	6813      	ldr	r3, [r2, #0]
 8002608:	f023 0307 	bic.w	r3, r3, #7
 800260c:	430b      	orrs	r3, r1
 800260e:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002610:	6813      	ldr	r3, [r2, #0]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	428b      	cmp	r3, r1
 8002618:	d106      	bne.n	8002628 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800261a:	2000      	movs	r0, #0
}
 800261c:	b003      	add	sp, #12
 800261e:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8002620:	2102      	movs	r1, #2
 8002622:	e7ef      	b.n	8002604 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8002624:	2101      	movs	r1, #1
 8002626:	e7ed      	b.n	8002604 <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 8002628:	2001      	movs	r0, #1
 800262a:	e7f7      	b.n	800261c <RCC_SetFlashLatencyFromMSIRange+0x78>
 800262c:	40021000 	.word	0x40021000
 8002630:	40022000 	.word	0x40022000

08002634 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002634:	4a28      	ldr	r2, [pc, #160]	; (80026d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002636:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002638:	68d2      	ldr	r2, [r2, #12]
 800263a:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800263e:	f013 030c 	ands.w	r3, r3, #12
 8002642:	d00a      	beq.n	800265a <HAL_RCC_GetSysClockFreq+0x26>
 8002644:	2b0c      	cmp	r3, #12
 8002646:	d006      	beq.n	8002656 <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002648:	2b04      	cmp	r3, #4
 800264a:	d01f      	beq.n	800268c <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800264c:	2b08      	cmp	r3, #8
 800264e:	d020      	beq.n	8002692 <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002650:	2000      	movs	r0, #0
 8002652:	4602      	mov	r2, r0
 8002654:	e010      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002656:	2a01      	cmp	r2, #1
 8002658:	d1f6      	bne.n	8002648 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800265a:	4a1f      	ldr	r2, [pc, #124]	; (80026d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800265c:	6812      	ldr	r2, [r2, #0]
 800265e:	f012 0f08 	tst.w	r2, #8
 8002662:	d10c      	bne.n	800267e <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002664:	4a1c      	ldr	r2, [pc, #112]	; (80026d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002666:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 800266a:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 800266e:	491b      	ldr	r1, [pc, #108]	; (80026dc <HAL_RCC_GetSysClockFreq+0xa8>)
 8002670:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002674:	b143      	cbz	r3, 8002688 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002676:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002678:	2b0c      	cmp	r3, #12
 800267a:	d00d      	beq.n	8002698 <HAL_RCC_GetSysClockFreq+0x64>
}
 800267c:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800267e:	4a16      	ldr	r2, [pc, #88]	; (80026d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002680:	6812      	ldr	r2, [r2, #0]
 8002682:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002686:	e7f2      	b.n	800266e <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 8002688:	4610      	mov	r0, r2
 800268a:	e7f5      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 800268c:	4814      	ldr	r0, [pc, #80]	; (80026e0 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800268e:	2200      	movs	r2, #0
 8002690:	e7f2      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8002692:	4814      	ldr	r0, [pc, #80]	; (80026e4 <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002694:	2200      	movs	r2, #0
 8002696:	e7ef      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002698:	4b0f      	ldr	r3, [pc, #60]	; (80026d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d016      	beq.n	80026d2 <HAL_RCC_GetSysClockFreq+0x9e>
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d100      	bne.n	80026aa <HAL_RCC_GetSysClockFreq+0x76>
      pllvco = HSE_VALUE;
 80026a8:	4a0e      	ldr	r2, [pc, #56]	; (80026e4 <HAL_RCC_GetSysClockFreq+0xb0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026aa:	490b      	ldr	r1, [pc, #44]	; (80026d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026ac:	68c8      	ldr	r0, [r1, #12]
 80026ae:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80026b2:	1c43      	adds	r3, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026b4:	68c8      	ldr	r0, [r1, #12]
 80026b6:	f3c0 2006 	ubfx	r0, r0, #8, #7
 80026ba:	fb02 f000 	mul.w	r0, r2, r0
 80026be:	fbb0 f0f3 	udiv	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026c2:	68cb      	ldr	r3, [r1, #12]
 80026c4:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80026c8:	3301      	adds	r3, #1
 80026ca:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 80026cc:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 80026d0:	e7d4      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x48>
    switch (pllsource)
 80026d2:	4a03      	ldr	r2, [pc, #12]	; (80026e0 <HAL_RCC_GetSysClockFreq+0xac>)
 80026d4:	e7e9      	b.n	80026aa <HAL_RCC_GetSysClockFreq+0x76>
 80026d6:	bf00      	nop
 80026d8:	40021000 	.word	0x40021000
 80026dc:	08006164 	.word	0x08006164
 80026e0:	00f42400 	.word	0x00f42400
 80026e4:	007a1200 	.word	0x007a1200

080026e8 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80026e8:	2800      	cmp	r0, #0
 80026ea:	f000 831c 	beq.w	8002d26 <HAL_RCC_OscConfig+0x63e>
{
 80026ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026f0:	b083      	sub	sp, #12
 80026f2:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026f4:	4b96      	ldr	r3, [pc, #600]	; (8002950 <HAL_RCC_OscConfig+0x268>)
 80026f6:	689d      	ldr	r5, [r3, #8]
 80026f8:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026fc:	68de      	ldr	r6, [r3, #12]
 80026fe:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002702:	6803      	ldr	r3, [r0, #0]
 8002704:	f013 0f10 	tst.w	r3, #16
 8002708:	d05a      	beq.n	80027c0 <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800270a:	b1e5      	cbz	r5, 8002746 <HAL_RCC_OscConfig+0x5e>
 800270c:	2d0c      	cmp	r5, #12
 800270e:	d018      	beq.n	8002742 <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002710:	69a3      	ldr	r3, [r4, #24]
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 80bb 	beq.w	800288e <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 8002718:	4a8d      	ldr	r2, [pc, #564]	; (8002950 <HAL_RCC_OscConfig+0x268>)
 800271a:	6813      	ldr	r3, [r2, #0]
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002722:	f7ff fda1 	bl	8002268 <HAL_GetTick>
 8002726:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002728:	4b89      	ldr	r3, [pc, #548]	; (8002950 <HAL_RCC_OscConfig+0x268>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f013 0f02 	tst.w	r3, #2
 8002730:	f040 809a 	bne.w	8002868 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002734:	f7ff fd98 	bl	8002268 <HAL_GetTick>
 8002738:	1bc0      	subs	r0, r0, r7
 800273a:	2802      	cmp	r0, #2
 800273c:	d9f4      	bls.n	8002728 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 800273e:	2003      	movs	r0, #3
 8002740:	e2fc      	b.n	8002d3c <HAL_RCC_OscConfig+0x654>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002742:	2e01      	cmp	r6, #1
 8002744:	d1e4      	bne.n	8002710 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002746:	4b82      	ldr	r3, [pc, #520]	; (8002950 <HAL_RCC_OscConfig+0x268>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f013 0f02 	tst.w	r3, #2
 800274e:	d003      	beq.n	8002758 <HAL_RCC_OscConfig+0x70>
 8002750:	69a3      	ldr	r3, [r4, #24]
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 82e9 	beq.w	8002d2a <HAL_RCC_OscConfig+0x642>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002758:	6a20      	ldr	r0, [r4, #32]
 800275a:	4b7d      	ldr	r3, [pc, #500]	; (8002950 <HAL_RCC_OscConfig+0x268>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f013 0f08 	tst.w	r3, #8
 8002762:	d05b      	beq.n	800281c <HAL_RCC_OscConfig+0x134>
 8002764:	4b7a      	ldr	r3, [pc, #488]	; (8002950 <HAL_RCC_OscConfig+0x268>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800276c:	4298      	cmp	r0, r3
 800276e:	d85c      	bhi.n	800282a <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002770:	4b77      	ldr	r3, [pc, #476]	; (8002950 <HAL_RCC_OscConfig+0x268>)
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	f042 0208 	orr.w	r2, r2, #8
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002780:	6a21      	ldr	r1, [r4, #32]
 8002782:	430a      	orrs	r2, r1
 8002784:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800278c:	69e1      	ldr	r1, [r4, #28]
 800278e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002792:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002794:	2d00      	cmp	r5, #0
 8002796:	d060      	beq.n	800285a <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002798:	f7ff ff4c 	bl	8002634 <HAL_RCC_GetSysClockFreq>
 800279c:	4b6c      	ldr	r3, [pc, #432]	; (8002950 <HAL_RCC_OscConfig+0x268>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80027a4:	4a6b      	ldr	r2, [pc, #428]	; (8002954 <HAL_RCC_OscConfig+0x26c>)
 80027a6:	5cd3      	ldrb	r3, [r2, r3]
 80027a8:	f003 031f 	and.w	r3, r3, #31
 80027ac:	40d8      	lsrs	r0, r3
 80027ae:	4b6a      	ldr	r3, [pc, #424]	; (8002958 <HAL_RCC_OscConfig+0x270>)
 80027b0:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80027b2:	4b6a      	ldr	r3, [pc, #424]	; (800295c <HAL_RCC_OscConfig+0x274>)
 80027b4:	6818      	ldr	r0, [r3, #0]
 80027b6:	f7ff fd13 	bl	80021e0 <HAL_InitTick>
        if(status != HAL_OK)
 80027ba:	2800      	cmp	r0, #0
 80027bc:	f040 82be 	bne.w	8002d3c <HAL_RCC_OscConfig+0x654>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027c0:	6823      	ldr	r3, [r4, #0]
 80027c2:	f013 0f01 	tst.w	r3, #1
 80027c6:	f000 8081 	beq.w	80028cc <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80027ca:	2d08      	cmp	r5, #8
 80027cc:	d075      	beq.n	80028ba <HAL_RCC_OscConfig+0x1d2>
 80027ce:	2d0c      	cmp	r5, #12
 80027d0:	d071      	beq.n	80028b6 <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027d2:	6863      	ldr	r3, [r4, #4]
 80027d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d8:	f000 8097 	beq.w	800290a <HAL_RCC_OscConfig+0x222>
 80027dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027e0:	f000 8099 	beq.w	8002916 <HAL_RCC_OscConfig+0x22e>
 80027e4:	4b5a      	ldr	r3, [pc, #360]	; (8002950 <HAL_RCC_OscConfig+0x268>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027f4:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027f6:	6863      	ldr	r3, [r4, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 8099 	beq.w	8002930 <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 80027fe:	f7ff fd33 	bl	8002268 <HAL_GetTick>
 8002802:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002804:	4b52      	ldr	r3, [pc, #328]	; (8002950 <HAL_RCC_OscConfig+0x268>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800280c:	d15e      	bne.n	80028cc <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800280e:	f7ff fd2b 	bl	8002268 <HAL_GetTick>
 8002812:	1bc0      	subs	r0, r0, r7
 8002814:	2864      	cmp	r0, #100	; 0x64
 8002816:	d9f5      	bls.n	8002804 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 8002818:	2003      	movs	r0, #3
 800281a:	e28f      	b.n	8002d3c <HAL_RCC_OscConfig+0x654>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800281c:	4b4c      	ldr	r3, [pc, #304]	; (8002950 <HAL_RCC_OscConfig+0x268>)
 800281e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002822:	091b      	lsrs	r3, r3, #4
 8002824:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002828:	e7a0      	b.n	800276c <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800282a:	f7ff febb 	bl	80025a4 <RCC_SetFlashLatencyFromMSIRange>
 800282e:	2800      	cmp	r0, #0
 8002830:	f040 827d 	bne.w	8002d2e <HAL_RCC_OscConfig+0x646>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002834:	4b46      	ldr	r3, [pc, #280]	; (8002950 <HAL_RCC_OscConfig+0x268>)
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	f042 0208 	orr.w	r2, r2, #8
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002844:	6a21      	ldr	r1, [r4, #32]
 8002846:	430a      	orrs	r2, r1
 8002848:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002850:	69e1      	ldr	r1, [r4, #28]
 8002852:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002856:	605a      	str	r2, [r3, #4]
 8002858:	e79e      	b.n	8002798 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800285a:	6a20      	ldr	r0, [r4, #32]
 800285c:	f7ff fea2 	bl	80025a4 <RCC_SetFlashLatencyFromMSIRange>
 8002860:	2800      	cmp	r0, #0
 8002862:	d099      	beq.n	8002798 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 8002864:	2001      	movs	r0, #1
 8002866:	e269      	b.n	8002d3c <HAL_RCC_OscConfig+0x654>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002868:	4b39      	ldr	r3, [pc, #228]	; (8002950 <HAL_RCC_OscConfig+0x268>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	f042 0208 	orr.w	r2, r2, #8
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002878:	6a21      	ldr	r1, [r4, #32]
 800287a:	430a      	orrs	r2, r1
 800287c:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002884:	69e1      	ldr	r1, [r4, #28]
 8002886:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800288a:	605a      	str	r2, [r3, #4]
 800288c:	e798      	b.n	80027c0 <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 800288e:	4a30      	ldr	r2, [pc, #192]	; (8002950 <HAL_RCC_OscConfig+0x268>)
 8002890:	6813      	ldr	r3, [r2, #0]
 8002892:	f023 0301 	bic.w	r3, r3, #1
 8002896:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002898:	f7ff fce6 	bl	8002268 <HAL_GetTick>
 800289c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800289e:	4b2c      	ldr	r3, [pc, #176]	; (8002950 <HAL_RCC_OscConfig+0x268>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f013 0f02 	tst.w	r3, #2
 80028a6:	d08b      	beq.n	80027c0 <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028a8:	f7ff fcde 	bl	8002268 <HAL_GetTick>
 80028ac:	1bc0      	subs	r0, r0, r7
 80028ae:	2802      	cmp	r0, #2
 80028b0:	d9f5      	bls.n	800289e <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 80028b2:	2003      	movs	r0, #3
 80028b4:	e242      	b.n	8002d3c <HAL_RCC_OscConfig+0x654>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028b6:	2e03      	cmp	r6, #3
 80028b8:	d18b      	bne.n	80027d2 <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ba:	4b25      	ldr	r3, [pc, #148]	; (8002950 <HAL_RCC_OscConfig+0x268>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80028c2:	d003      	beq.n	80028cc <HAL_RCC_OscConfig+0x1e4>
 80028c4:	6863      	ldr	r3, [r4, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 8233 	beq.w	8002d32 <HAL_RCC_OscConfig+0x64a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028cc:	6823      	ldr	r3, [r4, #0]
 80028ce:	f013 0f02 	tst.w	r3, #2
 80028d2:	d058      	beq.n	8002986 <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028d4:	2d04      	cmp	r5, #4
 80028d6:	d045      	beq.n	8002964 <HAL_RCC_OscConfig+0x27c>
 80028d8:	2d0c      	cmp	r5, #12
 80028da:	d041      	beq.n	8002960 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028dc:	68e3      	ldr	r3, [r4, #12]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d077      	beq.n	80029d2 <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 80028e2:	4a1b      	ldr	r2, [pc, #108]	; (8002950 <HAL_RCC_OscConfig+0x268>)
 80028e4:	6813      	ldr	r3, [r2, #0]
 80028e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ea:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80028ec:	f7ff fcbc 	bl	8002268 <HAL_GetTick>
 80028f0:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028f2:	4b17      	ldr	r3, [pc, #92]	; (8002950 <HAL_RCC_OscConfig+0x268>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80028fa:	d161      	bne.n	80029c0 <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028fc:	f7ff fcb4 	bl	8002268 <HAL_GetTick>
 8002900:	1b80      	subs	r0, r0, r6
 8002902:	2802      	cmp	r0, #2
 8002904:	d9f5      	bls.n	80028f2 <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 8002906:	2003      	movs	r0, #3
 8002908:	e218      	b.n	8002d3c <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800290a:	4a11      	ldr	r2, [pc, #68]	; (8002950 <HAL_RCC_OscConfig+0x268>)
 800290c:	6813      	ldr	r3, [r2, #0]
 800290e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002912:	6013      	str	r3, [r2, #0]
 8002914:	e76f      	b.n	80027f6 <HAL_RCC_OscConfig+0x10e>
 8002916:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800291a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	e762      	b.n	80027f6 <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 8002930:	f7ff fc9a 	bl	8002268 <HAL_GetTick>
 8002934:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002936:	4b06      	ldr	r3, [pc, #24]	; (8002950 <HAL_RCC_OscConfig+0x268>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800293e:	d0c5      	beq.n	80028cc <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002940:	f7ff fc92 	bl	8002268 <HAL_GetTick>
 8002944:	1bc0      	subs	r0, r0, r7
 8002946:	2864      	cmp	r0, #100	; 0x64
 8002948:	d9f5      	bls.n	8002936 <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 800294a:	2003      	movs	r0, #3
 800294c:	e1f6      	b.n	8002d3c <HAL_RCC_OscConfig+0x654>
 800294e:	bf00      	nop
 8002950:	40021000 	.word	0x40021000
 8002954:	08006154 	.word	0x08006154
 8002958:	20001320 	.word	0x20001320
 800295c:	20001328 	.word	0x20001328
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002960:	2e02      	cmp	r6, #2
 8002962:	d1bb      	bne.n	80028dc <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002964:	4ba4      	ldr	r3, [pc, #656]	; (8002bf8 <HAL_RCC_OscConfig+0x510>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800296c:	d003      	beq.n	8002976 <HAL_RCC_OscConfig+0x28e>
 800296e:	68e3      	ldr	r3, [r4, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 81e0 	beq.w	8002d36 <HAL_RCC_OscConfig+0x64e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002976:	4aa0      	ldr	r2, [pc, #640]	; (8002bf8 <HAL_RCC_OscConfig+0x510>)
 8002978:	6853      	ldr	r3, [r2, #4]
 800297a:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800297e:	6921      	ldr	r1, [r4, #16]
 8002980:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002984:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002986:	6823      	ldr	r3, [r4, #0]
 8002988:	f013 0f08 	tst.w	r3, #8
 800298c:	d04c      	beq.n	8002a28 <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800298e:	6963      	ldr	r3, [r4, #20]
 8002990:	b39b      	cbz	r3, 80029fa <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 8002992:	4a99      	ldr	r2, [pc, #612]	; (8002bf8 <HAL_RCC_OscConfig+0x510>)
 8002994:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80029a0:	f7ff fc62 	bl	8002268 <HAL_GetTick>
 80029a4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029a6:	4b94      	ldr	r3, [pc, #592]	; (8002bf8 <HAL_RCC_OscConfig+0x510>)
 80029a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ac:	f013 0f02 	tst.w	r3, #2
 80029b0:	d13a      	bne.n	8002a28 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b2:	f7ff fc59 	bl	8002268 <HAL_GetTick>
 80029b6:	1b80      	subs	r0, r0, r6
 80029b8:	2802      	cmp	r0, #2
 80029ba:	d9f4      	bls.n	80029a6 <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 80029bc:	2003      	movs	r0, #3
 80029be:	e1bd      	b.n	8002d3c <HAL_RCC_OscConfig+0x654>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c0:	4a8d      	ldr	r2, [pc, #564]	; (8002bf8 <HAL_RCC_OscConfig+0x510>)
 80029c2:	6853      	ldr	r3, [r2, #4]
 80029c4:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80029c8:	6921      	ldr	r1, [r4, #16]
 80029ca:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80029ce:	6053      	str	r3, [r2, #4]
 80029d0:	e7d9      	b.n	8002986 <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 80029d2:	4a89      	ldr	r2, [pc, #548]	; (8002bf8 <HAL_RCC_OscConfig+0x510>)
 80029d4:	6813      	ldr	r3, [r2, #0]
 80029d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029da:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80029dc:	f7ff fc44 	bl	8002268 <HAL_GetTick>
 80029e0:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029e2:	4b85      	ldr	r3, [pc, #532]	; (8002bf8 <HAL_RCC_OscConfig+0x510>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80029ea:	d0cc      	beq.n	8002986 <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ec:	f7ff fc3c 	bl	8002268 <HAL_GetTick>
 80029f0:	1b80      	subs	r0, r0, r6
 80029f2:	2802      	cmp	r0, #2
 80029f4:	d9f5      	bls.n	80029e2 <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 80029f6:	2003      	movs	r0, #3
 80029f8:	e1a0      	b.n	8002d3c <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_LSI_DISABLE();
 80029fa:	4a7f      	ldr	r2, [pc, #508]	; (8002bf8 <HAL_RCC_OscConfig+0x510>)
 80029fc:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002a00:	f023 0301 	bic.w	r3, r3, #1
 8002a04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002a08:	f7ff fc2e 	bl	8002268 <HAL_GetTick>
 8002a0c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a0e:	4b7a      	ldr	r3, [pc, #488]	; (8002bf8 <HAL_RCC_OscConfig+0x510>)
 8002a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a14:	f013 0f02 	tst.w	r3, #2
 8002a18:	d006      	beq.n	8002a28 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a1a:	f7ff fc25 	bl	8002268 <HAL_GetTick>
 8002a1e:	1b80      	subs	r0, r0, r6
 8002a20:	2802      	cmp	r0, #2
 8002a22:	d9f4      	bls.n	8002a0e <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 8002a24:	2003      	movs	r0, #3
 8002a26:	e189      	b.n	8002d3c <HAL_RCC_OscConfig+0x654>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a28:	6823      	ldr	r3, [r4, #0]
 8002a2a:	f013 0f04 	tst.w	r3, #4
 8002a2e:	d07a      	beq.n	8002b26 <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a30:	4b71      	ldr	r3, [pc, #452]	; (8002bf8 <HAL_RCC_OscConfig+0x510>)
 8002a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a34:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002a38:	d136      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a3a:	4b6f      	ldr	r3, [pc, #444]	; (8002bf8 <HAL_RCC_OscConfig+0x510>)
 8002a3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a3e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a42:	659a      	str	r2, [r3, #88]	; 0x58
 8002a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	9301      	str	r3, [sp, #4]
 8002a4c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002a4e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a50:	4b6a      	ldr	r3, [pc, #424]	; (8002bfc <HAL_RCC_OscConfig+0x514>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002a58:	d028      	beq.n	8002aac <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a5a:	68a3      	ldr	r3, [r4, #8]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d039      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x3ec>
 8002a60:	2b05      	cmp	r3, #5
 8002a62:	d03f      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x3fc>
 8002a64:	4b64      	ldr	r3, [pc, #400]	; (8002bf8 <HAL_RCC_OscConfig+0x510>)
 8002a66:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002a6a:	f022 0201 	bic.w	r2, r2, #1
 8002a6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002a72:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002a76:	f022 0204 	bic.w	r2, r2, #4
 8002a7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a7e:	68a3      	ldr	r3, [r4, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d03d      	beq.n	8002b00 <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 8002a84:	f7ff fbf0 	bl	8002268 <HAL_GetTick>
 8002a88:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a8a:	4b5b      	ldr	r3, [pc, #364]	; (8002bf8 <HAL_RCC_OscConfig+0x510>)
 8002a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a90:	f013 0f02 	tst.w	r3, #2
 8002a94:	d146      	bne.n	8002b24 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a96:	f7ff fbe7 	bl	8002268 <HAL_GetTick>
 8002a9a:	1bc0      	subs	r0, r0, r7
 8002a9c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002aa0:	4298      	cmp	r0, r3
 8002aa2:	d9f2      	bls.n	8002a8a <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 8002aa4:	2003      	movs	r0, #3
 8002aa6:	e149      	b.n	8002d3c <HAL_RCC_OscConfig+0x654>
    FlagStatus       pwrclkchanged = RESET;
 8002aa8:	2600      	movs	r6, #0
 8002aaa:	e7d1      	b.n	8002a50 <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aac:	4a53      	ldr	r2, [pc, #332]	; (8002bfc <HAL_RCC_OscConfig+0x514>)
 8002aae:	6813      	ldr	r3, [r2, #0]
 8002ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002ab6:	f7ff fbd7 	bl	8002268 <HAL_GetTick>
 8002aba:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002abc:	4b4f      	ldr	r3, [pc, #316]	; (8002bfc <HAL_RCC_OscConfig+0x514>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002ac4:	d1c9      	bne.n	8002a5a <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac6:	f7ff fbcf 	bl	8002268 <HAL_GetTick>
 8002aca:	1bc0      	subs	r0, r0, r7
 8002acc:	2802      	cmp	r0, #2
 8002ace:	d9f5      	bls.n	8002abc <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 8002ad0:	2003      	movs	r0, #3
 8002ad2:	e133      	b.n	8002d3c <HAL_RCC_OscConfig+0x654>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ad4:	4a48      	ldr	r2, [pc, #288]	; (8002bf8 <HAL_RCC_OscConfig+0x510>)
 8002ad6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002ada:	f043 0301 	orr.w	r3, r3, #1
 8002ade:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ae2:	e7cc      	b.n	8002a7e <HAL_RCC_OscConfig+0x396>
 8002ae4:	4b44      	ldr	r3, [pc, #272]	; (8002bf8 <HAL_RCC_OscConfig+0x510>)
 8002ae6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002aea:	f042 0204 	orr.w	r2, r2, #4
 8002aee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002af2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002af6:	f042 0201 	orr.w	r2, r2, #1
 8002afa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002afe:	e7be      	b.n	8002a7e <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 8002b00:	f7ff fbb2 	bl	8002268 <HAL_GetTick>
 8002b04:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b06:	4b3c      	ldr	r3, [pc, #240]	; (8002bf8 <HAL_RCC_OscConfig+0x510>)
 8002b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0c:	f013 0f02 	tst.w	r3, #2
 8002b10:	d008      	beq.n	8002b24 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b12:	f7ff fba9 	bl	8002268 <HAL_GetTick>
 8002b16:	1bc0      	subs	r0, r0, r7
 8002b18:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b1c:	4298      	cmp	r0, r3
 8002b1e:	d9f2      	bls.n	8002b06 <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 8002b20:	2003      	movs	r0, #3
 8002b22:	e10b      	b.n	8002d3c <HAL_RCC_OscConfig+0x654>
    if(pwrclkchanged == SET)
 8002b24:	b9e6      	cbnz	r6, 8002b60 <HAL_RCC_OscConfig+0x478>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b26:	6823      	ldr	r3, [r4, #0]
 8002b28:	f013 0f20 	tst.w	r3, #32
 8002b2c:	d035      	beq.n	8002b9a <HAL_RCC_OscConfig+0x4b2>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b30:	b1e3      	cbz	r3, 8002b6c <HAL_RCC_OscConfig+0x484>
      __HAL_RCC_HSI48_ENABLE();
 8002b32:	4a31      	ldr	r2, [pc, #196]	; (8002bf8 <HAL_RCC_OscConfig+0x510>)
 8002b34:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002b40:	f7ff fb92 	bl	8002268 <HAL_GetTick>
 8002b44:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b46:	4b2c      	ldr	r3, [pc, #176]	; (8002bf8 <HAL_RCC_OscConfig+0x510>)
 8002b48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b4c:	f013 0f02 	tst.w	r3, #2
 8002b50:	d123      	bne.n	8002b9a <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b52:	f7ff fb89 	bl	8002268 <HAL_GetTick>
 8002b56:	1b80      	subs	r0, r0, r6
 8002b58:	2802      	cmp	r0, #2
 8002b5a:	d9f4      	bls.n	8002b46 <HAL_RCC_OscConfig+0x45e>
          return HAL_TIMEOUT;
 8002b5c:	2003      	movs	r0, #3
 8002b5e:	e0ed      	b.n	8002d3c <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b60:	4a25      	ldr	r2, [pc, #148]	; (8002bf8 <HAL_RCC_OscConfig+0x510>)
 8002b62:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002b64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b68:	6593      	str	r3, [r2, #88]	; 0x58
 8002b6a:	e7dc      	b.n	8002b26 <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_HSI48_DISABLE();
 8002b6c:	4a22      	ldr	r2, [pc, #136]	; (8002bf8 <HAL_RCC_OscConfig+0x510>)
 8002b6e:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8002b72:	f023 0301 	bic.w	r3, r3, #1
 8002b76:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002b7a:	f7ff fb75 	bl	8002268 <HAL_GetTick>
 8002b7e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b80:	4b1d      	ldr	r3, [pc, #116]	; (8002bf8 <HAL_RCC_OscConfig+0x510>)
 8002b82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b86:	f013 0f02 	tst.w	r3, #2
 8002b8a:	d006      	beq.n	8002b9a <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b8c:	f7ff fb6c 	bl	8002268 <HAL_GetTick>
 8002b90:	1b80      	subs	r0, r0, r6
 8002b92:	2802      	cmp	r0, #2
 8002b94:	d9f4      	bls.n	8002b80 <HAL_RCC_OscConfig+0x498>
          return HAL_TIMEOUT;
 8002b96:	2003      	movs	r0, #3
 8002b98:	e0d0      	b.n	8002d3c <HAL_RCC_OscConfig+0x654>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 80cc 	beq.w	8002d3a <HAL_RCC_OscConfig+0x652>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d017      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x4ee>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ba6:	2d0c      	cmp	r5, #12
 8002ba8:	f000 80cc 	beq.w	8002d44 <HAL_RCC_OscConfig+0x65c>
        __HAL_RCC_PLL_DISABLE();
 8002bac:	4a12      	ldr	r2, [pc, #72]	; (8002bf8 <HAL_RCC_OscConfig+0x510>)
 8002bae:	6813      	ldr	r3, [r2, #0]
 8002bb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bb4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002bb6:	f7ff fb57 	bl	8002268 <HAL_GetTick>
 8002bba:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bbc:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <HAL_RCC_OscConfig+0x510>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002bc4:	f000 80a8 	beq.w	8002d18 <HAL_RCC_OscConfig+0x630>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc8:	f7ff fb4e 	bl	8002268 <HAL_GetTick>
 8002bcc:	1b00      	subs	r0, r0, r4
 8002bce:	2802      	cmp	r0, #2
 8002bd0:	d9f4      	bls.n	8002bbc <HAL_RCC_OscConfig+0x4d4>
            return HAL_TIMEOUT;
 8002bd2:	2003      	movs	r0, #3
 8002bd4:	e0b2      	b.n	8002d3c <HAL_RCC_OscConfig+0x654>
      pll_config = RCC->PLLCFGR;
 8002bd6:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <HAL_RCC_OscConfig+0x510>)
 8002bd8:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bda:	f003 0103 	and.w	r1, r3, #3
 8002bde:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002be0:	4291      	cmp	r1, r2
 8002be2:	d00d      	beq.n	8002c00 <HAL_RCC_OscConfig+0x518>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002be4:	2d0c      	cmp	r5, #12
 8002be6:	f000 80ab 	beq.w	8002d40 <HAL_RCC_OscConfig+0x658>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002bea:	4b03      	ldr	r3, [pc, #12]	; (8002bf8 <HAL_RCC_OscConfig+0x510>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8002bf2:	d02f      	beq.n	8002c54 <HAL_RCC_OscConfig+0x56c>
            return HAL_ERROR;
 8002bf4:	2001      	movs	r0, #1
 8002bf6:	e0a1      	b.n	8002d3c <HAL_RCC_OscConfig+0x654>
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	40007000 	.word	0x40007000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c00:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c04:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002c06:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c08:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002c0c:	d1ea      	bne.n	8002be4 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c0e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c12:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c14:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002c18:	d1e4      	bne.n	8002be4 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c1a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002c1e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c20:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8002c24:	d1de      	bne.n	8002be4 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c26:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8002c2a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002c2c:	0852      	lsrs	r2, r2, #1
 8002c2e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c30:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002c34:	d1d6      	bne.n	8002be4 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c36:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002c3a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002c3c:	0852      	lsrs	r2, r2, #1
 8002c3e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c40:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8002c44:	d1ce      	bne.n	8002be4 <HAL_RCC_OscConfig+0x4fc>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c46:	4b40      	ldr	r3, [pc, #256]	; (8002d48 <HAL_RCC_OscConfig+0x660>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002c4e:	d049      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x5fc>
  return HAL_OK;
 8002c50:	2000      	movs	r0, #0
 8002c52:	e073      	b.n	8002d3c <HAL_RCC_OscConfig+0x654>
            __HAL_RCC_PLL_DISABLE();
 8002c54:	4a3c      	ldr	r2, [pc, #240]	; (8002d48 <HAL_RCC_OscConfig+0x660>)
 8002c56:	6813      	ldr	r3, [r2, #0]
 8002c58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c5c:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8002c5e:	f7ff fb03 	bl	8002268 <HAL_GetTick>
 8002c62:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c64:	4b38      	ldr	r3, [pc, #224]	; (8002d48 <HAL_RCC_OscConfig+0x660>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002c6c:	d006      	beq.n	8002c7c <HAL_RCC_OscConfig+0x594>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6e:	f7ff fafb 	bl	8002268 <HAL_GetTick>
 8002c72:	1b40      	subs	r0, r0, r5
 8002c74:	2802      	cmp	r0, #2
 8002c76:	d9f5      	bls.n	8002c64 <HAL_RCC_OscConfig+0x57c>
                return HAL_TIMEOUT;
 8002c78:	2003      	movs	r0, #3
 8002c7a:	e05f      	b.n	8002d3c <HAL_RCC_OscConfig+0x654>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c7c:	4a32      	ldr	r2, [pc, #200]	; (8002d48 <HAL_RCC_OscConfig+0x660>)
 8002c7e:	68d3      	ldr	r3, [r2, #12]
 8002c80:	4932      	ldr	r1, [pc, #200]	; (8002d4c <HAL_RCC_OscConfig+0x664>)
 8002c82:	4019      	ands	r1, r3
 8002c84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c86:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002c88:	3801      	subs	r0, #1
 8002c8a:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8002c8e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002c90:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002c94:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002c96:	0840      	lsrs	r0, r0, #1
 8002c98:	3801      	subs	r0, #1
 8002c9a:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8002c9e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002ca0:	0840      	lsrs	r0, r0, #1
 8002ca2:	3801      	subs	r0, #1
 8002ca4:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8002ca8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002caa:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8002cae:	430b      	orrs	r3, r1
 8002cb0:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 8002cb2:	6813      	ldr	r3, [r2, #0]
 8002cb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cb8:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cba:	68d3      	ldr	r3, [r2, #12]
 8002cbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cc0:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 8002cc2:	f7ff fad1 	bl	8002268 <HAL_GetTick>
 8002cc6:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cc8:	4b1f      	ldr	r3, [pc, #124]	; (8002d48 <HAL_RCC_OscConfig+0x660>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002cd0:	d106      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x5f8>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd2:	f7ff fac9 	bl	8002268 <HAL_GetTick>
 8002cd6:	1b00      	subs	r0, r0, r4
 8002cd8:	2802      	cmp	r0, #2
 8002cda:	d9f5      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x5e0>
                return HAL_TIMEOUT;
 8002cdc:	2003      	movs	r0, #3
 8002cde:	e02d      	b.n	8002d3c <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	e02b      	b.n	8002d3c <HAL_RCC_OscConfig+0x654>
          __HAL_RCC_PLL_ENABLE();
 8002ce4:	4b18      	ldr	r3, [pc, #96]	; (8002d48 <HAL_RCC_OscConfig+0x660>)
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002cec:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cee:	68da      	ldr	r2, [r3, #12]
 8002cf0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002cf4:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 8002cf6:	f7ff fab7 	bl	8002268 <HAL_GetTick>
 8002cfa:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cfc:	4b12      	ldr	r3, [pc, #72]	; (8002d48 <HAL_RCC_OscConfig+0x660>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002d04:	d106      	bne.n	8002d14 <HAL_RCC_OscConfig+0x62c>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d06:	f7ff faaf 	bl	8002268 <HAL_GetTick>
 8002d0a:	1b03      	subs	r3, r0, r4
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d9f5      	bls.n	8002cfc <HAL_RCC_OscConfig+0x614>
              return HAL_TIMEOUT;
 8002d10:	2003      	movs	r0, #3
 8002d12:	e013      	b.n	8002d3c <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 8002d14:	2000      	movs	r0, #0
 8002d16:	e011      	b.n	8002d3c <HAL_RCC_OscConfig+0x654>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002d18:	4a0b      	ldr	r2, [pc, #44]	; (8002d48 <HAL_RCC_OscConfig+0x660>)
 8002d1a:	68d1      	ldr	r1, [r2, #12]
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <HAL_RCC_OscConfig+0x668>)
 8002d1e:	400b      	ands	r3, r1
 8002d20:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8002d22:	2000      	movs	r0, #0
 8002d24:	e00a      	b.n	8002d3c <HAL_RCC_OscConfig+0x654>
    return HAL_ERROR;
 8002d26:	2001      	movs	r0, #1
}
 8002d28:	4770      	bx	lr
        return HAL_ERROR;
 8002d2a:	2001      	movs	r0, #1
 8002d2c:	e006      	b.n	8002d3c <HAL_RCC_OscConfig+0x654>
            return HAL_ERROR;
 8002d2e:	2001      	movs	r0, #1
 8002d30:	e004      	b.n	8002d3c <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 8002d32:	2001      	movs	r0, #1
 8002d34:	e002      	b.n	8002d3c <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 8002d36:	2001      	movs	r0, #1
 8002d38:	e000      	b.n	8002d3c <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 8002d3a:	2000      	movs	r0, #0
}
 8002d3c:	b003      	add	sp, #12
 8002d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8002d40:	2001      	movs	r0, #1
 8002d42:	e7fb      	b.n	8002d3c <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 8002d44:	2001      	movs	r0, #1
 8002d46:	e7f9      	b.n	8002d3c <HAL_RCC_OscConfig+0x654>
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	019d808c 	.word	0x019d808c
 8002d50:	feeefffc 	.word	0xfeeefffc

08002d54 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002d54:	2800      	cmp	r0, #0
 8002d56:	f000 80af 	beq.w	8002eb8 <HAL_RCC_ClockConfig+0x164>
{
 8002d5a:	b570      	push	{r4, r5, r6, lr}
 8002d5c:	460d      	mov	r5, r1
 8002d5e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d60:	4b59      	ldr	r3, [pc, #356]	; (8002ec8 <HAL_RCC_ClockConfig+0x174>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	428b      	cmp	r3, r1
 8002d6a:	d20b      	bcs.n	8002d84 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6c:	4a56      	ldr	r2, [pc, #344]	; (8002ec8 <HAL_RCC_ClockConfig+0x174>)
 8002d6e:	6813      	ldr	r3, [r2, #0]
 8002d70:	f023 0307 	bic.w	r3, r3, #7
 8002d74:	430b      	orrs	r3, r1
 8002d76:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d78:	6813      	ldr	r3, [r2, #0]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	428b      	cmp	r3, r1
 8002d80:	f040 809c 	bne.w	8002ebc <HAL_RCC_ClockConfig+0x168>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d84:	6823      	ldr	r3, [r4, #0]
 8002d86:	f013 0f02 	tst.w	r3, #2
 8002d8a:	d00c      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x52>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d8c:	68a2      	ldr	r2, [r4, #8]
 8002d8e:	4b4f      	ldr	r3, [pc, #316]	; (8002ecc <HAL_RCC_ClockConfig+0x178>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d905      	bls.n	8002da6 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d9a:	494c      	ldr	r1, [pc, #304]	; (8002ecc <HAL_RCC_ClockConfig+0x178>)
 8002d9c:	688b      	ldr	r3, [r1, #8]
 8002d9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002da2:	431a      	orrs	r2, r3
 8002da4:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002da6:	6823      	ldr	r3, [r4, #0]
 8002da8:	f013 0f01 	tst.w	r3, #1
 8002dac:	d039      	beq.n	8002e22 <HAL_RCC_ClockConfig+0xce>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dae:	6863      	ldr	r3, [r4, #4]
 8002db0:	2b03      	cmp	r3, #3
 8002db2:	d009      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x74>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d026      	beq.n	8002e06 <HAL_RCC_ClockConfig+0xb2>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002db8:	bb63      	cbnz	r3, 8002e14 <HAL_RCC_ClockConfig+0xc0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dba:	4a44      	ldr	r2, [pc, #272]	; (8002ecc <HAL_RCC_ClockConfig+0x178>)
 8002dbc:	6812      	ldr	r2, [r2, #0]
 8002dbe:	f012 0f02 	tst.w	r2, #2
 8002dc2:	d106      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8002dc4:	2001      	movs	r0, #1
 8002dc6:	e076      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x162>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dc8:	4a40      	ldr	r2, [pc, #256]	; (8002ecc <HAL_RCC_ClockConfig+0x178>)
 8002dca:	6812      	ldr	r2, [r2, #0]
 8002dcc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002dd0:	d076      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x16c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002dd2:	493e      	ldr	r1, [pc, #248]	; (8002ecc <HAL_RCC_ClockConfig+0x178>)
 8002dd4:	688a      	ldr	r2, [r1, #8]
 8002dd6:	f022 0203 	bic.w	r2, r2, #3
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002dde:	f7ff fa43 	bl	8002268 <HAL_GetTick>
 8002de2:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de4:	4b39      	ldr	r3, [pc, #228]	; (8002ecc <HAL_RCC_ClockConfig+0x178>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f003 030c 	and.w	r3, r3, #12
 8002dec:	6862      	ldr	r2, [r4, #4]
 8002dee:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002df2:	d016      	beq.n	8002e22 <HAL_RCC_ClockConfig+0xce>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002df4:	f7ff fa38 	bl	8002268 <HAL_GetTick>
 8002df8:	1b80      	subs	r0, r0, r6
 8002dfa:	f241 3388 	movw	r3, #5000	; 0x1388
 8002dfe:	4298      	cmp	r0, r3
 8002e00:	d9f0      	bls.n	8002de4 <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 8002e02:	2003      	movs	r0, #3
 8002e04:	e057      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e06:	4a31      	ldr	r2, [pc, #196]	; (8002ecc <HAL_RCC_ClockConfig+0x178>)
 8002e08:	6812      	ldr	r2, [r2, #0]
 8002e0a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002e0e:	d1e0      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8002e10:	2001      	movs	r0, #1
 8002e12:	e050      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e14:	4a2d      	ldr	r2, [pc, #180]	; (8002ecc <HAL_RCC_ClockConfig+0x178>)
 8002e16:	6812      	ldr	r2, [r2, #0]
 8002e18:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002e1c:	d1d9      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8002e1e:	2001      	movs	r0, #1
 8002e20:	e049      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x162>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e22:	6823      	ldr	r3, [r4, #0]
 8002e24:	f013 0f02 	tst.w	r3, #2
 8002e28:	d00c      	beq.n	8002e44 <HAL_RCC_ClockConfig+0xf0>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e2a:	68a2      	ldr	r2, [r4, #8]
 8002e2c:	4b27      	ldr	r3, [pc, #156]	; (8002ecc <HAL_RCC_ClockConfig+0x178>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d205      	bcs.n	8002e44 <HAL_RCC_ClockConfig+0xf0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e38:	4924      	ldr	r1, [pc, #144]	; (8002ecc <HAL_RCC_ClockConfig+0x178>)
 8002e3a:	688b      	ldr	r3, [r1, #8]
 8002e3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e40:	431a      	orrs	r2, r3
 8002e42:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e44:	4b20      	ldr	r3, [pc, #128]	; (8002ec8 <HAL_RCC_ClockConfig+0x174>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	42ab      	cmp	r3, r5
 8002e4e:	d90a      	bls.n	8002e66 <HAL_RCC_ClockConfig+0x112>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e50:	4a1d      	ldr	r2, [pc, #116]	; (8002ec8 <HAL_RCC_ClockConfig+0x174>)
 8002e52:	6813      	ldr	r3, [r2, #0]
 8002e54:	f023 0307 	bic.w	r3, r3, #7
 8002e58:	432b      	orrs	r3, r5
 8002e5a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5c:	6813      	ldr	r3, [r2, #0]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	42ab      	cmp	r3, r5
 8002e64:	d12e      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0x170>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e66:	6823      	ldr	r3, [r4, #0]
 8002e68:	f013 0f04 	tst.w	r3, #4
 8002e6c:	d006      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x128>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e6e:	4a17      	ldr	r2, [pc, #92]	; (8002ecc <HAL_RCC_ClockConfig+0x178>)
 8002e70:	6893      	ldr	r3, [r2, #8]
 8002e72:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e76:	68e1      	ldr	r1, [r4, #12]
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e7c:	6823      	ldr	r3, [r4, #0]
 8002e7e:	f013 0f08 	tst.w	r3, #8
 8002e82:	d007      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e84:	4a11      	ldr	r2, [pc, #68]	; (8002ecc <HAL_RCC_ClockConfig+0x178>)
 8002e86:	6893      	ldr	r3, [r2, #8]
 8002e88:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002e8c:	6921      	ldr	r1, [r4, #16]
 8002e8e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002e92:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e94:	f7ff fbce 	bl	8002634 <HAL_RCC_GetSysClockFreq>
 8002e98:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <HAL_RCC_ClockConfig+0x178>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002ea0:	4a0b      	ldr	r2, [pc, #44]	; (8002ed0 <HAL_RCC_ClockConfig+0x17c>)
 8002ea2:	5cd3      	ldrb	r3, [r2, r3]
 8002ea4:	f003 031f 	and.w	r3, r3, #31
 8002ea8:	40d8      	lsrs	r0, r3
 8002eaa:	4b0a      	ldr	r3, [pc, #40]	; (8002ed4 <HAL_RCC_ClockConfig+0x180>)
 8002eac:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8002eae:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <HAL_RCC_ClockConfig+0x184>)
 8002eb0:	6818      	ldr	r0, [r3, #0]
 8002eb2:	f7ff f995 	bl	80021e0 <HAL_InitTick>
}
 8002eb6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002eb8:	2001      	movs	r0, #1
}
 8002eba:	4770      	bx	lr
      return HAL_ERROR;
 8002ebc:	2001      	movs	r0, #1
 8002ebe:	e7fa      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x162>
        return HAL_ERROR;
 8002ec0:	2001      	movs	r0, #1
 8002ec2:	e7f8      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x162>
      return HAL_ERROR;
 8002ec4:	2001      	movs	r0, #1
 8002ec6:	e7f6      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x162>
 8002ec8:	40022000 	.word	0x40022000
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	08006154 	.word	0x08006154
 8002ed4:	20001320 	.word	0x20001320
 8002ed8:	20001328 	.word	0x20001328

08002edc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	4605      	mov	r5, r0
 8002ee4:	4688      	mov	r8, r1
 8002ee6:	4617      	mov	r7, r2
 8002ee8:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002eea:	f7ff f9bd 	bl	8002268 <HAL_GetTick>
 8002eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ef0:	1a1b      	subs	r3, r3, r0
 8002ef2:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8002ef6:	f7ff f9b7 	bl	8002268 <HAL_GetTick>
 8002efa:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002efc:	4b2b      	ldr	r3, [pc, #172]	; (8002fac <SPI_WaitFlagStateUntilTimeout+0xd0>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8002f04:	fb09 f303 	mul.w	r3, r9, r3
 8002f08:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f0a:	682b      	ldr	r3, [r5, #0]
 8002f0c:	689c      	ldr	r4, [r3, #8]
 8002f0e:	ea38 0304 	bics.w	r3, r8, r4
 8002f12:	bf0c      	ite	eq
 8002f14:	f04f 0c01 	moveq.w	ip, #1
 8002f18:	f04f 0c00 	movne.w	ip, #0
 8002f1c:	45bc      	cmp	ip, r7
 8002f1e:	d040      	beq.n	8002fa2 <SPI_WaitFlagStateUntilTimeout+0xc6>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f20:	f1b6 3fff 	cmp.w	r6, #4294967295
 8002f24:	d0f1      	beq.n	8002f0a <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f26:	f7ff f99f 	bl	8002268 <HAL_GetTick>
 8002f2a:	eba0 000a 	sub.w	r0, r0, sl
 8002f2e:	4548      	cmp	r0, r9
 8002f30:	d20a      	bcs.n	8002f48 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8002f32:	f1b9 0f00 	cmp.w	r9, #0
 8002f36:	d007      	beq.n	8002f48 <SPI_WaitFlagStateUntilTimeout+0x6c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f38:	9a01      	ldr	r2, [sp, #4]
 8002f3a:	b102      	cbz	r2, 8002f3e <SPI_WaitFlagStateUntilTimeout+0x62>
 8002f3c:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8002f3e:	9b01      	ldr	r3, [sp, #4]
 8002f40:	3b01      	subs	r3, #1
 8002f42:	9301      	str	r3, [sp, #4]
 8002f44:	4691      	mov	r9, r2
 8002f46:	e7e0      	b.n	8002f0a <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f48:	682a      	ldr	r2, [r5, #0]
 8002f4a:	6853      	ldr	r3, [r2, #4]
 8002f4c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002f50:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f52:	686b      	ldr	r3, [r5, #4]
 8002f54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f58:	d00b      	beq.n	8002f72 <SPI_WaitFlagStateUntilTimeout+0x96>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f5a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002f5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f60:	d014      	beq.n	8002f8c <SPI_WaitFlagStateUntilTimeout+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 8002f62:	2301      	movs	r3, #1
 8002f64:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 8002f6e:	2003      	movs	r0, #3
 8002f70:	e018      	b.n	8002fa4 <SPI_WaitFlagStateUntilTimeout+0xc8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f72:	68ab      	ldr	r3, [r5, #8]
 8002f74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f78:	d002      	beq.n	8002f80 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f7e:	d1ec      	bne.n	8002f5a <SPI_WaitFlagStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 8002f80:	682a      	ldr	r2, [r5, #0]
 8002f82:	6813      	ldr	r3, [r2, #0]
 8002f84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	e7e6      	b.n	8002f5a <SPI_WaitFlagStateUntilTimeout+0x7e>
          SPI_RESET_CRC(hspi);
 8002f8c:	682a      	ldr	r2, [r5, #0]
 8002f8e:	6813      	ldr	r3, [r2, #0]
 8002f90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	682a      	ldr	r2, [r5, #0]
 8002f98:	6813      	ldr	r3, [r2, #0]
 8002f9a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	e7df      	b.n	8002f62 <SPI_WaitFlagStateUntilTimeout+0x86>
    }
  }

  return HAL_OK;
 8002fa2:	2000      	movs	r0, #0
}
 8002fa4:	b002      	add	sp, #8
 8002fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002faa:	bf00      	nop
 8002fac:	20001320 	.word	0x20001320

08002fb0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	4606      	mov	r6, r0
 8002fb8:	460c      	mov	r4, r1
 8002fba:	4615      	mov	r5, r2
 8002fbc:	461f      	mov	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002fc4:	f7ff f950 	bl	8002268 <HAL_GetTick>
 8002fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002fca:	1a1b      	subs	r3, r3, r0
 8002fcc:	eb03 0807 	add.w	r8, r3, r7
  tmp_tickstart = HAL_GetTick();
 8002fd0:	f7ff f94a 	bl	8002268 <HAL_GetTick>
 8002fd4:	4681      	mov	r9, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002fd6:	f8d6 a000 	ldr.w	sl, [r6]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002fda:	4b31      	ldr	r3, [pc, #196]	; (80030a0 <SPI_WaitFifoStateUntilTimeout+0xf0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002fe2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8002fe6:	0d1b      	lsrs	r3, r3, #20
 8002fe8:	fb08 f303 	mul.w	r3, r8, r3
 8002fec:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8002fee:	e002      	b.n	8002ff6 <SPI_WaitFifoStateUntilTimeout+0x46>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8002ff0:	f1b7 3fff 	cmp.w	r7, #4294967295
 8002ff4:	d112      	bne.n	800301c <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 8002ff6:	6833      	ldr	r3, [r6, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	ea03 0c04 	and.w	ip, r3, r4
 8002ffe:	45ac      	cmp	ip, r5
 8003000:	d04a      	beq.n	8003098 <SPI_WaitFifoStateUntilTimeout+0xe8>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003002:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8003006:	d1f3      	bne.n	8002ff0 <SPI_WaitFifoStateUntilTimeout+0x40>
 8003008:	2d00      	cmp	r5, #0
 800300a:	d1f1      	bne.n	8002ff0 <SPI_WaitFifoStateUntilTimeout+0x40>
      tmpreg8 = *ptmpreg8;
 800300c:	f89a 300c 	ldrb.w	r3, [sl, #12]
 8003010:	b2db      	uxtb	r3, r3
 8003012:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8003016:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800301a:	e7e9      	b.n	8002ff0 <SPI_WaitFifoStateUntilTimeout+0x40>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800301c:	f7ff f924 	bl	8002268 <HAL_GetTick>
 8003020:	eba0 0009 	sub.w	r0, r0, r9
 8003024:	4540      	cmp	r0, r8
 8003026:	d20a      	bcs.n	800303e <SPI_WaitFifoStateUntilTimeout+0x8e>
 8003028:	f1b8 0f00 	cmp.w	r8, #0
 800302c:	d007      	beq.n	800303e <SPI_WaitFifoStateUntilTimeout+0x8e>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800302e:	9a01      	ldr	r2, [sp, #4]
 8003030:	b102      	cbz	r2, 8003034 <SPI_WaitFifoStateUntilTimeout+0x84>
 8003032:	4642      	mov	r2, r8
      {
        tmp_timeout = 0U;
      }
      count--;
 8003034:	9b01      	ldr	r3, [sp, #4]
 8003036:	3b01      	subs	r3, #1
 8003038:	9301      	str	r3, [sp, #4]
 800303a:	4690      	mov	r8, r2
 800303c:	e7db      	b.n	8002ff6 <SPI_WaitFifoStateUntilTimeout+0x46>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800303e:	6832      	ldr	r2, [r6, #0]
 8003040:	6853      	ldr	r3, [r2, #4]
 8003042:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003046:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003048:	6873      	ldr	r3, [r6, #4]
 800304a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800304e:	d00b      	beq.n	8003068 <SPI_WaitFifoStateUntilTimeout+0xb8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003050:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003056:	d014      	beq.n	8003082 <SPI_WaitFifoStateUntilTimeout+0xd2>
        hspi->State = HAL_SPI_STATE_READY;
 8003058:	2301      	movs	r3, #1
 800305a:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800305e:	2300      	movs	r3, #0
 8003060:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 8003064:	2003      	movs	r0, #3
 8003066:	e018      	b.n	800309a <SPI_WaitFifoStateUntilTimeout+0xea>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003068:	68b3      	ldr	r3, [r6, #8]
 800306a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800306e:	d002      	beq.n	8003076 <SPI_WaitFifoStateUntilTimeout+0xc6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003074:	d1ec      	bne.n	8003050 <SPI_WaitFifoStateUntilTimeout+0xa0>
          __HAL_SPI_DISABLE(hspi);
 8003076:	6832      	ldr	r2, [r6, #0]
 8003078:	6813      	ldr	r3, [r2, #0]
 800307a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800307e:	6013      	str	r3, [r2, #0]
 8003080:	e7e6      	b.n	8003050 <SPI_WaitFifoStateUntilTimeout+0xa0>
          SPI_RESET_CRC(hspi);
 8003082:	6832      	ldr	r2, [r6, #0]
 8003084:	6813      	ldr	r3, [r2, #0]
 8003086:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800308a:	6013      	str	r3, [r2, #0]
 800308c:	6832      	ldr	r2, [r6, #0]
 800308e:	6813      	ldr	r3, [r2, #0]
 8003090:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	e7df      	b.n	8003058 <SPI_WaitFifoStateUntilTimeout+0xa8>
    }
  }

  return HAL_OK;
 8003098:	2000      	movs	r0, #0
}
 800309a:	b002      	add	sp, #8
 800309c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030a0:	20001320 	.word	0x20001320

080030a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80030a4:	b570      	push	{r4, r5, r6, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	4604      	mov	r4, r0
 80030aa:	460d      	mov	r5, r1
 80030ac:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80030ae:	9200      	str	r2, [sp, #0]
 80030b0:	460b      	mov	r3, r1
 80030b2:	2200      	movs	r2, #0
 80030b4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80030b8:	f7ff ff7a 	bl	8002fb0 <SPI_WaitFifoStateUntilTimeout>
 80030bc:	b9b0      	cbnz	r0, 80030ec <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030be:	9600      	str	r6, [sp, #0]
 80030c0:	462b      	mov	r3, r5
 80030c2:	2200      	movs	r2, #0
 80030c4:	2180      	movs	r1, #128	; 0x80
 80030c6:	4620      	mov	r0, r4
 80030c8:	f7ff ff08 	bl	8002edc <SPI_WaitFlagStateUntilTimeout>
 80030cc:	b9a8      	cbnz	r0, 80030fa <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80030ce:	9600      	str	r6, [sp, #0]
 80030d0:	462b      	mov	r3, r5
 80030d2:	2200      	movs	r2, #0
 80030d4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80030d8:	4620      	mov	r0, r4
 80030da:	f7ff ff69 	bl	8002fb0 <SPI_WaitFifoStateUntilTimeout>
 80030de:	b150      	cbz	r0, 80030f6 <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030e0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80030e2:	f043 0320 	orr.w	r3, r3, #32
 80030e6:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80030e8:	2003      	movs	r0, #3
 80030ea:	e004      	b.n	80030f6 <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030ec:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80030ee:	f043 0320 	orr.w	r3, r3, #32
 80030f2:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80030f4:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 80030f6:	b002      	add	sp, #8
 80030f8:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030fa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80030fc:	f043 0320 	orr.w	r3, r3, #32
 8003100:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003102:	2003      	movs	r0, #3
 8003104:	e7f7      	b.n	80030f6 <SPI_EndRxTxTransaction+0x52>

08003106 <SPI_EndRxTransaction>:
{
 8003106:	b570      	push	{r4, r5, r6, lr}
 8003108:	b082      	sub	sp, #8
 800310a:	4604      	mov	r4, r0
 800310c:	460d      	mov	r5, r1
 800310e:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003110:	6843      	ldr	r3, [r0, #4]
 8003112:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003116:	d00d      	beq.n	8003134 <SPI_EndRxTransaction+0x2e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003118:	9600      	str	r6, [sp, #0]
 800311a:	462b      	mov	r3, r5
 800311c:	2200      	movs	r2, #0
 800311e:	2180      	movs	r1, #128	; 0x80
 8003120:	4620      	mov	r0, r4
 8003122:	f7ff fedb 	bl	8002edc <SPI_WaitFlagStateUntilTimeout>
 8003126:	b990      	cbnz	r0, 800314e <SPI_EndRxTransaction+0x48>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003128:	6863      	ldr	r3, [r4, #4]
 800312a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800312e:	d014      	beq.n	800315a <SPI_EndRxTransaction+0x54>
}
 8003130:	b002      	add	sp, #8
 8003132:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003134:	6883      	ldr	r3, [r0, #8]
 8003136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800313a:	d002      	beq.n	8003142 <SPI_EndRxTransaction+0x3c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800313c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003140:	d1ea      	bne.n	8003118 <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 8003142:	6822      	ldr	r2, [r4, #0]
 8003144:	6813      	ldr	r3, [r2, #0]
 8003146:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800314a:	6013      	str	r3, [r2, #0]
 800314c:	e7e4      	b.n	8003118 <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800314e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003150:	f043 0320 	orr.w	r3, r3, #32
 8003154:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003156:	2003      	movs	r0, #3
 8003158:	e7ea      	b.n	8003130 <SPI_EndRxTransaction+0x2a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800315a:	68a3      	ldr	r3, [r4, #8]
 800315c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003160:	d002      	beq.n	8003168 <SPI_EndRxTransaction+0x62>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003166:	d1e3      	bne.n	8003130 <SPI_EndRxTransaction+0x2a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003168:	9600      	str	r6, [sp, #0]
 800316a:	462b      	mov	r3, r5
 800316c:	2200      	movs	r2, #0
 800316e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003172:	4620      	mov	r0, r4
 8003174:	f7ff ff1c 	bl	8002fb0 <SPI_WaitFifoStateUntilTimeout>
 8003178:	2800      	cmp	r0, #0
 800317a:	d0d9      	beq.n	8003130 <SPI_EndRxTransaction+0x2a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800317c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800317e:	f043 0320 	orr.w	r3, r3, #32
 8003182:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8003184:	2003      	movs	r0, #3
 8003186:	e7d3      	b.n	8003130 <SPI_EndRxTransaction+0x2a>

08003188 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003188:	2800      	cmp	r0, #0
 800318a:	d06a      	beq.n	8003262 <HAL_SPI_Init+0xda>
{
 800318c:	b510      	push	{r4, lr}
 800318e:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003190:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003192:	b933      	cbnz	r3, 80031a2 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003194:	6843      	ldr	r3, [r0, #4]
 8003196:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800319a:	d005      	beq.n	80031a8 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800319c:	2300      	movs	r3, #0
 800319e:	61c3      	str	r3, [r0, #28]
 80031a0:	e002      	b.n	80031a8 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031a2:	2300      	movs	r3, #0
 80031a4:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031a6:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031a8:	2300      	movs	r3, #0
 80031aa:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80031ac:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d04d      	beq.n	8003250 <HAL_SPI_Init+0xc8>
  hspi->State = HAL_SPI_STATE_BUSY;
 80031b4:	2302      	movs	r3, #2
 80031b6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80031ba:	6822      	ldr	r2, [r4, #0]
 80031bc:	6813      	ldr	r3, [r2, #0]
 80031be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031c2:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031c4:	68e3      	ldr	r3, [r4, #12]
 80031c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031ca:	d947      	bls.n	800325c <HAL_SPI_Init+0xd4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80031cc:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80031ce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80031d2:	d004      	beq.n	80031de <HAL_SPI_Init+0x56>
 80031d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031d8:	d001      	beq.n	80031de <HAL_SPI_Init+0x56>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031da:	2300      	movs	r3, #0
 80031dc:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031de:	6863      	ldr	r3, [r4, #4]
 80031e0:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80031e4:	68a1      	ldr	r1, [r4, #8]
 80031e6:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 80031ea:	430b      	orrs	r3, r1
 80031ec:	6921      	ldr	r1, [r4, #16]
 80031ee:	f001 0102 	and.w	r1, r1, #2
 80031f2:	430b      	orrs	r3, r1
 80031f4:	6961      	ldr	r1, [r4, #20]
 80031f6:	f001 0101 	and.w	r1, r1, #1
 80031fa:	430b      	orrs	r3, r1
 80031fc:	69a1      	ldr	r1, [r4, #24]
 80031fe:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8003202:	430b      	orrs	r3, r1
 8003204:	69e1      	ldr	r1, [r4, #28]
 8003206:	f001 0138 	and.w	r1, r1, #56	; 0x38
 800320a:	430b      	orrs	r3, r1
 800320c:	6a21      	ldr	r1, [r4, #32]
 800320e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003212:	430b      	orrs	r3, r1
 8003214:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003216:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 800321a:	6820      	ldr	r0, [r4, #0]
 800321c:	430b      	orrs	r3, r1
 800321e:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003220:	8b63      	ldrh	r3, [r4, #26]
 8003222:	f003 0304 	and.w	r3, r3, #4
 8003226:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003228:	f001 0110 	and.w	r1, r1, #16
 800322c:	430b      	orrs	r3, r1
 800322e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003230:	f001 0108 	and.w	r1, r1, #8
 8003234:	430b      	orrs	r3, r1
 8003236:	68e1      	ldr	r1, [r4, #12]
 8003238:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 800323c:	430b      	orrs	r3, r1
 800323e:	6821      	ldr	r1, [r4, #0]
 8003240:	4313      	orrs	r3, r2
 8003242:	604b      	str	r3, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003244:	2000      	movs	r0, #0
 8003246:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003248:	2301      	movs	r3, #1
 800324a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 800324e:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003250:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8003254:	4620      	mov	r0, r4
 8003256:	f7fe fef1 	bl	800203c <HAL_SPI_MspInit>
 800325a:	e7ab      	b.n	80031b4 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800325c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003260:	e7b5      	b.n	80031ce <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8003262:	2001      	movs	r0, #1
}
 8003264:	4770      	bx	lr

08003266 <HAL_SPI_Transmit>:
{
 8003266:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800326a:	b083      	sub	sp, #12
 800326c:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800326e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8003272:	2b01      	cmp	r3, #1
 8003274:	f000 80f6 	beq.w	8003464 <HAL_SPI_Transmit+0x1fe>
 8003278:	4604      	mov	r4, r0
 800327a:	4688      	mov	r8, r1
 800327c:	4691      	mov	r9, r2
 800327e:	2301      	movs	r3, #1
 8003280:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003284:	f7fe fff0 	bl	8002268 <HAL_GetTick>
 8003288:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800328a:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 800328e:	b2f6      	uxtb	r6, r6
 8003290:	2e01      	cmp	r6, #1
 8003292:	f040 80d4 	bne.w	800343e <HAL_SPI_Transmit+0x1d8>
  if ((pData == NULL) || (Size == 0U))
 8003296:	f1b8 0f00 	cmp.w	r8, #0
 800329a:	f000 80d1 	beq.w	8003440 <HAL_SPI_Transmit+0x1da>
 800329e:	f1b9 0f00 	cmp.w	r9, #0
 80032a2:	f000 80cd 	beq.w	8003440 <HAL_SPI_Transmit+0x1da>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032a6:	2303      	movs	r3, #3
 80032a8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032ac:	2300      	movs	r3, #0
 80032ae:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80032b0:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80032b4:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80032b8:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032bc:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80032be:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80032c2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 80032c6:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 80032c8:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032ca:	68a3      	ldr	r3, [r4, #8]
 80032cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032d0:	d01e      	beq.n	8003310 <HAL_SPI_Transmit+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032d2:	6823      	ldr	r3, [r4, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80032da:	d103      	bne.n	80032e4 <HAL_SPI_Transmit+0x7e>
    __HAL_SPI_ENABLE(hspi);
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032e2:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032e4:	68e3      	ldr	r3, [r4, #12]
 80032e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032ea:	d942      	bls.n	8003372 <HAL_SPI_Transmit+0x10c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032ec:	6863      	ldr	r3, [r4, #4]
 80032ee:	b113      	cbz	r3, 80032f6 <HAL_SPI_Transmit+0x90>
 80032f0:	f1b9 0f01 	cmp.w	r9, #1
 80032f4:	d123      	bne.n	800333e <HAL_SPI_Transmit+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032f6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80032f8:	6823      	ldr	r3, [r4, #0]
 80032fa:	8812      	ldrh	r2, [r2, #0]
 80032fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003300:	3302      	adds	r3, #2
 8003302:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003304:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003306:	b29b      	uxth	r3, r3
 8003308:	3b01      	subs	r3, #1
 800330a:	b29b      	uxth	r3, r3
 800330c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800330e:	e016      	b.n	800333e <HAL_SPI_Transmit+0xd8>
    __HAL_SPI_DISABLE(hspi);
 8003310:	6822      	ldr	r2, [r4, #0]
 8003312:	6813      	ldr	r3, [r2, #0]
 8003314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003318:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 800331a:	6822      	ldr	r2, [r4, #0]
 800331c:	6813      	ldr	r3, [r2, #0]
 800331e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	e7d5      	b.n	80032d2 <HAL_SPI_Transmit+0x6c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003326:	f7fe ff9f 	bl	8002268 <HAL_GetTick>
 800332a:	1bc0      	subs	r0, r0, r7
 800332c:	42a8      	cmp	r0, r5
 800332e:	d303      	bcc.n	8003338 <HAL_SPI_Transmit+0xd2>
 8003330:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003334:	f040 808e 	bne.w	8003454 <HAL_SPI_Transmit+0x1ee>
 8003338:	2d00      	cmp	r5, #0
 800333a:	f000 808d 	beq.w	8003458 <HAL_SPI_Transmit+0x1f2>
    while (hspi->TxXferCount > 0U)
 800333e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003340:	b29b      	uxth	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d066      	beq.n	8003414 <HAL_SPI_Transmit+0x1ae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003346:	6823      	ldr	r3, [r4, #0]
 8003348:	689a      	ldr	r2, [r3, #8]
 800334a:	f012 0f02 	tst.w	r2, #2
 800334e:	d0ea      	beq.n	8003326 <HAL_SPI_Transmit+0xc0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003350:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003352:	8812      	ldrh	r2, [r2, #0]
 8003354:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003356:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003358:	3302      	adds	r3, #2
 800335a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800335c:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 8003360:	fa1f fc8c 	uxth.w	ip, ip
 8003364:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003368:	fa1f fc8c 	uxth.w	ip, ip
 800336c:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 8003370:	e7e5      	b.n	800333e <HAL_SPI_Transmit+0xd8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003372:	6863      	ldr	r3, [r4, #4]
 8003374:	b113      	cbz	r3, 800337c <HAL_SPI_Transmit+0x116>
 8003376:	f1b9 0f01 	cmp.w	r9, #1
 800337a:	d133      	bne.n	80033e4 <HAL_SPI_Transmit+0x17e>
      if (hspi->TxXferCount > 1U)
 800337c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800337e:	b29b      	uxth	r3, r3
 8003380:	2b01      	cmp	r3, #1
 8003382:	d90c      	bls.n	800339e <HAL_SPI_Transmit+0x138>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003384:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003386:	6823      	ldr	r3, [r4, #0]
 8003388:	8812      	ldrh	r2, [r2, #0]
 800338a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800338c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800338e:	3302      	adds	r3, #2
 8003390:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003392:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003394:	b29b      	uxth	r3, r3
 8003396:	3b02      	subs	r3, #2
 8003398:	b29b      	uxth	r3, r3
 800339a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800339c:	e022      	b.n	80033e4 <HAL_SPI_Transmit+0x17e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800339e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80033a0:	6823      	ldr	r3, [r4, #0]
 80033a2:	7812      	ldrb	r2, [r2, #0]
 80033a4:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 80033a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80033a8:	3301      	adds	r3, #1
 80033aa:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80033ac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80033b6:	e015      	b.n	80033e4 <HAL_SPI_Transmit+0x17e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80033be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80033c0:	3301      	adds	r3, #1
 80033c2:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80033c4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80033ce:	e009      	b.n	80033e4 <HAL_SPI_Transmit+0x17e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033d0:	f7fe ff4a 	bl	8002268 <HAL_GetTick>
 80033d4:	1bc0      	subs	r0, r0, r7
 80033d6:	42a8      	cmp	r0, r5
 80033d8:	d302      	bcc.n	80033e0 <HAL_SPI_Transmit+0x17a>
 80033da:	f1b5 3fff 	cmp.w	r5, #4294967295
 80033de:	d13d      	bne.n	800345c <HAL_SPI_Transmit+0x1f6>
 80033e0:	2d00      	cmp	r5, #0
 80033e2:	d03d      	beq.n	8003460 <HAL_SPI_Transmit+0x1fa>
    while (hspi->TxXferCount > 0U)
 80033e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	b1a3      	cbz	r3, 8003414 <HAL_SPI_Transmit+0x1ae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033ea:	6822      	ldr	r2, [r4, #0]
 80033ec:	6893      	ldr	r3, [r2, #8]
 80033ee:	f013 0f02 	tst.w	r3, #2
 80033f2:	d0ed      	beq.n	80033d0 <HAL_SPI_Transmit+0x16a>
        if (hspi->TxXferCount > 1U)
 80033f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d9dd      	bls.n	80033b8 <HAL_SPI_Transmit+0x152>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003402:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003404:	3302      	adds	r3, #2
 8003406:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003408:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800340a:	b29b      	uxth	r3, r3
 800340c:	3b02      	subs	r3, #2
 800340e:	b29b      	uxth	r3, r3
 8003410:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003412:	e7e7      	b.n	80033e4 <HAL_SPI_Transmit+0x17e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003414:	463a      	mov	r2, r7
 8003416:	4629      	mov	r1, r5
 8003418:	4620      	mov	r0, r4
 800341a:	f7ff fe43 	bl	80030a4 <SPI_EndRxTxTransaction>
 800341e:	b108      	cbz	r0, 8003424 <HAL_SPI_Transmit+0x1be>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003420:	2320      	movs	r3, #32
 8003422:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003424:	68a3      	ldr	r3, [r4, #8]
 8003426:	b933      	cbnz	r3, 8003436 <HAL_SPI_Transmit+0x1d0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003428:	9301      	str	r3, [sp, #4]
 800342a:	6823      	ldr	r3, [r4, #0]
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	9201      	str	r2, [sp, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	9301      	str	r3, [sp, #4]
 8003434:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003436:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003438:	b913      	cbnz	r3, 8003440 <HAL_SPI_Transmit+0x1da>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800343a:	2600      	movs	r6, #0
 800343c:	e000      	b.n	8003440 <HAL_SPI_Transmit+0x1da>
    errorcode = HAL_BUSY;
 800343e:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003440:	2301      	movs	r3, #1
 8003442:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003446:	2300      	movs	r3, #0
 8003448:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800344c:	4630      	mov	r0, r6
 800344e:	b003      	add	sp, #12
 8003450:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8003454:	2603      	movs	r6, #3
 8003456:	e7f3      	b.n	8003440 <HAL_SPI_Transmit+0x1da>
 8003458:	2603      	movs	r6, #3
 800345a:	e7f1      	b.n	8003440 <HAL_SPI_Transmit+0x1da>
          errorcode = HAL_TIMEOUT;
 800345c:	2603      	movs	r6, #3
 800345e:	e7ef      	b.n	8003440 <HAL_SPI_Transmit+0x1da>
 8003460:	2603      	movs	r6, #3
 8003462:	e7ed      	b.n	8003440 <HAL_SPI_Transmit+0x1da>
  __HAL_LOCK(hspi);
 8003464:	2602      	movs	r6, #2
 8003466:	e7f1      	b.n	800344c <HAL_SPI_Transmit+0x1e6>

08003468 <HAL_SPI_TransmitReceive>:
{
 8003468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800346c:	461f      	mov	r7, r3
 800346e:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 8003470:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8003474:	2b01      	cmp	r3, #1
 8003476:	f000 8164 	beq.w	8003742 <HAL_SPI_TransmitReceive+0x2da>
 800347a:	4604      	mov	r4, r0
 800347c:	4688      	mov	r8, r1
 800347e:	4691      	mov	r9, r2
 8003480:	2301      	movs	r3, #1
 8003482:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003486:	f7fe feef 	bl	8002268 <HAL_GetTick>
 800348a:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 800348c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003490:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8003492:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003494:	2b01      	cmp	r3, #1
 8003496:	d00a      	beq.n	80034ae <HAL_SPI_TransmitReceive+0x46>
 8003498:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800349c:	f040 8138 	bne.w	8003710 <HAL_SPI_TransmitReceive+0x2a8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80034a0:	68a2      	ldr	r2, [r4, #8]
 80034a2:	2a00      	cmp	r2, #0
 80034a4:	f040 813d 	bne.w	8003722 <HAL_SPI_TransmitReceive+0x2ba>
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	f040 813c 	bne.w	8003726 <HAL_SPI_TransmitReceive+0x2be>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80034ae:	f1b8 0f00 	cmp.w	r8, #0
 80034b2:	f000 813a 	beq.w	800372a <HAL_SPI_TransmitReceive+0x2c2>
 80034b6:	f1b9 0f00 	cmp.w	r9, #0
 80034ba:	f000 8138 	beq.w	800372e <HAL_SPI_TransmitReceive+0x2c6>
 80034be:	2f00      	cmp	r7, #0
 80034c0:	f000 8137 	beq.w	8003732 <HAL_SPI_TransmitReceive+0x2ca>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80034c4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d002      	beq.n	80034d4 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80034ce:	2305      	movs	r3, #5
 80034d0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034d4:	2300      	movs	r3, #0
 80034d6:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80034d8:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80034dc:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80034e0:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80034e4:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80034e8:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80034ea:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 80034ec:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80034ee:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80034f0:	68e3      	ldr	r3, [r4, #12]
 80034f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034f6:	d801      	bhi.n	80034fc <HAL_SPI_TransmitReceive+0x94>
 80034f8:	2f01      	cmp	r7, #1
 80034fa:	d923      	bls.n	8003544 <HAL_SPI_TransmitReceive+0xdc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034fc:	6822      	ldr	r2, [r4, #0]
 80034fe:	6853      	ldr	r3, [r2, #4]
 8003500:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003504:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003506:	6823      	ldr	r3, [r4, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800350e:	d103      	bne.n	8003518 <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003516:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003518:	68e3      	ldr	r3, [r4, #12]
 800351a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800351e:	d958      	bls.n	80035d2 <HAL_SPI_TransmitReceive+0x16a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003520:	6863      	ldr	r3, [r4, #4]
 8003522:	b10b      	cbz	r3, 8003528 <HAL_SPI_TransmitReceive+0xc0>
 8003524:	2f01      	cmp	r7, #1
 8003526:	d10b      	bne.n	8003540 <HAL_SPI_TransmitReceive+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003528:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800352a:	6823      	ldr	r3, [r4, #0]
 800352c:	8812      	ldrh	r2, [r2, #0]
 800352e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003530:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003532:	3302      	adds	r3, #2
 8003534:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003536:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003538:	b29b      	uxth	r3, r3
 800353a:	3b01      	subs	r3, #1
 800353c:	b29b      	uxth	r3, r3
 800353e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003540:	2701      	movs	r7, #1
 8003542:	e031      	b.n	80035a8 <HAL_SPI_TransmitReceive+0x140>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003544:	6822      	ldr	r2, [r4, #0]
 8003546:	6853      	ldr	r3, [r2, #4]
 8003548:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800354c:	6053      	str	r3, [r2, #4]
 800354e:	e7da      	b.n	8003506 <HAL_SPI_TransmitReceive+0x9e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003550:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003552:	8812      	ldrh	r2, [r2, #0]
 8003554:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003556:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003558:	3302      	adds	r3, #2
 800355a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800355c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800355e:	b29b      	uxth	r3, r3
 8003560:	3b01      	subs	r3, #1
 8003562:	b29b      	uxth	r3, r3
 8003564:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8003566:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003568:	6823      	ldr	r3, [r4, #0]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	f012 0f01 	tst.w	r2, #1
 8003570:	d011      	beq.n	8003596 <HAL_SPI_TransmitReceive+0x12e>
 8003572:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003576:	b292      	uxth	r2, r2
 8003578:	b16a      	cbz	r2, 8003596 <HAL_SPI_TransmitReceive+0x12e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800357a:	68da      	ldr	r2, [r3, #12]
 800357c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800357e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003580:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003582:	3302      	adds	r3, #2
 8003584:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003586:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800358a:	b29b      	uxth	r3, r3
 800358c:	3b01      	subs	r3, #1
 800358e:	b29b      	uxth	r3, r3
 8003590:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8003594:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003596:	f7fe fe67 	bl	8002268 <HAL_GetTick>
 800359a:	1b83      	subs	r3, r0, r6
 800359c:	42ab      	cmp	r3, r5
 800359e:	d303      	bcc.n	80035a8 <HAL_SPI_TransmitReceive+0x140>
 80035a0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80035a4:	f040 80c7 	bne.w	8003736 <HAL_SPI_TransmitReceive+0x2ce>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035a8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	b92b      	cbnz	r3, 80035ba <HAL_SPI_TransmitReceive+0x152>
 80035ae:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 80a1 	beq.w	80036fc <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035ba:	6823      	ldr	r3, [r4, #0]
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	f012 0f02 	tst.w	r2, #2
 80035c2:	d0d1      	beq.n	8003568 <HAL_SPI_TransmitReceive+0x100>
 80035c4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80035c6:	b292      	uxth	r2, r2
 80035c8:	2a00      	cmp	r2, #0
 80035ca:	d0cd      	beq.n	8003568 <HAL_SPI_TransmitReceive+0x100>
 80035cc:	2f00      	cmp	r7, #0
 80035ce:	d0cb      	beq.n	8003568 <HAL_SPI_TransmitReceive+0x100>
 80035d0:	e7be      	b.n	8003550 <HAL_SPI_TransmitReceive+0xe8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035d2:	6863      	ldr	r3, [r4, #4]
 80035d4:	b10b      	cbz	r3, 80035da <HAL_SPI_TransmitReceive+0x172>
 80035d6:	2f01      	cmp	r7, #1
 80035d8:	d10f      	bne.n	80035fa <HAL_SPI_TransmitReceive+0x192>
      if (hspi->TxXferCount > 1U)
 80035da:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80035dc:	b29b      	uxth	r3, r3
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d90d      	bls.n	80035fe <HAL_SPI_TransmitReceive+0x196>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80035e4:	6823      	ldr	r3, [r4, #0]
 80035e6:	8812      	ldrh	r2, [r2, #0]
 80035e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80035ec:	3302      	adds	r3, #2
 80035ee:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80035f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	3b02      	subs	r3, #2
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80035fa:	2701      	movs	r7, #1
 80035fc:	e049      	b.n	8003692 <HAL_SPI_TransmitReceive+0x22a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80035fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003600:	6823      	ldr	r3, [r4, #0]
 8003602:	7812      	ldrb	r2, [r2, #0]
 8003604:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8003606:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003608:	3301      	adds	r3, #1
 800360a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800360c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800360e:	b29b      	uxth	r3, r3
 8003610:	3b01      	subs	r3, #1
 8003612:	b29b      	uxth	r3, r3
 8003614:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003616:	e7f0      	b.n	80035fa <HAL_SPI_TransmitReceive+0x192>
        if (hspi->TxXferCount > 1U)
 8003618:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800361a:	b292      	uxth	r2, r2
 800361c:	2a01      	cmp	r2, #1
 800361e:	d90c      	bls.n	800363a <HAL_SPI_TransmitReceive+0x1d2>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003620:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003622:	8812      	ldrh	r2, [r2, #0]
 8003624:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003626:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003628:	3302      	adds	r3, #2
 800362a:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800362c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800362e:	b29b      	uxth	r3, r3
 8003630:	3b02      	subs	r3, #2
 8003632:	b29b      	uxth	r3, r3
 8003634:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8003636:	2700      	movs	r7, #0
 8003638:	e03d      	b.n	80036b6 <HAL_SPI_TransmitReceive+0x24e>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800363a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800363c:	7812      	ldrb	r2, [r2, #0]
 800363e:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 8003640:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003642:	3301      	adds	r3, #1
 8003644:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8003646:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003648:	b29b      	uxth	r3, r3
 800364a:	3b01      	subs	r3, #1
 800364c:	b29b      	uxth	r3, r3
 800364e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8003650:	2700      	movs	r7, #0
 8003652:	e030      	b.n	80036b6 <HAL_SPI_TransmitReceive+0x24e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003654:	6822      	ldr	r2, [r4, #0]
 8003656:	6853      	ldr	r3, [r2, #4]
 8003658:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800365c:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 800365e:	2701      	movs	r7, #1
 8003660:	e00d      	b.n	800367e <HAL_SPI_TransmitReceive+0x216>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003662:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003664:	7b1b      	ldrb	r3, [r3, #12]
 8003666:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 8003668:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800366a:	3301      	adds	r3, #1
 800366c:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 800366e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003672:	b29b      	uxth	r3, r3
 8003674:	3b01      	subs	r3, #1
 8003676:	b29b      	uxth	r3, r3
 8003678:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800367c:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800367e:	f7fe fdf3 	bl	8002268 <HAL_GetTick>
 8003682:	1b80      	subs	r0, r0, r6
 8003684:	42a8      	cmp	r0, r5
 8003686:	d302      	bcc.n	800368e <HAL_SPI_TransmitReceive+0x226>
 8003688:	f1b5 3fff 	cmp.w	r5, #4294967295
 800368c:	d155      	bne.n	800373a <HAL_SPI_TransmitReceive+0x2d2>
 800368e:	2d00      	cmp	r5, #0
 8003690:	d055      	beq.n	800373e <HAL_SPI_TransmitReceive+0x2d6>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003692:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003694:	b29b      	uxth	r3, r3
 8003696:	b923      	cbnz	r3, 80036a2 <HAL_SPI_TransmitReceive+0x23a>
 8003698:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800369c:	b29b      	uxth	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d02c      	beq.n	80036fc <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036a2:	6823      	ldr	r3, [r4, #0]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	f012 0f02 	tst.w	r2, #2
 80036aa:	d004      	beq.n	80036b6 <HAL_SPI_TransmitReceive+0x24e>
 80036ac:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80036ae:	b292      	uxth	r2, r2
 80036b0:	b10a      	cbz	r2, 80036b6 <HAL_SPI_TransmitReceive+0x24e>
 80036b2:	2f00      	cmp	r7, #0
 80036b4:	d1b0      	bne.n	8003618 <HAL_SPI_TransmitReceive+0x1b0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036b6:	6823      	ldr	r3, [r4, #0]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	f012 0f01 	tst.w	r2, #1
 80036be:	d0de      	beq.n	800367e <HAL_SPI_TransmitReceive+0x216>
 80036c0:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80036c4:	b292      	uxth	r2, r2
 80036c6:	2a00      	cmp	r2, #0
 80036c8:	d0d9      	beq.n	800367e <HAL_SPI_TransmitReceive+0x216>
        if (hspi->RxXferCount > 1U)
 80036ca:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80036ce:	b292      	uxth	r2, r2
 80036d0:	2a01      	cmp	r2, #1
 80036d2:	d9c6      	bls.n	8003662 <HAL_SPI_TransmitReceive+0x1fa>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036d8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80036da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036dc:	3302      	adds	r3, #2
 80036de:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80036e0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	3b02      	subs	r3, #2
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80036ee:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d9ad      	bls.n	8003654 <HAL_SPI_TransmitReceive+0x1ec>
        txallowed = 1U;
 80036f8:	2701      	movs	r7, #1
 80036fa:	e7c0      	b.n	800367e <HAL_SPI_TransmitReceive+0x216>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036fc:	4632      	mov	r2, r6
 80036fe:	4629      	mov	r1, r5
 8003700:	4620      	mov	r0, r4
 8003702:	f7ff fccf 	bl	80030a4 <SPI_EndRxTxTransaction>
 8003706:	b120      	cbz	r0, 8003712 <HAL_SPI_TransmitReceive+0x2aa>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003708:	2320      	movs	r3, #32
 800370a:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800370c:	2001      	movs	r0, #1
 800370e:	e000      	b.n	8003712 <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_BUSY;
 8003710:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003712:	2301      	movs	r3, #1
 8003714:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003718:	2300      	movs	r3, #0
 800371a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800371e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8003722:	2002      	movs	r0, #2
 8003724:	e7f5      	b.n	8003712 <HAL_SPI_TransmitReceive+0x2aa>
 8003726:	2002      	movs	r0, #2
 8003728:	e7f3      	b.n	8003712 <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_ERROR;
 800372a:	2001      	movs	r0, #1
 800372c:	e7f1      	b.n	8003712 <HAL_SPI_TransmitReceive+0x2aa>
 800372e:	2001      	movs	r0, #1
 8003730:	e7ef      	b.n	8003712 <HAL_SPI_TransmitReceive+0x2aa>
 8003732:	2001      	movs	r0, #1
 8003734:	e7ed      	b.n	8003712 <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 8003736:	2003      	movs	r0, #3
 8003738:	e7eb      	b.n	8003712 <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 800373a:	2003      	movs	r0, #3
 800373c:	e7e9      	b.n	8003712 <HAL_SPI_TransmitReceive+0x2aa>
 800373e:	2003      	movs	r0, #3
 8003740:	e7e7      	b.n	8003712 <HAL_SPI_TransmitReceive+0x2aa>
  __HAL_LOCK(hspi);
 8003742:	2002      	movs	r0, #2
 8003744:	e7eb      	b.n	800371e <HAL_SPI_TransmitReceive+0x2b6>

08003746 <HAL_SPI_Receive>:
{
 8003746:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800374a:	b083      	sub	sp, #12
 800374c:	4604      	mov	r4, r0
 800374e:	4688      	mov	r8, r1
 8003750:	4691      	mov	r9, r2
 8003752:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003754:	6840      	ldr	r0, [r0, #4]
 8003756:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 800375a:	d043      	beq.n	80037e4 <HAL_SPI_Receive+0x9e>
  __HAL_LOCK(hspi);
 800375c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8003760:	2b01      	cmp	r3, #1
 8003762:	f000 80c3 	beq.w	80038ec <HAL_SPI_Receive+0x1a6>
 8003766:	2301      	movs	r3, #1
 8003768:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800376c:	f7fe fd7c 	bl	8002268 <HAL_GetTick>
 8003770:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003772:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 8003776:	b2f6      	uxtb	r6, r6
 8003778:	2e01      	cmp	r6, #1
 800377a:	f040 80a4 	bne.w	80038c6 <HAL_SPI_Receive+0x180>
  if ((pData == NULL) || (Size == 0U))
 800377e:	f1b8 0f00 	cmp.w	r8, #0
 8003782:	f000 80a1 	beq.w	80038c8 <HAL_SPI_Receive+0x182>
 8003786:	f1b9 0f00 	cmp.w	r9, #0
 800378a:	f000 809d 	beq.w	80038c8 <HAL_SPI_Receive+0x182>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800378e:	2304      	movs	r3, #4
 8003790:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003794:	2300      	movs	r3, #0
 8003796:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003798:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800379c:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 80037a0:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80037a4:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80037a6:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80037a8:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80037aa:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80037ac:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037ae:	68e3      	ldr	r3, [r4, #12]
 80037b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037b4:	d924      	bls.n	8003800 <HAL_SPI_Receive+0xba>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037b6:	6822      	ldr	r2, [r4, #0]
 80037b8:	6853      	ldr	r3, [r2, #4]
 80037ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037be:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037c0:	68a3      	ldr	r3, [r4, #8]
 80037c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037c6:	d021      	beq.n	800380c <HAL_SPI_Receive+0xc6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037c8:	6823      	ldr	r3, [r4, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	f012 0f40 	tst.w	r2, #64	; 0x40
 80037d0:	d103      	bne.n	80037da <HAL_SPI_Receive+0x94>
    __HAL_SPI_ENABLE(hspi);
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037d8:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80037da:	68e3      	ldr	r3, [r4, #12]
 80037dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037e0:	d929      	bls.n	8003836 <HAL_SPI_Receive+0xf0>
 80037e2:	e04a      	b.n	800387a <HAL_SPI_Receive+0x134>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80037e4:	68a3      	ldr	r3, [r4, #8]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1b8      	bne.n	800375c <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80037ea:	2304      	movs	r3, #4
 80037ec:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80037f0:	9500      	str	r5, [sp, #0]
 80037f2:	4613      	mov	r3, r2
 80037f4:	460a      	mov	r2, r1
 80037f6:	4620      	mov	r0, r4
 80037f8:	f7ff fe36 	bl	8003468 <HAL_SPI_TransmitReceive>
 80037fc:	4606      	mov	r6, r0
 80037fe:	e069      	b.n	80038d4 <HAL_SPI_Receive+0x18e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003800:	6822      	ldr	r2, [r4, #0]
 8003802:	6853      	ldr	r3, [r2, #4]
 8003804:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003808:	6053      	str	r3, [r2, #4]
 800380a:	e7d9      	b.n	80037c0 <HAL_SPI_Receive+0x7a>
    __HAL_SPI_DISABLE(hspi);
 800380c:	6822      	ldr	r2, [r4, #0]
 800380e:	6813      	ldr	r3, [r2, #0]
 8003810:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003814:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8003816:	6822      	ldr	r2, [r4, #0]
 8003818:	6813      	ldr	r3, [r2, #0]
 800381a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800381e:	6013      	str	r3, [r2, #0]
 8003820:	e7d2      	b.n	80037c8 <HAL_SPI_Receive+0x82>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003822:	f7fe fd21 	bl	8002268 <HAL_GetTick>
 8003826:	1bc0      	subs	r0, r0, r7
 8003828:	42a8      	cmp	r0, r5
 800382a:	d302      	bcc.n	8003832 <HAL_SPI_Receive+0xec>
 800382c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003830:	d154      	bne.n	80038dc <HAL_SPI_Receive+0x196>
 8003832:	2d00      	cmp	r5, #0
 8003834:	d054      	beq.n	80038e0 <HAL_SPI_Receive+0x19a>
    while (hspi->RxXferCount > 0U)
 8003836:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800383a:	b29b      	uxth	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	d036      	beq.n	80038ae <HAL_SPI_Receive+0x168>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003840:	6823      	ldr	r3, [r4, #0]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	f012 0f01 	tst.w	r2, #1
 8003848:	d0eb      	beq.n	8003822 <HAL_SPI_Receive+0xdc>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800384a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800384c:	7b1b      	ldrb	r3, [r3, #12]
 800384e:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003850:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003852:	3301      	adds	r3, #1
 8003854:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003856:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800385a:	b29b      	uxth	r3, r3
 800385c:	3b01      	subs	r3, #1
 800385e:	b29b      	uxth	r3, r3
 8003860:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8003864:	e7e7      	b.n	8003836 <HAL_SPI_Receive+0xf0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003866:	f7fe fcff 	bl	8002268 <HAL_GetTick>
 800386a:	1bc0      	subs	r0, r0, r7
 800386c:	42a8      	cmp	r0, r5
 800386e:	d302      	bcc.n	8003876 <HAL_SPI_Receive+0x130>
 8003870:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003874:	d136      	bne.n	80038e4 <HAL_SPI_Receive+0x19e>
 8003876:	2d00      	cmp	r5, #0
 8003878:	d036      	beq.n	80038e8 <HAL_SPI_Receive+0x1a2>
    while (hspi->RxXferCount > 0U)
 800387a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800387e:	b29b      	uxth	r3, r3
 8003880:	b1ab      	cbz	r3, 80038ae <HAL_SPI_Receive+0x168>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003882:	6823      	ldr	r3, [r4, #0]
 8003884:	689a      	ldr	r2, [r3, #8]
 8003886:	f012 0f01 	tst.w	r2, #1
 800388a:	d0ec      	beq.n	8003866 <HAL_SPI_Receive+0x120>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003890:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003892:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003894:	3302      	adds	r3, #2
 8003896:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003898:	f8b4 c046 	ldrh.w	ip, [r4, #70]	; 0x46
 800389c:	fa1f fc8c 	uxth.w	ip, ip
 80038a0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80038a4:	fa1f fc8c 	uxth.w	ip, ip
 80038a8:	f8a4 c046 	strh.w	ip, [r4, #70]	; 0x46
 80038ac:	e7e5      	b.n	800387a <HAL_SPI_Receive+0x134>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038ae:	463a      	mov	r2, r7
 80038b0:	4629      	mov	r1, r5
 80038b2:	4620      	mov	r0, r4
 80038b4:	f7ff fc27 	bl	8003106 <SPI_EndRxTransaction>
 80038b8:	b108      	cbz	r0, 80038be <HAL_SPI_Receive+0x178>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038ba:	2320      	movs	r3, #32
 80038bc:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038be:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80038c0:	b913      	cbnz	r3, 80038c8 <HAL_SPI_Receive+0x182>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038c2:	2600      	movs	r6, #0
 80038c4:	e000      	b.n	80038c8 <HAL_SPI_Receive+0x182>
    errorcode = HAL_BUSY;
 80038c6:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 80038c8:	2301      	movs	r3, #1
 80038ca:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80038ce:	2300      	movs	r3, #0
 80038d0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80038d4:	4630      	mov	r0, r6
 80038d6:	b003      	add	sp, #12
 80038d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 80038dc:	2603      	movs	r6, #3
 80038de:	e7f3      	b.n	80038c8 <HAL_SPI_Receive+0x182>
 80038e0:	2603      	movs	r6, #3
 80038e2:	e7f1      	b.n	80038c8 <HAL_SPI_Receive+0x182>
          errorcode = HAL_TIMEOUT;
 80038e4:	2603      	movs	r6, #3
 80038e6:	e7ef      	b.n	80038c8 <HAL_SPI_Receive+0x182>
 80038e8:	2603      	movs	r6, #3
 80038ea:	e7ed      	b.n	80038c8 <HAL_SPI_Receive+0x182>
  __HAL_LOCK(hspi);
 80038ec:	2602      	movs	r6, #2
 80038ee:	e7f1      	b.n	80038d4 <HAL_SPI_Receive+0x18e>

080038f0 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 80038f0:	468c      	mov	ip, r1
 80038f2:	4613      	mov	r3, r2
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 80038f4:	6841      	ldr	r1, [r0, #4]
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 80038f6:	f8dc 2004 	ldr.w	r2, [ip, #4]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80038fa:	685b      	ldr	r3, [r3, #4]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 80038fc:	f8b0 c000 	ldrh.w	ip, [r0]
 8003900:	8840      	ldrh	r0, [r0, #2]
 8003902:	fb00 f00c 	mul.w	r0, r0, ip
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8003906:	e008      	b.n	800391a <arm_mat_add_f32+0x2a>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 8003908:	ecf1 7a01 	vldmia	r1!, {s15}
 800390c:	ecb2 7a01 	vldmia	r2!, {s14}
 8003910:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003914:	ece3 7a01 	vstmia	r3!, {s15}

      /* Decrement loop counter */
      blkCnt--;
 8003918:	3801      	subs	r0, #1
    while (blkCnt > 0U)
 800391a:	2800      	cmp	r0, #0
 800391c:	d1f4      	bne.n	8003908 <arm_mat_add_f32+0x18>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
 800391e:	4770      	bx	lr

08003920 <arm_mat_init_f32>:
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
  /* Assign Number of Rows */
  S->numRows = nRows;
 8003920:	8001      	strh	r1, [r0, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8003922:	8042      	strh	r2, [r0, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8003924:	6043      	str	r3, [r0, #4]
}
 8003926:	4770      	bx	lr

08003928 <arm_mat_inverse_f32>:
}
#else
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8003928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800392c:	b085      	sub	sp, #20
 800392e:	9003      	str	r0, [sp, #12]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8003930:	f8d0 b004 	ldr.w	fp, [r0, #4]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8003934:	684b      	ldr	r3, [r1, #4]
 8003936:	9301      	str	r3, [sp, #4]
  float32_t *pInT1, *pInT2;                      /* Temporary input data matrix pointer */
  float32_t *pOutT1, *pOutT2;                    /* Temporary output data matrix pointer */
  float32_t *pPivotRowIn, *pPRT_in, *pPivotRowDst, *pPRT_pDst;  /* Temporary input and output data matrix pointer */
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8003938:	f8b0 9000 	ldrh.w	r9, [r0]
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800393c:	f8b0 e002 	ldrh.w	lr, [r0, #2]

    /* Loop over the number of rows */
    rowCnt = numRows;

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 8003940:	4648      	mov	r0, r9
 8003942:	e012      	b.n	800396a <arm_mat_inverse_f32+0x42>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
      while (j > 0U)
      {
        *pOutT1++ = 0.0f;
 8003944:	2100      	movs	r1, #0
 8003946:	f843 1b04 	str.w	r1, [r3], #4
        j--;
 800394a:	3a01      	subs	r2, #1
      while (j > 0U)
 800394c:	2a00      	cmp	r2, #0
 800394e:	d1f9      	bne.n	8003944 <arm_mat_inverse_f32+0x1c>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pOutT1++ = 1.0f;
 8003950:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003954:	f843 2b04 	str.w	r2, [r3], #4

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 8003958:	3801      	subs	r0, #1
 800395a:	4602      	mov	r2, r0
      while (j > 0U)
 800395c:	e003      	b.n	8003966 <arm_mat_inverse_f32+0x3e>
      {
        *pOutT1++ = 0.0f;
 800395e:	2100      	movs	r1, #0
 8003960:	f843 1b04 	str.w	r1, [r3], #4
        j--;
 8003964:	3a01      	subs	r2, #1
      while (j > 0U)
 8003966:	2a00      	cmp	r2, #0
 8003968:	d1f9      	bne.n	800395e <arm_mat_inverse_f32+0x36>
    while (rowCnt > 0U)
 800396a:	b110      	cbz	r0, 8003972 <arm_mat_inverse_f32+0x4a>
      j = numRows - rowCnt;
 800396c:	eba9 0200 	sub.w	r2, r9, r0
      while (j > 0U)
 8003970:	e7ec      	b.n	800394c <arm_mat_inverse_f32+0x24>
    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */
    loopCnt = numCols;

    /* Index modifier to navigate through the columns */
    l = 0U;
 8003972:	4684      	mov	ip, r0
    loopCnt = numCols;
 8003974:	46f2      	mov	sl, lr
  float32_t Xchg, in = 0.0f, in1;                /* Temporary input values  */
 8003976:	eddf 6a66 	vldr	s13, [pc, #408]	; 8003b10 <arm_mat_inverse_f32+0x1e8>
 800397a:	9002      	str	r0, [sp, #8]
 800397c:	e07c      	b.n	8003a78 <arm_mat_inverse_f32+0x150>
           * replace in the rows below */
          if (*pInT2 != 0.0f)
          {
            /* Loop over number of columns
             * to the right of the pilot element */
            j = numCols - l;
 800397e:	ebae 000c 	sub.w	r0, lr, ip
      pInT1 = pIn + (l * numCols);
 8003982:	4632      	mov	r2, r6

            while (j > 0U)
 8003984:	e006      	b.n	8003994 <arm_mat_inverse_f32+0x6c>
            {
              /* Exchange the row elements of the input matrix */
              Xchg = *pInT2;
 8003986:	681c      	ldr	r4, [r3, #0]
              *pInT2++ = *pInT1;
 8003988:	6815      	ldr	r5, [r2, #0]
 800398a:	f843 5b04 	str.w	r5, [r3], #4
              *pInT1++ = Xchg;
 800398e:	f842 4b04 	str.w	r4, [r2], #4

              /* Decrement the loop counter */
              j--;
 8003992:	3801      	subs	r0, #1
            while (j > 0U)
 8003994:	2800      	cmp	r0, #0
 8003996:	d1f6      	bne.n	8003986 <arm_mat_inverse_f32+0x5e>
            }

            /* Loop over number of columns of the destination matrix */
            j = numCols;
 8003998:	4672      	mov	r2, lr
      pOutT1 = pOut + (l * numCols);
 800399a:	4643      	mov	r3, r8
 800399c:	e006      	b.n	80039ac <arm_mat_inverse_f32+0x84>

            while (j > 0U)
            {
              /* Exchange the row elements of the destination matrix */
              Xchg = *pOutT2;
 800399e:	6808      	ldr	r0, [r1, #0]
              *pOutT2++ = *pOutT1;
 80039a0:	681c      	ldr	r4, [r3, #0]
 80039a2:	f841 4b04 	str.w	r4, [r1], #4
              *pOutT1++ = Xchg;
 80039a6:	f843 0b04 	str.w	r0, [r3], #4

              /* Decrement loop counter */
              j--;
 80039aa:	3a01      	subs	r2, #1
            while (j > 0U)
 80039ac:	2a00      	cmp	r2, #0
 80039ae:	d1f6      	bne.n	800399e <arm_mat_inverse_f32+0x76>
            }

            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 80039b0:	2301      	movs	r3, #1
 80039b2:	9302      	str	r3, [sp, #8]
 80039b4:	e071      	b.n	8003a9a <arm_mat_inverse_f32+0x172>
        for (i = 1U; i < numRows - l; i++)
 80039b6:	2201      	movs	r2, #1
 80039b8:	eba9 030c 	sub.w	r3, r9, ip
 80039bc:	4293      	cmp	r3, r2
 80039be:	d96c      	bls.n	8003a9a <arm_mat_inverse_f32+0x172>
          pInT2 = pInT1 + (numCols * i);
 80039c0:	fb0e f102 	mul.w	r1, lr, r2
 80039c4:	eb06 0381 	add.w	r3, r6, r1, lsl #2
          pOutT2 = pOutT1 + (numCols * i);
 80039c8:	eb08 0181 	add.w	r1, r8, r1, lsl #2
          if (*pInT2 != 0.0f)
 80039cc:	edd3 7a00 	vldr	s15, [r3]
 80039d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80039d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d8:	d1d1      	bne.n	800397e <arm_mat_inverse_f32+0x56>
        for (i = 1U; i < numRows - l; i++)
 80039da:	3201      	adds	r2, #1
 80039dc:	e7ec      	b.n	80039b8 <arm_mat_inverse_f32+0x90>

      while (j > 0U)
      {
        /* Divide each element of the row of the input matrix
         * by the pivot element */
        in1 = *pInT1;
 80039de:	ed93 7a00 	vldr	s14, [r3]
        *pInT1++ = in1 / in;
 80039e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039e6:	ece3 7a01 	vstmia	r3!, {s15}

        /* Decrement the loop counter */
        j--;
 80039ea:	3a01      	subs	r2, #1
      while (j > 0U)
 80039ec:	2a00      	cmp	r2, #0
 80039ee:	d1f6      	bne.n	80039de <arm_mat_inverse_f32+0xb6>
      }

      /* Loop over number of columns of the destination matrix */
      j = numCols;
 80039f0:	4670      	mov	r0, lr
      pInT2 = pPivotRowDst;
 80039f2:	4643      	mov	r3, r8
 80039f4:	e006      	b.n	8003a04 <arm_mat_inverse_f32+0xdc>

      while (j > 0U)
      {
        /* Divide each element of the row of the destination matrix
         * by the pivot element */
        in1 = *pInT2;
 80039f6:	ed93 7a00 	vldr	s14, [r3]
        *pInT2++ = in1 / in;
 80039fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039fe:	ece3 7a01 	vstmia	r3!, {s15}

        /* Decrement the loop counter */
        j--;
 8003a02:	3801      	subs	r0, #1
      while (j > 0U)
 8003a04:	2800      	cmp	r0, #0
 8003a06:	d1f6      	bne.n	80039f6 <arm_mat_inverse_f32+0xce>
      /* index used to check for pivot element */
      i = 0U;

      /* Loop over number of rows */
      /*  to be replaced by the sum of that row and a multiple of row i */
      k = numRows;
 8003a08:	464c      	mov	r4, r9
      pInT2 = pOut;
 8003a0a:	9a01      	ldr	r2, [sp, #4]
      pInT1 = pIn;
 8003a0c:	465b      	mov	r3, fp
 8003a0e:	e025      	b.n	8003a5c <arm_mat_inverse_f32+0x134>
        /* Check for the pivot element */
        if (i == l)
        {
          /* If the processing element is the pivot element,
             only the columns to the right are to be processed */
          pInT1 += numCols - l;
 8003a10:	eb03 0387 	add.w	r3, r3, r7, lsl #2

          pInT2 += numCols;
 8003a14:	eb02 028e 	add.w	r2, r2, lr, lsl #2
 8003a18:	e01c      	b.n	8003a54 <arm_mat_inverse_f32+0x12c>

          while (j > 0U)
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT1;
 8003a1a:	edd3 7a00 	vldr	s15, [r3]
            *pInT1++ = in1 - (in * *pPRT_in++);
 8003a1e:	ecb1 7a01 	vldmia	r1!, {s14}
 8003a22:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003a26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a2a:	ece3 7a01 	vstmia	r3!, {s15}

            /* Decrement the loop counter */
            j--;
 8003a2e:	3d01      	subs	r5, #1
          while (j > 0U)
 8003a30:	2d00      	cmp	r5, #0
 8003a32:	d1f2      	bne.n	8003a1a <arm_mat_inverse_f32+0xf2>
          }

          /* Loop over the number of columns to
             replace the elements in the destination matrix */
          j = numCols;
 8003a34:	4675      	mov	r5, lr
          pPRT_pDst = pPivotRowDst;
 8003a36:	4641      	mov	r1, r8
 8003a38:	e00a      	b.n	8003a50 <arm_mat_inverse_f32+0x128>

          while (j > 0U)
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT2;
 8003a3a:	edd2 7a00 	vldr	s15, [r2]
            *pInT2++ = in1 - (in * *pPRT_pDst++);
 8003a3e:	ecb1 7a01 	vldmia	r1!, {s14}
 8003a42:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003a46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a4a:	ece2 7a01 	vstmia	r2!, {s15}

            /* Decrement loop counter */
            j--;
 8003a4e:	3d01      	subs	r5, #1
          while (j > 0U)
 8003a50:	2d00      	cmp	r5, #0
 8003a52:	d1f2      	bne.n	8003a3a <arm_mat_inverse_f32+0x112>
          }

        }

        /* Increment temporary input pointer */
        pInT1 = pInT1 + l;
 8003a54:	eb03 038c 	add.w	r3, r3, ip, lsl #2

        /* Decrement loop counter */
        k--;
 8003a58:	3c01      	subs	r4, #1

        /* Increment pivot index */
        i++;
 8003a5a:	3001      	adds	r0, #1
      while (k > 0U)
 8003a5c:	b134      	cbz	r4, 8003a6c <arm_mat_inverse_f32+0x144>
        if (i == l)
 8003a5e:	4560      	cmp	r0, ip
 8003a60:	d0d6      	beq.n	8003a10 <arm_mat_inverse_f32+0xe8>
          in = *pInT1;
 8003a62:	edd3 6a00 	vldr	s13, [r3]
          j = (numCols - l);
 8003a66:	463d      	mov	r5, r7
          pPRT_in = pPivotRowIn;
 8003a68:	4631      	mov	r1, r6
          while (j > 0U)
 8003a6a:	e7e1      	b.n	8003a30 <arm_mat_inverse_f32+0x108>
      }

      /* Increment the input pointer */
      pIn++;
 8003a6c:	f10b 0b04 	add.w	fp, fp, #4

      /* Decrement the loop counter */
      loopCnt--;
 8003a70:	f10a 3aff 	add.w	sl, sl, #4294967295

      /* Increment the index modifier */
      l++;
 8003a74:	f10c 0c01 	add.w	ip, ip, #1
    while (loopCnt > 0U)
 8003a78:	f1ba 0f00 	cmp.w	sl, #0
 8003a7c:	d01c      	beq.n	8003ab8 <arm_mat_inverse_f32+0x190>
      pInT1 = pIn + (l * numCols);
 8003a7e:	fb0e f50c 	mul.w	r5, lr, ip
 8003a82:	eb0b 0685 	add.w	r6, fp, r5, lsl #2
      pOutT1 = pOut + (l * numCols);
 8003a86:	9b01      	ldr	r3, [sp, #4]
 8003a88:	eb03 0885 	add.w	r8, r3, r5, lsl #2
      in = *pInT1;
 8003a8c:	ed96 7a00 	vldr	s14, [r6]
      if (*pInT1 == 0.0f)
 8003a90:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8003a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a98:	d08d      	beq.n	80039b6 <arm_mat_inverse_f32+0x8e>
      if ((flag != 1U) && (in == 0.0f))
 8003a9a:	9b02      	ldr	r3, [sp, #8]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d004      	beq.n	8003aaa <arm_mat_inverse_f32+0x182>
 8003aa0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8003aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa8:	d026      	beq.n	8003af8 <arm_mat_inverse_f32+0x1d0>
      in = *pPivotRowIn;
 8003aaa:	edd6 6a00 	vldr	s13, [r6]
      j = (numCols - l);
 8003aae:	ebae 070c 	sub.w	r7, lr, ip
 8003ab2:	463a      	mov	r2, r7
      pInT1 = pPivotRowIn;
 8003ab4:	4633      	mov	r3, r6
      while (j > 0U)
 8003ab6:	e799      	b.n	80039ec <arm_mat_inverse_f32+0xc4>
#endif /* #if defined (ARM_MATH_DSP) */

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;

    if ((flag != 1U) && (in == 0.0f))
 8003ab8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8003abc:	f1b8 0f01 	cmp.w	r8, #1
 8003ac0:	d01f      	beq.n	8003b02 <arm_mat_inverse_f32+0x1da>
 8003ac2:	eef5 6a40 	vcmp.f32	s13, #0.0
 8003ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aca:	d11c      	bne.n	8003b06 <arm_mat_inverse_f32+0x1de>
    {
      pIn = pSrc->pData;
 8003acc:	9b03      	ldr	r3, [sp, #12]
 8003ace:	6859      	ldr	r1, [r3, #4]
      for (i = 0; i < numRows * numCols; i++)
 8003ad0:	fb0e f309 	mul.w	r3, lr, r9
 8003ad4:	4543      	cmp	r3, r8
 8003ad6:	d90b      	bls.n	8003af0 <arm_mat_inverse_f32+0x1c8>
      {
        if (pIn[i] != 0.0f)
 8003ad8:	eb01 0288 	add.w	r2, r1, r8, lsl #2
 8003adc:	edd2 7a00 	vldr	s15, [r2]
 8003ae0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae8:	d102      	bne.n	8003af0 <arm_mat_inverse_f32+0x1c8>
      for (i = 0; i < numRows * numCols; i++)
 8003aea:	f108 0801 	add.w	r8, r8, #1
 8003aee:	e7ef      	b.n	8003ad0 <arm_mat_inverse_f32+0x1a8>
            break;
      }

      if (i == numRows * numCols)
 8003af0:	4543      	cmp	r3, r8
 8003af2:	d00a      	beq.n	8003b0a <arm_mat_inverse_f32+0x1e2>
    status = ARM_MATH_SUCCESS;
 8003af4:	2000      	movs	r0, #0
 8003af6:	e001      	b.n	8003afc <arm_mat_inverse_f32+0x1d4>
        return ARM_MATH_SINGULAR;
 8003af8:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return to application */
  return (status);
}
 8003afc:	b005      	add	sp, #20
 8003afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    status = ARM_MATH_SUCCESS;
 8003b02:	2000      	movs	r0, #0
 8003b04:	e7fa      	b.n	8003afc <arm_mat_inverse_f32+0x1d4>
 8003b06:	2000      	movs	r0, #0
 8003b08:	e7f8      	b.n	8003afc <arm_mat_inverse_f32+0x1d4>
        status = ARM_MATH_SINGULAR;
 8003b0a:	f06f 0004 	mvn.w	r0, #4
 8003b0e:	e7f5      	b.n	8003afc <arm_mat_inverse_f32+0x1d4>
 8003b10:	00000000 	.word	0x00000000

08003b14 <arm_mat_mult_f32>:
#else
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8003b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b18:	4603      	mov	r3, r0
 8003b1a:	4688      	mov	r8, r1
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 8003b1c:	f8d0 c004 	ldr.w	ip, [r0, #4]
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 8003b20:	684d      	ldr	r5, [r1, #4]
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8003b22:	f8d2 9004 	ldr.w	r9, [r2, #4]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 8003b26:	8848      	ldrh	r0, [r1, #2]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 8003b28:	f8b3 e002 	ldrh.w	lr, [r3, #2]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 8003b2c:	881f      	ldrh	r7, [r3, #0]
 8003b2e:	2600      	movs	r6, #0
 8003b30:	e01f      	b.n	8003b72 <arm_mat_mult_f32+0x5e>
        while (colCnt > 0U)
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 8003b32:	ecf3 7a01 	vldmia	r3!, {s15}
 8003b36:	edd2 6a00 	vldr	s13, [r2]
 8003b3a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003b3e:	ee37 7a27 	vadd.f32	s14, s14, s15
          pIn2 += numColsB;
 8003b42:	eb02 0280 	add.w	r2, r2, r0, lsl #2

          /* Decrement loop counter */
          colCnt--;
 8003b46:	3901      	subs	r1, #1
        while (colCnt > 0U)
 8003b48:	2900      	cmp	r1, #0
 8003b4a:	d1f2      	bne.n	8003b32 <arm_mat_mult_f32+0x1e>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 8003b4c:	4653      	mov	r3, sl
 8003b4e:	eca3 7a01 	vstmia	r3!, {s14}

        /* Decrement column loop counter */
        col--;
 8003b52:	3c01      	subs	r4, #1

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 8003b54:	1b02      	subs	r2, r0, r4
 8003b56:	eb05 0282 	add.w	r2, r5, r2, lsl #2

      } while (col > 0U);
 8003b5a:	b12c      	cbz	r4, 8003b68 <arm_mat_mult_f32+0x54>
        *px++ = sum;
 8003b5c:	469a      	mov	sl, r3
        colCnt = numColsA;
 8003b5e:	4671      	mov	r1, lr
        pIn1 = pInA;
 8003b60:	4663      	mov	r3, ip
        sum = 0.0f;
 8003b62:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003b84 <arm_mat_mult_f32+0x70>
        while (colCnt > 0U)
 8003b66:	e7ef      	b.n	8003b48 <arm_mat_mult_f32+0x34>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 8003b68:	4406      	add	r6, r0
      pInA = pInA + numColsA;
 8003b6a:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2

      /* Decrement row loop counter */
      row--;

    } while (row > 0U);
 8003b6e:	3f01      	subs	r7, #1
 8003b70:	d005      	beq.n	8003b7e <arm_mat_mult_f32+0x6a>
      px = pOut + i;
 8003b72:	eb09 0a86 	add.w	sl, r9, r6, lsl #2
      pIn2 = pSrcB->pData;
 8003b76:	f8d8 2004 	ldr.w	r2, [r8, #4]
      col = numColsB;
 8003b7a:	4604      	mov	r4, r0
 8003b7c:	e7ef      	b.n	8003b5e <arm_mat_mult_f32+0x4a>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
 8003b7e:	2000      	movs	r0, #0
 8003b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b84:	00000000 	.word	0x00000000

08003b88 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8003b88:	468c      	mov	ip, r1
 8003b8a:	4613      	mov	r3, r2
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8003b8c:	6841      	ldr	r1, [r0, #4]
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8003b8e:	f8dc 2004 	ldr.w	r2, [ip, #4]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8003b92:	685b      	ldr	r3, [r3, #4]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8003b94:	f8b0 c000 	ldrh.w	ip, [r0]
 8003b98:	8840      	ldrh	r0, [r0, #2]
 8003b9a:	fb00 f00c 	mul.w	r0, r0, ip
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8003b9e:	e008      	b.n	8003bb2 <arm_mat_sub_f32+0x2a>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 8003ba0:	ecf1 7a01 	vldmia	r1!, {s15}
 8003ba4:	ecb2 7a01 	vldmia	r2!, {s14}
 8003ba8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003bac:	ece3 7a01 	vstmia	r3!, {s15}

      /* Decrement loop counter */
      blkCnt--;
 8003bb0:	3801      	subs	r0, #1
    while (blkCnt > 0U)
 8003bb2:	2800      	cmp	r0, #0
 8003bb4:	d1f4      	bne.n	8003ba0 <arm_mat_sub_f32+0x18>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
 8003bb6:	4770      	bx	lr

08003bb8 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8003bb8:	b570      	push	{r4, r5, r6, lr}
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8003bba:	6843      	ldr	r3, [r0, #4]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8003bbc:	684e      	ldr	r6, [r1, #4]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8003bbe:	f8b0 c000 	ldrh.w	ip, [r0]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8003bc2:	8845      	ldrh	r5, [r0, #2]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8003bc4:	4664      	mov	r4, ip
 8003bc6:	f04f 0e00 	mov.w	lr, #0
 8003bca:	e00b      	b.n	8003be4 <arm_mat_trans_f32+0x2c>
#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8003bcc:	f853 0b04 	ldr.w	r0, [r3], #4
 8003bd0:	6008      	str	r0, [r1, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8003bd2:	eb01 018c 	add.w	r1, r1, ip, lsl #2

        /* Decrement column loop counter */
        col--;
 8003bd6:	3a01      	subs	r2, #1
      while (col > 0U)
 8003bd8:	2a00      	cmp	r2, #0
 8003bda:	d1f7      	bne.n	8003bcc <arm_mat_trans_f32+0x14>
      }

      i++;
 8003bdc:	f10e 0e01 	add.w	lr, lr, #1

      /* Decrement row loop counter */
      row--;

    } while (row > 0U);          /* row loop end */
 8003be0:	3c01      	subs	r4, #1
 8003be2:	d003      	beq.n	8003bec <arm_mat_trans_f32+0x34>
      px = pOut + i;
 8003be4:	eb06 018e 	add.w	r1, r6, lr, lsl #2
      col = nCols;
 8003be8:	462a      	mov	r2, r5
      while (col > 0U)
 8003bea:	e7f5      	b.n	8003bd8 <arm_mat_trans_f32+0x20>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
 8003bec:	2000      	movs	r0, #0
 8003bee:	bd70      	pop	{r4, r5, r6, pc}

08003bf0 <arm_quaternion2rotation_f32>:
#else
void arm_quaternion2rotation_f32(const float32_t *pInputQuaternions, 
    float32_t *pOutputRotations, 
    uint32_t nbQuaternions)
{
   for(uint32_t nb=0; nb < nbQuaternions; nb++)
 8003bf0:	f04f 0c00 	mov.w	ip, #0
 8003bf4:	4594      	cmp	ip, r2
 8003bf6:	d27b      	bcs.n	8003cf0 <arm_quaternion2rotation_f32+0x100>
{
 8003bf8:	b500      	push	{lr}
   {
        float32_t q00 = SQ(pInputQuaternions[0 + nb * 4]);
 8003bfa:	eb00 130c 	add.w	r3, r0, ip, lsl #4
 8003bfe:	ed93 7a00 	vldr	s14, [r3]
 8003c02:	ee67 6a07 	vmul.f32	s13, s14, s14
        float32_t q11 = SQ(pInputQuaternions[1 + nb * 4]);
 8003c06:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c0a:	ee67 3aa7 	vmul.f32	s7, s15, s15
        float32_t q22 = SQ(pInputQuaternions[2 + nb * 4]);
 8003c0e:	ed93 6a02 	vldr	s12, [r3, #8]
 8003c12:	ee26 4a06 	vmul.f32	s8, s12, s12
        float32_t q33 = SQ(pInputQuaternions[3 + nb * 4]);
 8003c16:	ed93 5a03 	vldr	s10, [r3, #12]
 8003c1a:	ee65 4a05 	vmul.f32	s9, s10, s10
        float32_t q01 =  pInputQuaternions[0 + nb * 4]*pInputQuaternions[1 + nb * 4];
 8003c1e:	ee67 5a27 	vmul.f32	s11, s14, s15
        float32_t q02 =  pInputQuaternions[0 + nb * 4]*pInputQuaternions[2 + nb * 4];
 8003c22:	ee67 2a06 	vmul.f32	s5, s14, s12
        float32_t q03 =  pInputQuaternions[0 + nb * 4]*pInputQuaternions[3 + nb * 4];
 8003c26:	ee27 7a05 	vmul.f32	s14, s14, s10
        float32_t q12 =  pInputQuaternions[1 + nb * 4]*pInputQuaternions[2 + nb * 4];
 8003c2a:	ee27 2a86 	vmul.f32	s4, s15, s12
        float32_t q13 =  pInputQuaternions[1 + nb * 4]*pInputQuaternions[3 + nb * 4];
 8003c2e:	ee67 7a85 	vmul.f32	s15, s15, s10
        float32_t q23 =  pInputQuaternions[2 + nb * 4]*pInputQuaternions[3 + nb * 4];
 8003c32:	ee26 6a05 	vmul.f32	s12, s12, s10

        float32_t xx = q00 + q11 - q22 - q33;
 8003c36:	ee36 5aa3 	vadd.f32	s10, s13, s7
 8003c3a:	ee35 5a44 	vsub.f32	s10, s10, s8
 8003c3e:	ee35 5a64 	vsub.f32	s10, s10, s9
        float32_t yy = q00 - q11 + q22 - q33;
 8003c42:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8003c46:	ee36 3a84 	vadd.f32	s6, s13, s8
 8003c4a:	ee33 3a64 	vsub.f32	s6, s6, s9
        float32_t zz = q00 - q11 - q22 + q33;
 8003c4e:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8003c52:	ee76 6aa4 	vadd.f32	s13, s13, s9
        float32_t xy = 2*(q12 - q03);
 8003c56:	ee72 4a47 	vsub.f32	s9, s4, s14
 8003c5a:	ee74 3aa4 	vadd.f32	s7, s9, s9
        float32_t xz = 2*(q13 + q02);
 8003c5e:	ee72 4aa7 	vadd.f32	s9, s5, s15
 8003c62:	ee34 4aa4 	vadd.f32	s8, s9, s9
        float32_t yx = 2*(q12 + q03);
 8003c66:	ee37 7a02 	vadd.f32	s14, s14, s4
 8003c6a:	ee37 7a07 	vadd.f32	s14, s14, s14
        float32_t yz = 2*(q23 - q01);
 8003c6e:	ee76 4a65 	vsub.f32	s9, s12, s11
 8003c72:	ee74 4aa4 	vadd.f32	s9, s9, s9
        float32_t zx = 2*(q13 - q02);
 8003c76:	ee77 7ae2 	vsub.f32	s15, s15, s5
 8003c7a:	ee77 7aa7 	vadd.f32	s15, s15, s15
        float32_t zy = 2*(q23 + q01);
 8003c7e:	ee35 6a86 	vadd.f32	s12, s11, s12
 8003c82:	ee36 6a06 	vadd.f32	s12, s12, s12

        pOutputRotations[0 + nb * 9] = xx; pOutputRotations[1 + nb * 9] = xy; pOutputRotations[2 + nb * 9] = xz;
 8003c86:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 8003c8a:	ea4f 038e 	mov.w	r3, lr, lsl #2
 8003c8e:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
 8003c92:	ed8e 5a00 	vstr	s10, [lr]
 8003c96:	f103 0e04 	add.w	lr, r3, #4
 8003c9a:	448e      	add	lr, r1
 8003c9c:	edce 3a00 	vstr	s7, [lr]
 8003ca0:	f103 0e08 	add.w	lr, r3, #8
 8003ca4:	448e      	add	lr, r1
 8003ca6:	ed8e 4a00 	vstr	s8, [lr]
        pOutputRotations[3 + nb * 9] = yx; pOutputRotations[4 + nb * 9] = yy; pOutputRotations[5 + nb * 9] = yz;
 8003caa:	f103 0e0c 	add.w	lr, r3, #12
 8003cae:	448e      	add	lr, r1
 8003cb0:	ed8e 7a00 	vstr	s14, [lr]
 8003cb4:	f103 0e10 	add.w	lr, r3, #16
 8003cb8:	448e      	add	lr, r1
 8003cba:	ed8e 3a00 	vstr	s6, [lr]
 8003cbe:	f103 0e14 	add.w	lr, r3, #20
 8003cc2:	448e      	add	lr, r1
 8003cc4:	edce 4a00 	vstr	s9, [lr]
        pOutputRotations[6 + nb * 9] = zx; pOutputRotations[7 + nb * 9] = zy; pOutputRotations[8 + nb * 9] = zz;
 8003cc8:	f103 0e18 	add.w	lr, r3, #24
 8003ccc:	448e      	add	lr, r1
 8003cce:	edce 7a00 	vstr	s15, [lr]
 8003cd2:	f103 0e1c 	add.w	lr, r3, #28
 8003cd6:	448e      	add	lr, r1
 8003cd8:	ed8e 6a00 	vstr	s12, [lr]
 8003cdc:	3320      	adds	r3, #32
 8003cde:	440b      	add	r3, r1
 8003ce0:	edc3 6a00 	vstr	s13, [r3]
   for(uint32_t nb=0; nb < nbQuaternions; nb++)
 8003ce4:	f10c 0c01 	add.w	ip, ip, #1
 8003ce8:	4594      	cmp	ip, r2
 8003cea:	d386      	bcc.n	8003bfa <arm_quaternion2rotation_f32+0xa>
   }
}
 8003cec:	f85d fb04 	ldr.w	pc, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <arm_quaternion_normalize_f32>:

#else
void arm_quaternion_normalize_f32(const float32_t *pInputQuaternions, 
    float32_t *pNormalizedQuaternions, 
    uint32_t nbQuaternions)
{
 8003cf2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	4607      	mov	r7, r0
 8003cfa:	460e      	mov	r6, r1
 8003cfc:	9203      	str	r2, [sp, #12]
   float32_t temp;

   for(uint32_t i=0; i < nbQuaternions; i++)
 8003cfe:	2500      	movs	r5, #0
 8003d00:	e048      	b.n	8003d94 <arm_quaternion_normalize_f32+0xa2>
   {
      temp = SQ(pInputQuaternions[4 * i + 0]) +
 8003d02:	012c      	lsls	r4, r5, #4
 8003d04:	eb07 1b05 	add.w	fp, r7, r5, lsl #4
 8003d08:	ed9b 0a00 	vldr	s0, [fp]
 8003d0c:	ee20 0a00 	vmul.f32	s0, s0, s0
             SQ(pInputQuaternions[4 * i + 1]) +
 8003d10:	1d23      	adds	r3, r4, #4
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	eb07 0a03 	add.w	sl, r7, r3
 8003d18:	edda 7a00 	vldr	s15, [sl]
 8003d1c:	ee67 7aa7 	vmul.f32	s15, s15, s15
      temp = SQ(pInputQuaternions[4 * i + 0]) +
 8003d20:	ee30 0a27 	vadd.f32	s0, s0, s15
             SQ(pInputQuaternions[4 * i + 2]) +
 8003d24:	f104 0208 	add.w	r2, r4, #8
 8003d28:	9201      	str	r2, [sp, #4]
 8003d2a:	eb07 0902 	add.w	r9, r7, r2
 8003d2e:	edd9 7a00 	vldr	s15, [r9]
 8003d32:	ee67 7aa7 	vmul.f32	s15, s15, s15
             SQ(pInputQuaternions[4 * i + 1]) +
 8003d36:	ee30 0a27 	vadd.f32	s0, s0, s15
             SQ(pInputQuaternions[4 * i + 3]);
 8003d3a:	f104 010c 	add.w	r1, r4, #12
 8003d3e:	9102      	str	r1, [sp, #8]
 8003d40:	eb07 0801 	add.w	r8, r7, r1
 8003d44:	edd8 7a00 	vldr	s15, [r8]
 8003d48:	ee67 7aa7 	vmul.f32	s15, s15, s15
      temp = sqrtf(temp);
 8003d4c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003d50:	f001 f98a 	bl	8005068 <sqrtf>

      pNormalizedQuaternions[4 * i + 0] = pInputQuaternions[4 * i + 0] / temp;
 8003d54:	ed9b 7a00 	vldr	s14, [fp]
 8003d58:	4434      	add	r4, r6
 8003d5a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8003d5e:	edc4 7a00 	vstr	s15, [r4]
      pNormalizedQuaternions[4 * i + 1] = pInputQuaternions[4 * i + 1] / temp;
 8003d62:	ed9a 7a00 	vldr	s14, [sl]
 8003d66:	9b00      	ldr	r3, [sp, #0]
 8003d68:	18f3      	adds	r3, r6, r3
 8003d6a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8003d6e:	edc3 7a00 	vstr	s15, [r3]
      pNormalizedQuaternions[4 * i + 2] = pInputQuaternions[4 * i + 2] / temp;
 8003d72:	ed99 7a00 	vldr	s14, [r9]
 8003d76:	9a01      	ldr	r2, [sp, #4]
 8003d78:	18b3      	adds	r3, r6, r2
 8003d7a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8003d7e:	edc3 7a00 	vstr	s15, [r3]
      pNormalizedQuaternions[4 * i + 3] = pInputQuaternions[4 * i + 3] / temp;
 8003d82:	ed98 7a00 	vldr	s14, [r8]
 8003d86:	9902      	ldr	r1, [sp, #8]
 8003d88:	1873      	adds	r3, r6, r1
 8003d8a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8003d8e:	edc3 7a00 	vstr	s15, [r3]
   for(uint32_t i=0; i < nbQuaternions; i++)
 8003d92:	3501      	adds	r5, #1
 8003d94:	9b03      	ldr	r3, [sp, #12]
 8003d96:	429d      	cmp	r5, r3
 8003d98:	d3b3      	bcc.n	8003d02 <arm_quaternion_normalize_f32+0x10>
   }
}
 8003d9a:	b005      	add	sp, #20
 8003d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003da0 <arm_quaternion_product_single_f32>:
#else
void arm_quaternion_product_single_f32(const float32_t *qa, 
    const float32_t *qb, 
    float32_t *qr)
{
    qr[0] = qa[0] * qb[0] - qa[1] * qb[1] - qa[2] * qb[2] - qa[3] * qb[3];
 8003da0:	edd0 7a00 	vldr	s15, [r0]
 8003da4:	ed91 7a00 	vldr	s14, [r1]
 8003da8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dac:	ed90 7a01 	vldr	s14, [r0, #4]
 8003db0:	edd1 6a01 	vldr	s13, [r1, #4]
 8003db4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003db8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003dbc:	ed90 7a02 	vldr	s14, [r0, #8]
 8003dc0:	edd1 6a02 	vldr	s13, [r1, #8]
 8003dc4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003dc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003dcc:	ed90 7a03 	vldr	s14, [r0, #12]
 8003dd0:	edd1 6a03 	vldr	s13, [r1, #12]
 8003dd4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003dd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ddc:	edc2 7a00 	vstr	s15, [r2]
    qr[1] = qa[0] * qb[1] + qa[1] * qb[0] + qa[2] * qb[3] - qa[3] * qb[2];
 8003de0:	edd0 7a00 	vldr	s15, [r0]
 8003de4:	ed91 7a01 	vldr	s14, [r1, #4]
 8003de8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dec:	ed90 7a01 	vldr	s14, [r0, #4]
 8003df0:	edd1 6a00 	vldr	s13, [r1]
 8003df4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003df8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003dfc:	ed90 7a02 	vldr	s14, [r0, #8]
 8003e00:	edd1 6a03 	vldr	s13, [r1, #12]
 8003e04:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003e08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e0c:	ed90 7a03 	vldr	s14, [r0, #12]
 8003e10:	edd1 6a02 	vldr	s13, [r1, #8]
 8003e14:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003e18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e1c:	edc2 7a01 	vstr	s15, [r2, #4]
    qr[2] = qa[0] * qb[2] + qa[2] * qb[0] + qa[3] * qb[1] - qa[1] * qb[3];
 8003e20:	edd0 7a00 	vldr	s15, [r0]
 8003e24:	ed91 7a02 	vldr	s14, [r1, #8]
 8003e28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e2c:	ed90 7a02 	vldr	s14, [r0, #8]
 8003e30:	edd1 6a00 	vldr	s13, [r1]
 8003e34:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003e38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e3c:	ed90 7a03 	vldr	s14, [r0, #12]
 8003e40:	edd1 6a01 	vldr	s13, [r1, #4]
 8003e44:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003e48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e4c:	ed90 7a01 	vldr	s14, [r0, #4]
 8003e50:	edd1 6a03 	vldr	s13, [r1, #12]
 8003e54:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003e58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e5c:	edc2 7a02 	vstr	s15, [r2, #8]
    qr[3] = qa[0] * qb[3] + qa[3] * qb[0] + qa[1] * qb[2] - qa[2] * qb[1];
 8003e60:	edd0 7a00 	vldr	s15, [r0]
 8003e64:	ed91 7a03 	vldr	s14, [r1, #12]
 8003e68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e6c:	ed90 7a03 	vldr	s14, [r0, #12]
 8003e70:	edd1 6a00 	vldr	s13, [r1]
 8003e74:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003e78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e7c:	ed90 7a01 	vldr	s14, [r0, #4]
 8003e80:	edd1 6a02 	vldr	s13, [r1, #8]
 8003e84:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003e88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e8c:	ed90 7a02 	vldr	s14, [r0, #8]
 8003e90:	edd1 6a01 	vldr	s13, [r1, #4]
 8003e94:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003e98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e9c:	edc2 7a03 	vstr	s15, [r2, #12]
}
 8003ea0:	4770      	bx	lr
	...

08003ea4 <__assert_func>:
 8003ea4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003ea6:	4614      	mov	r4, r2
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4b09      	ldr	r3, [pc, #36]	; (8003ed0 <__assert_func+0x2c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4605      	mov	r5, r0
 8003eb0:	68d8      	ldr	r0, [r3, #12]
 8003eb2:	b14c      	cbz	r4, 8003ec8 <__assert_func+0x24>
 8003eb4:	4b07      	ldr	r3, [pc, #28]	; (8003ed4 <__assert_func+0x30>)
 8003eb6:	9100      	str	r1, [sp, #0]
 8003eb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003ebc:	4906      	ldr	r1, [pc, #24]	; (8003ed8 <__assert_func+0x34>)
 8003ebe:	462b      	mov	r3, r5
 8003ec0:	f000 f814 	bl	8003eec <fiprintf>
 8003ec4:	f000 fcfe 	bl	80048c4 <abort>
 8003ec8:	4b04      	ldr	r3, [pc, #16]	; (8003edc <__assert_func+0x38>)
 8003eca:	461c      	mov	r4, r3
 8003ecc:	e7f3      	b.n	8003eb6 <__assert_func+0x12>
 8003ece:	bf00      	nop
 8003ed0:	2000132c 	.word	0x2000132c
 8003ed4:	08006194 	.word	0x08006194
 8003ed8:	080061a1 	.word	0x080061a1
 8003edc:	080061cf 	.word	0x080061cf

08003ee0 <__errno>:
 8003ee0:	4b01      	ldr	r3, [pc, #4]	; (8003ee8 <__errno+0x8>)
 8003ee2:	6818      	ldr	r0, [r3, #0]
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	2000132c 	.word	0x2000132c

08003eec <fiprintf>:
 8003eec:	b40e      	push	{r1, r2, r3}
 8003eee:	b503      	push	{r0, r1, lr}
 8003ef0:	4601      	mov	r1, r0
 8003ef2:	ab03      	add	r3, sp, #12
 8003ef4:	4805      	ldr	r0, [pc, #20]	; (8003f0c <fiprintf+0x20>)
 8003ef6:	f853 2b04 	ldr.w	r2, [r3], #4
 8003efa:	6800      	ldr	r0, [r0, #0]
 8003efc:	9301      	str	r3, [sp, #4]
 8003efe:	f000 f94d 	bl	800419c <_vfiprintf_r>
 8003f02:	b002      	add	sp, #8
 8003f04:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f08:	b003      	add	sp, #12
 8003f0a:	4770      	bx	lr
 8003f0c:	2000132c 	.word	0x2000132c

08003f10 <__libc_init_array>:
 8003f10:	b570      	push	{r4, r5, r6, lr}
 8003f12:	4d0d      	ldr	r5, [pc, #52]	; (8003f48 <__libc_init_array+0x38>)
 8003f14:	4c0d      	ldr	r4, [pc, #52]	; (8003f4c <__libc_init_array+0x3c>)
 8003f16:	1b64      	subs	r4, r4, r5
 8003f18:	10a4      	asrs	r4, r4, #2
 8003f1a:	2600      	movs	r6, #0
 8003f1c:	42a6      	cmp	r6, r4
 8003f1e:	d109      	bne.n	8003f34 <__libc_init_array+0x24>
 8003f20:	4d0b      	ldr	r5, [pc, #44]	; (8003f50 <__libc_init_array+0x40>)
 8003f22:	4c0c      	ldr	r4, [pc, #48]	; (8003f54 <__libc_init_array+0x44>)
 8003f24:	f002 f8b6 	bl	8006094 <_init>
 8003f28:	1b64      	subs	r4, r4, r5
 8003f2a:	10a4      	asrs	r4, r4, #2
 8003f2c:	2600      	movs	r6, #0
 8003f2e:	42a6      	cmp	r6, r4
 8003f30:	d105      	bne.n	8003f3e <__libc_init_array+0x2e>
 8003f32:	bd70      	pop	{r4, r5, r6, pc}
 8003f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f38:	4798      	blx	r3
 8003f3a:	3601      	adds	r6, #1
 8003f3c:	e7ee      	b.n	8003f1c <__libc_init_array+0xc>
 8003f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f42:	4798      	blx	r3
 8003f44:	3601      	adds	r6, #1
 8003f46:	e7f2      	b.n	8003f2e <__libc_init_array+0x1e>
 8003f48:	08006440 	.word	0x08006440
 8003f4c:	08006440 	.word	0x08006440
 8003f50:	08006440 	.word	0x08006440
 8003f54:	08006444 	.word	0x08006444

08003f58 <malloc>:
 8003f58:	4b02      	ldr	r3, [pc, #8]	; (8003f64 <malloc+0xc>)
 8003f5a:	4601      	mov	r1, r0
 8003f5c:	6818      	ldr	r0, [r3, #0]
 8003f5e:	f000 b87f 	b.w	8004060 <_malloc_r>
 8003f62:	bf00      	nop
 8003f64:	2000132c 	.word	0x2000132c

08003f68 <free>:
 8003f68:	4b02      	ldr	r3, [pc, #8]	; (8003f74 <free+0xc>)
 8003f6a:	4601      	mov	r1, r0
 8003f6c:	6818      	ldr	r0, [r3, #0]
 8003f6e:	f000 b80b 	b.w	8003f88 <_free_r>
 8003f72:	bf00      	nop
 8003f74:	2000132c 	.word	0x2000132c

08003f78 <memset>:
 8003f78:	4402      	add	r2, r0
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d100      	bne.n	8003f82 <memset+0xa>
 8003f80:	4770      	bx	lr
 8003f82:	f803 1b01 	strb.w	r1, [r3], #1
 8003f86:	e7f9      	b.n	8003f7c <memset+0x4>

08003f88 <_free_r>:
 8003f88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f8a:	2900      	cmp	r1, #0
 8003f8c:	d044      	beq.n	8004018 <_free_r+0x90>
 8003f8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f92:	9001      	str	r0, [sp, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f1a1 0404 	sub.w	r4, r1, #4
 8003f9a:	bfb8      	it	lt
 8003f9c:	18e4      	addlt	r4, r4, r3
 8003f9e:	f000 feb9 	bl	8004d14 <__malloc_lock>
 8003fa2:	4a1e      	ldr	r2, [pc, #120]	; (800401c <_free_r+0x94>)
 8003fa4:	9801      	ldr	r0, [sp, #4]
 8003fa6:	6813      	ldr	r3, [r2, #0]
 8003fa8:	b933      	cbnz	r3, 8003fb8 <_free_r+0x30>
 8003faa:	6063      	str	r3, [r4, #4]
 8003fac:	6014      	str	r4, [r2, #0]
 8003fae:	b003      	add	sp, #12
 8003fb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003fb4:	f000 beb4 	b.w	8004d20 <__malloc_unlock>
 8003fb8:	42a3      	cmp	r3, r4
 8003fba:	d908      	bls.n	8003fce <_free_r+0x46>
 8003fbc:	6825      	ldr	r5, [r4, #0]
 8003fbe:	1961      	adds	r1, r4, r5
 8003fc0:	428b      	cmp	r3, r1
 8003fc2:	bf01      	itttt	eq
 8003fc4:	6819      	ldreq	r1, [r3, #0]
 8003fc6:	685b      	ldreq	r3, [r3, #4]
 8003fc8:	1949      	addeq	r1, r1, r5
 8003fca:	6021      	streq	r1, [r4, #0]
 8003fcc:	e7ed      	b.n	8003faa <_free_r+0x22>
 8003fce:	461a      	mov	r2, r3
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	b10b      	cbz	r3, 8003fd8 <_free_r+0x50>
 8003fd4:	42a3      	cmp	r3, r4
 8003fd6:	d9fa      	bls.n	8003fce <_free_r+0x46>
 8003fd8:	6811      	ldr	r1, [r2, #0]
 8003fda:	1855      	adds	r5, r2, r1
 8003fdc:	42a5      	cmp	r5, r4
 8003fde:	d10b      	bne.n	8003ff8 <_free_r+0x70>
 8003fe0:	6824      	ldr	r4, [r4, #0]
 8003fe2:	4421      	add	r1, r4
 8003fe4:	1854      	adds	r4, r2, r1
 8003fe6:	42a3      	cmp	r3, r4
 8003fe8:	6011      	str	r1, [r2, #0]
 8003fea:	d1e0      	bne.n	8003fae <_free_r+0x26>
 8003fec:	681c      	ldr	r4, [r3, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	6053      	str	r3, [r2, #4]
 8003ff2:	4421      	add	r1, r4
 8003ff4:	6011      	str	r1, [r2, #0]
 8003ff6:	e7da      	b.n	8003fae <_free_r+0x26>
 8003ff8:	d902      	bls.n	8004000 <_free_r+0x78>
 8003ffa:	230c      	movs	r3, #12
 8003ffc:	6003      	str	r3, [r0, #0]
 8003ffe:	e7d6      	b.n	8003fae <_free_r+0x26>
 8004000:	6825      	ldr	r5, [r4, #0]
 8004002:	1961      	adds	r1, r4, r5
 8004004:	428b      	cmp	r3, r1
 8004006:	bf04      	itt	eq
 8004008:	6819      	ldreq	r1, [r3, #0]
 800400a:	685b      	ldreq	r3, [r3, #4]
 800400c:	6063      	str	r3, [r4, #4]
 800400e:	bf04      	itt	eq
 8004010:	1949      	addeq	r1, r1, r5
 8004012:	6021      	streq	r1, [r4, #0]
 8004014:	6054      	str	r4, [r2, #4]
 8004016:	e7ca      	b.n	8003fae <_free_r+0x26>
 8004018:	b003      	add	sp, #12
 800401a:	bd30      	pop	{r4, r5, pc}
 800401c:	20001a78 	.word	0x20001a78

08004020 <sbrk_aligned>:
 8004020:	b570      	push	{r4, r5, r6, lr}
 8004022:	4e0e      	ldr	r6, [pc, #56]	; (800405c <sbrk_aligned+0x3c>)
 8004024:	460c      	mov	r4, r1
 8004026:	6831      	ldr	r1, [r6, #0]
 8004028:	4605      	mov	r5, r0
 800402a:	b911      	cbnz	r1, 8004032 <sbrk_aligned+0x12>
 800402c:	f000 fb7a 	bl	8004724 <_sbrk_r>
 8004030:	6030      	str	r0, [r6, #0]
 8004032:	4621      	mov	r1, r4
 8004034:	4628      	mov	r0, r5
 8004036:	f000 fb75 	bl	8004724 <_sbrk_r>
 800403a:	1c43      	adds	r3, r0, #1
 800403c:	d00a      	beq.n	8004054 <sbrk_aligned+0x34>
 800403e:	1cc4      	adds	r4, r0, #3
 8004040:	f024 0403 	bic.w	r4, r4, #3
 8004044:	42a0      	cmp	r0, r4
 8004046:	d007      	beq.n	8004058 <sbrk_aligned+0x38>
 8004048:	1a21      	subs	r1, r4, r0
 800404a:	4628      	mov	r0, r5
 800404c:	f000 fb6a 	bl	8004724 <_sbrk_r>
 8004050:	3001      	adds	r0, #1
 8004052:	d101      	bne.n	8004058 <sbrk_aligned+0x38>
 8004054:	f04f 34ff 	mov.w	r4, #4294967295
 8004058:	4620      	mov	r0, r4
 800405a:	bd70      	pop	{r4, r5, r6, pc}
 800405c:	20001a7c 	.word	0x20001a7c

08004060 <_malloc_r>:
 8004060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004064:	1ccd      	adds	r5, r1, #3
 8004066:	f025 0503 	bic.w	r5, r5, #3
 800406a:	3508      	adds	r5, #8
 800406c:	2d0c      	cmp	r5, #12
 800406e:	bf38      	it	cc
 8004070:	250c      	movcc	r5, #12
 8004072:	2d00      	cmp	r5, #0
 8004074:	4607      	mov	r7, r0
 8004076:	db01      	blt.n	800407c <_malloc_r+0x1c>
 8004078:	42a9      	cmp	r1, r5
 800407a:	d905      	bls.n	8004088 <_malloc_r+0x28>
 800407c:	230c      	movs	r3, #12
 800407e:	603b      	str	r3, [r7, #0]
 8004080:	2600      	movs	r6, #0
 8004082:	4630      	mov	r0, r6
 8004084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004088:	4e2e      	ldr	r6, [pc, #184]	; (8004144 <_malloc_r+0xe4>)
 800408a:	f000 fe43 	bl	8004d14 <__malloc_lock>
 800408e:	6833      	ldr	r3, [r6, #0]
 8004090:	461c      	mov	r4, r3
 8004092:	bb34      	cbnz	r4, 80040e2 <_malloc_r+0x82>
 8004094:	4629      	mov	r1, r5
 8004096:	4638      	mov	r0, r7
 8004098:	f7ff ffc2 	bl	8004020 <sbrk_aligned>
 800409c:	1c43      	adds	r3, r0, #1
 800409e:	4604      	mov	r4, r0
 80040a0:	d14d      	bne.n	800413e <_malloc_r+0xde>
 80040a2:	6834      	ldr	r4, [r6, #0]
 80040a4:	4626      	mov	r6, r4
 80040a6:	2e00      	cmp	r6, #0
 80040a8:	d140      	bne.n	800412c <_malloc_r+0xcc>
 80040aa:	6823      	ldr	r3, [r4, #0]
 80040ac:	4631      	mov	r1, r6
 80040ae:	4638      	mov	r0, r7
 80040b0:	eb04 0803 	add.w	r8, r4, r3
 80040b4:	f000 fb36 	bl	8004724 <_sbrk_r>
 80040b8:	4580      	cmp	r8, r0
 80040ba:	d13a      	bne.n	8004132 <_malloc_r+0xd2>
 80040bc:	6821      	ldr	r1, [r4, #0]
 80040be:	3503      	adds	r5, #3
 80040c0:	1a6d      	subs	r5, r5, r1
 80040c2:	f025 0503 	bic.w	r5, r5, #3
 80040c6:	3508      	adds	r5, #8
 80040c8:	2d0c      	cmp	r5, #12
 80040ca:	bf38      	it	cc
 80040cc:	250c      	movcc	r5, #12
 80040ce:	4629      	mov	r1, r5
 80040d0:	4638      	mov	r0, r7
 80040d2:	f7ff ffa5 	bl	8004020 <sbrk_aligned>
 80040d6:	3001      	adds	r0, #1
 80040d8:	d02b      	beq.n	8004132 <_malloc_r+0xd2>
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	442b      	add	r3, r5
 80040de:	6023      	str	r3, [r4, #0]
 80040e0:	e00e      	b.n	8004100 <_malloc_r+0xa0>
 80040e2:	6822      	ldr	r2, [r4, #0]
 80040e4:	1b52      	subs	r2, r2, r5
 80040e6:	d41e      	bmi.n	8004126 <_malloc_r+0xc6>
 80040e8:	2a0b      	cmp	r2, #11
 80040ea:	d916      	bls.n	800411a <_malloc_r+0xba>
 80040ec:	1961      	adds	r1, r4, r5
 80040ee:	42a3      	cmp	r3, r4
 80040f0:	6025      	str	r5, [r4, #0]
 80040f2:	bf18      	it	ne
 80040f4:	6059      	strne	r1, [r3, #4]
 80040f6:	6863      	ldr	r3, [r4, #4]
 80040f8:	bf08      	it	eq
 80040fa:	6031      	streq	r1, [r6, #0]
 80040fc:	5162      	str	r2, [r4, r5]
 80040fe:	604b      	str	r3, [r1, #4]
 8004100:	4638      	mov	r0, r7
 8004102:	f104 060b 	add.w	r6, r4, #11
 8004106:	f000 fe0b 	bl	8004d20 <__malloc_unlock>
 800410a:	f026 0607 	bic.w	r6, r6, #7
 800410e:	1d23      	adds	r3, r4, #4
 8004110:	1af2      	subs	r2, r6, r3
 8004112:	d0b6      	beq.n	8004082 <_malloc_r+0x22>
 8004114:	1b9b      	subs	r3, r3, r6
 8004116:	50a3      	str	r3, [r4, r2]
 8004118:	e7b3      	b.n	8004082 <_malloc_r+0x22>
 800411a:	6862      	ldr	r2, [r4, #4]
 800411c:	42a3      	cmp	r3, r4
 800411e:	bf0c      	ite	eq
 8004120:	6032      	streq	r2, [r6, #0]
 8004122:	605a      	strne	r2, [r3, #4]
 8004124:	e7ec      	b.n	8004100 <_malloc_r+0xa0>
 8004126:	4623      	mov	r3, r4
 8004128:	6864      	ldr	r4, [r4, #4]
 800412a:	e7b2      	b.n	8004092 <_malloc_r+0x32>
 800412c:	4634      	mov	r4, r6
 800412e:	6876      	ldr	r6, [r6, #4]
 8004130:	e7b9      	b.n	80040a6 <_malloc_r+0x46>
 8004132:	230c      	movs	r3, #12
 8004134:	603b      	str	r3, [r7, #0]
 8004136:	4638      	mov	r0, r7
 8004138:	f000 fdf2 	bl	8004d20 <__malloc_unlock>
 800413c:	e7a1      	b.n	8004082 <_malloc_r+0x22>
 800413e:	6025      	str	r5, [r4, #0]
 8004140:	e7de      	b.n	8004100 <_malloc_r+0xa0>
 8004142:	bf00      	nop
 8004144:	20001a78 	.word	0x20001a78

08004148 <__sfputc_r>:
 8004148:	6893      	ldr	r3, [r2, #8]
 800414a:	3b01      	subs	r3, #1
 800414c:	2b00      	cmp	r3, #0
 800414e:	b410      	push	{r4}
 8004150:	6093      	str	r3, [r2, #8]
 8004152:	da08      	bge.n	8004166 <__sfputc_r+0x1e>
 8004154:	6994      	ldr	r4, [r2, #24]
 8004156:	42a3      	cmp	r3, r4
 8004158:	db01      	blt.n	800415e <__sfputc_r+0x16>
 800415a:	290a      	cmp	r1, #10
 800415c:	d103      	bne.n	8004166 <__sfputc_r+0x1e>
 800415e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004162:	f000 baef 	b.w	8004744 <__swbuf_r>
 8004166:	6813      	ldr	r3, [r2, #0]
 8004168:	1c58      	adds	r0, r3, #1
 800416a:	6010      	str	r0, [r2, #0]
 800416c:	7019      	strb	r1, [r3, #0]
 800416e:	4608      	mov	r0, r1
 8004170:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004174:	4770      	bx	lr

08004176 <__sfputs_r>:
 8004176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004178:	4606      	mov	r6, r0
 800417a:	460f      	mov	r7, r1
 800417c:	4614      	mov	r4, r2
 800417e:	18d5      	adds	r5, r2, r3
 8004180:	42ac      	cmp	r4, r5
 8004182:	d101      	bne.n	8004188 <__sfputs_r+0x12>
 8004184:	2000      	movs	r0, #0
 8004186:	e007      	b.n	8004198 <__sfputs_r+0x22>
 8004188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800418c:	463a      	mov	r2, r7
 800418e:	4630      	mov	r0, r6
 8004190:	f7ff ffda 	bl	8004148 <__sfputc_r>
 8004194:	1c43      	adds	r3, r0, #1
 8004196:	d1f3      	bne.n	8004180 <__sfputs_r+0xa>
 8004198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800419c <_vfiprintf_r>:
 800419c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041a0:	460d      	mov	r5, r1
 80041a2:	b09d      	sub	sp, #116	; 0x74
 80041a4:	4614      	mov	r4, r2
 80041a6:	4698      	mov	r8, r3
 80041a8:	4606      	mov	r6, r0
 80041aa:	b118      	cbz	r0, 80041b4 <_vfiprintf_r+0x18>
 80041ac:	6983      	ldr	r3, [r0, #24]
 80041ae:	b90b      	cbnz	r3, 80041b4 <_vfiprintf_r+0x18>
 80041b0:	f000 fcaa 	bl	8004b08 <__sinit>
 80041b4:	4b89      	ldr	r3, [pc, #548]	; (80043dc <_vfiprintf_r+0x240>)
 80041b6:	429d      	cmp	r5, r3
 80041b8:	d11b      	bne.n	80041f2 <_vfiprintf_r+0x56>
 80041ba:	6875      	ldr	r5, [r6, #4]
 80041bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041be:	07d9      	lsls	r1, r3, #31
 80041c0:	d405      	bmi.n	80041ce <_vfiprintf_r+0x32>
 80041c2:	89ab      	ldrh	r3, [r5, #12]
 80041c4:	059a      	lsls	r2, r3, #22
 80041c6:	d402      	bmi.n	80041ce <_vfiprintf_r+0x32>
 80041c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041ca:	f000 fd3b 	bl	8004c44 <__retarget_lock_acquire_recursive>
 80041ce:	89ab      	ldrh	r3, [r5, #12]
 80041d0:	071b      	lsls	r3, r3, #28
 80041d2:	d501      	bpl.n	80041d8 <_vfiprintf_r+0x3c>
 80041d4:	692b      	ldr	r3, [r5, #16]
 80041d6:	b9eb      	cbnz	r3, 8004214 <_vfiprintf_r+0x78>
 80041d8:	4629      	mov	r1, r5
 80041da:	4630      	mov	r0, r6
 80041dc:	f000 fb04 	bl	80047e8 <__swsetup_r>
 80041e0:	b1c0      	cbz	r0, 8004214 <_vfiprintf_r+0x78>
 80041e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041e4:	07dc      	lsls	r4, r3, #31
 80041e6:	d50e      	bpl.n	8004206 <_vfiprintf_r+0x6a>
 80041e8:	f04f 30ff 	mov.w	r0, #4294967295
 80041ec:	b01d      	add	sp, #116	; 0x74
 80041ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041f2:	4b7b      	ldr	r3, [pc, #492]	; (80043e0 <_vfiprintf_r+0x244>)
 80041f4:	429d      	cmp	r5, r3
 80041f6:	d101      	bne.n	80041fc <_vfiprintf_r+0x60>
 80041f8:	68b5      	ldr	r5, [r6, #8]
 80041fa:	e7df      	b.n	80041bc <_vfiprintf_r+0x20>
 80041fc:	4b79      	ldr	r3, [pc, #484]	; (80043e4 <_vfiprintf_r+0x248>)
 80041fe:	429d      	cmp	r5, r3
 8004200:	bf08      	it	eq
 8004202:	68f5      	ldreq	r5, [r6, #12]
 8004204:	e7da      	b.n	80041bc <_vfiprintf_r+0x20>
 8004206:	89ab      	ldrh	r3, [r5, #12]
 8004208:	0598      	lsls	r0, r3, #22
 800420a:	d4ed      	bmi.n	80041e8 <_vfiprintf_r+0x4c>
 800420c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800420e:	f000 fd1a 	bl	8004c46 <__retarget_lock_release_recursive>
 8004212:	e7e9      	b.n	80041e8 <_vfiprintf_r+0x4c>
 8004214:	2300      	movs	r3, #0
 8004216:	9309      	str	r3, [sp, #36]	; 0x24
 8004218:	2320      	movs	r3, #32
 800421a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800421e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004222:	2330      	movs	r3, #48	; 0x30
 8004224:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80043e8 <_vfiprintf_r+0x24c>
 8004228:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800422c:	f04f 0901 	mov.w	r9, #1
 8004230:	4623      	mov	r3, r4
 8004232:	469a      	mov	sl, r3
 8004234:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004238:	b10a      	cbz	r2, 800423e <_vfiprintf_r+0xa2>
 800423a:	2a25      	cmp	r2, #37	; 0x25
 800423c:	d1f9      	bne.n	8004232 <_vfiprintf_r+0x96>
 800423e:	ebba 0b04 	subs.w	fp, sl, r4
 8004242:	d00b      	beq.n	800425c <_vfiprintf_r+0xc0>
 8004244:	465b      	mov	r3, fp
 8004246:	4622      	mov	r2, r4
 8004248:	4629      	mov	r1, r5
 800424a:	4630      	mov	r0, r6
 800424c:	f7ff ff93 	bl	8004176 <__sfputs_r>
 8004250:	3001      	adds	r0, #1
 8004252:	f000 80aa 	beq.w	80043aa <_vfiprintf_r+0x20e>
 8004256:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004258:	445a      	add	r2, fp
 800425a:	9209      	str	r2, [sp, #36]	; 0x24
 800425c:	f89a 3000 	ldrb.w	r3, [sl]
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 80a2 	beq.w	80043aa <_vfiprintf_r+0x20e>
 8004266:	2300      	movs	r3, #0
 8004268:	f04f 32ff 	mov.w	r2, #4294967295
 800426c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004270:	f10a 0a01 	add.w	sl, sl, #1
 8004274:	9304      	str	r3, [sp, #16]
 8004276:	9307      	str	r3, [sp, #28]
 8004278:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800427c:	931a      	str	r3, [sp, #104]	; 0x68
 800427e:	4654      	mov	r4, sl
 8004280:	2205      	movs	r2, #5
 8004282:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004286:	4858      	ldr	r0, [pc, #352]	; (80043e8 <_vfiprintf_r+0x24c>)
 8004288:	f7fb ffa2 	bl	80001d0 <memchr>
 800428c:	9a04      	ldr	r2, [sp, #16]
 800428e:	b9d8      	cbnz	r0, 80042c8 <_vfiprintf_r+0x12c>
 8004290:	06d1      	lsls	r1, r2, #27
 8004292:	bf44      	itt	mi
 8004294:	2320      	movmi	r3, #32
 8004296:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800429a:	0713      	lsls	r3, r2, #28
 800429c:	bf44      	itt	mi
 800429e:	232b      	movmi	r3, #43	; 0x2b
 80042a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042a4:	f89a 3000 	ldrb.w	r3, [sl]
 80042a8:	2b2a      	cmp	r3, #42	; 0x2a
 80042aa:	d015      	beq.n	80042d8 <_vfiprintf_r+0x13c>
 80042ac:	9a07      	ldr	r2, [sp, #28]
 80042ae:	4654      	mov	r4, sl
 80042b0:	2000      	movs	r0, #0
 80042b2:	f04f 0c0a 	mov.w	ip, #10
 80042b6:	4621      	mov	r1, r4
 80042b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042bc:	3b30      	subs	r3, #48	; 0x30
 80042be:	2b09      	cmp	r3, #9
 80042c0:	d94e      	bls.n	8004360 <_vfiprintf_r+0x1c4>
 80042c2:	b1b0      	cbz	r0, 80042f2 <_vfiprintf_r+0x156>
 80042c4:	9207      	str	r2, [sp, #28]
 80042c6:	e014      	b.n	80042f2 <_vfiprintf_r+0x156>
 80042c8:	eba0 0308 	sub.w	r3, r0, r8
 80042cc:	fa09 f303 	lsl.w	r3, r9, r3
 80042d0:	4313      	orrs	r3, r2
 80042d2:	9304      	str	r3, [sp, #16]
 80042d4:	46a2      	mov	sl, r4
 80042d6:	e7d2      	b.n	800427e <_vfiprintf_r+0xe2>
 80042d8:	9b03      	ldr	r3, [sp, #12]
 80042da:	1d19      	adds	r1, r3, #4
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	9103      	str	r1, [sp, #12]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	bfbb      	ittet	lt
 80042e4:	425b      	neglt	r3, r3
 80042e6:	f042 0202 	orrlt.w	r2, r2, #2
 80042ea:	9307      	strge	r3, [sp, #28]
 80042ec:	9307      	strlt	r3, [sp, #28]
 80042ee:	bfb8      	it	lt
 80042f0:	9204      	strlt	r2, [sp, #16]
 80042f2:	7823      	ldrb	r3, [r4, #0]
 80042f4:	2b2e      	cmp	r3, #46	; 0x2e
 80042f6:	d10c      	bne.n	8004312 <_vfiprintf_r+0x176>
 80042f8:	7863      	ldrb	r3, [r4, #1]
 80042fa:	2b2a      	cmp	r3, #42	; 0x2a
 80042fc:	d135      	bne.n	800436a <_vfiprintf_r+0x1ce>
 80042fe:	9b03      	ldr	r3, [sp, #12]
 8004300:	1d1a      	adds	r2, r3, #4
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	9203      	str	r2, [sp, #12]
 8004306:	2b00      	cmp	r3, #0
 8004308:	bfb8      	it	lt
 800430a:	f04f 33ff 	movlt.w	r3, #4294967295
 800430e:	3402      	adds	r4, #2
 8004310:	9305      	str	r3, [sp, #20]
 8004312:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80043f8 <_vfiprintf_r+0x25c>
 8004316:	7821      	ldrb	r1, [r4, #0]
 8004318:	2203      	movs	r2, #3
 800431a:	4650      	mov	r0, sl
 800431c:	f7fb ff58 	bl	80001d0 <memchr>
 8004320:	b140      	cbz	r0, 8004334 <_vfiprintf_r+0x198>
 8004322:	2340      	movs	r3, #64	; 0x40
 8004324:	eba0 000a 	sub.w	r0, r0, sl
 8004328:	fa03 f000 	lsl.w	r0, r3, r0
 800432c:	9b04      	ldr	r3, [sp, #16]
 800432e:	4303      	orrs	r3, r0
 8004330:	3401      	adds	r4, #1
 8004332:	9304      	str	r3, [sp, #16]
 8004334:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004338:	482c      	ldr	r0, [pc, #176]	; (80043ec <_vfiprintf_r+0x250>)
 800433a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800433e:	2206      	movs	r2, #6
 8004340:	f7fb ff46 	bl	80001d0 <memchr>
 8004344:	2800      	cmp	r0, #0
 8004346:	d03f      	beq.n	80043c8 <_vfiprintf_r+0x22c>
 8004348:	4b29      	ldr	r3, [pc, #164]	; (80043f0 <_vfiprintf_r+0x254>)
 800434a:	bb1b      	cbnz	r3, 8004394 <_vfiprintf_r+0x1f8>
 800434c:	9b03      	ldr	r3, [sp, #12]
 800434e:	3307      	adds	r3, #7
 8004350:	f023 0307 	bic.w	r3, r3, #7
 8004354:	3308      	adds	r3, #8
 8004356:	9303      	str	r3, [sp, #12]
 8004358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800435a:	443b      	add	r3, r7
 800435c:	9309      	str	r3, [sp, #36]	; 0x24
 800435e:	e767      	b.n	8004230 <_vfiprintf_r+0x94>
 8004360:	fb0c 3202 	mla	r2, ip, r2, r3
 8004364:	460c      	mov	r4, r1
 8004366:	2001      	movs	r0, #1
 8004368:	e7a5      	b.n	80042b6 <_vfiprintf_r+0x11a>
 800436a:	2300      	movs	r3, #0
 800436c:	3401      	adds	r4, #1
 800436e:	9305      	str	r3, [sp, #20]
 8004370:	4619      	mov	r1, r3
 8004372:	f04f 0c0a 	mov.w	ip, #10
 8004376:	4620      	mov	r0, r4
 8004378:	f810 2b01 	ldrb.w	r2, [r0], #1
 800437c:	3a30      	subs	r2, #48	; 0x30
 800437e:	2a09      	cmp	r2, #9
 8004380:	d903      	bls.n	800438a <_vfiprintf_r+0x1ee>
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0c5      	beq.n	8004312 <_vfiprintf_r+0x176>
 8004386:	9105      	str	r1, [sp, #20]
 8004388:	e7c3      	b.n	8004312 <_vfiprintf_r+0x176>
 800438a:	fb0c 2101 	mla	r1, ip, r1, r2
 800438e:	4604      	mov	r4, r0
 8004390:	2301      	movs	r3, #1
 8004392:	e7f0      	b.n	8004376 <_vfiprintf_r+0x1da>
 8004394:	ab03      	add	r3, sp, #12
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	462a      	mov	r2, r5
 800439a:	4b16      	ldr	r3, [pc, #88]	; (80043f4 <_vfiprintf_r+0x258>)
 800439c:	a904      	add	r1, sp, #16
 800439e:	4630      	mov	r0, r6
 80043a0:	f3af 8000 	nop.w
 80043a4:	4607      	mov	r7, r0
 80043a6:	1c78      	adds	r0, r7, #1
 80043a8:	d1d6      	bne.n	8004358 <_vfiprintf_r+0x1bc>
 80043aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043ac:	07d9      	lsls	r1, r3, #31
 80043ae:	d405      	bmi.n	80043bc <_vfiprintf_r+0x220>
 80043b0:	89ab      	ldrh	r3, [r5, #12]
 80043b2:	059a      	lsls	r2, r3, #22
 80043b4:	d402      	bmi.n	80043bc <_vfiprintf_r+0x220>
 80043b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80043b8:	f000 fc45 	bl	8004c46 <__retarget_lock_release_recursive>
 80043bc:	89ab      	ldrh	r3, [r5, #12]
 80043be:	065b      	lsls	r3, r3, #25
 80043c0:	f53f af12 	bmi.w	80041e8 <_vfiprintf_r+0x4c>
 80043c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043c6:	e711      	b.n	80041ec <_vfiprintf_r+0x50>
 80043c8:	ab03      	add	r3, sp, #12
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	462a      	mov	r2, r5
 80043ce:	4b09      	ldr	r3, [pc, #36]	; (80043f4 <_vfiprintf_r+0x258>)
 80043d0:	a904      	add	r1, sp, #16
 80043d2:	4630      	mov	r0, r6
 80043d4:	f000 f880 	bl	80044d8 <_printf_i>
 80043d8:	e7e4      	b.n	80043a4 <_vfiprintf_r+0x208>
 80043da:	bf00      	nop
 80043dc:	08006228 	.word	0x08006228
 80043e0:	08006248 	.word	0x08006248
 80043e4:	08006208 	.word	0x08006208
 80043e8:	080061d4 	.word	0x080061d4
 80043ec:	080061de 	.word	0x080061de
 80043f0:	00000000 	.word	0x00000000
 80043f4:	08004177 	.word	0x08004177
 80043f8:	080061da 	.word	0x080061da

080043fc <_printf_common>:
 80043fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004400:	4616      	mov	r6, r2
 8004402:	4699      	mov	r9, r3
 8004404:	688a      	ldr	r2, [r1, #8]
 8004406:	690b      	ldr	r3, [r1, #16]
 8004408:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800440c:	4293      	cmp	r3, r2
 800440e:	bfb8      	it	lt
 8004410:	4613      	movlt	r3, r2
 8004412:	6033      	str	r3, [r6, #0]
 8004414:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004418:	4607      	mov	r7, r0
 800441a:	460c      	mov	r4, r1
 800441c:	b10a      	cbz	r2, 8004422 <_printf_common+0x26>
 800441e:	3301      	adds	r3, #1
 8004420:	6033      	str	r3, [r6, #0]
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	0699      	lsls	r1, r3, #26
 8004426:	bf42      	ittt	mi
 8004428:	6833      	ldrmi	r3, [r6, #0]
 800442a:	3302      	addmi	r3, #2
 800442c:	6033      	strmi	r3, [r6, #0]
 800442e:	6825      	ldr	r5, [r4, #0]
 8004430:	f015 0506 	ands.w	r5, r5, #6
 8004434:	d106      	bne.n	8004444 <_printf_common+0x48>
 8004436:	f104 0a19 	add.w	sl, r4, #25
 800443a:	68e3      	ldr	r3, [r4, #12]
 800443c:	6832      	ldr	r2, [r6, #0]
 800443e:	1a9b      	subs	r3, r3, r2
 8004440:	42ab      	cmp	r3, r5
 8004442:	dc26      	bgt.n	8004492 <_printf_common+0x96>
 8004444:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004448:	1e13      	subs	r3, r2, #0
 800444a:	6822      	ldr	r2, [r4, #0]
 800444c:	bf18      	it	ne
 800444e:	2301      	movne	r3, #1
 8004450:	0692      	lsls	r2, r2, #26
 8004452:	d42b      	bmi.n	80044ac <_printf_common+0xb0>
 8004454:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004458:	4649      	mov	r1, r9
 800445a:	4638      	mov	r0, r7
 800445c:	47c0      	blx	r8
 800445e:	3001      	adds	r0, #1
 8004460:	d01e      	beq.n	80044a0 <_printf_common+0xa4>
 8004462:	6823      	ldr	r3, [r4, #0]
 8004464:	68e5      	ldr	r5, [r4, #12]
 8004466:	6832      	ldr	r2, [r6, #0]
 8004468:	f003 0306 	and.w	r3, r3, #6
 800446c:	2b04      	cmp	r3, #4
 800446e:	bf08      	it	eq
 8004470:	1aad      	subeq	r5, r5, r2
 8004472:	68a3      	ldr	r3, [r4, #8]
 8004474:	6922      	ldr	r2, [r4, #16]
 8004476:	bf0c      	ite	eq
 8004478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800447c:	2500      	movne	r5, #0
 800447e:	4293      	cmp	r3, r2
 8004480:	bfc4      	itt	gt
 8004482:	1a9b      	subgt	r3, r3, r2
 8004484:	18ed      	addgt	r5, r5, r3
 8004486:	2600      	movs	r6, #0
 8004488:	341a      	adds	r4, #26
 800448a:	42b5      	cmp	r5, r6
 800448c:	d11a      	bne.n	80044c4 <_printf_common+0xc8>
 800448e:	2000      	movs	r0, #0
 8004490:	e008      	b.n	80044a4 <_printf_common+0xa8>
 8004492:	2301      	movs	r3, #1
 8004494:	4652      	mov	r2, sl
 8004496:	4649      	mov	r1, r9
 8004498:	4638      	mov	r0, r7
 800449a:	47c0      	blx	r8
 800449c:	3001      	adds	r0, #1
 800449e:	d103      	bne.n	80044a8 <_printf_common+0xac>
 80044a0:	f04f 30ff 	mov.w	r0, #4294967295
 80044a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044a8:	3501      	adds	r5, #1
 80044aa:	e7c6      	b.n	800443a <_printf_common+0x3e>
 80044ac:	18e1      	adds	r1, r4, r3
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	2030      	movs	r0, #48	; 0x30
 80044b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044b6:	4422      	add	r2, r4
 80044b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044c0:	3302      	adds	r3, #2
 80044c2:	e7c7      	b.n	8004454 <_printf_common+0x58>
 80044c4:	2301      	movs	r3, #1
 80044c6:	4622      	mov	r2, r4
 80044c8:	4649      	mov	r1, r9
 80044ca:	4638      	mov	r0, r7
 80044cc:	47c0      	blx	r8
 80044ce:	3001      	adds	r0, #1
 80044d0:	d0e6      	beq.n	80044a0 <_printf_common+0xa4>
 80044d2:	3601      	adds	r6, #1
 80044d4:	e7d9      	b.n	800448a <_printf_common+0x8e>
	...

080044d8 <_printf_i>:
 80044d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044dc:	7e0f      	ldrb	r7, [r1, #24]
 80044de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044e0:	2f78      	cmp	r7, #120	; 0x78
 80044e2:	4691      	mov	r9, r2
 80044e4:	4680      	mov	r8, r0
 80044e6:	460c      	mov	r4, r1
 80044e8:	469a      	mov	sl, r3
 80044ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80044ee:	d807      	bhi.n	8004500 <_printf_i+0x28>
 80044f0:	2f62      	cmp	r7, #98	; 0x62
 80044f2:	d80a      	bhi.n	800450a <_printf_i+0x32>
 80044f4:	2f00      	cmp	r7, #0
 80044f6:	f000 80d8 	beq.w	80046aa <_printf_i+0x1d2>
 80044fa:	2f58      	cmp	r7, #88	; 0x58
 80044fc:	f000 80a3 	beq.w	8004646 <_printf_i+0x16e>
 8004500:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004504:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004508:	e03a      	b.n	8004580 <_printf_i+0xa8>
 800450a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800450e:	2b15      	cmp	r3, #21
 8004510:	d8f6      	bhi.n	8004500 <_printf_i+0x28>
 8004512:	a101      	add	r1, pc, #4	; (adr r1, 8004518 <_printf_i+0x40>)
 8004514:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004518:	08004571 	.word	0x08004571
 800451c:	08004585 	.word	0x08004585
 8004520:	08004501 	.word	0x08004501
 8004524:	08004501 	.word	0x08004501
 8004528:	08004501 	.word	0x08004501
 800452c:	08004501 	.word	0x08004501
 8004530:	08004585 	.word	0x08004585
 8004534:	08004501 	.word	0x08004501
 8004538:	08004501 	.word	0x08004501
 800453c:	08004501 	.word	0x08004501
 8004540:	08004501 	.word	0x08004501
 8004544:	08004691 	.word	0x08004691
 8004548:	080045b5 	.word	0x080045b5
 800454c:	08004673 	.word	0x08004673
 8004550:	08004501 	.word	0x08004501
 8004554:	08004501 	.word	0x08004501
 8004558:	080046b3 	.word	0x080046b3
 800455c:	08004501 	.word	0x08004501
 8004560:	080045b5 	.word	0x080045b5
 8004564:	08004501 	.word	0x08004501
 8004568:	08004501 	.word	0x08004501
 800456c:	0800467b 	.word	0x0800467b
 8004570:	682b      	ldr	r3, [r5, #0]
 8004572:	1d1a      	adds	r2, r3, #4
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	602a      	str	r2, [r5, #0]
 8004578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800457c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004580:	2301      	movs	r3, #1
 8004582:	e0a3      	b.n	80046cc <_printf_i+0x1f4>
 8004584:	6820      	ldr	r0, [r4, #0]
 8004586:	6829      	ldr	r1, [r5, #0]
 8004588:	0606      	lsls	r6, r0, #24
 800458a:	f101 0304 	add.w	r3, r1, #4
 800458e:	d50a      	bpl.n	80045a6 <_printf_i+0xce>
 8004590:	680e      	ldr	r6, [r1, #0]
 8004592:	602b      	str	r3, [r5, #0]
 8004594:	2e00      	cmp	r6, #0
 8004596:	da03      	bge.n	80045a0 <_printf_i+0xc8>
 8004598:	232d      	movs	r3, #45	; 0x2d
 800459a:	4276      	negs	r6, r6
 800459c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045a0:	485e      	ldr	r0, [pc, #376]	; (800471c <_printf_i+0x244>)
 80045a2:	230a      	movs	r3, #10
 80045a4:	e019      	b.n	80045da <_printf_i+0x102>
 80045a6:	680e      	ldr	r6, [r1, #0]
 80045a8:	602b      	str	r3, [r5, #0]
 80045aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80045ae:	bf18      	it	ne
 80045b0:	b236      	sxthne	r6, r6
 80045b2:	e7ef      	b.n	8004594 <_printf_i+0xbc>
 80045b4:	682b      	ldr	r3, [r5, #0]
 80045b6:	6820      	ldr	r0, [r4, #0]
 80045b8:	1d19      	adds	r1, r3, #4
 80045ba:	6029      	str	r1, [r5, #0]
 80045bc:	0601      	lsls	r1, r0, #24
 80045be:	d501      	bpl.n	80045c4 <_printf_i+0xec>
 80045c0:	681e      	ldr	r6, [r3, #0]
 80045c2:	e002      	b.n	80045ca <_printf_i+0xf2>
 80045c4:	0646      	lsls	r6, r0, #25
 80045c6:	d5fb      	bpl.n	80045c0 <_printf_i+0xe8>
 80045c8:	881e      	ldrh	r6, [r3, #0]
 80045ca:	4854      	ldr	r0, [pc, #336]	; (800471c <_printf_i+0x244>)
 80045cc:	2f6f      	cmp	r7, #111	; 0x6f
 80045ce:	bf0c      	ite	eq
 80045d0:	2308      	moveq	r3, #8
 80045d2:	230a      	movne	r3, #10
 80045d4:	2100      	movs	r1, #0
 80045d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045da:	6865      	ldr	r5, [r4, #4]
 80045dc:	60a5      	str	r5, [r4, #8]
 80045de:	2d00      	cmp	r5, #0
 80045e0:	bfa2      	ittt	ge
 80045e2:	6821      	ldrge	r1, [r4, #0]
 80045e4:	f021 0104 	bicge.w	r1, r1, #4
 80045e8:	6021      	strge	r1, [r4, #0]
 80045ea:	b90e      	cbnz	r6, 80045f0 <_printf_i+0x118>
 80045ec:	2d00      	cmp	r5, #0
 80045ee:	d04d      	beq.n	800468c <_printf_i+0x1b4>
 80045f0:	4615      	mov	r5, r2
 80045f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80045f6:	fb03 6711 	mls	r7, r3, r1, r6
 80045fa:	5dc7      	ldrb	r7, [r0, r7]
 80045fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004600:	4637      	mov	r7, r6
 8004602:	42bb      	cmp	r3, r7
 8004604:	460e      	mov	r6, r1
 8004606:	d9f4      	bls.n	80045f2 <_printf_i+0x11a>
 8004608:	2b08      	cmp	r3, #8
 800460a:	d10b      	bne.n	8004624 <_printf_i+0x14c>
 800460c:	6823      	ldr	r3, [r4, #0]
 800460e:	07de      	lsls	r6, r3, #31
 8004610:	d508      	bpl.n	8004624 <_printf_i+0x14c>
 8004612:	6923      	ldr	r3, [r4, #16]
 8004614:	6861      	ldr	r1, [r4, #4]
 8004616:	4299      	cmp	r1, r3
 8004618:	bfde      	ittt	le
 800461a:	2330      	movle	r3, #48	; 0x30
 800461c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004620:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004624:	1b52      	subs	r2, r2, r5
 8004626:	6122      	str	r2, [r4, #16]
 8004628:	f8cd a000 	str.w	sl, [sp]
 800462c:	464b      	mov	r3, r9
 800462e:	aa03      	add	r2, sp, #12
 8004630:	4621      	mov	r1, r4
 8004632:	4640      	mov	r0, r8
 8004634:	f7ff fee2 	bl	80043fc <_printf_common>
 8004638:	3001      	adds	r0, #1
 800463a:	d14c      	bne.n	80046d6 <_printf_i+0x1fe>
 800463c:	f04f 30ff 	mov.w	r0, #4294967295
 8004640:	b004      	add	sp, #16
 8004642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004646:	4835      	ldr	r0, [pc, #212]	; (800471c <_printf_i+0x244>)
 8004648:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800464c:	6829      	ldr	r1, [r5, #0]
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	f851 6b04 	ldr.w	r6, [r1], #4
 8004654:	6029      	str	r1, [r5, #0]
 8004656:	061d      	lsls	r5, r3, #24
 8004658:	d514      	bpl.n	8004684 <_printf_i+0x1ac>
 800465a:	07df      	lsls	r7, r3, #31
 800465c:	bf44      	itt	mi
 800465e:	f043 0320 	orrmi.w	r3, r3, #32
 8004662:	6023      	strmi	r3, [r4, #0]
 8004664:	b91e      	cbnz	r6, 800466e <_printf_i+0x196>
 8004666:	6823      	ldr	r3, [r4, #0]
 8004668:	f023 0320 	bic.w	r3, r3, #32
 800466c:	6023      	str	r3, [r4, #0]
 800466e:	2310      	movs	r3, #16
 8004670:	e7b0      	b.n	80045d4 <_printf_i+0xfc>
 8004672:	6823      	ldr	r3, [r4, #0]
 8004674:	f043 0320 	orr.w	r3, r3, #32
 8004678:	6023      	str	r3, [r4, #0]
 800467a:	2378      	movs	r3, #120	; 0x78
 800467c:	4828      	ldr	r0, [pc, #160]	; (8004720 <_printf_i+0x248>)
 800467e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004682:	e7e3      	b.n	800464c <_printf_i+0x174>
 8004684:	0659      	lsls	r1, r3, #25
 8004686:	bf48      	it	mi
 8004688:	b2b6      	uxthmi	r6, r6
 800468a:	e7e6      	b.n	800465a <_printf_i+0x182>
 800468c:	4615      	mov	r5, r2
 800468e:	e7bb      	b.n	8004608 <_printf_i+0x130>
 8004690:	682b      	ldr	r3, [r5, #0]
 8004692:	6826      	ldr	r6, [r4, #0]
 8004694:	6961      	ldr	r1, [r4, #20]
 8004696:	1d18      	adds	r0, r3, #4
 8004698:	6028      	str	r0, [r5, #0]
 800469a:	0635      	lsls	r5, r6, #24
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	d501      	bpl.n	80046a4 <_printf_i+0x1cc>
 80046a0:	6019      	str	r1, [r3, #0]
 80046a2:	e002      	b.n	80046aa <_printf_i+0x1d2>
 80046a4:	0670      	lsls	r0, r6, #25
 80046a6:	d5fb      	bpl.n	80046a0 <_printf_i+0x1c8>
 80046a8:	8019      	strh	r1, [r3, #0]
 80046aa:	2300      	movs	r3, #0
 80046ac:	6123      	str	r3, [r4, #16]
 80046ae:	4615      	mov	r5, r2
 80046b0:	e7ba      	b.n	8004628 <_printf_i+0x150>
 80046b2:	682b      	ldr	r3, [r5, #0]
 80046b4:	1d1a      	adds	r2, r3, #4
 80046b6:	602a      	str	r2, [r5, #0]
 80046b8:	681d      	ldr	r5, [r3, #0]
 80046ba:	6862      	ldr	r2, [r4, #4]
 80046bc:	2100      	movs	r1, #0
 80046be:	4628      	mov	r0, r5
 80046c0:	f7fb fd86 	bl	80001d0 <memchr>
 80046c4:	b108      	cbz	r0, 80046ca <_printf_i+0x1f2>
 80046c6:	1b40      	subs	r0, r0, r5
 80046c8:	6060      	str	r0, [r4, #4]
 80046ca:	6863      	ldr	r3, [r4, #4]
 80046cc:	6123      	str	r3, [r4, #16]
 80046ce:	2300      	movs	r3, #0
 80046d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046d4:	e7a8      	b.n	8004628 <_printf_i+0x150>
 80046d6:	6923      	ldr	r3, [r4, #16]
 80046d8:	462a      	mov	r2, r5
 80046da:	4649      	mov	r1, r9
 80046dc:	4640      	mov	r0, r8
 80046de:	47d0      	blx	sl
 80046e0:	3001      	adds	r0, #1
 80046e2:	d0ab      	beq.n	800463c <_printf_i+0x164>
 80046e4:	6823      	ldr	r3, [r4, #0]
 80046e6:	079b      	lsls	r3, r3, #30
 80046e8:	d413      	bmi.n	8004712 <_printf_i+0x23a>
 80046ea:	68e0      	ldr	r0, [r4, #12]
 80046ec:	9b03      	ldr	r3, [sp, #12]
 80046ee:	4298      	cmp	r0, r3
 80046f0:	bfb8      	it	lt
 80046f2:	4618      	movlt	r0, r3
 80046f4:	e7a4      	b.n	8004640 <_printf_i+0x168>
 80046f6:	2301      	movs	r3, #1
 80046f8:	4632      	mov	r2, r6
 80046fa:	4649      	mov	r1, r9
 80046fc:	4640      	mov	r0, r8
 80046fe:	47d0      	blx	sl
 8004700:	3001      	adds	r0, #1
 8004702:	d09b      	beq.n	800463c <_printf_i+0x164>
 8004704:	3501      	adds	r5, #1
 8004706:	68e3      	ldr	r3, [r4, #12]
 8004708:	9903      	ldr	r1, [sp, #12]
 800470a:	1a5b      	subs	r3, r3, r1
 800470c:	42ab      	cmp	r3, r5
 800470e:	dcf2      	bgt.n	80046f6 <_printf_i+0x21e>
 8004710:	e7eb      	b.n	80046ea <_printf_i+0x212>
 8004712:	2500      	movs	r5, #0
 8004714:	f104 0619 	add.w	r6, r4, #25
 8004718:	e7f5      	b.n	8004706 <_printf_i+0x22e>
 800471a:	bf00      	nop
 800471c:	080061e5 	.word	0x080061e5
 8004720:	080061f6 	.word	0x080061f6

08004724 <_sbrk_r>:
 8004724:	b538      	push	{r3, r4, r5, lr}
 8004726:	4d06      	ldr	r5, [pc, #24]	; (8004740 <_sbrk_r+0x1c>)
 8004728:	2300      	movs	r3, #0
 800472a:	4604      	mov	r4, r0
 800472c:	4608      	mov	r0, r1
 800472e:	602b      	str	r3, [r5, #0]
 8004730:	f7fd fcfe 	bl	8002130 <_sbrk>
 8004734:	1c43      	adds	r3, r0, #1
 8004736:	d102      	bne.n	800473e <_sbrk_r+0x1a>
 8004738:	682b      	ldr	r3, [r5, #0]
 800473a:	b103      	cbz	r3, 800473e <_sbrk_r+0x1a>
 800473c:	6023      	str	r3, [r4, #0]
 800473e:	bd38      	pop	{r3, r4, r5, pc}
 8004740:	20001a84 	.word	0x20001a84

08004744 <__swbuf_r>:
 8004744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004746:	460e      	mov	r6, r1
 8004748:	4614      	mov	r4, r2
 800474a:	4605      	mov	r5, r0
 800474c:	b118      	cbz	r0, 8004756 <__swbuf_r+0x12>
 800474e:	6983      	ldr	r3, [r0, #24]
 8004750:	b90b      	cbnz	r3, 8004756 <__swbuf_r+0x12>
 8004752:	f000 f9d9 	bl	8004b08 <__sinit>
 8004756:	4b21      	ldr	r3, [pc, #132]	; (80047dc <__swbuf_r+0x98>)
 8004758:	429c      	cmp	r4, r3
 800475a:	d12b      	bne.n	80047b4 <__swbuf_r+0x70>
 800475c:	686c      	ldr	r4, [r5, #4]
 800475e:	69a3      	ldr	r3, [r4, #24]
 8004760:	60a3      	str	r3, [r4, #8]
 8004762:	89a3      	ldrh	r3, [r4, #12]
 8004764:	071a      	lsls	r2, r3, #28
 8004766:	d52f      	bpl.n	80047c8 <__swbuf_r+0x84>
 8004768:	6923      	ldr	r3, [r4, #16]
 800476a:	b36b      	cbz	r3, 80047c8 <__swbuf_r+0x84>
 800476c:	6923      	ldr	r3, [r4, #16]
 800476e:	6820      	ldr	r0, [r4, #0]
 8004770:	1ac0      	subs	r0, r0, r3
 8004772:	6963      	ldr	r3, [r4, #20]
 8004774:	b2f6      	uxtb	r6, r6
 8004776:	4283      	cmp	r3, r0
 8004778:	4637      	mov	r7, r6
 800477a:	dc04      	bgt.n	8004786 <__swbuf_r+0x42>
 800477c:	4621      	mov	r1, r4
 800477e:	4628      	mov	r0, r5
 8004780:	f000 f92e 	bl	80049e0 <_fflush_r>
 8004784:	bb30      	cbnz	r0, 80047d4 <__swbuf_r+0x90>
 8004786:	68a3      	ldr	r3, [r4, #8]
 8004788:	3b01      	subs	r3, #1
 800478a:	60a3      	str	r3, [r4, #8]
 800478c:	6823      	ldr	r3, [r4, #0]
 800478e:	1c5a      	adds	r2, r3, #1
 8004790:	6022      	str	r2, [r4, #0]
 8004792:	701e      	strb	r6, [r3, #0]
 8004794:	6963      	ldr	r3, [r4, #20]
 8004796:	3001      	adds	r0, #1
 8004798:	4283      	cmp	r3, r0
 800479a:	d004      	beq.n	80047a6 <__swbuf_r+0x62>
 800479c:	89a3      	ldrh	r3, [r4, #12]
 800479e:	07db      	lsls	r3, r3, #31
 80047a0:	d506      	bpl.n	80047b0 <__swbuf_r+0x6c>
 80047a2:	2e0a      	cmp	r6, #10
 80047a4:	d104      	bne.n	80047b0 <__swbuf_r+0x6c>
 80047a6:	4621      	mov	r1, r4
 80047a8:	4628      	mov	r0, r5
 80047aa:	f000 f919 	bl	80049e0 <_fflush_r>
 80047ae:	b988      	cbnz	r0, 80047d4 <__swbuf_r+0x90>
 80047b0:	4638      	mov	r0, r7
 80047b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047b4:	4b0a      	ldr	r3, [pc, #40]	; (80047e0 <__swbuf_r+0x9c>)
 80047b6:	429c      	cmp	r4, r3
 80047b8:	d101      	bne.n	80047be <__swbuf_r+0x7a>
 80047ba:	68ac      	ldr	r4, [r5, #8]
 80047bc:	e7cf      	b.n	800475e <__swbuf_r+0x1a>
 80047be:	4b09      	ldr	r3, [pc, #36]	; (80047e4 <__swbuf_r+0xa0>)
 80047c0:	429c      	cmp	r4, r3
 80047c2:	bf08      	it	eq
 80047c4:	68ec      	ldreq	r4, [r5, #12]
 80047c6:	e7ca      	b.n	800475e <__swbuf_r+0x1a>
 80047c8:	4621      	mov	r1, r4
 80047ca:	4628      	mov	r0, r5
 80047cc:	f000 f80c 	bl	80047e8 <__swsetup_r>
 80047d0:	2800      	cmp	r0, #0
 80047d2:	d0cb      	beq.n	800476c <__swbuf_r+0x28>
 80047d4:	f04f 37ff 	mov.w	r7, #4294967295
 80047d8:	e7ea      	b.n	80047b0 <__swbuf_r+0x6c>
 80047da:	bf00      	nop
 80047dc:	08006228 	.word	0x08006228
 80047e0:	08006248 	.word	0x08006248
 80047e4:	08006208 	.word	0x08006208

080047e8 <__swsetup_r>:
 80047e8:	4b32      	ldr	r3, [pc, #200]	; (80048b4 <__swsetup_r+0xcc>)
 80047ea:	b570      	push	{r4, r5, r6, lr}
 80047ec:	681d      	ldr	r5, [r3, #0]
 80047ee:	4606      	mov	r6, r0
 80047f0:	460c      	mov	r4, r1
 80047f2:	b125      	cbz	r5, 80047fe <__swsetup_r+0x16>
 80047f4:	69ab      	ldr	r3, [r5, #24]
 80047f6:	b913      	cbnz	r3, 80047fe <__swsetup_r+0x16>
 80047f8:	4628      	mov	r0, r5
 80047fa:	f000 f985 	bl	8004b08 <__sinit>
 80047fe:	4b2e      	ldr	r3, [pc, #184]	; (80048b8 <__swsetup_r+0xd0>)
 8004800:	429c      	cmp	r4, r3
 8004802:	d10f      	bne.n	8004824 <__swsetup_r+0x3c>
 8004804:	686c      	ldr	r4, [r5, #4]
 8004806:	89a3      	ldrh	r3, [r4, #12]
 8004808:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800480c:	0719      	lsls	r1, r3, #28
 800480e:	d42c      	bmi.n	800486a <__swsetup_r+0x82>
 8004810:	06dd      	lsls	r5, r3, #27
 8004812:	d411      	bmi.n	8004838 <__swsetup_r+0x50>
 8004814:	2309      	movs	r3, #9
 8004816:	6033      	str	r3, [r6, #0]
 8004818:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800481c:	81a3      	strh	r3, [r4, #12]
 800481e:	f04f 30ff 	mov.w	r0, #4294967295
 8004822:	e03e      	b.n	80048a2 <__swsetup_r+0xba>
 8004824:	4b25      	ldr	r3, [pc, #148]	; (80048bc <__swsetup_r+0xd4>)
 8004826:	429c      	cmp	r4, r3
 8004828:	d101      	bne.n	800482e <__swsetup_r+0x46>
 800482a:	68ac      	ldr	r4, [r5, #8]
 800482c:	e7eb      	b.n	8004806 <__swsetup_r+0x1e>
 800482e:	4b24      	ldr	r3, [pc, #144]	; (80048c0 <__swsetup_r+0xd8>)
 8004830:	429c      	cmp	r4, r3
 8004832:	bf08      	it	eq
 8004834:	68ec      	ldreq	r4, [r5, #12]
 8004836:	e7e6      	b.n	8004806 <__swsetup_r+0x1e>
 8004838:	0758      	lsls	r0, r3, #29
 800483a:	d512      	bpl.n	8004862 <__swsetup_r+0x7a>
 800483c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800483e:	b141      	cbz	r1, 8004852 <__swsetup_r+0x6a>
 8004840:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004844:	4299      	cmp	r1, r3
 8004846:	d002      	beq.n	800484e <__swsetup_r+0x66>
 8004848:	4630      	mov	r0, r6
 800484a:	f7ff fb9d 	bl	8003f88 <_free_r>
 800484e:	2300      	movs	r3, #0
 8004850:	6363      	str	r3, [r4, #52]	; 0x34
 8004852:	89a3      	ldrh	r3, [r4, #12]
 8004854:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004858:	81a3      	strh	r3, [r4, #12]
 800485a:	2300      	movs	r3, #0
 800485c:	6063      	str	r3, [r4, #4]
 800485e:	6923      	ldr	r3, [r4, #16]
 8004860:	6023      	str	r3, [r4, #0]
 8004862:	89a3      	ldrh	r3, [r4, #12]
 8004864:	f043 0308 	orr.w	r3, r3, #8
 8004868:	81a3      	strh	r3, [r4, #12]
 800486a:	6923      	ldr	r3, [r4, #16]
 800486c:	b94b      	cbnz	r3, 8004882 <__swsetup_r+0x9a>
 800486e:	89a3      	ldrh	r3, [r4, #12]
 8004870:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004878:	d003      	beq.n	8004882 <__swsetup_r+0x9a>
 800487a:	4621      	mov	r1, r4
 800487c:	4630      	mov	r0, r6
 800487e:	f000 fa09 	bl	8004c94 <__smakebuf_r>
 8004882:	89a0      	ldrh	r0, [r4, #12]
 8004884:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004888:	f010 0301 	ands.w	r3, r0, #1
 800488c:	d00a      	beq.n	80048a4 <__swsetup_r+0xbc>
 800488e:	2300      	movs	r3, #0
 8004890:	60a3      	str	r3, [r4, #8]
 8004892:	6963      	ldr	r3, [r4, #20]
 8004894:	425b      	negs	r3, r3
 8004896:	61a3      	str	r3, [r4, #24]
 8004898:	6923      	ldr	r3, [r4, #16]
 800489a:	b943      	cbnz	r3, 80048ae <__swsetup_r+0xc6>
 800489c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80048a0:	d1ba      	bne.n	8004818 <__swsetup_r+0x30>
 80048a2:	bd70      	pop	{r4, r5, r6, pc}
 80048a4:	0781      	lsls	r1, r0, #30
 80048a6:	bf58      	it	pl
 80048a8:	6963      	ldrpl	r3, [r4, #20]
 80048aa:	60a3      	str	r3, [r4, #8]
 80048ac:	e7f4      	b.n	8004898 <__swsetup_r+0xb0>
 80048ae:	2000      	movs	r0, #0
 80048b0:	e7f7      	b.n	80048a2 <__swsetup_r+0xba>
 80048b2:	bf00      	nop
 80048b4:	2000132c 	.word	0x2000132c
 80048b8:	08006228 	.word	0x08006228
 80048bc:	08006248 	.word	0x08006248
 80048c0:	08006208 	.word	0x08006208

080048c4 <abort>:
 80048c4:	b508      	push	{r3, lr}
 80048c6:	2006      	movs	r0, #6
 80048c8:	f000 fa58 	bl	8004d7c <raise>
 80048cc:	2001      	movs	r0, #1
 80048ce:	f7fd fbff 	bl	80020d0 <_exit>
	...

080048d4 <__sflush_r>:
 80048d4:	898a      	ldrh	r2, [r1, #12]
 80048d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048da:	4605      	mov	r5, r0
 80048dc:	0710      	lsls	r0, r2, #28
 80048de:	460c      	mov	r4, r1
 80048e0:	d458      	bmi.n	8004994 <__sflush_r+0xc0>
 80048e2:	684b      	ldr	r3, [r1, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	dc05      	bgt.n	80048f4 <__sflush_r+0x20>
 80048e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	dc02      	bgt.n	80048f4 <__sflush_r+0x20>
 80048ee:	2000      	movs	r0, #0
 80048f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048f6:	2e00      	cmp	r6, #0
 80048f8:	d0f9      	beq.n	80048ee <__sflush_r+0x1a>
 80048fa:	2300      	movs	r3, #0
 80048fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004900:	682f      	ldr	r7, [r5, #0]
 8004902:	602b      	str	r3, [r5, #0]
 8004904:	d032      	beq.n	800496c <__sflush_r+0x98>
 8004906:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004908:	89a3      	ldrh	r3, [r4, #12]
 800490a:	075a      	lsls	r2, r3, #29
 800490c:	d505      	bpl.n	800491a <__sflush_r+0x46>
 800490e:	6863      	ldr	r3, [r4, #4]
 8004910:	1ac0      	subs	r0, r0, r3
 8004912:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004914:	b10b      	cbz	r3, 800491a <__sflush_r+0x46>
 8004916:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004918:	1ac0      	subs	r0, r0, r3
 800491a:	2300      	movs	r3, #0
 800491c:	4602      	mov	r2, r0
 800491e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004920:	6a21      	ldr	r1, [r4, #32]
 8004922:	4628      	mov	r0, r5
 8004924:	47b0      	blx	r6
 8004926:	1c43      	adds	r3, r0, #1
 8004928:	89a3      	ldrh	r3, [r4, #12]
 800492a:	d106      	bne.n	800493a <__sflush_r+0x66>
 800492c:	6829      	ldr	r1, [r5, #0]
 800492e:	291d      	cmp	r1, #29
 8004930:	d82c      	bhi.n	800498c <__sflush_r+0xb8>
 8004932:	4a2a      	ldr	r2, [pc, #168]	; (80049dc <__sflush_r+0x108>)
 8004934:	40ca      	lsrs	r2, r1
 8004936:	07d6      	lsls	r6, r2, #31
 8004938:	d528      	bpl.n	800498c <__sflush_r+0xb8>
 800493a:	2200      	movs	r2, #0
 800493c:	6062      	str	r2, [r4, #4]
 800493e:	04d9      	lsls	r1, r3, #19
 8004940:	6922      	ldr	r2, [r4, #16]
 8004942:	6022      	str	r2, [r4, #0]
 8004944:	d504      	bpl.n	8004950 <__sflush_r+0x7c>
 8004946:	1c42      	adds	r2, r0, #1
 8004948:	d101      	bne.n	800494e <__sflush_r+0x7a>
 800494a:	682b      	ldr	r3, [r5, #0]
 800494c:	b903      	cbnz	r3, 8004950 <__sflush_r+0x7c>
 800494e:	6560      	str	r0, [r4, #84]	; 0x54
 8004950:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004952:	602f      	str	r7, [r5, #0]
 8004954:	2900      	cmp	r1, #0
 8004956:	d0ca      	beq.n	80048ee <__sflush_r+0x1a>
 8004958:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800495c:	4299      	cmp	r1, r3
 800495e:	d002      	beq.n	8004966 <__sflush_r+0x92>
 8004960:	4628      	mov	r0, r5
 8004962:	f7ff fb11 	bl	8003f88 <_free_r>
 8004966:	2000      	movs	r0, #0
 8004968:	6360      	str	r0, [r4, #52]	; 0x34
 800496a:	e7c1      	b.n	80048f0 <__sflush_r+0x1c>
 800496c:	6a21      	ldr	r1, [r4, #32]
 800496e:	2301      	movs	r3, #1
 8004970:	4628      	mov	r0, r5
 8004972:	47b0      	blx	r6
 8004974:	1c41      	adds	r1, r0, #1
 8004976:	d1c7      	bne.n	8004908 <__sflush_r+0x34>
 8004978:	682b      	ldr	r3, [r5, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0c4      	beq.n	8004908 <__sflush_r+0x34>
 800497e:	2b1d      	cmp	r3, #29
 8004980:	d001      	beq.n	8004986 <__sflush_r+0xb2>
 8004982:	2b16      	cmp	r3, #22
 8004984:	d101      	bne.n	800498a <__sflush_r+0xb6>
 8004986:	602f      	str	r7, [r5, #0]
 8004988:	e7b1      	b.n	80048ee <__sflush_r+0x1a>
 800498a:	89a3      	ldrh	r3, [r4, #12]
 800498c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004990:	81a3      	strh	r3, [r4, #12]
 8004992:	e7ad      	b.n	80048f0 <__sflush_r+0x1c>
 8004994:	690f      	ldr	r7, [r1, #16]
 8004996:	2f00      	cmp	r7, #0
 8004998:	d0a9      	beq.n	80048ee <__sflush_r+0x1a>
 800499a:	0793      	lsls	r3, r2, #30
 800499c:	680e      	ldr	r6, [r1, #0]
 800499e:	bf08      	it	eq
 80049a0:	694b      	ldreq	r3, [r1, #20]
 80049a2:	600f      	str	r7, [r1, #0]
 80049a4:	bf18      	it	ne
 80049a6:	2300      	movne	r3, #0
 80049a8:	eba6 0807 	sub.w	r8, r6, r7
 80049ac:	608b      	str	r3, [r1, #8]
 80049ae:	f1b8 0f00 	cmp.w	r8, #0
 80049b2:	dd9c      	ble.n	80048ee <__sflush_r+0x1a>
 80049b4:	6a21      	ldr	r1, [r4, #32]
 80049b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80049b8:	4643      	mov	r3, r8
 80049ba:	463a      	mov	r2, r7
 80049bc:	4628      	mov	r0, r5
 80049be:	47b0      	blx	r6
 80049c0:	2800      	cmp	r0, #0
 80049c2:	dc06      	bgt.n	80049d2 <__sflush_r+0xfe>
 80049c4:	89a3      	ldrh	r3, [r4, #12]
 80049c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049ca:	81a3      	strh	r3, [r4, #12]
 80049cc:	f04f 30ff 	mov.w	r0, #4294967295
 80049d0:	e78e      	b.n	80048f0 <__sflush_r+0x1c>
 80049d2:	4407      	add	r7, r0
 80049d4:	eba8 0800 	sub.w	r8, r8, r0
 80049d8:	e7e9      	b.n	80049ae <__sflush_r+0xda>
 80049da:	bf00      	nop
 80049dc:	20400001 	.word	0x20400001

080049e0 <_fflush_r>:
 80049e0:	b538      	push	{r3, r4, r5, lr}
 80049e2:	690b      	ldr	r3, [r1, #16]
 80049e4:	4605      	mov	r5, r0
 80049e6:	460c      	mov	r4, r1
 80049e8:	b913      	cbnz	r3, 80049f0 <_fflush_r+0x10>
 80049ea:	2500      	movs	r5, #0
 80049ec:	4628      	mov	r0, r5
 80049ee:	bd38      	pop	{r3, r4, r5, pc}
 80049f0:	b118      	cbz	r0, 80049fa <_fflush_r+0x1a>
 80049f2:	6983      	ldr	r3, [r0, #24]
 80049f4:	b90b      	cbnz	r3, 80049fa <_fflush_r+0x1a>
 80049f6:	f000 f887 	bl	8004b08 <__sinit>
 80049fa:	4b14      	ldr	r3, [pc, #80]	; (8004a4c <_fflush_r+0x6c>)
 80049fc:	429c      	cmp	r4, r3
 80049fe:	d11b      	bne.n	8004a38 <_fflush_r+0x58>
 8004a00:	686c      	ldr	r4, [r5, #4]
 8004a02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d0ef      	beq.n	80049ea <_fflush_r+0xa>
 8004a0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a0c:	07d0      	lsls	r0, r2, #31
 8004a0e:	d404      	bmi.n	8004a1a <_fflush_r+0x3a>
 8004a10:	0599      	lsls	r1, r3, #22
 8004a12:	d402      	bmi.n	8004a1a <_fflush_r+0x3a>
 8004a14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a16:	f000 f915 	bl	8004c44 <__retarget_lock_acquire_recursive>
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	4621      	mov	r1, r4
 8004a1e:	f7ff ff59 	bl	80048d4 <__sflush_r>
 8004a22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a24:	07da      	lsls	r2, r3, #31
 8004a26:	4605      	mov	r5, r0
 8004a28:	d4e0      	bmi.n	80049ec <_fflush_r+0xc>
 8004a2a:	89a3      	ldrh	r3, [r4, #12]
 8004a2c:	059b      	lsls	r3, r3, #22
 8004a2e:	d4dd      	bmi.n	80049ec <_fflush_r+0xc>
 8004a30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a32:	f000 f908 	bl	8004c46 <__retarget_lock_release_recursive>
 8004a36:	e7d9      	b.n	80049ec <_fflush_r+0xc>
 8004a38:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <_fflush_r+0x70>)
 8004a3a:	429c      	cmp	r4, r3
 8004a3c:	d101      	bne.n	8004a42 <_fflush_r+0x62>
 8004a3e:	68ac      	ldr	r4, [r5, #8]
 8004a40:	e7df      	b.n	8004a02 <_fflush_r+0x22>
 8004a42:	4b04      	ldr	r3, [pc, #16]	; (8004a54 <_fflush_r+0x74>)
 8004a44:	429c      	cmp	r4, r3
 8004a46:	bf08      	it	eq
 8004a48:	68ec      	ldreq	r4, [r5, #12]
 8004a4a:	e7da      	b.n	8004a02 <_fflush_r+0x22>
 8004a4c:	08006228 	.word	0x08006228
 8004a50:	08006248 	.word	0x08006248
 8004a54:	08006208 	.word	0x08006208

08004a58 <std>:
 8004a58:	2300      	movs	r3, #0
 8004a5a:	b510      	push	{r4, lr}
 8004a5c:	4604      	mov	r4, r0
 8004a5e:	e9c0 3300 	strd	r3, r3, [r0]
 8004a62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a66:	6083      	str	r3, [r0, #8]
 8004a68:	8181      	strh	r1, [r0, #12]
 8004a6a:	6643      	str	r3, [r0, #100]	; 0x64
 8004a6c:	81c2      	strh	r2, [r0, #14]
 8004a6e:	6183      	str	r3, [r0, #24]
 8004a70:	4619      	mov	r1, r3
 8004a72:	2208      	movs	r2, #8
 8004a74:	305c      	adds	r0, #92	; 0x5c
 8004a76:	f7ff fa7f 	bl	8003f78 <memset>
 8004a7a:	4b05      	ldr	r3, [pc, #20]	; (8004a90 <std+0x38>)
 8004a7c:	6263      	str	r3, [r4, #36]	; 0x24
 8004a7e:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <std+0x3c>)
 8004a80:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a82:	4b05      	ldr	r3, [pc, #20]	; (8004a98 <std+0x40>)
 8004a84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a86:	4b05      	ldr	r3, [pc, #20]	; (8004a9c <std+0x44>)
 8004a88:	6224      	str	r4, [r4, #32]
 8004a8a:	6323      	str	r3, [r4, #48]	; 0x30
 8004a8c:	bd10      	pop	{r4, pc}
 8004a8e:	bf00      	nop
 8004a90:	08004db5 	.word	0x08004db5
 8004a94:	08004dd7 	.word	0x08004dd7
 8004a98:	08004e0f 	.word	0x08004e0f
 8004a9c:	08004e33 	.word	0x08004e33

08004aa0 <_cleanup_r>:
 8004aa0:	4901      	ldr	r1, [pc, #4]	; (8004aa8 <_cleanup_r+0x8>)
 8004aa2:	f000 b8af 	b.w	8004c04 <_fwalk_reent>
 8004aa6:	bf00      	nop
 8004aa8:	080049e1 	.word	0x080049e1

08004aac <__sfmoreglue>:
 8004aac:	b570      	push	{r4, r5, r6, lr}
 8004aae:	2268      	movs	r2, #104	; 0x68
 8004ab0:	1e4d      	subs	r5, r1, #1
 8004ab2:	4355      	muls	r5, r2
 8004ab4:	460e      	mov	r6, r1
 8004ab6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004aba:	f7ff fad1 	bl	8004060 <_malloc_r>
 8004abe:	4604      	mov	r4, r0
 8004ac0:	b140      	cbz	r0, 8004ad4 <__sfmoreglue+0x28>
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	e9c0 1600 	strd	r1, r6, [r0]
 8004ac8:	300c      	adds	r0, #12
 8004aca:	60a0      	str	r0, [r4, #8]
 8004acc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004ad0:	f7ff fa52 	bl	8003f78 <memset>
 8004ad4:	4620      	mov	r0, r4
 8004ad6:	bd70      	pop	{r4, r5, r6, pc}

08004ad8 <__sfp_lock_acquire>:
 8004ad8:	4801      	ldr	r0, [pc, #4]	; (8004ae0 <__sfp_lock_acquire+0x8>)
 8004ada:	f000 b8b3 	b.w	8004c44 <__retarget_lock_acquire_recursive>
 8004ade:	bf00      	nop
 8004ae0:	20001a81 	.word	0x20001a81

08004ae4 <__sfp_lock_release>:
 8004ae4:	4801      	ldr	r0, [pc, #4]	; (8004aec <__sfp_lock_release+0x8>)
 8004ae6:	f000 b8ae 	b.w	8004c46 <__retarget_lock_release_recursive>
 8004aea:	bf00      	nop
 8004aec:	20001a81 	.word	0x20001a81

08004af0 <__sinit_lock_acquire>:
 8004af0:	4801      	ldr	r0, [pc, #4]	; (8004af8 <__sinit_lock_acquire+0x8>)
 8004af2:	f000 b8a7 	b.w	8004c44 <__retarget_lock_acquire_recursive>
 8004af6:	bf00      	nop
 8004af8:	20001a82 	.word	0x20001a82

08004afc <__sinit_lock_release>:
 8004afc:	4801      	ldr	r0, [pc, #4]	; (8004b04 <__sinit_lock_release+0x8>)
 8004afe:	f000 b8a2 	b.w	8004c46 <__retarget_lock_release_recursive>
 8004b02:	bf00      	nop
 8004b04:	20001a82 	.word	0x20001a82

08004b08 <__sinit>:
 8004b08:	b510      	push	{r4, lr}
 8004b0a:	4604      	mov	r4, r0
 8004b0c:	f7ff fff0 	bl	8004af0 <__sinit_lock_acquire>
 8004b10:	69a3      	ldr	r3, [r4, #24]
 8004b12:	b11b      	cbz	r3, 8004b1c <__sinit+0x14>
 8004b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b18:	f7ff bff0 	b.w	8004afc <__sinit_lock_release>
 8004b1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004b20:	6523      	str	r3, [r4, #80]	; 0x50
 8004b22:	4b13      	ldr	r3, [pc, #76]	; (8004b70 <__sinit+0x68>)
 8004b24:	4a13      	ldr	r2, [pc, #76]	; (8004b74 <__sinit+0x6c>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	62a2      	str	r2, [r4, #40]	; 0x28
 8004b2a:	42a3      	cmp	r3, r4
 8004b2c:	bf04      	itt	eq
 8004b2e:	2301      	moveq	r3, #1
 8004b30:	61a3      	streq	r3, [r4, #24]
 8004b32:	4620      	mov	r0, r4
 8004b34:	f000 f820 	bl	8004b78 <__sfp>
 8004b38:	6060      	str	r0, [r4, #4]
 8004b3a:	4620      	mov	r0, r4
 8004b3c:	f000 f81c 	bl	8004b78 <__sfp>
 8004b40:	60a0      	str	r0, [r4, #8]
 8004b42:	4620      	mov	r0, r4
 8004b44:	f000 f818 	bl	8004b78 <__sfp>
 8004b48:	2200      	movs	r2, #0
 8004b4a:	60e0      	str	r0, [r4, #12]
 8004b4c:	2104      	movs	r1, #4
 8004b4e:	6860      	ldr	r0, [r4, #4]
 8004b50:	f7ff ff82 	bl	8004a58 <std>
 8004b54:	68a0      	ldr	r0, [r4, #8]
 8004b56:	2201      	movs	r2, #1
 8004b58:	2109      	movs	r1, #9
 8004b5a:	f7ff ff7d 	bl	8004a58 <std>
 8004b5e:	68e0      	ldr	r0, [r4, #12]
 8004b60:	2202      	movs	r2, #2
 8004b62:	2112      	movs	r1, #18
 8004b64:	f7ff ff78 	bl	8004a58 <std>
 8004b68:	2301      	movs	r3, #1
 8004b6a:	61a3      	str	r3, [r4, #24]
 8004b6c:	e7d2      	b.n	8004b14 <__sinit+0xc>
 8004b6e:	bf00      	nop
 8004b70:	080061d0 	.word	0x080061d0
 8004b74:	08004aa1 	.word	0x08004aa1

08004b78 <__sfp>:
 8004b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b7a:	4607      	mov	r7, r0
 8004b7c:	f7ff ffac 	bl	8004ad8 <__sfp_lock_acquire>
 8004b80:	4b1e      	ldr	r3, [pc, #120]	; (8004bfc <__sfp+0x84>)
 8004b82:	681e      	ldr	r6, [r3, #0]
 8004b84:	69b3      	ldr	r3, [r6, #24]
 8004b86:	b913      	cbnz	r3, 8004b8e <__sfp+0x16>
 8004b88:	4630      	mov	r0, r6
 8004b8a:	f7ff ffbd 	bl	8004b08 <__sinit>
 8004b8e:	3648      	adds	r6, #72	; 0x48
 8004b90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b94:	3b01      	subs	r3, #1
 8004b96:	d503      	bpl.n	8004ba0 <__sfp+0x28>
 8004b98:	6833      	ldr	r3, [r6, #0]
 8004b9a:	b30b      	cbz	r3, 8004be0 <__sfp+0x68>
 8004b9c:	6836      	ldr	r6, [r6, #0]
 8004b9e:	e7f7      	b.n	8004b90 <__sfp+0x18>
 8004ba0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004ba4:	b9d5      	cbnz	r5, 8004bdc <__sfp+0x64>
 8004ba6:	4b16      	ldr	r3, [pc, #88]	; (8004c00 <__sfp+0x88>)
 8004ba8:	60e3      	str	r3, [r4, #12]
 8004baa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004bae:	6665      	str	r5, [r4, #100]	; 0x64
 8004bb0:	f000 f847 	bl	8004c42 <__retarget_lock_init_recursive>
 8004bb4:	f7ff ff96 	bl	8004ae4 <__sfp_lock_release>
 8004bb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004bbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004bc0:	6025      	str	r5, [r4, #0]
 8004bc2:	61a5      	str	r5, [r4, #24]
 8004bc4:	2208      	movs	r2, #8
 8004bc6:	4629      	mov	r1, r5
 8004bc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004bcc:	f7ff f9d4 	bl	8003f78 <memset>
 8004bd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004bd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004bd8:	4620      	mov	r0, r4
 8004bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bdc:	3468      	adds	r4, #104	; 0x68
 8004bde:	e7d9      	b.n	8004b94 <__sfp+0x1c>
 8004be0:	2104      	movs	r1, #4
 8004be2:	4638      	mov	r0, r7
 8004be4:	f7ff ff62 	bl	8004aac <__sfmoreglue>
 8004be8:	4604      	mov	r4, r0
 8004bea:	6030      	str	r0, [r6, #0]
 8004bec:	2800      	cmp	r0, #0
 8004bee:	d1d5      	bne.n	8004b9c <__sfp+0x24>
 8004bf0:	f7ff ff78 	bl	8004ae4 <__sfp_lock_release>
 8004bf4:	230c      	movs	r3, #12
 8004bf6:	603b      	str	r3, [r7, #0]
 8004bf8:	e7ee      	b.n	8004bd8 <__sfp+0x60>
 8004bfa:	bf00      	nop
 8004bfc:	080061d0 	.word	0x080061d0
 8004c00:	ffff0001 	.word	0xffff0001

08004c04 <_fwalk_reent>:
 8004c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c08:	4606      	mov	r6, r0
 8004c0a:	4688      	mov	r8, r1
 8004c0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004c10:	2700      	movs	r7, #0
 8004c12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c16:	f1b9 0901 	subs.w	r9, r9, #1
 8004c1a:	d505      	bpl.n	8004c28 <_fwalk_reent+0x24>
 8004c1c:	6824      	ldr	r4, [r4, #0]
 8004c1e:	2c00      	cmp	r4, #0
 8004c20:	d1f7      	bne.n	8004c12 <_fwalk_reent+0xe>
 8004c22:	4638      	mov	r0, r7
 8004c24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c28:	89ab      	ldrh	r3, [r5, #12]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d907      	bls.n	8004c3e <_fwalk_reent+0x3a>
 8004c2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c32:	3301      	adds	r3, #1
 8004c34:	d003      	beq.n	8004c3e <_fwalk_reent+0x3a>
 8004c36:	4629      	mov	r1, r5
 8004c38:	4630      	mov	r0, r6
 8004c3a:	47c0      	blx	r8
 8004c3c:	4307      	orrs	r7, r0
 8004c3e:	3568      	adds	r5, #104	; 0x68
 8004c40:	e7e9      	b.n	8004c16 <_fwalk_reent+0x12>

08004c42 <__retarget_lock_init_recursive>:
 8004c42:	4770      	bx	lr

08004c44 <__retarget_lock_acquire_recursive>:
 8004c44:	4770      	bx	lr

08004c46 <__retarget_lock_release_recursive>:
 8004c46:	4770      	bx	lr

08004c48 <__swhatbuf_r>:
 8004c48:	b570      	push	{r4, r5, r6, lr}
 8004c4a:	460e      	mov	r6, r1
 8004c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c50:	2900      	cmp	r1, #0
 8004c52:	b096      	sub	sp, #88	; 0x58
 8004c54:	4614      	mov	r4, r2
 8004c56:	461d      	mov	r5, r3
 8004c58:	da08      	bge.n	8004c6c <__swhatbuf_r+0x24>
 8004c5a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	602a      	str	r2, [r5, #0]
 8004c62:	061a      	lsls	r2, r3, #24
 8004c64:	d410      	bmi.n	8004c88 <__swhatbuf_r+0x40>
 8004c66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c6a:	e00e      	b.n	8004c8a <__swhatbuf_r+0x42>
 8004c6c:	466a      	mov	r2, sp
 8004c6e:	f000 f907 	bl	8004e80 <_fstat_r>
 8004c72:	2800      	cmp	r0, #0
 8004c74:	dbf1      	blt.n	8004c5a <__swhatbuf_r+0x12>
 8004c76:	9a01      	ldr	r2, [sp, #4]
 8004c78:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c7c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c80:	425a      	negs	r2, r3
 8004c82:	415a      	adcs	r2, r3
 8004c84:	602a      	str	r2, [r5, #0]
 8004c86:	e7ee      	b.n	8004c66 <__swhatbuf_r+0x1e>
 8004c88:	2340      	movs	r3, #64	; 0x40
 8004c8a:	2000      	movs	r0, #0
 8004c8c:	6023      	str	r3, [r4, #0]
 8004c8e:	b016      	add	sp, #88	; 0x58
 8004c90:	bd70      	pop	{r4, r5, r6, pc}
	...

08004c94 <__smakebuf_r>:
 8004c94:	898b      	ldrh	r3, [r1, #12]
 8004c96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c98:	079d      	lsls	r5, r3, #30
 8004c9a:	4606      	mov	r6, r0
 8004c9c:	460c      	mov	r4, r1
 8004c9e:	d507      	bpl.n	8004cb0 <__smakebuf_r+0x1c>
 8004ca0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ca4:	6023      	str	r3, [r4, #0]
 8004ca6:	6123      	str	r3, [r4, #16]
 8004ca8:	2301      	movs	r3, #1
 8004caa:	6163      	str	r3, [r4, #20]
 8004cac:	b002      	add	sp, #8
 8004cae:	bd70      	pop	{r4, r5, r6, pc}
 8004cb0:	ab01      	add	r3, sp, #4
 8004cb2:	466a      	mov	r2, sp
 8004cb4:	f7ff ffc8 	bl	8004c48 <__swhatbuf_r>
 8004cb8:	9900      	ldr	r1, [sp, #0]
 8004cba:	4605      	mov	r5, r0
 8004cbc:	4630      	mov	r0, r6
 8004cbe:	f7ff f9cf 	bl	8004060 <_malloc_r>
 8004cc2:	b948      	cbnz	r0, 8004cd8 <__smakebuf_r+0x44>
 8004cc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cc8:	059a      	lsls	r2, r3, #22
 8004cca:	d4ef      	bmi.n	8004cac <__smakebuf_r+0x18>
 8004ccc:	f023 0303 	bic.w	r3, r3, #3
 8004cd0:	f043 0302 	orr.w	r3, r3, #2
 8004cd4:	81a3      	strh	r3, [r4, #12]
 8004cd6:	e7e3      	b.n	8004ca0 <__smakebuf_r+0xc>
 8004cd8:	4b0d      	ldr	r3, [pc, #52]	; (8004d10 <__smakebuf_r+0x7c>)
 8004cda:	62b3      	str	r3, [r6, #40]	; 0x28
 8004cdc:	89a3      	ldrh	r3, [r4, #12]
 8004cde:	6020      	str	r0, [r4, #0]
 8004ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ce4:	81a3      	strh	r3, [r4, #12]
 8004ce6:	9b00      	ldr	r3, [sp, #0]
 8004ce8:	6163      	str	r3, [r4, #20]
 8004cea:	9b01      	ldr	r3, [sp, #4]
 8004cec:	6120      	str	r0, [r4, #16]
 8004cee:	b15b      	cbz	r3, 8004d08 <__smakebuf_r+0x74>
 8004cf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cf4:	4630      	mov	r0, r6
 8004cf6:	f000 f8d5 	bl	8004ea4 <_isatty_r>
 8004cfa:	b128      	cbz	r0, 8004d08 <__smakebuf_r+0x74>
 8004cfc:	89a3      	ldrh	r3, [r4, #12]
 8004cfe:	f023 0303 	bic.w	r3, r3, #3
 8004d02:	f043 0301 	orr.w	r3, r3, #1
 8004d06:	81a3      	strh	r3, [r4, #12]
 8004d08:	89a0      	ldrh	r0, [r4, #12]
 8004d0a:	4305      	orrs	r5, r0
 8004d0c:	81a5      	strh	r5, [r4, #12]
 8004d0e:	e7cd      	b.n	8004cac <__smakebuf_r+0x18>
 8004d10:	08004aa1 	.word	0x08004aa1

08004d14 <__malloc_lock>:
 8004d14:	4801      	ldr	r0, [pc, #4]	; (8004d1c <__malloc_lock+0x8>)
 8004d16:	f7ff bf95 	b.w	8004c44 <__retarget_lock_acquire_recursive>
 8004d1a:	bf00      	nop
 8004d1c:	20001a80 	.word	0x20001a80

08004d20 <__malloc_unlock>:
 8004d20:	4801      	ldr	r0, [pc, #4]	; (8004d28 <__malloc_unlock+0x8>)
 8004d22:	f7ff bf90 	b.w	8004c46 <__retarget_lock_release_recursive>
 8004d26:	bf00      	nop
 8004d28:	20001a80 	.word	0x20001a80

08004d2c <_raise_r>:
 8004d2c:	291f      	cmp	r1, #31
 8004d2e:	b538      	push	{r3, r4, r5, lr}
 8004d30:	4604      	mov	r4, r0
 8004d32:	460d      	mov	r5, r1
 8004d34:	d904      	bls.n	8004d40 <_raise_r+0x14>
 8004d36:	2316      	movs	r3, #22
 8004d38:	6003      	str	r3, [r0, #0]
 8004d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d3e:	bd38      	pop	{r3, r4, r5, pc}
 8004d40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004d42:	b112      	cbz	r2, 8004d4a <_raise_r+0x1e>
 8004d44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004d48:	b94b      	cbnz	r3, 8004d5e <_raise_r+0x32>
 8004d4a:	4620      	mov	r0, r4
 8004d4c:	f000 f830 	bl	8004db0 <_getpid_r>
 8004d50:	462a      	mov	r2, r5
 8004d52:	4601      	mov	r1, r0
 8004d54:	4620      	mov	r0, r4
 8004d56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d5a:	f000 b817 	b.w	8004d8c <_kill_r>
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d00a      	beq.n	8004d78 <_raise_r+0x4c>
 8004d62:	1c59      	adds	r1, r3, #1
 8004d64:	d103      	bne.n	8004d6e <_raise_r+0x42>
 8004d66:	2316      	movs	r3, #22
 8004d68:	6003      	str	r3, [r0, #0]
 8004d6a:	2001      	movs	r0, #1
 8004d6c:	e7e7      	b.n	8004d3e <_raise_r+0x12>
 8004d6e:	2400      	movs	r4, #0
 8004d70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004d74:	4628      	mov	r0, r5
 8004d76:	4798      	blx	r3
 8004d78:	2000      	movs	r0, #0
 8004d7a:	e7e0      	b.n	8004d3e <_raise_r+0x12>

08004d7c <raise>:
 8004d7c:	4b02      	ldr	r3, [pc, #8]	; (8004d88 <raise+0xc>)
 8004d7e:	4601      	mov	r1, r0
 8004d80:	6818      	ldr	r0, [r3, #0]
 8004d82:	f7ff bfd3 	b.w	8004d2c <_raise_r>
 8004d86:	bf00      	nop
 8004d88:	2000132c 	.word	0x2000132c

08004d8c <_kill_r>:
 8004d8c:	b538      	push	{r3, r4, r5, lr}
 8004d8e:	4d07      	ldr	r5, [pc, #28]	; (8004dac <_kill_r+0x20>)
 8004d90:	2300      	movs	r3, #0
 8004d92:	4604      	mov	r4, r0
 8004d94:	4608      	mov	r0, r1
 8004d96:	4611      	mov	r1, r2
 8004d98:	602b      	str	r3, [r5, #0]
 8004d9a:	f7fd f991 	bl	80020c0 <_kill>
 8004d9e:	1c43      	adds	r3, r0, #1
 8004da0:	d102      	bne.n	8004da8 <_kill_r+0x1c>
 8004da2:	682b      	ldr	r3, [r5, #0]
 8004da4:	b103      	cbz	r3, 8004da8 <_kill_r+0x1c>
 8004da6:	6023      	str	r3, [r4, #0]
 8004da8:	bd38      	pop	{r3, r4, r5, pc}
 8004daa:	bf00      	nop
 8004dac:	20001a84 	.word	0x20001a84

08004db0 <_getpid_r>:
 8004db0:	f7fd b984 	b.w	80020bc <_getpid>

08004db4 <__sread>:
 8004db4:	b510      	push	{r4, lr}
 8004db6:	460c      	mov	r4, r1
 8004db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dbc:	f000 f894 	bl	8004ee8 <_read_r>
 8004dc0:	2800      	cmp	r0, #0
 8004dc2:	bfab      	itete	ge
 8004dc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004dc6:	89a3      	ldrhlt	r3, [r4, #12]
 8004dc8:	181b      	addge	r3, r3, r0
 8004dca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004dce:	bfac      	ite	ge
 8004dd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004dd2:	81a3      	strhlt	r3, [r4, #12]
 8004dd4:	bd10      	pop	{r4, pc}

08004dd6 <__swrite>:
 8004dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dda:	461f      	mov	r7, r3
 8004ddc:	898b      	ldrh	r3, [r1, #12]
 8004dde:	05db      	lsls	r3, r3, #23
 8004de0:	4605      	mov	r5, r0
 8004de2:	460c      	mov	r4, r1
 8004de4:	4616      	mov	r6, r2
 8004de6:	d505      	bpl.n	8004df4 <__swrite+0x1e>
 8004de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dec:	2302      	movs	r3, #2
 8004dee:	2200      	movs	r2, #0
 8004df0:	f000 f868 	bl	8004ec4 <_lseek_r>
 8004df4:	89a3      	ldrh	r3, [r4, #12]
 8004df6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dfe:	81a3      	strh	r3, [r4, #12]
 8004e00:	4632      	mov	r2, r6
 8004e02:	463b      	mov	r3, r7
 8004e04:	4628      	mov	r0, r5
 8004e06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e0a:	f000 b817 	b.w	8004e3c <_write_r>

08004e0e <__sseek>:
 8004e0e:	b510      	push	{r4, lr}
 8004e10:	460c      	mov	r4, r1
 8004e12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e16:	f000 f855 	bl	8004ec4 <_lseek_r>
 8004e1a:	1c43      	adds	r3, r0, #1
 8004e1c:	89a3      	ldrh	r3, [r4, #12]
 8004e1e:	bf15      	itete	ne
 8004e20:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e2a:	81a3      	strheq	r3, [r4, #12]
 8004e2c:	bf18      	it	ne
 8004e2e:	81a3      	strhne	r3, [r4, #12]
 8004e30:	bd10      	pop	{r4, pc}

08004e32 <__sclose>:
 8004e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e36:	f000 b813 	b.w	8004e60 <_close_r>
	...

08004e3c <_write_r>:
 8004e3c:	b538      	push	{r3, r4, r5, lr}
 8004e3e:	4d07      	ldr	r5, [pc, #28]	; (8004e5c <_write_r+0x20>)
 8004e40:	4604      	mov	r4, r0
 8004e42:	4608      	mov	r0, r1
 8004e44:	4611      	mov	r1, r2
 8004e46:	2200      	movs	r2, #0
 8004e48:	602a      	str	r2, [r5, #0]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	f7fd f956 	bl	80020fc <_write>
 8004e50:	1c43      	adds	r3, r0, #1
 8004e52:	d102      	bne.n	8004e5a <_write_r+0x1e>
 8004e54:	682b      	ldr	r3, [r5, #0]
 8004e56:	b103      	cbz	r3, 8004e5a <_write_r+0x1e>
 8004e58:	6023      	str	r3, [r4, #0]
 8004e5a:	bd38      	pop	{r3, r4, r5, pc}
 8004e5c:	20001a84 	.word	0x20001a84

08004e60 <_close_r>:
 8004e60:	b538      	push	{r3, r4, r5, lr}
 8004e62:	4d06      	ldr	r5, [pc, #24]	; (8004e7c <_close_r+0x1c>)
 8004e64:	2300      	movs	r3, #0
 8004e66:	4604      	mov	r4, r0
 8004e68:	4608      	mov	r0, r1
 8004e6a:	602b      	str	r3, [r5, #0]
 8004e6c:	f7fd f954 	bl	8002118 <_close>
 8004e70:	1c43      	adds	r3, r0, #1
 8004e72:	d102      	bne.n	8004e7a <_close_r+0x1a>
 8004e74:	682b      	ldr	r3, [r5, #0]
 8004e76:	b103      	cbz	r3, 8004e7a <_close_r+0x1a>
 8004e78:	6023      	str	r3, [r4, #0]
 8004e7a:	bd38      	pop	{r3, r4, r5, pc}
 8004e7c:	20001a84 	.word	0x20001a84

08004e80 <_fstat_r>:
 8004e80:	b538      	push	{r3, r4, r5, lr}
 8004e82:	4d07      	ldr	r5, [pc, #28]	; (8004ea0 <_fstat_r+0x20>)
 8004e84:	2300      	movs	r3, #0
 8004e86:	4604      	mov	r4, r0
 8004e88:	4608      	mov	r0, r1
 8004e8a:	4611      	mov	r1, r2
 8004e8c:	602b      	str	r3, [r5, #0]
 8004e8e:	f7fd f946 	bl	800211e <_fstat>
 8004e92:	1c43      	adds	r3, r0, #1
 8004e94:	d102      	bne.n	8004e9c <_fstat_r+0x1c>
 8004e96:	682b      	ldr	r3, [r5, #0]
 8004e98:	b103      	cbz	r3, 8004e9c <_fstat_r+0x1c>
 8004e9a:	6023      	str	r3, [r4, #0]
 8004e9c:	bd38      	pop	{r3, r4, r5, pc}
 8004e9e:	bf00      	nop
 8004ea0:	20001a84 	.word	0x20001a84

08004ea4 <_isatty_r>:
 8004ea4:	b538      	push	{r3, r4, r5, lr}
 8004ea6:	4d06      	ldr	r5, [pc, #24]	; (8004ec0 <_isatty_r+0x1c>)
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	4604      	mov	r4, r0
 8004eac:	4608      	mov	r0, r1
 8004eae:	602b      	str	r3, [r5, #0]
 8004eb0:	f7fd f93a 	bl	8002128 <_isatty>
 8004eb4:	1c43      	adds	r3, r0, #1
 8004eb6:	d102      	bne.n	8004ebe <_isatty_r+0x1a>
 8004eb8:	682b      	ldr	r3, [r5, #0]
 8004eba:	b103      	cbz	r3, 8004ebe <_isatty_r+0x1a>
 8004ebc:	6023      	str	r3, [r4, #0]
 8004ebe:	bd38      	pop	{r3, r4, r5, pc}
 8004ec0:	20001a84 	.word	0x20001a84

08004ec4 <_lseek_r>:
 8004ec4:	b538      	push	{r3, r4, r5, lr}
 8004ec6:	4d07      	ldr	r5, [pc, #28]	; (8004ee4 <_lseek_r+0x20>)
 8004ec8:	4604      	mov	r4, r0
 8004eca:	4608      	mov	r0, r1
 8004ecc:	4611      	mov	r1, r2
 8004ece:	2200      	movs	r2, #0
 8004ed0:	602a      	str	r2, [r5, #0]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	f7fd f92a 	bl	800212c <_lseek>
 8004ed8:	1c43      	adds	r3, r0, #1
 8004eda:	d102      	bne.n	8004ee2 <_lseek_r+0x1e>
 8004edc:	682b      	ldr	r3, [r5, #0]
 8004ede:	b103      	cbz	r3, 8004ee2 <_lseek_r+0x1e>
 8004ee0:	6023      	str	r3, [r4, #0]
 8004ee2:	bd38      	pop	{r3, r4, r5, pc}
 8004ee4:	20001a84 	.word	0x20001a84

08004ee8 <_read_r>:
 8004ee8:	b538      	push	{r3, r4, r5, lr}
 8004eea:	4d07      	ldr	r5, [pc, #28]	; (8004f08 <_read_r+0x20>)
 8004eec:	4604      	mov	r4, r0
 8004eee:	4608      	mov	r0, r1
 8004ef0:	4611      	mov	r1, r2
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	602a      	str	r2, [r5, #0]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	f7fd f8f0 	bl	80020dc <_read>
 8004efc:	1c43      	adds	r3, r0, #1
 8004efe:	d102      	bne.n	8004f06 <_read_r+0x1e>
 8004f00:	682b      	ldr	r3, [r5, #0]
 8004f02:	b103      	cbz	r3, 8004f06 <_read_r+0x1e>
 8004f04:	6023      	str	r3, [r4, #0]
 8004f06:	bd38      	pop	{r3, r4, r5, pc}
 8004f08:	20001a84 	.word	0x20001a84
 8004f0c:	00000000 	.word	0x00000000

08004f10 <cos>:
 8004f10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004f12:	ec53 2b10 	vmov	r2, r3, d0
 8004f16:	4826      	ldr	r0, [pc, #152]	; (8004fb0 <cos+0xa0>)
 8004f18:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004f1c:	4281      	cmp	r1, r0
 8004f1e:	dc06      	bgt.n	8004f2e <cos+0x1e>
 8004f20:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8004fa8 <cos+0x98>
 8004f24:	b005      	add	sp, #20
 8004f26:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f2a:	f000 bacd 	b.w	80054c8 <__kernel_cos>
 8004f2e:	4821      	ldr	r0, [pc, #132]	; (8004fb4 <cos+0xa4>)
 8004f30:	4281      	cmp	r1, r0
 8004f32:	dd09      	ble.n	8004f48 <cos+0x38>
 8004f34:	ee10 0a10 	vmov	r0, s0
 8004f38:	4619      	mov	r1, r3
 8004f3a:	f7fb f99d 	bl	8000278 <__aeabi_dsub>
 8004f3e:	ec41 0b10 	vmov	d0, r0, r1
 8004f42:	b005      	add	sp, #20
 8004f44:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f48:	4668      	mov	r0, sp
 8004f4a:	f000 f8ad 	bl	80050a8 <__ieee754_rem_pio2>
 8004f4e:	f000 0003 	and.w	r0, r0, #3
 8004f52:	2801      	cmp	r0, #1
 8004f54:	d00b      	beq.n	8004f6e <cos+0x5e>
 8004f56:	2802      	cmp	r0, #2
 8004f58:	d016      	beq.n	8004f88 <cos+0x78>
 8004f5a:	b9e0      	cbnz	r0, 8004f96 <cos+0x86>
 8004f5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004f60:	ed9d 0b00 	vldr	d0, [sp]
 8004f64:	f000 fab0 	bl	80054c8 <__kernel_cos>
 8004f68:	ec51 0b10 	vmov	r0, r1, d0
 8004f6c:	e7e7      	b.n	8004f3e <cos+0x2e>
 8004f6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004f72:	ed9d 0b00 	vldr	d0, [sp]
 8004f76:	f000 febf 	bl	8005cf8 <__kernel_sin>
 8004f7a:	ec53 2b10 	vmov	r2, r3, d0
 8004f7e:	ee10 0a10 	vmov	r0, s0
 8004f82:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004f86:	e7da      	b.n	8004f3e <cos+0x2e>
 8004f88:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004f8c:	ed9d 0b00 	vldr	d0, [sp]
 8004f90:	f000 fa9a 	bl	80054c8 <__kernel_cos>
 8004f94:	e7f1      	b.n	8004f7a <cos+0x6a>
 8004f96:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004f9a:	ed9d 0b00 	vldr	d0, [sp]
 8004f9e:	2001      	movs	r0, #1
 8004fa0:	f000 feaa 	bl	8005cf8 <__kernel_sin>
 8004fa4:	e7e0      	b.n	8004f68 <cos+0x58>
 8004fa6:	bf00      	nop
	...
 8004fb0:	3fe921fb 	.word	0x3fe921fb
 8004fb4:	7fefffff 	.word	0x7fefffff

08004fb8 <sin>:
 8004fb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004fba:	ec53 2b10 	vmov	r2, r3, d0
 8004fbe:	4828      	ldr	r0, [pc, #160]	; (8005060 <sin+0xa8>)
 8004fc0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004fc4:	4281      	cmp	r1, r0
 8004fc6:	dc07      	bgt.n	8004fd8 <sin+0x20>
 8004fc8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8005058 <sin+0xa0>
 8004fcc:	2000      	movs	r0, #0
 8004fce:	b005      	add	sp, #20
 8004fd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fd4:	f000 be90 	b.w	8005cf8 <__kernel_sin>
 8004fd8:	4822      	ldr	r0, [pc, #136]	; (8005064 <sin+0xac>)
 8004fda:	4281      	cmp	r1, r0
 8004fdc:	dd09      	ble.n	8004ff2 <sin+0x3a>
 8004fde:	ee10 0a10 	vmov	r0, s0
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	f7fb f948 	bl	8000278 <__aeabi_dsub>
 8004fe8:	ec41 0b10 	vmov	d0, r0, r1
 8004fec:	b005      	add	sp, #20
 8004fee:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ff2:	4668      	mov	r0, sp
 8004ff4:	f000 f858 	bl	80050a8 <__ieee754_rem_pio2>
 8004ff8:	f000 0003 	and.w	r0, r0, #3
 8004ffc:	2801      	cmp	r0, #1
 8004ffe:	d00c      	beq.n	800501a <sin+0x62>
 8005000:	2802      	cmp	r0, #2
 8005002:	d011      	beq.n	8005028 <sin+0x70>
 8005004:	b9f0      	cbnz	r0, 8005044 <sin+0x8c>
 8005006:	ed9d 1b02 	vldr	d1, [sp, #8]
 800500a:	ed9d 0b00 	vldr	d0, [sp]
 800500e:	2001      	movs	r0, #1
 8005010:	f000 fe72 	bl	8005cf8 <__kernel_sin>
 8005014:	ec51 0b10 	vmov	r0, r1, d0
 8005018:	e7e6      	b.n	8004fe8 <sin+0x30>
 800501a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800501e:	ed9d 0b00 	vldr	d0, [sp]
 8005022:	f000 fa51 	bl	80054c8 <__kernel_cos>
 8005026:	e7f5      	b.n	8005014 <sin+0x5c>
 8005028:	ed9d 1b02 	vldr	d1, [sp, #8]
 800502c:	ed9d 0b00 	vldr	d0, [sp]
 8005030:	2001      	movs	r0, #1
 8005032:	f000 fe61 	bl	8005cf8 <__kernel_sin>
 8005036:	ec53 2b10 	vmov	r2, r3, d0
 800503a:	ee10 0a10 	vmov	r0, s0
 800503e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005042:	e7d1      	b.n	8004fe8 <sin+0x30>
 8005044:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005048:	ed9d 0b00 	vldr	d0, [sp]
 800504c:	f000 fa3c 	bl	80054c8 <__kernel_cos>
 8005050:	e7f1      	b.n	8005036 <sin+0x7e>
 8005052:	bf00      	nop
 8005054:	f3af 8000 	nop.w
	...
 8005060:	3fe921fb 	.word	0x3fe921fb
 8005064:	7fefffff 	.word	0x7fefffff

08005068 <sqrtf>:
 8005068:	b508      	push	{r3, lr}
 800506a:	ed2d 8b02 	vpush	{d8}
 800506e:	eeb0 8a40 	vmov.f32	s16, s0
 8005072:	f000 fa25 	bl	80054c0 <__ieee754_sqrtf>
 8005076:	eeb4 8a48 	vcmp.f32	s16, s16
 800507a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800507e:	d60c      	bvs.n	800509a <sqrtf+0x32>
 8005080:	eddf 8a07 	vldr	s17, [pc, #28]	; 80050a0 <sqrtf+0x38>
 8005084:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800508c:	d505      	bpl.n	800509a <sqrtf+0x32>
 800508e:	f7fe ff27 	bl	8003ee0 <__errno>
 8005092:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8005096:	2321      	movs	r3, #33	; 0x21
 8005098:	6003      	str	r3, [r0, #0]
 800509a:	ecbd 8b02 	vpop	{d8}
 800509e:	bd08      	pop	{r3, pc}
	...

080050a8 <__ieee754_rem_pio2>:
 80050a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ac:	ed2d 8b02 	vpush	{d8}
 80050b0:	ec55 4b10 	vmov	r4, r5, d0
 80050b4:	4bca      	ldr	r3, [pc, #808]	; (80053e0 <__ieee754_rem_pio2+0x338>)
 80050b6:	b08b      	sub	sp, #44	; 0x2c
 80050b8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80050bc:	4598      	cmp	r8, r3
 80050be:	4682      	mov	sl, r0
 80050c0:	9502      	str	r5, [sp, #8]
 80050c2:	dc08      	bgt.n	80050d6 <__ieee754_rem_pio2+0x2e>
 80050c4:	2200      	movs	r2, #0
 80050c6:	2300      	movs	r3, #0
 80050c8:	ed80 0b00 	vstr	d0, [r0]
 80050cc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80050d0:	f04f 0b00 	mov.w	fp, #0
 80050d4:	e028      	b.n	8005128 <__ieee754_rem_pio2+0x80>
 80050d6:	4bc3      	ldr	r3, [pc, #780]	; (80053e4 <__ieee754_rem_pio2+0x33c>)
 80050d8:	4598      	cmp	r8, r3
 80050da:	dc78      	bgt.n	80051ce <__ieee754_rem_pio2+0x126>
 80050dc:	9b02      	ldr	r3, [sp, #8]
 80050de:	4ec2      	ldr	r6, [pc, #776]	; (80053e8 <__ieee754_rem_pio2+0x340>)
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	ee10 0a10 	vmov	r0, s0
 80050e6:	a3b0      	add	r3, pc, #704	; (adr r3, 80053a8 <__ieee754_rem_pio2+0x300>)
 80050e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ec:	4629      	mov	r1, r5
 80050ee:	dd39      	ble.n	8005164 <__ieee754_rem_pio2+0xbc>
 80050f0:	f7fb f8c2 	bl	8000278 <__aeabi_dsub>
 80050f4:	45b0      	cmp	r8, r6
 80050f6:	4604      	mov	r4, r0
 80050f8:	460d      	mov	r5, r1
 80050fa:	d01b      	beq.n	8005134 <__ieee754_rem_pio2+0x8c>
 80050fc:	a3ac      	add	r3, pc, #688	; (adr r3, 80053b0 <__ieee754_rem_pio2+0x308>)
 80050fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005102:	f7fb f8b9 	bl	8000278 <__aeabi_dsub>
 8005106:	4602      	mov	r2, r0
 8005108:	460b      	mov	r3, r1
 800510a:	e9ca 2300 	strd	r2, r3, [sl]
 800510e:	4620      	mov	r0, r4
 8005110:	4629      	mov	r1, r5
 8005112:	f7fb f8b1 	bl	8000278 <__aeabi_dsub>
 8005116:	a3a6      	add	r3, pc, #664	; (adr r3, 80053b0 <__ieee754_rem_pio2+0x308>)
 8005118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511c:	f7fb f8ac 	bl	8000278 <__aeabi_dsub>
 8005120:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005124:	f04f 0b01 	mov.w	fp, #1
 8005128:	4658      	mov	r0, fp
 800512a:	b00b      	add	sp, #44	; 0x2c
 800512c:	ecbd 8b02 	vpop	{d8}
 8005130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005134:	a3a0      	add	r3, pc, #640	; (adr r3, 80053b8 <__ieee754_rem_pio2+0x310>)
 8005136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513a:	f7fb f89d 	bl	8000278 <__aeabi_dsub>
 800513e:	a3a0      	add	r3, pc, #640	; (adr r3, 80053c0 <__ieee754_rem_pio2+0x318>)
 8005140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005144:	4604      	mov	r4, r0
 8005146:	460d      	mov	r5, r1
 8005148:	f7fb f896 	bl	8000278 <__aeabi_dsub>
 800514c:	4602      	mov	r2, r0
 800514e:	460b      	mov	r3, r1
 8005150:	e9ca 2300 	strd	r2, r3, [sl]
 8005154:	4620      	mov	r0, r4
 8005156:	4629      	mov	r1, r5
 8005158:	f7fb f88e 	bl	8000278 <__aeabi_dsub>
 800515c:	a398      	add	r3, pc, #608	; (adr r3, 80053c0 <__ieee754_rem_pio2+0x318>)
 800515e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005162:	e7db      	b.n	800511c <__ieee754_rem_pio2+0x74>
 8005164:	f7fb f88a 	bl	800027c <__adddf3>
 8005168:	45b0      	cmp	r8, r6
 800516a:	4604      	mov	r4, r0
 800516c:	460d      	mov	r5, r1
 800516e:	d016      	beq.n	800519e <__ieee754_rem_pio2+0xf6>
 8005170:	a38f      	add	r3, pc, #572	; (adr r3, 80053b0 <__ieee754_rem_pio2+0x308>)
 8005172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005176:	f7fb f881 	bl	800027c <__adddf3>
 800517a:	4602      	mov	r2, r0
 800517c:	460b      	mov	r3, r1
 800517e:	e9ca 2300 	strd	r2, r3, [sl]
 8005182:	4620      	mov	r0, r4
 8005184:	4629      	mov	r1, r5
 8005186:	f7fb f877 	bl	8000278 <__aeabi_dsub>
 800518a:	a389      	add	r3, pc, #548	; (adr r3, 80053b0 <__ieee754_rem_pio2+0x308>)
 800518c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005190:	f7fb f874 	bl	800027c <__adddf3>
 8005194:	f04f 3bff 	mov.w	fp, #4294967295
 8005198:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800519c:	e7c4      	b.n	8005128 <__ieee754_rem_pio2+0x80>
 800519e:	a386      	add	r3, pc, #536	; (adr r3, 80053b8 <__ieee754_rem_pio2+0x310>)
 80051a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a4:	f7fb f86a 	bl	800027c <__adddf3>
 80051a8:	a385      	add	r3, pc, #532	; (adr r3, 80053c0 <__ieee754_rem_pio2+0x318>)
 80051aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ae:	4604      	mov	r4, r0
 80051b0:	460d      	mov	r5, r1
 80051b2:	f7fb f863 	bl	800027c <__adddf3>
 80051b6:	4602      	mov	r2, r0
 80051b8:	460b      	mov	r3, r1
 80051ba:	e9ca 2300 	strd	r2, r3, [sl]
 80051be:	4620      	mov	r0, r4
 80051c0:	4629      	mov	r1, r5
 80051c2:	f7fb f859 	bl	8000278 <__aeabi_dsub>
 80051c6:	a37e      	add	r3, pc, #504	; (adr r3, 80053c0 <__ieee754_rem_pio2+0x318>)
 80051c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051cc:	e7e0      	b.n	8005190 <__ieee754_rem_pio2+0xe8>
 80051ce:	4b87      	ldr	r3, [pc, #540]	; (80053ec <__ieee754_rem_pio2+0x344>)
 80051d0:	4598      	cmp	r8, r3
 80051d2:	f300 80d9 	bgt.w	8005388 <__ieee754_rem_pio2+0x2e0>
 80051d6:	f000 fe4d 	bl	8005e74 <fabs>
 80051da:	ec55 4b10 	vmov	r4, r5, d0
 80051de:	ee10 0a10 	vmov	r0, s0
 80051e2:	a379      	add	r3, pc, #484	; (adr r3, 80053c8 <__ieee754_rem_pio2+0x320>)
 80051e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e8:	4629      	mov	r1, r5
 80051ea:	f7fb f9fd 	bl	80005e8 <__aeabi_dmul>
 80051ee:	4b80      	ldr	r3, [pc, #512]	; (80053f0 <__ieee754_rem_pio2+0x348>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	f7fb f843 	bl	800027c <__adddf3>
 80051f6:	f7fb fc91 	bl	8000b1c <__aeabi_d2iz>
 80051fa:	4683      	mov	fp, r0
 80051fc:	f7fb f98a 	bl	8000514 <__aeabi_i2d>
 8005200:	4602      	mov	r2, r0
 8005202:	460b      	mov	r3, r1
 8005204:	ec43 2b18 	vmov	d8, r2, r3
 8005208:	a367      	add	r3, pc, #412	; (adr r3, 80053a8 <__ieee754_rem_pio2+0x300>)
 800520a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520e:	f7fb f9eb 	bl	80005e8 <__aeabi_dmul>
 8005212:	4602      	mov	r2, r0
 8005214:	460b      	mov	r3, r1
 8005216:	4620      	mov	r0, r4
 8005218:	4629      	mov	r1, r5
 800521a:	f7fb f82d 	bl	8000278 <__aeabi_dsub>
 800521e:	a364      	add	r3, pc, #400	; (adr r3, 80053b0 <__ieee754_rem_pio2+0x308>)
 8005220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005224:	4606      	mov	r6, r0
 8005226:	460f      	mov	r7, r1
 8005228:	ec51 0b18 	vmov	r0, r1, d8
 800522c:	f7fb f9dc 	bl	80005e8 <__aeabi_dmul>
 8005230:	f1bb 0f1f 	cmp.w	fp, #31
 8005234:	4604      	mov	r4, r0
 8005236:	460d      	mov	r5, r1
 8005238:	dc0d      	bgt.n	8005256 <__ieee754_rem_pio2+0x1ae>
 800523a:	4b6e      	ldr	r3, [pc, #440]	; (80053f4 <__ieee754_rem_pio2+0x34c>)
 800523c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005244:	4543      	cmp	r3, r8
 8005246:	d006      	beq.n	8005256 <__ieee754_rem_pio2+0x1ae>
 8005248:	4622      	mov	r2, r4
 800524a:	462b      	mov	r3, r5
 800524c:	4630      	mov	r0, r6
 800524e:	4639      	mov	r1, r7
 8005250:	f7fb f812 	bl	8000278 <__aeabi_dsub>
 8005254:	e00f      	b.n	8005276 <__ieee754_rem_pio2+0x1ce>
 8005256:	462b      	mov	r3, r5
 8005258:	4622      	mov	r2, r4
 800525a:	4630      	mov	r0, r6
 800525c:	4639      	mov	r1, r7
 800525e:	f7fb f80b 	bl	8000278 <__aeabi_dsub>
 8005262:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005266:	9303      	str	r3, [sp, #12]
 8005268:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800526c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8005270:	f1b8 0f10 	cmp.w	r8, #16
 8005274:	dc02      	bgt.n	800527c <__ieee754_rem_pio2+0x1d4>
 8005276:	e9ca 0100 	strd	r0, r1, [sl]
 800527a:	e039      	b.n	80052f0 <__ieee754_rem_pio2+0x248>
 800527c:	a34e      	add	r3, pc, #312	; (adr r3, 80053b8 <__ieee754_rem_pio2+0x310>)
 800527e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005282:	ec51 0b18 	vmov	r0, r1, d8
 8005286:	f7fb f9af 	bl	80005e8 <__aeabi_dmul>
 800528a:	4604      	mov	r4, r0
 800528c:	460d      	mov	r5, r1
 800528e:	4602      	mov	r2, r0
 8005290:	460b      	mov	r3, r1
 8005292:	4630      	mov	r0, r6
 8005294:	4639      	mov	r1, r7
 8005296:	f7fa ffef 	bl	8000278 <__aeabi_dsub>
 800529a:	4602      	mov	r2, r0
 800529c:	460b      	mov	r3, r1
 800529e:	4680      	mov	r8, r0
 80052a0:	4689      	mov	r9, r1
 80052a2:	4630      	mov	r0, r6
 80052a4:	4639      	mov	r1, r7
 80052a6:	f7fa ffe7 	bl	8000278 <__aeabi_dsub>
 80052aa:	4622      	mov	r2, r4
 80052ac:	462b      	mov	r3, r5
 80052ae:	f7fa ffe3 	bl	8000278 <__aeabi_dsub>
 80052b2:	a343      	add	r3, pc, #268	; (adr r3, 80053c0 <__ieee754_rem_pio2+0x318>)
 80052b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b8:	4604      	mov	r4, r0
 80052ba:	460d      	mov	r5, r1
 80052bc:	ec51 0b18 	vmov	r0, r1, d8
 80052c0:	f7fb f992 	bl	80005e8 <__aeabi_dmul>
 80052c4:	4622      	mov	r2, r4
 80052c6:	462b      	mov	r3, r5
 80052c8:	f7fa ffd6 	bl	8000278 <__aeabi_dsub>
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	4604      	mov	r4, r0
 80052d2:	460d      	mov	r5, r1
 80052d4:	4640      	mov	r0, r8
 80052d6:	4649      	mov	r1, r9
 80052d8:	f7fa ffce 	bl	8000278 <__aeabi_dsub>
 80052dc:	9a03      	ldr	r2, [sp, #12]
 80052de:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	2b31      	cmp	r3, #49	; 0x31
 80052e6:	dc24      	bgt.n	8005332 <__ieee754_rem_pio2+0x28a>
 80052e8:	e9ca 0100 	strd	r0, r1, [sl]
 80052ec:	4646      	mov	r6, r8
 80052ee:	464f      	mov	r7, r9
 80052f0:	e9da 8900 	ldrd	r8, r9, [sl]
 80052f4:	4630      	mov	r0, r6
 80052f6:	4642      	mov	r2, r8
 80052f8:	464b      	mov	r3, r9
 80052fa:	4639      	mov	r1, r7
 80052fc:	f7fa ffbc 	bl	8000278 <__aeabi_dsub>
 8005300:	462b      	mov	r3, r5
 8005302:	4622      	mov	r2, r4
 8005304:	f7fa ffb8 	bl	8000278 <__aeabi_dsub>
 8005308:	9b02      	ldr	r3, [sp, #8]
 800530a:	2b00      	cmp	r3, #0
 800530c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005310:	f6bf af0a 	bge.w	8005128 <__ieee754_rem_pio2+0x80>
 8005314:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005318:	f8ca 3004 	str.w	r3, [sl, #4]
 800531c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005320:	f8ca 8000 	str.w	r8, [sl]
 8005324:	f8ca 0008 	str.w	r0, [sl, #8]
 8005328:	f8ca 300c 	str.w	r3, [sl, #12]
 800532c:	f1cb 0b00 	rsb	fp, fp, #0
 8005330:	e6fa      	b.n	8005128 <__ieee754_rem_pio2+0x80>
 8005332:	a327      	add	r3, pc, #156	; (adr r3, 80053d0 <__ieee754_rem_pio2+0x328>)
 8005334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005338:	ec51 0b18 	vmov	r0, r1, d8
 800533c:	f7fb f954 	bl	80005e8 <__aeabi_dmul>
 8005340:	4604      	mov	r4, r0
 8005342:	460d      	mov	r5, r1
 8005344:	4602      	mov	r2, r0
 8005346:	460b      	mov	r3, r1
 8005348:	4640      	mov	r0, r8
 800534a:	4649      	mov	r1, r9
 800534c:	f7fa ff94 	bl	8000278 <__aeabi_dsub>
 8005350:	4602      	mov	r2, r0
 8005352:	460b      	mov	r3, r1
 8005354:	4606      	mov	r6, r0
 8005356:	460f      	mov	r7, r1
 8005358:	4640      	mov	r0, r8
 800535a:	4649      	mov	r1, r9
 800535c:	f7fa ff8c 	bl	8000278 <__aeabi_dsub>
 8005360:	4622      	mov	r2, r4
 8005362:	462b      	mov	r3, r5
 8005364:	f7fa ff88 	bl	8000278 <__aeabi_dsub>
 8005368:	a31b      	add	r3, pc, #108	; (adr r3, 80053d8 <__ieee754_rem_pio2+0x330>)
 800536a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536e:	4604      	mov	r4, r0
 8005370:	460d      	mov	r5, r1
 8005372:	ec51 0b18 	vmov	r0, r1, d8
 8005376:	f7fb f937 	bl	80005e8 <__aeabi_dmul>
 800537a:	4622      	mov	r2, r4
 800537c:	462b      	mov	r3, r5
 800537e:	f7fa ff7b 	bl	8000278 <__aeabi_dsub>
 8005382:	4604      	mov	r4, r0
 8005384:	460d      	mov	r5, r1
 8005386:	e75f      	b.n	8005248 <__ieee754_rem_pio2+0x1a0>
 8005388:	4b1b      	ldr	r3, [pc, #108]	; (80053f8 <__ieee754_rem_pio2+0x350>)
 800538a:	4598      	cmp	r8, r3
 800538c:	dd36      	ble.n	80053fc <__ieee754_rem_pio2+0x354>
 800538e:	ee10 2a10 	vmov	r2, s0
 8005392:	462b      	mov	r3, r5
 8005394:	4620      	mov	r0, r4
 8005396:	4629      	mov	r1, r5
 8005398:	f7fa ff6e 	bl	8000278 <__aeabi_dsub>
 800539c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80053a0:	e9ca 0100 	strd	r0, r1, [sl]
 80053a4:	e694      	b.n	80050d0 <__ieee754_rem_pio2+0x28>
 80053a6:	bf00      	nop
 80053a8:	54400000 	.word	0x54400000
 80053ac:	3ff921fb 	.word	0x3ff921fb
 80053b0:	1a626331 	.word	0x1a626331
 80053b4:	3dd0b461 	.word	0x3dd0b461
 80053b8:	1a600000 	.word	0x1a600000
 80053bc:	3dd0b461 	.word	0x3dd0b461
 80053c0:	2e037073 	.word	0x2e037073
 80053c4:	3ba3198a 	.word	0x3ba3198a
 80053c8:	6dc9c883 	.word	0x6dc9c883
 80053cc:	3fe45f30 	.word	0x3fe45f30
 80053d0:	2e000000 	.word	0x2e000000
 80053d4:	3ba3198a 	.word	0x3ba3198a
 80053d8:	252049c1 	.word	0x252049c1
 80053dc:	397b839a 	.word	0x397b839a
 80053e0:	3fe921fb 	.word	0x3fe921fb
 80053e4:	4002d97b 	.word	0x4002d97b
 80053e8:	3ff921fb 	.word	0x3ff921fb
 80053ec:	413921fb 	.word	0x413921fb
 80053f0:	3fe00000 	.word	0x3fe00000
 80053f4:	08006268 	.word	0x08006268
 80053f8:	7fefffff 	.word	0x7fefffff
 80053fc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8005400:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8005404:	ee10 0a10 	vmov	r0, s0
 8005408:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800540c:	ee10 6a10 	vmov	r6, s0
 8005410:	460f      	mov	r7, r1
 8005412:	f7fb fb83 	bl	8000b1c <__aeabi_d2iz>
 8005416:	f7fb f87d 	bl	8000514 <__aeabi_i2d>
 800541a:	4602      	mov	r2, r0
 800541c:	460b      	mov	r3, r1
 800541e:	4630      	mov	r0, r6
 8005420:	4639      	mov	r1, r7
 8005422:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005426:	f7fa ff27 	bl	8000278 <__aeabi_dsub>
 800542a:	4b23      	ldr	r3, [pc, #140]	; (80054b8 <__ieee754_rem_pio2+0x410>)
 800542c:	2200      	movs	r2, #0
 800542e:	f7fb f8db 	bl	80005e8 <__aeabi_dmul>
 8005432:	460f      	mov	r7, r1
 8005434:	4606      	mov	r6, r0
 8005436:	f7fb fb71 	bl	8000b1c <__aeabi_d2iz>
 800543a:	f7fb f86b 	bl	8000514 <__aeabi_i2d>
 800543e:	4602      	mov	r2, r0
 8005440:	460b      	mov	r3, r1
 8005442:	4630      	mov	r0, r6
 8005444:	4639      	mov	r1, r7
 8005446:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800544a:	f7fa ff15 	bl	8000278 <__aeabi_dsub>
 800544e:	4b1a      	ldr	r3, [pc, #104]	; (80054b8 <__ieee754_rem_pio2+0x410>)
 8005450:	2200      	movs	r2, #0
 8005452:	f7fb f8c9 	bl	80005e8 <__aeabi_dmul>
 8005456:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800545a:	ad04      	add	r5, sp, #16
 800545c:	f04f 0803 	mov.w	r8, #3
 8005460:	46a9      	mov	r9, r5
 8005462:	2600      	movs	r6, #0
 8005464:	2700      	movs	r7, #0
 8005466:	4632      	mov	r2, r6
 8005468:	463b      	mov	r3, r7
 800546a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800546e:	46c3      	mov	fp, r8
 8005470:	3d08      	subs	r5, #8
 8005472:	f108 38ff 	add.w	r8, r8, #4294967295
 8005476:	f7fb fb1f 	bl	8000ab8 <__aeabi_dcmpeq>
 800547a:	2800      	cmp	r0, #0
 800547c:	d1f3      	bne.n	8005466 <__ieee754_rem_pio2+0x3be>
 800547e:	4b0f      	ldr	r3, [pc, #60]	; (80054bc <__ieee754_rem_pio2+0x414>)
 8005480:	9301      	str	r3, [sp, #4]
 8005482:	2302      	movs	r3, #2
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	4622      	mov	r2, r4
 8005488:	465b      	mov	r3, fp
 800548a:	4651      	mov	r1, sl
 800548c:	4648      	mov	r0, r9
 800548e:	f000 f8e3 	bl	8005658 <__kernel_rem_pio2>
 8005492:	9b02      	ldr	r3, [sp, #8]
 8005494:	2b00      	cmp	r3, #0
 8005496:	4683      	mov	fp, r0
 8005498:	f6bf ae46 	bge.w	8005128 <__ieee754_rem_pio2+0x80>
 800549c:	e9da 2100 	ldrd	r2, r1, [sl]
 80054a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80054a4:	e9ca 2300 	strd	r2, r3, [sl]
 80054a8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80054ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80054b0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80054b4:	e73a      	b.n	800532c <__ieee754_rem_pio2+0x284>
 80054b6:	bf00      	nop
 80054b8:	41700000 	.word	0x41700000
 80054bc:	080062e8 	.word	0x080062e8

080054c0 <__ieee754_sqrtf>:
 80054c0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80054c4:	4770      	bx	lr
	...

080054c8 <__kernel_cos>:
 80054c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054cc:	ec57 6b10 	vmov	r6, r7, d0
 80054d0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80054d4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80054d8:	ed8d 1b00 	vstr	d1, [sp]
 80054dc:	da07      	bge.n	80054ee <__kernel_cos+0x26>
 80054de:	ee10 0a10 	vmov	r0, s0
 80054e2:	4639      	mov	r1, r7
 80054e4:	f7fb fb1a 	bl	8000b1c <__aeabi_d2iz>
 80054e8:	2800      	cmp	r0, #0
 80054ea:	f000 8088 	beq.w	80055fe <__kernel_cos+0x136>
 80054ee:	4632      	mov	r2, r6
 80054f0:	463b      	mov	r3, r7
 80054f2:	4630      	mov	r0, r6
 80054f4:	4639      	mov	r1, r7
 80054f6:	f7fb f877 	bl	80005e8 <__aeabi_dmul>
 80054fa:	4b51      	ldr	r3, [pc, #324]	; (8005640 <__kernel_cos+0x178>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	4604      	mov	r4, r0
 8005500:	460d      	mov	r5, r1
 8005502:	f7fb f871 	bl	80005e8 <__aeabi_dmul>
 8005506:	a340      	add	r3, pc, #256	; (adr r3, 8005608 <__kernel_cos+0x140>)
 8005508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550c:	4682      	mov	sl, r0
 800550e:	468b      	mov	fp, r1
 8005510:	4620      	mov	r0, r4
 8005512:	4629      	mov	r1, r5
 8005514:	f7fb f868 	bl	80005e8 <__aeabi_dmul>
 8005518:	a33d      	add	r3, pc, #244	; (adr r3, 8005610 <__kernel_cos+0x148>)
 800551a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551e:	f7fa fead 	bl	800027c <__adddf3>
 8005522:	4622      	mov	r2, r4
 8005524:	462b      	mov	r3, r5
 8005526:	f7fb f85f 	bl	80005e8 <__aeabi_dmul>
 800552a:	a33b      	add	r3, pc, #236	; (adr r3, 8005618 <__kernel_cos+0x150>)
 800552c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005530:	f7fa fea2 	bl	8000278 <__aeabi_dsub>
 8005534:	4622      	mov	r2, r4
 8005536:	462b      	mov	r3, r5
 8005538:	f7fb f856 	bl	80005e8 <__aeabi_dmul>
 800553c:	a338      	add	r3, pc, #224	; (adr r3, 8005620 <__kernel_cos+0x158>)
 800553e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005542:	f7fa fe9b 	bl	800027c <__adddf3>
 8005546:	4622      	mov	r2, r4
 8005548:	462b      	mov	r3, r5
 800554a:	f7fb f84d 	bl	80005e8 <__aeabi_dmul>
 800554e:	a336      	add	r3, pc, #216	; (adr r3, 8005628 <__kernel_cos+0x160>)
 8005550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005554:	f7fa fe90 	bl	8000278 <__aeabi_dsub>
 8005558:	4622      	mov	r2, r4
 800555a:	462b      	mov	r3, r5
 800555c:	f7fb f844 	bl	80005e8 <__aeabi_dmul>
 8005560:	a333      	add	r3, pc, #204	; (adr r3, 8005630 <__kernel_cos+0x168>)
 8005562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005566:	f7fa fe89 	bl	800027c <__adddf3>
 800556a:	4622      	mov	r2, r4
 800556c:	462b      	mov	r3, r5
 800556e:	f7fb f83b 	bl	80005e8 <__aeabi_dmul>
 8005572:	4622      	mov	r2, r4
 8005574:	462b      	mov	r3, r5
 8005576:	f7fb f837 	bl	80005e8 <__aeabi_dmul>
 800557a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800557e:	4604      	mov	r4, r0
 8005580:	460d      	mov	r5, r1
 8005582:	4630      	mov	r0, r6
 8005584:	4639      	mov	r1, r7
 8005586:	f7fb f82f 	bl	80005e8 <__aeabi_dmul>
 800558a:	460b      	mov	r3, r1
 800558c:	4602      	mov	r2, r0
 800558e:	4629      	mov	r1, r5
 8005590:	4620      	mov	r0, r4
 8005592:	f7fa fe71 	bl	8000278 <__aeabi_dsub>
 8005596:	4b2b      	ldr	r3, [pc, #172]	; (8005644 <__kernel_cos+0x17c>)
 8005598:	4598      	cmp	r8, r3
 800559a:	4606      	mov	r6, r0
 800559c:	460f      	mov	r7, r1
 800559e:	dc10      	bgt.n	80055c2 <__kernel_cos+0xfa>
 80055a0:	4602      	mov	r2, r0
 80055a2:	460b      	mov	r3, r1
 80055a4:	4650      	mov	r0, sl
 80055a6:	4659      	mov	r1, fp
 80055a8:	f7fa fe66 	bl	8000278 <__aeabi_dsub>
 80055ac:	460b      	mov	r3, r1
 80055ae:	4926      	ldr	r1, [pc, #152]	; (8005648 <__kernel_cos+0x180>)
 80055b0:	4602      	mov	r2, r0
 80055b2:	2000      	movs	r0, #0
 80055b4:	f7fa fe60 	bl	8000278 <__aeabi_dsub>
 80055b8:	ec41 0b10 	vmov	d0, r0, r1
 80055bc:	b003      	add	sp, #12
 80055be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055c2:	4b22      	ldr	r3, [pc, #136]	; (800564c <__kernel_cos+0x184>)
 80055c4:	4920      	ldr	r1, [pc, #128]	; (8005648 <__kernel_cos+0x180>)
 80055c6:	4598      	cmp	r8, r3
 80055c8:	bfcc      	ite	gt
 80055ca:	4d21      	ldrgt	r5, [pc, #132]	; (8005650 <__kernel_cos+0x188>)
 80055cc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80055d0:	2400      	movs	r4, #0
 80055d2:	4622      	mov	r2, r4
 80055d4:	462b      	mov	r3, r5
 80055d6:	2000      	movs	r0, #0
 80055d8:	f7fa fe4e 	bl	8000278 <__aeabi_dsub>
 80055dc:	4622      	mov	r2, r4
 80055de:	4680      	mov	r8, r0
 80055e0:	4689      	mov	r9, r1
 80055e2:	462b      	mov	r3, r5
 80055e4:	4650      	mov	r0, sl
 80055e6:	4659      	mov	r1, fp
 80055e8:	f7fa fe46 	bl	8000278 <__aeabi_dsub>
 80055ec:	4632      	mov	r2, r6
 80055ee:	463b      	mov	r3, r7
 80055f0:	f7fa fe42 	bl	8000278 <__aeabi_dsub>
 80055f4:	4602      	mov	r2, r0
 80055f6:	460b      	mov	r3, r1
 80055f8:	4640      	mov	r0, r8
 80055fa:	4649      	mov	r1, r9
 80055fc:	e7da      	b.n	80055b4 <__kernel_cos+0xec>
 80055fe:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8005638 <__kernel_cos+0x170>
 8005602:	e7db      	b.n	80055bc <__kernel_cos+0xf4>
 8005604:	f3af 8000 	nop.w
 8005608:	be8838d4 	.word	0xbe8838d4
 800560c:	bda8fae9 	.word	0xbda8fae9
 8005610:	bdb4b1c4 	.word	0xbdb4b1c4
 8005614:	3e21ee9e 	.word	0x3e21ee9e
 8005618:	809c52ad 	.word	0x809c52ad
 800561c:	3e927e4f 	.word	0x3e927e4f
 8005620:	19cb1590 	.word	0x19cb1590
 8005624:	3efa01a0 	.word	0x3efa01a0
 8005628:	16c15177 	.word	0x16c15177
 800562c:	3f56c16c 	.word	0x3f56c16c
 8005630:	5555554c 	.word	0x5555554c
 8005634:	3fa55555 	.word	0x3fa55555
 8005638:	00000000 	.word	0x00000000
 800563c:	3ff00000 	.word	0x3ff00000
 8005640:	3fe00000 	.word	0x3fe00000
 8005644:	3fd33332 	.word	0x3fd33332
 8005648:	3ff00000 	.word	0x3ff00000
 800564c:	3fe90000 	.word	0x3fe90000
 8005650:	3fd20000 	.word	0x3fd20000
 8005654:	00000000 	.word	0x00000000

08005658 <__kernel_rem_pio2>:
 8005658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800565c:	ed2d 8b02 	vpush	{d8}
 8005660:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8005664:	f112 0f14 	cmn.w	r2, #20
 8005668:	9308      	str	r3, [sp, #32]
 800566a:	9101      	str	r1, [sp, #4]
 800566c:	4bc4      	ldr	r3, [pc, #784]	; (8005980 <__kernel_rem_pio2+0x328>)
 800566e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8005670:	900b      	str	r0, [sp, #44]	; 0x2c
 8005672:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005676:	9302      	str	r3, [sp, #8]
 8005678:	9b08      	ldr	r3, [sp, #32]
 800567a:	f103 33ff 	add.w	r3, r3, #4294967295
 800567e:	bfa8      	it	ge
 8005680:	1ed4      	subge	r4, r2, #3
 8005682:	9306      	str	r3, [sp, #24]
 8005684:	bfb2      	itee	lt
 8005686:	2400      	movlt	r4, #0
 8005688:	2318      	movge	r3, #24
 800568a:	fb94 f4f3 	sdivge	r4, r4, r3
 800568e:	f06f 0317 	mvn.w	r3, #23
 8005692:	fb04 3303 	mla	r3, r4, r3, r3
 8005696:	eb03 0a02 	add.w	sl, r3, r2
 800569a:	9b02      	ldr	r3, [sp, #8]
 800569c:	9a06      	ldr	r2, [sp, #24]
 800569e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8005970 <__kernel_rem_pio2+0x318>
 80056a2:	eb03 0802 	add.w	r8, r3, r2
 80056a6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80056a8:	1aa7      	subs	r7, r4, r2
 80056aa:	ae22      	add	r6, sp, #136	; 0x88
 80056ac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80056b0:	2500      	movs	r5, #0
 80056b2:	4545      	cmp	r5, r8
 80056b4:	dd13      	ble.n	80056de <__kernel_rem_pio2+0x86>
 80056b6:	9b08      	ldr	r3, [sp, #32]
 80056b8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8005970 <__kernel_rem_pio2+0x318>
 80056bc:	aa22      	add	r2, sp, #136	; 0x88
 80056be:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80056c2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80056c6:	f04f 0800 	mov.w	r8, #0
 80056ca:	9b02      	ldr	r3, [sp, #8]
 80056cc:	4598      	cmp	r8, r3
 80056ce:	dc2f      	bgt.n	8005730 <__kernel_rem_pio2+0xd8>
 80056d0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80056d4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80056d8:	462f      	mov	r7, r5
 80056da:	2600      	movs	r6, #0
 80056dc:	e01b      	b.n	8005716 <__kernel_rem_pio2+0xbe>
 80056de:	42ef      	cmn	r7, r5
 80056e0:	d407      	bmi.n	80056f2 <__kernel_rem_pio2+0x9a>
 80056e2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80056e6:	f7fa ff15 	bl	8000514 <__aeabi_i2d>
 80056ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 80056ee:	3501      	adds	r5, #1
 80056f0:	e7df      	b.n	80056b2 <__kernel_rem_pio2+0x5a>
 80056f2:	ec51 0b18 	vmov	r0, r1, d8
 80056f6:	e7f8      	b.n	80056ea <__kernel_rem_pio2+0x92>
 80056f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056fc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005700:	f7fa ff72 	bl	80005e8 <__aeabi_dmul>
 8005704:	4602      	mov	r2, r0
 8005706:	460b      	mov	r3, r1
 8005708:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800570c:	f7fa fdb6 	bl	800027c <__adddf3>
 8005710:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005714:	3601      	adds	r6, #1
 8005716:	9b06      	ldr	r3, [sp, #24]
 8005718:	429e      	cmp	r6, r3
 800571a:	f1a7 0708 	sub.w	r7, r7, #8
 800571e:	ddeb      	ble.n	80056f8 <__kernel_rem_pio2+0xa0>
 8005720:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005724:	f108 0801 	add.w	r8, r8, #1
 8005728:	ecab 7b02 	vstmia	fp!, {d7}
 800572c:	3508      	adds	r5, #8
 800572e:	e7cc      	b.n	80056ca <__kernel_rem_pio2+0x72>
 8005730:	9b02      	ldr	r3, [sp, #8]
 8005732:	aa0e      	add	r2, sp, #56	; 0x38
 8005734:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005738:	930d      	str	r3, [sp, #52]	; 0x34
 800573a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800573c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005740:	9c02      	ldr	r4, [sp, #8]
 8005742:	930c      	str	r3, [sp, #48]	; 0x30
 8005744:	00e3      	lsls	r3, r4, #3
 8005746:	930a      	str	r3, [sp, #40]	; 0x28
 8005748:	ab9a      	add	r3, sp, #616	; 0x268
 800574a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800574e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8005752:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8005756:	ab72      	add	r3, sp, #456	; 0x1c8
 8005758:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800575c:	46c3      	mov	fp, r8
 800575e:	46a1      	mov	r9, r4
 8005760:	f1b9 0f00 	cmp.w	r9, #0
 8005764:	f1a5 0508 	sub.w	r5, r5, #8
 8005768:	dc77      	bgt.n	800585a <__kernel_rem_pio2+0x202>
 800576a:	ec47 6b10 	vmov	d0, r6, r7
 800576e:	4650      	mov	r0, sl
 8005770:	f000 fc0a 	bl	8005f88 <scalbn>
 8005774:	ec57 6b10 	vmov	r6, r7, d0
 8005778:	2200      	movs	r2, #0
 800577a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800577e:	ee10 0a10 	vmov	r0, s0
 8005782:	4639      	mov	r1, r7
 8005784:	f7fa ff30 	bl	80005e8 <__aeabi_dmul>
 8005788:	ec41 0b10 	vmov	d0, r0, r1
 800578c:	f000 fb7c 	bl	8005e88 <floor>
 8005790:	4b7c      	ldr	r3, [pc, #496]	; (8005984 <__kernel_rem_pio2+0x32c>)
 8005792:	ec51 0b10 	vmov	r0, r1, d0
 8005796:	2200      	movs	r2, #0
 8005798:	f7fa ff26 	bl	80005e8 <__aeabi_dmul>
 800579c:	4602      	mov	r2, r0
 800579e:	460b      	mov	r3, r1
 80057a0:	4630      	mov	r0, r6
 80057a2:	4639      	mov	r1, r7
 80057a4:	f7fa fd68 	bl	8000278 <__aeabi_dsub>
 80057a8:	460f      	mov	r7, r1
 80057aa:	4606      	mov	r6, r0
 80057ac:	f7fb f9b6 	bl	8000b1c <__aeabi_d2iz>
 80057b0:	9004      	str	r0, [sp, #16]
 80057b2:	f7fa feaf 	bl	8000514 <__aeabi_i2d>
 80057b6:	4602      	mov	r2, r0
 80057b8:	460b      	mov	r3, r1
 80057ba:	4630      	mov	r0, r6
 80057bc:	4639      	mov	r1, r7
 80057be:	f7fa fd5b 	bl	8000278 <__aeabi_dsub>
 80057c2:	f1ba 0f00 	cmp.w	sl, #0
 80057c6:	4606      	mov	r6, r0
 80057c8:	460f      	mov	r7, r1
 80057ca:	dd6d      	ble.n	80058a8 <__kernel_rem_pio2+0x250>
 80057cc:	1e62      	subs	r2, r4, #1
 80057ce:	ab0e      	add	r3, sp, #56	; 0x38
 80057d0:	9d04      	ldr	r5, [sp, #16]
 80057d2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80057d6:	f1ca 0118 	rsb	r1, sl, #24
 80057da:	fa40 f301 	asr.w	r3, r0, r1
 80057de:	441d      	add	r5, r3
 80057e0:	408b      	lsls	r3, r1
 80057e2:	1ac0      	subs	r0, r0, r3
 80057e4:	ab0e      	add	r3, sp, #56	; 0x38
 80057e6:	9504      	str	r5, [sp, #16]
 80057e8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80057ec:	f1ca 0317 	rsb	r3, sl, #23
 80057f0:	fa40 fb03 	asr.w	fp, r0, r3
 80057f4:	f1bb 0f00 	cmp.w	fp, #0
 80057f8:	dd65      	ble.n	80058c6 <__kernel_rem_pio2+0x26e>
 80057fa:	9b04      	ldr	r3, [sp, #16]
 80057fc:	2200      	movs	r2, #0
 80057fe:	3301      	adds	r3, #1
 8005800:	9304      	str	r3, [sp, #16]
 8005802:	4615      	mov	r5, r2
 8005804:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005808:	4294      	cmp	r4, r2
 800580a:	f300 809c 	bgt.w	8005946 <__kernel_rem_pio2+0x2ee>
 800580e:	f1ba 0f00 	cmp.w	sl, #0
 8005812:	dd07      	ble.n	8005824 <__kernel_rem_pio2+0x1cc>
 8005814:	f1ba 0f01 	cmp.w	sl, #1
 8005818:	f000 80c0 	beq.w	800599c <__kernel_rem_pio2+0x344>
 800581c:	f1ba 0f02 	cmp.w	sl, #2
 8005820:	f000 80c6 	beq.w	80059b0 <__kernel_rem_pio2+0x358>
 8005824:	f1bb 0f02 	cmp.w	fp, #2
 8005828:	d14d      	bne.n	80058c6 <__kernel_rem_pio2+0x26e>
 800582a:	4632      	mov	r2, r6
 800582c:	463b      	mov	r3, r7
 800582e:	4956      	ldr	r1, [pc, #344]	; (8005988 <__kernel_rem_pio2+0x330>)
 8005830:	2000      	movs	r0, #0
 8005832:	f7fa fd21 	bl	8000278 <__aeabi_dsub>
 8005836:	4606      	mov	r6, r0
 8005838:	460f      	mov	r7, r1
 800583a:	2d00      	cmp	r5, #0
 800583c:	d043      	beq.n	80058c6 <__kernel_rem_pio2+0x26e>
 800583e:	4650      	mov	r0, sl
 8005840:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8005978 <__kernel_rem_pio2+0x320>
 8005844:	f000 fba0 	bl	8005f88 <scalbn>
 8005848:	4630      	mov	r0, r6
 800584a:	4639      	mov	r1, r7
 800584c:	ec53 2b10 	vmov	r2, r3, d0
 8005850:	f7fa fd12 	bl	8000278 <__aeabi_dsub>
 8005854:	4606      	mov	r6, r0
 8005856:	460f      	mov	r7, r1
 8005858:	e035      	b.n	80058c6 <__kernel_rem_pio2+0x26e>
 800585a:	4b4c      	ldr	r3, [pc, #304]	; (800598c <__kernel_rem_pio2+0x334>)
 800585c:	2200      	movs	r2, #0
 800585e:	4630      	mov	r0, r6
 8005860:	4639      	mov	r1, r7
 8005862:	f7fa fec1 	bl	80005e8 <__aeabi_dmul>
 8005866:	f7fb f959 	bl	8000b1c <__aeabi_d2iz>
 800586a:	f7fa fe53 	bl	8000514 <__aeabi_i2d>
 800586e:	4602      	mov	r2, r0
 8005870:	460b      	mov	r3, r1
 8005872:	ec43 2b18 	vmov	d8, r2, r3
 8005876:	4b46      	ldr	r3, [pc, #280]	; (8005990 <__kernel_rem_pio2+0x338>)
 8005878:	2200      	movs	r2, #0
 800587a:	f7fa feb5 	bl	80005e8 <__aeabi_dmul>
 800587e:	4602      	mov	r2, r0
 8005880:	460b      	mov	r3, r1
 8005882:	4630      	mov	r0, r6
 8005884:	4639      	mov	r1, r7
 8005886:	f7fa fcf7 	bl	8000278 <__aeabi_dsub>
 800588a:	f7fb f947 	bl	8000b1c <__aeabi_d2iz>
 800588e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005892:	f84b 0b04 	str.w	r0, [fp], #4
 8005896:	ec51 0b18 	vmov	r0, r1, d8
 800589a:	f7fa fcef 	bl	800027c <__adddf3>
 800589e:	f109 39ff 	add.w	r9, r9, #4294967295
 80058a2:	4606      	mov	r6, r0
 80058a4:	460f      	mov	r7, r1
 80058a6:	e75b      	b.n	8005760 <__kernel_rem_pio2+0x108>
 80058a8:	d106      	bne.n	80058b8 <__kernel_rem_pio2+0x260>
 80058aa:	1e63      	subs	r3, r4, #1
 80058ac:	aa0e      	add	r2, sp, #56	; 0x38
 80058ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80058b2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80058b6:	e79d      	b.n	80057f4 <__kernel_rem_pio2+0x19c>
 80058b8:	4b36      	ldr	r3, [pc, #216]	; (8005994 <__kernel_rem_pio2+0x33c>)
 80058ba:	2200      	movs	r2, #0
 80058bc:	f7fb f91a 	bl	8000af4 <__aeabi_dcmpge>
 80058c0:	2800      	cmp	r0, #0
 80058c2:	d13d      	bne.n	8005940 <__kernel_rem_pio2+0x2e8>
 80058c4:	4683      	mov	fp, r0
 80058c6:	2200      	movs	r2, #0
 80058c8:	2300      	movs	r3, #0
 80058ca:	4630      	mov	r0, r6
 80058cc:	4639      	mov	r1, r7
 80058ce:	f7fb f8f3 	bl	8000ab8 <__aeabi_dcmpeq>
 80058d2:	2800      	cmp	r0, #0
 80058d4:	f000 80c0 	beq.w	8005a58 <__kernel_rem_pio2+0x400>
 80058d8:	1e65      	subs	r5, r4, #1
 80058da:	462b      	mov	r3, r5
 80058dc:	2200      	movs	r2, #0
 80058de:	9902      	ldr	r1, [sp, #8]
 80058e0:	428b      	cmp	r3, r1
 80058e2:	da6c      	bge.n	80059be <__kernel_rem_pio2+0x366>
 80058e4:	2a00      	cmp	r2, #0
 80058e6:	f000 8089 	beq.w	80059fc <__kernel_rem_pio2+0x3a4>
 80058ea:	ab0e      	add	r3, sp, #56	; 0x38
 80058ec:	f1aa 0a18 	sub.w	sl, sl, #24
 80058f0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f000 80ad 	beq.w	8005a54 <__kernel_rem_pio2+0x3fc>
 80058fa:	4650      	mov	r0, sl
 80058fc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8005978 <__kernel_rem_pio2+0x320>
 8005900:	f000 fb42 	bl	8005f88 <scalbn>
 8005904:	ab9a      	add	r3, sp, #616	; 0x268
 8005906:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800590a:	ec57 6b10 	vmov	r6, r7, d0
 800590e:	00ec      	lsls	r4, r5, #3
 8005910:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8005914:	46aa      	mov	sl, r5
 8005916:	f1ba 0f00 	cmp.w	sl, #0
 800591a:	f280 80d6 	bge.w	8005aca <__kernel_rem_pio2+0x472>
 800591e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8005970 <__kernel_rem_pio2+0x318>
 8005922:	462e      	mov	r6, r5
 8005924:	2e00      	cmp	r6, #0
 8005926:	f2c0 8104 	blt.w	8005b32 <__kernel_rem_pio2+0x4da>
 800592a:	ab72      	add	r3, sp, #456	; 0x1c8
 800592c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8005930:	f8df a064 	ldr.w	sl, [pc, #100]	; 8005998 <__kernel_rem_pio2+0x340>
 8005934:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8005938:	f04f 0800 	mov.w	r8, #0
 800593c:	1baf      	subs	r7, r5, r6
 800593e:	e0ea      	b.n	8005b16 <__kernel_rem_pio2+0x4be>
 8005940:	f04f 0b02 	mov.w	fp, #2
 8005944:	e759      	b.n	80057fa <__kernel_rem_pio2+0x1a2>
 8005946:	f8d8 3000 	ldr.w	r3, [r8]
 800594a:	b955      	cbnz	r5, 8005962 <__kernel_rem_pio2+0x30a>
 800594c:	b123      	cbz	r3, 8005958 <__kernel_rem_pio2+0x300>
 800594e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005952:	f8c8 3000 	str.w	r3, [r8]
 8005956:	2301      	movs	r3, #1
 8005958:	3201      	adds	r2, #1
 800595a:	f108 0804 	add.w	r8, r8, #4
 800595e:	461d      	mov	r5, r3
 8005960:	e752      	b.n	8005808 <__kernel_rem_pio2+0x1b0>
 8005962:	1acb      	subs	r3, r1, r3
 8005964:	f8c8 3000 	str.w	r3, [r8]
 8005968:	462b      	mov	r3, r5
 800596a:	e7f5      	b.n	8005958 <__kernel_rem_pio2+0x300>
 800596c:	f3af 8000 	nop.w
	...
 800597c:	3ff00000 	.word	0x3ff00000
 8005980:	08006430 	.word	0x08006430
 8005984:	40200000 	.word	0x40200000
 8005988:	3ff00000 	.word	0x3ff00000
 800598c:	3e700000 	.word	0x3e700000
 8005990:	41700000 	.word	0x41700000
 8005994:	3fe00000 	.word	0x3fe00000
 8005998:	080063f0 	.word	0x080063f0
 800599c:	1e62      	subs	r2, r4, #1
 800599e:	ab0e      	add	r3, sp, #56	; 0x38
 80059a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059a4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80059a8:	a90e      	add	r1, sp, #56	; 0x38
 80059aa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80059ae:	e739      	b.n	8005824 <__kernel_rem_pio2+0x1cc>
 80059b0:	1e62      	subs	r2, r4, #1
 80059b2:	ab0e      	add	r3, sp, #56	; 0x38
 80059b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059b8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80059bc:	e7f4      	b.n	80059a8 <__kernel_rem_pio2+0x350>
 80059be:	a90e      	add	r1, sp, #56	; 0x38
 80059c0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80059c4:	3b01      	subs	r3, #1
 80059c6:	430a      	orrs	r2, r1
 80059c8:	e789      	b.n	80058de <__kernel_rem_pio2+0x286>
 80059ca:	3301      	adds	r3, #1
 80059cc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80059d0:	2900      	cmp	r1, #0
 80059d2:	d0fa      	beq.n	80059ca <__kernel_rem_pio2+0x372>
 80059d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059d6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80059da:	446a      	add	r2, sp
 80059dc:	3a98      	subs	r2, #152	; 0x98
 80059de:	920a      	str	r2, [sp, #40]	; 0x28
 80059e0:	9a08      	ldr	r2, [sp, #32]
 80059e2:	18e3      	adds	r3, r4, r3
 80059e4:	18a5      	adds	r5, r4, r2
 80059e6:	aa22      	add	r2, sp, #136	; 0x88
 80059e8:	f104 0801 	add.w	r8, r4, #1
 80059ec:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80059f0:	9304      	str	r3, [sp, #16]
 80059f2:	9b04      	ldr	r3, [sp, #16]
 80059f4:	4543      	cmp	r3, r8
 80059f6:	da04      	bge.n	8005a02 <__kernel_rem_pio2+0x3aa>
 80059f8:	461c      	mov	r4, r3
 80059fa:	e6a3      	b.n	8005744 <__kernel_rem_pio2+0xec>
 80059fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80059fe:	2301      	movs	r3, #1
 8005a00:	e7e4      	b.n	80059cc <__kernel_rem_pio2+0x374>
 8005a02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a04:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005a08:	f7fa fd84 	bl	8000514 <__aeabi_i2d>
 8005a0c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8005a10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a12:	46ab      	mov	fp, r5
 8005a14:	461c      	mov	r4, r3
 8005a16:	f04f 0900 	mov.w	r9, #0
 8005a1a:	2600      	movs	r6, #0
 8005a1c:	2700      	movs	r7, #0
 8005a1e:	9b06      	ldr	r3, [sp, #24]
 8005a20:	4599      	cmp	r9, r3
 8005a22:	dd06      	ble.n	8005a32 <__kernel_rem_pio2+0x3da>
 8005a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a26:	e8e3 6702 	strd	r6, r7, [r3], #8
 8005a2a:	f108 0801 	add.w	r8, r8, #1
 8005a2e:	930a      	str	r3, [sp, #40]	; 0x28
 8005a30:	e7df      	b.n	80059f2 <__kernel_rem_pio2+0x39a>
 8005a32:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005a36:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005a3a:	f7fa fdd5 	bl	80005e8 <__aeabi_dmul>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	460b      	mov	r3, r1
 8005a42:	4630      	mov	r0, r6
 8005a44:	4639      	mov	r1, r7
 8005a46:	f7fa fc19 	bl	800027c <__adddf3>
 8005a4a:	f109 0901 	add.w	r9, r9, #1
 8005a4e:	4606      	mov	r6, r0
 8005a50:	460f      	mov	r7, r1
 8005a52:	e7e4      	b.n	8005a1e <__kernel_rem_pio2+0x3c6>
 8005a54:	3d01      	subs	r5, #1
 8005a56:	e748      	b.n	80058ea <__kernel_rem_pio2+0x292>
 8005a58:	ec47 6b10 	vmov	d0, r6, r7
 8005a5c:	f1ca 0000 	rsb	r0, sl, #0
 8005a60:	f000 fa92 	bl	8005f88 <scalbn>
 8005a64:	ec57 6b10 	vmov	r6, r7, d0
 8005a68:	4ba0      	ldr	r3, [pc, #640]	; (8005cec <__kernel_rem_pio2+0x694>)
 8005a6a:	ee10 0a10 	vmov	r0, s0
 8005a6e:	2200      	movs	r2, #0
 8005a70:	4639      	mov	r1, r7
 8005a72:	f7fb f83f 	bl	8000af4 <__aeabi_dcmpge>
 8005a76:	b1f8      	cbz	r0, 8005ab8 <__kernel_rem_pio2+0x460>
 8005a78:	4b9d      	ldr	r3, [pc, #628]	; (8005cf0 <__kernel_rem_pio2+0x698>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	4630      	mov	r0, r6
 8005a7e:	4639      	mov	r1, r7
 8005a80:	f7fa fdb2 	bl	80005e8 <__aeabi_dmul>
 8005a84:	f7fb f84a 	bl	8000b1c <__aeabi_d2iz>
 8005a88:	4680      	mov	r8, r0
 8005a8a:	f7fa fd43 	bl	8000514 <__aeabi_i2d>
 8005a8e:	4b97      	ldr	r3, [pc, #604]	; (8005cec <__kernel_rem_pio2+0x694>)
 8005a90:	2200      	movs	r2, #0
 8005a92:	f7fa fda9 	bl	80005e8 <__aeabi_dmul>
 8005a96:	460b      	mov	r3, r1
 8005a98:	4602      	mov	r2, r0
 8005a9a:	4639      	mov	r1, r7
 8005a9c:	4630      	mov	r0, r6
 8005a9e:	f7fa fbeb 	bl	8000278 <__aeabi_dsub>
 8005aa2:	f7fb f83b 	bl	8000b1c <__aeabi_d2iz>
 8005aa6:	1c65      	adds	r5, r4, #1
 8005aa8:	ab0e      	add	r3, sp, #56	; 0x38
 8005aaa:	f10a 0a18 	add.w	sl, sl, #24
 8005aae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005ab2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005ab6:	e720      	b.n	80058fa <__kernel_rem_pio2+0x2a2>
 8005ab8:	4630      	mov	r0, r6
 8005aba:	4639      	mov	r1, r7
 8005abc:	f7fb f82e 	bl	8000b1c <__aeabi_d2iz>
 8005ac0:	ab0e      	add	r3, sp, #56	; 0x38
 8005ac2:	4625      	mov	r5, r4
 8005ac4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005ac8:	e717      	b.n	80058fa <__kernel_rem_pio2+0x2a2>
 8005aca:	ab0e      	add	r3, sp, #56	; 0x38
 8005acc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8005ad0:	f7fa fd20 	bl	8000514 <__aeabi_i2d>
 8005ad4:	4632      	mov	r2, r6
 8005ad6:	463b      	mov	r3, r7
 8005ad8:	f7fa fd86 	bl	80005e8 <__aeabi_dmul>
 8005adc:	4b84      	ldr	r3, [pc, #528]	; (8005cf0 <__kernel_rem_pio2+0x698>)
 8005ade:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	4630      	mov	r0, r6
 8005ae6:	4639      	mov	r1, r7
 8005ae8:	f7fa fd7e 	bl	80005e8 <__aeabi_dmul>
 8005aec:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005af0:	4606      	mov	r6, r0
 8005af2:	460f      	mov	r7, r1
 8005af4:	e70f      	b.n	8005916 <__kernel_rem_pio2+0x2be>
 8005af6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8005afa:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8005afe:	f7fa fd73 	bl	80005e8 <__aeabi_dmul>
 8005b02:	4602      	mov	r2, r0
 8005b04:	460b      	mov	r3, r1
 8005b06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b0a:	f7fa fbb7 	bl	800027c <__adddf3>
 8005b0e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005b12:	f108 0801 	add.w	r8, r8, #1
 8005b16:	9b02      	ldr	r3, [sp, #8]
 8005b18:	4598      	cmp	r8, r3
 8005b1a:	dc01      	bgt.n	8005b20 <__kernel_rem_pio2+0x4c8>
 8005b1c:	45b8      	cmp	r8, r7
 8005b1e:	ddea      	ble.n	8005af6 <__kernel_rem_pio2+0x49e>
 8005b20:	ed9d 7b06 	vldr	d7, [sp, #24]
 8005b24:	ab4a      	add	r3, sp, #296	; 0x128
 8005b26:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005b2a:	ed87 7b00 	vstr	d7, [r7]
 8005b2e:	3e01      	subs	r6, #1
 8005b30:	e6f8      	b.n	8005924 <__kernel_rem_pio2+0x2cc>
 8005b32:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	dc0b      	bgt.n	8005b50 <__kernel_rem_pio2+0x4f8>
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	dc35      	bgt.n	8005ba8 <__kernel_rem_pio2+0x550>
 8005b3c:	d059      	beq.n	8005bf2 <__kernel_rem_pio2+0x59a>
 8005b3e:	9b04      	ldr	r3, [sp, #16]
 8005b40:	f003 0007 	and.w	r0, r3, #7
 8005b44:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005b48:	ecbd 8b02 	vpop	{d8}
 8005b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b50:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005b52:	2b03      	cmp	r3, #3
 8005b54:	d1f3      	bne.n	8005b3e <__kernel_rem_pio2+0x4e6>
 8005b56:	ab4a      	add	r3, sp, #296	; 0x128
 8005b58:	4423      	add	r3, r4
 8005b5a:	9306      	str	r3, [sp, #24]
 8005b5c:	461c      	mov	r4, r3
 8005b5e:	469a      	mov	sl, r3
 8005b60:	9502      	str	r5, [sp, #8]
 8005b62:	9b02      	ldr	r3, [sp, #8]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f1aa 0a08 	sub.w	sl, sl, #8
 8005b6a:	dc6b      	bgt.n	8005c44 <__kernel_rem_pio2+0x5ec>
 8005b6c:	46aa      	mov	sl, r5
 8005b6e:	f1ba 0f01 	cmp.w	sl, #1
 8005b72:	f1a4 0408 	sub.w	r4, r4, #8
 8005b76:	f300 8085 	bgt.w	8005c84 <__kernel_rem_pio2+0x62c>
 8005b7a:	9c06      	ldr	r4, [sp, #24]
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	3408      	adds	r4, #8
 8005b80:	2100      	movs	r1, #0
 8005b82:	2d01      	cmp	r5, #1
 8005b84:	f300 809d 	bgt.w	8005cc2 <__kernel_rem_pio2+0x66a>
 8005b88:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8005b8c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8005b90:	f1bb 0f00 	cmp.w	fp, #0
 8005b94:	f040 809b 	bne.w	8005cce <__kernel_rem_pio2+0x676>
 8005b98:	9b01      	ldr	r3, [sp, #4]
 8005b9a:	e9c3 5600 	strd	r5, r6, [r3]
 8005b9e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8005ba2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005ba6:	e7ca      	b.n	8005b3e <__kernel_rem_pio2+0x4e6>
 8005ba8:	3408      	adds	r4, #8
 8005baa:	ab4a      	add	r3, sp, #296	; 0x128
 8005bac:	441c      	add	r4, r3
 8005bae:	462e      	mov	r6, r5
 8005bb0:	2000      	movs	r0, #0
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	2e00      	cmp	r6, #0
 8005bb6:	da36      	bge.n	8005c26 <__kernel_rem_pio2+0x5ce>
 8005bb8:	f1bb 0f00 	cmp.w	fp, #0
 8005bbc:	d039      	beq.n	8005c32 <__kernel_rem_pio2+0x5da>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005bc4:	9c01      	ldr	r4, [sp, #4]
 8005bc6:	e9c4 2300 	strd	r2, r3, [r4]
 8005bca:	4602      	mov	r2, r0
 8005bcc:	460b      	mov	r3, r1
 8005bce:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005bd2:	f7fa fb51 	bl	8000278 <__aeabi_dsub>
 8005bd6:	ae4c      	add	r6, sp, #304	; 0x130
 8005bd8:	2401      	movs	r4, #1
 8005bda:	42a5      	cmp	r5, r4
 8005bdc:	da2c      	bge.n	8005c38 <__kernel_rem_pio2+0x5e0>
 8005bde:	f1bb 0f00 	cmp.w	fp, #0
 8005be2:	d002      	beq.n	8005bea <__kernel_rem_pio2+0x592>
 8005be4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005be8:	4619      	mov	r1, r3
 8005bea:	9b01      	ldr	r3, [sp, #4]
 8005bec:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005bf0:	e7a5      	b.n	8005b3e <__kernel_rem_pio2+0x4e6>
 8005bf2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8005bf6:	eb0d 0403 	add.w	r4, sp, r3
 8005bfa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005bfe:	2000      	movs	r0, #0
 8005c00:	2100      	movs	r1, #0
 8005c02:	2d00      	cmp	r5, #0
 8005c04:	da09      	bge.n	8005c1a <__kernel_rem_pio2+0x5c2>
 8005c06:	f1bb 0f00 	cmp.w	fp, #0
 8005c0a:	d002      	beq.n	8005c12 <__kernel_rem_pio2+0x5ba>
 8005c0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c10:	4619      	mov	r1, r3
 8005c12:	9b01      	ldr	r3, [sp, #4]
 8005c14:	e9c3 0100 	strd	r0, r1, [r3]
 8005c18:	e791      	b.n	8005b3e <__kernel_rem_pio2+0x4e6>
 8005c1a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005c1e:	f7fa fb2d 	bl	800027c <__adddf3>
 8005c22:	3d01      	subs	r5, #1
 8005c24:	e7ed      	b.n	8005c02 <__kernel_rem_pio2+0x5aa>
 8005c26:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005c2a:	f7fa fb27 	bl	800027c <__adddf3>
 8005c2e:	3e01      	subs	r6, #1
 8005c30:	e7c0      	b.n	8005bb4 <__kernel_rem_pio2+0x55c>
 8005c32:	4602      	mov	r2, r0
 8005c34:	460b      	mov	r3, r1
 8005c36:	e7c5      	b.n	8005bc4 <__kernel_rem_pio2+0x56c>
 8005c38:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005c3c:	f7fa fb1e 	bl	800027c <__adddf3>
 8005c40:	3401      	adds	r4, #1
 8005c42:	e7ca      	b.n	8005bda <__kernel_rem_pio2+0x582>
 8005c44:	e9da 8900 	ldrd	r8, r9, [sl]
 8005c48:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8005c4c:	9b02      	ldr	r3, [sp, #8]
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	9302      	str	r3, [sp, #8]
 8005c52:	4632      	mov	r2, r6
 8005c54:	463b      	mov	r3, r7
 8005c56:	4640      	mov	r0, r8
 8005c58:	4649      	mov	r1, r9
 8005c5a:	f7fa fb0f 	bl	800027c <__adddf3>
 8005c5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005c62:	4602      	mov	r2, r0
 8005c64:	460b      	mov	r3, r1
 8005c66:	4640      	mov	r0, r8
 8005c68:	4649      	mov	r1, r9
 8005c6a:	f7fa fb05 	bl	8000278 <__aeabi_dsub>
 8005c6e:	4632      	mov	r2, r6
 8005c70:	463b      	mov	r3, r7
 8005c72:	f7fa fb03 	bl	800027c <__adddf3>
 8005c76:	ed9d 7b08 	vldr	d7, [sp, #32]
 8005c7a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005c7e:	ed8a 7b00 	vstr	d7, [sl]
 8005c82:	e76e      	b.n	8005b62 <__kernel_rem_pio2+0x50a>
 8005c84:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005c88:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8005c8c:	4640      	mov	r0, r8
 8005c8e:	4632      	mov	r2, r6
 8005c90:	463b      	mov	r3, r7
 8005c92:	4649      	mov	r1, r9
 8005c94:	f7fa faf2 	bl	800027c <__adddf3>
 8005c98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	4640      	mov	r0, r8
 8005ca2:	4649      	mov	r1, r9
 8005ca4:	f7fa fae8 	bl	8000278 <__aeabi_dsub>
 8005ca8:	4632      	mov	r2, r6
 8005caa:	463b      	mov	r3, r7
 8005cac:	f7fa fae6 	bl	800027c <__adddf3>
 8005cb0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005cb4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005cb8:	ed84 7b00 	vstr	d7, [r4]
 8005cbc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005cc0:	e755      	b.n	8005b6e <__kernel_rem_pio2+0x516>
 8005cc2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005cc6:	f7fa fad9 	bl	800027c <__adddf3>
 8005cca:	3d01      	subs	r5, #1
 8005ccc:	e759      	b.n	8005b82 <__kernel_rem_pio2+0x52a>
 8005cce:	9b01      	ldr	r3, [sp, #4]
 8005cd0:	9a01      	ldr	r2, [sp, #4]
 8005cd2:	601d      	str	r5, [r3, #0]
 8005cd4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8005cd8:	605c      	str	r4, [r3, #4]
 8005cda:	609f      	str	r7, [r3, #8]
 8005cdc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8005ce0:	60d3      	str	r3, [r2, #12]
 8005ce2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ce6:	6110      	str	r0, [r2, #16]
 8005ce8:	6153      	str	r3, [r2, #20]
 8005cea:	e728      	b.n	8005b3e <__kernel_rem_pio2+0x4e6>
 8005cec:	41700000 	.word	0x41700000
 8005cf0:	3e700000 	.word	0x3e700000
 8005cf4:	00000000 	.word	0x00000000

08005cf8 <__kernel_sin>:
 8005cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cfc:	ed2d 8b04 	vpush	{d8-d9}
 8005d00:	eeb0 8a41 	vmov.f32	s16, s2
 8005d04:	eef0 8a61 	vmov.f32	s17, s3
 8005d08:	ec55 4b10 	vmov	r4, r5, d0
 8005d0c:	b083      	sub	sp, #12
 8005d0e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005d12:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005d16:	9001      	str	r0, [sp, #4]
 8005d18:	da06      	bge.n	8005d28 <__kernel_sin+0x30>
 8005d1a:	ee10 0a10 	vmov	r0, s0
 8005d1e:	4629      	mov	r1, r5
 8005d20:	f7fa fefc 	bl	8000b1c <__aeabi_d2iz>
 8005d24:	2800      	cmp	r0, #0
 8005d26:	d051      	beq.n	8005dcc <__kernel_sin+0xd4>
 8005d28:	4622      	mov	r2, r4
 8005d2a:	462b      	mov	r3, r5
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	4629      	mov	r1, r5
 8005d30:	f7fa fc5a 	bl	80005e8 <__aeabi_dmul>
 8005d34:	4682      	mov	sl, r0
 8005d36:	468b      	mov	fp, r1
 8005d38:	4602      	mov	r2, r0
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	4629      	mov	r1, r5
 8005d40:	f7fa fc52 	bl	80005e8 <__aeabi_dmul>
 8005d44:	a341      	add	r3, pc, #260	; (adr r3, 8005e4c <__kernel_sin+0x154>)
 8005d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4a:	4680      	mov	r8, r0
 8005d4c:	4689      	mov	r9, r1
 8005d4e:	4650      	mov	r0, sl
 8005d50:	4659      	mov	r1, fp
 8005d52:	f7fa fc49 	bl	80005e8 <__aeabi_dmul>
 8005d56:	a33f      	add	r3, pc, #252	; (adr r3, 8005e54 <__kernel_sin+0x15c>)
 8005d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5c:	f7fa fa8c 	bl	8000278 <__aeabi_dsub>
 8005d60:	4652      	mov	r2, sl
 8005d62:	465b      	mov	r3, fp
 8005d64:	f7fa fc40 	bl	80005e8 <__aeabi_dmul>
 8005d68:	a33c      	add	r3, pc, #240	; (adr r3, 8005e5c <__kernel_sin+0x164>)
 8005d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6e:	f7fa fa85 	bl	800027c <__adddf3>
 8005d72:	4652      	mov	r2, sl
 8005d74:	465b      	mov	r3, fp
 8005d76:	f7fa fc37 	bl	80005e8 <__aeabi_dmul>
 8005d7a:	a33a      	add	r3, pc, #232	; (adr r3, 8005e64 <__kernel_sin+0x16c>)
 8005d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d80:	f7fa fa7a 	bl	8000278 <__aeabi_dsub>
 8005d84:	4652      	mov	r2, sl
 8005d86:	465b      	mov	r3, fp
 8005d88:	f7fa fc2e 	bl	80005e8 <__aeabi_dmul>
 8005d8c:	a337      	add	r3, pc, #220	; (adr r3, 8005e6c <__kernel_sin+0x174>)
 8005d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d92:	f7fa fa73 	bl	800027c <__adddf3>
 8005d96:	9b01      	ldr	r3, [sp, #4]
 8005d98:	4606      	mov	r6, r0
 8005d9a:	460f      	mov	r7, r1
 8005d9c:	b9eb      	cbnz	r3, 8005dda <__kernel_sin+0xe2>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	460b      	mov	r3, r1
 8005da2:	4650      	mov	r0, sl
 8005da4:	4659      	mov	r1, fp
 8005da6:	f7fa fc1f 	bl	80005e8 <__aeabi_dmul>
 8005daa:	a325      	add	r3, pc, #148	; (adr r3, 8005e40 <__kernel_sin+0x148>)
 8005dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db0:	f7fa fa62 	bl	8000278 <__aeabi_dsub>
 8005db4:	4642      	mov	r2, r8
 8005db6:	464b      	mov	r3, r9
 8005db8:	f7fa fc16 	bl	80005e8 <__aeabi_dmul>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	4629      	mov	r1, r5
 8005dc4:	f7fa fa5a 	bl	800027c <__adddf3>
 8005dc8:	4604      	mov	r4, r0
 8005dca:	460d      	mov	r5, r1
 8005dcc:	ec45 4b10 	vmov	d0, r4, r5
 8005dd0:	b003      	add	sp, #12
 8005dd2:	ecbd 8b04 	vpop	{d8-d9}
 8005dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dda:	4b1b      	ldr	r3, [pc, #108]	; (8005e48 <__kernel_sin+0x150>)
 8005ddc:	ec51 0b18 	vmov	r0, r1, d8
 8005de0:	2200      	movs	r2, #0
 8005de2:	f7fa fc01 	bl	80005e8 <__aeabi_dmul>
 8005de6:	4632      	mov	r2, r6
 8005de8:	ec41 0b19 	vmov	d9, r0, r1
 8005dec:	463b      	mov	r3, r7
 8005dee:	4640      	mov	r0, r8
 8005df0:	4649      	mov	r1, r9
 8005df2:	f7fa fbf9 	bl	80005e8 <__aeabi_dmul>
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	ec51 0b19 	vmov	r0, r1, d9
 8005dfe:	f7fa fa3b 	bl	8000278 <__aeabi_dsub>
 8005e02:	4652      	mov	r2, sl
 8005e04:	465b      	mov	r3, fp
 8005e06:	f7fa fbef 	bl	80005e8 <__aeabi_dmul>
 8005e0a:	ec53 2b18 	vmov	r2, r3, d8
 8005e0e:	f7fa fa33 	bl	8000278 <__aeabi_dsub>
 8005e12:	a30b      	add	r3, pc, #44	; (adr r3, 8005e40 <__kernel_sin+0x148>)
 8005e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e18:	4606      	mov	r6, r0
 8005e1a:	460f      	mov	r7, r1
 8005e1c:	4640      	mov	r0, r8
 8005e1e:	4649      	mov	r1, r9
 8005e20:	f7fa fbe2 	bl	80005e8 <__aeabi_dmul>
 8005e24:	4602      	mov	r2, r0
 8005e26:	460b      	mov	r3, r1
 8005e28:	4630      	mov	r0, r6
 8005e2a:	4639      	mov	r1, r7
 8005e2c:	f7fa fa26 	bl	800027c <__adddf3>
 8005e30:	4602      	mov	r2, r0
 8005e32:	460b      	mov	r3, r1
 8005e34:	4620      	mov	r0, r4
 8005e36:	4629      	mov	r1, r5
 8005e38:	f7fa fa1e 	bl	8000278 <__aeabi_dsub>
 8005e3c:	e7c4      	b.n	8005dc8 <__kernel_sin+0xd0>
 8005e3e:	bf00      	nop
 8005e40:	55555549 	.word	0x55555549
 8005e44:	3fc55555 	.word	0x3fc55555
 8005e48:	3fe00000 	.word	0x3fe00000
 8005e4c:	5acfd57c 	.word	0x5acfd57c
 8005e50:	3de5d93a 	.word	0x3de5d93a
 8005e54:	8a2b9ceb 	.word	0x8a2b9ceb
 8005e58:	3e5ae5e6 	.word	0x3e5ae5e6
 8005e5c:	57b1fe7d 	.word	0x57b1fe7d
 8005e60:	3ec71de3 	.word	0x3ec71de3
 8005e64:	19c161d5 	.word	0x19c161d5
 8005e68:	3f2a01a0 	.word	0x3f2a01a0
 8005e6c:	1110f8a6 	.word	0x1110f8a6
 8005e70:	3f811111 	.word	0x3f811111

08005e74 <fabs>:
 8005e74:	ec51 0b10 	vmov	r0, r1, d0
 8005e78:	ee10 2a10 	vmov	r2, s0
 8005e7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005e80:	ec43 2b10 	vmov	d0, r2, r3
 8005e84:	4770      	bx	lr
	...

08005e88 <floor>:
 8005e88:	ec51 0b10 	vmov	r0, r1, d0
 8005e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e90:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005e94:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005e98:	2e13      	cmp	r6, #19
 8005e9a:	ee10 5a10 	vmov	r5, s0
 8005e9e:	ee10 8a10 	vmov	r8, s0
 8005ea2:	460c      	mov	r4, r1
 8005ea4:	dc32      	bgt.n	8005f0c <floor+0x84>
 8005ea6:	2e00      	cmp	r6, #0
 8005ea8:	da14      	bge.n	8005ed4 <floor+0x4c>
 8005eaa:	a333      	add	r3, pc, #204	; (adr r3, 8005f78 <floor+0xf0>)
 8005eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb0:	f7fa f9e4 	bl	800027c <__adddf3>
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	f7fa fe26 	bl	8000b08 <__aeabi_dcmpgt>
 8005ebc:	b138      	cbz	r0, 8005ece <floor+0x46>
 8005ebe:	2c00      	cmp	r4, #0
 8005ec0:	da57      	bge.n	8005f72 <floor+0xea>
 8005ec2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005ec6:	431d      	orrs	r5, r3
 8005ec8:	d001      	beq.n	8005ece <floor+0x46>
 8005eca:	4c2d      	ldr	r4, [pc, #180]	; (8005f80 <floor+0xf8>)
 8005ecc:	2500      	movs	r5, #0
 8005ece:	4621      	mov	r1, r4
 8005ed0:	4628      	mov	r0, r5
 8005ed2:	e025      	b.n	8005f20 <floor+0x98>
 8005ed4:	4f2b      	ldr	r7, [pc, #172]	; (8005f84 <floor+0xfc>)
 8005ed6:	4137      	asrs	r7, r6
 8005ed8:	ea01 0307 	and.w	r3, r1, r7
 8005edc:	4303      	orrs	r3, r0
 8005ede:	d01f      	beq.n	8005f20 <floor+0x98>
 8005ee0:	a325      	add	r3, pc, #148	; (adr r3, 8005f78 <floor+0xf0>)
 8005ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee6:	f7fa f9c9 	bl	800027c <__adddf3>
 8005eea:	2200      	movs	r2, #0
 8005eec:	2300      	movs	r3, #0
 8005eee:	f7fa fe0b 	bl	8000b08 <__aeabi_dcmpgt>
 8005ef2:	2800      	cmp	r0, #0
 8005ef4:	d0eb      	beq.n	8005ece <floor+0x46>
 8005ef6:	2c00      	cmp	r4, #0
 8005ef8:	bfbe      	ittt	lt
 8005efa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005efe:	fa43 f606 	asrlt.w	r6, r3, r6
 8005f02:	19a4      	addlt	r4, r4, r6
 8005f04:	ea24 0407 	bic.w	r4, r4, r7
 8005f08:	2500      	movs	r5, #0
 8005f0a:	e7e0      	b.n	8005ece <floor+0x46>
 8005f0c:	2e33      	cmp	r6, #51	; 0x33
 8005f0e:	dd0b      	ble.n	8005f28 <floor+0xa0>
 8005f10:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005f14:	d104      	bne.n	8005f20 <floor+0x98>
 8005f16:	ee10 2a10 	vmov	r2, s0
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	f7fa f9ae 	bl	800027c <__adddf3>
 8005f20:	ec41 0b10 	vmov	d0, r0, r1
 8005f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f28:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f30:	fa23 f707 	lsr.w	r7, r3, r7
 8005f34:	4207      	tst	r7, r0
 8005f36:	d0f3      	beq.n	8005f20 <floor+0x98>
 8005f38:	a30f      	add	r3, pc, #60	; (adr r3, 8005f78 <floor+0xf0>)
 8005f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3e:	f7fa f99d 	bl	800027c <__adddf3>
 8005f42:	2200      	movs	r2, #0
 8005f44:	2300      	movs	r3, #0
 8005f46:	f7fa fddf 	bl	8000b08 <__aeabi_dcmpgt>
 8005f4a:	2800      	cmp	r0, #0
 8005f4c:	d0bf      	beq.n	8005ece <floor+0x46>
 8005f4e:	2c00      	cmp	r4, #0
 8005f50:	da02      	bge.n	8005f58 <floor+0xd0>
 8005f52:	2e14      	cmp	r6, #20
 8005f54:	d103      	bne.n	8005f5e <floor+0xd6>
 8005f56:	3401      	adds	r4, #1
 8005f58:	ea25 0507 	bic.w	r5, r5, r7
 8005f5c:	e7b7      	b.n	8005ece <floor+0x46>
 8005f5e:	2301      	movs	r3, #1
 8005f60:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005f64:	fa03 f606 	lsl.w	r6, r3, r6
 8005f68:	4435      	add	r5, r6
 8005f6a:	4545      	cmp	r5, r8
 8005f6c:	bf38      	it	cc
 8005f6e:	18e4      	addcc	r4, r4, r3
 8005f70:	e7f2      	b.n	8005f58 <floor+0xd0>
 8005f72:	2500      	movs	r5, #0
 8005f74:	462c      	mov	r4, r5
 8005f76:	e7aa      	b.n	8005ece <floor+0x46>
 8005f78:	8800759c 	.word	0x8800759c
 8005f7c:	7e37e43c 	.word	0x7e37e43c
 8005f80:	bff00000 	.word	0xbff00000
 8005f84:	000fffff 	.word	0x000fffff

08005f88 <scalbn>:
 8005f88:	b570      	push	{r4, r5, r6, lr}
 8005f8a:	ec55 4b10 	vmov	r4, r5, d0
 8005f8e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005f92:	4606      	mov	r6, r0
 8005f94:	462b      	mov	r3, r5
 8005f96:	b99a      	cbnz	r2, 8005fc0 <scalbn+0x38>
 8005f98:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005f9c:	4323      	orrs	r3, r4
 8005f9e:	d036      	beq.n	800600e <scalbn+0x86>
 8005fa0:	4b39      	ldr	r3, [pc, #228]	; (8006088 <scalbn+0x100>)
 8005fa2:	4629      	mov	r1, r5
 8005fa4:	ee10 0a10 	vmov	r0, s0
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f7fa fb1d 	bl	80005e8 <__aeabi_dmul>
 8005fae:	4b37      	ldr	r3, [pc, #220]	; (800608c <scalbn+0x104>)
 8005fb0:	429e      	cmp	r6, r3
 8005fb2:	4604      	mov	r4, r0
 8005fb4:	460d      	mov	r5, r1
 8005fb6:	da10      	bge.n	8005fda <scalbn+0x52>
 8005fb8:	a32b      	add	r3, pc, #172	; (adr r3, 8006068 <scalbn+0xe0>)
 8005fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fbe:	e03a      	b.n	8006036 <scalbn+0xae>
 8005fc0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005fc4:	428a      	cmp	r2, r1
 8005fc6:	d10c      	bne.n	8005fe2 <scalbn+0x5a>
 8005fc8:	ee10 2a10 	vmov	r2, s0
 8005fcc:	4620      	mov	r0, r4
 8005fce:	4629      	mov	r1, r5
 8005fd0:	f7fa f954 	bl	800027c <__adddf3>
 8005fd4:	4604      	mov	r4, r0
 8005fd6:	460d      	mov	r5, r1
 8005fd8:	e019      	b.n	800600e <scalbn+0x86>
 8005fda:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005fde:	460b      	mov	r3, r1
 8005fe0:	3a36      	subs	r2, #54	; 0x36
 8005fe2:	4432      	add	r2, r6
 8005fe4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005fe8:	428a      	cmp	r2, r1
 8005fea:	dd08      	ble.n	8005ffe <scalbn+0x76>
 8005fec:	2d00      	cmp	r5, #0
 8005fee:	a120      	add	r1, pc, #128	; (adr r1, 8006070 <scalbn+0xe8>)
 8005ff0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ff4:	da1c      	bge.n	8006030 <scalbn+0xa8>
 8005ff6:	a120      	add	r1, pc, #128	; (adr r1, 8006078 <scalbn+0xf0>)
 8005ff8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ffc:	e018      	b.n	8006030 <scalbn+0xa8>
 8005ffe:	2a00      	cmp	r2, #0
 8006000:	dd08      	ble.n	8006014 <scalbn+0x8c>
 8006002:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006006:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800600a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800600e:	ec45 4b10 	vmov	d0, r4, r5
 8006012:	bd70      	pop	{r4, r5, r6, pc}
 8006014:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006018:	da19      	bge.n	800604e <scalbn+0xc6>
 800601a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800601e:	429e      	cmp	r6, r3
 8006020:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006024:	dd0a      	ble.n	800603c <scalbn+0xb4>
 8006026:	a112      	add	r1, pc, #72	; (adr r1, 8006070 <scalbn+0xe8>)
 8006028:	e9d1 0100 	ldrd	r0, r1, [r1]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1e2      	bne.n	8005ff6 <scalbn+0x6e>
 8006030:	a30f      	add	r3, pc, #60	; (adr r3, 8006070 <scalbn+0xe8>)
 8006032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006036:	f7fa fad7 	bl	80005e8 <__aeabi_dmul>
 800603a:	e7cb      	b.n	8005fd4 <scalbn+0x4c>
 800603c:	a10a      	add	r1, pc, #40	; (adr r1, 8006068 <scalbn+0xe0>)
 800603e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d0b8      	beq.n	8005fb8 <scalbn+0x30>
 8006046:	a10e      	add	r1, pc, #56	; (adr r1, 8006080 <scalbn+0xf8>)
 8006048:	e9d1 0100 	ldrd	r0, r1, [r1]
 800604c:	e7b4      	b.n	8005fb8 <scalbn+0x30>
 800604e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006052:	3236      	adds	r2, #54	; 0x36
 8006054:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006058:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800605c:	4620      	mov	r0, r4
 800605e:	4b0c      	ldr	r3, [pc, #48]	; (8006090 <scalbn+0x108>)
 8006060:	2200      	movs	r2, #0
 8006062:	e7e8      	b.n	8006036 <scalbn+0xae>
 8006064:	f3af 8000 	nop.w
 8006068:	c2f8f359 	.word	0xc2f8f359
 800606c:	01a56e1f 	.word	0x01a56e1f
 8006070:	8800759c 	.word	0x8800759c
 8006074:	7e37e43c 	.word	0x7e37e43c
 8006078:	8800759c 	.word	0x8800759c
 800607c:	fe37e43c 	.word	0xfe37e43c
 8006080:	c2f8f359 	.word	0xc2f8f359
 8006084:	81a56e1f 	.word	0x81a56e1f
 8006088:	43500000 	.word	0x43500000
 800608c:	ffff3cb0 	.word	0xffff3cb0
 8006090:	3c900000 	.word	0x3c900000

08006094 <_init>:
 8006094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006096:	bf00      	nop
 8006098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800609a:	bc08      	pop	{r3}
 800609c:	469e      	mov	lr, r3
 800609e:	4770      	bx	lr

080060a0 <_fini>:
 80060a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a2:	bf00      	nop
 80060a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060a6:	bc08      	pop	{r3}
 80060a8:	469e      	mov	lr, r3
 80060aa:	4770      	bx	lr
