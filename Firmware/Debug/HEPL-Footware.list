
HEPL-Footware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c34  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000594  08005dc4  08005dc4  00015dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006358  08006358  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08006358  08006358  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006358  08006358  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006358  08006358  00016358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800635c  0800635c  0001635c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08006360  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  2000008c  080063ec  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  080063ec  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001324b  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027bc  00000000  00000000  00033307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000cfef  00000000  00000000  00035ac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec0  00000000  00000000  00042ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ea8  00000000  00000000  00043978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024caf  00000000  00000000  00044820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000157f9  00000000  00000000  000694cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d99fb  00000000  00000000  0007ecc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001586c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003498  00000000  00000000  00158714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005dac 	.word	0x08005dac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	08005dac 	.word	0x08005dac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2f>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b24:	bf24      	itt	cs
 8000b26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_d2f+0x30>
 8000b30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b44:	bf08      	it	eq
 8000b46:	f020 0001 	biceq.w	r0, r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b50:	d121      	bne.n	8000b96 <__aeabi_d2f+0x7a>
 8000b52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b56:	bfbc      	itt	lt
 8000b58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	4770      	bxlt	lr
 8000b5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b66:	f1c2 0218 	rsb	r2, r2, #24
 8000b6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b72:	fa20 f002 	lsr.w	r0, r0, r2
 8000b76:	bf18      	it	ne
 8000b78:	f040 0001 	orrne.w	r0, r0, #1
 8000b7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b88:	ea40 000c 	orr.w	r0, r0, ip
 8000b8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b94:	e7cc      	b.n	8000b30 <__aeabi_d2f+0x14>
 8000b96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9a:	d107      	bne.n	8000bac <__aeabi_d2f+0x90>
 8000b9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba0:	bf1e      	ittt	ne
 8000ba2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ba6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000baa:	4770      	bxne	lr
 8000bac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <IMU_convertAccel>:
		IMU_writeRegister(IMU, buf, 1);
	}
}

float IMU_convertAccel(uint8_t H_byte, uint8_t L_byte) {
	int16_t reading = (int16_t)(H_byte << 8) + L_byte;
 8000bbc:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8000bc0:	b209      	sxth	r1, r1

	// (Full-scale val / Max LSB val) * reading (LSB) = Accel (g)
	return XL_SCALE_FACTOR * reading;
 8000bc2:	ee07 1a90 	vmov	s15, r1
 8000bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8000bca:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8000bd4 <IMU_convertAccel+0x18>
 8000bce:	ee27 0a80 	vmul.f32	s0, s15, s0
 8000bd2:	4770      	bx	lr
 8000bd4:	3b1cd806 	.word	0x3b1cd806

08000bd8 <IMU_convertGyro>:

float IMU_convertGyro(uint8_t H_byte, uint8_t L_byte) {
	int16_t reading = (int16_t)(H_byte << 8) + L_byte;
 8000bd8:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8000bdc:	b209      	sxth	r1, r1

	// (Full-scale val / Max LSB val) * reading (LSB) = Accel (g)
	return GYRO_SCALE_FACTOR * reading;
 8000bde:	ee07 1a90 	vmov	s15, r1
 8000be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8000be6:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8000bf0 <IMU_convertGyro+0x18>
 8000bea:	ee27 0a80 	vmul.f32	s0, s15, s0
 8000bee:	4770      	bx	lr
 8000bf0:	3d0f5dff 	.word	0x3d0f5dff

08000bf4 <IMU_chipSelect>:
	__enable_irq();

	return status;
}

void IMU_chipSelect(uint8_t chipID) {
 8000bf4:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOB, (1 << chipID), 0); // PB0,1,2 for IMU 0,1,2
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	4081      	lsls	r1, r0
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	b289      	uxth	r1, r1
 8000bfe:	4802      	ldr	r0, [pc, #8]	; (8000c08 <IMU_chipSelect+0x14>)
 8000c00:	f001 fc44 	bl	800248c <HAL_GPIO_WritePin>
}
 8000c04:	bd08      	pop	{r3, pc}
 8000c06:	bf00      	nop
 8000c08:	48000400 	.word	0x48000400

08000c0c <IMU_chipRelease>:

void IMU_chipRelease(uint8_t chipID) {
 8000c0c:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOB, (1 << chipID), 1); // PB0,1,2 for IMU 0,1,2
 8000c0e:	2201      	movs	r2, #1
 8000c10:	fa02 f100 	lsl.w	r1, r2, r0
 8000c14:	b289      	uxth	r1, r1
 8000c16:	4802      	ldr	r0, [pc, #8]	; (8000c20 <IMU_chipRelease+0x14>)
 8000c18:	f001 fc38 	bl	800248c <HAL_GPIO_WritePin>
}
 8000c1c:	bd08      	pop	{r3, pc}
 8000c1e:	bf00      	nop
 8000c20:	48000400 	.word	0x48000400

08000c24 <IMU_readRegister>:
HAL_StatusTypeDef IMU_readRegister(IMU* IMU, uint8_t reg_addr, uint8_t* rx_buf, int num_bytes) {
 8000c24:	b570      	push	{r4, r5, r6, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	4604      	mov	r4, r0
 8000c2a:	4615      	mov	r5, r2
 8000c2c:	461e      	mov	r6, r3
	uint8_t reg_buffer[1] = {reg_addr | 0x80};
 8000c2e:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8000c32:	f88d 1004 	strb.w	r1, [sp, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c36:	b672      	cpsid	i
	IMU_chipSelect(IMU->chipID);
 8000c38:	7f00      	ldrb	r0, [r0, #28]
 8000c3a:	f7ff ffdb 	bl	8000bf4 <IMU_chipSelect>
	HAL_SPI_Transmit(IMU->hspi, (uint8_t *)reg_buffer, 1, SPI_TIMEOUT);
 8000c3e:	2301      	movs	r3, #1
 8000c40:	461a      	mov	r2, r3
 8000c42:	a901      	add	r1, sp, #4
 8000c44:	6820      	ldr	r0, [r4, #0]
 8000c46:	f002 fae6 	bl	8003216 <HAL_SPI_Transmit>
	status = HAL_SPI_Receive(IMU->hspi, (uint8_t *)rx_buf, num_bytes, SPI_TIMEOUT);
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	b2b2      	uxth	r2, r6
 8000c4e:	4629      	mov	r1, r5
 8000c50:	6820      	ldr	r0, [r4, #0]
 8000c52:	f002 fd50 	bl	80036f6 <HAL_SPI_Receive>
 8000c56:	4605      	mov	r5, r0
	IMU_chipRelease(IMU->chipID);
 8000c58:	7f20      	ldrb	r0, [r4, #28]
 8000c5a:	f7ff ffd7 	bl	8000c0c <IMU_chipRelease>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c5e:	b662      	cpsie	i
}
 8000c60:	4628      	mov	r0, r5
 8000c62:	b002      	add	sp, #8
 8000c64:	bd70      	pop	{r4, r5, r6, pc}

08000c66 <IMU_readSensorData>:
void IMU_readSensorData(IMU* IMU, SensorData* data) {
 8000c66:	b530      	push	{r4, r5, lr}
 8000c68:	b085      	sub	sp, #20
 8000c6a:	4605      	mov	r5, r0
 8000c6c:	460c      	mov	r4, r1
	IMU_readRegister(IMU, OUTX_L_G, buf, 12);
 8000c6e:	230c      	movs	r3, #12
 8000c70:	aa01      	add	r2, sp, #4
 8000c72:	2122      	movs	r1, #34	; 0x22
 8000c74:	f7ff ffd6 	bl	8000c24 <IMU_readRegister>
	data->G_X = IMU_convertGyro(buf[1], buf[0]) - IMU->GX_offset;
 8000c78:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8000c7c:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8000c80:	f7ff ffaa 	bl	8000bd8 <IMU_convertGyro>
 8000c84:	edd5 7a04 	vldr	s15, [r5, #16]
 8000c88:	ee30 0a67 	vsub.f32	s0, s0, s15
 8000c8c:	ed84 0a03 	vstr	s0, [r4, #12]
	data->G_Y = IMU_convertGyro(buf[3], buf[2]) - IMU->GY_offset;
 8000c90:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8000c94:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000c98:	f7ff ff9e 	bl	8000bd8 <IMU_convertGyro>
 8000c9c:	edd5 7a05 	vldr	s15, [r5, #20]
 8000ca0:	ee30 0a67 	vsub.f32	s0, s0, s15
 8000ca4:	ed84 0a04 	vstr	s0, [r4, #16]
	data->G_Z = IMU_convertGyro(buf[5], buf[4]) - IMU->GZ_offset;
 8000ca8:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8000cac:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8000cb0:	f7ff ff92 	bl	8000bd8 <IMU_convertGyro>
 8000cb4:	edd5 7a06 	vldr	s15, [r5, #24]
 8000cb8:	ee30 0a67 	vsub.f32	s0, s0, s15
 8000cbc:	ed84 0a05 	vstr	s0, [r4, #20]
	data->XL_X = IMU_convertAccel(buf[7], buf[6]) + IMU->X_offset;
 8000cc0:	f89d 100a 	ldrb.w	r1, [sp, #10]
 8000cc4:	f89d 000b 	ldrb.w	r0, [sp, #11]
 8000cc8:	f7ff ff78 	bl	8000bbc <IMU_convertAccel>
 8000ccc:	edd5 7a01 	vldr	s15, [r5, #4]
 8000cd0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000cd4:	ed84 0a00 	vstr	s0, [r4]
	data->XL_Y = IMU_convertAccel(buf[9], buf[8]) + IMU->Y_offset;
 8000cd8:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8000cdc:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8000ce0:	f7ff ff6c 	bl	8000bbc <IMU_convertAccel>
 8000ce4:	edd5 7a02 	vldr	s15, [r5, #8]
 8000ce8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000cec:	ed84 0a01 	vstr	s0, [r4, #4]
	data->XL_Z = IMU_convertAccel(buf[11], buf[10]) - IMU->Z_offset;
 8000cf0:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8000cf4:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8000cf8:	f7ff ff60 	bl	8000bbc <IMU_convertAccel>
 8000cfc:	edd5 7a03 	vldr	s15, [r5, #12]
 8000d00:	ee30 0a67 	vsub.f32	s0, s0, s15
 8000d04:	ed84 0a02 	vstr	s0, [r4, #8]
}
 8000d08:	b005      	add	sp, #20
 8000d0a:	bd30      	pop	{r4, r5, pc}

08000d0c <IMU_writeRegister>:
HAL_StatusTypeDef IMU_writeRegister(IMU* IMU, uint8_t* tx_buf, int num_bytes) {
 8000d0c:	b570      	push	{r4, r5, r6, lr}
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460e      	mov	r6, r1
 8000d12:	4615      	mov	r5, r2
  __ASM volatile ("cpsid i" : : : "memory");
 8000d14:	b672      	cpsid	i
	IMU_chipSelect(IMU->chipID);
 8000d16:	7f00      	ldrb	r0, [r0, #28]
 8000d18:	f7ff ff6c 	bl	8000bf4 <IMU_chipSelect>
	status = HAL_SPI_Transmit(IMU->hspi, (uint8_t *)tx_buf, num_bytes + 1, SPI_TIMEOUT);
 8000d1c:	1c6a      	adds	r2, r5, #1
 8000d1e:	2301      	movs	r3, #1
 8000d20:	b292      	uxth	r2, r2
 8000d22:	4631      	mov	r1, r6
 8000d24:	6820      	ldr	r0, [r4, #0]
 8000d26:	f002 fa76 	bl	8003216 <HAL_SPI_Transmit>
 8000d2a:	4605      	mov	r5, r0
	IMU_chipRelease(IMU->chipID);
 8000d2c:	7f20      	ldrb	r0, [r4, #28]
 8000d2e:	f7ff ff6d 	bl	8000c0c <IMU_chipRelease>
  __ASM volatile ("cpsie i" : : : "memory");
 8000d32:	b662      	cpsie	i
}
 8000d34:	4628      	mov	r0, r5
 8000d36:	bd70      	pop	{r4, r5, r6, pc}

08000d38 <IMU_init>:
void IMU_init(SPI_HandleTypeDef* hspi, IMU* IMU, uint8_t chipID) {
 8000d38:	b510      	push	{r4, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	460c      	mov	r4, r1
	IMU->hspi = hspi;
 8000d3e:	6008      	str	r0, [r1, #0]
	IMU->X_offset = IMU_offsets[3*chipID + 0];
 8000d40:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8000d44:	4869      	ldr	r0, [pc, #420]	; (8000eec <IMU_init+0x1b4>)
 8000d46:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8000d4a:	6809      	ldr	r1, [r1, #0]
 8000d4c:	6061      	str	r1, [r4, #4]
	IMU->Y_offset = IMU_offsets[3*chipID + 1];
 8000d4e:	f103 0c01 	add.w	ip, r3, #1
 8000d52:	eb00 018c 	add.w	r1, r0, ip, lsl #2
 8000d56:	6809      	ldr	r1, [r1, #0]
 8000d58:	60a1      	str	r1, [r4, #8]
	IMU->Z_offset = IMU_offsets[3*chipID + 2];
 8000d5a:	f103 0e02 	add.w	lr, r3, #2
 8000d5e:	eb00 008e 	add.w	r0, r0, lr, lsl #2
 8000d62:	6801      	ldr	r1, [r0, #0]
 8000d64:	60e1      	str	r1, [r4, #12]
	IMU->GX_offset = IMU_Goffsets[3*chipID + 0];
 8000d66:	4962      	ldr	r1, [pc, #392]	; (8000ef0 <IMU_init+0x1b8>)
 8000d68:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	6123      	str	r3, [r4, #16]
	IMU->GY_offset = IMU_Goffsets[3*chipID + 1];
 8000d70:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 8000d74:	f8dc 3000 	ldr.w	r3, [ip]
 8000d78:	6163      	str	r3, [r4, #20]
	IMU->GZ_offset = IMU_Goffsets[3*chipID + 2];
 8000d7a:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8000d7e:	680b      	ldr	r3, [r1, #0]
 8000d80:	61a3      	str	r3, [r4, #24]
	IMU->chipID = chipID;
 8000d82:	7722      	strb	r2, [r4, #28]
	buf[0] = CTRL3_C;
 8000d84:	2312      	movs	r3, #18
 8000d86:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = 0x04;
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	f88d 3005 	strb.w	r3, [sp, #5]
	IMU_writeRegister(IMU, buf, 1);
 8000d90:	2201      	movs	r2, #1
 8000d92:	eb0d 0103 	add.w	r1, sp, r3
 8000d96:	4620      	mov	r0, r4
 8000d98:	f7ff ffb8 	bl	8000d0c <IMU_writeRegister>
	IMU_readRegister(IMU, WHO_AM_I, buf, 1);
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	aa01      	add	r2, sp, #4
 8000da0:	210f      	movs	r1, #15
 8000da2:	4620      	mov	r0, r4
 8000da4:	f7ff ff3e 	bl	8000c24 <IMU_readRegister>
	assert(buf[0] == WHO_I_AM_ID); // Crash if not connected properly
 8000da8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000dac:	2b6a      	cmp	r3, #106	; 0x6a
 8000dae:	d153      	bne.n	8000e58 <IMU_init+0x120>
	if (IS_COMP_FILTER) { // Complementary Filter Setup
 8000db0:	4b50      	ldr	r3, [pc, #320]	; (8000ef4 <IMU_init+0x1bc>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d055      	beq.n	8000e64 <IMU_init+0x12c>
		buf[0] = CTRL1_XL;
 8000db8:	2310      	movs	r3, #16
 8000dba:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x3E;
 8000dbe:	233e      	movs	r3, #62	; 0x3e
 8000dc0:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	a901      	add	r1, sp, #4
 8000dc8:	4620      	mov	r0, r4
 8000dca:	f7ff ff9f 	bl	8000d0c <IMU_writeRegister>
		buf[0] = CTRL2_G;
 8000dce:	2311      	movs	r3, #17
 8000dd0:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x38;
 8000dd4:	2338      	movs	r3, #56	; 0x38
 8000dd6:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000dda:	2201      	movs	r2, #1
 8000ddc:	a901      	add	r1, sp, #4
 8000dde:	4620      	mov	r0, r4
 8000de0:	f7ff ff94 	bl	8000d0c <IMU_writeRegister>
		buf[0] = INT2_CTRL;
 8000de4:	230e      	movs	r3, #14
 8000de6:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x03;
 8000dea:	2303      	movs	r3, #3
 8000dec:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000df0:	2201      	movs	r2, #1
 8000df2:	a901      	add	r1, sp, #4
 8000df4:	4620      	mov	r0, r4
 8000df6:	f7ff ff89 	bl	8000d0c <IMU_writeRegister>
		buf[0] = CTRL5_C;
 8000dfa:	2314      	movs	r3, #20
 8000dfc:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x60;
 8000e00:	2360      	movs	r3, #96	; 0x60
 8000e02:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000e06:	2201      	movs	r2, #1
 8000e08:	a901      	add	r1, sp, #4
 8000e0a:	4620      	mov	r0, r4
 8000e0c:	f7ff ff7e 	bl	8000d0c <IMU_writeRegister>
		buf[0] = CTRL6_C;
 8000e10:	2315      	movs	r3, #21
 8000e12:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x04;
 8000e16:	2304      	movs	r3, #4
 8000e18:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	eb0d 0103 	add.w	r1, sp, r3
 8000e22:	4620      	mov	r0, r4
 8000e24:	f7ff ff72 	bl	8000d0c <IMU_writeRegister>
		buf[0] = CTRL7_G;
 8000e28:	2316      	movs	r3, #22
 8000e2a:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x70;
 8000e2e:	2370      	movs	r3, #112	; 0x70
 8000e30:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000e34:	2201      	movs	r2, #1
 8000e36:	a901      	add	r1, sp, #4
 8000e38:	4620      	mov	r0, r4
 8000e3a:	f7ff ff67 	bl	8000d0c <IMU_writeRegister>
		buf[0] = CTRL8_XL;
 8000e3e:	2317      	movs	r3, #23
 8000e40:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x00;
 8000e44:	2300      	movs	r3, #0
 8000e46:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	a901      	add	r1, sp, #4
 8000e4e:	4620      	mov	r0, r4
 8000e50:	f7ff ff5c 	bl	8000d0c <IMU_writeRegister>
}
 8000e54:	b004      	add	sp, #16
 8000e56:	bd10      	pop	{r4, pc}
	assert(buf[0] == WHO_I_AM_ID); // Crash if not connected properly
 8000e58:	4b27      	ldr	r3, [pc, #156]	; (8000ef8 <IMU_init+0x1c0>)
 8000e5a:	4a28      	ldr	r2, [pc, #160]	; (8000efc <IMU_init+0x1c4>)
 8000e5c:	212c      	movs	r1, #44	; 0x2c
 8000e5e:	4828      	ldr	r0, [pc, #160]	; (8000f00 <IMU_init+0x1c8>)
 8000e60:	f003 f98a 	bl	8004178 <__assert_func>
		buf[0] = CTRL1_XL;
 8000e64:	2310      	movs	r3, #16
 8000e66:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x3C;
 8000e6a:	233c      	movs	r3, #60	; 0x3c
 8000e6c:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000e70:	2201      	movs	r2, #1
 8000e72:	a901      	add	r1, sp, #4
 8000e74:	4620      	mov	r0, r4
 8000e76:	f7ff ff49 	bl	8000d0c <IMU_writeRegister>
		buf[0] = CTRL2_G;
 8000e7a:	2311      	movs	r3, #17
 8000e7c:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x38;
 8000e80:	2338      	movs	r3, #56	; 0x38
 8000e82:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000e86:	2201      	movs	r2, #1
 8000e88:	a901      	add	r1, sp, #4
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	f7ff ff3e 	bl	8000d0c <IMU_writeRegister>
		buf[0] = INT2_CTRL;
 8000e90:	230e      	movs	r3, #14
 8000e92:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x03;
 8000e96:	2303      	movs	r3, #3
 8000e98:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	a901      	add	r1, sp, #4
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	f7ff ff33 	bl	8000d0c <IMU_writeRegister>
		buf[0] = CTRL5_C;
 8000ea6:	2314      	movs	r3, #20
 8000ea8:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x60;
 8000eac:	2360      	movs	r3, #96	; 0x60
 8000eae:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	a901      	add	r1, sp, #4
 8000eb6:	4620      	mov	r0, r4
 8000eb8:	f7ff ff28 	bl	8000d0c <IMU_writeRegister>
		buf[0] = CTRL6_C;
 8000ebc:	2315      	movs	r3, #21
 8000ebe:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x04;
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	eb0d 0103 	add.w	r1, sp, r3
 8000ece:	4620      	mov	r0, r4
 8000ed0:	f7ff ff1c 	bl	8000d0c <IMU_writeRegister>
		buf[0] = CTRL7_G;
 8000ed4:	2316      	movs	r3, #22
 8000ed6:	f88d 3004 	strb.w	r3, [sp, #4]
		buf[1] = 0x00;
 8000eda:	2300      	movs	r3, #0
 8000edc:	f88d 3005 	strb.w	r3, [sp, #5]
		IMU_writeRegister(IMU, buf, 1);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	a901      	add	r1, sp, #4
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	f7ff ff11 	bl	8000d0c <IMU_writeRegister>
}
 8000eea:	e7b3      	b.n	8000e54 <IMU_init+0x11c>
 8000eec:	200000cc 	.word	0x200000cc
 8000ef0:	200000a8 	.word	0x200000a8
 8000ef4:	08005e70 	.word	0x08005e70
 8000ef8:	08005dc4 	.word	0x08005dc4
 8000efc:	08005df0 	.word	0x08005df0
 8000f00:	08005ddc 	.word	0x08005ddc

08000f04 <XBeeChecksum>:
// Calculates a checksum for a given XBee frame
uint8_t XBeeChecksum(uint8_t frame[], uint8_t frame_size)
{
	uint8_t checksum = 0;
	uint8_t ret = 0;
	for (int i = 0; i < frame_size; i++) // skip bytes 0-2, and last
 8000f04:	2200      	movs	r2, #0
	uint8_t checksum = 0;
 8000f06:	4613      	mov	r3, r2
	for (int i = 0; i < frame_size; i++) // skip bytes 0-2, and last
 8000f08:	e006      	b.n	8000f18 <XBeeChecksum+0x14>
	{
		uint8_t temp = frame[i+3];
 8000f0a:	f102 0c03 	add.w	ip, r2, #3
 8000f0e:	f810 c00c 	ldrb.w	ip, [r0, ip]
		checksum += temp;
 8000f12:	4463      	add	r3, ip
 8000f14:	b2db      	uxtb	r3, r3
	for (int i = 0; i < frame_size; i++) // skip bytes 0-2, and last
 8000f16:	3201      	adds	r2, #1
 8000f18:	4291      	cmp	r1, r2
 8000f1a:	dcf6      	bgt.n	8000f0a <XBeeChecksum+0x6>
	}
	checksum = 0x00FF - checksum;
 8000f1c:	43d8      	mvns	r0, r3
	ret = (uint8_t)(checksum & 0x00FF);
	return ret;
} // XBeeChecksum()
 8000f1e:	b2c0      	uxtb	r0, r0
 8000f20:	4770      	bx	lr
	...

08000f24 <makeXBeeTXFrame>:
		uint8_t data[],
		uint8_t data_size, // in bytes
		uint8_t frame[],
		uint8_t comp
)
{
 8000f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f26:	460e      	mov	r6, r1
 8000f28:	461d      	mov	r5, r3
 8000f2a:	9c06      	ldr	r4, [sp, #24]
	// only do 14 bytes of data to avoid exceeding 32-byte frame size
	if (data_size > 16) { data_size = 16; }
 8000f2c:	2b10      	cmp	r3, #16
 8000f2e:	d900      	bls.n	8000f32 <makeXBeeTXFrame+0xe>
 8000f30:	2510      	movs	r5, #16

	uint16_t frame_size = 0x0E + data_size;
 8000f32:	f105 030e 	add.w	r3, r5, #14
	uint32_t checksum = 0;

	frame[0] = XBEE_START;
 8000f36:	217e      	movs	r1, #126	; 0x7e
 8000f38:	7021      	strb	r1, [r4, #0]
	frame[1] = ((frame_size) >> 8) & 0x00FF; // length upper byte
 8000f3a:	0a1b      	lsrs	r3, r3, #8
 8000f3c:	7063      	strb	r3, [r4, #1]
	frame[2] = ((frame_size) >> 0) & 0x00FF; // length lower byte
 8000f3e:	f105 010e 	add.w	r1, r5, #14
 8000f42:	b2c9      	uxtb	r1, r1
 8000f44:	70a1      	strb	r1, [r4, #2]
	frame[3] = frame_type;
 8000f46:	70e0      	strb	r0, [r4, #3]
	frame[4] = frame_id;
 8000f48:	7126      	strb	r6, [r4, #4]
	if (comp == 1)
 8000f4a:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d01c      	beq.n	8000f8c <makeXBeeTXFrame+0x68>
			frame[i + 5] = temp;
		}
	}
	else
	{
		for (int i = 0; i < 8; i++) // write 64-bit dest
 8000f52:	2300      	movs	r3, #0
 8000f54:	e01f      	b.n	8000f96 <makeXBeeTXFrame+0x72>
			frame[i + 5] = temp;
 8000f56:	1d70      	adds	r0, r6, #5
 8000f58:	5423      	strb	r3, [r4, r0]
		for (int i = 0; i < 8; i++) // write 64-bit dest
 8000f5a:	3601      	adds	r6, #1
 8000f5c:	2e07      	cmp	r6, #7
 8000f5e:	dc31      	bgt.n	8000fc4 <makeXBeeTXFrame+0xa0>
			uint8_t temp = (COMPBEE_ADDR >> 8*(7-i));
 8000f60:	f1c6 0307 	rsb	r3, r6, #7
 8000f64:	00d8      	lsls	r0, r3, #3
 8000f66:	f8df e098 	ldr.w	lr, [pc, #152]	; 8001000 <makeXBeeTXFrame+0xdc>
 8000f6a:	f1c0 0720 	rsb	r7, r0, #32
 8000f6e:	f1b0 0c20 	subs.w	ip, r0, #32
 8000f72:	4b22      	ldr	r3, [pc, #136]	; (8000ffc <makeXBeeTXFrame+0xd8>)
 8000f74:	fa23 f300 	lsr.w	r3, r3, r0
 8000f78:	fa0e f707 	lsl.w	r7, lr, r7
 8000f7c:	ea43 0307 	orr.w	r3, r3, r7
 8000f80:	d4e9      	bmi.n	8000f56 <makeXBeeTXFrame+0x32>
 8000f82:	fa4e fc0c 	asr.w	ip, lr, ip
 8000f86:	ea43 030c 	orr.w	r3, r3, ip
 8000f8a:	e7e4      	b.n	8000f56 <makeXBeeTXFrame+0x32>
		for (int i = 0; i < 8; i++) // write 64-bit dest
 8000f8c:	2600      	movs	r6, #0
 8000f8e:	e7e5      	b.n	8000f5c <makeXBeeTXFrame+0x38>
		{
			uint8_t temp = (XBEE_DEST_ADDR >> 8*(7-i));
			frame[i + 5] = temp;
 8000f90:	1d5e      	adds	r6, r3, #5
 8000f92:	55a0      	strb	r0, [r4, r6]
		for (int i = 0; i < 8; i++) // write 64-bit dest
 8000f94:	3301      	adds	r3, #1
 8000f96:	2b07      	cmp	r3, #7
 8000f98:	dc14      	bgt.n	8000fc4 <makeXBeeTXFrame+0xa0>
			uint8_t temp = (XBEE_DEST_ADDR >> 8*(7-i));
 8000f9a:	f1c3 0007 	rsb	r0, r3, #7
 8000f9e:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
 8000fa2:	4f17      	ldr	r7, [pc, #92]	; (8001000 <makeXBeeTXFrame+0xdc>)
 8000fa4:	f1cc 0e20 	rsb	lr, ip, #32
 8000fa8:	f1bc 0620 	subs.w	r6, ip, #32
 8000fac:	4815      	ldr	r0, [pc, #84]	; (8001004 <makeXBeeTXFrame+0xe0>)
 8000fae:	fa20 f00c 	lsr.w	r0, r0, ip
 8000fb2:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000fb6:	ea40 000e 	orr.w	r0, r0, lr
 8000fba:	d4e9      	bmi.n	8000f90 <makeXBeeTXFrame+0x6c>
 8000fbc:	fa47 f606 	asr.w	r6, r7, r6
 8000fc0:	4330      	orrs	r0, r6
 8000fc2:	e7e5      	b.n	8000f90 <makeXBeeTXFrame+0x6c>
		}
	}
	frame[13] = 0xFF; // 16-bit addr upper
 8000fc4:	23ff      	movs	r3, #255	; 0xff
 8000fc6:	7363      	strb	r3, [r4, #13]
	frame[14] = 0xFE; // 16-bit addr lower
 8000fc8:	23fe      	movs	r3, #254	; 0xfe
 8000fca:	73a3      	strb	r3, [r4, #14]
	frame[15] = 0x00; // broadcast_radius
 8000fcc:	2000      	movs	r0, #0
 8000fce:	73e0      	strb	r0, [r4, #15]
	frame[16] = 0x00; // options
 8000fd0:	7420      	strb	r0, [r4, #16]
	for (int i = 0; i < data_size; i++) // add data payload to frame
 8000fd2:	e006      	b.n	8000fe2 <makeXBeeTXFrame+0xbe>
	{
		uint8_t temp = data[i];
 8000fd4:	f812 c000 	ldrb.w	ip, [r2, r0]
		frame[i + 17] = temp;
 8000fd8:	f100 0311 	add.w	r3, r0, #17
 8000fdc:	f804 c003 	strb.w	ip, [r4, r3]
	for (int i = 0; i < data_size; i++) // add data payload to frame
 8000fe0:	3001      	adds	r0, #1
 8000fe2:	4285      	cmp	r5, r0
 8000fe4:	dcf6      	bgt.n	8000fd4 <makeXBeeTXFrame+0xb0>
	}

	// update checksum
	checksum = XBeeChecksum(frame, frame_size);
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	f7ff ff8c 	bl	8000f04 <XBeeChecksum>
	frame[data_size + 17] = checksum;
 8000fec:	f105 0311 	add.w	r3, r5, #17
 8000ff0:	54e0      	strb	r0, [r4, r3]
	return frame_size + 4;
 8000ff2:	f105 0012 	add.w	r0, r5, #18
}
 8000ff6:	b2c0      	uxtb	r0, r0
 8000ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	4176e7fd 	.word	0x4176e7fd
 8001000:	0013a200 	.word	0x0013a200
 8001004:	4176eac6 	.word	0x4176eac6

08001008 <XBeeTransmitReceive>:
uint8_t XBeeTransmitReceive(uint8_t* data_buf, uint8_t* xbee_rx_buf, uint8_t tx_data_size, uint8_t comp) {
 8001008:	b570      	push	{r4, r5, r6, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	460c      	mov	r4, r1
	uint8_t tx_size = makeXBeeTXFrame(XBEE_TRANSMIT_FRAME, 0x01, data_buf, tx_data_size, xbee_tx_buf, comp);
 800100e:	9301      	str	r3, [sp, #4]
 8001010:	ae02      	add	r6, sp, #8
 8001012:	9600      	str	r6, [sp, #0]
 8001014:	4613      	mov	r3, r2
 8001016:	4602      	mov	r2, r0
 8001018:	2101      	movs	r1, #1
 800101a:	2010      	movs	r0, #16
 800101c:	f7ff ff82 	bl	8000f24 <makeXBeeTXFrame>
 8001020:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(XBEE_CS_PORT, XBEE_CS_PIN, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001028:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102c:	f001 fa2e 	bl	800248c <HAL_GPIO_WritePin>
  __ASM volatile ("cpsid i" : : : "memory");
 8001030:	b672      	cpsid	i
	HAL_StatusTypeDef stat = HAL_SPI_TransmitReceive(XBEE_SPI_HANDLER, xbee_tx_buf, xbee_rx_buf, tx_size, 7);
 8001032:	2307      	movs	r3, #7
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	b2ab      	uxth	r3, r5
 8001038:	4622      	mov	r2, r4
 800103a:	4631      	mov	r1, r6
 800103c:	4808      	ldr	r0, [pc, #32]	; (8001060 <XBeeTransmitReceive+0x58>)
 800103e:	f002 f9eb 	bl	8003418 <HAL_SPI_TransmitReceive>
 8001042:	4604      	mov	r4, r0
  __ASM volatile ("cpsie i" : : : "memory");
 8001044:	b662      	cpsie	i
	HAL_GPIO_WritePin(XBEE_CS_PORT, XBEE_CS_PIN, 1);
 8001046:	2201      	movs	r2, #1
 8001048:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800104c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001050:	f001 fa1c 	bl	800248c <HAL_GPIO_WritePin>
	if (stat == HAL_OK) return 1;
 8001054:	b114      	cbz	r4, 800105c <XBeeTransmitReceive+0x54>
	return 0;
 8001056:	2000      	movs	r0, #0
}
 8001058:	b00a      	add	sp, #40	; 0x28
 800105a:	bd70      	pop	{r4, r5, r6, pc}
	if (stat == HAL_OK) return 1;
 800105c:	2001      	movs	r0, #1
 800105e:	e7fb      	b.n	8001058 <XBeeTransmitReceive+0x50>
 8001060:	20000248 	.word	0x20000248

08001064 <updateDirection>:
		calibrated = 1;
		heading = 0;
	}
}

void updateDirection(float timeDelta) {
 8001064:	b510      	push	{r4, lr}
 8001066:	ed2d 8b02 	vpush	{d8}

	float term1 = 2 * (q_f32[0] * q_f32[2] - q_f32[1] * q_f32[3]);
	float term2 = 1 - 2 * (q_f32[2] * q_f32[2] - q_f32[3] * q_f32[3]);
	heading = atan2f(term1, term2);*/

	if (personWeight) {
 800106a:	4b24      	ldr	r3, [pc, #144]	; (80010fc <updateDirection+0x98>)
 800106c:	edd3 7a00 	vldr	s15, [r3]
 8001070:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001078:	d032      	beq.n	80010e0 <updateDirection+0x7c>
		heading += w_avg_b0_f32[2] * timeDelta * DIR_ADJUSTMENT*personWeight;
 800107a:	4b21      	ldr	r3, [pc, #132]	; (8001100 <updateDirection+0x9c>)
 800107c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001080:	ee20 0a47 	vnmul.f32	s0, s0, s14
 8001084:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001088:	4b1e      	ldr	r3, [pc, #120]	; (8001104 <updateDirection+0xa0>)
 800108a:	edd3 7a00 	vldr	s15, [r3]
 800108e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8001092:	ed83 0a00 	vstr	s0, [r3]
	} else {
		heading += w_avg_b0_f32[2] * timeDelta * DIR_ADJUSTMENT;
	}

	heading = (float)((int)heading % 360);
 8001096:	4c1b      	ldr	r4, [pc, #108]	; (8001104 <updateDirection+0xa0>)
 8001098:	edd4 7a00 	vldr	s15, [r4]
 800109c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010a0:	ee17 2a90 	vmov	r2, s15
 80010a4:	4b18      	ldr	r3, [pc, #96]	; (8001108 <updateDirection+0xa4>)
 80010a6:	fb83 1302 	smull	r1, r3, r3, r2
 80010aa:	1899      	adds	r1, r3, r2
 80010ac:	17d3      	asrs	r3, r2, #31
 80010ae:	ebc3 2321 	rsb	r3, r3, r1, asr #8
 80010b2:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80010b6:	fb01 2313 	mls	r3, r1, r3, r2
 80010ba:	ee07 3a90 	vmov	s15, r3
 80010be:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80010c2:	ed84 0a00 	vstr	s0, [r4]

	heading = roundf(heading/5) * 5;
 80010c6:	eeb1 8a04 	vmov.f32	s16, #20	; 0x40a00000  5.0
 80010ca:	ee80 0a08 	vdiv.f32	s0, s0, s16
 80010ce:	f004 f8cb 	bl	8005268 <roundf>
 80010d2:	ee20 0a08 	vmul.f32	s0, s0, s16
 80010d6:	ed84 0a00 	vstr	s0, [r4]

}
 80010da:	ecbd 8b02 	vpop	{d8}
 80010de:	bd10      	pop	{r4, pc}
		heading += w_avg_b0_f32[2] * timeDelta * DIR_ADJUSTMENT;
 80010e0:	4b07      	ldr	r3, [pc, #28]	; (8001100 <updateDirection+0x9c>)
 80010e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80010e6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <updateDirection+0xa0>)
 80010ec:	ed93 0a00 	vldr	s0, [r3]
 80010f0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80010f4:	ed83 0a00 	vstr	s0, [r3]
 80010f8:	e7cd      	b.n	8001096 <updateDirection+0x32>
 80010fa:	bf00      	nop
 80010fc:	200000f8 	.word	0x200000f8
 8001100:	20000110 	.word	0x20000110
 8001104:	200000f4 	.word	0x200000f4
 8001108:	b60b60b7 	.word	0xb60b60b7

0800110c <returnCurrentPosition>:


}

float returnCurrentPosition(Position* returnPos) {
	returnPos->X = pos.X;
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <returnCurrentPosition+0x18>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	6002      	str	r2, [r0, #0]
	returnPos->Y = pos.Y;
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	6042      	str	r2, [r0, #4]
	returnPos->Z = pos.Z;
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	6083      	str	r3, [r0, #8]

	return heading;
}
 800111a:	4b03      	ldr	r3, [pc, #12]	; (8001128 <returnCurrentPosition+0x1c>)
 800111c:	ed93 0a00 	vldr	s0, [r3]
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	20000100 	.word	0x20000100
 8001128:	200000f4 	.word	0x200000f4

0800112c <getNextGyroReading>:

	// Determine |w_avg_b0|
	w_avg_b0_mag = vec_mag_f32(w_avg_b0_f32);
}

void getNextGyroReading(SensorData* IMU0_data, SensorData* IMU1_data, SensorData* IMU2_data, float* gyroOut) {
 800112c:	b530      	push	{r4, r5, lr}
	w_avg_x_ring[w_oldest] = (IMU0_data->G_X + IMU1_data->G_X + IMU2_data->G_X) / 3;
 800112e:	edd0 7a03 	vldr	s15, [r0, #12]
 8001132:	ed91 7a03 	vldr	s14, [r1, #12]
 8001136:	ee77 7a87 	vadd.f32	s15, s15, s14
 800113a:	ed92 7a03 	vldr	s14, [r2, #12]
 800113e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001142:	4d2d      	ldr	r5, [pc, #180]	; (80011f8 <getNextGyroReading+0xcc>)
 8001144:	f895 c000 	ldrb.w	ip, [r5]
 8001148:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800114c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001150:	4c2a      	ldr	r4, [pc, #168]	; (80011fc <getNextGyroReading+0xd0>)
 8001152:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 8001156:	edc4 6a00 	vstr	s13, [r4]
	w_avg_y_ring[w_oldest] = (IMU0_data->G_Y + IMU1_data->G_Y + IMU2_data->G_Y) / 3;
 800115a:	edd0 7a04 	vldr	s15, [r0, #16]
 800115e:	edd1 6a04 	vldr	s13, [r1, #16]
 8001162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001166:	edd2 6a04 	vldr	s13, [r2, #16]
 800116a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800116e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001172:	4c23      	ldr	r4, [pc, #140]	; (8001200 <getNextGyroReading+0xd4>)
 8001174:	eb04 0e8c 	add.w	lr, r4, ip, lsl #2
 8001178:	edce 6a00 	vstr	s13, [lr]
	w_avg_z_ring[w_oldest] = (IMU0_data->G_Z + IMU1_data->G_Z + IMU2_data->G_Z) / 3;
 800117c:	edd0 7a05 	vldr	s15, [r0, #20]
 8001180:	edd1 6a05 	vldr	s13, [r1, #20]
 8001184:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001188:	edd2 6a05 	vldr	s13, [r2, #20]
 800118c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001190:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001194:	4a1b      	ldr	r2, [pc, #108]	; (8001204 <getNextGyroReading+0xd8>)
 8001196:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800119a:	edc2 6a00 	vstr	s13, [r2]

	w_oldest = (w_oldest + 1) % RING_SIZE;
 800119e:	2200      	movs	r2, #0
 80011a0:	702a      	strb	r2, [r5, #0]

	gyroOut[0] = 0;
 80011a2:	2100      	movs	r1, #0
 80011a4:	6019      	str	r1, [r3, #0]
	gyroOut[1] = 0;
 80011a6:	6059      	str	r1, [r3, #4]
	gyroOut[2] = 0;
 80011a8:	6099      	str	r1, [r3, #8]

	int i;
	for(i = 0; i < RING_SIZE; ++i) {
 80011aa:	2a00      	cmp	r2, #0
 80011ac:	dd00      	ble.n	80011b0 <getNextGyroReading+0x84>
	}

	gyroOut[0] /= RING_SIZE;
	gyroOut[1] /= RING_SIZE;
	gyroOut[2] /= RING_SIZE;
}
 80011ae:	bd30      	pop	{r4, r5, pc}
		gyroOut[0] += w_avg_x_ring[i];
 80011b0:	4912      	ldr	r1, [pc, #72]	; (80011fc <getNextGyroReading+0xd0>)
 80011b2:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80011b6:	ed91 7a00 	vldr	s14, [r1]
 80011ba:	edd3 7a00 	vldr	s15, [r3]
 80011be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011c2:	edc3 7a00 	vstr	s15, [r3]
		gyroOut[1] += w_avg_y_ring[i];
 80011c6:	490e      	ldr	r1, [pc, #56]	; (8001200 <getNextGyroReading+0xd4>)
 80011c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80011cc:	ed91 7a00 	vldr	s14, [r1]
 80011d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80011d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011d8:	edc3 7a01 	vstr	s15, [r3, #4]
		gyroOut[2] += w_avg_z_ring[i];
 80011dc:	4909      	ldr	r1, [pc, #36]	; (8001204 <getNextGyroReading+0xd8>)
 80011de:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80011e2:	ed91 7a00 	vldr	s14, [r1]
 80011e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80011ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011ee:	edc3 7a02 	vstr	s15, [r3, #8]
	for(i = 0; i < RING_SIZE; ++i) {
 80011f2:	3201      	adds	r2, #1
 80011f4:	e7d9      	b.n	80011aa <getNextGyroReading+0x7e>
 80011f6:	bf00      	nop
 80011f8:	2000012c 	.word	0x2000012c
 80011fc:	20000120 	.word	0x20000120
 8001200:	20000124 	.word	0x20000124
 8001204:	20000128 	.word	0x20000128

08001208 <createZUPTNode>:
	}

	return curr_phase;
}

ZUPTNode* createZUPTNode(float w_mag) {
 8001208:	b508      	push	{r3, lr}
 800120a:	ed2d 8b02 	vpush	{d8}
 800120e:	eeb0 8a40 	vmov.f32	s16, s0
	ZUPTNode* node = (ZUPTNode*)malloc(sizeof(ZUPTNode));
 8001212:	2008      	movs	r0, #8
 8001214:	f003 f80a 	bl	800422c <malloc>

	node->next = NULL;
 8001218:	2200      	movs	r2, #0
 800121a:	6002      	str	r2, [r0, #0]
	node->w_mag_sq = w_mag * w_mag;
 800121c:	ee28 8a08 	vmul.f32	s16, s16, s16
 8001220:	ed80 8a01 	vstr	s16, [r0, #4]

	return node;
}
 8001224:	ecbd 8b02 	vpop	{d8}
 8001228:	bd08      	pop	{r3, pc}
	...

0800122c <initZUPT>:
void initZUPT(void) {
 800122c:	b538      	push	{r3, r4, r5, lr}
	ZUPTHead = (ZUPTNode*)createZUPTNode(0.0);
 800122e:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8001254 <initZUPT+0x28>
 8001232:	f7ff ffe9 	bl	8001208 <createZUPTNode>
 8001236:	4605      	mov	r5, r0
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <initZUPT+0x2c>)
 800123a:	6018      	str	r0, [r3, #0]
	for(i = 0; i < ZUPT_W-1; ++i) {
 800123c:	2400      	movs	r4, #0
 800123e:	e006      	b.n	800124e <initZUPT+0x22>
		tempNode->next = (ZUPTNode*)createZUPTNode(0.0);
 8001240:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8001254 <initZUPT+0x28>
 8001244:	f7ff ffe0 	bl	8001208 <createZUPTNode>
 8001248:	6028      	str	r0, [r5, #0]
	for(i = 0; i < ZUPT_W-1; ++i) {
 800124a:	3401      	adds	r4, #1
		tempNode = (ZUPTNode*)tempNode->next;
 800124c:	4605      	mov	r5, r0
	for(i = 0; i < ZUPT_W-1; ++i) {
 800124e:	2c0d      	cmp	r4, #13
 8001250:	ddf6      	ble.n	8001240 <initZUPT+0x14>
}
 8001252:	bd38      	pop	{r3, r4, r5, pc}
 8001254:	00000000 	.word	0x00000000
 8001258:	200000f0 	.word	0x200000f0
 800125c:	00000000 	.word	0x00000000

08001260 <detectZUPTPhase>:
enum PHASE detectZUPTPhase(void) {
 8001260:	b510      	push	{r4, lr}
 8001262:	ed2d 8b02 	vpush	{d8}
	assert(ZUPTHead != NULL);
 8001266:	4b40      	ldr	r3, [pc, #256]	; (8001368 <detectZUPTPhase+0x108>)
 8001268:	6818      	ldr	r0, [r3, #0]
 800126a:	b188      	cbz	r0, 8001290 <detectZUPTPhase+0x30>
	ZUPTNode* tempNode = (ZUPTNode*)ZUPTHead->next;
 800126c:	6804      	ldr	r4, [r0, #0]
	free(ZUPTHead);
 800126e:	f002 ffe5 	bl	800423c <free>
	ZUPTHead = tempNode;
 8001272:	4b3d      	ldr	r3, [pc, #244]	; (8001368 <detectZUPTPhase+0x108>)
 8001274:	601c      	str	r4, [r3, #0]
	for(i = 0; i < ZUPT_W-2; ++i) {
 8001276:	2300      	movs	r3, #0
	float sum = 0;
 8001278:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800136c <detectZUPTPhase+0x10c>
	for(i = 0; i < ZUPT_W-2; ++i) {
 800127c:	2b0c      	cmp	r3, #12
 800127e:	dc15      	bgt.n	80012ac <detectZUPTPhase+0x4c>
		assert(tempNode != NULL);
 8001280:	b16c      	cbz	r4, 800129e <detectZUPTPhase+0x3e>
		sum += tempNode->w_mag_sq;
 8001282:	ed94 7a01 	vldr	s14, [r4, #4]
 8001286:	ee77 7a87 	vadd.f32	s15, s15, s14
		tempNode = (ZUPTNode*)tempNode->next;
 800128a:	6824      	ldr	r4, [r4, #0]
	for(i = 0; i < ZUPT_W-2; ++i) {
 800128c:	3301      	adds	r3, #1
 800128e:	e7f5      	b.n	800127c <detectZUPTPhase+0x1c>
	assert(ZUPTHead != NULL);
 8001290:	4b37      	ldr	r3, [pc, #220]	; (8001370 <detectZUPTPhase+0x110>)
 8001292:	4a38      	ldr	r2, [pc, #224]	; (8001374 <detectZUPTPhase+0x114>)
 8001294:	f240 1107 	movw	r1, #263	; 0x107
 8001298:	4837      	ldr	r0, [pc, #220]	; (8001378 <detectZUPTPhase+0x118>)
 800129a:	f002 ff6d 	bl	8004178 <__assert_func>
		assert(tempNode != NULL);
 800129e:	4b37      	ldr	r3, [pc, #220]	; (800137c <detectZUPTPhase+0x11c>)
 80012a0:	4a34      	ldr	r2, [pc, #208]	; (8001374 <detectZUPTPhase+0x114>)
 80012a2:	f44f 7188 	mov.w	r1, #272	; 0x110
 80012a6:	4834      	ldr	r0, [pc, #208]	; (8001378 <detectZUPTPhase+0x118>)
 80012a8:	f002 ff66 	bl	8004178 <__assert_func>
	assert(tempNode != NULL);
 80012ac:	2c00      	cmp	r4, #0
 80012ae:	d03d      	beq.n	800132c <detectZUPTPhase+0xcc>
	sum += tempNode->w_mag_sq; // last node
 80012b0:	ed94 8a01 	vldr	s16, [r4, #4]
 80012b4:	ee38 8a27 	vadd.f32	s16, s16, s15
	tempNode->next = (ZUPTNode*)createZUPTNode(w_avg_b0_mag);
 80012b8:	4b31      	ldr	r3, [pc, #196]	; (8001380 <detectZUPTPhase+0x120>)
 80012ba:	ed93 0a00 	vldr	s0, [r3]
 80012be:	f7ff ffa3 	bl	8001208 <createZUPTNode>
 80012c2:	6020      	str	r0, [r4, #0]
	assert(tempNode->next != NULL);
 80012c4:	2800      	cmp	r0, #0
 80012c6:	d038      	beq.n	800133a <detectZUPTPhase+0xda>
	sum += tempNode->w_mag_sq;
 80012c8:	edd0 7a01 	vldr	s15, [r0, #4]
	float Tw = sum * ZUPT_SCALE_FACTOR;
 80012cc:	ee77 7a88 	vadd.f32	s15, s15, s16
 80012d0:	ee17 0a90 	vmov	r0, s15
 80012d4:	f7ff f930 	bl	8000538 <__aeabi_f2d>
 80012d8:	a321      	add	r3, pc, #132	; (adr r3, 8001360 <detectZUPTPhase+0x100>)
 80012da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012de:	f7ff faad 	bl	800083c <__aeabi_ddiv>
 80012e2:	f7ff fc1b 	bl	8000b1c <__aeabi_d2f>
 80012e6:	ee07 0a90 	vmov	s15, r0
	enum PHASE detected_phase = (Tw < ZUPT_THRESHOLD) ? STANCE : SWING;
 80012ea:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001384 <detectZUPTPhase+0x124>
 80012ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f6:	bf4c      	ite	mi
 80012f8:	2301      	movmi	r3, #1
 80012fa:	2300      	movpl	r3, #0
	if (detected_phase != curr_phase) {
 80012fc:	4a22      	ldr	r2, [pc, #136]	; (8001388 <detectZUPTPhase+0x128>)
 80012fe:	7812      	ldrb	r2, [r2, #0]
 8001300:	429a      	cmp	r2, r3
 8001302:	d00e      	beq.n	8001322 <detectZUPTPhase+0xc2>
		if (detected_phase == SWING) {
 8001304:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130c:	d41c      	bmi.n	8001348 <detectZUPTPhase+0xe8>
			++phase_counter;
 800130e:	4a1f      	ldr	r2, [pc, #124]	; (800138c <detectZUPTPhase+0x12c>)
 8001310:	7813      	ldrb	r3, [r2, #0]
 8001312:	3301      	adds	r3, #1
 8001314:	b2db      	uxtb	r3, r3
 8001316:	7013      	strb	r3, [r2, #0]
			curr_phase = (phase_counter == PHASE_INTERVAL_THRESHOLD) ? SWING : STANCE;
 8001318:	3b07      	subs	r3, #7
 800131a:	bf18      	it	ne
 800131c:	2301      	movne	r3, #1
 800131e:	4a1a      	ldr	r2, [pc, #104]	; (8001388 <detectZUPTPhase+0x128>)
 8001320:	7013      	strb	r3, [r2, #0]
}
 8001322:	4b19      	ldr	r3, [pc, #100]	; (8001388 <detectZUPTPhase+0x128>)
 8001324:	7818      	ldrb	r0, [r3, #0]
 8001326:	ecbd 8b02 	vpop	{d8}
 800132a:	bd10      	pop	{r4, pc}
	assert(tempNode != NULL);
 800132c:	4b13      	ldr	r3, [pc, #76]	; (800137c <detectZUPTPhase+0x11c>)
 800132e:	4a11      	ldr	r2, [pc, #68]	; (8001374 <detectZUPTPhase+0x114>)
 8001330:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001334:	4810      	ldr	r0, [pc, #64]	; (8001378 <detectZUPTPhase+0x118>)
 8001336:	f002 ff1f 	bl	8004178 <__assert_func>
	assert(tempNode->next != NULL);
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <detectZUPTPhase+0x130>)
 800133c:	4a0d      	ldr	r2, [pc, #52]	; (8001374 <detectZUPTPhase+0x114>)
 800133e:	f240 1119 	movw	r1, #281	; 0x119
 8001342:	480d      	ldr	r0, [pc, #52]	; (8001378 <detectZUPTPhase+0x118>)
 8001344:	f002 ff18 	bl	8004178 <__assert_func>
			--phase_counter;
 8001348:	4a10      	ldr	r2, [pc, #64]	; (800138c <detectZUPTPhase+0x12c>)
 800134a:	7813      	ldrb	r3, [r2, #0]
 800134c:	3b01      	subs	r3, #1
 800134e:	b2db      	uxtb	r3, r3
 8001350:	7013      	strb	r3, [r2, #0]
			curr_phase = (phase_counter == 0) ? STANCE : SWING;
 8001352:	fab3 f383 	clz	r3, r3
 8001356:	095b      	lsrs	r3, r3, #5
 8001358:	4a0b      	ldr	r2, [pc, #44]	; (8001388 <detectZUPTPhase+0x128>)
 800135a:	7013      	strb	r3, [r2, #0]
 800135c:	e7e1      	b.n	8001322 <detectZUPTPhase+0xc2>
 800135e:	bf00      	nop
 8001360:	b3333334 	.word	0xb3333334
 8001364:	3f589374 	.word	0x3f589374
 8001368:	200000f0 	.word	0x200000f0
 800136c:	00000000 	.word	0x00000000
 8001370:	08005dfc 	.word	0x08005dfc
 8001374:	08005e60 	.word	0x08005e60
 8001378:	08005e10 	.word	0x08005e10
 800137c:	08005e34 	.word	0x08005e34
 8001380:	2000011c 	.word	0x2000011c
 8001384:	47ea6000 	.word	0x47ea6000
 8001388:	20000000 	.word	0x20000000
 800138c:	200000fc 	.word	0x200000fc
 8001390:	08005e48 	.word	0x08005e48

08001394 <initRingBuffers>:
	initQuaternion(IMU0_data, IMU1_data, IMU2_data);

	heading = 0;
}

void initRingBuffers(SensorData* IMU0_data, SensorData* IMU1_data, SensorData* IMU2_data) {
 8001394:	b084      	sub	sp, #16
	float w_avg_tmp[3];
	w_avg_tmp[0] = (IMU0_data->G_X + IMU1_data->G_X + IMU2_data->G_X) / 3;
 8001396:	edd0 7a03 	vldr	s15, [r0, #12]
 800139a:	ed91 7a03 	vldr	s14, [r1, #12]
 800139e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013a2:	ed92 7a03 	vldr	s14, [r2, #12]
 80013a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013aa:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80013ae:	eec7 5a87 	vdiv.f32	s11, s15, s14
 80013b2:	edcd 5a01 	vstr	s11, [sp, #4]
	w_avg_tmp[1] = (IMU0_data->G_Y + IMU1_data->G_Y + IMU2_data->G_Y) / 3;
 80013b6:	edd0 7a04 	vldr	s15, [r0, #16]
 80013ba:	edd1 6a04 	vldr	s13, [r1, #16]
 80013be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80013c2:	edd2 6a04 	vldr	s13, [r2, #16]
 80013c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80013ca:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80013ce:	ed8d 6a02 	vstr	s12, [sp, #8]
	w_avg_tmp[2] = (IMU0_data->G_Z + IMU1_data->G_Z + IMU2_data->G_Z) / 3;
 80013d2:	edd0 7a05 	vldr	s15, [r0, #20]
 80013d6:	edd1 6a05 	vldr	s13, [r1, #20]
 80013da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80013de:	edd2 6a05 	vldr	s13, [r2, #20]
 80013e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80013e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013ea:	edcd 6a03 	vstr	s13, [sp, #12]

	int i;
	for(i = 0; i < RING_SIZE; ++i) {
 80013ee:	2300      	movs	r3, #0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	dd01      	ble.n	80013f8 <initRingBuffers+0x64>
		w_avg_x_ring[i] = w_avg_tmp[0];
		w_avg_y_ring[i] = w_avg_tmp[1];
		w_avg_z_ring[i] = w_avg_tmp[2];
	}
}
 80013f4:	b004      	add	sp, #16
 80013f6:	4770      	bx	lr
		w_avg_x_ring[i] = w_avg_tmp[0];
 80013f8:	4a08      	ldr	r2, [pc, #32]	; (800141c <initRingBuffers+0x88>)
 80013fa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80013fe:	edc2 5a00 	vstr	s11, [r2]
		w_avg_y_ring[i] = w_avg_tmp[1];
 8001402:	4a07      	ldr	r2, [pc, #28]	; (8001420 <initRingBuffers+0x8c>)
 8001404:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001408:	ed82 6a00 	vstr	s12, [r2]
		w_avg_z_ring[i] = w_avg_tmp[2];
 800140c:	4a05      	ldr	r2, [pc, #20]	; (8001424 <initRingBuffers+0x90>)
 800140e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001412:	edc2 6a00 	vstr	s13, [r2]
	for(i = 0; i < RING_SIZE; ++i) {
 8001416:	3301      	adds	r3, #1
 8001418:	e7ea      	b.n	80013f0 <initRingBuffers+0x5c>
 800141a:	bf00      	nop
 800141c:	20000120 	.word	0x20000120
 8001420:	20000124 	.word	0x20000124
 8001424:	20000128 	.word	0x20000128

08001428 <dot_f32>:

float dot_f32(float* a, float* b) {
	return (a[0]*b[0]) + (a[1]*b[1]) + (a[2]*b[2]);
 8001428:	edd0 7a00 	vldr	s15, [r0]
 800142c:	ed91 0a00 	vldr	s0, [r1]
 8001430:	ee67 7a80 	vmul.f32	s15, s15, s0
 8001434:	ed90 0a01 	vldr	s0, [r0, #4]
 8001438:	ed91 7a01 	vldr	s14, [r1, #4]
 800143c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8001440:	ee77 7a80 	vadd.f32	s15, s15, s0
 8001444:	ed90 0a02 	vldr	s0, [r0, #8]
 8001448:	ed91 7a02 	vldr	s14, [r1, #8]
 800144c:	ee20 0a07 	vmul.f32	s0, s0, s14
}
 8001450:	ee37 0a80 	vadd.f32	s0, s15, s0
 8001454:	4770      	bx	lr

08001456 <cross_f32>:

void cross_f32(float* a, float* b, float* c) {
	c[0] = a[1] * b[2] - a[2] * b[1];
 8001456:	edd0 7a01 	vldr	s15, [r0, #4]
 800145a:	ed91 7a02 	vldr	s14, [r1, #8]
 800145e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001462:	ed90 7a02 	vldr	s14, [r0, #8]
 8001466:	edd1 6a01 	vldr	s13, [r1, #4]
 800146a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800146e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001472:	edc2 7a00 	vstr	s15, [r2]
	c[1] = a[2] * b[0] - a[0] * b[2];
 8001476:	edd0 7a02 	vldr	s15, [r0, #8]
 800147a:	ed91 7a00 	vldr	s14, [r1]
 800147e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001482:	ed90 7a00 	vldr	s14, [r0]
 8001486:	edd1 6a02 	vldr	s13, [r1, #8]
 800148a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800148e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001492:	edc2 7a01 	vstr	s15, [r2, #4]
	c[2] = a[0] * b[1] - a[1] * b[0];
 8001496:	edd0 7a00 	vldr	s15, [r0]
 800149a:	ed91 7a01 	vldr	s14, [r1, #4]
 800149e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a2:	ed90 7a01 	vldr	s14, [r0, #4]
 80014a6:	edd1 6a00 	vldr	s13, [r1]
 80014aa:	ee27 7a26 	vmul.f32	s14, s14, s13
 80014ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014b2:	edc2 7a02 	vstr	s15, [r2, #8]
}
 80014b6:	4770      	bx	lr

080014b8 <vec_mag_f32>:

float vec_mag_f32(float* vec) {
	float mag = (vec[0]*vec[0]) + (vec[1]*vec[1]) + (vec[2]*vec[2]);
 80014b8:	ed90 0a00 	vldr	s0, [r0]
 80014bc:	ee20 0a00 	vmul.f32	s0, s0, s0
 80014c0:	edd0 7a01 	vldr	s15, [r0, #4]
 80014c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014c8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80014cc:	edd0 7a02 	vldr	s15, [r0, #8]
 80014d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014d4:	ee30 0a27 	vadd.f32	s0, s0, s15
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 80014d8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80014dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e0:	db03      	blt.n	80014ea <vec_mag_f32+0x32>
float vec_mag_f32(float* vec) {
 80014e2:	b508      	push	{r3, lr}
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 80014e4:	f003 ff2a 	bl	800533c <sqrtf>
	arm_sqrt_f32(mag, &mag);
	return mag;
}
 80014e8:	bd08      	pop	{r3, pc}

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 80014ea:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80014f0 <vec_mag_f32+0x38>
 80014ee:	4770      	bx	lr
 80014f0:	00000000 	.word	0x00000000

080014f4 <calculateAvgAngularRate>:
		SensorData* IMU2_data) {
 80014f4:	b510      	push	{r4, lr}
	getNextGyroReading(IMU0_data, IMU1_data, IMU2_data, w_avg_b0_f32);
 80014f6:	4c05      	ldr	r4, [pc, #20]	; (800150c <calculateAvgAngularRate+0x18>)
 80014f8:	4623      	mov	r3, r4
 80014fa:	f7ff fe17 	bl	800112c <getNextGyroReading>
	w_avg_b0_mag = vec_mag_f32(w_avg_b0_f32);
 80014fe:	4620      	mov	r0, r4
 8001500:	f7ff ffda 	bl	80014b8 <vec_mag_f32>
 8001504:	4b02      	ldr	r3, [pc, #8]	; (8001510 <calculateAvgAngularRate+0x1c>)
 8001506:	ed83 0a00 	vstr	s0, [r3]
}
 800150a:	bd10      	pop	{r4, pc}
 800150c:	20000110 	.word	0x20000110
 8001510:	2000011c 	.word	0x2000011c
 8001514:	00000000 	.word	0x00000000

08001518 <calculatePosition>:
void calculatePosition(SensorData* IMU0_data, SensorData* IMU1_data, SensorData* IMU2_data, float timeDelta) {
 8001518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800151c:	ed2d 8b02 	vpush	{d8}
 8001520:	b085      	sub	sp, #20
 8001522:	4606      	mov	r6, r0
 8001524:	460d      	mov	r5, r1
 8001526:	4614      	mov	r4, r2
 8001528:	ee10 7a10 	vmov	r7, s0
	calculateAvgAngularRate(IMU0_data, IMU1_data, IMU2_data);
 800152c:	f7ff ffe2 	bl	80014f4 <calculateAvgAngularRate>
	averageAcc[0] = (IMU0_data->XL_X + IMU1_data->XL_X + IMU2_data->XL_X) / 3;
 8001530:	edd6 7a00 	vldr	s15, [r6]
 8001534:	ed95 7a00 	vldr	s14, [r5]
 8001538:	ee77 7a87 	vadd.f32	s15, s15, s14
 800153c:	ed94 7a00 	vldr	s14, [r4]
 8001540:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001544:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001548:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800154c:	edcd 6a01 	vstr	s13, [sp, #4]
	averageAcc[1] = (IMU0_data->XL_Y + IMU1_data->XL_Y + IMU2_data->XL_Y) / 3;
 8001550:	edd6 7a01 	vldr	s15, [r6, #4]
 8001554:	edd5 6a01 	vldr	s13, [r5, #4]
 8001558:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800155c:	edd4 6a01 	vldr	s13, [r4, #4]
 8001560:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001564:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001568:	edcd 6a02 	vstr	s13, [sp, #8]
	averageAcc[2] = (IMU0_data->XL_Z + IMU1_data->XL_Z + IMU2_data->XL_Z) / 3;
 800156c:	edd6 7a02 	vldr	s15, [r6, #8]
 8001570:	edd5 6a02 	vldr	s13, [r5, #8]
 8001574:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001578:	edd4 6a02 	vldr	s13, [r4, #8]
 800157c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001580:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001584:	edcd 6a03 	vstr	s13, [sp, #12]
	detectZUPTPhase();
 8001588:	f7ff fe6a 	bl	8001260 <detectZUPTPhase>
	if (curr_phase == SWING) {
 800158c:	4b6a      	ldr	r3, [pc, #424]	; (8001738 <calculatePosition+0x220>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	f040 80c0 	bne.w	8001716 <calculatePosition+0x1fe>
		if(w_avg_b0_f32[2] > Z_TURN_THRESHOLD && averageAcc[0] < xOffset - 0.07){
 8001596:	4b69      	ldr	r3, [pc, #420]	; (800173c <calculatePosition+0x224>)
 8001598:	ed93 8a02 	vldr	s16, [r3, #8]
 800159c:	eef2 7a0a 	vmov.f32	s15, #42	; 0x41500000  13.0
 80015a0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80015a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a8:	dd2a      	ble.n	8001600 <calculatePosition+0xe8>
 80015aa:	9801      	ldr	r0, [sp, #4]
 80015ac:	f7fe ffc4 	bl	8000538 <__aeabi_f2d>
 80015b0:	4604      	mov	r4, r0
 80015b2:	460d      	mov	r5, r1
 80015b4:	4b62      	ldr	r3, [pc, #392]	; (8001740 <calculatePosition+0x228>)
 80015b6:	6818      	ldr	r0, [r3, #0]
 80015b8:	f7fe ffbe 	bl	8000538 <__aeabi_f2d>
 80015bc:	a35a      	add	r3, pc, #360	; (adr r3, 8001728 <calculatePosition+0x210>)
 80015be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c2:	f7fe fe59 	bl	8000278 <__aeabi_dsub>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4620      	mov	r0, r4
 80015cc:	4629      	mov	r1, r5
 80015ce:	f7ff fa7d 	bl	8000acc <__aeabi_dcmplt>
 80015d2:	b1a8      	cbz	r0, 8001600 <calculatePosition+0xe8>
			if(upDownCounter > 4 ){
 80015d4:	4b5b      	ldr	r3, [pc, #364]	; (8001744 <calculatePosition+0x22c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b04      	cmp	r3, #4
 80015da:	dc0c      	bgt.n	80015f6 <calculatePosition+0xde>
			upDownCounter+= 2;
 80015dc:	4a59      	ldr	r2, [pc, #356]	; (8001744 <calculatePosition+0x22c>)
 80015de:	6813      	ldr	r3, [r2, #0]
 80015e0:	3302      	adds	r3, #2
 80015e2:	6013      	str	r3, [r2, #0]
			if(upDownCounter > upDownSaturation) upDownCounter = upDownSaturation;
 80015e4:	4a58      	ldr	r2, [pc, #352]	; (8001748 <calculatePosition+0x230>)
 80015e6:	f992 2000 	ldrsb.w	r2, [r2]
 80015ea:	4293      	cmp	r3, r2
 80015ec:	f340 8096 	ble.w	800171c <calculatePosition+0x204>
 80015f0:	4b54      	ldr	r3, [pc, #336]	; (8001744 <calculatePosition+0x22c>)
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	e092      	b.n	800171c <calculatePosition+0x204>
				updateDirection(timeDelta);
 80015f6:	ee00 7a10 	vmov	s0, r7
 80015fa:	f7ff fd33 	bl	8001064 <updateDirection>
 80015fe:	e7ed      	b.n	80015dc <calculatePosition+0xc4>
		else if(w_avg_b0_f32[2] < -1*Z_TURN_THRESHOLD && averageAcc[0] > xOffset + 0.07){
 8001600:	eefa 7a0a 	vmov.f32	s15, #170	; 0xc1500000 -13.0
 8001604:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800160c:	d52b      	bpl.n	8001666 <calculatePosition+0x14e>
 800160e:	9801      	ldr	r0, [sp, #4]
 8001610:	f7fe ff92 	bl	8000538 <__aeabi_f2d>
 8001614:	4604      	mov	r4, r0
 8001616:	460d      	mov	r5, r1
 8001618:	4b49      	ldr	r3, [pc, #292]	; (8001740 <calculatePosition+0x228>)
 800161a:	6818      	ldr	r0, [r3, #0]
 800161c:	f7fe ff8c 	bl	8000538 <__aeabi_f2d>
 8001620:	a341      	add	r3, pc, #260	; (adr r3, 8001728 <calculatePosition+0x210>)
 8001622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001626:	f7fe fe29 	bl	800027c <__adddf3>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4620      	mov	r0, r4
 8001630:	4629      	mov	r1, r5
 8001632:	f7ff fa69 	bl	8000b08 <__aeabi_dcmpgt>
 8001636:	b1b0      	cbz	r0, 8001666 <calculatePosition+0x14e>
			if(upDownCounter < -4 ){
 8001638:	4b42      	ldr	r3, [pc, #264]	; (8001744 <calculatePosition+0x22c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f113 0f04 	cmn.w	r3, #4
 8001640:	db0c      	blt.n	800165c <calculatePosition+0x144>
			upDownCounter-=2;
 8001642:	4a40      	ldr	r2, [pc, #256]	; (8001744 <calculatePosition+0x22c>)
 8001644:	6813      	ldr	r3, [r2, #0]
 8001646:	3b02      	subs	r3, #2
 8001648:	6013      	str	r3, [r2, #0]
			if(upDownCounter < -1*upDownSaturation) upDownCounter = -1*upDownSaturation;
 800164a:	4a3f      	ldr	r2, [pc, #252]	; (8001748 <calculatePosition+0x230>)
 800164c:	f992 2000 	ldrsb.w	r2, [r2]
 8001650:	4252      	negs	r2, r2
 8001652:	4293      	cmp	r3, r2
 8001654:	da62      	bge.n	800171c <calculatePosition+0x204>
 8001656:	4b3b      	ldr	r3, [pc, #236]	; (8001744 <calculatePosition+0x22c>)
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	e05f      	b.n	800171c <calculatePosition+0x204>
				updateDirection(timeDelta);
 800165c:	ee00 7a10 	vmov	s0, r7
 8001660:	f7ff fd00 	bl	8001064 <updateDirection>
 8001664:	e7ed      	b.n	8001642 <calculatePosition+0x12a>
		else if(vec_mag_f32(averageAcc) >  10.5){
 8001666:	a801      	add	r0, sp, #4
 8001668:	f7ff ff26 	bl	80014b8 <vec_mag_f32>
 800166c:	eef2 7a05 	vmov.f32	s15, #37	; 0x41280000  10.5
 8001670:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001678:	dd50      	ble.n	800171c <calculatePosition+0x204>
			pos.X += VELOCITY_ADJUSTMENT*AVG_VELOCITY*cosf(heading*deg2rad)*timeDelta;
 800167a:	4b34      	ldr	r3, [pc, #208]	; (800174c <calculatePosition+0x234>)
 800167c:	ed93 8a00 	vldr	s16, [r3]
 8001680:	eddf 7a33 	vldr	s15, [pc, #204]	; 8001750 <calculatePosition+0x238>
 8001684:	ee28 8a27 	vmul.f32	s16, s16, s15
 8001688:	eeb0 0a48 	vmov.f32	s0, s16
 800168c:	f003 fda8 	bl	80051e0 <cosf>
 8001690:	ee10 0a10 	vmov	r0, s0
 8001694:	f7fe ff50 	bl	8000538 <__aeabi_f2d>
 8001698:	a325      	add	r3, pc, #148	; (adr r3, 8001730 <calculatePosition+0x218>)
 800169a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169e:	f7fe ffa3 	bl	80005e8 <__aeabi_dmul>
 80016a2:	4604      	mov	r4, r0
 80016a4:	460d      	mov	r5, r1
 80016a6:	4638      	mov	r0, r7
 80016a8:	f7fe ff46 	bl	8000538 <__aeabi_f2d>
 80016ac:	4606      	mov	r6, r0
 80016ae:	460f      	mov	r7, r1
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4620      	mov	r0, r4
 80016b6:	4629      	mov	r1, r5
 80016b8:	f7fe ff96 	bl	80005e8 <__aeabi_dmul>
 80016bc:	4680      	mov	r8, r0
 80016be:	4689      	mov	r9, r1
 80016c0:	4c24      	ldr	r4, [pc, #144]	; (8001754 <calculatePosition+0x23c>)
 80016c2:	6820      	ldr	r0, [r4, #0]
 80016c4:	f7fe ff38 	bl	8000538 <__aeabi_f2d>
 80016c8:	4642      	mov	r2, r8
 80016ca:	464b      	mov	r3, r9
 80016cc:	f7fe fdd6 	bl	800027c <__adddf3>
 80016d0:	f7ff fa24 	bl	8000b1c <__aeabi_d2f>
 80016d4:	6020      	str	r0, [r4, #0]
			pos.Y += VELOCITY_ADJUSTMENT*AVG_VELOCITY*sinf(heading*deg2rad)*timeDelta;
 80016d6:	eeb0 0a48 	vmov.f32	s0, s16
 80016da:	f003 fde9 	bl	80052b0 <sinf>
 80016de:	ee10 0a10 	vmov	r0, s0
 80016e2:	f7fe ff29 	bl	8000538 <__aeabi_f2d>
 80016e6:	a312      	add	r3, pc, #72	; (adr r3, 8001730 <calculatePosition+0x218>)
 80016e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ec:	f7fe ff7c 	bl	80005e8 <__aeabi_dmul>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4630      	mov	r0, r6
 80016f6:	4639      	mov	r1, r7
 80016f8:	f7fe ff76 	bl	80005e8 <__aeabi_dmul>
 80016fc:	4606      	mov	r6, r0
 80016fe:	460f      	mov	r7, r1
 8001700:	6860      	ldr	r0, [r4, #4]
 8001702:	f7fe ff19 	bl	8000538 <__aeabi_f2d>
 8001706:	4632      	mov	r2, r6
 8001708:	463b      	mov	r3, r7
 800170a:	f7fe fdb7 	bl	800027c <__adddf3>
 800170e:	f7ff fa05 	bl	8000b1c <__aeabi_d2f>
 8001712:	6060      	str	r0, [r4, #4]
 8001714:	e002      	b.n	800171c <calculatePosition+0x204>
		upDownCounter = 0;
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <calculatePosition+0x22c>)
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
}
 800171c:	b005      	add	sp, #20
 800171e:	ecbd 8b02 	vpop	{d8}
 8001722:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001726:	bf00      	nop
 8001728:	1eb851ec 	.word	0x1eb851ec
 800172c:	3fb1eb85 	.word	0x3fb1eb85
 8001730:	ef34d6a1 	.word	0xef34d6a1
 8001734:	3fe74538 	.word	0x3fe74538
 8001738:	20000000 	.word	0x20000000
 800173c:	20000110 	.word	0x20000110
 8001740:	20000130 	.word	0x20000130
 8001744:	2000010c 	.word	0x2000010c
 8001748:	20000014 	.word	0x20000014
 800174c:	200000f4 	.word	0x200000f4
 8001750:	3c8efa35 	.word	0x3c8efa35
 8001754:	20000100 	.word	0x20000100

08001758 <initQuaternion>:
	float bData[3] = {b->pData[0], b->pData[1], b->pData[2]};

	cross_f32(aData, bData, c->pData);
}

void initQuaternion(SensorData* IMU0_data, SensorData* IMU1_data, SensorData* IMU2_data) {
 8001758:	b5d0      	push	{r4, r6, r7, lr}
 800175a:	ed2d 8b02 	vpush	{d8}
 800175e:	b092      	sub	sp, #72	; 0x48
	float avg_XL[3];
	avg_XL[0] = (IMU0_data->XL_X + IMU1_data->XL_X + IMU2_data->XL_X) / 3;
 8001760:	edd0 7a00 	vldr	s15, [r0]
 8001764:	ed91 7a00 	vldr	s14, [r1]
 8001768:	ee77 7a87 	vadd.f32	s15, s15, s14
 800176c:	ed92 7a00 	vldr	s14, [r2]
 8001770:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001774:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001778:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800177c:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
	avg_XL[1] = (IMU0_data->XL_Y + IMU1_data->XL_Y + IMU2_data->XL_Y) / 3;
 8001780:	edd0 7a01 	vldr	s15, [r0, #4]
 8001784:	edd1 6a01 	vldr	s13, [r1, #4]
 8001788:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800178c:	edd2 6a01 	vldr	s13, [r2, #4]
 8001790:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001794:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001798:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
	avg_XL[2] = (IMU0_data->XL_Z + IMU1_data->XL_Z + IMU2_data->XL_Z) / 3;
 800179c:	edd0 7a02 	vldr	s15, [r0, #8]
 80017a0:	edd1 6a02 	vldr	s13, [r1, #8]
 80017a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80017a8:	edd2 6a02 	vldr	s13, [r2, #8]
 80017ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80017b0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017b4:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44

	float mag_avg_XL = vec_mag_f32(avg_XL);
 80017b8:	a80f      	add	r0, sp, #60	; 0x3c
 80017ba:	f7ff fe7d 	bl	80014b8 <vec_mag_f32>

	// Normalize average acceleration vector
	avg_XL[0] /= mag_avg_XL;
 80017be:	ed9d 7a0f 	vldr	s14, [sp, #60]	; 0x3c
 80017c2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80017c6:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
	avg_XL[1] /= mag_avg_XL;
 80017ca:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
 80017ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80017d2:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
	avg_XL[2] /= mag_avg_XL;
 80017d6:	ed9d 7a11 	vldr	s14, [sp, #68]	; 0x44
 80017da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80017de:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44

	float norm_g[3] = {0,0,1}; // Normalized vector for g_nav
 80017e2:	2300      	movs	r3, #0
 80017e4:	930c      	str	r3, [sp, #48]	; 0x30
 80017e6:	930d      	str	r3, [sp, #52]	; 0x34
 80017e8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80017ec:	930e      	str	r3, [sp, #56]	; 0x38

	// q = [1+dot(r, r') cross(r, r') --> From conjugation: r' = q x [0 r] x q*

	float dot_prod = dot_f32(avg_XL, norm_g);
 80017ee:	a90c      	add	r1, sp, #48	; 0x30
 80017f0:	a80f      	add	r0, sp, #60	; 0x3c
 80017f2:	f7ff fe19 	bl	8001428 <dot_f32>
 80017f6:	ee10 4a10 	vmov	r4, s0
	float cross_prod[3];
	cross_f32(avg_XL, norm_g, cross_prod);
 80017fa:	aa09      	add	r2, sp, #36	; 0x24
 80017fc:	a90c      	add	r1, sp, #48	; 0x30
 80017fe:	a80f      	add	r0, sp, #60	; 0x3c
 8001800:	f7ff fe29 	bl	8001456 <cross_f32>

	if (dot_prod > 0.999999) {
 8001804:	4620      	mov	r0, r4
 8001806:	f7fe fe97 	bl	8000538 <__aeabi_f2d>
 800180a:	4606      	mov	r6, r0
 800180c:	460f      	mov	r7, r1
 800180e:	a33b      	add	r3, pc, #236	; (adr r3, 80018fc <initQuaternion+0x1a4>)
 8001810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001814:	f7ff f978 	bl	8000b08 <__aeabi_dcmpgt>
 8001818:	b180      	cbz	r0, 800183c <initQuaternion+0xe4>
		q_f32[0] = 1;
 800181a:	4b37      	ldr	r3, [pc, #220]	; (80018f8 <initQuaternion+0x1a0>)
 800181c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001820:	601a      	str	r2, [r3, #0]
		q_f32[1] = 0;
 8001822:	2200      	movs	r2, #0
 8001824:	605a      	str	r2, [r3, #4]
		q_f32[2] = 0;
 8001826:	609a      	str	r2, [r3, #8]
		q_f32[3] = 0;
 8001828:	60da      	str	r2, [r3, #12]
		q_f32[2] = cross_prod[1];
		q_f32[3] = cross_prod[2];

    }

	arm_quaternion_normalize_f32(q_f32, q_f32, 1); // normalize initial quaternion
 800182a:	4833      	ldr	r0, [pc, #204]	; (80018f8 <initQuaternion+0x1a0>)
 800182c:	2201      	movs	r2, #1
 800182e:	4601      	mov	r1, r0
 8001830:	f002 fc4b 	bl	80040ca <arm_quaternion_normalize_f32>
}
 8001834:	b012      	add	sp, #72	; 0x48
 8001836:	ecbd 8b02 	vpop	{d8}
 800183a:	bdd0      	pop	{r4, r6, r7, pc}
	} else if (dot_prod < -0.999999) {
 800183c:	a32a      	add	r3, pc, #168	; (adr r3, 80018e8 <initQuaternion+0x190>)
 800183e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001842:	4630      	mov	r0, r6
 8001844:	4639      	mov	r1, r7
 8001846:	f7ff f941 	bl	8000acc <__aeabi_dcmplt>
 800184a:	b978      	cbnz	r0, 800186c <initQuaternion+0x114>
		q_f32[0] = 1 + dot_prod;
 800184c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001850:	ee07 4a10 	vmov	s14, r4
 8001854:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001858:	4b27      	ldr	r3, [pc, #156]	; (80018f8 <initQuaternion+0x1a0>)
 800185a:	edc3 7a00 	vstr	s15, [r3]
		q_f32[1] = cross_prod[0];
 800185e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001860:	605a      	str	r2, [r3, #4]
		q_f32[2] = cross_prod[1];
 8001862:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001864:	609a      	str	r2, [r3, #8]
		q_f32[3] = cross_prod[2];
 8001866:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	e7de      	b.n	800182a <initQuaternion+0xd2>
		float xUnit[3] = {1,0,0};
 800186c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001870:	9200      	str	r2, [sp, #0]
 8001872:	2300      	movs	r3, #0
 8001874:	9301      	str	r3, [sp, #4]
 8001876:	9302      	str	r3, [sp, #8]
		float yUnit[3] = {0,1,0};
 8001878:	9303      	str	r3, [sp, #12]
 800187a:	9204      	str	r2, [sp, #16]
 800187c:	9305      	str	r3, [sp, #20]
        cross_f32(xUnit, avg_XL, tempVec);
 800187e:	aa06      	add	r2, sp, #24
 8001880:	a90f      	add	r1, sp, #60	; 0x3c
 8001882:	4668      	mov	r0, sp
 8001884:	f7ff fde7 	bl	8001456 <cross_f32>
        float tempVecMag = vec_mag_f32(tempVec);
 8001888:	a806      	add	r0, sp, #24
 800188a:	f7ff fe15 	bl	80014b8 <vec_mag_f32>
 800188e:	eeb0 8a40 	vmov.f32	s16, s0
        if (tempVecMag < 0.000001) {
 8001892:	ee10 0a10 	vmov	r0, s0
 8001896:	f7fe fe4f 	bl	8000538 <__aeabi_f2d>
 800189a:	a315      	add	r3, pc, #84	; (adr r3, 80018f0 <initQuaternion+0x198>)
 800189c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a0:	f7ff f914 	bl	8000acc <__aeabi_dcmplt>
 80018a4:	b9a8      	cbnz	r0, 80018d2 <initQuaternion+0x17a>
        q_f32[0] = 0;
 80018a6:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <initQuaternion+0x1a0>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
        q_f32[1] = tempVec[0] / tempVecMag;
 80018ac:	ed9d 7a06 	vldr	s14, [sp, #24]
 80018b0:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80018b4:	edc3 7a01 	vstr	s15, [r3, #4]
        q_f32[2] = tempVec[1] / tempVecMag;
 80018b8:	ed9d 7a07 	vldr	s14, [sp, #28]
 80018bc:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80018c0:	edc3 7a02 	vstr	s15, [r3, #8]
        q_f32[3] = tempVec[2] / tempVecMag;
 80018c4:	ed9d 7a08 	vldr	s14, [sp, #32]
 80018c8:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80018cc:	edc3 7a03 	vstr	s15, [r3, #12]
 80018d0:	e7ab      	b.n	800182a <initQuaternion+0xd2>
            cross_f32(yUnit, avg_XL, tempVec);
 80018d2:	aa06      	add	r2, sp, #24
 80018d4:	a90f      	add	r1, sp, #60	; 0x3c
 80018d6:	a803      	add	r0, sp, #12
 80018d8:	f7ff fdbd 	bl	8001456 <cross_f32>
			tempVecMag = vec_mag_f32(tempVec);
 80018dc:	a806      	add	r0, sp, #24
 80018de:	f7ff fdeb 	bl	80014b8 <vec_mag_f32>
 80018e2:	eeb0 8a40 	vmov.f32	s16, s0
 80018e6:	e7de      	b.n	80018a6 <initQuaternion+0x14e>
 80018e8:	e7210be9 	.word	0xe7210be9
 80018ec:	bfeffffd 	.word	0xbfeffffd
 80018f0:	a0b5ed8d 	.word	0xa0b5ed8d
 80018f4:	3eb0c6f7 	.word	0x3eb0c6f7
 80018f8:	20000004 	.word	0x20000004
 80018fc:	e7210be9 	.word	0xe7210be9
 8001900:	3feffffd 	.word	0x3feffffd

08001904 <init_heuristic_processing>:
void init_heuristic_processing(SensorData* IMU0_data,  SensorData* IMU1_data,  SensorData* IMU2_data) {
 8001904:	b570      	push	{r4, r5, r6, lr}
 8001906:	4606      	mov	r6, r0
 8001908:	460d      	mov	r5, r1
 800190a:	4614      	mov	r4, r2
	initZUPT();
 800190c:	f7ff fc8e 	bl	800122c <initZUPT>
	initRingBuffers(IMU0_data, IMU1_data, IMU2_data);
 8001910:	4622      	mov	r2, r4
 8001912:	4629      	mov	r1, r5
 8001914:	4630      	mov	r0, r6
 8001916:	f7ff fd3d 	bl	8001394 <initRingBuffers>
	initQuaternion(IMU0_data, IMU1_data, IMU2_data);
 800191a:	4622      	mov	r2, r4
 800191c:	4629      	mov	r1, r5
 800191e:	4630      	mov	r0, r6
 8001920:	f7ff ff1a 	bl	8001758 <initQuaternion>
	xOffset = (IMU0_data->XL_X + IMU1_data->XL_X + IMU2_data->XL_X) / 3;
 8001924:	edd6 7a00 	vldr	s15, [r6]
 8001928:	ed95 7a00 	vldr	s14, [r5]
 800192c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001930:	ed94 7a00 	vldr	s14, [r4]
 8001934:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001938:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800193c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001940:	4b01      	ldr	r3, [pc, #4]	; (8001948 <init_heuristic_processing+0x44>)
 8001942:	ed83 7a00 	vstr	s14, [r3]
}
 8001946:	bd70      	pop	{r4, r5, r6, pc}
 8001948:	20000130 	.word	0x20000130

0800194c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800194c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001950:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001952:	2400      	movs	r4, #0
 8001954:	9403      	str	r4, [sp, #12]
 8001956:	9404      	str	r4, [sp, #16]
 8001958:	9405      	str	r4, [sp, #20]
 800195a:	9406      	str	r4, [sp, #24]
 800195c:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800195e:	4b50      	ldr	r3, [pc, #320]	; (8001aa0 <MX_GPIO_Init+0x154>)
 8001960:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001962:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001966:	64da      	str	r2, [r3, #76]	; 0x4c
 8001968:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800196a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800196e:	9200      	str	r2, [sp, #0]
 8001970:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001972:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001974:	f042 0201 	orr.w	r2, r2, #1
 8001978:	64da      	str	r2, [r3, #76]	; 0x4c
 800197a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800197c:	f002 0201 	and.w	r2, r2, #1
 8001980:	9201      	str	r2, [sp, #4]
 8001982:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001984:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001986:	f042 0202 	orr.w	r2, r2, #2
 800198a:	64da      	str	r2, [r3, #76]	; 0x4c
 800198c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	9302      	str	r3, [sp, #8]
 8001994:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU1_CS_Pin|IMU2_CS_Pin|IMU3_CS_Pin|FLASH_CS_Pin, GPIO_PIN_RESET);
 8001996:	4e43      	ldr	r6, [pc, #268]	; (8001aa4 <MX_GPIO_Init+0x158>)
 8001998:	4622      	mov	r2, r4
 800199a:	f242 0107 	movw	r1, #8199	; 0x2007
 800199e:	4630      	mov	r0, r6
 80019a0:	f000 fd74 	bl	800248c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XBEE_CS_GPIO_Port, XBEE_CS_Pin, GPIO_PIN_RESET);
 80019a4:	4622      	mov	r2, r4
 80019a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ae:	f000 fd6d 	bl	800248c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_3, GPIO_PIN_RESET);
 80019b2:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8001aa8 <MX_GPIO_Init+0x15c>
 80019b6:	4622      	mov	r2, r4
 80019b8:	2108      	movs	r1, #8
 80019ba:	4640      	mov	r0, r8
 80019bc:	f000 fd66 	bl	800248c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MAG_INT_Pin MAG_INT_TRG_Pin IMU3_INT1_Pin IMU3_INT2_Pin
                           IMU2_INT1_Pin IMU2_INT2_Pin IMU1_INT1_Pin IMU1_INT2_Pin */
  GPIO_InitStruct.Pin = MAG_INT_Pin|MAG_INT_TRG_Pin|IMU3_INT1_Pin|IMU3_INT2_Pin
 80019c0:	f641 631d 	movw	r3, #7709	; 0x1e1d
 80019c4:	9303      	str	r3, [sp, #12]
                          |IMU2_INT1_Pin|IMU2_INT2_Pin|IMU1_INT1_Pin|IMU1_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019ca:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ce:	a903      	add	r1, sp, #12
 80019d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019d4:	f000 fc76 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU1_CS_Pin IMU2_CS_Pin IMU3_CS_Pin FLASH_CS_Pin */
  GPIO_InitStruct.Pin = IMU1_CS_Pin|IMU2_CS_Pin|IMU3_CS_Pin|FLASH_CS_Pin;
 80019d8:	f242 0307 	movw	r3, #8199	; 0x2007
 80019dc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019de:	2701      	movs	r7, #1
 80019e0:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e4:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e6:	a903      	add	r1, sp, #12
 80019e8:	4630      	mov	r0, r6
 80019ea:	f000 fc6b 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80019ee:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80019f2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f4:	f04f 0902 	mov.w	r9, #2
 80019f8:	f8cd 9010 	str.w	r9, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fe:	2503      	movs	r5, #3
 8001a00:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a02:	2305      	movs	r3, #5
 8001a04:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a06:	a903      	add	r1, sp, #12
 8001a08:	4630      	mov	r0, r6
 8001a0a:	f000 fc5b 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : XBEE_CS_Pin */
  GPIO_InitStruct.Pin = XBEE_CS_Pin;
 8001a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a12:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a14:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(XBEE_CS_GPIO_Port, &GPIO_InitStruct);
 8001a1a:	a903      	add	r1, sp, #12
 8001a1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a20:	f000 fc50 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_ATTN_Pin */
  GPIO_InitStruct.Pin = SPI3_ATTN_Pin;
 8001a24:	2380      	movs	r3, #128	; 0x80
 8001a26:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a28:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(SPI3_ATTN_GPIO_Port, &GPIO_InitStruct);
 8001a2c:	a903      	add	r1, sp, #12
 8001a2e:	4630      	mov	r0, r6
 8001a30:	f000 fc48 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a34:	2308      	movs	r3, #8
 8001a36:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a38:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a3a:	f8cd 9014 	str.w	r9, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a40:	a903      	add	r1, sp, #12
 8001a42:	4640      	mov	r0, r8
 8001a44:	f000 fc3e 	bl	80022c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 4, 0);
 8001a48:	4622      	mov	r2, r4
 8001a4a:	2104      	movs	r1, #4
 8001a4c:	2006      	movs	r0, #6
 8001a4e:	f000 fbdf 	bl	8002210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001a52:	2006      	movs	r0, #6
 8001a54:	f000 fc14 	bl	8002280 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 3, 0);
 8001a58:	4622      	mov	r2, r4
 8001a5a:	4629      	mov	r1, r5
 8001a5c:	2009      	movs	r0, #9
 8001a5e:	f000 fbd7 	bl	8002210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001a62:	2009      	movs	r0, #9
 8001a64:	f000 fc0c 	bl	8002280 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 3, 0);
 8001a68:	4622      	mov	r2, r4
 8001a6a:	4629      	mov	r1, r5
 8001a6c:	200a      	movs	r0, #10
 8001a6e:	f000 fbcf 	bl	8002210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001a72:	200a      	movs	r0, #10
 8001a74:	f000 fc04 	bl	8002280 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8001a78:	4622      	mov	r2, r4
 8001a7a:	4629      	mov	r1, r5
 8001a7c:	2017      	movs	r0, #23
 8001a7e:	f000 fbc7 	bl	8002210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a82:	2017      	movs	r0, #23
 8001a84:	f000 fbfc 	bl	8002280 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001a88:	4622      	mov	r2, r4
 8001a8a:	4629      	mov	r1, r5
 8001a8c:	2028      	movs	r0, #40	; 0x28
 8001a8e:	f000 fbbf 	bl	8002210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a92:	2028      	movs	r0, #40	; 0x28
 8001a94:	f000 fbf4 	bl	8002280 <HAL_NVIC_EnableIRQ>

}
 8001a98:	b009      	add	sp, #36	; 0x24
 8001a9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	48000400 	.word	0x48000400
 8001aa8:	48001c00 	.word	0x48001c00

08001aac <sendCurrentPosition>:
uint8_t sendCurrentPosition(uint8_t state) {
 8001aac:	b530      	push	{r4, r5, lr}
 8001aae:	b091      	sub	sp, #68	; 0x44
	float heading = returnCurrentPosition(&pos);
 8001ab0:	a80d      	add	r0, sp, #52	; 0x34
 8001ab2:	f7ff fb2b 	bl	800110c <returnCurrentPosition>
 8001ab6:	ed8d 0a01 	vstr	s0, [sp, #4]
	uint32_t POSX = *(int*)&pos.X;
 8001aba:	9d0d      	ldr	r5, [sp, #52]	; 0x34
	uint32_t POSY = *(int*)&pos.Y;
 8001abc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	uint32_t head = *(int*)&heading; // x_opt
 8001abe:	9801      	ldr	r0, [sp, #4]
	for (i = 0; i < 3; ++i) {
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	e00a      	b.n	8001ada <sendCurrentPosition+0x2e>
	  data_buf[i] = (POSX >> (3-i)*8) & 0xFF;
 8001ac4:	f1c2 0303 	rsb	r3, r2, #3
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	fa25 f303 	lsr.w	r3, r5, r3
 8001ace:	f102 0140 	add.w	r1, r2, #64	; 0x40
 8001ad2:	4469      	add	r1, sp
 8001ad4:	f801 3c18 	strb.w	r3, [r1, #-24]
	for (i = 0; i < 3; ++i) {
 8001ad8:	3201      	adds	r2, #1
 8001ada:	2a02      	cmp	r2, #2
 8001adc:	ddf2      	ble.n	8001ac4 <sendCurrentPosition+0x18>
	for (i = 0; i < 3; ++i) {
 8001ade:	2200      	movs	r2, #0
 8001ae0:	e00a      	b.n	8001af8 <sendCurrentPosition+0x4c>
	  data_buf[i+4] = (POSY >> (3-i)*8) & 0xFF;
 8001ae2:	f1c2 0303 	rsb	r3, r2, #3
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	fa24 f303 	lsr.w	r3, r4, r3
 8001aec:	f102 0144 	add.w	r1, r2, #68	; 0x44
 8001af0:	4469      	add	r1, sp
 8001af2:	f801 3c18 	strb.w	r3, [r1, #-24]
	for (i = 0; i < 3; ++i) {
 8001af6:	3201      	adds	r2, #1
 8001af8:	2a02      	cmp	r2, #2
 8001afa:	ddf2      	ble.n	8001ae2 <sendCurrentPosition+0x36>
	for (i = 0; i < 3; ++i) {
 8001afc:	2200      	movs	r2, #0
 8001afe:	e00a      	b.n	8001b16 <sendCurrentPosition+0x6a>
	  data_buf[i+8] = (head >> (3-i)*8) & 0xFF;
 8001b00:	f1c2 0303 	rsb	r3, r2, #3
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	fa20 f303 	lsr.w	r3, r0, r3
 8001b0a:	f102 0148 	add.w	r1, r2, #72	; 0x48
 8001b0e:	4469      	add	r1, sp
 8001b10:	f801 3c18 	strb.w	r3, [r1, #-24]
	for (i = 0; i < 3; ++i) {
 8001b14:	3201      	adds	r2, #1
 8001b16:	2a02      	cmp	r2, #2
 8001b18:	ddf2      	ble.n	8001b00 <sendCurrentPosition+0x54>
	if (ctr == 0) {
 8001b1a:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <sendCurrentPosition+0xb4>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	b193      	cbz	r3, 8001b46 <sendCurrentPosition+0x9a>
	} else if (ctr == CTR_MOD/2){
 8001b20:	2b19      	cmp	r3, #25
 8001b22:	d016      	beq.n	8001b52 <sendCurrentPosition+0xa6>
	ctr = (ctr + 1) % CTR_MOD;
 8001b24:	480e      	ldr	r0, [pc, #56]	; (8001b60 <sendCurrentPosition+0xb4>)
 8001b26:	6802      	ldr	r2, [r0, #0]
 8001b28:	3201      	adds	r2, #1
 8001b2a:	490e      	ldr	r1, [pc, #56]	; (8001b64 <sendCurrentPosition+0xb8>)
 8001b2c:	fb81 3102 	smull	r3, r1, r1, r2
 8001b30:	17d3      	asrs	r3, r2, #31
 8001b32:	ebc3 1321 	rsb	r3, r3, r1, asr #4
 8001b36:	2132      	movs	r1, #50	; 0x32
 8001b38:	fb01 2313 	mls	r3, r1, r3, r2
 8001b3c:	6003      	str	r3, [r0, #0]
}
 8001b3e:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001b42:	b011      	add	sp, #68	; 0x44
 8001b44:	bd30      	pop	{r4, r5, pc}
		XBeeTransmitReceive(data_buf, xbee_rx_buf, TX_DATA_BUF_SZ, glass);
 8001b46:	2210      	movs	r2, #16
 8001b48:	a902      	add	r1, sp, #8
 8001b4a:	a80a      	add	r0, sp, #40	; 0x28
 8001b4c:	f7ff fa5c 	bl	8001008 <XBeeTransmitReceive>
 8001b50:	e7e8      	b.n	8001b24 <sendCurrentPosition+0x78>
		XBeeTransmitReceive(data_buf, xbee_rx_buf, TX_DATA_BUF_SZ, comp);
 8001b52:	2301      	movs	r3, #1
 8001b54:	2210      	movs	r2, #16
 8001b56:	a902      	add	r1, sp, #8
 8001b58:	a80a      	add	r0, sp, #40	; 0x28
 8001b5a:	f7ff fa55 	bl	8001008 <XBeeTransmitReceive>
 8001b5e:	e7e1      	b.n	8001b24 <sendCurrentPosition+0x78>
 8001b60:	200001e0 	.word	0x200001e0
 8001b64:	51eb851f 	.word	0x51eb851f

08001b68 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8001b68:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b6a:	e7fe      	b.n	8001b6a <Error_Handler+0x2>

08001b6c <MX_SPI1_Init>:
{
 8001b6c:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 8001b6e:	480f      	ldr	r0, [pc, #60]	; (8001bac <MX_SPI1_Init+0x40>)
 8001b70:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <MX_SPI1_Init+0x44>)
 8001b72:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b74:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001b78:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b7e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001b82:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b84:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b86:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b8c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001b8e:	2210      	movs	r2, #16
 8001b90:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b92:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b94:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b96:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001b98:	2207      	movs	r2, #7
 8001b9a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b9c:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001b9e:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ba0:	f001 faca 	bl	8003138 <HAL_SPI_Init>
 8001ba4:	b900      	cbnz	r0, 8001ba8 <MX_SPI1_Init+0x3c>
}
 8001ba6:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001ba8:	f7ff ffde 	bl	8001b68 <Error_Handler>
 8001bac:	200001e4 	.word	0x200001e4
 8001bb0:	40013000 	.word	0x40013000

08001bb4 <MX_SPI3_Init>:
{
 8001bb4:	b508      	push	{r3, lr}
  hspi3.Instance = SPI3;
 8001bb6:	4810      	ldr	r0, [pc, #64]	; (8001bf8 <MX_SPI3_Init+0x44>)
 8001bb8:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <MX_SPI3_Init+0x48>)
 8001bba:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001bbc:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001bc0:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bc6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001bca:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bcc:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bce:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd4:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001bd6:	2210      	movs	r2, #16
 8001bd8:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bda:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bdc:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bde:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001be0:	2207      	movs	r2, #7
 8001be2:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001be4:	6303      	str	r3, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001be6:	2308      	movs	r3, #8
 8001be8:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001bea:	f001 faa5 	bl	8003138 <HAL_SPI_Init>
 8001bee:	b900      	cbnz	r0, 8001bf2 <MX_SPI3_Init+0x3e>
}
 8001bf0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001bf2:	f7ff ffb9 	bl	8001b68 <Error_Handler>
 8001bf6:	bf00      	nop
 8001bf8:	20000248 	.word	0x20000248
 8001bfc:	40003c00 	.word	0x40003c00

08001c00 <MX_TIM2_Init>:
{
 8001c00:	b500      	push	{lr}
 8001c02:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c04:	2300      	movs	r3, #0
 8001c06:	930a      	str	r3, [sp, #40]	; 0x28
 8001c08:	930b      	str	r3, [sp, #44]	; 0x2c
 8001c0a:	930c      	str	r3, [sp, #48]	; 0x30
 8001c0c:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c0e:	9307      	str	r3, [sp, #28]
 8001c10:	9308      	str	r3, [sp, #32]
 8001c12:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	9301      	str	r3, [sp, #4]
 8001c18:	9302      	str	r3, [sp, #8]
 8001c1a:	9303      	str	r3, [sp, #12]
 8001c1c:	9304      	str	r3, [sp, #16]
 8001c1e:	9305      	str	r3, [sp, #20]
 8001c20:	9306      	str	r3, [sp, #24]
  htim2.Instance = TIM2;
 8001c22:	481d      	ldr	r0, [pc, #116]	; (8001c98 <MX_TIM2_Init+0x98>)
 8001c24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c28:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 7999;
 8001c2a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001c2e:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c30:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 40;
 8001c32:	2228      	movs	r2, #40	; 0x28
 8001c34:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c36:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c38:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c3a:	f002 f8a5 	bl	8003d88 <HAL_TIM_Base_Init>
 8001c3e:	bb00      	cbnz	r0, 8001c82 <MX_TIM2_Init+0x82>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c44:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c46:	a90a      	add	r1, sp, #40	; 0x28
 8001c48:	4813      	ldr	r0, [pc, #76]	; (8001c98 <MX_TIM2_Init+0x98>)
 8001c4a:	f002 f983 	bl	8003f54 <HAL_TIM_ConfigClockSource>
 8001c4e:	b9d0      	cbnz	r0, 8001c86 <MX_TIM2_Init+0x86>
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001c50:	4811      	ldr	r0, [pc, #68]	; (8001c98 <MX_TIM2_Init+0x98>)
 8001c52:	f002 f8c9 	bl	8003de8 <HAL_TIM_OC_Init>
 8001c56:	b9c0      	cbnz	r0, 8001c8a <MX_TIM2_Init+0x8a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c5c:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c5e:	a907      	add	r1, sp, #28
 8001c60:	480d      	ldr	r0, [pc, #52]	; (8001c98 <MX_TIM2_Init+0x98>)
 8001c62:	f002 f9f7 	bl	8004054 <HAL_TIMEx_MasterConfigSynchronization>
 8001c66:	b990      	cbnz	r0, 8001c8e <MX_TIM2_Init+0x8e>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001c68:	2200      	movs	r2, #0
 8001c6a:	9200      	str	r2, [sp, #0]
  sConfigOC.Pulse = 0;
 8001c6c:	9201      	str	r2, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c6e:	9202      	str	r2, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c70:	9204      	str	r2, [sp, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c72:	4669      	mov	r1, sp
 8001c74:	4808      	ldr	r0, [pc, #32]	; (8001c98 <MX_TIM2_Init+0x98>)
 8001c76:	f002 f923 	bl	8003ec0 <HAL_TIM_OC_ConfigChannel>
 8001c7a:	b950      	cbnz	r0, 8001c92 <MX_TIM2_Init+0x92>
}
 8001c7c:	b00f      	add	sp, #60	; 0x3c
 8001c7e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001c82:	f7ff ff71 	bl	8001b68 <Error_Handler>
    Error_Handler();
 8001c86:	f7ff ff6f 	bl	8001b68 <Error_Handler>
    Error_Handler();
 8001c8a:	f7ff ff6d 	bl	8001b68 <Error_Handler>
    Error_Handler();
 8001c8e:	f7ff ff6b 	bl	8001b68 <Error_Handler>
    Error_Handler();
 8001c92:	f7ff ff69 	bl	8001b68 <Error_Handler>
 8001c96:	bf00      	nop
 8001c98:	200002ac 	.word	0x200002ac

08001c9c <SystemClock_Config>:
{
 8001c9c:	b500      	push	{lr}
 8001c9e:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ca0:	2244      	movs	r2, #68	; 0x44
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	a805      	add	r0, sp, #20
 8001ca6:	f002 fad1 	bl	800424c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001caa:	2300      	movs	r3, #0
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	9301      	str	r3, [sp, #4]
 8001cb0:	9302      	str	r3, [sp, #8]
 8001cb2:	9303      	str	r3, [sp, #12]
 8001cb4:	9304      	str	r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001cb6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001cba:	f000 fc03 	bl	80024c4 <HAL_PWREx_ControlVoltageScaling>
 8001cbe:	b9d0      	cbnz	r0, 8001cf6 <SystemClock_Config+0x5a>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001cc0:	2310      	movs	r3, #16
 8001cc2:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8001ccc:	2280      	movs	r2, #128	; 0x80
 8001cce:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001cd0:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cd2:	a805      	add	r0, sp, #20
 8001cd4:	f000 fce0 	bl	8002698 <HAL_RCC_OscConfig>
 8001cd8:	b978      	cbnz	r0, 8001cfa <SystemClock_Config+0x5e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cda:	230f      	movs	r3, #15
 8001cdc:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001cde:	2100      	movs	r1, #0
 8001ce0:	9101      	str	r1, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ce2:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ce4:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ce6:	9104      	str	r1, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ce8:	4668      	mov	r0, sp
 8001cea:	f001 f80b 	bl	8002d04 <HAL_RCC_ClockConfig>
 8001cee:	b930      	cbnz	r0, 8001cfe <SystemClock_Config+0x62>
}
 8001cf0:	b017      	add	sp, #92	; 0x5c
 8001cf2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001cf6:	f7ff ff37 	bl	8001b68 <Error_Handler>
    Error_Handler();
 8001cfa:	f7ff ff35 	bl	8001b68 <Error_Handler>
    Error_Handler();
 8001cfe:	f7ff ff33 	bl	8001b68 <Error_Handler>
	...

08001d04 <main>:
{
 8001d04:	b580      	push	{r7, lr}
  HAL_Init();
 8001d06:	f000 fa35 	bl	8002174 <HAL_Init>
  SystemClock_Config();
 8001d0a:	f7ff ffc7 	bl	8001c9c <SystemClock_Config>
  MX_GPIO_Init();
 8001d0e:	f7ff fe1d 	bl	800194c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001d12:	f7ff ff2b 	bl	8001b6c <MX_SPI1_Init>
  MX_SPI3_Init();
 8001d16:	f7ff ff4d 	bl	8001bb4 <MX_SPI3_Init>
  MX_TIM2_Init();
 8001d1a:	f7ff ff71 	bl	8001c00 <MX_TIM2_Init>
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 8001d1e:	483b      	ldr	r0, [pc, #236]	; (8001e0c <main+0x108>)
 8001d20:	f001 fef0 	bl	8003b04 <HAL_TIM_Base_Start_IT>
 8001d24:	b108      	cbz	r0, 8001d2a <main+0x26>
      Error_Handler();
 8001d26:	f7ff ff1f 	bl	8001b68 <Error_Handler>
  IMU_init(&hspi1, &IMU0, 0);
 8001d2a:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8001e2c <main+0x128>
 8001d2e:	4c38      	ldr	r4, [pc, #224]	; (8001e10 <main+0x10c>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	4649      	mov	r1, r9
 8001d34:	4620      	mov	r0, r4
 8001d36:	f7fe ffff 	bl	8000d38 <IMU_init>
  IMU_init(&hspi1, &IMU1, 1);
 8001d3a:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8001e30 <main+0x12c>
 8001d3e:	2201      	movs	r2, #1
 8001d40:	4641      	mov	r1, r8
 8001d42:	4620      	mov	r0, r4
 8001d44:	f7fe fff8 	bl	8000d38 <IMU_init>
  IMU_init(&hspi1, &IMU2, 2);
 8001d48:	4f32      	ldr	r7, [pc, #200]	; (8001e14 <main+0x110>)
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	4639      	mov	r1, r7
 8001d4e:	4620      	mov	r0, r4
 8001d50:	f7fe fff2 	bl	8000d38 <IMU_init>
  HAL_Delay(500);
 8001d54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d58:	f000 fa34 	bl	80021c4 <HAL_Delay>
  IMU_readSensorData(&IMU0, &IMU0_data);
 8001d5c:	4c2e      	ldr	r4, [pc, #184]	; (8001e18 <main+0x114>)
 8001d5e:	4621      	mov	r1, r4
 8001d60:	4648      	mov	r0, r9
 8001d62:	f7fe ff80 	bl	8000c66 <IMU_readSensorData>
  IMU_readSensorData(&IMU1, &IMU1_data);
 8001d66:	4d2d      	ldr	r5, [pc, #180]	; (8001e1c <main+0x118>)
 8001d68:	4629      	mov	r1, r5
 8001d6a:	4640      	mov	r0, r8
 8001d6c:	f7fe ff7b 	bl	8000c66 <IMU_readSensorData>
  IMU_readSensorData(&IMU2, &IMU2_data);
 8001d70:	4e2b      	ldr	r6, [pc, #172]	; (8001e20 <main+0x11c>)
 8001d72:	4631      	mov	r1, r6
 8001d74:	4638      	mov	r0, r7
 8001d76:	f7fe ff76 	bl	8000c66 <IMU_readSensorData>
  HAL_Delay(500);
 8001d7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d7e:	f000 fa21 	bl	80021c4 <HAL_Delay>
  IMU_readSensorData(&IMU0, &IMU0_data);
 8001d82:	4621      	mov	r1, r4
 8001d84:	4648      	mov	r0, r9
 8001d86:	f7fe ff6e 	bl	8000c66 <IMU_readSensorData>
  IMU_readSensorData(&IMU1, &IMU1_data);
 8001d8a:	4629      	mov	r1, r5
 8001d8c:	4640      	mov	r0, r8
 8001d8e:	f7fe ff6a 	bl	8000c66 <IMU_readSensorData>
  IMU_readSensorData(&IMU2, &IMU2_data);
 8001d92:	4631      	mov	r1, r6
 8001d94:	4638      	mov	r0, r7
 8001d96:	f7fe ff66 	bl	8000c66 <IMU_readSensorData>
  init_heuristic_processing(&IMU0_data, &IMU1_data, &IMU2_data);
 8001d9a:	4632      	mov	r2, r6
 8001d9c:	4629      	mov	r1, r5
 8001d9e:	4620      	mov	r0, r4
 8001da0:	f7ff fdb0 	bl	8001904 <init_heuristic_processing>
	  if (DRDY_flag || periodic_tx_flag) {
 8001da4:	4b1f      	ldr	r3, [pc, #124]	; (8001e24 <main+0x120>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	b913      	cbnz	r3, 8001db0 <main+0xac>
 8001daa:	4b1f      	ldr	r3, [pc, #124]	; (8001e28 <main+0x124>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	b1e3      	cbz	r3, 8001dea <main+0xe6>
			  IMU_readSensorData(&IMU0, &IMU0_data);
 8001db0:	4c19      	ldr	r4, [pc, #100]	; (8001e18 <main+0x114>)
 8001db2:	4621      	mov	r1, r4
 8001db4:	481d      	ldr	r0, [pc, #116]	; (8001e2c <main+0x128>)
 8001db6:	f7fe ff56 	bl	8000c66 <IMU_readSensorData>
			  IMU_readSensorData(&IMU1, &IMU1_data);
 8001dba:	4d18      	ldr	r5, [pc, #96]	; (8001e1c <main+0x118>)
 8001dbc:	4629      	mov	r1, r5
 8001dbe:	481c      	ldr	r0, [pc, #112]	; (8001e30 <main+0x12c>)
 8001dc0:	f7fe ff51 	bl	8000c66 <IMU_readSensorData>
			  IMU_readSensorData(&IMU2, &IMU2_data);
 8001dc4:	4e16      	ldr	r6, [pc, #88]	; (8001e20 <main+0x11c>)
 8001dc6:	4631      	mov	r1, r6
 8001dc8:	4812      	ldr	r0, [pc, #72]	; (8001e14 <main+0x110>)
 8001dca:	f7fe ff4c 	bl	8000c66 <IMU_readSensorData>
			  calculatePosition(&IMU0_data, &IMU1_data, &IMU2_data, timeDelta);
 8001dce:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <main+0x130>)
 8001dd0:	ed93 0a00 	vldr	s0, [r3]
 8001dd4:	4632      	mov	r2, r6
 8001dd6:	4629      	mov	r1, r5
 8001dd8:	4620      	mov	r0, r4
 8001dda:	f7ff fb9d 	bl	8001518 <calculatePosition>
			  DRDY_flag = 0;
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <main+0x120>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	701a      	strb	r2, [r3, #0]
			  new_data_flag = 1;
 8001de4:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <main+0x134>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	701a      	strb	r2, [r3, #0]
	  if (periodic_tx_flag && new_data_flag) {
 8001dea:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <main+0x124>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0d8      	beq.n	8001da4 <main+0xa0>
 8001df2:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <main+0x134>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0d4      	beq.n	8001da4 <main+0xa0>
		  sendCurrentPosition(RUN_STATE);
 8001dfa:	2001      	movs	r0, #1
 8001dfc:	f7ff fe56 	bl	8001aac <sendCurrentPosition>
		  periodic_tx_flag = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	4a09      	ldr	r2, [pc, #36]	; (8001e28 <main+0x124>)
 8001e04:	7013      	strb	r3, [r2, #0]
		  new_data_flag = 0;
 8001e06:	4a0c      	ldr	r2, [pc, #48]	; (8001e38 <main+0x134>)
 8001e08:	7013      	strb	r3, [r2, #0]
 8001e0a:	e7cb      	b.n	8001da4 <main+0xa0>
 8001e0c:	200002ac 	.word	0x200002ac
 8001e10:	200001e4 	.word	0x200001e4
 8001e14:	200001a8 	.word	0x200001a8
 8001e18:	20000158 	.word	0x20000158
 8001e1c:	20000190 	.word	0x20000190
 8001e20:	200001c8 	.word	0x200001c8
 8001e24:	20000134 	.word	0x20000134
 8001e28:	20000015 	.word	0x20000015
 8001e2c:	20000138 	.word	0x20000138
 8001e30:	20000170 	.word	0x20000170
 8001e34:	20000018 	.word	0x20000018
 8001e38:	200002f8 	.word	0x200002f8

08001e3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e3c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <HAL_MspInit+0x2c>)
 8001e40:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e42:	f042 0201 	orr.w	r2, r2, #1
 8001e46:	661a      	str	r2, [r3, #96]	; 0x60
 8001e48:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e4a:	f002 0201 	and.w	r2, r2, #1
 8001e4e:	9200      	str	r2, [sp, #0]
 8001e50:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e52:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e54:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e58:	659a      	str	r2, [r3, #88]	; 0x58
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e60:	9301      	str	r3, [sp, #4]
 8001e62:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e64:	b002      	add	sp, #8
 8001e66:	4770      	bx	lr
 8001e68:	40021000 	.word	0x40021000

08001e6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e6c:	b500      	push	{lr}
 8001e6e:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	2300      	movs	r3, #0
 8001e72:	9305      	str	r3, [sp, #20]
 8001e74:	9306      	str	r3, [sp, #24]
 8001e76:	9307      	str	r3, [sp, #28]
 8001e78:	9308      	str	r3, [sp, #32]
 8001e7a:	9309      	str	r3, [sp, #36]	; 0x24
  if(hspi->Instance==SPI1)
 8001e7c:	6803      	ldr	r3, [r0, #0]
 8001e7e:	4a25      	ldr	r2, [pc, #148]	; (8001f14 <HAL_SPI_MspInit+0xa8>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d005      	beq.n	8001e90 <HAL_SPI_MspInit+0x24>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 8001e84:	4a24      	ldr	r2, [pc, #144]	; (8001f18 <HAL_SPI_MspInit+0xac>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d023      	beq.n	8001ed2 <HAL_SPI_MspInit+0x66>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001e8a:	b00b      	add	sp, #44	; 0x2c
 8001e8c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e90:	4b22      	ldr	r3, [pc, #136]	; (8001f1c <HAL_SPI_MspInit+0xb0>)
 8001e92:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001e98:	661a      	str	r2, [r3, #96]	; 0x60
 8001e9a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e9c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001ea0:	9201      	str	r2, [sp, #4]
 8001ea2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ea6:	f042 0201 	orr.w	r2, r2, #1
 8001eaa:	64da      	str	r2, [r3, #76]	; 0x4c
 8001eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	9302      	str	r3, [sp, #8]
 8001eb4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8001eb6:	23c2      	movs	r3, #194	; 0xc2
 8001eb8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ec2:	2305      	movs	r3, #5
 8001ec4:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec6:	a905      	add	r1, sp, #20
 8001ec8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ecc:	f000 f9fa 	bl	80022c4 <HAL_GPIO_Init>
 8001ed0:	e7db      	b.n	8001e8a <HAL_SPI_MspInit+0x1e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ed2:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <HAL_SPI_MspInit+0xb0>)
 8001ed4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ed6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eda:	659a      	str	r2, [r3, #88]	; 0x58
 8001edc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ede:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001ee2:	9203      	str	r2, [sp, #12]
 8001ee4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ee8:	f042 0202 	orr.w	r2, r2, #2
 8001eec:	64da      	str	r2, [r3, #76]	; 0x4c
 8001eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	9304      	str	r3, [sp, #16]
 8001ef6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001ef8:	2338      	movs	r3, #56	; 0x38
 8001efa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efc:	2302      	movs	r3, #2
 8001efe:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f00:	2303      	movs	r3, #3
 8001f02:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f04:	2306      	movs	r3, #6
 8001f06:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f08:	a905      	add	r1, sp, #20
 8001f0a:	4805      	ldr	r0, [pc, #20]	; (8001f20 <HAL_SPI_MspInit+0xb4>)
 8001f0c:	f000 f9da 	bl	80022c4 <HAL_GPIO_Init>
}
 8001f10:	e7bb      	b.n	8001e8a <HAL_SPI_MspInit+0x1e>
 8001f12:	bf00      	nop
 8001f14:	40013000 	.word	0x40013000
 8001f18:	40003c00 	.word	0x40003c00
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	48000400 	.word	0x48000400

08001f24 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8001f24:	6803      	ldr	r3, [r0, #0]
 8001f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f2a:	d000      	beq.n	8001f2e <HAL_TIM_Base_MspInit+0xa>
 8001f2c:	4770      	bx	lr
{
 8001f2e:	b500      	push	{lr}
 8001f30:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f32:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001f36:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f38:	f042 0201 	orr.w	r2, r2, #1
 8001f3c:	659a      	str	r2, [r3, #88]	; 0x58
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	9301      	str	r3, [sp, #4]
 8001f46:	9b01      	ldr	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	201c      	movs	r0, #28
 8001f4e:	f000 f95f 	bl	8002210 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f52:	201c      	movs	r0, #28
 8001f54:	f000 f994 	bl	8002280 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f58:	b003      	add	sp, #12
 8001f5a:	f85d fb04 	ldr.w	pc, [sp], #4

08001f5e <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f5e:	e7fe      	b.n	8001f5e <NMI_Handler>

08001f60 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f60:	e7fe      	b.n	8001f60 <HardFault_Handler>

08001f62 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f62:	e7fe      	b.n	8001f62 <MemManage_Handler>

08001f64 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <BusFault_Handler>

08001f66 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f66:	e7fe      	b.n	8001f66 <UsageFault_Handler>

08001f68 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f68:	4770      	bx	lr

08001f6a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f6a:	4770      	bx	lr

08001f6c <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f6c:	4770      	bx	lr

08001f6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f6e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f70:	f000 f916 	bl	80021a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f74:	bd08      	pop	{r3, pc}

08001f76 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001f76:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MAG_INT_Pin);
 8001f78:	2001      	movs	r0, #1
 8001f7a:	f000 fa8d 	bl	8002498 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001f7e:	bd08      	pop	{r3, pc}

08001f80 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001f80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU3_INT1_Pin);
 8001f82:	2008      	movs	r0, #8
 8001f84:	f000 fa88 	bl	8002498 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  DRDY_flag = 1;
 8001f88:	4b01      	ldr	r3, [pc, #4]	; (8001f90 <EXTI3_IRQHandler+0x10>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI3_IRQn 1 */
}
 8001f8e:	bd08      	pop	{r3, pc}
 8001f90:	20000134 	.word	0x20000134

08001f94 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001f94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU3_INT2_Pin);
 8001f96:	2010      	movs	r0, #16
 8001f98:	f000 fa7e 	bl	8002498 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  DRDY_flag = 1;
 8001f9c:	4b01      	ldr	r3, [pc, #4]	; (8001fa4 <EXTI4_IRQHandler+0x10>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI4_IRQn 1 */
}
 8001fa2:	bd08      	pop	{r3, pc}
 8001fa4:	20000134 	.word	0x20000134

08001fa8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001fa8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU2_INT1_Pin);
 8001faa:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001fae:	f000 fa73 	bl	8002498 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  DRDY_flag = 1;
 8001fb2:	4b02      	ldr	r3, [pc, #8]	; (8001fbc <EXTI9_5_IRQHandler+0x14>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001fb8:	bd08      	pop	{r3, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000134 	.word	0x20000134

08001fc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fc0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fc2:	4803      	ldr	r0, [pc, #12]	; (8001fd0 <TIM2_IRQHandler+0x10>)
 8001fc4:	f001 fdda 	bl	8003b7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  periodic_tx_flag = 1;
 8001fc8:	4b02      	ldr	r3, [pc, #8]	; (8001fd4 <TIM2_IRQHandler+0x14>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 8001fce:	bd08      	pop	{r3, pc}
 8001fd0:	200002ac 	.word	0x200002ac
 8001fd4:	20000015 	.word	0x20000015

08001fd8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fd8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU2_INT2_Pin);
 8001fda:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001fde:	f000 fa5b 	bl	8002498 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IMU1_INT1_Pin);
 8001fe2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001fe6:	f000 fa57 	bl	8002498 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IMU1_INT2_Pin);
 8001fea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001fee:	f000 fa53 	bl	8002498 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  DRDY_flag = 1;
 8001ff2:	4b02      	ldr	r3, [pc, #8]	; (8001ffc <EXTI15_10_IRQHandler+0x24>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ff8:	bd08      	pop	{r3, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000134 	.word	0x20000134

08002000 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8002000:	2001      	movs	r0, #1
 8002002:	4770      	bx	lr

08002004 <_kill>:

int _kill(int pid, int sig)
{
 8002004:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002006:	f002 f8d5 	bl	80041b4 <__errno>
 800200a:	2316      	movs	r3, #22
 800200c:	6003      	str	r3, [r0, #0]
  return -1;
}
 800200e:	f04f 30ff 	mov.w	r0, #4294967295
 8002012:	bd08      	pop	{r3, pc}

08002014 <_exit>:

void _exit (int status)
{
 8002014:	b508      	push	{r3, lr}
  _kill(status, -1);
 8002016:	f04f 31ff 	mov.w	r1, #4294967295
 800201a:	f7ff fff3 	bl	8002004 <_kill>
  while (1) {}    /* Make sure we hang here */
 800201e:	e7fe      	b.n	800201e <_exit+0xa>

08002020 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002020:	b570      	push	{r4, r5, r6, lr}
 8002022:	460c      	mov	r4, r1
 8002024:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002026:	2500      	movs	r5, #0
 8002028:	e006      	b.n	8002038 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 800202a:	f3af 8000 	nop.w
 800202e:	4621      	mov	r1, r4
 8002030:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002034:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8002036:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002038:	42b5      	cmp	r5, r6
 800203a:	dbf6      	blt.n	800202a <_read+0xa>
  }

  return len;
}
 800203c:	4630      	mov	r0, r6
 800203e:	bd70      	pop	{r4, r5, r6, pc}

08002040 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002040:	b570      	push	{r4, r5, r6, lr}
 8002042:	460c      	mov	r4, r1
 8002044:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002046:	2500      	movs	r5, #0
 8002048:	e004      	b.n	8002054 <_write+0x14>
  {
    __io_putchar(*ptr++);
 800204a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800204e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002052:	3501      	adds	r5, #1
 8002054:	42b5      	cmp	r5, r6
 8002056:	dbf8      	blt.n	800204a <_write+0xa>
  }
  return len;
}
 8002058:	4630      	mov	r0, r6
 800205a:	bd70      	pop	{r4, r5, r6, pc}

0800205c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 800205c:	f04f 30ff 	mov.w	r0, #4294967295
 8002060:	4770      	bx	lr

08002062 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002062:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002066:	604b      	str	r3, [r1, #4]
  return 0;
}
 8002068:	2000      	movs	r0, #0
 800206a:	4770      	bx	lr

0800206c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 800206c:	2001      	movs	r0, #1
 800206e:	4770      	bx	lr

08002070 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002070:	2000      	movs	r0, #0
 8002072:	4770      	bx	lr

08002074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002074:	b510      	push	{r4, lr}
 8002076:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002078:	4a0c      	ldr	r2, [pc, #48]	; (80020ac <_sbrk+0x38>)
 800207a:	490d      	ldr	r1, [pc, #52]	; (80020b0 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800207c:	480d      	ldr	r0, [pc, #52]	; (80020b4 <_sbrk+0x40>)
 800207e:	6800      	ldr	r0, [r0, #0]
 8002080:	b140      	cbz	r0, 8002094 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002082:	480c      	ldr	r0, [pc, #48]	; (80020b4 <_sbrk+0x40>)
 8002084:	6800      	ldr	r0, [r0, #0]
 8002086:	4403      	add	r3, r0
 8002088:	1a52      	subs	r2, r2, r1
 800208a:	4293      	cmp	r3, r2
 800208c:	d806      	bhi.n	800209c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800208e:	4a09      	ldr	r2, [pc, #36]	; (80020b4 <_sbrk+0x40>)
 8002090:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002092:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002094:	4807      	ldr	r0, [pc, #28]	; (80020b4 <_sbrk+0x40>)
 8002096:	4c08      	ldr	r4, [pc, #32]	; (80020b8 <_sbrk+0x44>)
 8002098:	6004      	str	r4, [r0, #0]
 800209a:	e7f2      	b.n	8002082 <_sbrk+0xe>
    errno = ENOMEM;
 800209c:	f002 f88a 	bl	80041b4 <__errno>
 80020a0:	230c      	movs	r3, #12
 80020a2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80020a4:	f04f 30ff 	mov.w	r0, #4294967295
 80020a8:	e7f3      	b.n	8002092 <_sbrk+0x1e>
 80020aa:	bf00      	nop
 80020ac:	20010000 	.word	0x20010000
 80020b0:	00000400 	.word	0x00000400
 80020b4:	200002fc 	.word	0x200002fc
 80020b8:	20000318 	.word	0x20000318

080020bc <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80020bc:	4a03      	ldr	r2, [pc, #12]	; (80020cc <SystemInit+0x10>)
 80020be:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80020c2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020c6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80020ca:	4770      	bx	lr
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002108 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020d4:	f7ff fff2 	bl	80020bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020d8:	480c      	ldr	r0, [pc, #48]	; (800210c <LoopForever+0x6>)
  ldr r1, =_edata
 80020da:	490d      	ldr	r1, [pc, #52]	; (8002110 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020dc:	4a0d      	ldr	r2, [pc, #52]	; (8002114 <LoopForever+0xe>)
  movs r3, #0
 80020de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020e0:	e002      	b.n	80020e8 <LoopCopyDataInit>

080020e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020e6:	3304      	adds	r3, #4

080020e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020ec:	d3f9      	bcc.n	80020e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ee:	4a0a      	ldr	r2, [pc, #40]	; (8002118 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020f0:	4c0a      	ldr	r4, [pc, #40]	; (800211c <LoopForever+0x16>)
  movs r3, #0
 80020f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f4:	e001      	b.n	80020fa <LoopFillZerobss>

080020f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f8:	3204      	adds	r2, #4

080020fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020fc:	d3fb      	bcc.n	80020f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020fe:	f002 f871 	bl	80041e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002102:	f7ff fdff 	bl	8001d04 <main>

08002106 <LoopForever>:

LoopForever:
    b LoopForever
 8002106:	e7fe      	b.n	8002106 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002108:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800210c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002110:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002114:	08006360 	.word	0x08006360
  ldr r2, =_sbss
 8002118:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 800211c:	20000314 	.word	0x20000314

08002120 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002120:	e7fe      	b.n	8002120 <ADC1_IRQHandler>
	...

08002124 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002124:	4b10      	ldr	r3, [pc, #64]	; (8002168 <HAL_InitTick+0x44>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	b90b      	cbnz	r3, 800212e <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800212a:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800212c:	4770      	bx	lr
{
 800212e:	b510      	push	{r4, lr}
 8002130:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002132:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002136:	fbb0 f3f3 	udiv	r3, r0, r3
 800213a:	4a0c      	ldr	r2, [pc, #48]	; (800216c <HAL_InitTick+0x48>)
 800213c:	6810      	ldr	r0, [r2, #0]
 800213e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002142:	f000 f8ab 	bl	800229c <HAL_SYSTICK_Config>
 8002146:	b968      	cbnz	r0, 8002164 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002148:	2c0f      	cmp	r4, #15
 800214a:	d901      	bls.n	8002150 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 800214c:	2001      	movs	r0, #1
 800214e:	e00a      	b.n	8002166 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002150:	2200      	movs	r2, #0
 8002152:	4621      	mov	r1, r4
 8002154:	f04f 30ff 	mov.w	r0, #4294967295
 8002158:	f000 f85a 	bl	8002210 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800215c:	4b04      	ldr	r3, [pc, #16]	; (8002170 <HAL_InitTick+0x4c>)
 800215e:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8002160:	2000      	movs	r0, #0
 8002162:	e000      	b.n	8002166 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8002164:	2001      	movs	r0, #1
}
 8002166:	bd10      	pop	{r4, pc}
 8002168:	20000020 	.word	0x20000020
 800216c:	2000001c 	.word	0x2000001c
 8002170:	20000024 	.word	0x20000024

08002174 <HAL_Init>:
{
 8002174:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002176:	4a09      	ldr	r2, [pc, #36]	; (800219c <HAL_Init+0x28>)
 8002178:	6813      	ldr	r3, [r2, #0]
 800217a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800217e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002180:	2003      	movs	r0, #3
 8002182:	f000 f833 	bl	80021ec <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002186:	200f      	movs	r0, #15
 8002188:	f7ff ffcc 	bl	8002124 <HAL_InitTick>
 800218c:	b110      	cbz	r0, 8002194 <HAL_Init+0x20>
    status = HAL_ERROR;
 800218e:	2401      	movs	r4, #1
}
 8002190:	4620      	mov	r0, r4
 8002192:	bd10      	pop	{r4, pc}
 8002194:	4604      	mov	r4, r0
    HAL_MspInit();
 8002196:	f7ff fe51 	bl	8001e3c <HAL_MspInit>
 800219a:	e7f9      	b.n	8002190 <HAL_Init+0x1c>
 800219c:	40022000 	.word	0x40022000

080021a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80021a0:	4b03      	ldr	r3, [pc, #12]	; (80021b0 <HAL_IncTick+0x10>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	4a03      	ldr	r2, [pc, #12]	; (80021b4 <HAL_IncTick+0x14>)
 80021a6:	6811      	ldr	r1, [r2, #0]
 80021a8:	440b      	add	r3, r1
 80021aa:	6013      	str	r3, [r2, #0]
}
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	20000020 	.word	0x20000020
 80021b4:	20000300 	.word	0x20000300

080021b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80021b8:	4b01      	ldr	r3, [pc, #4]	; (80021c0 <HAL_GetTick+0x8>)
 80021ba:	6818      	ldr	r0, [r3, #0]
}
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	20000300 	.word	0x20000300

080021c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021c4:	b538      	push	{r3, r4, r5, lr}
 80021c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80021c8:	f7ff fff6 	bl	80021b8 <HAL_GetTick>
 80021cc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ce:	f1b4 3fff 	cmp.w	r4, #4294967295
 80021d2:	d002      	beq.n	80021da <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 80021d4:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <HAL_Delay+0x24>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021da:	f7ff ffed 	bl	80021b8 <HAL_GetTick>
 80021de:	1b40      	subs	r0, r0, r5
 80021e0:	42a0      	cmp	r0, r4
 80021e2:	d3fa      	bcc.n	80021da <HAL_Delay+0x16>
  {
  }
}
 80021e4:	bd38      	pop	{r3, r4, r5, pc}
 80021e6:	bf00      	nop
 80021e8:	20000020 	.word	0x20000020

080021ec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021ec:	4a07      	ldr	r2, [pc, #28]	; (800220c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80021ee:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80021f4:	041b      	lsls	r3, r3, #16
 80021f6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021f8:	0200      	lsls	r0, r0, #8
 80021fa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021fe:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002200:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002208:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800220a:	4770      	bx	lr
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002210:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002212:	4b19      	ldr	r3, [pc, #100]	; (8002278 <HAL_NVIC_SetPriority+0x68>)
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800221a:	f1c3 0c07 	rsb	ip, r3, #7
 800221e:	f1bc 0f04 	cmp.w	ip, #4
 8002222:	bf28      	it	cs
 8002224:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002228:	f103 0e04 	add.w	lr, r3, #4
 800222c:	f1be 0f06 	cmp.w	lr, #6
 8002230:	d918      	bls.n	8002264 <HAL_NVIC_SetPriority+0x54>
 8002232:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002234:	f04f 3eff 	mov.w	lr, #4294967295
 8002238:	fa0e fc0c 	lsl.w	ip, lr, ip
 800223c:	ea21 010c 	bic.w	r1, r1, ip
 8002240:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002242:	fa0e f303 	lsl.w	r3, lr, r3
 8002246:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800224a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800224c:	2800      	cmp	r0, #0
 800224e:	db0b      	blt.n	8002268 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002250:	0109      	lsls	r1, r1, #4
 8002252:	b2c9      	uxtb	r1, r1
 8002254:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002258:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800225c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002260:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002264:	2300      	movs	r3, #0
 8002266:	e7e5      	b.n	8002234 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002268:	f000 000f 	and.w	r0, r0, #15
 800226c:	0109      	lsls	r1, r1, #4
 800226e:	b2c9      	uxtb	r1, r1
 8002270:	4b02      	ldr	r3, [pc, #8]	; (800227c <HAL_NVIC_SetPriority+0x6c>)
 8002272:	5419      	strb	r1, [r3, r0]
 8002274:	e7f4      	b.n	8002260 <HAL_NVIC_SetPriority+0x50>
 8002276:	bf00      	nop
 8002278:	e000ed00 	.word	0xe000ed00
 800227c:	e000ed14 	.word	0xe000ed14

08002280 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002280:	2800      	cmp	r0, #0
 8002282:	db07      	blt.n	8002294 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002284:	f000 021f 	and.w	r2, r0, #31
 8002288:	0940      	lsrs	r0, r0, #5
 800228a:	2301      	movs	r3, #1
 800228c:	4093      	lsls	r3, r2
 800228e:	4a02      	ldr	r2, [pc, #8]	; (8002298 <HAL_NVIC_EnableIRQ+0x18>)
 8002290:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	e000e100 	.word	0xe000e100

0800229c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800229c:	3801      	subs	r0, #1
 800229e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80022a2:	d20b      	bcs.n	80022bc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022a4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80022a8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022aa:	4a05      	ldr	r2, [pc, #20]	; (80022c0 <HAL_SYSTICK_Config+0x24>)
 80022ac:	21f0      	movs	r1, #240	; 0xf0
 80022ae:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022b2:	2000      	movs	r0, #0
 80022b4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022b6:	2207      	movs	r2, #7
 80022b8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022ba:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80022bc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80022be:	4770      	bx	lr
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022c6:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 80022c8:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ca:	e062      	b.n	8002392 <HAL_GPIO_Init+0xce>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022cc:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022ce:	005e      	lsls	r6, r3, #1
 80022d0:	2403      	movs	r4, #3
 80022d2:	40b4      	lsls	r4, r6
 80022d4:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022d8:	68cc      	ldr	r4, [r1, #12]
 80022da:	40b4      	lsls	r4, r6
 80022dc:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80022de:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022e0:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022e2:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022e6:	684c      	ldr	r4, [r1, #4]
 80022e8:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80022ec:	409c      	lsls	r4, r3
 80022ee:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 80022f2:	6044      	str	r4, [r0, #4]
 80022f4:	e05e      	b.n	80023b4 <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022f6:	08dd      	lsrs	r5, r3, #3
 80022f8:	3508      	adds	r5, #8
 80022fa:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022fe:	f003 0407 	and.w	r4, r3, #7
 8002302:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8002306:	240f      	movs	r4, #15
 8002308:	fa04 f40c 	lsl.w	r4, r4, ip
 800230c:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002310:	690c      	ldr	r4, [r1, #16]
 8002312:	fa04 f40c 	lsl.w	r4, r4, ip
 8002316:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 800231a:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 800231e:	e060      	b.n	80023e2 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002320:	2404      	movs	r4, #4
 8002322:	e000      	b.n	8002326 <HAL_GPIO_Init+0x62>
 8002324:	2400      	movs	r4, #0
 8002326:	fa04 f40e 	lsl.w	r4, r4, lr
 800232a:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 800232c:	f10c 0c02 	add.w	ip, ip, #2
 8002330:	4d52      	ldr	r5, [pc, #328]	; (800247c <HAL_GPIO_Init+0x1b8>)
 8002332:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002336:	4c52      	ldr	r4, [pc, #328]	; (8002480 <HAL_GPIO_Init+0x1bc>)
 8002338:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 800233a:	43d4      	mvns	r4, r2
 800233c:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002340:	684f      	ldr	r7, [r1, #4]
 8002342:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002346:	d001      	beq.n	800234c <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8002348:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 800234c:	4d4c      	ldr	r5, [pc, #304]	; (8002480 <HAL_GPIO_Init+0x1bc>)
 800234e:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8002350:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8002352:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002356:	684f      	ldr	r7, [r1, #4]
 8002358:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 800235c:	d001      	beq.n	8002362 <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 800235e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8002362:	4d47      	ldr	r5, [pc, #284]	; (8002480 <HAL_GPIO_Init+0x1bc>)
 8002364:	60ee      	str	r6, [r5, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002366:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8002368:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800236c:	684f      	ldr	r7, [r1, #4]
 800236e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002372:	d001      	beq.n	8002378 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 8002374:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8002378:	4d41      	ldr	r5, [pc, #260]	; (8002480 <HAL_GPIO_Init+0x1bc>)
 800237a:	606e      	str	r6, [r5, #4]

        temp = EXTI->IMR1;
 800237c:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 800237e:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002380:	684e      	ldr	r6, [r1, #4]
 8002382:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8002386:	d001      	beq.n	800238c <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 8002388:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 800238c:	4a3c      	ldr	r2, [pc, #240]	; (8002480 <HAL_GPIO_Init+0x1bc>)
 800238e:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 8002390:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002392:	680a      	ldr	r2, [r1, #0]
 8002394:	fa32 f403 	lsrs.w	r4, r2, r3
 8002398:	d06e      	beq.n	8002478 <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800239a:	f04f 0c01 	mov.w	ip, #1
 800239e:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 80023a2:	ea1c 0202 	ands.w	r2, ip, r2
 80023a6:	d0f3      	beq.n	8002390 <HAL_GPIO_Init+0xcc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023a8:	684c      	ldr	r4, [r1, #4]
 80023aa:	f004 0403 	and.w	r4, r4, #3
 80023ae:	3c01      	subs	r4, #1
 80023b0:	2c01      	cmp	r4, #1
 80023b2:	d98b      	bls.n	80022cc <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023b4:	684c      	ldr	r4, [r1, #4]
 80023b6:	f004 0403 	and.w	r4, r4, #3
 80023ba:	2c03      	cmp	r4, #3
 80023bc:	d00c      	beq.n	80023d8 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 80023be:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023c0:	005d      	lsls	r5, r3, #1
 80023c2:	f04f 0c03 	mov.w	ip, #3
 80023c6:	fa0c fc05 	lsl.w	ip, ip, r5
 80023ca:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023ce:	688c      	ldr	r4, [r1, #8]
 80023d0:	40ac      	lsls	r4, r5
 80023d2:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 80023d6:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d8:	684c      	ldr	r4, [r1, #4]
 80023da:	f004 0403 	and.w	r4, r4, #3
 80023de:	2c02      	cmp	r4, #2
 80023e0:	d089      	beq.n	80022f6 <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 80023e2:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023e4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80023e8:	f04f 0c03 	mov.w	ip, #3
 80023ec:	fa0c fc0e 	lsl.w	ip, ip, lr
 80023f0:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023f4:	684c      	ldr	r4, [r1, #4]
 80023f6:	f004 0403 	and.w	r4, r4, #3
 80023fa:	fa04 f40e 	lsl.w	r4, r4, lr
 80023fe:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8002402:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002404:	684c      	ldr	r4, [r1, #4]
 8002406:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 800240a:	d0c1      	beq.n	8002390 <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800240c:	4c1d      	ldr	r4, [pc, #116]	; (8002484 <HAL_GPIO_Init+0x1c0>)
 800240e:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8002410:	f045 0501 	orr.w	r5, r5, #1
 8002414:	6625      	str	r5, [r4, #96]	; 0x60
 8002416:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8002418:	f004 0401 	and.w	r4, r4, #1
 800241c:	9401      	str	r4, [sp, #4]
 800241e:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002420:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8002424:	f10c 0502 	add.w	r5, ip, #2
 8002428:	4c14      	ldr	r4, [pc, #80]	; (800247c <HAL_GPIO_Init+0x1b8>)
 800242a:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800242e:	f003 0403 	and.w	r4, r3, #3
 8002432:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8002436:	240f      	movs	r4, #15
 8002438:	fa04 f40e 	lsl.w	r4, r4, lr
 800243c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002440:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8002444:	f43f af6e 	beq.w	8002324 <HAL_GPIO_Init+0x60>
 8002448:	4c0f      	ldr	r4, [pc, #60]	; (8002488 <HAL_GPIO_Init+0x1c4>)
 800244a:	42a0      	cmp	r0, r4
 800244c:	d00e      	beq.n	800246c <HAL_GPIO_Init+0x1a8>
 800244e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002452:	42a0      	cmp	r0, r4
 8002454:	d00c      	beq.n	8002470 <HAL_GPIO_Init+0x1ac>
 8002456:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800245a:	42a0      	cmp	r0, r4
 800245c:	d00a      	beq.n	8002474 <HAL_GPIO_Init+0x1b0>
 800245e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002462:	42a0      	cmp	r0, r4
 8002464:	f43f af5c 	beq.w	8002320 <HAL_GPIO_Init+0x5c>
 8002468:	2407      	movs	r4, #7
 800246a:	e75c      	b.n	8002326 <HAL_GPIO_Init+0x62>
 800246c:	2401      	movs	r4, #1
 800246e:	e75a      	b.n	8002326 <HAL_GPIO_Init+0x62>
 8002470:	2402      	movs	r4, #2
 8002472:	e758      	b.n	8002326 <HAL_GPIO_Init+0x62>
 8002474:	2403      	movs	r4, #3
 8002476:	e756      	b.n	8002326 <HAL_GPIO_Init+0x62>
  }
}
 8002478:	b003      	add	sp, #12
 800247a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247c:	40010000 	.word	0x40010000
 8002480:	40010400 	.word	0x40010400
 8002484:	40021000 	.word	0x40021000
 8002488:	48000400 	.word	0x48000400

0800248c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800248c:	b10a      	cbz	r2, 8002492 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800248e:	6181      	str	r1, [r0, #24]
 8002490:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002492:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002494:	4770      	bx	lr

08002496 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002496:	4770      	bx	lr

08002498 <HAL_GPIO_EXTI_IRQHandler>:
{
 8002498:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800249a:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	4203      	tst	r3, r0
 80024a0:	d100      	bne.n	80024a4 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 80024a2:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024a4:	4b02      	ldr	r3, [pc, #8]	; (80024b0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80024a6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024a8:	f7ff fff5 	bl	8002496 <HAL_GPIO_EXTI_Callback>
}
 80024ac:	e7f9      	b.n	80024a2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80024ae:	bf00      	nop
 80024b0:	40010400 	.word	0x40010400

080024b4 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80024b4:	4b02      	ldr	r3, [pc, #8]	; (80024c0 <HAL_PWREx_GetVoltageRange+0xc>)
 80024b6:	6818      	ldr	r0, [r3, #0]
#endif
}
 80024b8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40007000 	.word	0x40007000

080024c4 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024c4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80024c8:	d00f      	beq.n	80024ea <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024ca:	4b1f      	ldr	r3, [pc, #124]	; (8002548 <HAL_PWREx_ControlVoltageScaling+0x84>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024d6:	d034      	beq.n	8002542 <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024d8:	4a1b      	ldr	r2, [pc, #108]	; (8002548 <HAL_PWREx_ControlVoltageScaling+0x84>)
 80024da:	6813      	ldr	r3, [r2, #0]
 80024dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024e4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024e6:	2000      	movs	r0, #0
 80024e8:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80024ea:	4b17      	ldr	r3, [pc, #92]	; (8002548 <HAL_PWREx_ControlVoltageScaling+0x84>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024f6:	d020      	beq.n	800253a <HAL_PWREx_ControlVoltageScaling+0x76>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024f8:	4a13      	ldr	r2, [pc, #76]	; (8002548 <HAL_PWREx_ControlVoltageScaling+0x84>)
 80024fa:	6813      	ldr	r3, [r2, #0]
 80024fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002500:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002504:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002506:	4b11      	ldr	r3, [pc, #68]	; (800254c <HAL_PWREx_ControlVoltageScaling+0x88>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2232      	movs	r2, #50	; 0x32
 800250c:	fb02 f303 	mul.w	r3, r2, r3
 8002510:	4a0f      	ldr	r2, [pc, #60]	; (8002550 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8002512:	fba2 2303 	umull	r2, r3, r2, r3
 8002516:	0c9b      	lsrs	r3, r3, #18
 8002518:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800251a:	e000      	b.n	800251e <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 800251c:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800251e:	4a0a      	ldr	r2, [pc, #40]	; (8002548 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002520:	6952      	ldr	r2, [r2, #20]
 8002522:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002526:	d001      	beq.n	800252c <HAL_PWREx_ControlVoltageScaling+0x68>
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1f7      	bne.n	800251c <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800252c:	4b06      	ldr	r3, [pc, #24]	; (8002548 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002534:	d103      	bne.n	800253e <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 8002536:	2000      	movs	r0, #0
 8002538:	4770      	bx	lr
 800253a:	2000      	movs	r0, #0
 800253c:	4770      	bx	lr
        return HAL_TIMEOUT;
 800253e:	2003      	movs	r0, #3
 8002540:	4770      	bx	lr
  return HAL_OK;
 8002542:	2000      	movs	r0, #0
}
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40007000 	.word	0x40007000
 800254c:	2000001c 	.word	0x2000001c
 8002550:	431bde83 	.word	0x431bde83

08002554 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002554:	b530      	push	{r4, r5, lr}
 8002556:	b083      	sub	sp, #12
 8002558:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800255a:	4b20      	ldr	r3, [pc, #128]	; (80025dc <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800255c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002562:	d00b      	beq.n	800257c <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002564:	f7ff ffa6 	bl	80024b4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002568:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800256c:	d017      	beq.n	800259e <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800256e:	2c80      	cmp	r4, #128	; 0x80
 8002570:	d81f      	bhi.n	80025b2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002572:	d02d      	beq.n	80025d0 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002574:	2c70      	cmp	r4, #112	; 0x70
 8002576:	d02d      	beq.n	80025d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002578:	2100      	movs	r1, #0
 800257a:	e01b      	b.n	80025b4 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 800257c:	4d17      	ldr	r5, [pc, #92]	; (80025dc <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800257e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002584:	65ab      	str	r3, [r5, #88]	; 0x58
 8002586:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258c:	9301      	str	r3, [sp, #4]
 800258e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002590:	f7ff ff90 	bl	80024b4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002594:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800259a:	65ab      	str	r3, [r5, #88]	; 0x58
 800259c:	e7e4      	b.n	8002568 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 800259e:	2c80      	cmp	r4, #128	; 0x80
 80025a0:	d903      	bls.n	80025aa <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 80025a2:	2ca0      	cmp	r4, #160	; 0xa0
 80025a4:	d903      	bls.n	80025ae <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 80025a6:	2102      	movs	r1, #2
 80025a8:	e004      	b.n	80025b4 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025aa:	2100      	movs	r1, #0
 80025ac:	e002      	b.n	80025b4 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 80025ae:	2101      	movs	r1, #1
 80025b0:	e000      	b.n	80025b4 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 80025b2:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025b4:	4a0a      	ldr	r2, [pc, #40]	; (80025e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 80025b6:	6813      	ldr	r3, [r2, #0]
 80025b8:	f023 0307 	bic.w	r3, r3, #7
 80025bc:	430b      	orrs	r3, r1
 80025be:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025c0:	6813      	ldr	r3, [r2, #0]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	428b      	cmp	r3, r1
 80025c8:	d106      	bne.n	80025d8 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80025ca:	2000      	movs	r0, #0
}
 80025cc:	b003      	add	sp, #12
 80025ce:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 80025d0:	2102      	movs	r1, #2
 80025d2:	e7ef      	b.n	80025b4 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 80025d4:	2101      	movs	r1, #1
 80025d6:	e7ed      	b.n	80025b4 <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 80025d8:	2001      	movs	r0, #1
 80025da:	e7f7      	b.n	80025cc <RCC_SetFlashLatencyFromMSIRange+0x78>
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40022000 	.word	0x40022000

080025e4 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025e4:	4a28      	ldr	r2, [pc, #160]	; (8002688 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025e6:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025e8:	68d2      	ldr	r2, [r2, #12]
 80025ea:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025ee:	f013 030c 	ands.w	r3, r3, #12
 80025f2:	d00a      	beq.n	800260a <HAL_RCC_GetSysClockFreq+0x26>
 80025f4:	2b0c      	cmp	r3, #12
 80025f6:	d006      	beq.n	8002606 <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	d01f      	beq.n	800263c <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d020      	beq.n	8002642 <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002600:	2000      	movs	r0, #0
 8002602:	4602      	mov	r2, r0
 8002604:	e010      	b.n	8002628 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002606:	2a01      	cmp	r2, #1
 8002608:	d1f6      	bne.n	80025f8 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800260a:	4a1f      	ldr	r2, [pc, #124]	; (8002688 <HAL_RCC_GetSysClockFreq+0xa4>)
 800260c:	6812      	ldr	r2, [r2, #0]
 800260e:	f012 0f08 	tst.w	r2, #8
 8002612:	d10c      	bne.n	800262e <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002614:	4a1c      	ldr	r2, [pc, #112]	; (8002688 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002616:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 800261a:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 800261e:	491b      	ldr	r1, [pc, #108]	; (800268c <HAL_RCC_GetSysClockFreq+0xa8>)
 8002620:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002624:	b143      	cbz	r3, 8002638 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002626:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002628:	2b0c      	cmp	r3, #12
 800262a:	d00d      	beq.n	8002648 <HAL_RCC_GetSysClockFreq+0x64>
}
 800262c:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800262e:	4a16      	ldr	r2, [pc, #88]	; (8002688 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002630:	6812      	ldr	r2, [r2, #0]
 8002632:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002636:	e7f2      	b.n	800261e <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 8002638:	4610      	mov	r0, r2
 800263a:	e7f5      	b.n	8002628 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 800263c:	4814      	ldr	r0, [pc, #80]	; (8002690 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800263e:	2200      	movs	r2, #0
 8002640:	e7f2      	b.n	8002628 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8002642:	4814      	ldr	r0, [pc, #80]	; (8002694 <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002644:	2200      	movs	r2, #0
 8002646:	e7ef      	b.n	8002628 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002648:	4b0f      	ldr	r3, [pc, #60]	; (8002688 <HAL_RCC_GetSysClockFreq+0xa4>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002650:	2b02      	cmp	r3, #2
 8002652:	d016      	beq.n	8002682 <HAL_RCC_GetSysClockFreq+0x9e>
 8002654:	2b03      	cmp	r3, #3
 8002656:	d100      	bne.n	800265a <HAL_RCC_GetSysClockFreq+0x76>
      pllvco = HSE_VALUE;
 8002658:	4a0e      	ldr	r2, [pc, #56]	; (8002694 <HAL_RCC_GetSysClockFreq+0xb0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800265a:	490b      	ldr	r1, [pc, #44]	; (8002688 <HAL_RCC_GetSysClockFreq+0xa4>)
 800265c:	68c8      	ldr	r0, [r1, #12]
 800265e:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8002662:	1c43      	adds	r3, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002664:	68c8      	ldr	r0, [r1, #12]
 8002666:	f3c0 2006 	ubfx	r0, r0, #8, #7
 800266a:	fb02 f000 	mul.w	r0, r2, r0
 800266e:	fbb0 f0f3 	udiv	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002672:	68cb      	ldr	r3, [r1, #12]
 8002674:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8002678:	3301      	adds	r3, #1
 800267a:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 800267c:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8002680:	e7d4      	b.n	800262c <HAL_RCC_GetSysClockFreq+0x48>
    switch (pllsource)
 8002682:	4a03      	ldr	r2, [pc, #12]	; (8002690 <HAL_RCC_GetSysClockFreq+0xac>)
 8002684:	e7e9      	b.n	800265a <HAL_RCC_GetSysClockFreq+0x76>
 8002686:	bf00      	nop
 8002688:	40021000 	.word	0x40021000
 800268c:	08005e84 	.word	0x08005e84
 8002690:	00f42400 	.word	0x00f42400
 8002694:	007a1200 	.word	0x007a1200

08002698 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8002698:	2800      	cmp	r0, #0
 800269a:	f000 831c 	beq.w	8002cd6 <HAL_RCC_OscConfig+0x63e>
{
 800269e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026a0:	b083      	sub	sp, #12
 80026a2:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026a4:	4b96      	ldr	r3, [pc, #600]	; (8002900 <HAL_RCC_OscConfig+0x268>)
 80026a6:	689d      	ldr	r5, [r3, #8]
 80026a8:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026ac:	68de      	ldr	r6, [r3, #12]
 80026ae:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026b2:	6803      	ldr	r3, [r0, #0]
 80026b4:	f013 0f10 	tst.w	r3, #16
 80026b8:	d05a      	beq.n	8002770 <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026ba:	b1e5      	cbz	r5, 80026f6 <HAL_RCC_OscConfig+0x5e>
 80026bc:	2d0c      	cmp	r5, #12
 80026be:	d018      	beq.n	80026f2 <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026c0:	69a3      	ldr	r3, [r4, #24]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 80bb 	beq.w	800283e <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 80026c8:	4a8d      	ldr	r2, [pc, #564]	; (8002900 <HAL_RCC_OscConfig+0x268>)
 80026ca:	6813      	ldr	r3, [r2, #0]
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80026d2:	f7ff fd71 	bl	80021b8 <HAL_GetTick>
 80026d6:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026d8:	4b89      	ldr	r3, [pc, #548]	; (8002900 <HAL_RCC_OscConfig+0x268>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f013 0f02 	tst.w	r3, #2
 80026e0:	f040 809a 	bne.w	8002818 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026e4:	f7ff fd68 	bl	80021b8 <HAL_GetTick>
 80026e8:	1bc0      	subs	r0, r0, r7
 80026ea:	2802      	cmp	r0, #2
 80026ec:	d9f4      	bls.n	80026d8 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 80026ee:	2003      	movs	r0, #3
 80026f0:	e2fc      	b.n	8002cec <HAL_RCC_OscConfig+0x654>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80026f2:	2e01      	cmp	r6, #1
 80026f4:	d1e4      	bne.n	80026c0 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026f6:	4b82      	ldr	r3, [pc, #520]	; (8002900 <HAL_RCC_OscConfig+0x268>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f013 0f02 	tst.w	r3, #2
 80026fe:	d003      	beq.n	8002708 <HAL_RCC_OscConfig+0x70>
 8002700:	69a3      	ldr	r3, [r4, #24]
 8002702:	2b00      	cmp	r3, #0
 8002704:	f000 82e9 	beq.w	8002cda <HAL_RCC_OscConfig+0x642>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002708:	6a20      	ldr	r0, [r4, #32]
 800270a:	4b7d      	ldr	r3, [pc, #500]	; (8002900 <HAL_RCC_OscConfig+0x268>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f013 0f08 	tst.w	r3, #8
 8002712:	d05b      	beq.n	80027cc <HAL_RCC_OscConfig+0x134>
 8002714:	4b7a      	ldr	r3, [pc, #488]	; (8002900 <HAL_RCC_OscConfig+0x268>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800271c:	4298      	cmp	r0, r3
 800271e:	d85c      	bhi.n	80027da <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002720:	4b77      	ldr	r3, [pc, #476]	; (8002900 <HAL_RCC_OscConfig+0x268>)
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	f042 0208 	orr.w	r2, r2, #8
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002730:	6a21      	ldr	r1, [r4, #32]
 8002732:	430a      	orrs	r2, r1
 8002734:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800273c:	69e1      	ldr	r1, [r4, #28]
 800273e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002742:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002744:	2d00      	cmp	r5, #0
 8002746:	d060      	beq.n	800280a <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002748:	f7ff ff4c 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 800274c:	4b6c      	ldr	r3, [pc, #432]	; (8002900 <HAL_RCC_OscConfig+0x268>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002754:	4a6b      	ldr	r2, [pc, #428]	; (8002904 <HAL_RCC_OscConfig+0x26c>)
 8002756:	5cd3      	ldrb	r3, [r2, r3]
 8002758:	f003 031f 	and.w	r3, r3, #31
 800275c:	40d8      	lsrs	r0, r3
 800275e:	4b6a      	ldr	r3, [pc, #424]	; (8002908 <HAL_RCC_OscConfig+0x270>)
 8002760:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8002762:	4b6a      	ldr	r3, [pc, #424]	; (800290c <HAL_RCC_OscConfig+0x274>)
 8002764:	6818      	ldr	r0, [r3, #0]
 8002766:	f7ff fcdd 	bl	8002124 <HAL_InitTick>
        if(status != HAL_OK)
 800276a:	2800      	cmp	r0, #0
 800276c:	f040 82be 	bne.w	8002cec <HAL_RCC_OscConfig+0x654>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002770:	6823      	ldr	r3, [r4, #0]
 8002772:	f013 0f01 	tst.w	r3, #1
 8002776:	f000 8081 	beq.w	800287c <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800277a:	2d08      	cmp	r5, #8
 800277c:	d075      	beq.n	800286a <HAL_RCC_OscConfig+0x1d2>
 800277e:	2d0c      	cmp	r5, #12
 8002780:	d071      	beq.n	8002866 <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002782:	6863      	ldr	r3, [r4, #4]
 8002784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002788:	f000 8097 	beq.w	80028ba <HAL_RCC_OscConfig+0x222>
 800278c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002790:	f000 8099 	beq.w	80028c6 <HAL_RCC_OscConfig+0x22e>
 8002794:	4b5a      	ldr	r3, [pc, #360]	; (8002900 <HAL_RCC_OscConfig+0x268>)
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027a4:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027a6:	6863      	ldr	r3, [r4, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 8099 	beq.w	80028e0 <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 80027ae:	f7ff fd03 	bl	80021b8 <HAL_GetTick>
 80027b2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027b4:	4b52      	ldr	r3, [pc, #328]	; (8002900 <HAL_RCC_OscConfig+0x268>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80027bc:	d15e      	bne.n	800287c <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027be:	f7ff fcfb 	bl	80021b8 <HAL_GetTick>
 80027c2:	1bc0      	subs	r0, r0, r7
 80027c4:	2864      	cmp	r0, #100	; 0x64
 80027c6:	d9f5      	bls.n	80027b4 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 80027c8:	2003      	movs	r0, #3
 80027ca:	e28f      	b.n	8002cec <HAL_RCC_OscConfig+0x654>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027cc:	4b4c      	ldr	r3, [pc, #304]	; (8002900 <HAL_RCC_OscConfig+0x268>)
 80027ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027d2:	091b      	lsrs	r3, r3, #4
 80027d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027d8:	e7a0      	b.n	800271c <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027da:	f7ff febb 	bl	8002554 <RCC_SetFlashLatencyFromMSIRange>
 80027de:	2800      	cmp	r0, #0
 80027e0:	f040 827d 	bne.w	8002cde <HAL_RCC_OscConfig+0x646>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027e4:	4b46      	ldr	r3, [pc, #280]	; (8002900 <HAL_RCC_OscConfig+0x268>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	f042 0208 	orr.w	r2, r2, #8
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80027f4:	6a21      	ldr	r1, [r4, #32]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002800:	69e1      	ldr	r1, [r4, #28]
 8002802:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002806:	605a      	str	r2, [r3, #4]
 8002808:	e79e      	b.n	8002748 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800280a:	6a20      	ldr	r0, [r4, #32]
 800280c:	f7ff fea2 	bl	8002554 <RCC_SetFlashLatencyFromMSIRange>
 8002810:	2800      	cmp	r0, #0
 8002812:	d099      	beq.n	8002748 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 8002814:	2001      	movs	r0, #1
 8002816:	e269      	b.n	8002cec <HAL_RCC_OscConfig+0x654>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002818:	4b39      	ldr	r3, [pc, #228]	; (8002900 <HAL_RCC_OscConfig+0x268>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	f042 0208 	orr.w	r2, r2, #8
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002828:	6a21      	ldr	r1, [r4, #32]
 800282a:	430a      	orrs	r2, r1
 800282c:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002834:	69e1      	ldr	r1, [r4, #28]
 8002836:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800283a:	605a      	str	r2, [r3, #4]
 800283c:	e798      	b.n	8002770 <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 800283e:	4a30      	ldr	r2, [pc, #192]	; (8002900 <HAL_RCC_OscConfig+0x268>)
 8002840:	6813      	ldr	r3, [r2, #0]
 8002842:	f023 0301 	bic.w	r3, r3, #1
 8002846:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002848:	f7ff fcb6 	bl	80021b8 <HAL_GetTick>
 800284c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800284e:	4b2c      	ldr	r3, [pc, #176]	; (8002900 <HAL_RCC_OscConfig+0x268>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f013 0f02 	tst.w	r3, #2
 8002856:	d08b      	beq.n	8002770 <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002858:	f7ff fcae 	bl	80021b8 <HAL_GetTick>
 800285c:	1bc0      	subs	r0, r0, r7
 800285e:	2802      	cmp	r0, #2
 8002860:	d9f5      	bls.n	800284e <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 8002862:	2003      	movs	r0, #3
 8002864:	e242      	b.n	8002cec <HAL_RCC_OscConfig+0x654>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002866:	2e03      	cmp	r6, #3
 8002868:	d18b      	bne.n	8002782 <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800286a:	4b25      	ldr	r3, [pc, #148]	; (8002900 <HAL_RCC_OscConfig+0x268>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002872:	d003      	beq.n	800287c <HAL_RCC_OscConfig+0x1e4>
 8002874:	6863      	ldr	r3, [r4, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 8233 	beq.w	8002ce2 <HAL_RCC_OscConfig+0x64a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800287c:	6823      	ldr	r3, [r4, #0]
 800287e:	f013 0f02 	tst.w	r3, #2
 8002882:	d058      	beq.n	8002936 <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002884:	2d04      	cmp	r5, #4
 8002886:	d045      	beq.n	8002914 <HAL_RCC_OscConfig+0x27c>
 8002888:	2d0c      	cmp	r5, #12
 800288a:	d041      	beq.n	8002910 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800288c:	68e3      	ldr	r3, [r4, #12]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d077      	beq.n	8002982 <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 8002892:	4a1b      	ldr	r2, [pc, #108]	; (8002900 <HAL_RCC_OscConfig+0x268>)
 8002894:	6813      	ldr	r3, [r2, #0]
 8002896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800289a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800289c:	f7ff fc8c 	bl	80021b8 <HAL_GetTick>
 80028a0:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028a2:	4b17      	ldr	r3, [pc, #92]	; (8002900 <HAL_RCC_OscConfig+0x268>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80028aa:	d161      	bne.n	8002970 <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ac:	f7ff fc84 	bl	80021b8 <HAL_GetTick>
 80028b0:	1b80      	subs	r0, r0, r6
 80028b2:	2802      	cmp	r0, #2
 80028b4:	d9f5      	bls.n	80028a2 <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 80028b6:	2003      	movs	r0, #3
 80028b8:	e218      	b.n	8002cec <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ba:	4a11      	ldr	r2, [pc, #68]	; (8002900 <HAL_RCC_OscConfig+0x268>)
 80028bc:	6813      	ldr	r3, [r2, #0]
 80028be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c2:	6013      	str	r3, [r2, #0]
 80028c4:	e76f      	b.n	80027a6 <HAL_RCC_OscConfig+0x10e>
 80028c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028ca:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	e762      	b.n	80027a6 <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 80028e0:	f7ff fc6a 	bl	80021b8 <HAL_GetTick>
 80028e4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028e6:	4b06      	ldr	r3, [pc, #24]	; (8002900 <HAL_RCC_OscConfig+0x268>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80028ee:	d0c5      	beq.n	800287c <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028f0:	f7ff fc62 	bl	80021b8 <HAL_GetTick>
 80028f4:	1bc0      	subs	r0, r0, r7
 80028f6:	2864      	cmp	r0, #100	; 0x64
 80028f8:	d9f5      	bls.n	80028e6 <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 80028fa:	2003      	movs	r0, #3
 80028fc:	e1f6      	b.n	8002cec <HAL_RCC_OscConfig+0x654>
 80028fe:	bf00      	nop
 8002900:	40021000 	.word	0x40021000
 8002904:	08005e74 	.word	0x08005e74
 8002908:	2000001c 	.word	0x2000001c
 800290c:	20000024 	.word	0x20000024
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002910:	2e02      	cmp	r6, #2
 8002912:	d1bb      	bne.n	800288c <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002914:	4ba4      	ldr	r3, [pc, #656]	; (8002ba8 <HAL_RCC_OscConfig+0x510>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800291c:	d003      	beq.n	8002926 <HAL_RCC_OscConfig+0x28e>
 800291e:	68e3      	ldr	r3, [r4, #12]
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 81e0 	beq.w	8002ce6 <HAL_RCC_OscConfig+0x64e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002926:	4aa0      	ldr	r2, [pc, #640]	; (8002ba8 <HAL_RCC_OscConfig+0x510>)
 8002928:	6853      	ldr	r3, [r2, #4]
 800292a:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800292e:	6921      	ldr	r1, [r4, #16]
 8002930:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002934:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002936:	6823      	ldr	r3, [r4, #0]
 8002938:	f013 0f08 	tst.w	r3, #8
 800293c:	d04c      	beq.n	80029d8 <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800293e:	6963      	ldr	r3, [r4, #20]
 8002940:	b39b      	cbz	r3, 80029aa <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 8002942:	4a99      	ldr	r2, [pc, #612]	; (8002ba8 <HAL_RCC_OscConfig+0x510>)
 8002944:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002948:	f043 0301 	orr.w	r3, r3, #1
 800294c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002950:	f7ff fc32 	bl	80021b8 <HAL_GetTick>
 8002954:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002956:	4b94      	ldr	r3, [pc, #592]	; (8002ba8 <HAL_RCC_OscConfig+0x510>)
 8002958:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800295c:	f013 0f02 	tst.w	r3, #2
 8002960:	d13a      	bne.n	80029d8 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002962:	f7ff fc29 	bl	80021b8 <HAL_GetTick>
 8002966:	1b80      	subs	r0, r0, r6
 8002968:	2802      	cmp	r0, #2
 800296a:	d9f4      	bls.n	8002956 <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 800296c:	2003      	movs	r0, #3
 800296e:	e1bd      	b.n	8002cec <HAL_RCC_OscConfig+0x654>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002970:	4a8d      	ldr	r2, [pc, #564]	; (8002ba8 <HAL_RCC_OscConfig+0x510>)
 8002972:	6853      	ldr	r3, [r2, #4]
 8002974:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002978:	6921      	ldr	r1, [r4, #16]
 800297a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800297e:	6053      	str	r3, [r2, #4]
 8002980:	e7d9      	b.n	8002936 <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 8002982:	4a89      	ldr	r2, [pc, #548]	; (8002ba8 <HAL_RCC_OscConfig+0x510>)
 8002984:	6813      	ldr	r3, [r2, #0]
 8002986:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800298a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800298c:	f7ff fc14 	bl	80021b8 <HAL_GetTick>
 8002990:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002992:	4b85      	ldr	r3, [pc, #532]	; (8002ba8 <HAL_RCC_OscConfig+0x510>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800299a:	d0cc      	beq.n	8002936 <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800299c:	f7ff fc0c 	bl	80021b8 <HAL_GetTick>
 80029a0:	1b80      	subs	r0, r0, r6
 80029a2:	2802      	cmp	r0, #2
 80029a4:	d9f5      	bls.n	8002992 <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 80029a6:	2003      	movs	r0, #3
 80029a8:	e1a0      	b.n	8002cec <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_LSI_DISABLE();
 80029aa:	4a7f      	ldr	r2, [pc, #508]	; (8002ba8 <HAL_RCC_OscConfig+0x510>)
 80029ac:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80029b0:	f023 0301 	bic.w	r3, r3, #1
 80029b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80029b8:	f7ff fbfe 	bl	80021b8 <HAL_GetTick>
 80029bc:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029be:	4b7a      	ldr	r3, [pc, #488]	; (8002ba8 <HAL_RCC_OscConfig+0x510>)
 80029c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029c4:	f013 0f02 	tst.w	r3, #2
 80029c8:	d006      	beq.n	80029d8 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ca:	f7ff fbf5 	bl	80021b8 <HAL_GetTick>
 80029ce:	1b80      	subs	r0, r0, r6
 80029d0:	2802      	cmp	r0, #2
 80029d2:	d9f4      	bls.n	80029be <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 80029d4:	2003      	movs	r0, #3
 80029d6:	e189      	b.n	8002cec <HAL_RCC_OscConfig+0x654>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029d8:	6823      	ldr	r3, [r4, #0]
 80029da:	f013 0f04 	tst.w	r3, #4
 80029de:	d07a      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80029e0:	4b71      	ldr	r3, [pc, #452]	; (8002ba8 <HAL_RCC_OscConfig+0x510>)
 80029e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80029e8:	d136      	bne.n	8002a58 <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ea:	4b6f      	ldr	r3, [pc, #444]	; (8002ba8 <HAL_RCC_OscConfig+0x510>)
 80029ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80029f2:	659a      	str	r2, [r3, #88]	; 0x58
 80029f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fa:	9301      	str	r3, [sp, #4]
 80029fc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80029fe:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a00:	4b6a      	ldr	r3, [pc, #424]	; (8002bac <HAL_RCC_OscConfig+0x514>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002a08:	d028      	beq.n	8002a5c <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a0a:	68a3      	ldr	r3, [r4, #8]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d039      	beq.n	8002a84 <HAL_RCC_OscConfig+0x3ec>
 8002a10:	2b05      	cmp	r3, #5
 8002a12:	d03f      	beq.n	8002a94 <HAL_RCC_OscConfig+0x3fc>
 8002a14:	4b64      	ldr	r3, [pc, #400]	; (8002ba8 <HAL_RCC_OscConfig+0x510>)
 8002a16:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002a1a:	f022 0201 	bic.w	r2, r2, #1
 8002a1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002a22:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002a26:	f022 0204 	bic.w	r2, r2, #4
 8002a2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a2e:	68a3      	ldr	r3, [r4, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d03d      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 8002a34:	f7ff fbc0 	bl	80021b8 <HAL_GetTick>
 8002a38:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a3a:	4b5b      	ldr	r3, [pc, #364]	; (8002ba8 <HAL_RCC_OscConfig+0x510>)
 8002a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a40:	f013 0f02 	tst.w	r3, #2
 8002a44:	d146      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a46:	f7ff fbb7 	bl	80021b8 <HAL_GetTick>
 8002a4a:	1bc0      	subs	r0, r0, r7
 8002a4c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a50:	4298      	cmp	r0, r3
 8002a52:	d9f2      	bls.n	8002a3a <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 8002a54:	2003      	movs	r0, #3
 8002a56:	e149      	b.n	8002cec <HAL_RCC_OscConfig+0x654>
    FlagStatus       pwrclkchanged = RESET;
 8002a58:	2600      	movs	r6, #0
 8002a5a:	e7d1      	b.n	8002a00 <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a5c:	4a53      	ldr	r2, [pc, #332]	; (8002bac <HAL_RCC_OscConfig+0x514>)
 8002a5e:	6813      	ldr	r3, [r2, #0]
 8002a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a64:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002a66:	f7ff fba7 	bl	80021b8 <HAL_GetTick>
 8002a6a:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a6c:	4b4f      	ldr	r3, [pc, #316]	; (8002bac <HAL_RCC_OscConfig+0x514>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002a74:	d1c9      	bne.n	8002a0a <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a76:	f7ff fb9f 	bl	80021b8 <HAL_GetTick>
 8002a7a:	1bc0      	subs	r0, r0, r7
 8002a7c:	2802      	cmp	r0, #2
 8002a7e:	d9f5      	bls.n	8002a6c <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 8002a80:	2003      	movs	r0, #3
 8002a82:	e133      	b.n	8002cec <HAL_RCC_OscConfig+0x654>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a84:	4a48      	ldr	r2, [pc, #288]	; (8002ba8 <HAL_RCC_OscConfig+0x510>)
 8002a86:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002a8a:	f043 0301 	orr.w	r3, r3, #1
 8002a8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a92:	e7cc      	b.n	8002a2e <HAL_RCC_OscConfig+0x396>
 8002a94:	4b44      	ldr	r3, [pc, #272]	; (8002ba8 <HAL_RCC_OscConfig+0x510>)
 8002a96:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002a9a:	f042 0204 	orr.w	r2, r2, #4
 8002a9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002aa2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002aa6:	f042 0201 	orr.w	r2, r2, #1
 8002aaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002aae:	e7be      	b.n	8002a2e <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 8002ab0:	f7ff fb82 	bl	80021b8 <HAL_GetTick>
 8002ab4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ab6:	4b3c      	ldr	r3, [pc, #240]	; (8002ba8 <HAL_RCC_OscConfig+0x510>)
 8002ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002abc:	f013 0f02 	tst.w	r3, #2
 8002ac0:	d008      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac2:	f7ff fb79 	bl	80021b8 <HAL_GetTick>
 8002ac6:	1bc0      	subs	r0, r0, r7
 8002ac8:	f241 3388 	movw	r3, #5000	; 0x1388
 8002acc:	4298      	cmp	r0, r3
 8002ace:	d9f2      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 8002ad0:	2003      	movs	r0, #3
 8002ad2:	e10b      	b.n	8002cec <HAL_RCC_OscConfig+0x654>
    if(pwrclkchanged == SET)
 8002ad4:	b9e6      	cbnz	r6, 8002b10 <HAL_RCC_OscConfig+0x478>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ad6:	6823      	ldr	r3, [r4, #0]
 8002ad8:	f013 0f20 	tst.w	r3, #32
 8002adc:	d035      	beq.n	8002b4a <HAL_RCC_OscConfig+0x4b2>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ade:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ae0:	b1e3      	cbz	r3, 8002b1c <HAL_RCC_OscConfig+0x484>
      __HAL_RCC_HSI48_ENABLE();
 8002ae2:	4a31      	ldr	r2, [pc, #196]	; (8002ba8 <HAL_RCC_OscConfig+0x510>)
 8002ae4:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8002ae8:	f043 0301 	orr.w	r3, r3, #1
 8002aec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002af0:	f7ff fb62 	bl	80021b8 <HAL_GetTick>
 8002af4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002af6:	4b2c      	ldr	r3, [pc, #176]	; (8002ba8 <HAL_RCC_OscConfig+0x510>)
 8002af8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002afc:	f013 0f02 	tst.w	r3, #2
 8002b00:	d123      	bne.n	8002b4a <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b02:	f7ff fb59 	bl	80021b8 <HAL_GetTick>
 8002b06:	1b80      	subs	r0, r0, r6
 8002b08:	2802      	cmp	r0, #2
 8002b0a:	d9f4      	bls.n	8002af6 <HAL_RCC_OscConfig+0x45e>
          return HAL_TIMEOUT;
 8002b0c:	2003      	movs	r0, #3
 8002b0e:	e0ed      	b.n	8002cec <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b10:	4a25      	ldr	r2, [pc, #148]	; (8002ba8 <HAL_RCC_OscConfig+0x510>)
 8002b12:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b18:	6593      	str	r3, [r2, #88]	; 0x58
 8002b1a:	e7dc      	b.n	8002ad6 <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_HSI48_DISABLE();
 8002b1c:	4a22      	ldr	r2, [pc, #136]	; (8002ba8 <HAL_RCC_OscConfig+0x510>)
 8002b1e:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8002b22:	f023 0301 	bic.w	r3, r3, #1
 8002b26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002b2a:	f7ff fb45 	bl	80021b8 <HAL_GetTick>
 8002b2e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b30:	4b1d      	ldr	r3, [pc, #116]	; (8002ba8 <HAL_RCC_OscConfig+0x510>)
 8002b32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b36:	f013 0f02 	tst.w	r3, #2
 8002b3a:	d006      	beq.n	8002b4a <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b3c:	f7ff fb3c 	bl	80021b8 <HAL_GetTick>
 8002b40:	1b80      	subs	r0, r0, r6
 8002b42:	2802      	cmp	r0, #2
 8002b44:	d9f4      	bls.n	8002b30 <HAL_RCC_OscConfig+0x498>
          return HAL_TIMEOUT;
 8002b46:	2003      	movs	r0, #3
 8002b48:	e0d0      	b.n	8002cec <HAL_RCC_OscConfig+0x654>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 80cc 	beq.w	8002cea <HAL_RCC_OscConfig+0x652>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d017      	beq.n	8002b86 <HAL_RCC_OscConfig+0x4ee>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b56:	2d0c      	cmp	r5, #12
 8002b58:	f000 80cc 	beq.w	8002cf4 <HAL_RCC_OscConfig+0x65c>
        __HAL_RCC_PLL_DISABLE();
 8002b5c:	4a12      	ldr	r2, [pc, #72]	; (8002ba8 <HAL_RCC_OscConfig+0x510>)
 8002b5e:	6813      	ldr	r3, [r2, #0]
 8002b60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b64:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002b66:	f7ff fb27 	bl	80021b8 <HAL_GetTick>
 8002b6a:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <HAL_RCC_OscConfig+0x510>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002b74:	f000 80a8 	beq.w	8002cc8 <HAL_RCC_OscConfig+0x630>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b78:	f7ff fb1e 	bl	80021b8 <HAL_GetTick>
 8002b7c:	1b00      	subs	r0, r0, r4
 8002b7e:	2802      	cmp	r0, #2
 8002b80:	d9f4      	bls.n	8002b6c <HAL_RCC_OscConfig+0x4d4>
            return HAL_TIMEOUT;
 8002b82:	2003      	movs	r0, #3
 8002b84:	e0b2      	b.n	8002cec <HAL_RCC_OscConfig+0x654>
      pll_config = RCC->PLLCFGR;
 8002b86:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <HAL_RCC_OscConfig+0x510>)
 8002b88:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b8a:	f003 0103 	and.w	r1, r3, #3
 8002b8e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002b90:	4291      	cmp	r1, r2
 8002b92:	d00d      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x518>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b94:	2d0c      	cmp	r5, #12
 8002b96:	f000 80ab 	beq.w	8002cf0 <HAL_RCC_OscConfig+0x658>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b9a:	4b03      	ldr	r3, [pc, #12]	; (8002ba8 <HAL_RCC_OscConfig+0x510>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8002ba2:	d02f      	beq.n	8002c04 <HAL_RCC_OscConfig+0x56c>
            return HAL_ERROR;
 8002ba4:	2001      	movs	r0, #1
 8002ba6:	e0a1      	b.n	8002cec <HAL_RCC_OscConfig+0x654>
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40007000 	.word	0x40007000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bb0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002bb4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002bb6:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb8:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002bbc:	d1ea      	bne.n	8002b94 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bbe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002bc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bc4:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002bc8:	d1e4      	bne.n	8002b94 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002bca:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002bce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bd0:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8002bd4:	d1de      	bne.n	8002b94 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bd6:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8002bda:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002bdc:	0852      	lsrs	r2, r2, #1
 8002bde:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002be0:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002be4:	d1d6      	bne.n	8002b94 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002be6:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002bea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002bec:	0852      	lsrs	r2, r2, #1
 8002bee:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bf0:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8002bf4:	d1ce      	bne.n	8002b94 <HAL_RCC_OscConfig+0x4fc>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bf6:	4b40      	ldr	r3, [pc, #256]	; (8002cf8 <HAL_RCC_OscConfig+0x660>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002bfe:	d049      	beq.n	8002c94 <HAL_RCC_OscConfig+0x5fc>
  return HAL_OK;
 8002c00:	2000      	movs	r0, #0
 8002c02:	e073      	b.n	8002cec <HAL_RCC_OscConfig+0x654>
            __HAL_RCC_PLL_DISABLE();
 8002c04:	4a3c      	ldr	r2, [pc, #240]	; (8002cf8 <HAL_RCC_OscConfig+0x660>)
 8002c06:	6813      	ldr	r3, [r2, #0]
 8002c08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c0c:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8002c0e:	f7ff fad3 	bl	80021b8 <HAL_GetTick>
 8002c12:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c14:	4b38      	ldr	r3, [pc, #224]	; (8002cf8 <HAL_RCC_OscConfig+0x660>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002c1c:	d006      	beq.n	8002c2c <HAL_RCC_OscConfig+0x594>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1e:	f7ff facb 	bl	80021b8 <HAL_GetTick>
 8002c22:	1b40      	subs	r0, r0, r5
 8002c24:	2802      	cmp	r0, #2
 8002c26:	d9f5      	bls.n	8002c14 <HAL_RCC_OscConfig+0x57c>
                return HAL_TIMEOUT;
 8002c28:	2003      	movs	r0, #3
 8002c2a:	e05f      	b.n	8002cec <HAL_RCC_OscConfig+0x654>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c2c:	4a32      	ldr	r2, [pc, #200]	; (8002cf8 <HAL_RCC_OscConfig+0x660>)
 8002c2e:	68d3      	ldr	r3, [r2, #12]
 8002c30:	4932      	ldr	r1, [pc, #200]	; (8002cfc <HAL_RCC_OscConfig+0x664>)
 8002c32:	4019      	ands	r1, r3
 8002c34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c36:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002c38:	3801      	subs	r0, #1
 8002c3a:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8002c3e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002c40:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002c44:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002c46:	0840      	lsrs	r0, r0, #1
 8002c48:	3801      	subs	r0, #1
 8002c4a:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8002c4e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002c50:	0840      	lsrs	r0, r0, #1
 8002c52:	3801      	subs	r0, #1
 8002c54:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8002c58:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002c5a:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8002c5e:	430b      	orrs	r3, r1
 8002c60:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 8002c62:	6813      	ldr	r3, [r2, #0]
 8002c64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c68:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c6a:	68d3      	ldr	r3, [r2, #12]
 8002c6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c70:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 8002c72:	f7ff faa1 	bl	80021b8 <HAL_GetTick>
 8002c76:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c78:	4b1f      	ldr	r3, [pc, #124]	; (8002cf8 <HAL_RCC_OscConfig+0x660>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002c80:	d106      	bne.n	8002c90 <HAL_RCC_OscConfig+0x5f8>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c82:	f7ff fa99 	bl	80021b8 <HAL_GetTick>
 8002c86:	1b00      	subs	r0, r0, r4
 8002c88:	2802      	cmp	r0, #2
 8002c8a:	d9f5      	bls.n	8002c78 <HAL_RCC_OscConfig+0x5e0>
                return HAL_TIMEOUT;
 8002c8c:	2003      	movs	r0, #3
 8002c8e:	e02d      	b.n	8002cec <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 8002c90:	2000      	movs	r0, #0
 8002c92:	e02b      	b.n	8002cec <HAL_RCC_OscConfig+0x654>
          __HAL_RCC_PLL_ENABLE();
 8002c94:	4b18      	ldr	r3, [pc, #96]	; (8002cf8 <HAL_RCC_OscConfig+0x660>)
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002c9c:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c9e:	68da      	ldr	r2, [r3, #12]
 8002ca0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002ca4:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 8002ca6:	f7ff fa87 	bl	80021b8 <HAL_GetTick>
 8002caa:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cac:	4b12      	ldr	r3, [pc, #72]	; (8002cf8 <HAL_RCC_OscConfig+0x660>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002cb4:	d106      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x62c>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb6:	f7ff fa7f 	bl	80021b8 <HAL_GetTick>
 8002cba:	1b03      	subs	r3, r0, r4
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d9f5      	bls.n	8002cac <HAL_RCC_OscConfig+0x614>
              return HAL_TIMEOUT;
 8002cc0:	2003      	movs	r0, #3
 8002cc2:	e013      	b.n	8002cec <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 8002cc4:	2000      	movs	r0, #0
 8002cc6:	e011      	b.n	8002cec <HAL_RCC_OscConfig+0x654>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002cc8:	4a0b      	ldr	r2, [pc, #44]	; (8002cf8 <HAL_RCC_OscConfig+0x660>)
 8002cca:	68d1      	ldr	r1, [r2, #12]
 8002ccc:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <HAL_RCC_OscConfig+0x668>)
 8002cce:	400b      	ands	r3, r1
 8002cd0:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	e00a      	b.n	8002cec <HAL_RCC_OscConfig+0x654>
    return HAL_ERROR;
 8002cd6:	2001      	movs	r0, #1
}
 8002cd8:	4770      	bx	lr
        return HAL_ERROR;
 8002cda:	2001      	movs	r0, #1
 8002cdc:	e006      	b.n	8002cec <HAL_RCC_OscConfig+0x654>
            return HAL_ERROR;
 8002cde:	2001      	movs	r0, #1
 8002ce0:	e004      	b.n	8002cec <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 8002ce2:	2001      	movs	r0, #1
 8002ce4:	e002      	b.n	8002cec <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 8002ce6:	2001      	movs	r0, #1
 8002ce8:	e000      	b.n	8002cec <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 8002cea:	2000      	movs	r0, #0
}
 8002cec:	b003      	add	sp, #12
 8002cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8002cf0:	2001      	movs	r0, #1
 8002cf2:	e7fb      	b.n	8002cec <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 8002cf4:	2001      	movs	r0, #1
 8002cf6:	e7f9      	b.n	8002cec <HAL_RCC_OscConfig+0x654>
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	019d808c 	.word	0x019d808c
 8002d00:	feeefffc 	.word	0xfeeefffc

08002d04 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002d04:	2800      	cmp	r0, #0
 8002d06:	f000 80af 	beq.w	8002e68 <HAL_RCC_ClockConfig+0x164>
{
 8002d0a:	b570      	push	{r4, r5, r6, lr}
 8002d0c:	460d      	mov	r5, r1
 8002d0e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d10:	4b59      	ldr	r3, [pc, #356]	; (8002e78 <HAL_RCC_ClockConfig+0x174>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	428b      	cmp	r3, r1
 8002d1a:	d20b      	bcs.n	8002d34 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1c:	4a56      	ldr	r2, [pc, #344]	; (8002e78 <HAL_RCC_ClockConfig+0x174>)
 8002d1e:	6813      	ldr	r3, [r2, #0]
 8002d20:	f023 0307 	bic.w	r3, r3, #7
 8002d24:	430b      	orrs	r3, r1
 8002d26:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d28:	6813      	ldr	r3, [r2, #0]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	428b      	cmp	r3, r1
 8002d30:	f040 809c 	bne.w	8002e6c <HAL_RCC_ClockConfig+0x168>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d34:	6823      	ldr	r3, [r4, #0]
 8002d36:	f013 0f02 	tst.w	r3, #2
 8002d3a:	d00c      	beq.n	8002d56 <HAL_RCC_ClockConfig+0x52>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d3c:	68a2      	ldr	r2, [r4, #8]
 8002d3e:	4b4f      	ldr	r3, [pc, #316]	; (8002e7c <HAL_RCC_ClockConfig+0x178>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d905      	bls.n	8002d56 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d4a:	494c      	ldr	r1, [pc, #304]	; (8002e7c <HAL_RCC_ClockConfig+0x178>)
 8002d4c:	688b      	ldr	r3, [r1, #8]
 8002d4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d52:	431a      	orrs	r2, r3
 8002d54:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d56:	6823      	ldr	r3, [r4, #0]
 8002d58:	f013 0f01 	tst.w	r3, #1
 8002d5c:	d039      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0xce>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d5e:	6863      	ldr	r3, [r4, #4]
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d009      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x74>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d026      	beq.n	8002db6 <HAL_RCC_ClockConfig+0xb2>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d68:	bb63      	cbnz	r3, 8002dc4 <HAL_RCC_ClockConfig+0xc0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d6a:	4a44      	ldr	r2, [pc, #272]	; (8002e7c <HAL_RCC_ClockConfig+0x178>)
 8002d6c:	6812      	ldr	r2, [r2, #0]
 8002d6e:	f012 0f02 	tst.w	r2, #2
 8002d72:	d106      	bne.n	8002d82 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8002d74:	2001      	movs	r0, #1
 8002d76:	e076      	b.n	8002e66 <HAL_RCC_ClockConfig+0x162>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d78:	4a40      	ldr	r2, [pc, #256]	; (8002e7c <HAL_RCC_ClockConfig+0x178>)
 8002d7a:	6812      	ldr	r2, [r2, #0]
 8002d7c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002d80:	d076      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x16c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d82:	493e      	ldr	r1, [pc, #248]	; (8002e7c <HAL_RCC_ClockConfig+0x178>)
 8002d84:	688a      	ldr	r2, [r1, #8]
 8002d86:	f022 0203 	bic.w	r2, r2, #3
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002d8e:	f7ff fa13 	bl	80021b8 <HAL_GetTick>
 8002d92:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d94:	4b39      	ldr	r3, [pc, #228]	; (8002e7c <HAL_RCC_ClockConfig+0x178>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 030c 	and.w	r3, r3, #12
 8002d9c:	6862      	ldr	r2, [r4, #4]
 8002d9e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002da2:	d016      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0xce>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da4:	f7ff fa08 	bl	80021b8 <HAL_GetTick>
 8002da8:	1b80      	subs	r0, r0, r6
 8002daa:	f241 3388 	movw	r3, #5000	; 0x1388
 8002dae:	4298      	cmp	r0, r3
 8002db0:	d9f0      	bls.n	8002d94 <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 8002db2:	2003      	movs	r0, #3
 8002db4:	e057      	b.n	8002e66 <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002db6:	4a31      	ldr	r2, [pc, #196]	; (8002e7c <HAL_RCC_ClockConfig+0x178>)
 8002db8:	6812      	ldr	r2, [r2, #0]
 8002dba:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002dbe:	d1e0      	bne.n	8002d82 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8002dc0:	2001      	movs	r0, #1
 8002dc2:	e050      	b.n	8002e66 <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dc4:	4a2d      	ldr	r2, [pc, #180]	; (8002e7c <HAL_RCC_ClockConfig+0x178>)
 8002dc6:	6812      	ldr	r2, [r2, #0]
 8002dc8:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002dcc:	d1d9      	bne.n	8002d82 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8002dce:	2001      	movs	r0, #1
 8002dd0:	e049      	b.n	8002e66 <HAL_RCC_ClockConfig+0x162>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd2:	6823      	ldr	r3, [r4, #0]
 8002dd4:	f013 0f02 	tst.w	r3, #2
 8002dd8:	d00c      	beq.n	8002df4 <HAL_RCC_ClockConfig+0xf0>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002dda:	68a2      	ldr	r2, [r4, #8]
 8002ddc:	4b27      	ldr	r3, [pc, #156]	; (8002e7c <HAL_RCC_ClockConfig+0x178>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d205      	bcs.n	8002df4 <HAL_RCC_ClockConfig+0xf0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de8:	4924      	ldr	r1, [pc, #144]	; (8002e7c <HAL_RCC_ClockConfig+0x178>)
 8002dea:	688b      	ldr	r3, [r1, #8]
 8002dec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002df0:	431a      	orrs	r2, r3
 8002df2:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002df4:	4b20      	ldr	r3, [pc, #128]	; (8002e78 <HAL_RCC_ClockConfig+0x174>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	42ab      	cmp	r3, r5
 8002dfe:	d90a      	bls.n	8002e16 <HAL_RCC_ClockConfig+0x112>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e00:	4a1d      	ldr	r2, [pc, #116]	; (8002e78 <HAL_RCC_ClockConfig+0x174>)
 8002e02:	6813      	ldr	r3, [r2, #0]
 8002e04:	f023 0307 	bic.w	r3, r3, #7
 8002e08:	432b      	orrs	r3, r5
 8002e0a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0c:	6813      	ldr	r3, [r2, #0]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	42ab      	cmp	r3, r5
 8002e14:	d12e      	bne.n	8002e74 <HAL_RCC_ClockConfig+0x170>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e16:	6823      	ldr	r3, [r4, #0]
 8002e18:	f013 0f04 	tst.w	r3, #4
 8002e1c:	d006      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x128>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e1e:	4a17      	ldr	r2, [pc, #92]	; (8002e7c <HAL_RCC_ClockConfig+0x178>)
 8002e20:	6893      	ldr	r3, [r2, #8]
 8002e22:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e26:	68e1      	ldr	r1, [r4, #12]
 8002e28:	430b      	orrs	r3, r1
 8002e2a:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e2c:	6823      	ldr	r3, [r4, #0]
 8002e2e:	f013 0f08 	tst.w	r3, #8
 8002e32:	d007      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e34:	4a11      	ldr	r2, [pc, #68]	; (8002e7c <HAL_RCC_ClockConfig+0x178>)
 8002e36:	6893      	ldr	r3, [r2, #8]
 8002e38:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002e3c:	6921      	ldr	r1, [r4, #16]
 8002e3e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002e42:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e44:	f7ff fbce 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 8002e48:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <HAL_RCC_ClockConfig+0x178>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002e50:	4a0b      	ldr	r2, [pc, #44]	; (8002e80 <HAL_RCC_ClockConfig+0x17c>)
 8002e52:	5cd3      	ldrb	r3, [r2, r3]
 8002e54:	f003 031f 	and.w	r3, r3, #31
 8002e58:	40d8      	lsrs	r0, r3
 8002e5a:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <HAL_RCC_ClockConfig+0x180>)
 8002e5c:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8002e5e:	4b0a      	ldr	r3, [pc, #40]	; (8002e88 <HAL_RCC_ClockConfig+0x184>)
 8002e60:	6818      	ldr	r0, [r3, #0]
 8002e62:	f7ff f95f 	bl	8002124 <HAL_InitTick>
}
 8002e66:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002e68:	2001      	movs	r0, #1
}
 8002e6a:	4770      	bx	lr
      return HAL_ERROR;
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	e7fa      	b.n	8002e66 <HAL_RCC_ClockConfig+0x162>
        return HAL_ERROR;
 8002e70:	2001      	movs	r0, #1
 8002e72:	e7f8      	b.n	8002e66 <HAL_RCC_ClockConfig+0x162>
      return HAL_ERROR;
 8002e74:	2001      	movs	r0, #1
 8002e76:	e7f6      	b.n	8002e66 <HAL_RCC_ClockConfig+0x162>
 8002e78:	40022000 	.word	0x40022000
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	08005e74 	.word	0x08005e74
 8002e84:	2000001c 	.word	0x2000001c
 8002e88:	20000024 	.word	0x20000024

08002e8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e90:	b082      	sub	sp, #8
 8002e92:	4605      	mov	r5, r0
 8002e94:	4688      	mov	r8, r1
 8002e96:	4617      	mov	r7, r2
 8002e98:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e9a:	f7ff f98d 	bl	80021b8 <HAL_GetTick>
 8002e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ea0:	1a1b      	subs	r3, r3, r0
 8002ea2:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8002ea6:	f7ff f987 	bl	80021b8 <HAL_GetTick>
 8002eaa:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002eac:	4b2b      	ldr	r3, [pc, #172]	; (8002f5c <SPI_WaitFlagStateUntilTimeout+0xd0>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8002eb4:	fb09 f303 	mul.w	r3, r9, r3
 8002eb8:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002eba:	682b      	ldr	r3, [r5, #0]
 8002ebc:	689c      	ldr	r4, [r3, #8]
 8002ebe:	ea38 0304 	bics.w	r3, r8, r4
 8002ec2:	bf0c      	ite	eq
 8002ec4:	f04f 0c01 	moveq.w	ip, #1
 8002ec8:	f04f 0c00 	movne.w	ip, #0
 8002ecc:	45bc      	cmp	ip, r7
 8002ece:	d040      	beq.n	8002f52 <SPI_WaitFlagStateUntilTimeout+0xc6>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ed0:	f1b6 3fff 	cmp.w	r6, #4294967295
 8002ed4:	d0f1      	beq.n	8002eba <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ed6:	f7ff f96f 	bl	80021b8 <HAL_GetTick>
 8002eda:	eba0 000a 	sub.w	r0, r0, sl
 8002ede:	4548      	cmp	r0, r9
 8002ee0:	d20a      	bcs.n	8002ef8 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8002ee2:	f1b9 0f00 	cmp.w	r9, #0
 8002ee6:	d007      	beq.n	8002ef8 <SPI_WaitFlagStateUntilTimeout+0x6c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002ee8:	9a01      	ldr	r2, [sp, #4]
 8002eea:	b102      	cbz	r2, 8002eee <SPI_WaitFlagStateUntilTimeout+0x62>
 8002eec:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8002eee:	9b01      	ldr	r3, [sp, #4]
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	9301      	str	r3, [sp, #4]
 8002ef4:	4691      	mov	r9, r2
 8002ef6:	e7e0      	b.n	8002eba <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ef8:	682a      	ldr	r2, [r5, #0]
 8002efa:	6853      	ldr	r3, [r2, #4]
 8002efc:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002f00:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f02:	686b      	ldr	r3, [r5, #4]
 8002f04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f08:	d00b      	beq.n	8002f22 <SPI_WaitFlagStateUntilTimeout+0x96>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f0a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f10:	d014      	beq.n	8002f3c <SPI_WaitFlagStateUntilTimeout+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 8002f12:	2301      	movs	r3, #1
 8002f14:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8002f18:	2300      	movs	r3, #0
 8002f1a:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 8002f1e:	2003      	movs	r0, #3
 8002f20:	e018      	b.n	8002f54 <SPI_WaitFlagStateUntilTimeout+0xc8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f22:	68ab      	ldr	r3, [r5, #8]
 8002f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f28:	d002      	beq.n	8002f30 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f2e:	d1ec      	bne.n	8002f0a <SPI_WaitFlagStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 8002f30:	682a      	ldr	r2, [r5, #0]
 8002f32:	6813      	ldr	r3, [r2, #0]
 8002f34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	e7e6      	b.n	8002f0a <SPI_WaitFlagStateUntilTimeout+0x7e>
          SPI_RESET_CRC(hspi);
 8002f3c:	682a      	ldr	r2, [r5, #0]
 8002f3e:	6813      	ldr	r3, [r2, #0]
 8002f40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	682a      	ldr	r2, [r5, #0]
 8002f48:	6813      	ldr	r3, [r2, #0]
 8002f4a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f4e:	6013      	str	r3, [r2, #0]
 8002f50:	e7df      	b.n	8002f12 <SPI_WaitFlagStateUntilTimeout+0x86>
    }
  }

  return HAL_OK;
 8002f52:	2000      	movs	r0, #0
}
 8002f54:	b002      	add	sp, #8
 8002f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f5a:	bf00      	nop
 8002f5c:	2000001c 	.word	0x2000001c

08002f60 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f64:	b082      	sub	sp, #8
 8002f66:	4606      	mov	r6, r0
 8002f68:	460c      	mov	r4, r1
 8002f6a:	4615      	mov	r5, r2
 8002f6c:	461f      	mov	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002f74:	f7ff f920 	bl	80021b8 <HAL_GetTick>
 8002f78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f7a:	1a1b      	subs	r3, r3, r0
 8002f7c:	eb03 0807 	add.w	r8, r3, r7
  tmp_tickstart = HAL_GetTick();
 8002f80:	f7ff f91a 	bl	80021b8 <HAL_GetTick>
 8002f84:	4681      	mov	r9, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002f86:	f8d6 a000 	ldr.w	sl, [r6]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002f8a:	4b31      	ldr	r3, [pc, #196]	; (8003050 <SPI_WaitFifoStateUntilTimeout+0xf0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002f92:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8002f96:	0d1b      	lsrs	r3, r3, #20
 8002f98:	fb08 f303 	mul.w	r3, r8, r3
 8002f9c:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8002f9e:	e002      	b.n	8002fa6 <SPI_WaitFifoStateUntilTimeout+0x46>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8002fa0:	f1b7 3fff 	cmp.w	r7, #4294967295
 8002fa4:	d112      	bne.n	8002fcc <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 8002fa6:	6833      	ldr	r3, [r6, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	ea03 0c04 	and.w	ip, r3, r4
 8002fae:	45ac      	cmp	ip, r5
 8002fb0:	d04a      	beq.n	8003048 <SPI_WaitFifoStateUntilTimeout+0xe8>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002fb2:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8002fb6:	d1f3      	bne.n	8002fa0 <SPI_WaitFifoStateUntilTimeout+0x40>
 8002fb8:	2d00      	cmp	r5, #0
 8002fba:	d1f1      	bne.n	8002fa0 <SPI_WaitFifoStateUntilTimeout+0x40>
      tmpreg8 = *ptmpreg8;
 8002fbc:	f89a 300c 	ldrb.w	r3, [sl, #12]
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8002fc6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002fca:	e7e9      	b.n	8002fa0 <SPI_WaitFifoStateUntilTimeout+0x40>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002fcc:	f7ff f8f4 	bl	80021b8 <HAL_GetTick>
 8002fd0:	eba0 0009 	sub.w	r0, r0, r9
 8002fd4:	4540      	cmp	r0, r8
 8002fd6:	d20a      	bcs.n	8002fee <SPI_WaitFifoStateUntilTimeout+0x8e>
 8002fd8:	f1b8 0f00 	cmp.w	r8, #0
 8002fdc:	d007      	beq.n	8002fee <SPI_WaitFifoStateUntilTimeout+0x8e>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002fde:	9a01      	ldr	r2, [sp, #4]
 8002fe0:	b102      	cbz	r2, 8002fe4 <SPI_WaitFifoStateUntilTimeout+0x84>
 8002fe2:	4642      	mov	r2, r8
      {
        tmp_timeout = 0U;
      }
      count--;
 8002fe4:	9b01      	ldr	r3, [sp, #4]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	9301      	str	r3, [sp, #4]
 8002fea:	4690      	mov	r8, r2
 8002fec:	e7db      	b.n	8002fa6 <SPI_WaitFifoStateUntilTimeout+0x46>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fee:	6832      	ldr	r2, [r6, #0]
 8002ff0:	6853      	ldr	r3, [r2, #4]
 8002ff2:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002ff6:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ff8:	6873      	ldr	r3, [r6, #4]
 8002ffa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ffe:	d00b      	beq.n	8003018 <SPI_WaitFifoStateUntilTimeout+0xb8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003000:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003006:	d014      	beq.n	8003032 <SPI_WaitFifoStateUntilTimeout+0xd2>
        hspi->State = HAL_SPI_STATE_READY;
 8003008:	2301      	movs	r3, #1
 800300a:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800300e:	2300      	movs	r3, #0
 8003010:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 8003014:	2003      	movs	r0, #3
 8003016:	e018      	b.n	800304a <SPI_WaitFifoStateUntilTimeout+0xea>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003018:	68b3      	ldr	r3, [r6, #8]
 800301a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800301e:	d002      	beq.n	8003026 <SPI_WaitFifoStateUntilTimeout+0xc6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003024:	d1ec      	bne.n	8003000 <SPI_WaitFifoStateUntilTimeout+0xa0>
          __HAL_SPI_DISABLE(hspi);
 8003026:	6832      	ldr	r2, [r6, #0]
 8003028:	6813      	ldr	r3, [r2, #0]
 800302a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	e7e6      	b.n	8003000 <SPI_WaitFifoStateUntilTimeout+0xa0>
          SPI_RESET_CRC(hspi);
 8003032:	6832      	ldr	r2, [r6, #0]
 8003034:	6813      	ldr	r3, [r2, #0]
 8003036:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800303a:	6013      	str	r3, [r2, #0]
 800303c:	6832      	ldr	r2, [r6, #0]
 800303e:	6813      	ldr	r3, [r2, #0]
 8003040:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003044:	6013      	str	r3, [r2, #0]
 8003046:	e7df      	b.n	8003008 <SPI_WaitFifoStateUntilTimeout+0xa8>
    }
  }

  return HAL_OK;
 8003048:	2000      	movs	r0, #0
}
 800304a:	b002      	add	sp, #8
 800304c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003050:	2000001c 	.word	0x2000001c

08003054 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003054:	b570      	push	{r4, r5, r6, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	4604      	mov	r4, r0
 800305a:	460d      	mov	r5, r1
 800305c:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800305e:	9200      	str	r2, [sp, #0]
 8003060:	460b      	mov	r3, r1
 8003062:	2200      	movs	r2, #0
 8003064:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003068:	f7ff ff7a 	bl	8002f60 <SPI_WaitFifoStateUntilTimeout>
 800306c:	b9b0      	cbnz	r0, 800309c <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800306e:	9600      	str	r6, [sp, #0]
 8003070:	462b      	mov	r3, r5
 8003072:	2200      	movs	r2, #0
 8003074:	2180      	movs	r1, #128	; 0x80
 8003076:	4620      	mov	r0, r4
 8003078:	f7ff ff08 	bl	8002e8c <SPI_WaitFlagStateUntilTimeout>
 800307c:	b9a8      	cbnz	r0, 80030aa <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800307e:	9600      	str	r6, [sp, #0]
 8003080:	462b      	mov	r3, r5
 8003082:	2200      	movs	r2, #0
 8003084:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003088:	4620      	mov	r0, r4
 800308a:	f7ff ff69 	bl	8002f60 <SPI_WaitFifoStateUntilTimeout>
 800308e:	b150      	cbz	r0, 80030a6 <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003090:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003092:	f043 0320 	orr.w	r3, r3, #32
 8003096:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003098:	2003      	movs	r0, #3
 800309a:	e004      	b.n	80030a6 <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800309c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800309e:	f043 0320 	orr.w	r3, r3, #32
 80030a2:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80030a4:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 80030a6:	b002      	add	sp, #8
 80030a8:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030aa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80030ac:	f043 0320 	orr.w	r3, r3, #32
 80030b0:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80030b2:	2003      	movs	r0, #3
 80030b4:	e7f7      	b.n	80030a6 <SPI_EndRxTxTransaction+0x52>

080030b6 <SPI_EndRxTransaction>:
{
 80030b6:	b570      	push	{r4, r5, r6, lr}
 80030b8:	b082      	sub	sp, #8
 80030ba:	4604      	mov	r4, r0
 80030bc:	460d      	mov	r5, r1
 80030be:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030c0:	6843      	ldr	r3, [r0, #4]
 80030c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030c6:	d00d      	beq.n	80030e4 <SPI_EndRxTransaction+0x2e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030c8:	9600      	str	r6, [sp, #0]
 80030ca:	462b      	mov	r3, r5
 80030cc:	2200      	movs	r2, #0
 80030ce:	2180      	movs	r1, #128	; 0x80
 80030d0:	4620      	mov	r0, r4
 80030d2:	f7ff fedb 	bl	8002e8c <SPI_WaitFlagStateUntilTimeout>
 80030d6:	b990      	cbnz	r0, 80030fe <SPI_EndRxTransaction+0x48>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030d8:	6863      	ldr	r3, [r4, #4]
 80030da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030de:	d014      	beq.n	800310a <SPI_EndRxTransaction+0x54>
}
 80030e0:	b002      	add	sp, #8
 80030e2:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030e4:	6883      	ldr	r3, [r0, #8]
 80030e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030ea:	d002      	beq.n	80030f2 <SPI_EndRxTransaction+0x3c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030f0:	d1ea      	bne.n	80030c8 <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 80030f2:	6822      	ldr	r2, [r4, #0]
 80030f4:	6813      	ldr	r3, [r2, #0]
 80030f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030fa:	6013      	str	r3, [r2, #0]
 80030fc:	e7e4      	b.n	80030c8 <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030fe:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003100:	f043 0320 	orr.w	r3, r3, #32
 8003104:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003106:	2003      	movs	r0, #3
 8003108:	e7ea      	b.n	80030e0 <SPI_EndRxTransaction+0x2a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800310a:	68a3      	ldr	r3, [r4, #8]
 800310c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003110:	d002      	beq.n	8003118 <SPI_EndRxTransaction+0x62>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003116:	d1e3      	bne.n	80030e0 <SPI_EndRxTransaction+0x2a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003118:	9600      	str	r6, [sp, #0]
 800311a:	462b      	mov	r3, r5
 800311c:	2200      	movs	r2, #0
 800311e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003122:	4620      	mov	r0, r4
 8003124:	f7ff ff1c 	bl	8002f60 <SPI_WaitFifoStateUntilTimeout>
 8003128:	2800      	cmp	r0, #0
 800312a:	d0d9      	beq.n	80030e0 <SPI_EndRxTransaction+0x2a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800312c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800312e:	f043 0320 	orr.w	r3, r3, #32
 8003132:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8003134:	2003      	movs	r0, #3
 8003136:	e7d3      	b.n	80030e0 <SPI_EndRxTransaction+0x2a>

08003138 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003138:	2800      	cmp	r0, #0
 800313a:	d06a      	beq.n	8003212 <HAL_SPI_Init+0xda>
{
 800313c:	b510      	push	{r4, lr}
 800313e:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003140:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003142:	b933      	cbnz	r3, 8003152 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003144:	6843      	ldr	r3, [r0, #4]
 8003146:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800314a:	d005      	beq.n	8003158 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800314c:	2300      	movs	r3, #0
 800314e:	61c3      	str	r3, [r0, #28]
 8003150:	e002      	b.n	8003158 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003152:	2300      	movs	r3, #0
 8003154:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003156:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003158:	2300      	movs	r3, #0
 800315a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800315c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003160:	2b00      	cmp	r3, #0
 8003162:	d04d      	beq.n	8003200 <HAL_SPI_Init+0xc8>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003164:	2302      	movs	r3, #2
 8003166:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800316a:	6822      	ldr	r2, [r4, #0]
 800316c:	6813      	ldr	r3, [r2, #0]
 800316e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003172:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003174:	68e3      	ldr	r3, [r4, #12]
 8003176:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800317a:	d947      	bls.n	800320c <HAL_SPI_Init+0xd4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800317c:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800317e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003182:	d004      	beq.n	800318e <HAL_SPI_Init+0x56>
 8003184:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003188:	d001      	beq.n	800318e <HAL_SPI_Init+0x56>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800318a:	2300      	movs	r3, #0
 800318c:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800318e:	6863      	ldr	r3, [r4, #4]
 8003190:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003194:	68a1      	ldr	r1, [r4, #8]
 8003196:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 800319a:	430b      	orrs	r3, r1
 800319c:	6921      	ldr	r1, [r4, #16]
 800319e:	f001 0102 	and.w	r1, r1, #2
 80031a2:	430b      	orrs	r3, r1
 80031a4:	6961      	ldr	r1, [r4, #20]
 80031a6:	f001 0101 	and.w	r1, r1, #1
 80031aa:	430b      	orrs	r3, r1
 80031ac:	69a1      	ldr	r1, [r4, #24]
 80031ae:	f401 7100 	and.w	r1, r1, #512	; 0x200
 80031b2:	430b      	orrs	r3, r1
 80031b4:	69e1      	ldr	r1, [r4, #28]
 80031b6:	f001 0138 	and.w	r1, r1, #56	; 0x38
 80031ba:	430b      	orrs	r3, r1
 80031bc:	6a21      	ldr	r1, [r4, #32]
 80031be:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80031c2:	430b      	orrs	r3, r1
 80031c4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80031c6:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 80031ca:	6820      	ldr	r0, [r4, #0]
 80031cc:	430b      	orrs	r3, r1
 80031ce:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80031d0:	8b63      	ldrh	r3, [r4, #26]
 80031d2:	f003 0304 	and.w	r3, r3, #4
 80031d6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80031d8:	f001 0110 	and.w	r1, r1, #16
 80031dc:	430b      	orrs	r3, r1
 80031de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031e0:	f001 0108 	and.w	r1, r1, #8
 80031e4:	430b      	orrs	r3, r1
 80031e6:	68e1      	ldr	r1, [r4, #12]
 80031e8:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 80031ec:	430b      	orrs	r3, r1
 80031ee:	6821      	ldr	r1, [r4, #0]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	604b      	str	r3, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031f4:	2000      	movs	r0, #0
 80031f6:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031f8:	2301      	movs	r3, #1
 80031fa:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 80031fe:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003200:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8003204:	4620      	mov	r0, r4
 8003206:	f7fe fe31 	bl	8001e6c <HAL_SPI_MspInit>
 800320a:	e7ab      	b.n	8003164 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800320c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003210:	e7b5      	b.n	800317e <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8003212:	2001      	movs	r0, #1
}
 8003214:	4770      	bx	lr

08003216 <HAL_SPI_Transmit>:
{
 8003216:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800321a:	b083      	sub	sp, #12
 800321c:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800321e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8003222:	2b01      	cmp	r3, #1
 8003224:	f000 80f6 	beq.w	8003414 <HAL_SPI_Transmit+0x1fe>
 8003228:	4604      	mov	r4, r0
 800322a:	4688      	mov	r8, r1
 800322c:	4691      	mov	r9, r2
 800322e:	2301      	movs	r3, #1
 8003230:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003234:	f7fe ffc0 	bl	80021b8 <HAL_GetTick>
 8003238:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800323a:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 800323e:	b2f6      	uxtb	r6, r6
 8003240:	2e01      	cmp	r6, #1
 8003242:	f040 80d4 	bne.w	80033ee <HAL_SPI_Transmit+0x1d8>
  if ((pData == NULL) || (Size == 0U))
 8003246:	f1b8 0f00 	cmp.w	r8, #0
 800324a:	f000 80d1 	beq.w	80033f0 <HAL_SPI_Transmit+0x1da>
 800324e:	f1b9 0f00 	cmp.w	r9, #0
 8003252:	f000 80cd 	beq.w	80033f0 <HAL_SPI_Transmit+0x1da>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003256:	2303      	movs	r3, #3
 8003258:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800325c:	2300      	movs	r3, #0
 800325e:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003260:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003264:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003268:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800326c:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800326e:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003272:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003276:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003278:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800327a:	68a3      	ldr	r3, [r4, #8]
 800327c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003280:	d01e      	beq.n	80032c0 <HAL_SPI_Transmit+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003282:	6823      	ldr	r3, [r4, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	f012 0f40 	tst.w	r2, #64	; 0x40
 800328a:	d103      	bne.n	8003294 <HAL_SPI_Transmit+0x7e>
    __HAL_SPI_ENABLE(hspi);
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003292:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003294:	68e3      	ldr	r3, [r4, #12]
 8003296:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800329a:	d942      	bls.n	8003322 <HAL_SPI_Transmit+0x10c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800329c:	6863      	ldr	r3, [r4, #4]
 800329e:	b113      	cbz	r3, 80032a6 <HAL_SPI_Transmit+0x90>
 80032a0:	f1b9 0f01 	cmp.w	r9, #1
 80032a4:	d123      	bne.n	80032ee <HAL_SPI_Transmit+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80032a8:	6823      	ldr	r3, [r4, #0]
 80032aa:	8812      	ldrh	r2, [r2, #0]
 80032ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80032b0:	3302      	adds	r3, #2
 80032b2:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80032b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80032be:	e016      	b.n	80032ee <HAL_SPI_Transmit+0xd8>
    __HAL_SPI_DISABLE(hspi);
 80032c0:	6822      	ldr	r2, [r4, #0]
 80032c2:	6813      	ldr	r3, [r2, #0]
 80032c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032c8:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80032ca:	6822      	ldr	r2, [r4, #0]
 80032cc:	6813      	ldr	r3, [r2, #0]
 80032ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032d2:	6013      	str	r3, [r2, #0]
 80032d4:	e7d5      	b.n	8003282 <HAL_SPI_Transmit+0x6c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032d6:	f7fe ff6f 	bl	80021b8 <HAL_GetTick>
 80032da:	1bc0      	subs	r0, r0, r7
 80032dc:	42a8      	cmp	r0, r5
 80032de:	d303      	bcc.n	80032e8 <HAL_SPI_Transmit+0xd2>
 80032e0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80032e4:	f040 808e 	bne.w	8003404 <HAL_SPI_Transmit+0x1ee>
 80032e8:	2d00      	cmp	r5, #0
 80032ea:	f000 808d 	beq.w	8003408 <HAL_SPI_Transmit+0x1f2>
    while (hspi->TxXferCount > 0U)
 80032ee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d066      	beq.n	80033c4 <HAL_SPI_Transmit+0x1ae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032f6:	6823      	ldr	r3, [r4, #0]
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	f012 0f02 	tst.w	r2, #2
 80032fe:	d0ea      	beq.n	80032d6 <HAL_SPI_Transmit+0xc0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003300:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003302:	8812      	ldrh	r2, [r2, #0]
 8003304:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003306:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003308:	3302      	adds	r3, #2
 800330a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800330c:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 8003310:	fa1f fc8c 	uxth.w	ip, ip
 8003314:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003318:	fa1f fc8c 	uxth.w	ip, ip
 800331c:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 8003320:	e7e5      	b.n	80032ee <HAL_SPI_Transmit+0xd8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003322:	6863      	ldr	r3, [r4, #4]
 8003324:	b113      	cbz	r3, 800332c <HAL_SPI_Transmit+0x116>
 8003326:	f1b9 0f01 	cmp.w	r9, #1
 800332a:	d133      	bne.n	8003394 <HAL_SPI_Transmit+0x17e>
      if (hspi->TxXferCount > 1U)
 800332c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800332e:	b29b      	uxth	r3, r3
 8003330:	2b01      	cmp	r3, #1
 8003332:	d90c      	bls.n	800334e <HAL_SPI_Transmit+0x138>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003334:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003336:	6823      	ldr	r3, [r4, #0]
 8003338:	8812      	ldrh	r2, [r2, #0]
 800333a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800333c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800333e:	3302      	adds	r3, #2
 8003340:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003342:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003344:	b29b      	uxth	r3, r3
 8003346:	3b02      	subs	r3, #2
 8003348:	b29b      	uxth	r3, r3
 800334a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800334c:	e022      	b.n	8003394 <HAL_SPI_Transmit+0x17e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800334e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003350:	6823      	ldr	r3, [r4, #0]
 8003352:	7812      	ldrb	r2, [r2, #0]
 8003354:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8003356:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003358:	3301      	adds	r3, #1
 800335a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800335c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800335e:	b29b      	uxth	r3, r3
 8003360:	3b01      	subs	r3, #1
 8003362:	b29b      	uxth	r3, r3
 8003364:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003366:	e015      	b.n	8003394 <HAL_SPI_Transmit+0x17e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003368:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 800336e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003370:	3301      	adds	r3, #1
 8003372:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8003374:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003376:	b29b      	uxth	r3, r3
 8003378:	3b01      	subs	r3, #1
 800337a:	b29b      	uxth	r3, r3
 800337c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800337e:	e009      	b.n	8003394 <HAL_SPI_Transmit+0x17e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003380:	f7fe ff1a 	bl	80021b8 <HAL_GetTick>
 8003384:	1bc0      	subs	r0, r0, r7
 8003386:	42a8      	cmp	r0, r5
 8003388:	d302      	bcc.n	8003390 <HAL_SPI_Transmit+0x17a>
 800338a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800338e:	d13d      	bne.n	800340c <HAL_SPI_Transmit+0x1f6>
 8003390:	2d00      	cmp	r5, #0
 8003392:	d03d      	beq.n	8003410 <HAL_SPI_Transmit+0x1fa>
    while (hspi->TxXferCount > 0U)
 8003394:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003396:	b29b      	uxth	r3, r3
 8003398:	b1a3      	cbz	r3, 80033c4 <HAL_SPI_Transmit+0x1ae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800339a:	6822      	ldr	r2, [r4, #0]
 800339c:	6893      	ldr	r3, [r2, #8]
 800339e:	f013 0f02 	tst.w	r3, #2
 80033a2:	d0ed      	beq.n	8003380 <HAL_SPI_Transmit+0x16a>
        if (hspi->TxXferCount > 1U)
 80033a4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d9dd      	bls.n	8003368 <HAL_SPI_Transmit+0x152>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80033ae:	881b      	ldrh	r3, [r3, #0]
 80033b0:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80033b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80033b4:	3302      	adds	r3, #2
 80033b6:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80033b8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	3b02      	subs	r3, #2
 80033be:	b29b      	uxth	r3, r3
 80033c0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80033c2:	e7e7      	b.n	8003394 <HAL_SPI_Transmit+0x17e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033c4:	463a      	mov	r2, r7
 80033c6:	4629      	mov	r1, r5
 80033c8:	4620      	mov	r0, r4
 80033ca:	f7ff fe43 	bl	8003054 <SPI_EndRxTxTransaction>
 80033ce:	b108      	cbz	r0, 80033d4 <HAL_SPI_Transmit+0x1be>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033d0:	2320      	movs	r3, #32
 80033d2:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033d4:	68a3      	ldr	r3, [r4, #8]
 80033d6:	b933      	cbnz	r3, 80033e6 <HAL_SPI_Transmit+0x1d0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033d8:	9301      	str	r3, [sp, #4]
 80033da:	6823      	ldr	r3, [r4, #0]
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	9201      	str	r2, [sp, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	9301      	str	r3, [sp, #4]
 80033e4:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033e6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80033e8:	b913      	cbnz	r3, 80033f0 <HAL_SPI_Transmit+0x1da>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033ea:	2600      	movs	r6, #0
 80033ec:	e000      	b.n	80033f0 <HAL_SPI_Transmit+0x1da>
    errorcode = HAL_BUSY;
 80033ee:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 80033f0:	2301      	movs	r3, #1
 80033f2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80033f6:	2300      	movs	r3, #0
 80033f8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80033fc:	4630      	mov	r0, r6
 80033fe:	b003      	add	sp, #12
 8003400:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8003404:	2603      	movs	r6, #3
 8003406:	e7f3      	b.n	80033f0 <HAL_SPI_Transmit+0x1da>
 8003408:	2603      	movs	r6, #3
 800340a:	e7f1      	b.n	80033f0 <HAL_SPI_Transmit+0x1da>
          errorcode = HAL_TIMEOUT;
 800340c:	2603      	movs	r6, #3
 800340e:	e7ef      	b.n	80033f0 <HAL_SPI_Transmit+0x1da>
 8003410:	2603      	movs	r6, #3
 8003412:	e7ed      	b.n	80033f0 <HAL_SPI_Transmit+0x1da>
  __HAL_LOCK(hspi);
 8003414:	2602      	movs	r6, #2
 8003416:	e7f1      	b.n	80033fc <HAL_SPI_Transmit+0x1e6>

08003418 <HAL_SPI_TransmitReceive>:
{
 8003418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800341c:	461f      	mov	r7, r3
 800341e:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 8003420:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8003424:	2b01      	cmp	r3, #1
 8003426:	f000 8164 	beq.w	80036f2 <HAL_SPI_TransmitReceive+0x2da>
 800342a:	4604      	mov	r4, r0
 800342c:	4688      	mov	r8, r1
 800342e:	4691      	mov	r9, r2
 8003430:	2301      	movs	r3, #1
 8003432:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003436:	f7fe febf 	bl	80021b8 <HAL_GetTick>
 800343a:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 800343c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003440:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8003442:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003444:	2b01      	cmp	r3, #1
 8003446:	d00a      	beq.n	800345e <HAL_SPI_TransmitReceive+0x46>
 8003448:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800344c:	f040 8138 	bne.w	80036c0 <HAL_SPI_TransmitReceive+0x2a8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003450:	68a2      	ldr	r2, [r4, #8]
 8003452:	2a00      	cmp	r2, #0
 8003454:	f040 813d 	bne.w	80036d2 <HAL_SPI_TransmitReceive+0x2ba>
 8003458:	2b04      	cmp	r3, #4
 800345a:	f040 813c 	bne.w	80036d6 <HAL_SPI_TransmitReceive+0x2be>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800345e:	f1b8 0f00 	cmp.w	r8, #0
 8003462:	f000 813a 	beq.w	80036da <HAL_SPI_TransmitReceive+0x2c2>
 8003466:	f1b9 0f00 	cmp.w	r9, #0
 800346a:	f000 8138 	beq.w	80036de <HAL_SPI_TransmitReceive+0x2c6>
 800346e:	2f00      	cmp	r7, #0
 8003470:	f000 8137 	beq.w	80036e2 <HAL_SPI_TransmitReceive+0x2ca>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003474:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b04      	cmp	r3, #4
 800347c:	d002      	beq.n	8003484 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800347e:	2305      	movs	r3, #5
 8003480:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003484:	2300      	movs	r3, #0
 8003486:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003488:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800348c:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003490:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003494:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003498:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800349a:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 800349c:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800349e:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80034a0:	68e3      	ldr	r3, [r4, #12]
 80034a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034a6:	d801      	bhi.n	80034ac <HAL_SPI_TransmitReceive+0x94>
 80034a8:	2f01      	cmp	r7, #1
 80034aa:	d923      	bls.n	80034f4 <HAL_SPI_TransmitReceive+0xdc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034ac:	6822      	ldr	r2, [r4, #0]
 80034ae:	6853      	ldr	r3, [r2, #4]
 80034b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034b4:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034b6:	6823      	ldr	r3, [r4, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	f012 0f40 	tst.w	r2, #64	; 0x40
 80034be:	d103      	bne.n	80034c8 <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034c6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034c8:	68e3      	ldr	r3, [r4, #12]
 80034ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034ce:	d958      	bls.n	8003582 <HAL_SPI_TransmitReceive+0x16a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034d0:	6863      	ldr	r3, [r4, #4]
 80034d2:	b10b      	cbz	r3, 80034d8 <HAL_SPI_TransmitReceive+0xc0>
 80034d4:	2f01      	cmp	r7, #1
 80034d6:	d10b      	bne.n	80034f0 <HAL_SPI_TransmitReceive+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034d8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80034da:	6823      	ldr	r3, [r4, #0]
 80034dc:	8812      	ldrh	r2, [r2, #0]
 80034de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80034e2:	3302      	adds	r3, #2
 80034e4:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80034e6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	3b01      	subs	r3, #1
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80034f0:	2701      	movs	r7, #1
 80034f2:	e031      	b.n	8003558 <HAL_SPI_TransmitReceive+0x140>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034f4:	6822      	ldr	r2, [r4, #0]
 80034f6:	6853      	ldr	r3, [r2, #4]
 80034f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034fc:	6053      	str	r3, [r2, #4]
 80034fe:	e7da      	b.n	80034b6 <HAL_SPI_TransmitReceive+0x9e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003500:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003502:	8812      	ldrh	r2, [r2, #0]
 8003504:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003506:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003508:	3302      	adds	r3, #2
 800350a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800350c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800350e:	b29b      	uxth	r3, r3
 8003510:	3b01      	subs	r3, #1
 8003512:	b29b      	uxth	r3, r3
 8003514:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8003516:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003518:	6823      	ldr	r3, [r4, #0]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	f012 0f01 	tst.w	r2, #1
 8003520:	d011      	beq.n	8003546 <HAL_SPI_TransmitReceive+0x12e>
 8003522:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003526:	b292      	uxth	r2, r2
 8003528:	b16a      	cbz	r2, 8003546 <HAL_SPI_TransmitReceive+0x12e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800352a:	68da      	ldr	r2, [r3, #12]
 800352c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800352e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003530:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003532:	3302      	adds	r3, #2
 8003534:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003536:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800353a:	b29b      	uxth	r3, r3
 800353c:	3b01      	subs	r3, #1
 800353e:	b29b      	uxth	r3, r3
 8003540:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8003544:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003546:	f7fe fe37 	bl	80021b8 <HAL_GetTick>
 800354a:	1b83      	subs	r3, r0, r6
 800354c:	42ab      	cmp	r3, r5
 800354e:	d303      	bcc.n	8003558 <HAL_SPI_TransmitReceive+0x140>
 8003550:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003554:	f040 80c7 	bne.w	80036e6 <HAL_SPI_TransmitReceive+0x2ce>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003558:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800355a:	b29b      	uxth	r3, r3
 800355c:	b92b      	cbnz	r3, 800356a <HAL_SPI_TransmitReceive+0x152>
 800355e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003562:	b29b      	uxth	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 80a1 	beq.w	80036ac <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800356a:	6823      	ldr	r3, [r4, #0]
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	f012 0f02 	tst.w	r2, #2
 8003572:	d0d1      	beq.n	8003518 <HAL_SPI_TransmitReceive+0x100>
 8003574:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003576:	b292      	uxth	r2, r2
 8003578:	2a00      	cmp	r2, #0
 800357a:	d0cd      	beq.n	8003518 <HAL_SPI_TransmitReceive+0x100>
 800357c:	2f00      	cmp	r7, #0
 800357e:	d0cb      	beq.n	8003518 <HAL_SPI_TransmitReceive+0x100>
 8003580:	e7be      	b.n	8003500 <HAL_SPI_TransmitReceive+0xe8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003582:	6863      	ldr	r3, [r4, #4]
 8003584:	b10b      	cbz	r3, 800358a <HAL_SPI_TransmitReceive+0x172>
 8003586:	2f01      	cmp	r7, #1
 8003588:	d10f      	bne.n	80035aa <HAL_SPI_TransmitReceive+0x192>
      if (hspi->TxXferCount > 1U)
 800358a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800358c:	b29b      	uxth	r3, r3
 800358e:	2b01      	cmp	r3, #1
 8003590:	d90d      	bls.n	80035ae <HAL_SPI_TransmitReceive+0x196>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003592:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003594:	6823      	ldr	r3, [r4, #0]
 8003596:	8812      	ldrh	r2, [r2, #0]
 8003598:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800359a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800359c:	3302      	adds	r3, #2
 800359e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80035a0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	3b02      	subs	r3, #2
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80035aa:	2701      	movs	r7, #1
 80035ac:	e049      	b.n	8003642 <HAL_SPI_TransmitReceive+0x22a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80035ae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80035b0:	6823      	ldr	r3, [r4, #0]
 80035b2:	7812      	ldrb	r2, [r2, #0]
 80035b4:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80035b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80035b8:	3301      	adds	r3, #1
 80035ba:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80035bc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80035be:	b29b      	uxth	r3, r3
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80035c6:	e7f0      	b.n	80035aa <HAL_SPI_TransmitReceive+0x192>
        if (hspi->TxXferCount > 1U)
 80035c8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80035ca:	b292      	uxth	r2, r2
 80035cc:	2a01      	cmp	r2, #1
 80035ce:	d90c      	bls.n	80035ea <HAL_SPI_TransmitReceive+0x1d2>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035d0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80035d2:	8812      	ldrh	r2, [r2, #0]
 80035d4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80035d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80035d8:	3302      	adds	r3, #2
 80035da:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80035dc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80035de:	b29b      	uxth	r3, r3
 80035e0:	3b02      	subs	r3, #2
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80035e6:	2700      	movs	r7, #0
 80035e8:	e03d      	b.n	8003666 <HAL_SPI_TransmitReceive+0x24e>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80035ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80035ec:	7812      	ldrb	r2, [r2, #0]
 80035ee:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 80035f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80035f2:	3301      	adds	r3, #1
 80035f4:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80035f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	3b01      	subs	r3, #1
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8003600:	2700      	movs	r7, #0
 8003602:	e030      	b.n	8003666 <HAL_SPI_TransmitReceive+0x24e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003604:	6822      	ldr	r2, [r4, #0]
 8003606:	6853      	ldr	r3, [r2, #4]
 8003608:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800360c:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 800360e:	2701      	movs	r7, #1
 8003610:	e00d      	b.n	800362e <HAL_SPI_TransmitReceive+0x216>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003612:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003614:	7b1b      	ldrb	r3, [r3, #12]
 8003616:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 8003618:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800361a:	3301      	adds	r3, #1
 800361c:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 800361e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003622:	b29b      	uxth	r3, r3
 8003624:	3b01      	subs	r3, #1
 8003626:	b29b      	uxth	r3, r3
 8003628:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800362c:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800362e:	f7fe fdc3 	bl	80021b8 <HAL_GetTick>
 8003632:	1b80      	subs	r0, r0, r6
 8003634:	42a8      	cmp	r0, r5
 8003636:	d302      	bcc.n	800363e <HAL_SPI_TransmitReceive+0x226>
 8003638:	f1b5 3fff 	cmp.w	r5, #4294967295
 800363c:	d155      	bne.n	80036ea <HAL_SPI_TransmitReceive+0x2d2>
 800363e:	2d00      	cmp	r5, #0
 8003640:	d055      	beq.n	80036ee <HAL_SPI_TransmitReceive+0x2d6>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003642:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003644:	b29b      	uxth	r3, r3
 8003646:	b923      	cbnz	r3, 8003652 <HAL_SPI_TransmitReceive+0x23a>
 8003648:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800364c:	b29b      	uxth	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d02c      	beq.n	80036ac <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003652:	6823      	ldr	r3, [r4, #0]
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	f012 0f02 	tst.w	r2, #2
 800365a:	d004      	beq.n	8003666 <HAL_SPI_TransmitReceive+0x24e>
 800365c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800365e:	b292      	uxth	r2, r2
 8003660:	b10a      	cbz	r2, 8003666 <HAL_SPI_TransmitReceive+0x24e>
 8003662:	2f00      	cmp	r7, #0
 8003664:	d1b0      	bne.n	80035c8 <HAL_SPI_TransmitReceive+0x1b0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003666:	6823      	ldr	r3, [r4, #0]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	f012 0f01 	tst.w	r2, #1
 800366e:	d0de      	beq.n	800362e <HAL_SPI_TransmitReceive+0x216>
 8003670:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003674:	b292      	uxth	r2, r2
 8003676:	2a00      	cmp	r2, #0
 8003678:	d0d9      	beq.n	800362e <HAL_SPI_TransmitReceive+0x216>
        if (hspi->RxXferCount > 1U)
 800367a:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800367e:	b292      	uxth	r2, r2
 8003680:	2a01      	cmp	r2, #1
 8003682:	d9c6      	bls.n	8003612 <HAL_SPI_TransmitReceive+0x1fa>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003684:	68da      	ldr	r2, [r3, #12]
 8003686:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003688:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800368a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800368c:	3302      	adds	r3, #2
 800368e:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003690:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003694:	b29b      	uxth	r3, r3
 8003696:	3b02      	subs	r3, #2
 8003698:	b29b      	uxth	r3, r3
 800369a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800369e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d9ad      	bls.n	8003604 <HAL_SPI_TransmitReceive+0x1ec>
        txallowed = 1U;
 80036a8:	2701      	movs	r7, #1
 80036aa:	e7c0      	b.n	800362e <HAL_SPI_TransmitReceive+0x216>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036ac:	4632      	mov	r2, r6
 80036ae:	4629      	mov	r1, r5
 80036b0:	4620      	mov	r0, r4
 80036b2:	f7ff fccf 	bl	8003054 <SPI_EndRxTxTransaction>
 80036b6:	b120      	cbz	r0, 80036c2 <HAL_SPI_TransmitReceive+0x2aa>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036b8:	2320      	movs	r3, #32
 80036ba:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 80036bc:	2001      	movs	r0, #1
 80036be:	e000      	b.n	80036c2 <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_BUSY;
 80036c0:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80036c2:	2301      	movs	r3, #1
 80036c4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80036c8:	2300      	movs	r3, #0
 80036ca:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80036ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 80036d2:	2002      	movs	r0, #2
 80036d4:	e7f5      	b.n	80036c2 <HAL_SPI_TransmitReceive+0x2aa>
 80036d6:	2002      	movs	r0, #2
 80036d8:	e7f3      	b.n	80036c2 <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_ERROR;
 80036da:	2001      	movs	r0, #1
 80036dc:	e7f1      	b.n	80036c2 <HAL_SPI_TransmitReceive+0x2aa>
 80036de:	2001      	movs	r0, #1
 80036e0:	e7ef      	b.n	80036c2 <HAL_SPI_TransmitReceive+0x2aa>
 80036e2:	2001      	movs	r0, #1
 80036e4:	e7ed      	b.n	80036c2 <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 80036e6:	2003      	movs	r0, #3
 80036e8:	e7eb      	b.n	80036c2 <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 80036ea:	2003      	movs	r0, #3
 80036ec:	e7e9      	b.n	80036c2 <HAL_SPI_TransmitReceive+0x2aa>
 80036ee:	2003      	movs	r0, #3
 80036f0:	e7e7      	b.n	80036c2 <HAL_SPI_TransmitReceive+0x2aa>
  __HAL_LOCK(hspi);
 80036f2:	2002      	movs	r0, #2
 80036f4:	e7eb      	b.n	80036ce <HAL_SPI_TransmitReceive+0x2b6>

080036f6 <HAL_SPI_Receive>:
{
 80036f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036fa:	b083      	sub	sp, #12
 80036fc:	4604      	mov	r4, r0
 80036fe:	4688      	mov	r8, r1
 8003700:	4691      	mov	r9, r2
 8003702:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003704:	6840      	ldr	r0, [r0, #4]
 8003706:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 800370a:	d043      	beq.n	8003794 <HAL_SPI_Receive+0x9e>
  __HAL_LOCK(hspi);
 800370c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8003710:	2b01      	cmp	r3, #1
 8003712:	f000 80c3 	beq.w	800389c <HAL_SPI_Receive+0x1a6>
 8003716:	2301      	movs	r3, #1
 8003718:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800371c:	f7fe fd4c 	bl	80021b8 <HAL_GetTick>
 8003720:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003722:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 8003726:	b2f6      	uxtb	r6, r6
 8003728:	2e01      	cmp	r6, #1
 800372a:	f040 80a4 	bne.w	8003876 <HAL_SPI_Receive+0x180>
  if ((pData == NULL) || (Size == 0U))
 800372e:	f1b8 0f00 	cmp.w	r8, #0
 8003732:	f000 80a1 	beq.w	8003878 <HAL_SPI_Receive+0x182>
 8003736:	f1b9 0f00 	cmp.w	r9, #0
 800373a:	f000 809d 	beq.w	8003878 <HAL_SPI_Receive+0x182>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800373e:	2304      	movs	r3, #4
 8003740:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003744:	2300      	movs	r3, #0
 8003746:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003748:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800374c:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003750:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003754:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003756:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003758:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800375a:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800375c:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800375e:	68e3      	ldr	r3, [r4, #12]
 8003760:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003764:	d924      	bls.n	80037b0 <HAL_SPI_Receive+0xba>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003766:	6822      	ldr	r2, [r4, #0]
 8003768:	6853      	ldr	r3, [r2, #4]
 800376a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800376e:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003770:	68a3      	ldr	r3, [r4, #8]
 8003772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003776:	d021      	beq.n	80037bc <HAL_SPI_Receive+0xc6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003778:	6823      	ldr	r3, [r4, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003780:	d103      	bne.n	800378a <HAL_SPI_Receive+0x94>
    __HAL_SPI_ENABLE(hspi);
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003788:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800378a:	68e3      	ldr	r3, [r4, #12]
 800378c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003790:	d929      	bls.n	80037e6 <HAL_SPI_Receive+0xf0>
 8003792:	e04a      	b.n	800382a <HAL_SPI_Receive+0x134>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003794:	68a3      	ldr	r3, [r4, #8]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1b8      	bne.n	800370c <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800379a:	2304      	movs	r3, #4
 800379c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80037a0:	9500      	str	r5, [sp, #0]
 80037a2:	4613      	mov	r3, r2
 80037a4:	460a      	mov	r2, r1
 80037a6:	4620      	mov	r0, r4
 80037a8:	f7ff fe36 	bl	8003418 <HAL_SPI_TransmitReceive>
 80037ac:	4606      	mov	r6, r0
 80037ae:	e069      	b.n	8003884 <HAL_SPI_Receive+0x18e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037b0:	6822      	ldr	r2, [r4, #0]
 80037b2:	6853      	ldr	r3, [r2, #4]
 80037b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037b8:	6053      	str	r3, [r2, #4]
 80037ba:	e7d9      	b.n	8003770 <HAL_SPI_Receive+0x7a>
    __HAL_SPI_DISABLE(hspi);
 80037bc:	6822      	ldr	r2, [r4, #0]
 80037be:	6813      	ldr	r3, [r2, #0]
 80037c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037c4:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 80037c6:	6822      	ldr	r2, [r4, #0]
 80037c8:	6813      	ldr	r3, [r2, #0]
 80037ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	e7d2      	b.n	8003778 <HAL_SPI_Receive+0x82>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037d2:	f7fe fcf1 	bl	80021b8 <HAL_GetTick>
 80037d6:	1bc0      	subs	r0, r0, r7
 80037d8:	42a8      	cmp	r0, r5
 80037da:	d302      	bcc.n	80037e2 <HAL_SPI_Receive+0xec>
 80037dc:	f1b5 3fff 	cmp.w	r5, #4294967295
 80037e0:	d154      	bne.n	800388c <HAL_SPI_Receive+0x196>
 80037e2:	2d00      	cmp	r5, #0
 80037e4:	d054      	beq.n	8003890 <HAL_SPI_Receive+0x19a>
    while (hspi->RxXferCount > 0U)
 80037e6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d036      	beq.n	800385e <HAL_SPI_Receive+0x168>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80037f0:	6823      	ldr	r3, [r4, #0]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	f012 0f01 	tst.w	r2, #1
 80037f8:	d0eb      	beq.n	80037d2 <HAL_SPI_Receive+0xdc>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80037fa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80037fc:	7b1b      	ldrb	r3, [r3, #12]
 80037fe:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003800:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003802:	3301      	adds	r3, #1
 8003804:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003806:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800380a:	b29b      	uxth	r3, r3
 800380c:	3b01      	subs	r3, #1
 800380e:	b29b      	uxth	r3, r3
 8003810:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8003814:	e7e7      	b.n	80037e6 <HAL_SPI_Receive+0xf0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003816:	f7fe fccf 	bl	80021b8 <HAL_GetTick>
 800381a:	1bc0      	subs	r0, r0, r7
 800381c:	42a8      	cmp	r0, r5
 800381e:	d302      	bcc.n	8003826 <HAL_SPI_Receive+0x130>
 8003820:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003824:	d136      	bne.n	8003894 <HAL_SPI_Receive+0x19e>
 8003826:	2d00      	cmp	r5, #0
 8003828:	d036      	beq.n	8003898 <HAL_SPI_Receive+0x1a2>
    while (hspi->RxXferCount > 0U)
 800382a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800382e:	b29b      	uxth	r3, r3
 8003830:	b1ab      	cbz	r3, 800385e <HAL_SPI_Receive+0x168>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003832:	6823      	ldr	r3, [r4, #0]
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	f012 0f01 	tst.w	r2, #1
 800383a:	d0ec      	beq.n	8003816 <HAL_SPI_Receive+0x120>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003840:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003842:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003844:	3302      	adds	r3, #2
 8003846:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003848:	f8b4 c046 	ldrh.w	ip, [r4, #70]	; 0x46
 800384c:	fa1f fc8c 	uxth.w	ip, ip
 8003850:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003854:	fa1f fc8c 	uxth.w	ip, ip
 8003858:	f8a4 c046 	strh.w	ip, [r4, #70]	; 0x46
 800385c:	e7e5      	b.n	800382a <HAL_SPI_Receive+0x134>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800385e:	463a      	mov	r2, r7
 8003860:	4629      	mov	r1, r5
 8003862:	4620      	mov	r0, r4
 8003864:	f7ff fc27 	bl	80030b6 <SPI_EndRxTransaction>
 8003868:	b108      	cbz	r0, 800386e <HAL_SPI_Receive+0x178>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800386a:	2320      	movs	r3, #32
 800386c:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800386e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003870:	b913      	cbnz	r3, 8003878 <HAL_SPI_Receive+0x182>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003872:	2600      	movs	r6, #0
 8003874:	e000      	b.n	8003878 <HAL_SPI_Receive+0x182>
    errorcode = HAL_BUSY;
 8003876:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003878:	2301      	movs	r3, #1
 800387a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800387e:	2300      	movs	r3, #0
 8003880:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8003884:	4630      	mov	r0, r6
 8003886:	b003      	add	sp, #12
 8003888:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 800388c:	2603      	movs	r6, #3
 800388e:	e7f3      	b.n	8003878 <HAL_SPI_Receive+0x182>
 8003890:	2603      	movs	r6, #3
 8003892:	e7f1      	b.n	8003878 <HAL_SPI_Receive+0x182>
          errorcode = HAL_TIMEOUT;
 8003894:	2603      	movs	r6, #3
 8003896:	e7ef      	b.n	8003878 <HAL_SPI_Receive+0x182>
 8003898:	2603      	movs	r6, #3
 800389a:	e7ed      	b.n	8003878 <HAL_SPI_Receive+0x182>
  __HAL_LOCK(hspi);
 800389c:	2602      	movs	r6, #2
 800389e:	e7f1      	b.n	8003884 <HAL_SPI_Receive+0x18e>

080038a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038a0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038a2:	6a03      	ldr	r3, [r0, #32]
 80038a4:	f023 0301 	bic.w	r3, r3, #1
 80038a8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038aa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038ac:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038ae:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80038b4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038b8:	680c      	ldr	r4, [r1, #0]
 80038ba:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038bc:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038c0:	688c      	ldr	r4, [r1, #8]
 80038c2:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038c4:	4c15      	ldr	r4, [pc, #84]	; (800391c <TIM_OC1_SetConfig+0x7c>)
 80038c6:	42a0      	cmp	r0, r4
 80038c8:	d007      	beq.n	80038da <TIM_OC1_SetConfig+0x3a>
 80038ca:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 80038ce:	42a0      	cmp	r0, r4
 80038d0:	d003      	beq.n	80038da <TIM_OC1_SetConfig+0x3a>
 80038d2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80038d6:	42a0      	cmp	r0, r4
 80038d8:	d105      	bne.n	80038e6 <TIM_OC1_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038da:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038de:	68cc      	ldr	r4, [r1, #12]
 80038e0:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038e2:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038e6:	4c0d      	ldr	r4, [pc, #52]	; (800391c <TIM_OC1_SetConfig+0x7c>)
 80038e8:	42a0      	cmp	r0, r4
 80038ea:	d007      	beq.n	80038fc <TIM_OC1_SetConfig+0x5c>
 80038ec:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 80038f0:	42a0      	cmp	r0, r4
 80038f2:	d003      	beq.n	80038fc <TIM_OC1_SetConfig+0x5c>
 80038f4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80038f8:	42a0      	cmp	r0, r4
 80038fa:	d107      	bne.n	800390c <TIM_OC1_SetConfig+0x6c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038fc:	f425 7c40 	bic.w	ip, r5, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003900:	694c      	ldr	r4, [r1, #20]
 8003902:	ea44 0c0c 	orr.w	ip, r4, ip
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003906:	698d      	ldr	r5, [r1, #24]
 8003908:	ea45 050c 	orr.w	r5, r5, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800390c:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800390e:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003910:	684a      	ldr	r2, [r1, #4]
 8003912:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003914:	6203      	str	r3, [r0, #32]
}
 8003916:	bc30      	pop	{r4, r5}
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	40012c00 	.word	0x40012c00

08003920 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003920:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003922:	6a03      	ldr	r3, [r0, #32]
 8003924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003928:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800392a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800392c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800392e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003930:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003934:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003938:	680d      	ldr	r5, [r1, #0]
 800393a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800393c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003940:	688d      	ldr	r5, [r1, #8]
 8003942:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003946:	4d12      	ldr	r5, [pc, #72]	; (8003990 <TIM_OC3_SetConfig+0x70>)
 8003948:	42a8      	cmp	r0, r5
 800394a:	d019      	beq.n	8003980 <TIM_OC3_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800394c:	4d10      	ldr	r5, [pc, #64]	; (8003990 <TIM_OC3_SetConfig+0x70>)
 800394e:	42a8      	cmp	r0, r5
 8003950:	d007      	beq.n	8003962 <TIM_OC3_SetConfig+0x42>
 8003952:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003956:	42a8      	cmp	r0, r5
 8003958:	d003      	beq.n	8003962 <TIM_OC3_SetConfig+0x42>
 800395a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800395e:	42a8      	cmp	r0, r5
 8003960:	d107      	bne.n	8003972 <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003962:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003966:	694d      	ldr	r5, [r1, #20]
 8003968:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800396c:	698d      	ldr	r5, [r1, #24]
 800396e:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003972:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003974:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003976:	684a      	ldr	r2, [r1, #4]
 8003978:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800397a:	6203      	str	r3, [r0, #32]
}
 800397c:	bc30      	pop	{r4, r5}
 800397e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8003980:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003984:	68cd      	ldr	r5, [r1, #12]
 8003986:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800398a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800398e:	e7dd      	b.n	800394c <TIM_OC3_SetConfig+0x2c>
 8003990:	40012c00 	.word	0x40012c00

08003994 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003994:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003996:	6a03      	ldr	r3, [r0, #32]
 8003998:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800399c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800399e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039a0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039a2:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039a8:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039ac:	680d      	ldr	r5, [r1, #0]
 80039ae:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039b6:	688d      	ldr	r5, [r1, #8]
 80039b8:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039bc:	4d0b      	ldr	r5, [pc, #44]	; (80039ec <TIM_OC4_SetConfig+0x58>)
 80039be:	42a8      	cmp	r0, r5
 80039c0:	d007      	beq.n	80039d2 <TIM_OC4_SetConfig+0x3e>
 80039c2:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80039c6:	42a8      	cmp	r0, r5
 80039c8:	d003      	beq.n	80039d2 <TIM_OC4_SetConfig+0x3e>
 80039ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80039ce:	42a8      	cmp	r0, r5
 80039d0:	d104      	bne.n	80039dc <TIM_OC4_SetConfig+0x48>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039d2:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039d6:	694d      	ldr	r5, [r1, #20]
 80039d8:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039dc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039de:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039e0:	684b      	ldr	r3, [r1, #4]
 80039e2:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039e4:	6202      	str	r2, [r0, #32]
}
 80039e6:	bc30      	pop	{r4, r5}
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	40012c00 	.word	0x40012c00

080039f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80039f0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80039f2:	6a03      	ldr	r3, [r0, #32]
 80039f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039fa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039fc:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80039fe:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003a00:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003a04:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a08:	680d      	ldr	r5, [r1, #0]
 8003a0a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003a0c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003a10:	688d      	ldr	r5, [r1, #8]
 8003a12:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a16:	4d0b      	ldr	r5, [pc, #44]	; (8003a44 <TIM_OC5_SetConfig+0x54>)
 8003a18:	42a8      	cmp	r0, r5
 8003a1a:	d007      	beq.n	8003a2c <TIM_OC5_SetConfig+0x3c>
 8003a1c:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003a20:	42a8      	cmp	r0, r5
 8003a22:	d003      	beq.n	8003a2c <TIM_OC5_SetConfig+0x3c>
 8003a24:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003a28:	42a8      	cmp	r0, r5
 8003a2a:	d104      	bne.n	8003a36 <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003a2c:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003a30:	694d      	ldr	r5, [r1, #20]
 8003a32:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a36:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a38:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003a3a:	684a      	ldr	r2, [r1, #4]
 8003a3c:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a3e:	6203      	str	r3, [r0, #32]
}
 8003a40:	bc30      	pop	{r4, r5}
 8003a42:	4770      	bx	lr
 8003a44:	40012c00 	.word	0x40012c00

08003a48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a48:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003a4a:	6a03      	ldr	r3, [r0, #32]
 8003a4c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003a50:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a52:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a54:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a56:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003a58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a60:	680d      	ldr	r5, [r1, #0]
 8003a62:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003a66:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003a6a:	688d      	ldr	r5, [r1, #8]
 8003a6c:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a70:	4d0b      	ldr	r5, [pc, #44]	; (8003aa0 <TIM_OC6_SetConfig+0x58>)
 8003a72:	42a8      	cmp	r0, r5
 8003a74:	d007      	beq.n	8003a86 <TIM_OC6_SetConfig+0x3e>
 8003a76:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003a7a:	42a8      	cmp	r0, r5
 8003a7c:	d003      	beq.n	8003a86 <TIM_OC6_SetConfig+0x3e>
 8003a7e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003a82:	42a8      	cmp	r0, r5
 8003a84:	d104      	bne.n	8003a90 <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003a86:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003a8a:	694d      	ldr	r5, [r1, #20]
 8003a8c:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a90:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a92:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003a94:	684b      	ldr	r3, [r1, #4]
 8003a96:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a98:	6202      	str	r2, [r0, #32]
}
 8003a9a:	bc30      	pop	{r4, r5}
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40012c00 	.word	0x40012c00

08003aa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aa4:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003aa6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aa8:	6a04      	ldr	r4, [r0, #32]
 8003aaa:	f024 0401 	bic.w	r4, r4, #1
 8003aae:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ab0:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ab2:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ab6:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003aba:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8003abe:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ac0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003ac2:	6203      	str	r3, [r0, #32]
}
 8003ac4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aca:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003acc:	6a04      	ldr	r4, [r0, #32]
 8003ace:	f024 0410 	bic.w	r4, r4, #16
 8003ad2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ad4:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003ad6:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ad8:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003adc:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ae0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ae4:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ae8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003aea:	6203      	str	r3, [r0, #32]
}
 8003aec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003af2:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003af4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003af8:	430b      	orrs	r3, r1
 8003afa:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003afe:	6083      	str	r3, [r0, #8]
}
 8003b00:	4770      	bx	lr
	...

08003b04 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003b04:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d126      	bne.n	8003b5c <HAL_TIM_Base_Start_IT+0x58>
  htim->State = HAL_TIM_STATE_BUSY;
 8003b0e:	2302      	movs	r3, #2
 8003b10:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b14:	6802      	ldr	r2, [r0, #0]
 8003b16:	68d3      	ldr	r3, [r2, #12]
 8003b18:	f043 0301 	orr.w	r3, r3, #1
 8003b1c:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b1e:	6803      	ldr	r3, [r0, #0]
 8003b20:	4a11      	ldr	r2, [pc, #68]	; (8003b68 <HAL_TIM_Base_Start_IT+0x64>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d00c      	beq.n	8003b40 <HAL_TIM_Base_Start_IT+0x3c>
 8003b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b2a:	d009      	beq.n	8003b40 <HAL_TIM_Base_Start_IT+0x3c>
 8003b2c:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d005      	beq.n	8003b40 <HAL_TIM_Base_Start_IT+0x3c>
    __HAL_TIM_ENABLE(htim);
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	f042 0201 	orr.w	r2, r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b40:	6899      	ldr	r1, [r3, #8]
 8003b42:	4a0a      	ldr	r2, [pc, #40]	; (8003b6c <HAL_TIM_Base_Start_IT+0x68>)
 8003b44:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b46:	2a06      	cmp	r2, #6
 8003b48:	d00a      	beq.n	8003b60 <HAL_TIM_Base_Start_IT+0x5c>
 8003b4a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003b4e:	d009      	beq.n	8003b64 <HAL_TIM_Base_Start_IT+0x60>
      __HAL_TIM_ENABLE(htim);
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	f042 0201 	orr.w	r2, r2, #1
 8003b56:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003b58:	2000      	movs	r0, #0
 8003b5a:	4770      	bx	lr
    return HAL_ERROR;
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	4770      	bx	lr
  return HAL_OK;
 8003b60:	2000      	movs	r0, #0
 8003b62:	4770      	bx	lr
 8003b64:	2000      	movs	r0, #0
}
 8003b66:	4770      	bx	lr
 8003b68:	40012c00 	.word	0x40012c00
 8003b6c:	00010007 	.word	0x00010007

08003b70 <HAL_TIM_OC_MspInit>:
}
 8003b70:	4770      	bx	lr

08003b72 <HAL_TIM_PeriodElapsedCallback>:
}
 8003b72:	4770      	bx	lr

08003b74 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8003b74:	4770      	bx	lr

08003b76 <HAL_TIM_IC_CaptureCallback>:
}
 8003b76:	4770      	bx	lr

08003b78 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8003b78:	4770      	bx	lr

08003b7a <HAL_TIM_TriggerCallback>:
}
 8003b7a:	4770      	bx	lr

08003b7c <HAL_TIM_IRQHandler>:
{
 8003b7c:	b510      	push	{r4, lr}
 8003b7e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b80:	6803      	ldr	r3, [r0, #0]
 8003b82:	691a      	ldr	r2, [r3, #16]
 8003b84:	f012 0f02 	tst.w	r2, #2
 8003b88:	d011      	beq.n	8003bae <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b8a:	68da      	ldr	r2, [r3, #12]
 8003b8c:	f012 0f02 	tst.w	r2, #2
 8003b90:	d00d      	beq.n	8003bae <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b92:	f06f 0202 	mvn.w	r2, #2
 8003b96:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b9c:	6803      	ldr	r3, [r0, #0]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	f013 0f03 	tst.w	r3, #3
 8003ba4:	d079      	beq.n	8003c9a <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8003ba6:	f7ff ffe6 	bl	8003b76 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003baa:	2300      	movs	r3, #0
 8003bac:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	691a      	ldr	r2, [r3, #16]
 8003bb2:	f012 0f04 	tst.w	r2, #4
 8003bb6:	d012      	beq.n	8003bde <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	f012 0f04 	tst.w	r2, #4
 8003bbe:	d00e      	beq.n	8003bde <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bc0:	f06f 0204 	mvn.w	r2, #4
 8003bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bca:	6823      	ldr	r3, [r4, #0]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003bd2:	d068      	beq.n	8003ca6 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003bd4:	4620      	mov	r0, r4
 8003bd6:	f7ff ffce 	bl	8003b76 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bde:	6823      	ldr	r3, [r4, #0]
 8003be0:	691a      	ldr	r2, [r3, #16]
 8003be2:	f012 0f08 	tst.w	r2, #8
 8003be6:	d012      	beq.n	8003c0e <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003be8:	68da      	ldr	r2, [r3, #12]
 8003bea:	f012 0f08 	tst.w	r2, #8
 8003bee:	d00e      	beq.n	8003c0e <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bf0:	f06f 0208 	mvn.w	r2, #8
 8003bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bf6:	2304      	movs	r3, #4
 8003bf8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bfa:	6823      	ldr	r3, [r4, #0]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	f013 0f03 	tst.w	r3, #3
 8003c02:	d057      	beq.n	8003cb4 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8003c04:	4620      	mov	r0, r4
 8003c06:	f7ff ffb6 	bl	8003b76 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c0e:	6823      	ldr	r3, [r4, #0]
 8003c10:	691a      	ldr	r2, [r3, #16]
 8003c12:	f012 0f10 	tst.w	r2, #16
 8003c16:	d012      	beq.n	8003c3e <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c18:	68da      	ldr	r2, [r3, #12]
 8003c1a:	f012 0f10 	tst.w	r2, #16
 8003c1e:	d00e      	beq.n	8003c3e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c20:	f06f 0210 	mvn.w	r2, #16
 8003c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c26:	2308      	movs	r3, #8
 8003c28:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c2a:	6823      	ldr	r3, [r4, #0]
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003c32:	d046      	beq.n	8003cc2 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8003c34:	4620      	mov	r0, r4
 8003c36:	f7ff ff9e 	bl	8003b76 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c3e:	6823      	ldr	r3, [r4, #0]
 8003c40:	691a      	ldr	r2, [r3, #16]
 8003c42:	f012 0f01 	tst.w	r2, #1
 8003c46:	d003      	beq.n	8003c50 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c48:	68da      	ldr	r2, [r3, #12]
 8003c4a:	f012 0f01 	tst.w	r2, #1
 8003c4e:	d13f      	bne.n	8003cd0 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c50:	6823      	ldr	r3, [r4, #0]
 8003c52:	691a      	ldr	r2, [r3, #16]
 8003c54:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003c58:	d003      	beq.n	8003c62 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003c60:	d13d      	bne.n	8003cde <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c62:	6823      	ldr	r3, [r4, #0]
 8003c64:	691a      	ldr	r2, [r3, #16]
 8003c66:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003c6a:	d003      	beq.n	8003c74 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c6c:	68da      	ldr	r2, [r3, #12]
 8003c6e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003c72:	d13b      	bne.n	8003cec <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c74:	6823      	ldr	r3, [r4, #0]
 8003c76:	691a      	ldr	r2, [r3, #16]
 8003c78:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003c7c:	d003      	beq.n	8003c86 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003c84:	d139      	bne.n	8003cfa <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c86:	6823      	ldr	r3, [r4, #0]
 8003c88:	691a      	ldr	r2, [r3, #16]
 8003c8a:	f012 0f20 	tst.w	r2, #32
 8003c8e:	d003      	beq.n	8003c98 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c90:	68da      	ldr	r2, [r3, #12]
 8003c92:	f012 0f20 	tst.w	r2, #32
 8003c96:	d137      	bne.n	8003d08 <HAL_TIM_IRQHandler+0x18c>
}
 8003c98:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c9a:	f7ff ff6b 	bl	8003b74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c9e:	4620      	mov	r0, r4
 8003ca0:	f7ff ff6a 	bl	8003b78 <HAL_TIM_PWM_PulseFinishedCallback>
 8003ca4:	e781      	b.n	8003baa <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ca6:	4620      	mov	r0, r4
 8003ca8:	f7ff ff64 	bl	8003b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cac:	4620      	mov	r0, r4
 8003cae:	f7ff ff63 	bl	8003b78 <HAL_TIM_PWM_PulseFinishedCallback>
 8003cb2:	e792      	b.n	8003bda <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cb4:	4620      	mov	r0, r4
 8003cb6:	f7ff ff5d 	bl	8003b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cba:	4620      	mov	r0, r4
 8003cbc:	f7ff ff5c 	bl	8003b78 <HAL_TIM_PWM_PulseFinishedCallback>
 8003cc0:	e7a3      	b.n	8003c0a <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cc2:	4620      	mov	r0, r4
 8003cc4:	f7ff ff56 	bl	8003b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cc8:	4620      	mov	r0, r4
 8003cca:	f7ff ff55 	bl	8003b78 <HAL_TIM_PWM_PulseFinishedCallback>
 8003cce:	e7b4      	b.n	8003c3a <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cd0:	f06f 0201 	mvn.w	r2, #1
 8003cd4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cd6:	4620      	mov	r0, r4
 8003cd8:	f7ff ff4b 	bl	8003b72 <HAL_TIM_PeriodElapsedCallback>
 8003cdc:	e7b8      	b.n	8003c50 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cde:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ce2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	f000 f9ee 	bl	80040c6 <HAL_TIMEx_BreakCallback>
 8003cea:	e7ba      	b.n	8003c62 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003cec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003cf0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	f000 f9e8 	bl	80040c8 <HAL_TIMEx_Break2Callback>
 8003cf8:	e7bc      	b.n	8003c74 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cfa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cfe:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003d00:	4620      	mov	r0, r4
 8003d02:	f7ff ff3a 	bl	8003b7a <HAL_TIM_TriggerCallback>
 8003d06:	e7be      	b.n	8003c86 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d08:	f06f 0220 	mvn.w	r2, #32
 8003d0c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003d0e:	4620      	mov	r0, r4
 8003d10:	f000 f9d8 	bl	80040c4 <HAL_TIMEx_CommutCallback>
}
 8003d14:	e7c0      	b.n	8003c98 <HAL_TIM_IRQHandler+0x11c>
	...

08003d18 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003d18:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d1a:	4a1a      	ldr	r2, [pc, #104]	; (8003d84 <TIM_Base_SetConfig+0x6c>)
 8003d1c:	4290      	cmp	r0, r2
 8003d1e:	d002      	beq.n	8003d26 <TIM_Base_SetConfig+0xe>
 8003d20:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003d24:	d103      	bne.n	8003d2e <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003d2a:	684a      	ldr	r2, [r1, #4]
 8003d2c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d2e:	4a15      	ldr	r2, [pc, #84]	; (8003d84 <TIM_Base_SetConfig+0x6c>)
 8003d30:	4290      	cmp	r0, r2
 8003d32:	d00a      	beq.n	8003d4a <TIM_Base_SetConfig+0x32>
 8003d34:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003d38:	d007      	beq.n	8003d4a <TIM_Base_SetConfig+0x32>
 8003d3a:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8003d3e:	4290      	cmp	r0, r2
 8003d40:	d003      	beq.n	8003d4a <TIM_Base_SetConfig+0x32>
 8003d42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d46:	4290      	cmp	r0, r2
 8003d48:	d103      	bne.n	8003d52 <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d4e:	68ca      	ldr	r2, [r1, #12]
 8003d50:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d56:	694a      	ldr	r2, [r1, #20]
 8003d58:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003d5a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d5c:	688b      	ldr	r3, [r1, #8]
 8003d5e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003d60:	680b      	ldr	r3, [r1, #0]
 8003d62:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d64:	4b07      	ldr	r3, [pc, #28]	; (8003d84 <TIM_Base_SetConfig+0x6c>)
 8003d66:	4298      	cmp	r0, r3
 8003d68:	d007      	beq.n	8003d7a <TIM_Base_SetConfig+0x62>
 8003d6a:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8003d6e:	4298      	cmp	r0, r3
 8003d70:	d003      	beq.n	8003d7a <TIM_Base_SetConfig+0x62>
 8003d72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d76:	4298      	cmp	r0, r3
 8003d78:	d101      	bne.n	8003d7e <TIM_Base_SetConfig+0x66>
    TIMx->RCR = Structure->RepetitionCounter;
 8003d7a:	690b      	ldr	r3, [r1, #16]
 8003d7c:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	6143      	str	r3, [r0, #20]
}
 8003d82:	4770      	bx	lr
 8003d84:	40012c00 	.word	0x40012c00

08003d88 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003d88:	b360      	cbz	r0, 8003de4 <HAL_TIM_Base_Init+0x5c>
{
 8003d8a:	b510      	push	{r4, lr}
 8003d8c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003d8e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003d92:	b313      	cbz	r3, 8003dda <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8003d94:	2302      	movs	r3, #2
 8003d96:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d9a:	4621      	mov	r1, r4
 8003d9c:	f851 0b04 	ldr.w	r0, [r1], #4
 8003da0:	f7ff ffba 	bl	8003d18 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003da4:	2301      	movs	r3, #1
 8003da6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003daa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003dae:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003db2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003db6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003dba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dc2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003dc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003dca:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003dce:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003dd2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003dd6:	2000      	movs	r0, #0
}
 8003dd8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003dda:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003dde:	f7fe f8a1 	bl	8001f24 <HAL_TIM_Base_MspInit>
 8003de2:	e7d7      	b.n	8003d94 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003de4:	2001      	movs	r0, #1
}
 8003de6:	4770      	bx	lr

08003de8 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8003de8:	b360      	cbz	r0, 8003e44 <HAL_TIM_OC_Init+0x5c>
{
 8003dea:	b510      	push	{r4, lr}
 8003dec:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003dee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003df2:	b313      	cbz	r3, 8003e3a <HAL_TIM_OC_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8003df4:	2302      	movs	r3, #2
 8003df6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003dfa:	4621      	mov	r1, r4
 8003dfc:	f851 0b04 	ldr.w	r0, [r1], #4
 8003e00:	f7ff ff8a 	bl	8003d18 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e04:	2301      	movs	r3, #1
 8003e06:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e0a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003e0e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003e12:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003e16:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003e1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e22:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003e26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e2a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003e2e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003e32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003e36:	2000      	movs	r0, #0
}
 8003e38:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003e3a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8003e3e:	f7ff fe97 	bl	8003b70 <HAL_TIM_OC_MspInit>
 8003e42:	e7d7      	b.n	8003df4 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8003e44:	2001      	movs	r0, #1
}
 8003e46:	4770      	bx	lr

08003e48 <TIM_OC2_SetConfig>:
{
 8003e48:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e4a:	6a03      	ldr	r3, [r0, #32]
 8003e4c:	f023 0310 	bic.w	r3, r3, #16
 8003e50:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003e52:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003e54:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003e56:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e58:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003e5c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e60:	680d      	ldr	r5, [r1, #0]
 8003e62:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8003e66:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e6a:	688d      	ldr	r5, [r1, #8]
 8003e6c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e70:	4d12      	ldr	r5, [pc, #72]	; (8003ebc <TIM_OC2_SetConfig+0x74>)
 8003e72:	42a8      	cmp	r0, r5
 8003e74:	d019      	beq.n	8003eaa <TIM_OC2_SetConfig+0x62>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e76:	4d11      	ldr	r5, [pc, #68]	; (8003ebc <TIM_OC2_SetConfig+0x74>)
 8003e78:	42a8      	cmp	r0, r5
 8003e7a:	d007      	beq.n	8003e8c <TIM_OC2_SetConfig+0x44>
 8003e7c:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003e80:	42a8      	cmp	r0, r5
 8003e82:	d003      	beq.n	8003e8c <TIM_OC2_SetConfig+0x44>
 8003e84:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003e88:	42a8      	cmp	r0, r5
 8003e8a:	d107      	bne.n	8003e9c <TIM_OC2_SetConfig+0x54>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e8c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e90:	694d      	ldr	r5, [r1, #20]
 8003e92:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e96:	698d      	ldr	r5, [r1, #24]
 8003e98:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8003e9c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003e9e:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003ea0:	684a      	ldr	r2, [r1, #4]
 8003ea2:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003ea4:	6203      	str	r3, [r0, #32]
}
 8003ea6:	bc30      	pop	{r4, r5}
 8003ea8:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8003eaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003eae:	68cd      	ldr	r5, [r1, #12]
 8003eb0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003eb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eb8:	e7dd      	b.n	8003e76 <TIM_OC2_SetConfig+0x2e>
 8003eba:	bf00      	nop
 8003ebc:	40012c00 	.word	0x40012c00

08003ec0 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8003ec0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d036      	beq.n	8003f36 <HAL_TIM_OC_ConfigChannel+0x76>
{
 8003ec8:	b510      	push	{r4, lr}
 8003eca:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003ecc:	2301      	movs	r3, #1
 8003ece:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8003ed2:	2a14      	cmp	r2, #20
 8003ed4:	d82a      	bhi.n	8003f2c <HAL_TIM_OC_ConfigChannel+0x6c>
 8003ed6:	e8df f002 	tbb	[pc, r2]
 8003eda:	290b      	.short	0x290b
 8003edc:	29102929 	.word	0x29102929
 8003ee0:	29152929 	.word	0x29152929
 8003ee4:	291a2929 	.word	0x291a2929
 8003ee8:	291f2929 	.word	0x291f2929
 8003eec:	2929      	.short	0x2929
 8003eee:	24          	.byte	0x24
 8003eef:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ef0:	6800      	ldr	r0, [r0, #0]
 8003ef2:	f7ff fcd5 	bl	80038a0 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003ef6:	2000      	movs	r0, #0
      break;
 8003ef8:	e019      	b.n	8003f2e <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003efa:	6800      	ldr	r0, [r0, #0]
 8003efc:	f7ff ffa4 	bl	8003e48 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003f00:	2000      	movs	r0, #0
      break;
 8003f02:	e014      	b.n	8003f2e <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f04:	6800      	ldr	r0, [r0, #0]
 8003f06:	f7ff fd0b 	bl	8003920 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003f0a:	2000      	movs	r0, #0
      break;
 8003f0c:	e00f      	b.n	8003f2e <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f0e:	6800      	ldr	r0, [r0, #0]
 8003f10:	f7ff fd40 	bl	8003994 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003f14:	2000      	movs	r0, #0
      break;
 8003f16:	e00a      	b.n	8003f2e <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003f18:	6800      	ldr	r0, [r0, #0]
 8003f1a:	f7ff fd69 	bl	80039f0 <TIM_OC5_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003f1e:	2000      	movs	r0, #0
      break;
 8003f20:	e005      	b.n	8003f2e <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f22:	6800      	ldr	r0, [r0, #0]
 8003f24:	f7ff fd90 	bl	8003a48 <TIM_OC6_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003f28:	2000      	movs	r0, #0
      break;
 8003f2a:	e000      	b.n	8003f2e <HAL_TIM_OC_ConfigChannel+0x6e>
  switch (Channel)
 8003f2c:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003f2e:	2300      	movs	r3, #0
 8003f30:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003f34:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8003f36:	2002      	movs	r0, #2
}
 8003f38:	4770      	bx	lr

08003f3a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f3a:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f3c:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f3e:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f42:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003f46:	430a      	orrs	r2, r1
 8003f48:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f4c:	6082      	str	r2, [r0, #8]
}
 8003f4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003f54:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d076      	beq.n	800404a <HAL_TIM_ConfigClockSource+0xf6>
{
 8003f5c:	b510      	push	{r4, lr}
 8003f5e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003f60:	2301      	movs	r3, #1
 8003f62:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003f66:	2302      	movs	r3, #2
 8003f68:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003f6c:	6802      	ldr	r2, [r0, #0]
 8003f6e:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f70:	4b37      	ldr	r3, [pc, #220]	; (8004050 <HAL_TIM_ConfigClockSource+0xfc>)
 8003f72:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8003f74:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003f76:	680b      	ldr	r3, [r1, #0]
 8003f78:	2b60      	cmp	r3, #96	; 0x60
 8003f7a:	d04c      	beq.n	8004016 <HAL_TIM_ConfigClockSource+0xc2>
 8003f7c:	d829      	bhi.n	8003fd2 <HAL_TIM_ConfigClockSource+0x7e>
 8003f7e:	2b40      	cmp	r3, #64	; 0x40
 8003f80:	d054      	beq.n	800402c <HAL_TIM_ConfigClockSource+0xd8>
 8003f82:	d90c      	bls.n	8003f9e <HAL_TIM_ConfigClockSource+0x4a>
 8003f84:	2b50      	cmp	r3, #80	; 0x50
 8003f86:	d122      	bne.n	8003fce <HAL_TIM_ConfigClockSource+0x7a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f88:	68ca      	ldr	r2, [r1, #12]
 8003f8a:	6849      	ldr	r1, [r1, #4]
 8003f8c:	6820      	ldr	r0, [r4, #0]
 8003f8e:	f7ff fd89 	bl	8003aa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f92:	2150      	movs	r1, #80	; 0x50
 8003f94:	6820      	ldr	r0, [r4, #0]
 8003f96:	f7ff fdac 	bl	8003af2 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003f9a:	2000      	movs	r0, #0
      break;
 8003f9c:	e005      	b.n	8003faa <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8003f9e:	2b20      	cmp	r3, #32
 8003fa0:	d00d      	beq.n	8003fbe <HAL_TIM_ConfigClockSource+0x6a>
 8003fa2:	d909      	bls.n	8003fb8 <HAL_TIM_ConfigClockSource+0x64>
 8003fa4:	2b30      	cmp	r3, #48	; 0x30
 8003fa6:	d00a      	beq.n	8003fbe <HAL_TIM_ConfigClockSource+0x6a>
      status = HAL_ERROR;
 8003fa8:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8003faa:	2301      	movs	r3, #1
 8003fac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003fb6:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8003fb8:	b10b      	cbz	r3, 8003fbe <HAL_TIM_ConfigClockSource+0x6a>
 8003fba:	2b10      	cmp	r3, #16
 8003fbc:	d105      	bne.n	8003fca <HAL_TIM_ConfigClockSource+0x76>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	6820      	ldr	r0, [r4, #0]
 8003fc2:	f7ff fd96 	bl	8003af2 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003fc6:	2000      	movs	r0, #0
      break;
 8003fc8:	e7ef      	b.n	8003faa <HAL_TIM_ConfigClockSource+0x56>
      status = HAL_ERROR;
 8003fca:	2001      	movs	r0, #1
 8003fcc:	e7ed      	b.n	8003faa <HAL_TIM_ConfigClockSource+0x56>
 8003fce:	2001      	movs	r0, #1
 8003fd0:	e7eb      	b.n	8003faa <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8003fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd6:	d034      	beq.n	8004042 <HAL_TIM_ConfigClockSource+0xee>
 8003fd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fdc:	d10c      	bne.n	8003ff8 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ETR_SetConfig(htim->Instance,
 8003fde:	68cb      	ldr	r3, [r1, #12]
 8003fe0:	684a      	ldr	r2, [r1, #4]
 8003fe2:	6889      	ldr	r1, [r1, #8]
 8003fe4:	6820      	ldr	r0, [r4, #0]
 8003fe6:	f7ff ffa8 	bl	8003f3a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fea:	6822      	ldr	r2, [r4, #0]
 8003fec:	6893      	ldr	r3, [r2, #8]
 8003fee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ff2:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003ff4:	2000      	movs	r0, #0
      break;
 8003ff6:	e7d8      	b.n	8003faa <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8003ff8:	2b70      	cmp	r3, #112	; 0x70
 8003ffa:	d124      	bne.n	8004046 <HAL_TIM_ConfigClockSource+0xf2>
      TIM_ETR_SetConfig(htim->Instance,
 8003ffc:	68cb      	ldr	r3, [r1, #12]
 8003ffe:	684a      	ldr	r2, [r1, #4]
 8004000:	6889      	ldr	r1, [r1, #8]
 8004002:	6820      	ldr	r0, [r4, #0]
 8004004:	f7ff ff99 	bl	8003f3a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004008:	6822      	ldr	r2, [r4, #0]
 800400a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800400c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004010:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004012:	2000      	movs	r0, #0
      break;
 8004014:	e7c9      	b.n	8003faa <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004016:	68ca      	ldr	r2, [r1, #12]
 8004018:	6849      	ldr	r1, [r1, #4]
 800401a:	6820      	ldr	r0, [r4, #0]
 800401c:	f7ff fd55 	bl	8003aca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004020:	2160      	movs	r1, #96	; 0x60
 8004022:	6820      	ldr	r0, [r4, #0]
 8004024:	f7ff fd65 	bl	8003af2 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004028:	2000      	movs	r0, #0
      break;
 800402a:	e7be      	b.n	8003faa <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800402c:	68ca      	ldr	r2, [r1, #12]
 800402e:	6849      	ldr	r1, [r1, #4]
 8004030:	6820      	ldr	r0, [r4, #0]
 8004032:	f7ff fd37 	bl	8003aa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004036:	2140      	movs	r1, #64	; 0x40
 8004038:	6820      	ldr	r0, [r4, #0]
 800403a:	f7ff fd5a 	bl	8003af2 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800403e:	2000      	movs	r0, #0
      break;
 8004040:	e7b3      	b.n	8003faa <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8004042:	2000      	movs	r0, #0
 8004044:	e7b1      	b.n	8003faa <HAL_TIM_ConfigClockSource+0x56>
      status = HAL_ERROR;
 8004046:	2001      	movs	r0, #1
 8004048:	e7af      	b.n	8003faa <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 800404a:	2002      	movs	r0, #2
}
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	fffe0088 	.word	0xfffe0088

08004054 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004054:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004058:	2b01      	cmp	r3, #1
 800405a:	d02f      	beq.n	80040bc <HAL_TIMEx_MasterConfigSynchronization+0x68>
{
 800405c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800405e:	2301      	movs	r3, #1
 8004060:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004064:	2302      	movs	r3, #2
 8004066:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800406a:	6802      	ldr	r2, [r0, #0]
 800406c:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800406e:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004070:	4d13      	ldr	r5, [pc, #76]	; (80040c0 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8004072:	42aa      	cmp	r2, r5
 8004074:	d01d      	beq.n	80040b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800407a:	680d      	ldr	r5, [r1, #0]
 800407c:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800407e:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004080:	6803      	ldr	r3, [r0, #0]
 8004082:	4a0f      	ldr	r2, [pc, #60]	; (80040c0 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d006      	beq.n	8004096 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8004088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800408c:	d003      	beq.n	8004096 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 800408e:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8004092:	4293      	cmp	r3, r2
 8004094:	d104      	bne.n	80040a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004096:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800409a:	688a      	ldr	r2, [r1, #8]
 800409c:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800409e:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040a0:	2301      	movs	r3, #1
 80040a2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040a6:	2300      	movs	r3, #0
 80040a8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80040ac:	4618      	mov	r0, r3
}
 80040ae:	bc30      	pop	{r4, r5}
 80040b0:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 80040b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80040b6:	684d      	ldr	r5, [r1, #4]
 80040b8:	432b      	orrs	r3, r5
 80040ba:	e7dc      	b.n	8004076 <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 80040bc:	2002      	movs	r0, #2
}
 80040be:	4770      	bx	lr
 80040c0:	40012c00 	.word	0x40012c00

080040c4 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040c4:	4770      	bx	lr

080040c6 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040c6:	4770      	bx	lr

080040c8 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80040c8:	4770      	bx	lr

080040ca <arm_quaternion_normalize_f32>:

#else
void arm_quaternion_normalize_f32(const float32_t *pInputQuaternions, 
    float32_t *pNormalizedQuaternions, 
    uint32_t nbQuaternions)
{
 80040ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ce:	b085      	sub	sp, #20
 80040d0:	4607      	mov	r7, r0
 80040d2:	460e      	mov	r6, r1
 80040d4:	9203      	str	r2, [sp, #12]
   float32_t temp;

   for(uint32_t i=0; i < nbQuaternions; i++)
 80040d6:	2500      	movs	r5, #0
 80040d8:	e048      	b.n	800416c <arm_quaternion_normalize_f32+0xa2>
   {
      temp = SQ(pInputQuaternions[4 * i + 0]) +
 80040da:	012c      	lsls	r4, r5, #4
 80040dc:	eb07 1b05 	add.w	fp, r7, r5, lsl #4
 80040e0:	ed9b 0a00 	vldr	s0, [fp]
 80040e4:	ee20 0a00 	vmul.f32	s0, s0, s0
             SQ(pInputQuaternions[4 * i + 1]) +
 80040e8:	1d23      	adds	r3, r4, #4
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	eb07 0a03 	add.w	sl, r7, r3
 80040f0:	edda 7a00 	vldr	s15, [sl]
 80040f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
      temp = SQ(pInputQuaternions[4 * i + 0]) +
 80040f8:	ee30 0a27 	vadd.f32	s0, s0, s15
             SQ(pInputQuaternions[4 * i + 2]) +
 80040fc:	f104 0208 	add.w	r2, r4, #8
 8004100:	9201      	str	r2, [sp, #4]
 8004102:	eb07 0902 	add.w	r9, r7, r2
 8004106:	edd9 7a00 	vldr	s15, [r9]
 800410a:	ee67 7aa7 	vmul.f32	s15, s15, s15
             SQ(pInputQuaternions[4 * i + 1]) +
 800410e:	ee30 0a27 	vadd.f32	s0, s0, s15
             SQ(pInputQuaternions[4 * i + 3]);
 8004112:	f104 010c 	add.w	r1, r4, #12
 8004116:	9102      	str	r1, [sp, #8]
 8004118:	eb07 0801 	add.w	r8, r7, r1
 800411c:	edd8 7a00 	vldr	s15, [r8]
 8004120:	ee67 7aa7 	vmul.f32	s15, s15, s15
      temp = sqrtf(temp);
 8004124:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004128:	f001 f908 	bl	800533c <sqrtf>

      pNormalizedQuaternions[4 * i + 0] = pInputQuaternions[4 * i + 0] / temp;
 800412c:	ed9b 7a00 	vldr	s14, [fp]
 8004130:	4434      	add	r4, r6
 8004132:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8004136:	edc4 7a00 	vstr	s15, [r4]
      pNormalizedQuaternions[4 * i + 1] = pInputQuaternions[4 * i + 1] / temp;
 800413a:	ed9a 7a00 	vldr	s14, [sl]
 800413e:	9b00      	ldr	r3, [sp, #0]
 8004140:	18f3      	adds	r3, r6, r3
 8004142:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8004146:	edc3 7a00 	vstr	s15, [r3]
      pNormalizedQuaternions[4 * i + 2] = pInputQuaternions[4 * i + 2] / temp;
 800414a:	ed99 7a00 	vldr	s14, [r9]
 800414e:	9a01      	ldr	r2, [sp, #4]
 8004150:	18b3      	adds	r3, r6, r2
 8004152:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8004156:	edc3 7a00 	vstr	s15, [r3]
      pNormalizedQuaternions[4 * i + 3] = pInputQuaternions[4 * i + 3] / temp;
 800415a:	ed98 7a00 	vldr	s14, [r8]
 800415e:	9902      	ldr	r1, [sp, #8]
 8004160:	1873      	adds	r3, r6, r1
 8004162:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8004166:	edc3 7a00 	vstr	s15, [r3]
   for(uint32_t i=0; i < nbQuaternions; i++)
 800416a:	3501      	adds	r5, #1
 800416c:	9b03      	ldr	r3, [sp, #12]
 800416e:	429d      	cmp	r5, r3
 8004170:	d3b3      	bcc.n	80040da <arm_quaternion_normalize_f32+0x10>
   }
}
 8004172:	b005      	add	sp, #20
 8004174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004178 <__assert_func>:
 8004178:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800417a:	4614      	mov	r4, r2
 800417c:	461a      	mov	r2, r3
 800417e:	4b09      	ldr	r3, [pc, #36]	; (80041a4 <__assert_func+0x2c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4605      	mov	r5, r0
 8004184:	68d8      	ldr	r0, [r3, #12]
 8004186:	b14c      	cbz	r4, 800419c <__assert_func+0x24>
 8004188:	4b07      	ldr	r3, [pc, #28]	; (80041a8 <__assert_func+0x30>)
 800418a:	9100      	str	r1, [sp, #0]
 800418c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004190:	4906      	ldr	r1, [pc, #24]	; (80041ac <__assert_func+0x34>)
 8004192:	462b      	mov	r3, r5
 8004194:	f000 f814 	bl	80041c0 <fiprintf>
 8004198:	f000 fcfe 	bl	8004b98 <abort>
 800419c:	4b04      	ldr	r3, [pc, #16]	; (80041b0 <__assert_func+0x38>)
 800419e:	461c      	mov	r4, r3
 80041a0:	e7f3      	b.n	800418a <__assert_func+0x12>
 80041a2:	bf00      	nop
 80041a4:	20000028 	.word	0x20000028
 80041a8:	08005eb4 	.word	0x08005eb4
 80041ac:	08005ec1 	.word	0x08005ec1
 80041b0:	08005eef 	.word	0x08005eef

080041b4 <__errno>:
 80041b4:	4b01      	ldr	r3, [pc, #4]	; (80041bc <__errno+0x8>)
 80041b6:	6818      	ldr	r0, [r3, #0]
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	20000028 	.word	0x20000028

080041c0 <fiprintf>:
 80041c0:	b40e      	push	{r1, r2, r3}
 80041c2:	b503      	push	{r0, r1, lr}
 80041c4:	4601      	mov	r1, r0
 80041c6:	ab03      	add	r3, sp, #12
 80041c8:	4805      	ldr	r0, [pc, #20]	; (80041e0 <fiprintf+0x20>)
 80041ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80041ce:	6800      	ldr	r0, [r0, #0]
 80041d0:	9301      	str	r3, [sp, #4]
 80041d2:	f000 f94d 	bl	8004470 <_vfiprintf_r>
 80041d6:	b002      	add	sp, #8
 80041d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80041dc:	b003      	add	sp, #12
 80041de:	4770      	bx	lr
 80041e0:	20000028 	.word	0x20000028

080041e4 <__libc_init_array>:
 80041e4:	b570      	push	{r4, r5, r6, lr}
 80041e6:	4d0d      	ldr	r5, [pc, #52]	; (800421c <__libc_init_array+0x38>)
 80041e8:	4c0d      	ldr	r4, [pc, #52]	; (8004220 <__libc_init_array+0x3c>)
 80041ea:	1b64      	subs	r4, r4, r5
 80041ec:	10a4      	asrs	r4, r4, #2
 80041ee:	2600      	movs	r6, #0
 80041f0:	42a6      	cmp	r6, r4
 80041f2:	d109      	bne.n	8004208 <__libc_init_array+0x24>
 80041f4:	4d0b      	ldr	r5, [pc, #44]	; (8004224 <__libc_init_array+0x40>)
 80041f6:	4c0c      	ldr	r4, [pc, #48]	; (8004228 <__libc_init_array+0x44>)
 80041f8:	f001 fdd8 	bl	8005dac <_init>
 80041fc:	1b64      	subs	r4, r4, r5
 80041fe:	10a4      	asrs	r4, r4, #2
 8004200:	2600      	movs	r6, #0
 8004202:	42a6      	cmp	r6, r4
 8004204:	d105      	bne.n	8004212 <__libc_init_array+0x2e>
 8004206:	bd70      	pop	{r4, r5, r6, pc}
 8004208:	f855 3b04 	ldr.w	r3, [r5], #4
 800420c:	4798      	blx	r3
 800420e:	3601      	adds	r6, #1
 8004210:	e7ee      	b.n	80041f0 <__libc_init_array+0xc>
 8004212:	f855 3b04 	ldr.w	r3, [r5], #4
 8004216:	4798      	blx	r3
 8004218:	3601      	adds	r6, #1
 800421a:	e7f2      	b.n	8004202 <__libc_init_array+0x1e>
 800421c:	08006358 	.word	0x08006358
 8004220:	08006358 	.word	0x08006358
 8004224:	08006358 	.word	0x08006358
 8004228:	0800635c 	.word	0x0800635c

0800422c <malloc>:
 800422c:	4b02      	ldr	r3, [pc, #8]	; (8004238 <malloc+0xc>)
 800422e:	4601      	mov	r1, r0
 8004230:	6818      	ldr	r0, [r3, #0]
 8004232:	f000 b87f 	b.w	8004334 <_malloc_r>
 8004236:	bf00      	nop
 8004238:	20000028 	.word	0x20000028

0800423c <free>:
 800423c:	4b02      	ldr	r3, [pc, #8]	; (8004248 <free+0xc>)
 800423e:	4601      	mov	r1, r0
 8004240:	6818      	ldr	r0, [r3, #0]
 8004242:	f000 b80b 	b.w	800425c <_free_r>
 8004246:	bf00      	nop
 8004248:	20000028 	.word	0x20000028

0800424c <memset>:
 800424c:	4402      	add	r2, r0
 800424e:	4603      	mov	r3, r0
 8004250:	4293      	cmp	r3, r2
 8004252:	d100      	bne.n	8004256 <memset+0xa>
 8004254:	4770      	bx	lr
 8004256:	f803 1b01 	strb.w	r1, [r3], #1
 800425a:	e7f9      	b.n	8004250 <memset+0x4>

0800425c <_free_r>:
 800425c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800425e:	2900      	cmp	r1, #0
 8004260:	d044      	beq.n	80042ec <_free_r+0x90>
 8004262:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004266:	9001      	str	r0, [sp, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	f1a1 0404 	sub.w	r4, r1, #4
 800426e:	bfb8      	it	lt
 8004270:	18e4      	addlt	r4, r4, r3
 8004272:	f000 feb9 	bl	8004fe8 <__malloc_lock>
 8004276:	4a1e      	ldr	r2, [pc, #120]	; (80042f0 <_free_r+0x94>)
 8004278:	9801      	ldr	r0, [sp, #4]
 800427a:	6813      	ldr	r3, [r2, #0]
 800427c:	b933      	cbnz	r3, 800428c <_free_r+0x30>
 800427e:	6063      	str	r3, [r4, #4]
 8004280:	6014      	str	r4, [r2, #0]
 8004282:	b003      	add	sp, #12
 8004284:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004288:	f000 beb4 	b.w	8004ff4 <__malloc_unlock>
 800428c:	42a3      	cmp	r3, r4
 800428e:	d908      	bls.n	80042a2 <_free_r+0x46>
 8004290:	6825      	ldr	r5, [r4, #0]
 8004292:	1961      	adds	r1, r4, r5
 8004294:	428b      	cmp	r3, r1
 8004296:	bf01      	itttt	eq
 8004298:	6819      	ldreq	r1, [r3, #0]
 800429a:	685b      	ldreq	r3, [r3, #4]
 800429c:	1949      	addeq	r1, r1, r5
 800429e:	6021      	streq	r1, [r4, #0]
 80042a0:	e7ed      	b.n	800427e <_free_r+0x22>
 80042a2:	461a      	mov	r2, r3
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	b10b      	cbz	r3, 80042ac <_free_r+0x50>
 80042a8:	42a3      	cmp	r3, r4
 80042aa:	d9fa      	bls.n	80042a2 <_free_r+0x46>
 80042ac:	6811      	ldr	r1, [r2, #0]
 80042ae:	1855      	adds	r5, r2, r1
 80042b0:	42a5      	cmp	r5, r4
 80042b2:	d10b      	bne.n	80042cc <_free_r+0x70>
 80042b4:	6824      	ldr	r4, [r4, #0]
 80042b6:	4421      	add	r1, r4
 80042b8:	1854      	adds	r4, r2, r1
 80042ba:	42a3      	cmp	r3, r4
 80042bc:	6011      	str	r1, [r2, #0]
 80042be:	d1e0      	bne.n	8004282 <_free_r+0x26>
 80042c0:	681c      	ldr	r4, [r3, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	6053      	str	r3, [r2, #4]
 80042c6:	4421      	add	r1, r4
 80042c8:	6011      	str	r1, [r2, #0]
 80042ca:	e7da      	b.n	8004282 <_free_r+0x26>
 80042cc:	d902      	bls.n	80042d4 <_free_r+0x78>
 80042ce:	230c      	movs	r3, #12
 80042d0:	6003      	str	r3, [r0, #0]
 80042d2:	e7d6      	b.n	8004282 <_free_r+0x26>
 80042d4:	6825      	ldr	r5, [r4, #0]
 80042d6:	1961      	adds	r1, r4, r5
 80042d8:	428b      	cmp	r3, r1
 80042da:	bf04      	itt	eq
 80042dc:	6819      	ldreq	r1, [r3, #0]
 80042de:	685b      	ldreq	r3, [r3, #4]
 80042e0:	6063      	str	r3, [r4, #4]
 80042e2:	bf04      	itt	eq
 80042e4:	1949      	addeq	r1, r1, r5
 80042e6:	6021      	streq	r1, [r4, #0]
 80042e8:	6054      	str	r4, [r2, #4]
 80042ea:	e7ca      	b.n	8004282 <_free_r+0x26>
 80042ec:	b003      	add	sp, #12
 80042ee:	bd30      	pop	{r4, r5, pc}
 80042f0:	20000304 	.word	0x20000304

080042f4 <sbrk_aligned>:
 80042f4:	b570      	push	{r4, r5, r6, lr}
 80042f6:	4e0e      	ldr	r6, [pc, #56]	; (8004330 <sbrk_aligned+0x3c>)
 80042f8:	460c      	mov	r4, r1
 80042fa:	6831      	ldr	r1, [r6, #0]
 80042fc:	4605      	mov	r5, r0
 80042fe:	b911      	cbnz	r1, 8004306 <sbrk_aligned+0x12>
 8004300:	f000 fb7a 	bl	80049f8 <_sbrk_r>
 8004304:	6030      	str	r0, [r6, #0]
 8004306:	4621      	mov	r1, r4
 8004308:	4628      	mov	r0, r5
 800430a:	f000 fb75 	bl	80049f8 <_sbrk_r>
 800430e:	1c43      	adds	r3, r0, #1
 8004310:	d00a      	beq.n	8004328 <sbrk_aligned+0x34>
 8004312:	1cc4      	adds	r4, r0, #3
 8004314:	f024 0403 	bic.w	r4, r4, #3
 8004318:	42a0      	cmp	r0, r4
 800431a:	d007      	beq.n	800432c <sbrk_aligned+0x38>
 800431c:	1a21      	subs	r1, r4, r0
 800431e:	4628      	mov	r0, r5
 8004320:	f000 fb6a 	bl	80049f8 <_sbrk_r>
 8004324:	3001      	adds	r0, #1
 8004326:	d101      	bne.n	800432c <sbrk_aligned+0x38>
 8004328:	f04f 34ff 	mov.w	r4, #4294967295
 800432c:	4620      	mov	r0, r4
 800432e:	bd70      	pop	{r4, r5, r6, pc}
 8004330:	20000308 	.word	0x20000308

08004334 <_malloc_r>:
 8004334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004338:	1ccd      	adds	r5, r1, #3
 800433a:	f025 0503 	bic.w	r5, r5, #3
 800433e:	3508      	adds	r5, #8
 8004340:	2d0c      	cmp	r5, #12
 8004342:	bf38      	it	cc
 8004344:	250c      	movcc	r5, #12
 8004346:	2d00      	cmp	r5, #0
 8004348:	4607      	mov	r7, r0
 800434a:	db01      	blt.n	8004350 <_malloc_r+0x1c>
 800434c:	42a9      	cmp	r1, r5
 800434e:	d905      	bls.n	800435c <_malloc_r+0x28>
 8004350:	230c      	movs	r3, #12
 8004352:	603b      	str	r3, [r7, #0]
 8004354:	2600      	movs	r6, #0
 8004356:	4630      	mov	r0, r6
 8004358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800435c:	4e2e      	ldr	r6, [pc, #184]	; (8004418 <_malloc_r+0xe4>)
 800435e:	f000 fe43 	bl	8004fe8 <__malloc_lock>
 8004362:	6833      	ldr	r3, [r6, #0]
 8004364:	461c      	mov	r4, r3
 8004366:	bb34      	cbnz	r4, 80043b6 <_malloc_r+0x82>
 8004368:	4629      	mov	r1, r5
 800436a:	4638      	mov	r0, r7
 800436c:	f7ff ffc2 	bl	80042f4 <sbrk_aligned>
 8004370:	1c43      	adds	r3, r0, #1
 8004372:	4604      	mov	r4, r0
 8004374:	d14d      	bne.n	8004412 <_malloc_r+0xde>
 8004376:	6834      	ldr	r4, [r6, #0]
 8004378:	4626      	mov	r6, r4
 800437a:	2e00      	cmp	r6, #0
 800437c:	d140      	bne.n	8004400 <_malloc_r+0xcc>
 800437e:	6823      	ldr	r3, [r4, #0]
 8004380:	4631      	mov	r1, r6
 8004382:	4638      	mov	r0, r7
 8004384:	eb04 0803 	add.w	r8, r4, r3
 8004388:	f000 fb36 	bl	80049f8 <_sbrk_r>
 800438c:	4580      	cmp	r8, r0
 800438e:	d13a      	bne.n	8004406 <_malloc_r+0xd2>
 8004390:	6821      	ldr	r1, [r4, #0]
 8004392:	3503      	adds	r5, #3
 8004394:	1a6d      	subs	r5, r5, r1
 8004396:	f025 0503 	bic.w	r5, r5, #3
 800439a:	3508      	adds	r5, #8
 800439c:	2d0c      	cmp	r5, #12
 800439e:	bf38      	it	cc
 80043a0:	250c      	movcc	r5, #12
 80043a2:	4629      	mov	r1, r5
 80043a4:	4638      	mov	r0, r7
 80043a6:	f7ff ffa5 	bl	80042f4 <sbrk_aligned>
 80043aa:	3001      	adds	r0, #1
 80043ac:	d02b      	beq.n	8004406 <_malloc_r+0xd2>
 80043ae:	6823      	ldr	r3, [r4, #0]
 80043b0:	442b      	add	r3, r5
 80043b2:	6023      	str	r3, [r4, #0]
 80043b4:	e00e      	b.n	80043d4 <_malloc_r+0xa0>
 80043b6:	6822      	ldr	r2, [r4, #0]
 80043b8:	1b52      	subs	r2, r2, r5
 80043ba:	d41e      	bmi.n	80043fa <_malloc_r+0xc6>
 80043bc:	2a0b      	cmp	r2, #11
 80043be:	d916      	bls.n	80043ee <_malloc_r+0xba>
 80043c0:	1961      	adds	r1, r4, r5
 80043c2:	42a3      	cmp	r3, r4
 80043c4:	6025      	str	r5, [r4, #0]
 80043c6:	bf18      	it	ne
 80043c8:	6059      	strne	r1, [r3, #4]
 80043ca:	6863      	ldr	r3, [r4, #4]
 80043cc:	bf08      	it	eq
 80043ce:	6031      	streq	r1, [r6, #0]
 80043d0:	5162      	str	r2, [r4, r5]
 80043d2:	604b      	str	r3, [r1, #4]
 80043d4:	4638      	mov	r0, r7
 80043d6:	f104 060b 	add.w	r6, r4, #11
 80043da:	f000 fe0b 	bl	8004ff4 <__malloc_unlock>
 80043de:	f026 0607 	bic.w	r6, r6, #7
 80043e2:	1d23      	adds	r3, r4, #4
 80043e4:	1af2      	subs	r2, r6, r3
 80043e6:	d0b6      	beq.n	8004356 <_malloc_r+0x22>
 80043e8:	1b9b      	subs	r3, r3, r6
 80043ea:	50a3      	str	r3, [r4, r2]
 80043ec:	e7b3      	b.n	8004356 <_malloc_r+0x22>
 80043ee:	6862      	ldr	r2, [r4, #4]
 80043f0:	42a3      	cmp	r3, r4
 80043f2:	bf0c      	ite	eq
 80043f4:	6032      	streq	r2, [r6, #0]
 80043f6:	605a      	strne	r2, [r3, #4]
 80043f8:	e7ec      	b.n	80043d4 <_malloc_r+0xa0>
 80043fa:	4623      	mov	r3, r4
 80043fc:	6864      	ldr	r4, [r4, #4]
 80043fe:	e7b2      	b.n	8004366 <_malloc_r+0x32>
 8004400:	4634      	mov	r4, r6
 8004402:	6876      	ldr	r6, [r6, #4]
 8004404:	e7b9      	b.n	800437a <_malloc_r+0x46>
 8004406:	230c      	movs	r3, #12
 8004408:	603b      	str	r3, [r7, #0]
 800440a:	4638      	mov	r0, r7
 800440c:	f000 fdf2 	bl	8004ff4 <__malloc_unlock>
 8004410:	e7a1      	b.n	8004356 <_malloc_r+0x22>
 8004412:	6025      	str	r5, [r4, #0]
 8004414:	e7de      	b.n	80043d4 <_malloc_r+0xa0>
 8004416:	bf00      	nop
 8004418:	20000304 	.word	0x20000304

0800441c <__sfputc_r>:
 800441c:	6893      	ldr	r3, [r2, #8]
 800441e:	3b01      	subs	r3, #1
 8004420:	2b00      	cmp	r3, #0
 8004422:	b410      	push	{r4}
 8004424:	6093      	str	r3, [r2, #8]
 8004426:	da08      	bge.n	800443a <__sfputc_r+0x1e>
 8004428:	6994      	ldr	r4, [r2, #24]
 800442a:	42a3      	cmp	r3, r4
 800442c:	db01      	blt.n	8004432 <__sfputc_r+0x16>
 800442e:	290a      	cmp	r1, #10
 8004430:	d103      	bne.n	800443a <__sfputc_r+0x1e>
 8004432:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004436:	f000 baef 	b.w	8004a18 <__swbuf_r>
 800443a:	6813      	ldr	r3, [r2, #0]
 800443c:	1c58      	adds	r0, r3, #1
 800443e:	6010      	str	r0, [r2, #0]
 8004440:	7019      	strb	r1, [r3, #0]
 8004442:	4608      	mov	r0, r1
 8004444:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004448:	4770      	bx	lr

0800444a <__sfputs_r>:
 800444a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800444c:	4606      	mov	r6, r0
 800444e:	460f      	mov	r7, r1
 8004450:	4614      	mov	r4, r2
 8004452:	18d5      	adds	r5, r2, r3
 8004454:	42ac      	cmp	r4, r5
 8004456:	d101      	bne.n	800445c <__sfputs_r+0x12>
 8004458:	2000      	movs	r0, #0
 800445a:	e007      	b.n	800446c <__sfputs_r+0x22>
 800445c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004460:	463a      	mov	r2, r7
 8004462:	4630      	mov	r0, r6
 8004464:	f7ff ffda 	bl	800441c <__sfputc_r>
 8004468:	1c43      	adds	r3, r0, #1
 800446a:	d1f3      	bne.n	8004454 <__sfputs_r+0xa>
 800446c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004470 <_vfiprintf_r>:
 8004470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004474:	460d      	mov	r5, r1
 8004476:	b09d      	sub	sp, #116	; 0x74
 8004478:	4614      	mov	r4, r2
 800447a:	4698      	mov	r8, r3
 800447c:	4606      	mov	r6, r0
 800447e:	b118      	cbz	r0, 8004488 <_vfiprintf_r+0x18>
 8004480:	6983      	ldr	r3, [r0, #24]
 8004482:	b90b      	cbnz	r3, 8004488 <_vfiprintf_r+0x18>
 8004484:	f000 fcaa 	bl	8004ddc <__sinit>
 8004488:	4b89      	ldr	r3, [pc, #548]	; (80046b0 <_vfiprintf_r+0x240>)
 800448a:	429d      	cmp	r5, r3
 800448c:	d11b      	bne.n	80044c6 <_vfiprintf_r+0x56>
 800448e:	6875      	ldr	r5, [r6, #4]
 8004490:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004492:	07d9      	lsls	r1, r3, #31
 8004494:	d405      	bmi.n	80044a2 <_vfiprintf_r+0x32>
 8004496:	89ab      	ldrh	r3, [r5, #12]
 8004498:	059a      	lsls	r2, r3, #22
 800449a:	d402      	bmi.n	80044a2 <_vfiprintf_r+0x32>
 800449c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800449e:	f000 fd3b 	bl	8004f18 <__retarget_lock_acquire_recursive>
 80044a2:	89ab      	ldrh	r3, [r5, #12]
 80044a4:	071b      	lsls	r3, r3, #28
 80044a6:	d501      	bpl.n	80044ac <_vfiprintf_r+0x3c>
 80044a8:	692b      	ldr	r3, [r5, #16]
 80044aa:	b9eb      	cbnz	r3, 80044e8 <_vfiprintf_r+0x78>
 80044ac:	4629      	mov	r1, r5
 80044ae:	4630      	mov	r0, r6
 80044b0:	f000 fb04 	bl	8004abc <__swsetup_r>
 80044b4:	b1c0      	cbz	r0, 80044e8 <_vfiprintf_r+0x78>
 80044b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044b8:	07dc      	lsls	r4, r3, #31
 80044ba:	d50e      	bpl.n	80044da <_vfiprintf_r+0x6a>
 80044bc:	f04f 30ff 	mov.w	r0, #4294967295
 80044c0:	b01d      	add	sp, #116	; 0x74
 80044c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044c6:	4b7b      	ldr	r3, [pc, #492]	; (80046b4 <_vfiprintf_r+0x244>)
 80044c8:	429d      	cmp	r5, r3
 80044ca:	d101      	bne.n	80044d0 <_vfiprintf_r+0x60>
 80044cc:	68b5      	ldr	r5, [r6, #8]
 80044ce:	e7df      	b.n	8004490 <_vfiprintf_r+0x20>
 80044d0:	4b79      	ldr	r3, [pc, #484]	; (80046b8 <_vfiprintf_r+0x248>)
 80044d2:	429d      	cmp	r5, r3
 80044d4:	bf08      	it	eq
 80044d6:	68f5      	ldreq	r5, [r6, #12]
 80044d8:	e7da      	b.n	8004490 <_vfiprintf_r+0x20>
 80044da:	89ab      	ldrh	r3, [r5, #12]
 80044dc:	0598      	lsls	r0, r3, #22
 80044de:	d4ed      	bmi.n	80044bc <_vfiprintf_r+0x4c>
 80044e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044e2:	f000 fd1a 	bl	8004f1a <__retarget_lock_release_recursive>
 80044e6:	e7e9      	b.n	80044bc <_vfiprintf_r+0x4c>
 80044e8:	2300      	movs	r3, #0
 80044ea:	9309      	str	r3, [sp, #36]	; 0x24
 80044ec:	2320      	movs	r3, #32
 80044ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80044f6:	2330      	movs	r3, #48	; 0x30
 80044f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80046bc <_vfiprintf_r+0x24c>
 80044fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004500:	f04f 0901 	mov.w	r9, #1
 8004504:	4623      	mov	r3, r4
 8004506:	469a      	mov	sl, r3
 8004508:	f813 2b01 	ldrb.w	r2, [r3], #1
 800450c:	b10a      	cbz	r2, 8004512 <_vfiprintf_r+0xa2>
 800450e:	2a25      	cmp	r2, #37	; 0x25
 8004510:	d1f9      	bne.n	8004506 <_vfiprintf_r+0x96>
 8004512:	ebba 0b04 	subs.w	fp, sl, r4
 8004516:	d00b      	beq.n	8004530 <_vfiprintf_r+0xc0>
 8004518:	465b      	mov	r3, fp
 800451a:	4622      	mov	r2, r4
 800451c:	4629      	mov	r1, r5
 800451e:	4630      	mov	r0, r6
 8004520:	f7ff ff93 	bl	800444a <__sfputs_r>
 8004524:	3001      	adds	r0, #1
 8004526:	f000 80aa 	beq.w	800467e <_vfiprintf_r+0x20e>
 800452a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800452c:	445a      	add	r2, fp
 800452e:	9209      	str	r2, [sp, #36]	; 0x24
 8004530:	f89a 3000 	ldrb.w	r3, [sl]
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 80a2 	beq.w	800467e <_vfiprintf_r+0x20e>
 800453a:	2300      	movs	r3, #0
 800453c:	f04f 32ff 	mov.w	r2, #4294967295
 8004540:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004544:	f10a 0a01 	add.w	sl, sl, #1
 8004548:	9304      	str	r3, [sp, #16]
 800454a:	9307      	str	r3, [sp, #28]
 800454c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004550:	931a      	str	r3, [sp, #104]	; 0x68
 8004552:	4654      	mov	r4, sl
 8004554:	2205      	movs	r2, #5
 8004556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800455a:	4858      	ldr	r0, [pc, #352]	; (80046bc <_vfiprintf_r+0x24c>)
 800455c:	f7fb fe38 	bl	80001d0 <memchr>
 8004560:	9a04      	ldr	r2, [sp, #16]
 8004562:	b9d8      	cbnz	r0, 800459c <_vfiprintf_r+0x12c>
 8004564:	06d1      	lsls	r1, r2, #27
 8004566:	bf44      	itt	mi
 8004568:	2320      	movmi	r3, #32
 800456a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800456e:	0713      	lsls	r3, r2, #28
 8004570:	bf44      	itt	mi
 8004572:	232b      	movmi	r3, #43	; 0x2b
 8004574:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004578:	f89a 3000 	ldrb.w	r3, [sl]
 800457c:	2b2a      	cmp	r3, #42	; 0x2a
 800457e:	d015      	beq.n	80045ac <_vfiprintf_r+0x13c>
 8004580:	9a07      	ldr	r2, [sp, #28]
 8004582:	4654      	mov	r4, sl
 8004584:	2000      	movs	r0, #0
 8004586:	f04f 0c0a 	mov.w	ip, #10
 800458a:	4621      	mov	r1, r4
 800458c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004590:	3b30      	subs	r3, #48	; 0x30
 8004592:	2b09      	cmp	r3, #9
 8004594:	d94e      	bls.n	8004634 <_vfiprintf_r+0x1c4>
 8004596:	b1b0      	cbz	r0, 80045c6 <_vfiprintf_r+0x156>
 8004598:	9207      	str	r2, [sp, #28]
 800459a:	e014      	b.n	80045c6 <_vfiprintf_r+0x156>
 800459c:	eba0 0308 	sub.w	r3, r0, r8
 80045a0:	fa09 f303 	lsl.w	r3, r9, r3
 80045a4:	4313      	orrs	r3, r2
 80045a6:	9304      	str	r3, [sp, #16]
 80045a8:	46a2      	mov	sl, r4
 80045aa:	e7d2      	b.n	8004552 <_vfiprintf_r+0xe2>
 80045ac:	9b03      	ldr	r3, [sp, #12]
 80045ae:	1d19      	adds	r1, r3, #4
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	9103      	str	r1, [sp, #12]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	bfbb      	ittet	lt
 80045b8:	425b      	neglt	r3, r3
 80045ba:	f042 0202 	orrlt.w	r2, r2, #2
 80045be:	9307      	strge	r3, [sp, #28]
 80045c0:	9307      	strlt	r3, [sp, #28]
 80045c2:	bfb8      	it	lt
 80045c4:	9204      	strlt	r2, [sp, #16]
 80045c6:	7823      	ldrb	r3, [r4, #0]
 80045c8:	2b2e      	cmp	r3, #46	; 0x2e
 80045ca:	d10c      	bne.n	80045e6 <_vfiprintf_r+0x176>
 80045cc:	7863      	ldrb	r3, [r4, #1]
 80045ce:	2b2a      	cmp	r3, #42	; 0x2a
 80045d0:	d135      	bne.n	800463e <_vfiprintf_r+0x1ce>
 80045d2:	9b03      	ldr	r3, [sp, #12]
 80045d4:	1d1a      	adds	r2, r3, #4
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	9203      	str	r2, [sp, #12]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	bfb8      	it	lt
 80045de:	f04f 33ff 	movlt.w	r3, #4294967295
 80045e2:	3402      	adds	r4, #2
 80045e4:	9305      	str	r3, [sp, #20]
 80045e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80046cc <_vfiprintf_r+0x25c>
 80045ea:	7821      	ldrb	r1, [r4, #0]
 80045ec:	2203      	movs	r2, #3
 80045ee:	4650      	mov	r0, sl
 80045f0:	f7fb fdee 	bl	80001d0 <memchr>
 80045f4:	b140      	cbz	r0, 8004608 <_vfiprintf_r+0x198>
 80045f6:	2340      	movs	r3, #64	; 0x40
 80045f8:	eba0 000a 	sub.w	r0, r0, sl
 80045fc:	fa03 f000 	lsl.w	r0, r3, r0
 8004600:	9b04      	ldr	r3, [sp, #16]
 8004602:	4303      	orrs	r3, r0
 8004604:	3401      	adds	r4, #1
 8004606:	9304      	str	r3, [sp, #16]
 8004608:	f814 1b01 	ldrb.w	r1, [r4], #1
 800460c:	482c      	ldr	r0, [pc, #176]	; (80046c0 <_vfiprintf_r+0x250>)
 800460e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004612:	2206      	movs	r2, #6
 8004614:	f7fb fddc 	bl	80001d0 <memchr>
 8004618:	2800      	cmp	r0, #0
 800461a:	d03f      	beq.n	800469c <_vfiprintf_r+0x22c>
 800461c:	4b29      	ldr	r3, [pc, #164]	; (80046c4 <_vfiprintf_r+0x254>)
 800461e:	bb1b      	cbnz	r3, 8004668 <_vfiprintf_r+0x1f8>
 8004620:	9b03      	ldr	r3, [sp, #12]
 8004622:	3307      	adds	r3, #7
 8004624:	f023 0307 	bic.w	r3, r3, #7
 8004628:	3308      	adds	r3, #8
 800462a:	9303      	str	r3, [sp, #12]
 800462c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800462e:	443b      	add	r3, r7
 8004630:	9309      	str	r3, [sp, #36]	; 0x24
 8004632:	e767      	b.n	8004504 <_vfiprintf_r+0x94>
 8004634:	fb0c 3202 	mla	r2, ip, r2, r3
 8004638:	460c      	mov	r4, r1
 800463a:	2001      	movs	r0, #1
 800463c:	e7a5      	b.n	800458a <_vfiprintf_r+0x11a>
 800463e:	2300      	movs	r3, #0
 8004640:	3401      	adds	r4, #1
 8004642:	9305      	str	r3, [sp, #20]
 8004644:	4619      	mov	r1, r3
 8004646:	f04f 0c0a 	mov.w	ip, #10
 800464a:	4620      	mov	r0, r4
 800464c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004650:	3a30      	subs	r2, #48	; 0x30
 8004652:	2a09      	cmp	r2, #9
 8004654:	d903      	bls.n	800465e <_vfiprintf_r+0x1ee>
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0c5      	beq.n	80045e6 <_vfiprintf_r+0x176>
 800465a:	9105      	str	r1, [sp, #20]
 800465c:	e7c3      	b.n	80045e6 <_vfiprintf_r+0x176>
 800465e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004662:	4604      	mov	r4, r0
 8004664:	2301      	movs	r3, #1
 8004666:	e7f0      	b.n	800464a <_vfiprintf_r+0x1da>
 8004668:	ab03      	add	r3, sp, #12
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	462a      	mov	r2, r5
 800466e:	4b16      	ldr	r3, [pc, #88]	; (80046c8 <_vfiprintf_r+0x258>)
 8004670:	a904      	add	r1, sp, #16
 8004672:	4630      	mov	r0, r6
 8004674:	f3af 8000 	nop.w
 8004678:	4607      	mov	r7, r0
 800467a:	1c78      	adds	r0, r7, #1
 800467c:	d1d6      	bne.n	800462c <_vfiprintf_r+0x1bc>
 800467e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004680:	07d9      	lsls	r1, r3, #31
 8004682:	d405      	bmi.n	8004690 <_vfiprintf_r+0x220>
 8004684:	89ab      	ldrh	r3, [r5, #12]
 8004686:	059a      	lsls	r2, r3, #22
 8004688:	d402      	bmi.n	8004690 <_vfiprintf_r+0x220>
 800468a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800468c:	f000 fc45 	bl	8004f1a <__retarget_lock_release_recursive>
 8004690:	89ab      	ldrh	r3, [r5, #12]
 8004692:	065b      	lsls	r3, r3, #25
 8004694:	f53f af12 	bmi.w	80044bc <_vfiprintf_r+0x4c>
 8004698:	9809      	ldr	r0, [sp, #36]	; 0x24
 800469a:	e711      	b.n	80044c0 <_vfiprintf_r+0x50>
 800469c:	ab03      	add	r3, sp, #12
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	462a      	mov	r2, r5
 80046a2:	4b09      	ldr	r3, [pc, #36]	; (80046c8 <_vfiprintf_r+0x258>)
 80046a4:	a904      	add	r1, sp, #16
 80046a6:	4630      	mov	r0, r6
 80046a8:	f000 f880 	bl	80047ac <_printf_i>
 80046ac:	e7e4      	b.n	8004678 <_vfiprintf_r+0x208>
 80046ae:	bf00      	nop
 80046b0:	08005f48 	.word	0x08005f48
 80046b4:	08005f68 	.word	0x08005f68
 80046b8:	08005f28 	.word	0x08005f28
 80046bc:	08005ef4 	.word	0x08005ef4
 80046c0:	08005efe 	.word	0x08005efe
 80046c4:	00000000 	.word	0x00000000
 80046c8:	0800444b 	.word	0x0800444b
 80046cc:	08005efa 	.word	0x08005efa

080046d0 <_printf_common>:
 80046d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046d4:	4616      	mov	r6, r2
 80046d6:	4699      	mov	r9, r3
 80046d8:	688a      	ldr	r2, [r1, #8]
 80046da:	690b      	ldr	r3, [r1, #16]
 80046dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046e0:	4293      	cmp	r3, r2
 80046e2:	bfb8      	it	lt
 80046e4:	4613      	movlt	r3, r2
 80046e6:	6033      	str	r3, [r6, #0]
 80046e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046ec:	4607      	mov	r7, r0
 80046ee:	460c      	mov	r4, r1
 80046f0:	b10a      	cbz	r2, 80046f6 <_printf_common+0x26>
 80046f2:	3301      	adds	r3, #1
 80046f4:	6033      	str	r3, [r6, #0]
 80046f6:	6823      	ldr	r3, [r4, #0]
 80046f8:	0699      	lsls	r1, r3, #26
 80046fa:	bf42      	ittt	mi
 80046fc:	6833      	ldrmi	r3, [r6, #0]
 80046fe:	3302      	addmi	r3, #2
 8004700:	6033      	strmi	r3, [r6, #0]
 8004702:	6825      	ldr	r5, [r4, #0]
 8004704:	f015 0506 	ands.w	r5, r5, #6
 8004708:	d106      	bne.n	8004718 <_printf_common+0x48>
 800470a:	f104 0a19 	add.w	sl, r4, #25
 800470e:	68e3      	ldr	r3, [r4, #12]
 8004710:	6832      	ldr	r2, [r6, #0]
 8004712:	1a9b      	subs	r3, r3, r2
 8004714:	42ab      	cmp	r3, r5
 8004716:	dc26      	bgt.n	8004766 <_printf_common+0x96>
 8004718:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800471c:	1e13      	subs	r3, r2, #0
 800471e:	6822      	ldr	r2, [r4, #0]
 8004720:	bf18      	it	ne
 8004722:	2301      	movne	r3, #1
 8004724:	0692      	lsls	r2, r2, #26
 8004726:	d42b      	bmi.n	8004780 <_printf_common+0xb0>
 8004728:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800472c:	4649      	mov	r1, r9
 800472e:	4638      	mov	r0, r7
 8004730:	47c0      	blx	r8
 8004732:	3001      	adds	r0, #1
 8004734:	d01e      	beq.n	8004774 <_printf_common+0xa4>
 8004736:	6823      	ldr	r3, [r4, #0]
 8004738:	68e5      	ldr	r5, [r4, #12]
 800473a:	6832      	ldr	r2, [r6, #0]
 800473c:	f003 0306 	and.w	r3, r3, #6
 8004740:	2b04      	cmp	r3, #4
 8004742:	bf08      	it	eq
 8004744:	1aad      	subeq	r5, r5, r2
 8004746:	68a3      	ldr	r3, [r4, #8]
 8004748:	6922      	ldr	r2, [r4, #16]
 800474a:	bf0c      	ite	eq
 800474c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004750:	2500      	movne	r5, #0
 8004752:	4293      	cmp	r3, r2
 8004754:	bfc4      	itt	gt
 8004756:	1a9b      	subgt	r3, r3, r2
 8004758:	18ed      	addgt	r5, r5, r3
 800475a:	2600      	movs	r6, #0
 800475c:	341a      	adds	r4, #26
 800475e:	42b5      	cmp	r5, r6
 8004760:	d11a      	bne.n	8004798 <_printf_common+0xc8>
 8004762:	2000      	movs	r0, #0
 8004764:	e008      	b.n	8004778 <_printf_common+0xa8>
 8004766:	2301      	movs	r3, #1
 8004768:	4652      	mov	r2, sl
 800476a:	4649      	mov	r1, r9
 800476c:	4638      	mov	r0, r7
 800476e:	47c0      	blx	r8
 8004770:	3001      	adds	r0, #1
 8004772:	d103      	bne.n	800477c <_printf_common+0xac>
 8004774:	f04f 30ff 	mov.w	r0, #4294967295
 8004778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800477c:	3501      	adds	r5, #1
 800477e:	e7c6      	b.n	800470e <_printf_common+0x3e>
 8004780:	18e1      	adds	r1, r4, r3
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	2030      	movs	r0, #48	; 0x30
 8004786:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800478a:	4422      	add	r2, r4
 800478c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004790:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004794:	3302      	adds	r3, #2
 8004796:	e7c7      	b.n	8004728 <_printf_common+0x58>
 8004798:	2301      	movs	r3, #1
 800479a:	4622      	mov	r2, r4
 800479c:	4649      	mov	r1, r9
 800479e:	4638      	mov	r0, r7
 80047a0:	47c0      	blx	r8
 80047a2:	3001      	adds	r0, #1
 80047a4:	d0e6      	beq.n	8004774 <_printf_common+0xa4>
 80047a6:	3601      	adds	r6, #1
 80047a8:	e7d9      	b.n	800475e <_printf_common+0x8e>
	...

080047ac <_printf_i>:
 80047ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047b0:	7e0f      	ldrb	r7, [r1, #24]
 80047b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80047b4:	2f78      	cmp	r7, #120	; 0x78
 80047b6:	4691      	mov	r9, r2
 80047b8:	4680      	mov	r8, r0
 80047ba:	460c      	mov	r4, r1
 80047bc:	469a      	mov	sl, r3
 80047be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80047c2:	d807      	bhi.n	80047d4 <_printf_i+0x28>
 80047c4:	2f62      	cmp	r7, #98	; 0x62
 80047c6:	d80a      	bhi.n	80047de <_printf_i+0x32>
 80047c8:	2f00      	cmp	r7, #0
 80047ca:	f000 80d8 	beq.w	800497e <_printf_i+0x1d2>
 80047ce:	2f58      	cmp	r7, #88	; 0x58
 80047d0:	f000 80a3 	beq.w	800491a <_printf_i+0x16e>
 80047d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80047dc:	e03a      	b.n	8004854 <_printf_i+0xa8>
 80047de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80047e2:	2b15      	cmp	r3, #21
 80047e4:	d8f6      	bhi.n	80047d4 <_printf_i+0x28>
 80047e6:	a101      	add	r1, pc, #4	; (adr r1, 80047ec <_printf_i+0x40>)
 80047e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047ec:	08004845 	.word	0x08004845
 80047f0:	08004859 	.word	0x08004859
 80047f4:	080047d5 	.word	0x080047d5
 80047f8:	080047d5 	.word	0x080047d5
 80047fc:	080047d5 	.word	0x080047d5
 8004800:	080047d5 	.word	0x080047d5
 8004804:	08004859 	.word	0x08004859
 8004808:	080047d5 	.word	0x080047d5
 800480c:	080047d5 	.word	0x080047d5
 8004810:	080047d5 	.word	0x080047d5
 8004814:	080047d5 	.word	0x080047d5
 8004818:	08004965 	.word	0x08004965
 800481c:	08004889 	.word	0x08004889
 8004820:	08004947 	.word	0x08004947
 8004824:	080047d5 	.word	0x080047d5
 8004828:	080047d5 	.word	0x080047d5
 800482c:	08004987 	.word	0x08004987
 8004830:	080047d5 	.word	0x080047d5
 8004834:	08004889 	.word	0x08004889
 8004838:	080047d5 	.word	0x080047d5
 800483c:	080047d5 	.word	0x080047d5
 8004840:	0800494f 	.word	0x0800494f
 8004844:	682b      	ldr	r3, [r5, #0]
 8004846:	1d1a      	adds	r2, r3, #4
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	602a      	str	r2, [r5, #0]
 800484c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004850:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004854:	2301      	movs	r3, #1
 8004856:	e0a3      	b.n	80049a0 <_printf_i+0x1f4>
 8004858:	6820      	ldr	r0, [r4, #0]
 800485a:	6829      	ldr	r1, [r5, #0]
 800485c:	0606      	lsls	r6, r0, #24
 800485e:	f101 0304 	add.w	r3, r1, #4
 8004862:	d50a      	bpl.n	800487a <_printf_i+0xce>
 8004864:	680e      	ldr	r6, [r1, #0]
 8004866:	602b      	str	r3, [r5, #0]
 8004868:	2e00      	cmp	r6, #0
 800486a:	da03      	bge.n	8004874 <_printf_i+0xc8>
 800486c:	232d      	movs	r3, #45	; 0x2d
 800486e:	4276      	negs	r6, r6
 8004870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004874:	485e      	ldr	r0, [pc, #376]	; (80049f0 <_printf_i+0x244>)
 8004876:	230a      	movs	r3, #10
 8004878:	e019      	b.n	80048ae <_printf_i+0x102>
 800487a:	680e      	ldr	r6, [r1, #0]
 800487c:	602b      	str	r3, [r5, #0]
 800487e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004882:	bf18      	it	ne
 8004884:	b236      	sxthne	r6, r6
 8004886:	e7ef      	b.n	8004868 <_printf_i+0xbc>
 8004888:	682b      	ldr	r3, [r5, #0]
 800488a:	6820      	ldr	r0, [r4, #0]
 800488c:	1d19      	adds	r1, r3, #4
 800488e:	6029      	str	r1, [r5, #0]
 8004890:	0601      	lsls	r1, r0, #24
 8004892:	d501      	bpl.n	8004898 <_printf_i+0xec>
 8004894:	681e      	ldr	r6, [r3, #0]
 8004896:	e002      	b.n	800489e <_printf_i+0xf2>
 8004898:	0646      	lsls	r6, r0, #25
 800489a:	d5fb      	bpl.n	8004894 <_printf_i+0xe8>
 800489c:	881e      	ldrh	r6, [r3, #0]
 800489e:	4854      	ldr	r0, [pc, #336]	; (80049f0 <_printf_i+0x244>)
 80048a0:	2f6f      	cmp	r7, #111	; 0x6f
 80048a2:	bf0c      	ite	eq
 80048a4:	2308      	moveq	r3, #8
 80048a6:	230a      	movne	r3, #10
 80048a8:	2100      	movs	r1, #0
 80048aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048ae:	6865      	ldr	r5, [r4, #4]
 80048b0:	60a5      	str	r5, [r4, #8]
 80048b2:	2d00      	cmp	r5, #0
 80048b4:	bfa2      	ittt	ge
 80048b6:	6821      	ldrge	r1, [r4, #0]
 80048b8:	f021 0104 	bicge.w	r1, r1, #4
 80048bc:	6021      	strge	r1, [r4, #0]
 80048be:	b90e      	cbnz	r6, 80048c4 <_printf_i+0x118>
 80048c0:	2d00      	cmp	r5, #0
 80048c2:	d04d      	beq.n	8004960 <_printf_i+0x1b4>
 80048c4:	4615      	mov	r5, r2
 80048c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80048ca:	fb03 6711 	mls	r7, r3, r1, r6
 80048ce:	5dc7      	ldrb	r7, [r0, r7]
 80048d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80048d4:	4637      	mov	r7, r6
 80048d6:	42bb      	cmp	r3, r7
 80048d8:	460e      	mov	r6, r1
 80048da:	d9f4      	bls.n	80048c6 <_printf_i+0x11a>
 80048dc:	2b08      	cmp	r3, #8
 80048de:	d10b      	bne.n	80048f8 <_printf_i+0x14c>
 80048e0:	6823      	ldr	r3, [r4, #0]
 80048e2:	07de      	lsls	r6, r3, #31
 80048e4:	d508      	bpl.n	80048f8 <_printf_i+0x14c>
 80048e6:	6923      	ldr	r3, [r4, #16]
 80048e8:	6861      	ldr	r1, [r4, #4]
 80048ea:	4299      	cmp	r1, r3
 80048ec:	bfde      	ittt	le
 80048ee:	2330      	movle	r3, #48	; 0x30
 80048f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80048f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80048f8:	1b52      	subs	r2, r2, r5
 80048fa:	6122      	str	r2, [r4, #16]
 80048fc:	f8cd a000 	str.w	sl, [sp]
 8004900:	464b      	mov	r3, r9
 8004902:	aa03      	add	r2, sp, #12
 8004904:	4621      	mov	r1, r4
 8004906:	4640      	mov	r0, r8
 8004908:	f7ff fee2 	bl	80046d0 <_printf_common>
 800490c:	3001      	adds	r0, #1
 800490e:	d14c      	bne.n	80049aa <_printf_i+0x1fe>
 8004910:	f04f 30ff 	mov.w	r0, #4294967295
 8004914:	b004      	add	sp, #16
 8004916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800491a:	4835      	ldr	r0, [pc, #212]	; (80049f0 <_printf_i+0x244>)
 800491c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004920:	6829      	ldr	r1, [r5, #0]
 8004922:	6823      	ldr	r3, [r4, #0]
 8004924:	f851 6b04 	ldr.w	r6, [r1], #4
 8004928:	6029      	str	r1, [r5, #0]
 800492a:	061d      	lsls	r5, r3, #24
 800492c:	d514      	bpl.n	8004958 <_printf_i+0x1ac>
 800492e:	07df      	lsls	r7, r3, #31
 8004930:	bf44      	itt	mi
 8004932:	f043 0320 	orrmi.w	r3, r3, #32
 8004936:	6023      	strmi	r3, [r4, #0]
 8004938:	b91e      	cbnz	r6, 8004942 <_printf_i+0x196>
 800493a:	6823      	ldr	r3, [r4, #0]
 800493c:	f023 0320 	bic.w	r3, r3, #32
 8004940:	6023      	str	r3, [r4, #0]
 8004942:	2310      	movs	r3, #16
 8004944:	e7b0      	b.n	80048a8 <_printf_i+0xfc>
 8004946:	6823      	ldr	r3, [r4, #0]
 8004948:	f043 0320 	orr.w	r3, r3, #32
 800494c:	6023      	str	r3, [r4, #0]
 800494e:	2378      	movs	r3, #120	; 0x78
 8004950:	4828      	ldr	r0, [pc, #160]	; (80049f4 <_printf_i+0x248>)
 8004952:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004956:	e7e3      	b.n	8004920 <_printf_i+0x174>
 8004958:	0659      	lsls	r1, r3, #25
 800495a:	bf48      	it	mi
 800495c:	b2b6      	uxthmi	r6, r6
 800495e:	e7e6      	b.n	800492e <_printf_i+0x182>
 8004960:	4615      	mov	r5, r2
 8004962:	e7bb      	b.n	80048dc <_printf_i+0x130>
 8004964:	682b      	ldr	r3, [r5, #0]
 8004966:	6826      	ldr	r6, [r4, #0]
 8004968:	6961      	ldr	r1, [r4, #20]
 800496a:	1d18      	adds	r0, r3, #4
 800496c:	6028      	str	r0, [r5, #0]
 800496e:	0635      	lsls	r5, r6, #24
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	d501      	bpl.n	8004978 <_printf_i+0x1cc>
 8004974:	6019      	str	r1, [r3, #0]
 8004976:	e002      	b.n	800497e <_printf_i+0x1d2>
 8004978:	0670      	lsls	r0, r6, #25
 800497a:	d5fb      	bpl.n	8004974 <_printf_i+0x1c8>
 800497c:	8019      	strh	r1, [r3, #0]
 800497e:	2300      	movs	r3, #0
 8004980:	6123      	str	r3, [r4, #16]
 8004982:	4615      	mov	r5, r2
 8004984:	e7ba      	b.n	80048fc <_printf_i+0x150>
 8004986:	682b      	ldr	r3, [r5, #0]
 8004988:	1d1a      	adds	r2, r3, #4
 800498a:	602a      	str	r2, [r5, #0]
 800498c:	681d      	ldr	r5, [r3, #0]
 800498e:	6862      	ldr	r2, [r4, #4]
 8004990:	2100      	movs	r1, #0
 8004992:	4628      	mov	r0, r5
 8004994:	f7fb fc1c 	bl	80001d0 <memchr>
 8004998:	b108      	cbz	r0, 800499e <_printf_i+0x1f2>
 800499a:	1b40      	subs	r0, r0, r5
 800499c:	6060      	str	r0, [r4, #4]
 800499e:	6863      	ldr	r3, [r4, #4]
 80049a0:	6123      	str	r3, [r4, #16]
 80049a2:	2300      	movs	r3, #0
 80049a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049a8:	e7a8      	b.n	80048fc <_printf_i+0x150>
 80049aa:	6923      	ldr	r3, [r4, #16]
 80049ac:	462a      	mov	r2, r5
 80049ae:	4649      	mov	r1, r9
 80049b0:	4640      	mov	r0, r8
 80049b2:	47d0      	blx	sl
 80049b4:	3001      	adds	r0, #1
 80049b6:	d0ab      	beq.n	8004910 <_printf_i+0x164>
 80049b8:	6823      	ldr	r3, [r4, #0]
 80049ba:	079b      	lsls	r3, r3, #30
 80049bc:	d413      	bmi.n	80049e6 <_printf_i+0x23a>
 80049be:	68e0      	ldr	r0, [r4, #12]
 80049c0:	9b03      	ldr	r3, [sp, #12]
 80049c2:	4298      	cmp	r0, r3
 80049c4:	bfb8      	it	lt
 80049c6:	4618      	movlt	r0, r3
 80049c8:	e7a4      	b.n	8004914 <_printf_i+0x168>
 80049ca:	2301      	movs	r3, #1
 80049cc:	4632      	mov	r2, r6
 80049ce:	4649      	mov	r1, r9
 80049d0:	4640      	mov	r0, r8
 80049d2:	47d0      	blx	sl
 80049d4:	3001      	adds	r0, #1
 80049d6:	d09b      	beq.n	8004910 <_printf_i+0x164>
 80049d8:	3501      	adds	r5, #1
 80049da:	68e3      	ldr	r3, [r4, #12]
 80049dc:	9903      	ldr	r1, [sp, #12]
 80049de:	1a5b      	subs	r3, r3, r1
 80049e0:	42ab      	cmp	r3, r5
 80049e2:	dcf2      	bgt.n	80049ca <_printf_i+0x21e>
 80049e4:	e7eb      	b.n	80049be <_printf_i+0x212>
 80049e6:	2500      	movs	r5, #0
 80049e8:	f104 0619 	add.w	r6, r4, #25
 80049ec:	e7f5      	b.n	80049da <_printf_i+0x22e>
 80049ee:	bf00      	nop
 80049f0:	08005f05 	.word	0x08005f05
 80049f4:	08005f16 	.word	0x08005f16

080049f8 <_sbrk_r>:
 80049f8:	b538      	push	{r3, r4, r5, lr}
 80049fa:	4d06      	ldr	r5, [pc, #24]	; (8004a14 <_sbrk_r+0x1c>)
 80049fc:	2300      	movs	r3, #0
 80049fe:	4604      	mov	r4, r0
 8004a00:	4608      	mov	r0, r1
 8004a02:	602b      	str	r3, [r5, #0]
 8004a04:	f7fd fb36 	bl	8002074 <_sbrk>
 8004a08:	1c43      	adds	r3, r0, #1
 8004a0a:	d102      	bne.n	8004a12 <_sbrk_r+0x1a>
 8004a0c:	682b      	ldr	r3, [r5, #0]
 8004a0e:	b103      	cbz	r3, 8004a12 <_sbrk_r+0x1a>
 8004a10:	6023      	str	r3, [r4, #0]
 8004a12:	bd38      	pop	{r3, r4, r5, pc}
 8004a14:	20000310 	.word	0x20000310

08004a18 <__swbuf_r>:
 8004a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a1a:	460e      	mov	r6, r1
 8004a1c:	4614      	mov	r4, r2
 8004a1e:	4605      	mov	r5, r0
 8004a20:	b118      	cbz	r0, 8004a2a <__swbuf_r+0x12>
 8004a22:	6983      	ldr	r3, [r0, #24]
 8004a24:	b90b      	cbnz	r3, 8004a2a <__swbuf_r+0x12>
 8004a26:	f000 f9d9 	bl	8004ddc <__sinit>
 8004a2a:	4b21      	ldr	r3, [pc, #132]	; (8004ab0 <__swbuf_r+0x98>)
 8004a2c:	429c      	cmp	r4, r3
 8004a2e:	d12b      	bne.n	8004a88 <__swbuf_r+0x70>
 8004a30:	686c      	ldr	r4, [r5, #4]
 8004a32:	69a3      	ldr	r3, [r4, #24]
 8004a34:	60a3      	str	r3, [r4, #8]
 8004a36:	89a3      	ldrh	r3, [r4, #12]
 8004a38:	071a      	lsls	r2, r3, #28
 8004a3a:	d52f      	bpl.n	8004a9c <__swbuf_r+0x84>
 8004a3c:	6923      	ldr	r3, [r4, #16]
 8004a3e:	b36b      	cbz	r3, 8004a9c <__swbuf_r+0x84>
 8004a40:	6923      	ldr	r3, [r4, #16]
 8004a42:	6820      	ldr	r0, [r4, #0]
 8004a44:	1ac0      	subs	r0, r0, r3
 8004a46:	6963      	ldr	r3, [r4, #20]
 8004a48:	b2f6      	uxtb	r6, r6
 8004a4a:	4283      	cmp	r3, r0
 8004a4c:	4637      	mov	r7, r6
 8004a4e:	dc04      	bgt.n	8004a5a <__swbuf_r+0x42>
 8004a50:	4621      	mov	r1, r4
 8004a52:	4628      	mov	r0, r5
 8004a54:	f000 f92e 	bl	8004cb4 <_fflush_r>
 8004a58:	bb30      	cbnz	r0, 8004aa8 <__swbuf_r+0x90>
 8004a5a:	68a3      	ldr	r3, [r4, #8]
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	60a3      	str	r3, [r4, #8]
 8004a60:	6823      	ldr	r3, [r4, #0]
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	6022      	str	r2, [r4, #0]
 8004a66:	701e      	strb	r6, [r3, #0]
 8004a68:	6963      	ldr	r3, [r4, #20]
 8004a6a:	3001      	adds	r0, #1
 8004a6c:	4283      	cmp	r3, r0
 8004a6e:	d004      	beq.n	8004a7a <__swbuf_r+0x62>
 8004a70:	89a3      	ldrh	r3, [r4, #12]
 8004a72:	07db      	lsls	r3, r3, #31
 8004a74:	d506      	bpl.n	8004a84 <__swbuf_r+0x6c>
 8004a76:	2e0a      	cmp	r6, #10
 8004a78:	d104      	bne.n	8004a84 <__swbuf_r+0x6c>
 8004a7a:	4621      	mov	r1, r4
 8004a7c:	4628      	mov	r0, r5
 8004a7e:	f000 f919 	bl	8004cb4 <_fflush_r>
 8004a82:	b988      	cbnz	r0, 8004aa8 <__swbuf_r+0x90>
 8004a84:	4638      	mov	r0, r7
 8004a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a88:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <__swbuf_r+0x9c>)
 8004a8a:	429c      	cmp	r4, r3
 8004a8c:	d101      	bne.n	8004a92 <__swbuf_r+0x7a>
 8004a8e:	68ac      	ldr	r4, [r5, #8]
 8004a90:	e7cf      	b.n	8004a32 <__swbuf_r+0x1a>
 8004a92:	4b09      	ldr	r3, [pc, #36]	; (8004ab8 <__swbuf_r+0xa0>)
 8004a94:	429c      	cmp	r4, r3
 8004a96:	bf08      	it	eq
 8004a98:	68ec      	ldreq	r4, [r5, #12]
 8004a9a:	e7ca      	b.n	8004a32 <__swbuf_r+0x1a>
 8004a9c:	4621      	mov	r1, r4
 8004a9e:	4628      	mov	r0, r5
 8004aa0:	f000 f80c 	bl	8004abc <__swsetup_r>
 8004aa4:	2800      	cmp	r0, #0
 8004aa6:	d0cb      	beq.n	8004a40 <__swbuf_r+0x28>
 8004aa8:	f04f 37ff 	mov.w	r7, #4294967295
 8004aac:	e7ea      	b.n	8004a84 <__swbuf_r+0x6c>
 8004aae:	bf00      	nop
 8004ab0:	08005f48 	.word	0x08005f48
 8004ab4:	08005f68 	.word	0x08005f68
 8004ab8:	08005f28 	.word	0x08005f28

08004abc <__swsetup_r>:
 8004abc:	4b32      	ldr	r3, [pc, #200]	; (8004b88 <__swsetup_r+0xcc>)
 8004abe:	b570      	push	{r4, r5, r6, lr}
 8004ac0:	681d      	ldr	r5, [r3, #0]
 8004ac2:	4606      	mov	r6, r0
 8004ac4:	460c      	mov	r4, r1
 8004ac6:	b125      	cbz	r5, 8004ad2 <__swsetup_r+0x16>
 8004ac8:	69ab      	ldr	r3, [r5, #24]
 8004aca:	b913      	cbnz	r3, 8004ad2 <__swsetup_r+0x16>
 8004acc:	4628      	mov	r0, r5
 8004ace:	f000 f985 	bl	8004ddc <__sinit>
 8004ad2:	4b2e      	ldr	r3, [pc, #184]	; (8004b8c <__swsetup_r+0xd0>)
 8004ad4:	429c      	cmp	r4, r3
 8004ad6:	d10f      	bne.n	8004af8 <__swsetup_r+0x3c>
 8004ad8:	686c      	ldr	r4, [r5, #4]
 8004ada:	89a3      	ldrh	r3, [r4, #12]
 8004adc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ae0:	0719      	lsls	r1, r3, #28
 8004ae2:	d42c      	bmi.n	8004b3e <__swsetup_r+0x82>
 8004ae4:	06dd      	lsls	r5, r3, #27
 8004ae6:	d411      	bmi.n	8004b0c <__swsetup_r+0x50>
 8004ae8:	2309      	movs	r3, #9
 8004aea:	6033      	str	r3, [r6, #0]
 8004aec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004af0:	81a3      	strh	r3, [r4, #12]
 8004af2:	f04f 30ff 	mov.w	r0, #4294967295
 8004af6:	e03e      	b.n	8004b76 <__swsetup_r+0xba>
 8004af8:	4b25      	ldr	r3, [pc, #148]	; (8004b90 <__swsetup_r+0xd4>)
 8004afa:	429c      	cmp	r4, r3
 8004afc:	d101      	bne.n	8004b02 <__swsetup_r+0x46>
 8004afe:	68ac      	ldr	r4, [r5, #8]
 8004b00:	e7eb      	b.n	8004ada <__swsetup_r+0x1e>
 8004b02:	4b24      	ldr	r3, [pc, #144]	; (8004b94 <__swsetup_r+0xd8>)
 8004b04:	429c      	cmp	r4, r3
 8004b06:	bf08      	it	eq
 8004b08:	68ec      	ldreq	r4, [r5, #12]
 8004b0a:	e7e6      	b.n	8004ada <__swsetup_r+0x1e>
 8004b0c:	0758      	lsls	r0, r3, #29
 8004b0e:	d512      	bpl.n	8004b36 <__swsetup_r+0x7a>
 8004b10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b12:	b141      	cbz	r1, 8004b26 <__swsetup_r+0x6a>
 8004b14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b18:	4299      	cmp	r1, r3
 8004b1a:	d002      	beq.n	8004b22 <__swsetup_r+0x66>
 8004b1c:	4630      	mov	r0, r6
 8004b1e:	f7ff fb9d 	bl	800425c <_free_r>
 8004b22:	2300      	movs	r3, #0
 8004b24:	6363      	str	r3, [r4, #52]	; 0x34
 8004b26:	89a3      	ldrh	r3, [r4, #12]
 8004b28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b2c:	81a3      	strh	r3, [r4, #12]
 8004b2e:	2300      	movs	r3, #0
 8004b30:	6063      	str	r3, [r4, #4]
 8004b32:	6923      	ldr	r3, [r4, #16]
 8004b34:	6023      	str	r3, [r4, #0]
 8004b36:	89a3      	ldrh	r3, [r4, #12]
 8004b38:	f043 0308 	orr.w	r3, r3, #8
 8004b3c:	81a3      	strh	r3, [r4, #12]
 8004b3e:	6923      	ldr	r3, [r4, #16]
 8004b40:	b94b      	cbnz	r3, 8004b56 <__swsetup_r+0x9a>
 8004b42:	89a3      	ldrh	r3, [r4, #12]
 8004b44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b4c:	d003      	beq.n	8004b56 <__swsetup_r+0x9a>
 8004b4e:	4621      	mov	r1, r4
 8004b50:	4630      	mov	r0, r6
 8004b52:	f000 fa09 	bl	8004f68 <__smakebuf_r>
 8004b56:	89a0      	ldrh	r0, [r4, #12]
 8004b58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b5c:	f010 0301 	ands.w	r3, r0, #1
 8004b60:	d00a      	beq.n	8004b78 <__swsetup_r+0xbc>
 8004b62:	2300      	movs	r3, #0
 8004b64:	60a3      	str	r3, [r4, #8]
 8004b66:	6963      	ldr	r3, [r4, #20]
 8004b68:	425b      	negs	r3, r3
 8004b6a:	61a3      	str	r3, [r4, #24]
 8004b6c:	6923      	ldr	r3, [r4, #16]
 8004b6e:	b943      	cbnz	r3, 8004b82 <__swsetup_r+0xc6>
 8004b70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b74:	d1ba      	bne.n	8004aec <__swsetup_r+0x30>
 8004b76:	bd70      	pop	{r4, r5, r6, pc}
 8004b78:	0781      	lsls	r1, r0, #30
 8004b7a:	bf58      	it	pl
 8004b7c:	6963      	ldrpl	r3, [r4, #20]
 8004b7e:	60a3      	str	r3, [r4, #8]
 8004b80:	e7f4      	b.n	8004b6c <__swsetup_r+0xb0>
 8004b82:	2000      	movs	r0, #0
 8004b84:	e7f7      	b.n	8004b76 <__swsetup_r+0xba>
 8004b86:	bf00      	nop
 8004b88:	20000028 	.word	0x20000028
 8004b8c:	08005f48 	.word	0x08005f48
 8004b90:	08005f68 	.word	0x08005f68
 8004b94:	08005f28 	.word	0x08005f28

08004b98 <abort>:
 8004b98:	b508      	push	{r3, lr}
 8004b9a:	2006      	movs	r0, #6
 8004b9c:	f000 fa58 	bl	8005050 <raise>
 8004ba0:	2001      	movs	r0, #1
 8004ba2:	f7fd fa37 	bl	8002014 <_exit>
	...

08004ba8 <__sflush_r>:
 8004ba8:	898a      	ldrh	r2, [r1, #12]
 8004baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bae:	4605      	mov	r5, r0
 8004bb0:	0710      	lsls	r0, r2, #28
 8004bb2:	460c      	mov	r4, r1
 8004bb4:	d458      	bmi.n	8004c68 <__sflush_r+0xc0>
 8004bb6:	684b      	ldr	r3, [r1, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	dc05      	bgt.n	8004bc8 <__sflush_r+0x20>
 8004bbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	dc02      	bgt.n	8004bc8 <__sflush_r+0x20>
 8004bc2:	2000      	movs	r0, #0
 8004bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004bca:	2e00      	cmp	r6, #0
 8004bcc:	d0f9      	beq.n	8004bc2 <__sflush_r+0x1a>
 8004bce:	2300      	movs	r3, #0
 8004bd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004bd4:	682f      	ldr	r7, [r5, #0]
 8004bd6:	602b      	str	r3, [r5, #0]
 8004bd8:	d032      	beq.n	8004c40 <__sflush_r+0x98>
 8004bda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004bdc:	89a3      	ldrh	r3, [r4, #12]
 8004bde:	075a      	lsls	r2, r3, #29
 8004be0:	d505      	bpl.n	8004bee <__sflush_r+0x46>
 8004be2:	6863      	ldr	r3, [r4, #4]
 8004be4:	1ac0      	subs	r0, r0, r3
 8004be6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004be8:	b10b      	cbz	r3, 8004bee <__sflush_r+0x46>
 8004bea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004bec:	1ac0      	subs	r0, r0, r3
 8004bee:	2300      	movs	r3, #0
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004bf4:	6a21      	ldr	r1, [r4, #32]
 8004bf6:	4628      	mov	r0, r5
 8004bf8:	47b0      	blx	r6
 8004bfa:	1c43      	adds	r3, r0, #1
 8004bfc:	89a3      	ldrh	r3, [r4, #12]
 8004bfe:	d106      	bne.n	8004c0e <__sflush_r+0x66>
 8004c00:	6829      	ldr	r1, [r5, #0]
 8004c02:	291d      	cmp	r1, #29
 8004c04:	d82c      	bhi.n	8004c60 <__sflush_r+0xb8>
 8004c06:	4a2a      	ldr	r2, [pc, #168]	; (8004cb0 <__sflush_r+0x108>)
 8004c08:	40ca      	lsrs	r2, r1
 8004c0a:	07d6      	lsls	r6, r2, #31
 8004c0c:	d528      	bpl.n	8004c60 <__sflush_r+0xb8>
 8004c0e:	2200      	movs	r2, #0
 8004c10:	6062      	str	r2, [r4, #4]
 8004c12:	04d9      	lsls	r1, r3, #19
 8004c14:	6922      	ldr	r2, [r4, #16]
 8004c16:	6022      	str	r2, [r4, #0]
 8004c18:	d504      	bpl.n	8004c24 <__sflush_r+0x7c>
 8004c1a:	1c42      	adds	r2, r0, #1
 8004c1c:	d101      	bne.n	8004c22 <__sflush_r+0x7a>
 8004c1e:	682b      	ldr	r3, [r5, #0]
 8004c20:	b903      	cbnz	r3, 8004c24 <__sflush_r+0x7c>
 8004c22:	6560      	str	r0, [r4, #84]	; 0x54
 8004c24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c26:	602f      	str	r7, [r5, #0]
 8004c28:	2900      	cmp	r1, #0
 8004c2a:	d0ca      	beq.n	8004bc2 <__sflush_r+0x1a>
 8004c2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c30:	4299      	cmp	r1, r3
 8004c32:	d002      	beq.n	8004c3a <__sflush_r+0x92>
 8004c34:	4628      	mov	r0, r5
 8004c36:	f7ff fb11 	bl	800425c <_free_r>
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	6360      	str	r0, [r4, #52]	; 0x34
 8004c3e:	e7c1      	b.n	8004bc4 <__sflush_r+0x1c>
 8004c40:	6a21      	ldr	r1, [r4, #32]
 8004c42:	2301      	movs	r3, #1
 8004c44:	4628      	mov	r0, r5
 8004c46:	47b0      	blx	r6
 8004c48:	1c41      	adds	r1, r0, #1
 8004c4a:	d1c7      	bne.n	8004bdc <__sflush_r+0x34>
 8004c4c:	682b      	ldr	r3, [r5, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d0c4      	beq.n	8004bdc <__sflush_r+0x34>
 8004c52:	2b1d      	cmp	r3, #29
 8004c54:	d001      	beq.n	8004c5a <__sflush_r+0xb2>
 8004c56:	2b16      	cmp	r3, #22
 8004c58:	d101      	bne.n	8004c5e <__sflush_r+0xb6>
 8004c5a:	602f      	str	r7, [r5, #0]
 8004c5c:	e7b1      	b.n	8004bc2 <__sflush_r+0x1a>
 8004c5e:	89a3      	ldrh	r3, [r4, #12]
 8004c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c64:	81a3      	strh	r3, [r4, #12]
 8004c66:	e7ad      	b.n	8004bc4 <__sflush_r+0x1c>
 8004c68:	690f      	ldr	r7, [r1, #16]
 8004c6a:	2f00      	cmp	r7, #0
 8004c6c:	d0a9      	beq.n	8004bc2 <__sflush_r+0x1a>
 8004c6e:	0793      	lsls	r3, r2, #30
 8004c70:	680e      	ldr	r6, [r1, #0]
 8004c72:	bf08      	it	eq
 8004c74:	694b      	ldreq	r3, [r1, #20]
 8004c76:	600f      	str	r7, [r1, #0]
 8004c78:	bf18      	it	ne
 8004c7a:	2300      	movne	r3, #0
 8004c7c:	eba6 0807 	sub.w	r8, r6, r7
 8004c80:	608b      	str	r3, [r1, #8]
 8004c82:	f1b8 0f00 	cmp.w	r8, #0
 8004c86:	dd9c      	ble.n	8004bc2 <__sflush_r+0x1a>
 8004c88:	6a21      	ldr	r1, [r4, #32]
 8004c8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004c8c:	4643      	mov	r3, r8
 8004c8e:	463a      	mov	r2, r7
 8004c90:	4628      	mov	r0, r5
 8004c92:	47b0      	blx	r6
 8004c94:	2800      	cmp	r0, #0
 8004c96:	dc06      	bgt.n	8004ca6 <__sflush_r+0xfe>
 8004c98:	89a3      	ldrh	r3, [r4, #12]
 8004c9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c9e:	81a3      	strh	r3, [r4, #12]
 8004ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca4:	e78e      	b.n	8004bc4 <__sflush_r+0x1c>
 8004ca6:	4407      	add	r7, r0
 8004ca8:	eba8 0800 	sub.w	r8, r8, r0
 8004cac:	e7e9      	b.n	8004c82 <__sflush_r+0xda>
 8004cae:	bf00      	nop
 8004cb0:	20400001 	.word	0x20400001

08004cb4 <_fflush_r>:
 8004cb4:	b538      	push	{r3, r4, r5, lr}
 8004cb6:	690b      	ldr	r3, [r1, #16]
 8004cb8:	4605      	mov	r5, r0
 8004cba:	460c      	mov	r4, r1
 8004cbc:	b913      	cbnz	r3, 8004cc4 <_fflush_r+0x10>
 8004cbe:	2500      	movs	r5, #0
 8004cc0:	4628      	mov	r0, r5
 8004cc2:	bd38      	pop	{r3, r4, r5, pc}
 8004cc4:	b118      	cbz	r0, 8004cce <_fflush_r+0x1a>
 8004cc6:	6983      	ldr	r3, [r0, #24]
 8004cc8:	b90b      	cbnz	r3, 8004cce <_fflush_r+0x1a>
 8004cca:	f000 f887 	bl	8004ddc <__sinit>
 8004cce:	4b14      	ldr	r3, [pc, #80]	; (8004d20 <_fflush_r+0x6c>)
 8004cd0:	429c      	cmp	r4, r3
 8004cd2:	d11b      	bne.n	8004d0c <_fflush_r+0x58>
 8004cd4:	686c      	ldr	r4, [r5, #4]
 8004cd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d0ef      	beq.n	8004cbe <_fflush_r+0xa>
 8004cde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ce0:	07d0      	lsls	r0, r2, #31
 8004ce2:	d404      	bmi.n	8004cee <_fflush_r+0x3a>
 8004ce4:	0599      	lsls	r1, r3, #22
 8004ce6:	d402      	bmi.n	8004cee <_fflush_r+0x3a>
 8004ce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cea:	f000 f915 	bl	8004f18 <__retarget_lock_acquire_recursive>
 8004cee:	4628      	mov	r0, r5
 8004cf0:	4621      	mov	r1, r4
 8004cf2:	f7ff ff59 	bl	8004ba8 <__sflush_r>
 8004cf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cf8:	07da      	lsls	r2, r3, #31
 8004cfa:	4605      	mov	r5, r0
 8004cfc:	d4e0      	bmi.n	8004cc0 <_fflush_r+0xc>
 8004cfe:	89a3      	ldrh	r3, [r4, #12]
 8004d00:	059b      	lsls	r3, r3, #22
 8004d02:	d4dd      	bmi.n	8004cc0 <_fflush_r+0xc>
 8004d04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d06:	f000 f908 	bl	8004f1a <__retarget_lock_release_recursive>
 8004d0a:	e7d9      	b.n	8004cc0 <_fflush_r+0xc>
 8004d0c:	4b05      	ldr	r3, [pc, #20]	; (8004d24 <_fflush_r+0x70>)
 8004d0e:	429c      	cmp	r4, r3
 8004d10:	d101      	bne.n	8004d16 <_fflush_r+0x62>
 8004d12:	68ac      	ldr	r4, [r5, #8]
 8004d14:	e7df      	b.n	8004cd6 <_fflush_r+0x22>
 8004d16:	4b04      	ldr	r3, [pc, #16]	; (8004d28 <_fflush_r+0x74>)
 8004d18:	429c      	cmp	r4, r3
 8004d1a:	bf08      	it	eq
 8004d1c:	68ec      	ldreq	r4, [r5, #12]
 8004d1e:	e7da      	b.n	8004cd6 <_fflush_r+0x22>
 8004d20:	08005f48 	.word	0x08005f48
 8004d24:	08005f68 	.word	0x08005f68
 8004d28:	08005f28 	.word	0x08005f28

08004d2c <std>:
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	b510      	push	{r4, lr}
 8004d30:	4604      	mov	r4, r0
 8004d32:	e9c0 3300 	strd	r3, r3, [r0]
 8004d36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d3a:	6083      	str	r3, [r0, #8]
 8004d3c:	8181      	strh	r1, [r0, #12]
 8004d3e:	6643      	str	r3, [r0, #100]	; 0x64
 8004d40:	81c2      	strh	r2, [r0, #14]
 8004d42:	6183      	str	r3, [r0, #24]
 8004d44:	4619      	mov	r1, r3
 8004d46:	2208      	movs	r2, #8
 8004d48:	305c      	adds	r0, #92	; 0x5c
 8004d4a:	f7ff fa7f 	bl	800424c <memset>
 8004d4e:	4b05      	ldr	r3, [pc, #20]	; (8004d64 <std+0x38>)
 8004d50:	6263      	str	r3, [r4, #36]	; 0x24
 8004d52:	4b05      	ldr	r3, [pc, #20]	; (8004d68 <std+0x3c>)
 8004d54:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d56:	4b05      	ldr	r3, [pc, #20]	; (8004d6c <std+0x40>)
 8004d58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d5a:	4b05      	ldr	r3, [pc, #20]	; (8004d70 <std+0x44>)
 8004d5c:	6224      	str	r4, [r4, #32]
 8004d5e:	6323      	str	r3, [r4, #48]	; 0x30
 8004d60:	bd10      	pop	{r4, pc}
 8004d62:	bf00      	nop
 8004d64:	08005089 	.word	0x08005089
 8004d68:	080050ab 	.word	0x080050ab
 8004d6c:	080050e3 	.word	0x080050e3
 8004d70:	08005107 	.word	0x08005107

08004d74 <_cleanup_r>:
 8004d74:	4901      	ldr	r1, [pc, #4]	; (8004d7c <_cleanup_r+0x8>)
 8004d76:	f000 b8af 	b.w	8004ed8 <_fwalk_reent>
 8004d7a:	bf00      	nop
 8004d7c:	08004cb5 	.word	0x08004cb5

08004d80 <__sfmoreglue>:
 8004d80:	b570      	push	{r4, r5, r6, lr}
 8004d82:	2268      	movs	r2, #104	; 0x68
 8004d84:	1e4d      	subs	r5, r1, #1
 8004d86:	4355      	muls	r5, r2
 8004d88:	460e      	mov	r6, r1
 8004d8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004d8e:	f7ff fad1 	bl	8004334 <_malloc_r>
 8004d92:	4604      	mov	r4, r0
 8004d94:	b140      	cbz	r0, 8004da8 <__sfmoreglue+0x28>
 8004d96:	2100      	movs	r1, #0
 8004d98:	e9c0 1600 	strd	r1, r6, [r0]
 8004d9c:	300c      	adds	r0, #12
 8004d9e:	60a0      	str	r0, [r4, #8]
 8004da0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004da4:	f7ff fa52 	bl	800424c <memset>
 8004da8:	4620      	mov	r0, r4
 8004daa:	bd70      	pop	{r4, r5, r6, pc}

08004dac <__sfp_lock_acquire>:
 8004dac:	4801      	ldr	r0, [pc, #4]	; (8004db4 <__sfp_lock_acquire+0x8>)
 8004dae:	f000 b8b3 	b.w	8004f18 <__retarget_lock_acquire_recursive>
 8004db2:	bf00      	nop
 8004db4:	2000030d 	.word	0x2000030d

08004db8 <__sfp_lock_release>:
 8004db8:	4801      	ldr	r0, [pc, #4]	; (8004dc0 <__sfp_lock_release+0x8>)
 8004dba:	f000 b8ae 	b.w	8004f1a <__retarget_lock_release_recursive>
 8004dbe:	bf00      	nop
 8004dc0:	2000030d 	.word	0x2000030d

08004dc4 <__sinit_lock_acquire>:
 8004dc4:	4801      	ldr	r0, [pc, #4]	; (8004dcc <__sinit_lock_acquire+0x8>)
 8004dc6:	f000 b8a7 	b.w	8004f18 <__retarget_lock_acquire_recursive>
 8004dca:	bf00      	nop
 8004dcc:	2000030e 	.word	0x2000030e

08004dd0 <__sinit_lock_release>:
 8004dd0:	4801      	ldr	r0, [pc, #4]	; (8004dd8 <__sinit_lock_release+0x8>)
 8004dd2:	f000 b8a2 	b.w	8004f1a <__retarget_lock_release_recursive>
 8004dd6:	bf00      	nop
 8004dd8:	2000030e 	.word	0x2000030e

08004ddc <__sinit>:
 8004ddc:	b510      	push	{r4, lr}
 8004dde:	4604      	mov	r4, r0
 8004de0:	f7ff fff0 	bl	8004dc4 <__sinit_lock_acquire>
 8004de4:	69a3      	ldr	r3, [r4, #24]
 8004de6:	b11b      	cbz	r3, 8004df0 <__sinit+0x14>
 8004de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dec:	f7ff bff0 	b.w	8004dd0 <__sinit_lock_release>
 8004df0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004df4:	6523      	str	r3, [r4, #80]	; 0x50
 8004df6:	4b13      	ldr	r3, [pc, #76]	; (8004e44 <__sinit+0x68>)
 8004df8:	4a13      	ldr	r2, [pc, #76]	; (8004e48 <__sinit+0x6c>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	62a2      	str	r2, [r4, #40]	; 0x28
 8004dfe:	42a3      	cmp	r3, r4
 8004e00:	bf04      	itt	eq
 8004e02:	2301      	moveq	r3, #1
 8004e04:	61a3      	streq	r3, [r4, #24]
 8004e06:	4620      	mov	r0, r4
 8004e08:	f000 f820 	bl	8004e4c <__sfp>
 8004e0c:	6060      	str	r0, [r4, #4]
 8004e0e:	4620      	mov	r0, r4
 8004e10:	f000 f81c 	bl	8004e4c <__sfp>
 8004e14:	60a0      	str	r0, [r4, #8]
 8004e16:	4620      	mov	r0, r4
 8004e18:	f000 f818 	bl	8004e4c <__sfp>
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	60e0      	str	r0, [r4, #12]
 8004e20:	2104      	movs	r1, #4
 8004e22:	6860      	ldr	r0, [r4, #4]
 8004e24:	f7ff ff82 	bl	8004d2c <std>
 8004e28:	68a0      	ldr	r0, [r4, #8]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	2109      	movs	r1, #9
 8004e2e:	f7ff ff7d 	bl	8004d2c <std>
 8004e32:	68e0      	ldr	r0, [r4, #12]
 8004e34:	2202      	movs	r2, #2
 8004e36:	2112      	movs	r1, #18
 8004e38:	f7ff ff78 	bl	8004d2c <std>
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	61a3      	str	r3, [r4, #24]
 8004e40:	e7d2      	b.n	8004de8 <__sinit+0xc>
 8004e42:	bf00      	nop
 8004e44:	08005ef0 	.word	0x08005ef0
 8004e48:	08004d75 	.word	0x08004d75

08004e4c <__sfp>:
 8004e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e4e:	4607      	mov	r7, r0
 8004e50:	f7ff ffac 	bl	8004dac <__sfp_lock_acquire>
 8004e54:	4b1e      	ldr	r3, [pc, #120]	; (8004ed0 <__sfp+0x84>)
 8004e56:	681e      	ldr	r6, [r3, #0]
 8004e58:	69b3      	ldr	r3, [r6, #24]
 8004e5a:	b913      	cbnz	r3, 8004e62 <__sfp+0x16>
 8004e5c:	4630      	mov	r0, r6
 8004e5e:	f7ff ffbd 	bl	8004ddc <__sinit>
 8004e62:	3648      	adds	r6, #72	; 0x48
 8004e64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	d503      	bpl.n	8004e74 <__sfp+0x28>
 8004e6c:	6833      	ldr	r3, [r6, #0]
 8004e6e:	b30b      	cbz	r3, 8004eb4 <__sfp+0x68>
 8004e70:	6836      	ldr	r6, [r6, #0]
 8004e72:	e7f7      	b.n	8004e64 <__sfp+0x18>
 8004e74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e78:	b9d5      	cbnz	r5, 8004eb0 <__sfp+0x64>
 8004e7a:	4b16      	ldr	r3, [pc, #88]	; (8004ed4 <__sfp+0x88>)
 8004e7c:	60e3      	str	r3, [r4, #12]
 8004e7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e82:	6665      	str	r5, [r4, #100]	; 0x64
 8004e84:	f000 f847 	bl	8004f16 <__retarget_lock_init_recursive>
 8004e88:	f7ff ff96 	bl	8004db8 <__sfp_lock_release>
 8004e8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004e90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004e94:	6025      	str	r5, [r4, #0]
 8004e96:	61a5      	str	r5, [r4, #24]
 8004e98:	2208      	movs	r2, #8
 8004e9a:	4629      	mov	r1, r5
 8004e9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004ea0:	f7ff f9d4 	bl	800424c <memset>
 8004ea4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004ea8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004eac:	4620      	mov	r0, r4
 8004eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004eb0:	3468      	adds	r4, #104	; 0x68
 8004eb2:	e7d9      	b.n	8004e68 <__sfp+0x1c>
 8004eb4:	2104      	movs	r1, #4
 8004eb6:	4638      	mov	r0, r7
 8004eb8:	f7ff ff62 	bl	8004d80 <__sfmoreglue>
 8004ebc:	4604      	mov	r4, r0
 8004ebe:	6030      	str	r0, [r6, #0]
 8004ec0:	2800      	cmp	r0, #0
 8004ec2:	d1d5      	bne.n	8004e70 <__sfp+0x24>
 8004ec4:	f7ff ff78 	bl	8004db8 <__sfp_lock_release>
 8004ec8:	230c      	movs	r3, #12
 8004eca:	603b      	str	r3, [r7, #0]
 8004ecc:	e7ee      	b.n	8004eac <__sfp+0x60>
 8004ece:	bf00      	nop
 8004ed0:	08005ef0 	.word	0x08005ef0
 8004ed4:	ffff0001 	.word	0xffff0001

08004ed8 <_fwalk_reent>:
 8004ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004edc:	4606      	mov	r6, r0
 8004ede:	4688      	mov	r8, r1
 8004ee0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ee4:	2700      	movs	r7, #0
 8004ee6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004eea:	f1b9 0901 	subs.w	r9, r9, #1
 8004eee:	d505      	bpl.n	8004efc <_fwalk_reent+0x24>
 8004ef0:	6824      	ldr	r4, [r4, #0]
 8004ef2:	2c00      	cmp	r4, #0
 8004ef4:	d1f7      	bne.n	8004ee6 <_fwalk_reent+0xe>
 8004ef6:	4638      	mov	r0, r7
 8004ef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004efc:	89ab      	ldrh	r3, [r5, #12]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d907      	bls.n	8004f12 <_fwalk_reent+0x3a>
 8004f02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f06:	3301      	adds	r3, #1
 8004f08:	d003      	beq.n	8004f12 <_fwalk_reent+0x3a>
 8004f0a:	4629      	mov	r1, r5
 8004f0c:	4630      	mov	r0, r6
 8004f0e:	47c0      	blx	r8
 8004f10:	4307      	orrs	r7, r0
 8004f12:	3568      	adds	r5, #104	; 0x68
 8004f14:	e7e9      	b.n	8004eea <_fwalk_reent+0x12>

08004f16 <__retarget_lock_init_recursive>:
 8004f16:	4770      	bx	lr

08004f18 <__retarget_lock_acquire_recursive>:
 8004f18:	4770      	bx	lr

08004f1a <__retarget_lock_release_recursive>:
 8004f1a:	4770      	bx	lr

08004f1c <__swhatbuf_r>:
 8004f1c:	b570      	push	{r4, r5, r6, lr}
 8004f1e:	460e      	mov	r6, r1
 8004f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f24:	2900      	cmp	r1, #0
 8004f26:	b096      	sub	sp, #88	; 0x58
 8004f28:	4614      	mov	r4, r2
 8004f2a:	461d      	mov	r5, r3
 8004f2c:	da08      	bge.n	8004f40 <__swhatbuf_r+0x24>
 8004f2e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	602a      	str	r2, [r5, #0]
 8004f36:	061a      	lsls	r2, r3, #24
 8004f38:	d410      	bmi.n	8004f5c <__swhatbuf_r+0x40>
 8004f3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f3e:	e00e      	b.n	8004f5e <__swhatbuf_r+0x42>
 8004f40:	466a      	mov	r2, sp
 8004f42:	f000 f907 	bl	8005154 <_fstat_r>
 8004f46:	2800      	cmp	r0, #0
 8004f48:	dbf1      	blt.n	8004f2e <__swhatbuf_r+0x12>
 8004f4a:	9a01      	ldr	r2, [sp, #4]
 8004f4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004f50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004f54:	425a      	negs	r2, r3
 8004f56:	415a      	adcs	r2, r3
 8004f58:	602a      	str	r2, [r5, #0]
 8004f5a:	e7ee      	b.n	8004f3a <__swhatbuf_r+0x1e>
 8004f5c:	2340      	movs	r3, #64	; 0x40
 8004f5e:	2000      	movs	r0, #0
 8004f60:	6023      	str	r3, [r4, #0]
 8004f62:	b016      	add	sp, #88	; 0x58
 8004f64:	bd70      	pop	{r4, r5, r6, pc}
	...

08004f68 <__smakebuf_r>:
 8004f68:	898b      	ldrh	r3, [r1, #12]
 8004f6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f6c:	079d      	lsls	r5, r3, #30
 8004f6e:	4606      	mov	r6, r0
 8004f70:	460c      	mov	r4, r1
 8004f72:	d507      	bpl.n	8004f84 <__smakebuf_r+0x1c>
 8004f74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f78:	6023      	str	r3, [r4, #0]
 8004f7a:	6123      	str	r3, [r4, #16]
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	6163      	str	r3, [r4, #20]
 8004f80:	b002      	add	sp, #8
 8004f82:	bd70      	pop	{r4, r5, r6, pc}
 8004f84:	ab01      	add	r3, sp, #4
 8004f86:	466a      	mov	r2, sp
 8004f88:	f7ff ffc8 	bl	8004f1c <__swhatbuf_r>
 8004f8c:	9900      	ldr	r1, [sp, #0]
 8004f8e:	4605      	mov	r5, r0
 8004f90:	4630      	mov	r0, r6
 8004f92:	f7ff f9cf 	bl	8004334 <_malloc_r>
 8004f96:	b948      	cbnz	r0, 8004fac <__smakebuf_r+0x44>
 8004f98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f9c:	059a      	lsls	r2, r3, #22
 8004f9e:	d4ef      	bmi.n	8004f80 <__smakebuf_r+0x18>
 8004fa0:	f023 0303 	bic.w	r3, r3, #3
 8004fa4:	f043 0302 	orr.w	r3, r3, #2
 8004fa8:	81a3      	strh	r3, [r4, #12]
 8004faa:	e7e3      	b.n	8004f74 <__smakebuf_r+0xc>
 8004fac:	4b0d      	ldr	r3, [pc, #52]	; (8004fe4 <__smakebuf_r+0x7c>)
 8004fae:	62b3      	str	r3, [r6, #40]	; 0x28
 8004fb0:	89a3      	ldrh	r3, [r4, #12]
 8004fb2:	6020      	str	r0, [r4, #0]
 8004fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fb8:	81a3      	strh	r3, [r4, #12]
 8004fba:	9b00      	ldr	r3, [sp, #0]
 8004fbc:	6163      	str	r3, [r4, #20]
 8004fbe:	9b01      	ldr	r3, [sp, #4]
 8004fc0:	6120      	str	r0, [r4, #16]
 8004fc2:	b15b      	cbz	r3, 8004fdc <__smakebuf_r+0x74>
 8004fc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fc8:	4630      	mov	r0, r6
 8004fca:	f000 f8d5 	bl	8005178 <_isatty_r>
 8004fce:	b128      	cbz	r0, 8004fdc <__smakebuf_r+0x74>
 8004fd0:	89a3      	ldrh	r3, [r4, #12]
 8004fd2:	f023 0303 	bic.w	r3, r3, #3
 8004fd6:	f043 0301 	orr.w	r3, r3, #1
 8004fda:	81a3      	strh	r3, [r4, #12]
 8004fdc:	89a0      	ldrh	r0, [r4, #12]
 8004fde:	4305      	orrs	r5, r0
 8004fe0:	81a5      	strh	r5, [r4, #12]
 8004fe2:	e7cd      	b.n	8004f80 <__smakebuf_r+0x18>
 8004fe4:	08004d75 	.word	0x08004d75

08004fe8 <__malloc_lock>:
 8004fe8:	4801      	ldr	r0, [pc, #4]	; (8004ff0 <__malloc_lock+0x8>)
 8004fea:	f7ff bf95 	b.w	8004f18 <__retarget_lock_acquire_recursive>
 8004fee:	bf00      	nop
 8004ff0:	2000030c 	.word	0x2000030c

08004ff4 <__malloc_unlock>:
 8004ff4:	4801      	ldr	r0, [pc, #4]	; (8004ffc <__malloc_unlock+0x8>)
 8004ff6:	f7ff bf90 	b.w	8004f1a <__retarget_lock_release_recursive>
 8004ffa:	bf00      	nop
 8004ffc:	2000030c 	.word	0x2000030c

08005000 <_raise_r>:
 8005000:	291f      	cmp	r1, #31
 8005002:	b538      	push	{r3, r4, r5, lr}
 8005004:	4604      	mov	r4, r0
 8005006:	460d      	mov	r5, r1
 8005008:	d904      	bls.n	8005014 <_raise_r+0x14>
 800500a:	2316      	movs	r3, #22
 800500c:	6003      	str	r3, [r0, #0]
 800500e:	f04f 30ff 	mov.w	r0, #4294967295
 8005012:	bd38      	pop	{r3, r4, r5, pc}
 8005014:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005016:	b112      	cbz	r2, 800501e <_raise_r+0x1e>
 8005018:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800501c:	b94b      	cbnz	r3, 8005032 <_raise_r+0x32>
 800501e:	4620      	mov	r0, r4
 8005020:	f000 f830 	bl	8005084 <_getpid_r>
 8005024:	462a      	mov	r2, r5
 8005026:	4601      	mov	r1, r0
 8005028:	4620      	mov	r0, r4
 800502a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800502e:	f000 b817 	b.w	8005060 <_kill_r>
 8005032:	2b01      	cmp	r3, #1
 8005034:	d00a      	beq.n	800504c <_raise_r+0x4c>
 8005036:	1c59      	adds	r1, r3, #1
 8005038:	d103      	bne.n	8005042 <_raise_r+0x42>
 800503a:	2316      	movs	r3, #22
 800503c:	6003      	str	r3, [r0, #0]
 800503e:	2001      	movs	r0, #1
 8005040:	e7e7      	b.n	8005012 <_raise_r+0x12>
 8005042:	2400      	movs	r4, #0
 8005044:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005048:	4628      	mov	r0, r5
 800504a:	4798      	blx	r3
 800504c:	2000      	movs	r0, #0
 800504e:	e7e0      	b.n	8005012 <_raise_r+0x12>

08005050 <raise>:
 8005050:	4b02      	ldr	r3, [pc, #8]	; (800505c <raise+0xc>)
 8005052:	4601      	mov	r1, r0
 8005054:	6818      	ldr	r0, [r3, #0]
 8005056:	f7ff bfd3 	b.w	8005000 <_raise_r>
 800505a:	bf00      	nop
 800505c:	20000028 	.word	0x20000028

08005060 <_kill_r>:
 8005060:	b538      	push	{r3, r4, r5, lr}
 8005062:	4d07      	ldr	r5, [pc, #28]	; (8005080 <_kill_r+0x20>)
 8005064:	2300      	movs	r3, #0
 8005066:	4604      	mov	r4, r0
 8005068:	4608      	mov	r0, r1
 800506a:	4611      	mov	r1, r2
 800506c:	602b      	str	r3, [r5, #0]
 800506e:	f7fc ffc9 	bl	8002004 <_kill>
 8005072:	1c43      	adds	r3, r0, #1
 8005074:	d102      	bne.n	800507c <_kill_r+0x1c>
 8005076:	682b      	ldr	r3, [r5, #0]
 8005078:	b103      	cbz	r3, 800507c <_kill_r+0x1c>
 800507a:	6023      	str	r3, [r4, #0]
 800507c:	bd38      	pop	{r3, r4, r5, pc}
 800507e:	bf00      	nop
 8005080:	20000310 	.word	0x20000310

08005084 <_getpid_r>:
 8005084:	f7fc bfbc 	b.w	8002000 <_getpid>

08005088 <__sread>:
 8005088:	b510      	push	{r4, lr}
 800508a:	460c      	mov	r4, r1
 800508c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005090:	f000 f894 	bl	80051bc <_read_r>
 8005094:	2800      	cmp	r0, #0
 8005096:	bfab      	itete	ge
 8005098:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800509a:	89a3      	ldrhlt	r3, [r4, #12]
 800509c:	181b      	addge	r3, r3, r0
 800509e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80050a2:	bfac      	ite	ge
 80050a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80050a6:	81a3      	strhlt	r3, [r4, #12]
 80050a8:	bd10      	pop	{r4, pc}

080050aa <__swrite>:
 80050aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050ae:	461f      	mov	r7, r3
 80050b0:	898b      	ldrh	r3, [r1, #12]
 80050b2:	05db      	lsls	r3, r3, #23
 80050b4:	4605      	mov	r5, r0
 80050b6:	460c      	mov	r4, r1
 80050b8:	4616      	mov	r6, r2
 80050ba:	d505      	bpl.n	80050c8 <__swrite+0x1e>
 80050bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050c0:	2302      	movs	r3, #2
 80050c2:	2200      	movs	r2, #0
 80050c4:	f000 f868 	bl	8005198 <_lseek_r>
 80050c8:	89a3      	ldrh	r3, [r4, #12]
 80050ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050d2:	81a3      	strh	r3, [r4, #12]
 80050d4:	4632      	mov	r2, r6
 80050d6:	463b      	mov	r3, r7
 80050d8:	4628      	mov	r0, r5
 80050da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050de:	f000 b817 	b.w	8005110 <_write_r>

080050e2 <__sseek>:
 80050e2:	b510      	push	{r4, lr}
 80050e4:	460c      	mov	r4, r1
 80050e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050ea:	f000 f855 	bl	8005198 <_lseek_r>
 80050ee:	1c43      	adds	r3, r0, #1
 80050f0:	89a3      	ldrh	r3, [r4, #12]
 80050f2:	bf15      	itete	ne
 80050f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80050f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80050fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80050fe:	81a3      	strheq	r3, [r4, #12]
 8005100:	bf18      	it	ne
 8005102:	81a3      	strhne	r3, [r4, #12]
 8005104:	bd10      	pop	{r4, pc}

08005106 <__sclose>:
 8005106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800510a:	f000 b813 	b.w	8005134 <_close_r>
	...

08005110 <_write_r>:
 8005110:	b538      	push	{r3, r4, r5, lr}
 8005112:	4d07      	ldr	r5, [pc, #28]	; (8005130 <_write_r+0x20>)
 8005114:	4604      	mov	r4, r0
 8005116:	4608      	mov	r0, r1
 8005118:	4611      	mov	r1, r2
 800511a:	2200      	movs	r2, #0
 800511c:	602a      	str	r2, [r5, #0]
 800511e:	461a      	mov	r2, r3
 8005120:	f7fc ff8e 	bl	8002040 <_write>
 8005124:	1c43      	adds	r3, r0, #1
 8005126:	d102      	bne.n	800512e <_write_r+0x1e>
 8005128:	682b      	ldr	r3, [r5, #0]
 800512a:	b103      	cbz	r3, 800512e <_write_r+0x1e>
 800512c:	6023      	str	r3, [r4, #0]
 800512e:	bd38      	pop	{r3, r4, r5, pc}
 8005130:	20000310 	.word	0x20000310

08005134 <_close_r>:
 8005134:	b538      	push	{r3, r4, r5, lr}
 8005136:	4d06      	ldr	r5, [pc, #24]	; (8005150 <_close_r+0x1c>)
 8005138:	2300      	movs	r3, #0
 800513a:	4604      	mov	r4, r0
 800513c:	4608      	mov	r0, r1
 800513e:	602b      	str	r3, [r5, #0]
 8005140:	f7fc ff8c 	bl	800205c <_close>
 8005144:	1c43      	adds	r3, r0, #1
 8005146:	d102      	bne.n	800514e <_close_r+0x1a>
 8005148:	682b      	ldr	r3, [r5, #0]
 800514a:	b103      	cbz	r3, 800514e <_close_r+0x1a>
 800514c:	6023      	str	r3, [r4, #0]
 800514e:	bd38      	pop	{r3, r4, r5, pc}
 8005150:	20000310 	.word	0x20000310

08005154 <_fstat_r>:
 8005154:	b538      	push	{r3, r4, r5, lr}
 8005156:	4d07      	ldr	r5, [pc, #28]	; (8005174 <_fstat_r+0x20>)
 8005158:	2300      	movs	r3, #0
 800515a:	4604      	mov	r4, r0
 800515c:	4608      	mov	r0, r1
 800515e:	4611      	mov	r1, r2
 8005160:	602b      	str	r3, [r5, #0]
 8005162:	f7fc ff7e 	bl	8002062 <_fstat>
 8005166:	1c43      	adds	r3, r0, #1
 8005168:	d102      	bne.n	8005170 <_fstat_r+0x1c>
 800516a:	682b      	ldr	r3, [r5, #0]
 800516c:	b103      	cbz	r3, 8005170 <_fstat_r+0x1c>
 800516e:	6023      	str	r3, [r4, #0]
 8005170:	bd38      	pop	{r3, r4, r5, pc}
 8005172:	bf00      	nop
 8005174:	20000310 	.word	0x20000310

08005178 <_isatty_r>:
 8005178:	b538      	push	{r3, r4, r5, lr}
 800517a:	4d06      	ldr	r5, [pc, #24]	; (8005194 <_isatty_r+0x1c>)
 800517c:	2300      	movs	r3, #0
 800517e:	4604      	mov	r4, r0
 8005180:	4608      	mov	r0, r1
 8005182:	602b      	str	r3, [r5, #0]
 8005184:	f7fc ff72 	bl	800206c <_isatty>
 8005188:	1c43      	adds	r3, r0, #1
 800518a:	d102      	bne.n	8005192 <_isatty_r+0x1a>
 800518c:	682b      	ldr	r3, [r5, #0]
 800518e:	b103      	cbz	r3, 8005192 <_isatty_r+0x1a>
 8005190:	6023      	str	r3, [r4, #0]
 8005192:	bd38      	pop	{r3, r4, r5, pc}
 8005194:	20000310 	.word	0x20000310

08005198 <_lseek_r>:
 8005198:	b538      	push	{r3, r4, r5, lr}
 800519a:	4d07      	ldr	r5, [pc, #28]	; (80051b8 <_lseek_r+0x20>)
 800519c:	4604      	mov	r4, r0
 800519e:	4608      	mov	r0, r1
 80051a0:	4611      	mov	r1, r2
 80051a2:	2200      	movs	r2, #0
 80051a4:	602a      	str	r2, [r5, #0]
 80051a6:	461a      	mov	r2, r3
 80051a8:	f7fc ff62 	bl	8002070 <_lseek>
 80051ac:	1c43      	adds	r3, r0, #1
 80051ae:	d102      	bne.n	80051b6 <_lseek_r+0x1e>
 80051b0:	682b      	ldr	r3, [r5, #0]
 80051b2:	b103      	cbz	r3, 80051b6 <_lseek_r+0x1e>
 80051b4:	6023      	str	r3, [r4, #0]
 80051b6:	bd38      	pop	{r3, r4, r5, pc}
 80051b8:	20000310 	.word	0x20000310

080051bc <_read_r>:
 80051bc:	b538      	push	{r3, r4, r5, lr}
 80051be:	4d07      	ldr	r5, [pc, #28]	; (80051dc <_read_r+0x20>)
 80051c0:	4604      	mov	r4, r0
 80051c2:	4608      	mov	r0, r1
 80051c4:	4611      	mov	r1, r2
 80051c6:	2200      	movs	r2, #0
 80051c8:	602a      	str	r2, [r5, #0]
 80051ca:	461a      	mov	r2, r3
 80051cc:	f7fc ff28 	bl	8002020 <_read>
 80051d0:	1c43      	adds	r3, r0, #1
 80051d2:	d102      	bne.n	80051da <_read_r+0x1e>
 80051d4:	682b      	ldr	r3, [r5, #0]
 80051d6:	b103      	cbz	r3, 80051da <_read_r+0x1e>
 80051d8:	6023      	str	r3, [r4, #0]
 80051da:	bd38      	pop	{r3, r4, r5, pc}
 80051dc:	20000310 	.word	0x20000310

080051e0 <cosf>:
 80051e0:	ee10 3a10 	vmov	r3, s0
 80051e4:	b507      	push	{r0, r1, r2, lr}
 80051e6:	4a1e      	ldr	r2, [pc, #120]	; (8005260 <cosf+0x80>)
 80051e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051ec:	4293      	cmp	r3, r2
 80051ee:	dc06      	bgt.n	80051fe <cosf+0x1e>
 80051f0:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8005264 <cosf+0x84>
 80051f4:	b003      	add	sp, #12
 80051f6:	f85d eb04 	ldr.w	lr, [sp], #4
 80051fa:	f000 b9fd 	b.w	80055f8 <__kernel_cosf>
 80051fe:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005202:	db04      	blt.n	800520e <cosf+0x2e>
 8005204:	ee30 0a40 	vsub.f32	s0, s0, s0
 8005208:	b003      	add	sp, #12
 800520a:	f85d fb04 	ldr.w	pc, [sp], #4
 800520e:	4668      	mov	r0, sp
 8005210:	f000 f8b2 	bl	8005378 <__ieee754_rem_pio2f>
 8005214:	f000 0003 	and.w	r0, r0, #3
 8005218:	2801      	cmp	r0, #1
 800521a:	d009      	beq.n	8005230 <cosf+0x50>
 800521c:	2802      	cmp	r0, #2
 800521e:	d010      	beq.n	8005242 <cosf+0x62>
 8005220:	b9b0      	cbnz	r0, 8005250 <cosf+0x70>
 8005222:	eddd 0a01 	vldr	s1, [sp, #4]
 8005226:	ed9d 0a00 	vldr	s0, [sp]
 800522a:	f000 f9e5 	bl	80055f8 <__kernel_cosf>
 800522e:	e7eb      	b.n	8005208 <cosf+0x28>
 8005230:	eddd 0a01 	vldr	s1, [sp, #4]
 8005234:	ed9d 0a00 	vldr	s0, [sp]
 8005238:	f000 fcb4 	bl	8005ba4 <__kernel_sinf>
 800523c:	eeb1 0a40 	vneg.f32	s0, s0
 8005240:	e7e2      	b.n	8005208 <cosf+0x28>
 8005242:	eddd 0a01 	vldr	s1, [sp, #4]
 8005246:	ed9d 0a00 	vldr	s0, [sp]
 800524a:	f000 f9d5 	bl	80055f8 <__kernel_cosf>
 800524e:	e7f5      	b.n	800523c <cosf+0x5c>
 8005250:	eddd 0a01 	vldr	s1, [sp, #4]
 8005254:	ed9d 0a00 	vldr	s0, [sp]
 8005258:	2001      	movs	r0, #1
 800525a:	f000 fca3 	bl	8005ba4 <__kernel_sinf>
 800525e:	e7d3      	b.n	8005208 <cosf+0x28>
 8005260:	3f490fd8 	.word	0x3f490fd8
 8005264:	00000000 	.word	0x00000000

08005268 <roundf>:
 8005268:	ee10 0a10 	vmov	r0, s0
 800526c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8005270:	3a7f      	subs	r2, #127	; 0x7f
 8005272:	2a16      	cmp	r2, #22
 8005274:	dc15      	bgt.n	80052a2 <roundf+0x3a>
 8005276:	2a00      	cmp	r2, #0
 8005278:	da08      	bge.n	800528c <roundf+0x24>
 800527a:	3201      	adds	r2, #1
 800527c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8005280:	d101      	bne.n	8005286 <roundf+0x1e>
 8005282:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8005286:	ee00 3a10 	vmov	s0, r3
 800528a:	4770      	bx	lr
 800528c:	4907      	ldr	r1, [pc, #28]	; (80052ac <roundf+0x44>)
 800528e:	4111      	asrs	r1, r2
 8005290:	4208      	tst	r0, r1
 8005292:	d0fa      	beq.n	800528a <roundf+0x22>
 8005294:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005298:	4113      	asrs	r3, r2
 800529a:	4403      	add	r3, r0
 800529c:	ea23 0301 	bic.w	r3, r3, r1
 80052a0:	e7f1      	b.n	8005286 <roundf+0x1e>
 80052a2:	2a80      	cmp	r2, #128	; 0x80
 80052a4:	d1f1      	bne.n	800528a <roundf+0x22>
 80052a6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80052aa:	4770      	bx	lr
 80052ac:	007fffff 	.word	0x007fffff

080052b0 <sinf>:
 80052b0:	ee10 3a10 	vmov	r3, s0
 80052b4:	b507      	push	{r0, r1, r2, lr}
 80052b6:	4a1f      	ldr	r2, [pc, #124]	; (8005334 <sinf+0x84>)
 80052b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052bc:	4293      	cmp	r3, r2
 80052be:	dc07      	bgt.n	80052d0 <sinf+0x20>
 80052c0:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8005338 <sinf+0x88>
 80052c4:	2000      	movs	r0, #0
 80052c6:	b003      	add	sp, #12
 80052c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80052cc:	f000 bc6a 	b.w	8005ba4 <__kernel_sinf>
 80052d0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80052d4:	db04      	blt.n	80052e0 <sinf+0x30>
 80052d6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80052da:	b003      	add	sp, #12
 80052dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80052e0:	4668      	mov	r0, sp
 80052e2:	f000 f849 	bl	8005378 <__ieee754_rem_pio2f>
 80052e6:	f000 0003 	and.w	r0, r0, #3
 80052ea:	2801      	cmp	r0, #1
 80052ec:	d00a      	beq.n	8005304 <sinf+0x54>
 80052ee:	2802      	cmp	r0, #2
 80052f0:	d00f      	beq.n	8005312 <sinf+0x62>
 80052f2:	b9c0      	cbnz	r0, 8005326 <sinf+0x76>
 80052f4:	eddd 0a01 	vldr	s1, [sp, #4]
 80052f8:	ed9d 0a00 	vldr	s0, [sp]
 80052fc:	2001      	movs	r0, #1
 80052fe:	f000 fc51 	bl	8005ba4 <__kernel_sinf>
 8005302:	e7ea      	b.n	80052da <sinf+0x2a>
 8005304:	eddd 0a01 	vldr	s1, [sp, #4]
 8005308:	ed9d 0a00 	vldr	s0, [sp]
 800530c:	f000 f974 	bl	80055f8 <__kernel_cosf>
 8005310:	e7e3      	b.n	80052da <sinf+0x2a>
 8005312:	eddd 0a01 	vldr	s1, [sp, #4]
 8005316:	ed9d 0a00 	vldr	s0, [sp]
 800531a:	2001      	movs	r0, #1
 800531c:	f000 fc42 	bl	8005ba4 <__kernel_sinf>
 8005320:	eeb1 0a40 	vneg.f32	s0, s0
 8005324:	e7d9      	b.n	80052da <sinf+0x2a>
 8005326:	eddd 0a01 	vldr	s1, [sp, #4]
 800532a:	ed9d 0a00 	vldr	s0, [sp]
 800532e:	f000 f963 	bl	80055f8 <__kernel_cosf>
 8005332:	e7f5      	b.n	8005320 <sinf+0x70>
 8005334:	3f490fd8 	.word	0x3f490fd8
 8005338:	00000000 	.word	0x00000000

0800533c <sqrtf>:
 800533c:	b508      	push	{r3, lr}
 800533e:	ed2d 8b02 	vpush	{d8}
 8005342:	eeb0 8a40 	vmov.f32	s16, s0
 8005346:	f000 f953 	bl	80055f0 <__ieee754_sqrtf>
 800534a:	eeb4 8a48 	vcmp.f32	s16, s16
 800534e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005352:	d60c      	bvs.n	800536e <sqrtf+0x32>
 8005354:	eddf 8a07 	vldr	s17, [pc, #28]	; 8005374 <sqrtf+0x38>
 8005358:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800535c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005360:	d505      	bpl.n	800536e <sqrtf+0x32>
 8005362:	f7fe ff27 	bl	80041b4 <__errno>
 8005366:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800536a:	2321      	movs	r3, #33	; 0x21
 800536c:	6003      	str	r3, [r0, #0]
 800536e:	ecbd 8b02 	vpop	{d8}
 8005372:	bd08      	pop	{r3, pc}
 8005374:	00000000 	.word	0x00000000

08005378 <__ieee754_rem_pio2f>:
 8005378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800537a:	ee10 6a10 	vmov	r6, s0
 800537e:	4b8e      	ldr	r3, [pc, #568]	; (80055b8 <__ieee754_rem_pio2f+0x240>)
 8005380:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8005384:	429d      	cmp	r5, r3
 8005386:	b087      	sub	sp, #28
 8005388:	eef0 7a40 	vmov.f32	s15, s0
 800538c:	4604      	mov	r4, r0
 800538e:	dc05      	bgt.n	800539c <__ieee754_rem_pio2f+0x24>
 8005390:	2300      	movs	r3, #0
 8005392:	ed80 0a00 	vstr	s0, [r0]
 8005396:	6043      	str	r3, [r0, #4]
 8005398:	2000      	movs	r0, #0
 800539a:	e01a      	b.n	80053d2 <__ieee754_rem_pio2f+0x5a>
 800539c:	4b87      	ldr	r3, [pc, #540]	; (80055bc <__ieee754_rem_pio2f+0x244>)
 800539e:	429d      	cmp	r5, r3
 80053a0:	dc46      	bgt.n	8005430 <__ieee754_rem_pio2f+0xb8>
 80053a2:	2e00      	cmp	r6, #0
 80053a4:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80055c0 <__ieee754_rem_pio2f+0x248>
 80053a8:	4b86      	ldr	r3, [pc, #536]	; (80055c4 <__ieee754_rem_pio2f+0x24c>)
 80053aa:	f025 050f 	bic.w	r5, r5, #15
 80053ae:	dd1f      	ble.n	80053f0 <__ieee754_rem_pio2f+0x78>
 80053b0:	429d      	cmp	r5, r3
 80053b2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80053b6:	d00e      	beq.n	80053d6 <__ieee754_rem_pio2f+0x5e>
 80053b8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80055c8 <__ieee754_rem_pio2f+0x250>
 80053bc:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80053c0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80053c4:	ed80 0a00 	vstr	s0, [r0]
 80053c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80053cc:	2001      	movs	r0, #1
 80053ce:	edc4 7a01 	vstr	s15, [r4, #4]
 80053d2:	b007      	add	sp, #28
 80053d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053d6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80055cc <__ieee754_rem_pio2f+0x254>
 80053da:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80055d0 <__ieee754_rem_pio2f+0x258>
 80053de:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80053e2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80053e6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80053ea:	edc0 6a00 	vstr	s13, [r0]
 80053ee:	e7eb      	b.n	80053c8 <__ieee754_rem_pio2f+0x50>
 80053f0:	429d      	cmp	r5, r3
 80053f2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80053f6:	d00e      	beq.n	8005416 <__ieee754_rem_pio2f+0x9e>
 80053f8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80055c8 <__ieee754_rem_pio2f+0x250>
 80053fc:	ee37 0a87 	vadd.f32	s0, s15, s14
 8005400:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8005404:	ed80 0a00 	vstr	s0, [r0]
 8005408:	ee77 7a87 	vadd.f32	s15, s15, s14
 800540c:	f04f 30ff 	mov.w	r0, #4294967295
 8005410:	edc4 7a01 	vstr	s15, [r4, #4]
 8005414:	e7dd      	b.n	80053d2 <__ieee754_rem_pio2f+0x5a>
 8005416:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80055cc <__ieee754_rem_pio2f+0x254>
 800541a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80055d0 <__ieee754_rem_pio2f+0x258>
 800541e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005422:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005426:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800542a:	edc0 6a00 	vstr	s13, [r0]
 800542e:	e7eb      	b.n	8005408 <__ieee754_rem_pio2f+0x90>
 8005430:	4b68      	ldr	r3, [pc, #416]	; (80055d4 <__ieee754_rem_pio2f+0x25c>)
 8005432:	429d      	cmp	r5, r3
 8005434:	dc72      	bgt.n	800551c <__ieee754_rem_pio2f+0x1a4>
 8005436:	f000 fbfd 	bl	8005c34 <fabsf>
 800543a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80055d8 <__ieee754_rem_pio2f+0x260>
 800543e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005442:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005446:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800544a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800544e:	ee17 0a90 	vmov	r0, s15
 8005452:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80055c0 <__ieee754_rem_pio2f+0x248>
 8005456:	eea7 0a67 	vfms.f32	s0, s14, s15
 800545a:	281f      	cmp	r0, #31
 800545c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80055c8 <__ieee754_rem_pio2f+0x250>
 8005460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005464:	eeb1 6a47 	vneg.f32	s12, s14
 8005468:	ee70 6a67 	vsub.f32	s13, s0, s15
 800546c:	ee16 2a90 	vmov	r2, s13
 8005470:	dc1c      	bgt.n	80054ac <__ieee754_rem_pio2f+0x134>
 8005472:	495a      	ldr	r1, [pc, #360]	; (80055dc <__ieee754_rem_pio2f+0x264>)
 8005474:	1e47      	subs	r7, r0, #1
 8005476:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800547a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800547e:	428b      	cmp	r3, r1
 8005480:	d014      	beq.n	80054ac <__ieee754_rem_pio2f+0x134>
 8005482:	6022      	str	r2, [r4, #0]
 8005484:	ed94 7a00 	vldr	s14, [r4]
 8005488:	ee30 0a47 	vsub.f32	s0, s0, s14
 800548c:	2e00      	cmp	r6, #0
 800548e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005492:	ed84 0a01 	vstr	s0, [r4, #4]
 8005496:	da9c      	bge.n	80053d2 <__ieee754_rem_pio2f+0x5a>
 8005498:	eeb1 7a47 	vneg.f32	s14, s14
 800549c:	eeb1 0a40 	vneg.f32	s0, s0
 80054a0:	ed84 7a00 	vstr	s14, [r4]
 80054a4:	ed84 0a01 	vstr	s0, [r4, #4]
 80054a8:	4240      	negs	r0, r0
 80054aa:	e792      	b.n	80053d2 <__ieee754_rem_pio2f+0x5a>
 80054ac:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80054b0:	15eb      	asrs	r3, r5, #23
 80054b2:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80054b6:	2d08      	cmp	r5, #8
 80054b8:	dde3      	ble.n	8005482 <__ieee754_rem_pio2f+0x10a>
 80054ba:	eddf 7a44 	vldr	s15, [pc, #272]	; 80055cc <__ieee754_rem_pio2f+0x254>
 80054be:	eddf 5a44 	vldr	s11, [pc, #272]	; 80055d0 <__ieee754_rem_pio2f+0x258>
 80054c2:	eef0 6a40 	vmov.f32	s13, s0
 80054c6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80054ca:	ee30 0a66 	vsub.f32	s0, s0, s13
 80054ce:	eea6 0a27 	vfma.f32	s0, s12, s15
 80054d2:	eef0 7a40 	vmov.f32	s15, s0
 80054d6:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80054da:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80054de:	ee15 2a90 	vmov	r2, s11
 80054e2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80054e6:	1a5b      	subs	r3, r3, r1
 80054e8:	2b19      	cmp	r3, #25
 80054ea:	dc04      	bgt.n	80054f6 <__ieee754_rem_pio2f+0x17e>
 80054ec:	edc4 5a00 	vstr	s11, [r4]
 80054f0:	eeb0 0a66 	vmov.f32	s0, s13
 80054f4:	e7c6      	b.n	8005484 <__ieee754_rem_pio2f+0x10c>
 80054f6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80055e0 <__ieee754_rem_pio2f+0x268>
 80054fa:	eeb0 0a66 	vmov.f32	s0, s13
 80054fe:	eea6 0a25 	vfma.f32	s0, s12, s11
 8005502:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8005506:	eddf 6a37 	vldr	s13, [pc, #220]	; 80055e4 <__ieee754_rem_pio2f+0x26c>
 800550a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800550e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8005512:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005516:	ed84 7a00 	vstr	s14, [r4]
 800551a:	e7b3      	b.n	8005484 <__ieee754_rem_pio2f+0x10c>
 800551c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8005520:	db06      	blt.n	8005530 <__ieee754_rem_pio2f+0x1b8>
 8005522:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005526:	edc0 7a01 	vstr	s15, [r0, #4]
 800552a:	edc0 7a00 	vstr	s15, [r0]
 800552e:	e733      	b.n	8005398 <__ieee754_rem_pio2f+0x20>
 8005530:	15ea      	asrs	r2, r5, #23
 8005532:	3a86      	subs	r2, #134	; 0x86
 8005534:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8005538:	ee07 3a90 	vmov	s15, r3
 800553c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005540:	eddf 6a29 	vldr	s13, [pc, #164]	; 80055e8 <__ieee754_rem_pio2f+0x270>
 8005544:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005548:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800554c:	ed8d 7a03 	vstr	s14, [sp, #12]
 8005550:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005554:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005558:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800555c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005560:	ed8d 7a04 	vstr	s14, [sp, #16]
 8005564:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005568:	eef5 7a40 	vcmp.f32	s15, #0.0
 800556c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005570:	edcd 7a05 	vstr	s15, [sp, #20]
 8005574:	d11e      	bne.n	80055b4 <__ieee754_rem_pio2f+0x23c>
 8005576:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800557a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800557e:	bf14      	ite	ne
 8005580:	2302      	movne	r3, #2
 8005582:	2301      	moveq	r3, #1
 8005584:	4919      	ldr	r1, [pc, #100]	; (80055ec <__ieee754_rem_pio2f+0x274>)
 8005586:	9101      	str	r1, [sp, #4]
 8005588:	2102      	movs	r1, #2
 800558a:	9100      	str	r1, [sp, #0]
 800558c:	a803      	add	r0, sp, #12
 800558e:	4621      	mov	r1, r4
 8005590:	f000 f892 	bl	80056b8 <__kernel_rem_pio2f>
 8005594:	2e00      	cmp	r6, #0
 8005596:	f6bf af1c 	bge.w	80053d2 <__ieee754_rem_pio2f+0x5a>
 800559a:	edd4 7a00 	vldr	s15, [r4]
 800559e:	eef1 7a67 	vneg.f32	s15, s15
 80055a2:	edc4 7a00 	vstr	s15, [r4]
 80055a6:	edd4 7a01 	vldr	s15, [r4, #4]
 80055aa:	eef1 7a67 	vneg.f32	s15, s15
 80055ae:	edc4 7a01 	vstr	s15, [r4, #4]
 80055b2:	e779      	b.n	80054a8 <__ieee754_rem_pio2f+0x130>
 80055b4:	2303      	movs	r3, #3
 80055b6:	e7e5      	b.n	8005584 <__ieee754_rem_pio2f+0x20c>
 80055b8:	3f490fd8 	.word	0x3f490fd8
 80055bc:	4016cbe3 	.word	0x4016cbe3
 80055c0:	3fc90f80 	.word	0x3fc90f80
 80055c4:	3fc90fd0 	.word	0x3fc90fd0
 80055c8:	37354443 	.word	0x37354443
 80055cc:	37354400 	.word	0x37354400
 80055d0:	2e85a308 	.word	0x2e85a308
 80055d4:	43490f80 	.word	0x43490f80
 80055d8:	3f22f984 	.word	0x3f22f984
 80055dc:	08005f88 	.word	0x08005f88
 80055e0:	2e85a300 	.word	0x2e85a300
 80055e4:	248d3132 	.word	0x248d3132
 80055e8:	43800000 	.word	0x43800000
 80055ec:	08006008 	.word	0x08006008

080055f0 <__ieee754_sqrtf>:
 80055f0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80055f4:	4770      	bx	lr
	...

080055f8 <__kernel_cosf>:
 80055f8:	ee10 3a10 	vmov	r3, s0
 80055fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005600:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8005604:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005608:	da05      	bge.n	8005616 <__kernel_cosf+0x1e>
 800560a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800560e:	ee17 2a90 	vmov	r2, s15
 8005612:	2a00      	cmp	r2, #0
 8005614:	d03d      	beq.n	8005692 <__kernel_cosf+0x9a>
 8005616:	ee60 5a00 	vmul.f32	s11, s0, s0
 800561a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8005698 <__kernel_cosf+0xa0>
 800561e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800569c <__kernel_cosf+0xa4>
 8005622:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80056a0 <__kernel_cosf+0xa8>
 8005626:	4a1f      	ldr	r2, [pc, #124]	; (80056a4 <__kernel_cosf+0xac>)
 8005628:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800562c:	4293      	cmp	r3, r2
 800562e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80056a8 <__kernel_cosf+0xb0>
 8005632:	eee7 7a25 	vfma.f32	s15, s14, s11
 8005636:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80056ac <__kernel_cosf+0xb4>
 800563a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800563e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80056b0 <__kernel_cosf+0xb8>
 8005642:	eee7 7a25 	vfma.f32	s15, s14, s11
 8005646:	eeb0 7a66 	vmov.f32	s14, s13
 800564a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800564e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8005652:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8005656:	ee67 6a25 	vmul.f32	s13, s14, s11
 800565a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800565e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005662:	dc04      	bgt.n	800566e <__kernel_cosf+0x76>
 8005664:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005668:	ee36 0a47 	vsub.f32	s0, s12, s14
 800566c:	4770      	bx	lr
 800566e:	4a11      	ldr	r2, [pc, #68]	; (80056b4 <__kernel_cosf+0xbc>)
 8005670:	4293      	cmp	r3, r2
 8005672:	bfda      	itte	le
 8005674:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8005678:	ee06 3a90 	vmovle	s13, r3
 800567c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8005680:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005684:	ee36 0a66 	vsub.f32	s0, s12, s13
 8005688:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800568c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005690:	4770      	bx	lr
 8005692:	eeb0 0a46 	vmov.f32	s0, s12
 8005696:	4770      	bx	lr
 8005698:	ad47d74e 	.word	0xad47d74e
 800569c:	310f74f6 	.word	0x310f74f6
 80056a0:	3d2aaaab 	.word	0x3d2aaaab
 80056a4:	3e999999 	.word	0x3e999999
 80056a8:	b493f27c 	.word	0xb493f27c
 80056ac:	37d00d01 	.word	0x37d00d01
 80056b0:	bab60b61 	.word	0xbab60b61
 80056b4:	3f480000 	.word	0x3f480000

080056b8 <__kernel_rem_pio2f>:
 80056b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056bc:	ed2d 8b04 	vpush	{d8-d9}
 80056c0:	b0d9      	sub	sp, #356	; 0x164
 80056c2:	4688      	mov	r8, r1
 80056c4:	9002      	str	r0, [sp, #8]
 80056c6:	49bb      	ldr	r1, [pc, #748]	; (80059b4 <__kernel_rem_pio2f+0x2fc>)
 80056c8:	9866      	ldr	r0, [sp, #408]	; 0x198
 80056ca:	9301      	str	r3, [sp, #4]
 80056cc:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 80056d0:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 80056d4:	1e59      	subs	r1, r3, #1
 80056d6:	1d13      	adds	r3, r2, #4
 80056d8:	db27      	blt.n	800572a <__kernel_rem_pio2f+0x72>
 80056da:	f1b2 0b03 	subs.w	fp, r2, #3
 80056de:	bf48      	it	mi
 80056e0:	f102 0b04 	addmi.w	fp, r2, #4
 80056e4:	ea4f 00eb 	mov.w	r0, fp, asr #3
 80056e8:	1c45      	adds	r5, r0, #1
 80056ea:	00ec      	lsls	r4, r5, #3
 80056ec:	1a47      	subs	r7, r0, r1
 80056ee:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80059c4 <__kernel_rem_pio2f+0x30c>
 80056f2:	9403      	str	r4, [sp, #12]
 80056f4:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80056f8:	eb0a 0c01 	add.w	ip, sl, r1
 80056fc:	ae1c      	add	r6, sp, #112	; 0x70
 80056fe:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8005702:	2400      	movs	r4, #0
 8005704:	4564      	cmp	r4, ip
 8005706:	dd12      	ble.n	800572e <__kernel_rem_pio2f+0x76>
 8005708:	9b01      	ldr	r3, [sp, #4]
 800570a:	ac1c      	add	r4, sp, #112	; 0x70
 800570c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8005710:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8005714:	f04f 0c00 	mov.w	ip, #0
 8005718:	45d4      	cmp	ip, sl
 800571a:	dc27      	bgt.n	800576c <__kernel_rem_pio2f+0xb4>
 800571c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8005720:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80059c4 <__kernel_rem_pio2f+0x30c>
 8005724:	4627      	mov	r7, r4
 8005726:	2600      	movs	r6, #0
 8005728:	e016      	b.n	8005758 <__kernel_rem_pio2f+0xa0>
 800572a:	2000      	movs	r0, #0
 800572c:	e7dc      	b.n	80056e8 <__kernel_rem_pio2f+0x30>
 800572e:	42e7      	cmn	r7, r4
 8005730:	bf5d      	ittte	pl
 8005732:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8005736:	ee07 3a90 	vmovpl	s15, r3
 800573a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800573e:	eef0 7a47 	vmovmi.f32	s15, s14
 8005742:	ece6 7a01 	vstmia	r6!, {s15}
 8005746:	3401      	adds	r4, #1
 8005748:	e7dc      	b.n	8005704 <__kernel_rem_pio2f+0x4c>
 800574a:	ecf9 6a01 	vldmia	r9!, {s13}
 800574e:	ed97 7a00 	vldr	s14, [r7]
 8005752:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005756:	3601      	adds	r6, #1
 8005758:	428e      	cmp	r6, r1
 800575a:	f1a7 0704 	sub.w	r7, r7, #4
 800575e:	ddf4      	ble.n	800574a <__kernel_rem_pio2f+0x92>
 8005760:	eceb 7a01 	vstmia	fp!, {s15}
 8005764:	f10c 0c01 	add.w	ip, ip, #1
 8005768:	3404      	adds	r4, #4
 800576a:	e7d5      	b.n	8005718 <__kernel_rem_pio2f+0x60>
 800576c:	ab08      	add	r3, sp, #32
 800576e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8005772:	eddf 8a93 	vldr	s17, [pc, #588]	; 80059c0 <__kernel_rem_pio2f+0x308>
 8005776:	ed9f 9a91 	vldr	s18, [pc, #580]	; 80059bc <__kernel_rem_pio2f+0x304>
 800577a:	9304      	str	r3, [sp, #16]
 800577c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8005780:	4656      	mov	r6, sl
 8005782:	00b3      	lsls	r3, r6, #2
 8005784:	9305      	str	r3, [sp, #20]
 8005786:	ab58      	add	r3, sp, #352	; 0x160
 8005788:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800578c:	ac08      	add	r4, sp, #32
 800578e:	ab44      	add	r3, sp, #272	; 0x110
 8005790:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8005794:	46a4      	mov	ip, r4
 8005796:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800579a:	4637      	mov	r7, r6
 800579c:	2f00      	cmp	r7, #0
 800579e:	f1a0 0004 	sub.w	r0, r0, #4
 80057a2:	dc4f      	bgt.n	8005844 <__kernel_rem_pio2f+0x18c>
 80057a4:	4628      	mov	r0, r5
 80057a6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80057aa:	f000 fa8d 	bl	8005cc8 <scalbnf>
 80057ae:	eeb0 8a40 	vmov.f32	s16, s0
 80057b2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80057b6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80057ba:	f000 fa43 	bl	8005c44 <floorf>
 80057be:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80057c2:	eea0 8a67 	vfms.f32	s16, s0, s15
 80057c6:	2d00      	cmp	r5, #0
 80057c8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80057cc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80057d0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80057d4:	ee17 9a90 	vmov	r9, s15
 80057d8:	ee38 8a40 	vsub.f32	s16, s16, s0
 80057dc:	dd44      	ble.n	8005868 <__kernel_rem_pio2f+0x1b0>
 80057de:	f106 3cff 	add.w	ip, r6, #4294967295
 80057e2:	ab08      	add	r3, sp, #32
 80057e4:	f1c5 0e08 	rsb	lr, r5, #8
 80057e8:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80057ec:	fa47 f00e 	asr.w	r0, r7, lr
 80057f0:	4481      	add	r9, r0
 80057f2:	fa00 f00e 	lsl.w	r0, r0, lr
 80057f6:	1a3f      	subs	r7, r7, r0
 80057f8:	f1c5 0007 	rsb	r0, r5, #7
 80057fc:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8005800:	4107      	asrs	r7, r0
 8005802:	2f00      	cmp	r7, #0
 8005804:	dd3f      	ble.n	8005886 <__kernel_rem_pio2f+0x1ce>
 8005806:	f04f 0e00 	mov.w	lr, #0
 800580a:	f109 0901 	add.w	r9, r9, #1
 800580e:	4673      	mov	r3, lr
 8005810:	4576      	cmp	r6, lr
 8005812:	dc6b      	bgt.n	80058ec <__kernel_rem_pio2f+0x234>
 8005814:	2d00      	cmp	r5, #0
 8005816:	dd04      	ble.n	8005822 <__kernel_rem_pio2f+0x16a>
 8005818:	2d01      	cmp	r5, #1
 800581a:	d078      	beq.n	800590e <__kernel_rem_pio2f+0x256>
 800581c:	2d02      	cmp	r5, #2
 800581e:	f000 8081 	beq.w	8005924 <__kernel_rem_pio2f+0x26c>
 8005822:	2f02      	cmp	r7, #2
 8005824:	d12f      	bne.n	8005886 <__kernel_rem_pio2f+0x1ce>
 8005826:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800582a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800582e:	b353      	cbz	r3, 8005886 <__kernel_rem_pio2f+0x1ce>
 8005830:	4628      	mov	r0, r5
 8005832:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8005836:	f000 fa47 	bl	8005cc8 <scalbnf>
 800583a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800583e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8005842:	e020      	b.n	8005886 <__kernel_rem_pio2f+0x1ce>
 8005844:	ee60 7a28 	vmul.f32	s15, s0, s17
 8005848:	3f01      	subs	r7, #1
 800584a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800584e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005852:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8005856:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800585a:	ecac 0a01 	vstmia	ip!, {s0}
 800585e:	ed90 0a00 	vldr	s0, [r0]
 8005862:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005866:	e799      	b.n	800579c <__kernel_rem_pio2f+0xe4>
 8005868:	d105      	bne.n	8005876 <__kernel_rem_pio2f+0x1be>
 800586a:	1e70      	subs	r0, r6, #1
 800586c:	ab08      	add	r3, sp, #32
 800586e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8005872:	11ff      	asrs	r7, r7, #7
 8005874:	e7c5      	b.n	8005802 <__kernel_rem_pio2f+0x14a>
 8005876:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800587a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800587e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005882:	da31      	bge.n	80058e8 <__kernel_rem_pio2f+0x230>
 8005884:	2700      	movs	r7, #0
 8005886:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800588a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800588e:	f040 809b 	bne.w	80059c8 <__kernel_rem_pio2f+0x310>
 8005892:	1e74      	subs	r4, r6, #1
 8005894:	46a4      	mov	ip, r4
 8005896:	2000      	movs	r0, #0
 8005898:	45d4      	cmp	ip, sl
 800589a:	da4a      	bge.n	8005932 <__kernel_rem_pio2f+0x27a>
 800589c:	2800      	cmp	r0, #0
 800589e:	d07a      	beq.n	8005996 <__kernel_rem_pio2f+0x2de>
 80058a0:	ab08      	add	r3, sp, #32
 80058a2:	3d08      	subs	r5, #8
 80058a4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f000 8081 	beq.w	80059b0 <__kernel_rem_pio2f+0x2f8>
 80058ae:	4628      	mov	r0, r5
 80058b0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80058b4:	00a5      	lsls	r5, r4, #2
 80058b6:	f000 fa07 	bl	8005cc8 <scalbnf>
 80058ba:	aa44      	add	r2, sp, #272	; 0x110
 80058bc:	1d2b      	adds	r3, r5, #4
 80058be:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80059c0 <__kernel_rem_pio2f+0x308>
 80058c2:	18d1      	adds	r1, r2, r3
 80058c4:	4622      	mov	r2, r4
 80058c6:	2a00      	cmp	r2, #0
 80058c8:	f280 80ae 	bge.w	8005a28 <__kernel_rem_pio2f+0x370>
 80058cc:	4622      	mov	r2, r4
 80058ce:	2a00      	cmp	r2, #0
 80058d0:	f2c0 80cc 	blt.w	8005a6c <__kernel_rem_pio2f+0x3b4>
 80058d4:	a944      	add	r1, sp, #272	; 0x110
 80058d6:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 80058da:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 80059b8 <__kernel_rem_pio2f+0x300>
 80058de:	eddf 7a39 	vldr	s15, [pc, #228]	; 80059c4 <__kernel_rem_pio2f+0x30c>
 80058e2:	2000      	movs	r0, #0
 80058e4:	1aa1      	subs	r1, r4, r2
 80058e6:	e0b6      	b.n	8005a56 <__kernel_rem_pio2f+0x39e>
 80058e8:	2702      	movs	r7, #2
 80058ea:	e78c      	b.n	8005806 <__kernel_rem_pio2f+0x14e>
 80058ec:	6820      	ldr	r0, [r4, #0]
 80058ee:	b94b      	cbnz	r3, 8005904 <__kernel_rem_pio2f+0x24c>
 80058f0:	b118      	cbz	r0, 80058fa <__kernel_rem_pio2f+0x242>
 80058f2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80058f6:	6020      	str	r0, [r4, #0]
 80058f8:	2001      	movs	r0, #1
 80058fa:	f10e 0e01 	add.w	lr, lr, #1
 80058fe:	3404      	adds	r4, #4
 8005900:	4603      	mov	r3, r0
 8005902:	e785      	b.n	8005810 <__kernel_rem_pio2f+0x158>
 8005904:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8005908:	6020      	str	r0, [r4, #0]
 800590a:	4618      	mov	r0, r3
 800590c:	e7f5      	b.n	80058fa <__kernel_rem_pio2f+0x242>
 800590e:	1e74      	subs	r4, r6, #1
 8005910:	a808      	add	r0, sp, #32
 8005912:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8005916:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800591a:	f10d 0c20 	add.w	ip, sp, #32
 800591e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8005922:	e77e      	b.n	8005822 <__kernel_rem_pio2f+0x16a>
 8005924:	1e74      	subs	r4, r6, #1
 8005926:	a808      	add	r0, sp, #32
 8005928:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800592c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8005930:	e7f3      	b.n	800591a <__kernel_rem_pio2f+0x262>
 8005932:	ab08      	add	r3, sp, #32
 8005934:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8005938:	f10c 3cff 	add.w	ip, ip, #4294967295
 800593c:	4318      	orrs	r0, r3
 800593e:	e7ab      	b.n	8005898 <__kernel_rem_pio2f+0x1e0>
 8005940:	f10c 0c01 	add.w	ip, ip, #1
 8005944:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8005948:	2c00      	cmp	r4, #0
 800594a:	d0f9      	beq.n	8005940 <__kernel_rem_pio2f+0x288>
 800594c:	9b05      	ldr	r3, [sp, #20]
 800594e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8005952:	eb0d 0003 	add.w	r0, sp, r3
 8005956:	9b01      	ldr	r3, [sp, #4]
 8005958:	18f4      	adds	r4, r6, r3
 800595a:	ab1c      	add	r3, sp, #112	; 0x70
 800595c:	1c77      	adds	r7, r6, #1
 800595e:	384c      	subs	r0, #76	; 0x4c
 8005960:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005964:	4466      	add	r6, ip
 8005966:	42be      	cmp	r6, r7
 8005968:	f6ff af0b 	blt.w	8005782 <__kernel_rem_pio2f+0xca>
 800596c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8005970:	f8dd e008 	ldr.w	lr, [sp, #8]
 8005974:	ee07 3a90 	vmov	s15, r3
 8005978:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800597c:	f04f 0c00 	mov.w	ip, #0
 8005980:	ece4 7a01 	vstmia	r4!, {s15}
 8005984:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80059c4 <__kernel_rem_pio2f+0x30c>
 8005988:	46a1      	mov	r9, r4
 800598a:	458c      	cmp	ip, r1
 800598c:	dd07      	ble.n	800599e <__kernel_rem_pio2f+0x2e6>
 800598e:	ece0 7a01 	vstmia	r0!, {s15}
 8005992:	3701      	adds	r7, #1
 8005994:	e7e7      	b.n	8005966 <__kernel_rem_pio2f+0x2ae>
 8005996:	9804      	ldr	r0, [sp, #16]
 8005998:	f04f 0c01 	mov.w	ip, #1
 800599c:	e7d2      	b.n	8005944 <__kernel_rem_pio2f+0x28c>
 800599e:	ecfe 6a01 	vldmia	lr!, {s13}
 80059a2:	ed39 7a01 	vldmdb	r9!, {s14}
 80059a6:	f10c 0c01 	add.w	ip, ip, #1
 80059aa:	eee6 7a87 	vfma.f32	s15, s13, s14
 80059ae:	e7ec      	b.n	800598a <__kernel_rem_pio2f+0x2d2>
 80059b0:	3c01      	subs	r4, #1
 80059b2:	e775      	b.n	80058a0 <__kernel_rem_pio2f+0x1e8>
 80059b4:	0800634c 	.word	0x0800634c
 80059b8:	08006320 	.word	0x08006320
 80059bc:	43800000 	.word	0x43800000
 80059c0:	3b800000 	.word	0x3b800000
 80059c4:	00000000 	.word	0x00000000
 80059c8:	9b03      	ldr	r3, [sp, #12]
 80059ca:	eeb0 0a48 	vmov.f32	s0, s16
 80059ce:	1a98      	subs	r0, r3, r2
 80059d0:	f000 f97a 	bl	8005cc8 <scalbnf>
 80059d4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80059bc <__kernel_rem_pio2f+0x304>
 80059d8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80059dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059e0:	db19      	blt.n	8005a16 <__kernel_rem_pio2f+0x35e>
 80059e2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80059c0 <__kernel_rem_pio2f+0x308>
 80059e6:	ee60 7a27 	vmul.f32	s15, s0, s15
 80059ea:	aa08      	add	r2, sp, #32
 80059ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059f0:	1c74      	adds	r4, r6, #1
 80059f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059f6:	3508      	adds	r5, #8
 80059f8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80059fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a00:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005a04:	ee10 3a10 	vmov	r3, s0
 8005a08:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8005a0c:	ee17 3a90 	vmov	r3, s15
 8005a10:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8005a14:	e74b      	b.n	80058ae <__kernel_rem_pio2f+0x1f6>
 8005a16:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005a1a:	aa08      	add	r2, sp, #32
 8005a1c:	ee10 3a10 	vmov	r3, s0
 8005a20:	4634      	mov	r4, r6
 8005a22:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8005a26:	e742      	b.n	80058ae <__kernel_rem_pio2f+0x1f6>
 8005a28:	a808      	add	r0, sp, #32
 8005a2a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8005a2e:	9001      	str	r0, [sp, #4]
 8005a30:	ee07 0a90 	vmov	s15, r0
 8005a34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a38:	3a01      	subs	r2, #1
 8005a3a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005a3e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005a42:	ed61 7a01 	vstmdb	r1!, {s15}
 8005a46:	e73e      	b.n	80058c6 <__kernel_rem_pio2f+0x20e>
 8005a48:	ecfc 6a01 	vldmia	ip!, {s13}
 8005a4c:	ecb6 7a01 	vldmia	r6!, {s14}
 8005a50:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005a54:	3001      	adds	r0, #1
 8005a56:	4550      	cmp	r0, sl
 8005a58:	dc01      	bgt.n	8005a5e <__kernel_rem_pio2f+0x3a6>
 8005a5a:	4288      	cmp	r0, r1
 8005a5c:	ddf4      	ble.n	8005a48 <__kernel_rem_pio2f+0x390>
 8005a5e:	a858      	add	r0, sp, #352	; 0x160
 8005a60:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005a64:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8005a68:	3a01      	subs	r2, #1
 8005a6a:	e730      	b.n	80058ce <__kernel_rem_pio2f+0x216>
 8005a6c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8005a6e:	2a02      	cmp	r2, #2
 8005a70:	dc09      	bgt.n	8005a86 <__kernel_rem_pio2f+0x3ce>
 8005a72:	2a00      	cmp	r2, #0
 8005a74:	dc2a      	bgt.n	8005acc <__kernel_rem_pio2f+0x414>
 8005a76:	d043      	beq.n	8005b00 <__kernel_rem_pio2f+0x448>
 8005a78:	f009 0007 	and.w	r0, r9, #7
 8005a7c:	b059      	add	sp, #356	; 0x164
 8005a7e:	ecbd 8b04 	vpop	{d8-d9}
 8005a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a86:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8005a88:	2b03      	cmp	r3, #3
 8005a8a:	d1f5      	bne.n	8005a78 <__kernel_rem_pio2f+0x3c0>
 8005a8c:	ab30      	add	r3, sp, #192	; 0xc0
 8005a8e:	442b      	add	r3, r5
 8005a90:	461a      	mov	r2, r3
 8005a92:	4619      	mov	r1, r3
 8005a94:	4620      	mov	r0, r4
 8005a96:	2800      	cmp	r0, #0
 8005a98:	f1a1 0104 	sub.w	r1, r1, #4
 8005a9c:	dc51      	bgt.n	8005b42 <__kernel_rem_pio2f+0x48a>
 8005a9e:	4621      	mov	r1, r4
 8005aa0:	2901      	cmp	r1, #1
 8005aa2:	f1a2 0204 	sub.w	r2, r2, #4
 8005aa6:	dc5c      	bgt.n	8005b62 <__kernel_rem_pio2f+0x4aa>
 8005aa8:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80059c4 <__kernel_rem_pio2f+0x30c>
 8005aac:	3304      	adds	r3, #4
 8005aae:	2c01      	cmp	r4, #1
 8005ab0:	dc67      	bgt.n	8005b82 <__kernel_rem_pio2f+0x4ca>
 8005ab2:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8005ab6:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8005aba:	2f00      	cmp	r7, #0
 8005abc:	d167      	bne.n	8005b8e <__kernel_rem_pio2f+0x4d6>
 8005abe:	edc8 6a00 	vstr	s13, [r8]
 8005ac2:	ed88 7a01 	vstr	s14, [r8, #4]
 8005ac6:	edc8 7a02 	vstr	s15, [r8, #8]
 8005aca:	e7d5      	b.n	8005a78 <__kernel_rem_pio2f+0x3c0>
 8005acc:	aa30      	add	r2, sp, #192	; 0xc0
 8005ace:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 80059c4 <__kernel_rem_pio2f+0x30c>
 8005ad2:	4413      	add	r3, r2
 8005ad4:	4622      	mov	r2, r4
 8005ad6:	2a00      	cmp	r2, #0
 8005ad8:	da24      	bge.n	8005b24 <__kernel_rem_pio2f+0x46c>
 8005ada:	b34f      	cbz	r7, 8005b30 <__kernel_rem_pio2f+0x478>
 8005adc:	eef1 7a47 	vneg.f32	s15, s14
 8005ae0:	edc8 7a00 	vstr	s15, [r8]
 8005ae4:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8005ae8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005aec:	aa31      	add	r2, sp, #196	; 0xc4
 8005aee:	2301      	movs	r3, #1
 8005af0:	429c      	cmp	r4, r3
 8005af2:	da20      	bge.n	8005b36 <__kernel_rem_pio2f+0x47e>
 8005af4:	b10f      	cbz	r7, 8005afa <__kernel_rem_pio2f+0x442>
 8005af6:	eef1 7a67 	vneg.f32	s15, s15
 8005afa:	edc8 7a01 	vstr	s15, [r8, #4]
 8005afe:	e7bb      	b.n	8005a78 <__kernel_rem_pio2f+0x3c0>
 8005b00:	aa30      	add	r2, sp, #192	; 0xc0
 8005b02:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 80059c4 <__kernel_rem_pio2f+0x30c>
 8005b06:	4413      	add	r3, r2
 8005b08:	2c00      	cmp	r4, #0
 8005b0a:	da05      	bge.n	8005b18 <__kernel_rem_pio2f+0x460>
 8005b0c:	b10f      	cbz	r7, 8005b12 <__kernel_rem_pio2f+0x45a>
 8005b0e:	eef1 7a67 	vneg.f32	s15, s15
 8005b12:	edc8 7a00 	vstr	s15, [r8]
 8005b16:	e7af      	b.n	8005a78 <__kernel_rem_pio2f+0x3c0>
 8005b18:	ed33 7a01 	vldmdb	r3!, {s14}
 8005b1c:	3c01      	subs	r4, #1
 8005b1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b22:	e7f1      	b.n	8005b08 <__kernel_rem_pio2f+0x450>
 8005b24:	ed73 7a01 	vldmdb	r3!, {s15}
 8005b28:	3a01      	subs	r2, #1
 8005b2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b2e:	e7d2      	b.n	8005ad6 <__kernel_rem_pio2f+0x41e>
 8005b30:	eef0 7a47 	vmov.f32	s15, s14
 8005b34:	e7d4      	b.n	8005ae0 <__kernel_rem_pio2f+0x428>
 8005b36:	ecb2 7a01 	vldmia	r2!, {s14}
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b40:	e7d6      	b.n	8005af0 <__kernel_rem_pio2f+0x438>
 8005b42:	edd1 7a00 	vldr	s15, [r1]
 8005b46:	edd1 6a01 	vldr	s13, [r1, #4]
 8005b4a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005b4e:	3801      	subs	r0, #1
 8005b50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b54:	ed81 7a00 	vstr	s14, [r1]
 8005b58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b5c:	edc1 7a01 	vstr	s15, [r1, #4]
 8005b60:	e799      	b.n	8005a96 <__kernel_rem_pio2f+0x3de>
 8005b62:	edd2 7a00 	vldr	s15, [r2]
 8005b66:	edd2 6a01 	vldr	s13, [r2, #4]
 8005b6a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005b6e:	3901      	subs	r1, #1
 8005b70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b74:	ed82 7a00 	vstr	s14, [r2]
 8005b78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b7c:	edc2 7a01 	vstr	s15, [r2, #4]
 8005b80:	e78e      	b.n	8005aa0 <__kernel_rem_pio2f+0x3e8>
 8005b82:	ed33 7a01 	vldmdb	r3!, {s14}
 8005b86:	3c01      	subs	r4, #1
 8005b88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b8c:	e78f      	b.n	8005aae <__kernel_rem_pio2f+0x3f6>
 8005b8e:	eef1 6a66 	vneg.f32	s13, s13
 8005b92:	eeb1 7a47 	vneg.f32	s14, s14
 8005b96:	edc8 6a00 	vstr	s13, [r8]
 8005b9a:	ed88 7a01 	vstr	s14, [r8, #4]
 8005b9e:	eef1 7a67 	vneg.f32	s15, s15
 8005ba2:	e790      	b.n	8005ac6 <__kernel_rem_pio2f+0x40e>

08005ba4 <__kernel_sinf>:
 8005ba4:	ee10 3a10 	vmov	r3, s0
 8005ba8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bac:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8005bb0:	da04      	bge.n	8005bbc <__kernel_sinf+0x18>
 8005bb2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005bb6:	ee17 3a90 	vmov	r3, s15
 8005bba:	b35b      	cbz	r3, 8005c14 <__kernel_sinf+0x70>
 8005bbc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005bc0:	eddf 7a15 	vldr	s15, [pc, #84]	; 8005c18 <__kernel_sinf+0x74>
 8005bc4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8005c1c <__kernel_sinf+0x78>
 8005bc8:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005bcc:	eddf 7a14 	vldr	s15, [pc, #80]	; 8005c20 <__kernel_sinf+0x7c>
 8005bd0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005bd4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8005c24 <__kernel_sinf+0x80>
 8005bd8:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005bdc:	eddf 7a12 	vldr	s15, [pc, #72]	; 8005c28 <__kernel_sinf+0x84>
 8005be0:	ee60 6a07 	vmul.f32	s13, s0, s14
 8005be4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005be8:	b930      	cbnz	r0, 8005bf8 <__kernel_sinf+0x54>
 8005bea:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8005c2c <__kernel_sinf+0x88>
 8005bee:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005bf2:	eea6 0a26 	vfma.f32	s0, s12, s13
 8005bf6:	4770      	bx	lr
 8005bf8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005bfc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005c00:	eee0 7a86 	vfma.f32	s15, s1, s12
 8005c04:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8005c08:	eddf 7a09 	vldr	s15, [pc, #36]	; 8005c30 <__kernel_sinf+0x8c>
 8005c0c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8005c10:	ee30 0a60 	vsub.f32	s0, s0, s1
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	2f2ec9d3 	.word	0x2f2ec9d3
 8005c1c:	b2d72f34 	.word	0xb2d72f34
 8005c20:	3638ef1b 	.word	0x3638ef1b
 8005c24:	b9500d01 	.word	0xb9500d01
 8005c28:	3c088889 	.word	0x3c088889
 8005c2c:	be2aaaab 	.word	0xbe2aaaab
 8005c30:	3e2aaaab 	.word	0x3e2aaaab

08005c34 <fabsf>:
 8005c34:	ee10 3a10 	vmov	r3, s0
 8005c38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c3c:	ee00 3a10 	vmov	s0, r3
 8005c40:	4770      	bx	lr
	...

08005c44 <floorf>:
 8005c44:	ee10 3a10 	vmov	r3, s0
 8005c48:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005c4c:	3a7f      	subs	r2, #127	; 0x7f
 8005c4e:	2a16      	cmp	r2, #22
 8005c50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005c54:	dc2a      	bgt.n	8005cac <floorf+0x68>
 8005c56:	2a00      	cmp	r2, #0
 8005c58:	da11      	bge.n	8005c7e <floorf+0x3a>
 8005c5a:	eddf 7a18 	vldr	s15, [pc, #96]	; 8005cbc <floorf+0x78>
 8005c5e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005c62:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c6a:	dd05      	ble.n	8005c78 <floorf+0x34>
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	da23      	bge.n	8005cb8 <floorf+0x74>
 8005c70:	4a13      	ldr	r2, [pc, #76]	; (8005cc0 <floorf+0x7c>)
 8005c72:	2900      	cmp	r1, #0
 8005c74:	bf18      	it	ne
 8005c76:	4613      	movne	r3, r2
 8005c78:	ee00 3a10 	vmov	s0, r3
 8005c7c:	4770      	bx	lr
 8005c7e:	4911      	ldr	r1, [pc, #68]	; (8005cc4 <floorf+0x80>)
 8005c80:	4111      	asrs	r1, r2
 8005c82:	420b      	tst	r3, r1
 8005c84:	d0fa      	beq.n	8005c7c <floorf+0x38>
 8005c86:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8005cbc <floorf+0x78>
 8005c8a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005c8e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c96:	ddef      	ble.n	8005c78 <floorf+0x34>
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	bfbe      	ittt	lt
 8005c9c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8005ca0:	fa40 f202 	asrlt.w	r2, r0, r2
 8005ca4:	189b      	addlt	r3, r3, r2
 8005ca6:	ea23 0301 	bic.w	r3, r3, r1
 8005caa:	e7e5      	b.n	8005c78 <floorf+0x34>
 8005cac:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8005cb0:	d3e4      	bcc.n	8005c7c <floorf+0x38>
 8005cb2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005cb6:	4770      	bx	lr
 8005cb8:	2300      	movs	r3, #0
 8005cba:	e7dd      	b.n	8005c78 <floorf+0x34>
 8005cbc:	7149f2ca 	.word	0x7149f2ca
 8005cc0:	bf800000 	.word	0xbf800000
 8005cc4:	007fffff 	.word	0x007fffff

08005cc8 <scalbnf>:
 8005cc8:	ee10 3a10 	vmov	r3, s0
 8005ccc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8005cd0:	d025      	beq.n	8005d1e <scalbnf+0x56>
 8005cd2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005cd6:	d302      	bcc.n	8005cde <scalbnf+0x16>
 8005cd8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005cdc:	4770      	bx	lr
 8005cde:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8005ce2:	d122      	bne.n	8005d2a <scalbnf+0x62>
 8005ce4:	4b2a      	ldr	r3, [pc, #168]	; (8005d90 <scalbnf+0xc8>)
 8005ce6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8005d94 <scalbnf+0xcc>
 8005cea:	4298      	cmp	r0, r3
 8005cec:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005cf0:	db16      	blt.n	8005d20 <scalbnf+0x58>
 8005cf2:	ee10 3a10 	vmov	r3, s0
 8005cf6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005cfa:	3a19      	subs	r2, #25
 8005cfc:	4402      	add	r2, r0
 8005cfe:	2afe      	cmp	r2, #254	; 0xfe
 8005d00:	dd15      	ble.n	8005d2e <scalbnf+0x66>
 8005d02:	ee10 3a10 	vmov	r3, s0
 8005d06:	eddf 7a24 	vldr	s15, [pc, #144]	; 8005d98 <scalbnf+0xd0>
 8005d0a:	eddf 6a24 	vldr	s13, [pc, #144]	; 8005d9c <scalbnf+0xd4>
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	eeb0 7a67 	vmov.f32	s14, s15
 8005d14:	bfb8      	it	lt
 8005d16:	eef0 7a66 	vmovlt.f32	s15, s13
 8005d1a:	ee27 0a27 	vmul.f32	s0, s14, s15
 8005d1e:	4770      	bx	lr
 8005d20:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8005da0 <scalbnf+0xd8>
 8005d24:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005d28:	4770      	bx	lr
 8005d2a:	0dd2      	lsrs	r2, r2, #23
 8005d2c:	e7e6      	b.n	8005cfc <scalbnf+0x34>
 8005d2e:	2a00      	cmp	r2, #0
 8005d30:	dd06      	ble.n	8005d40 <scalbnf+0x78>
 8005d32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005d36:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8005d3a:	ee00 3a10 	vmov	s0, r3
 8005d3e:	4770      	bx	lr
 8005d40:	f112 0f16 	cmn.w	r2, #22
 8005d44:	da1a      	bge.n	8005d7c <scalbnf+0xb4>
 8005d46:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005d4a:	4298      	cmp	r0, r3
 8005d4c:	ee10 3a10 	vmov	r3, s0
 8005d50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d54:	dd0a      	ble.n	8005d6c <scalbnf+0xa4>
 8005d56:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005d98 <scalbnf+0xd0>
 8005d5a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005d9c <scalbnf+0xd4>
 8005d5e:	eef0 7a40 	vmov.f32	s15, s0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	bf18      	it	ne
 8005d66:	eeb0 0a47 	vmovne.f32	s0, s14
 8005d6a:	e7db      	b.n	8005d24 <scalbnf+0x5c>
 8005d6c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8005da0 <scalbnf+0xd8>
 8005d70:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8005da4 <scalbnf+0xdc>
 8005d74:	eef0 7a40 	vmov.f32	s15, s0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	e7f3      	b.n	8005d64 <scalbnf+0x9c>
 8005d7c:	3219      	adds	r2, #25
 8005d7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005d82:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8005d86:	eddf 7a08 	vldr	s15, [pc, #32]	; 8005da8 <scalbnf+0xe0>
 8005d8a:	ee07 3a10 	vmov	s14, r3
 8005d8e:	e7c4      	b.n	8005d1a <scalbnf+0x52>
 8005d90:	ffff3cb0 	.word	0xffff3cb0
 8005d94:	4c000000 	.word	0x4c000000
 8005d98:	7149f2ca 	.word	0x7149f2ca
 8005d9c:	f149f2ca 	.word	0xf149f2ca
 8005da0:	0da24260 	.word	0x0da24260
 8005da4:	8da24260 	.word	0x8da24260
 8005da8:	33000000 	.word	0x33000000

08005dac <_init>:
 8005dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dae:	bf00      	nop
 8005db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005db2:	bc08      	pop	{r3}
 8005db4:	469e      	mov	lr, r3
 8005db6:	4770      	bx	lr

08005db8 <_fini>:
 8005db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dba:	bf00      	nop
 8005dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dbe:	bc08      	pop	{r3}
 8005dc0:	469e      	mov	lr, r3
 8005dc2:	4770      	bx	lr
