
HEPL-Footware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000612c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  080062c0  080062c0  000162c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006650  08006650  0002139c  2**0
                  CONTENTS
  4 .ARM          00000000  08006650  08006650  0002139c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006650  08006650  0002139c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006650  08006650  00016650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006654  08006654  00016654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000139c  20000000  08006658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000718  2000139c  080079f4  0002139c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ab4  080079f4  00021ab4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002139c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d783  00000000  00000000  000213cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000258f  00000000  00000000  0002eb4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000064fc  00000000  00000000  000310de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a20  00000000  00000000  000375e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000950  00000000  00000000  00038000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000248dd  00000000  00000000  00038950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011791  00000000  00000000  0005d22d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf899  00000000  00000000  0006e9be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013e257  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000025fc  00000000  00000000  0013e2a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000139c 	.word	0x2000139c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080062a4 	.word	0x080062a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200013a0 	.word	0x200013a0
 80001cc:	080062a4 	.word	0x080062a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <IMU_convertAccel>:
	IMU_writeRegister(IMU, buf, 1);

}

float IMU_convertAccel(uint8_t H_byte, uint8_t L_byte) {
	int16_t reading = (int16_t)(H_byte << 8) + L_byte;
 8000c0c:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8000c10:	b209      	sxth	r1, r1

	// (Full-scale val / Max LSB val) * reading (LSB) = Accel (g)
	return XL_SCALE_FACTOR * reading;
 8000c12:	ee07 1a90 	vmov	s15, r1
 8000c16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8000c1a:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8000c24 <IMU_convertAccel+0x18>
 8000c1e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8000c22:	4770      	bx	lr
 8000c24:	3b1cd806 	.word	0x3b1cd806

08000c28 <IMU_convertGyro>:

float IMU_convertGyro(uint8_t H_byte, uint8_t L_byte) {
	int16_t reading = (int16_t)(H_byte << 8) + L_byte;
 8000c28:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8000c2c:	b209      	sxth	r1, r1

	// (Full-scale val / Max LSB val) * reading (LSB) = Accel (g)
	return GYRO_SCALE_FACTOR * reading;
 8000c2e:	ee07 1a90 	vmov	s15, r1
 8000c32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8000c36:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8000c40 <IMU_convertGyro+0x18>
 8000c3a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8000c3e:	4770      	bx	lr
 8000c40:	3cfa0000 	.word	0x3cfa0000

08000c44 <IMU_chipSelect>:
	__enable_irq();

	return status;
}

void IMU_chipSelect(uint8_t chipID) {
 8000c44:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOB, (1 << chipID), 0); // PB0,1,2 for IMU 0,1,2
 8000c46:	2101      	movs	r1, #1
 8000c48:	4081      	lsls	r1, r0
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	b289      	uxth	r1, r1
 8000c4e:	4802      	ldr	r0, [pc, #8]	; (8000c58 <IMU_chipSelect+0x14>)
 8000c50:	f001 fd4c 	bl	80026ec <HAL_GPIO_WritePin>
}
 8000c54:	bd08      	pop	{r3, pc}
 8000c56:	bf00      	nop
 8000c58:	48000400 	.word	0x48000400

08000c5c <IMU_chipRelease>:

void IMU_chipRelease(uint8_t chipID) {
 8000c5c:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOB, (1 << chipID), 1); // PB0,1,2 for IMU 0,1,2
 8000c5e:	2201      	movs	r2, #1
 8000c60:	fa02 f100 	lsl.w	r1, r2, r0
 8000c64:	b289      	uxth	r1, r1
 8000c66:	4802      	ldr	r0, [pc, #8]	; (8000c70 <IMU_chipRelease+0x14>)
 8000c68:	f001 fd40 	bl	80026ec <HAL_GPIO_WritePin>
}
 8000c6c:	bd08      	pop	{r3, pc}
 8000c6e:	bf00      	nop
 8000c70:	48000400 	.word	0x48000400

08000c74 <IMU_readRegister>:
HAL_StatusTypeDef IMU_readRegister(IMU* IMU, uint8_t reg_addr, uint8_t* rx_buf, int num_bytes) {
 8000c74:	b570      	push	{r4, r5, r6, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	4604      	mov	r4, r0
 8000c7a:	4615      	mov	r5, r2
 8000c7c:	461e      	mov	r6, r3
	uint8_t reg_buffer[1] = {reg_addr | 0x80};
 8000c7e:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8000c82:	f88d 1004 	strb.w	r1, [sp, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c86:	b672      	cpsid	i
	IMU_chipSelect(IMU->chipID);
 8000c88:	79c0      	ldrb	r0, [r0, #7]
 8000c8a:	f7ff ffdb 	bl	8000c44 <IMU_chipSelect>
	HAL_SPI_Transmit(IMU->hspi, (uint8_t *)reg_buffer, 1, SPI_TIMEOUT);
 8000c8e:	2301      	movs	r3, #1
 8000c90:	461a      	mov	r2, r3
 8000c92:	a901      	add	r1, sp, #4
 8000c94:	6820      	ldr	r0, [r4, #0]
 8000c96:	f002 fbee 	bl	8003476 <HAL_SPI_Transmit>
	status = HAL_SPI_Receive(IMU->hspi, (uint8_t *)rx_buf, num_bytes, SPI_TIMEOUT);
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	b2b2      	uxth	r2, r6
 8000c9e:	4629      	mov	r1, r5
 8000ca0:	6820      	ldr	r0, [r4, #0]
 8000ca2:	f002 fe58 	bl	8003956 <HAL_SPI_Receive>
 8000ca6:	4605      	mov	r5, r0
	IMU_chipRelease(IMU->chipID);
 8000ca8:	79e0      	ldrb	r0, [r4, #7]
 8000caa:	f7ff ffd7 	bl	8000c5c <IMU_chipRelease>
  __ASM volatile ("cpsie i" : : : "memory");
 8000cae:	b662      	cpsie	i
}
 8000cb0:	4628      	mov	r0, r5
 8000cb2:	b002      	add	sp, #8
 8000cb4:	bd70      	pop	{r4, r5, r6, pc}

08000cb6 <IMU_readSensorData>:
void IMU_readSensorData(IMU* IMU, SensorData* data) {
 8000cb6:	b510      	push	{r4, lr}
 8000cb8:	b084      	sub	sp, #16
 8000cba:	460c      	mov	r4, r1
	IMU_readRegister(IMU, OUTX_L_G, buf, 12);
 8000cbc:	230c      	movs	r3, #12
 8000cbe:	aa01      	add	r2, sp, #4
 8000cc0:	2122      	movs	r1, #34	; 0x22
 8000cc2:	f7ff ffd7 	bl	8000c74 <IMU_readRegister>
	data->G_X = IMU_convertGyro(buf[1], buf[0]);
 8000cc6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8000cca:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8000cce:	f7ff ffab 	bl	8000c28 <IMU_convertGyro>
 8000cd2:	ed84 0a03 	vstr	s0, [r4, #12]
	data->G_Y = IMU_convertGyro(buf[3], buf[2]);
 8000cd6:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8000cda:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000cde:	f7ff ffa3 	bl	8000c28 <IMU_convertGyro>
 8000ce2:	ed84 0a04 	vstr	s0, [r4, #16]
	data->G_Z = IMU_convertGyro(buf[5], buf[4]);
 8000ce6:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8000cea:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8000cee:	f7ff ff9b 	bl	8000c28 <IMU_convertGyro>
 8000cf2:	ed84 0a05 	vstr	s0, [r4, #20]
	data->XL_X = IMU_convertAccel(buf[7], buf[6]);
 8000cf6:	f89d 100a 	ldrb.w	r1, [sp, #10]
 8000cfa:	f89d 000b 	ldrb.w	r0, [sp, #11]
 8000cfe:	f7ff ff85 	bl	8000c0c <IMU_convertAccel>
 8000d02:	ed84 0a00 	vstr	s0, [r4]
	data->XL_Y = IMU_convertAccel(buf[9], buf[8]);
 8000d06:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8000d0a:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8000d0e:	f7ff ff7d 	bl	8000c0c <IMU_convertAccel>
 8000d12:	ed84 0a01 	vstr	s0, [r4, #4]
	data->XL_Z = IMU_convertAccel(buf[11], buf[10]);
 8000d16:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8000d1a:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8000d1e:	f7ff ff75 	bl	8000c0c <IMU_convertAccel>
 8000d22:	ed84 0a02 	vstr	s0, [r4, #8]
}
 8000d26:	b004      	add	sp, #16
 8000d28:	bd10      	pop	{r4, pc}

08000d2a <IMU_writeRegister>:
HAL_StatusTypeDef IMU_writeRegister(IMU* IMU, uint8_t* tx_buf, int num_bytes) {
 8000d2a:	b570      	push	{r4, r5, r6, lr}
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460e      	mov	r6, r1
 8000d30:	4615      	mov	r5, r2
  __ASM volatile ("cpsid i" : : : "memory");
 8000d32:	b672      	cpsid	i
	IMU_chipSelect(IMU->chipID);
 8000d34:	79c0      	ldrb	r0, [r0, #7]
 8000d36:	f7ff ff85 	bl	8000c44 <IMU_chipSelect>
	status = HAL_SPI_Transmit(IMU->hspi, (uint8_t *)tx_buf, num_bytes + 1, SPI_TIMEOUT);
 8000d3a:	1c6a      	adds	r2, r5, #1
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	b292      	uxth	r2, r2
 8000d40:	4631      	mov	r1, r6
 8000d42:	6820      	ldr	r0, [r4, #0]
 8000d44:	f002 fb97 	bl	8003476 <HAL_SPI_Transmit>
 8000d48:	4605      	mov	r5, r0
	IMU_chipRelease(IMU->chipID);
 8000d4a:	79e0      	ldrb	r0, [r4, #7]
 8000d4c:	f7ff ff86 	bl	8000c5c <IMU_chipRelease>
  __ASM volatile ("cpsie i" : : : "memory");
 8000d50:	b662      	cpsie	i
}
 8000d52:	4628      	mov	r0, r5
 8000d54:	bd70      	pop	{r4, r5, r6, pc}
	...

08000d58 <IMU_init>:
void IMU_init(SPI_HandleTypeDef* hspi, IMU* IMU, uint8_t chipID) {
 8000d58:	b510      	push	{r4, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	460c      	mov	r4, r1
	IMU->hspi = hspi;
 8000d5e:	6008      	str	r0, [r1, #0]
	IMU->X_offset = IMU_offsets[3*chipID + 0];
 8000d60:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8000d64:	492f      	ldr	r1, [pc, #188]	; (8000e24 <IMU_init+0xcc>)
 8000d66:	56c8      	ldrsb	r0, [r1, r3]
 8000d68:	7120      	strb	r0, [r4, #4]
	IMU->Y_offset = IMU_offsets[3*chipID + 1];
 8000d6a:	1c58      	adds	r0, r3, #1
 8000d6c:	5608      	ldrsb	r0, [r1, r0]
 8000d6e:	7160      	strb	r0, [r4, #5]
	IMU->Z_offset = IMU_offsets[3*chipID + 2];
 8000d70:	3302      	adds	r3, #2
 8000d72:	56cb      	ldrsb	r3, [r1, r3]
 8000d74:	71a3      	strb	r3, [r4, #6]
	IMU->chipID = chipID;
 8000d76:	71e2      	strb	r2, [r4, #7]
	buf[0] = CTRL3_C;
 8000d78:	2312      	movs	r3, #18
 8000d7a:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = 0x04;
 8000d7e:	2304      	movs	r3, #4
 8000d80:	f88d 3005 	strb.w	r3, [sp, #5]
	IMU_writeRegister(IMU, buf, 1);
 8000d84:	2201      	movs	r2, #1
 8000d86:	eb0d 0103 	add.w	r1, sp, r3
 8000d8a:	4620      	mov	r0, r4
 8000d8c:	f7ff ffcd 	bl	8000d2a <IMU_writeRegister>
	IMU_readRegister(IMU, WHO_AM_I, buf, 1);
 8000d90:	2301      	movs	r3, #1
 8000d92:	aa01      	add	r2, sp, #4
 8000d94:	210f      	movs	r1, #15
 8000d96:	4620      	mov	r0, r4
 8000d98:	f7ff ff6c 	bl	8000c74 <IMU_readRegister>
	assert(buf[0] == WHO_I_AM_ID); // Crash if not connected properly
 8000d9c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000da0:	2b6a      	cmp	r3, #106	; 0x6a
 8000da2:	d138      	bne.n	8000e16 <IMU_init+0xbe>
	buf[0] = CTRL1_XL;
 8000da4:	2310      	movs	r3, #16
 8000da6:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = 0x4C;
 8000daa:	234c      	movs	r3, #76	; 0x4c
 8000dac:	f88d 3005 	strb.w	r3, [sp, #5]
	IMU_writeRegister(IMU, buf, 1);
 8000db0:	2201      	movs	r2, #1
 8000db2:	a901      	add	r1, sp, #4
 8000db4:	4620      	mov	r0, r4
 8000db6:	f7ff ffb8 	bl	8000d2a <IMU_writeRegister>
	buf[0] = CTRL2_G;
 8000dba:	2311      	movs	r3, #17
 8000dbc:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = 0x48;
 8000dc0:	2348      	movs	r3, #72	; 0x48
 8000dc2:	f88d 3005 	strb.w	r3, [sp, #5]
	IMU_writeRegister(IMU, buf, 1);
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	a901      	add	r1, sp, #4
 8000dca:	4620      	mov	r0, r4
 8000dcc:	f7ff ffad 	bl	8000d2a <IMU_writeRegister>
	buf[0] = INT2_CTRL;
 8000dd0:	230e      	movs	r3, #14
 8000dd2:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = 0x03;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	f88d 3005 	strb.w	r3, [sp, #5]
	IMU_writeRegister(IMU, buf, 1);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	a901      	add	r1, sp, #4
 8000de0:	4620      	mov	r0, r4
 8000de2:	f7ff ffa2 	bl	8000d2a <IMU_writeRegister>
	buf[0] = CTRL5_C;
 8000de6:	2314      	movs	r3, #20
 8000de8:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = 0x60;
 8000dec:	2360      	movs	r3, #96	; 0x60
 8000dee:	f88d 3005 	strb.w	r3, [sp, #5]
	IMU_writeRegister(IMU, buf, 1);
 8000df2:	2201      	movs	r2, #1
 8000df4:	a901      	add	r1, sp, #4
 8000df6:	4620      	mov	r0, r4
 8000df8:	f7ff ff97 	bl	8000d2a <IMU_writeRegister>
	buf[0] = CTRL6_C;
 8000dfc:	2315      	movs	r3, #21
 8000dfe:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = 0x00;
 8000e02:	2300      	movs	r3, #0
 8000e04:	f88d 3005 	strb.w	r3, [sp, #5]
	IMU_writeRegister(IMU, buf, 1);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	a901      	add	r1, sp, #4
 8000e0c:	4620      	mov	r0, r4
 8000e0e:	f7ff ff8c 	bl	8000d2a <IMU_writeRegister>
}
 8000e12:	b004      	add	sp, #16
 8000e14:	bd10      	pop	{r4, pc}
	assert(buf[0] == WHO_I_AM_ID); // Crash if not connected properly
 8000e16:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <IMU_init+0xd0>)
 8000e18:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <IMU_init+0xd4>)
 8000e1a:	2120      	movs	r1, #32
 8000e1c:	4804      	ldr	r0, [pc, #16]	; (8000e30 <IMU_init+0xd8>)
 8000e1e:	f003 f949 	bl	80040b4 <__assert_func>
 8000e22:	bf00      	nop
 8000e24:	20000000 	.word	0x20000000
 8000e28:	080062c0 	.word	0x080062c0
 8000e2c:	080062ec 	.word	0x080062ec
 8000e30:	080062d8 	.word	0x080062d8

08000e34 <IMU_zero>:

void IMU_zero(IMU* imu0, IMU* imu1, IMU* imu2) {
 8000e34:	b570      	push	{r4, r5, r6, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	460d      	mov	r5, r1
 8000e3a:	4614      	mov	r4, r2
	uint8_t buf[12];

	buf[0] = X_OFS_USR;
 8000e3c:	2673      	movs	r6, #115	; 0x73
 8000e3e:	f88d 6004 	strb.w	r6, [sp, #4]
	buf[1] = imu0->X_offset;
 8000e42:	7902      	ldrb	r2, [r0, #4]
 8000e44:	f88d 2005 	strb.w	r2, [sp, #5]
	buf[2] = imu0->Y_offset;
 8000e48:	7942      	ldrb	r2, [r0, #5]
 8000e4a:	f88d 2006 	strb.w	r2, [sp, #6]
	buf[3] = imu0->Z_offset;
 8000e4e:	7983      	ldrb	r3, [r0, #6]
 8000e50:	f88d 3007 	strb.w	r3, [sp, #7]
	IMU_writeRegister(imu0, buf, 3);
 8000e54:	2203      	movs	r2, #3
 8000e56:	a901      	add	r1, sp, #4
 8000e58:	f7ff ff67 	bl	8000d2a <IMU_writeRegister>

	buf[0] = X_OFS_USR;
 8000e5c:	f88d 6004 	strb.w	r6, [sp, #4]
	buf[1] = imu1->X_offset;
 8000e60:	792b      	ldrb	r3, [r5, #4]
 8000e62:	f88d 3005 	strb.w	r3, [sp, #5]
	buf[2] = imu1->Y_offset;
 8000e66:	796b      	ldrb	r3, [r5, #5]
 8000e68:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = imu1->Z_offset;
 8000e6c:	79ab      	ldrb	r3, [r5, #6]
 8000e6e:	f88d 3007 	strb.w	r3, [sp, #7]
	IMU_writeRegister(imu1, buf, 3);
 8000e72:	2203      	movs	r2, #3
 8000e74:	a901      	add	r1, sp, #4
 8000e76:	4628      	mov	r0, r5
 8000e78:	f7ff ff57 	bl	8000d2a <IMU_writeRegister>

	buf[0] = X_OFS_USR;
 8000e7c:	f88d 6004 	strb.w	r6, [sp, #4]
	buf[1] = imu2->X_offset;
 8000e80:	7923      	ldrb	r3, [r4, #4]
 8000e82:	f88d 3005 	strb.w	r3, [sp, #5]
	buf[2] = imu2->Y_offset;
 8000e86:	7963      	ldrb	r3, [r4, #5]
 8000e88:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = imu2->Z_offset;
 8000e8c:	79a3      	ldrb	r3, [r4, #6]
 8000e8e:	f88d 3007 	strb.w	r3, [sp, #7]
	IMU_writeRegister(imu2, buf, 3);
 8000e92:	2203      	movs	r2, #3
 8000e94:	a901      	add	r1, sp, #4
 8000e96:	4620      	mov	r0, r4
 8000e98:	f7ff ff47 	bl	8000d2a <IMU_writeRegister>

}
 8000e9c:	b004      	add	sp, #16
 8000e9e:	bd70      	pop	{r4, r5, r6, pc}

08000ea0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ea4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea6:	2400      	movs	r4, #0
 8000ea8:	9403      	str	r4, [sp, #12]
 8000eaa:	9404      	str	r4, [sp, #16]
 8000eac:	9405      	str	r4, [sp, #20]
 8000eae:	9406      	str	r4, [sp, #24]
 8000eb0:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eb2:	4b58      	ldr	r3, [pc, #352]	; (8001014 <MX_GPIO_Init+0x174>)
 8000eb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000eb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000eba:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ebc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ebe:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000ec2:	9200      	str	r2, [sp, #0]
 8000ec4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ec8:	f042 0201 	orr.w	r2, r2, #1
 8000ecc:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ece:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ed0:	f002 0201 	and.w	r2, r2, #1
 8000ed4:	9201      	str	r2, [sp, #4]
 8000ed6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000eda:	f042 0202 	orr.w	r2, r2, #2
 8000ede:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	9302      	str	r3, [sp, #8]
 8000ee8:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU1_CS_Pin|IMU2_CS_Pin|IMU3_CS_Pin|FLASH_CS_Pin, GPIO_PIN_RESET);
 8000eea:	4e4b      	ldr	r6, [pc, #300]	; (8001018 <MX_GPIO_Init+0x178>)
 8000eec:	4622      	mov	r2, r4
 8000eee:	f242 0107 	movw	r1, #8199	; 0x2007
 8000ef2:	4630      	mov	r0, r6
 8000ef4:	f001 fbfa 	bl	80026ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XBEE_CS_GPIO_Port, XBEE_CS_Pin, GPIO_PIN_RESET);
 8000ef8:	4622      	mov	r2, r4
 8000efa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000efe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f02:	f001 fbf3 	bl	80026ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f06:	f8df a114 	ldr.w	sl, [pc, #276]	; 800101c <MX_GPIO_Init+0x17c>
 8000f0a:	4622      	mov	r2, r4
 8000f0c:	2108      	movs	r1, #8
 8000f0e:	4650      	mov	r0, sl
 8000f10:	f001 fbec 	bl	80026ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MAG_INT_Pin MAG_INT_TRG_Pin IMU3_INT1_Pin IMU3_INT2_Pin
                           IMU2_INT1_Pin IMU2_INT2_Pin IMU1_INT1_Pin IMU1_INT2_Pin */
  GPIO_InitStruct.Pin = MAG_INT_Pin|MAG_INT_TRG_Pin|IMU3_INT1_Pin|IMU3_INT2_Pin
 8000f14:	f641 631d 	movw	r3, #7709	; 0x1e1d
 8000f18:	9303      	str	r3, [sp, #12]
                          |IMU2_INT1_Pin|IMU2_INT2_Pin|IMU1_INT1_Pin|IMU1_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f1a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f1e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f22:	a903      	add	r1, sp, #12
 8000f24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f28:	f001 fafc 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU1_CS_Pin IMU2_CS_Pin IMU3_CS_Pin FLASH_CS_Pin */
  GPIO_InitStruct.Pin = IMU1_CS_Pin|IMU2_CS_Pin|IMU3_CS_Pin|FLASH_CS_Pin;
 8000f2c:	f242 0307 	movw	r3, #8199	; 0x2007
 8000f30:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f32:	f04f 0901 	mov.w	r9, #1
 8000f36:	f8cd 9010 	str.w	r9, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3e:	a903      	add	r1, sp, #12
 8000f40:	4630      	mov	r0, r6
 8000f42:	f001 faef 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8000f46:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8000f4a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	f04f 0802 	mov.w	r8, #2
 8000f50:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f56:	2503      	movs	r5, #3
 8000f58:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f5a:	2305      	movs	r3, #5
 8000f5c:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5e:	a903      	add	r1, sp, #12
 8000f60:	4630      	mov	r0, r6
 8000f62:	f001 fadf 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pin : XBEE_CS_Pin */
  GPIO_InitStruct.Pin = XBEE_CS_Pin;
 8000f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f6a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6c:	f8cd 9010 	str.w	r9, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(XBEE_CS_GPIO_Port, &GPIO_InitStruct);
 8000f74:	a903      	add	r1, sp, #12
 8000f76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7a:	f001 fad3 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000f7e:	2338      	movs	r3, #56	; 0x38
 8000f80:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f82:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f88:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f8a:	2706      	movs	r7, #6
 8000f8c:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8e:	a903      	add	r1, sp, #12
 8000f90:	4630      	mov	r0, r6
 8000f92:	f001 fac7 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_ATTN_Pin */
  GPIO_InitStruct.Pin = SPI3_ATTN_Pin;
 8000f96:	2380      	movs	r3, #128	; 0x80
 8000f98:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9a:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(SPI3_ATTN_GPIO_Port, &GPIO_InitStruct);
 8000f9e:	a903      	add	r1, sp, #12
 8000fa0:	4630      	mov	r0, r6
 8000fa2:	f001 fabf 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fa6:	2308      	movs	r3, #8
 8000fa8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000faa:	f8cd 9010 	str.w	r9, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fae:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fb4:	a903      	add	r1, sp, #12
 8000fb6:	4650      	mov	r0, sl
 8000fb8:	f001 fab4 	bl	8002524 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 4, 0);
 8000fbc:	4622      	mov	r2, r4
 8000fbe:	2104      	movs	r1, #4
 8000fc0:	4638      	mov	r0, r7
 8000fc2:	f001 fa55 	bl	8002470 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000fc6:	4638      	mov	r0, r7
 8000fc8:	f001 fa8a 	bl	80024e0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 3, 0);
 8000fcc:	4622      	mov	r2, r4
 8000fce:	4629      	mov	r1, r5
 8000fd0:	2009      	movs	r0, #9
 8000fd2:	f001 fa4d 	bl	8002470 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000fd6:	2009      	movs	r0, #9
 8000fd8:	f001 fa82 	bl	80024e0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 3, 0);
 8000fdc:	4622      	mov	r2, r4
 8000fde:	4629      	mov	r1, r5
 8000fe0:	200a      	movs	r0, #10
 8000fe2:	f001 fa45 	bl	8002470 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000fe6:	200a      	movs	r0, #10
 8000fe8:	f001 fa7a 	bl	80024e0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8000fec:	4622      	mov	r2, r4
 8000fee:	4629      	mov	r1, r5
 8000ff0:	2017      	movs	r0, #23
 8000ff2:	f001 fa3d 	bl	8002470 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ff6:	2017      	movs	r0, #23
 8000ff8:	f001 fa72 	bl	80024e0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000ffc:	4622      	mov	r2, r4
 8000ffe:	4629      	mov	r1, r5
 8001000:	2028      	movs	r0, #40	; 0x28
 8001002:	f001 fa35 	bl	8002470 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001006:	2028      	movs	r0, #40	; 0x28
 8001008:	f001 fa6a 	bl	80024e0 <HAL_NVIC_EnableIRQ>

}
 800100c:	b008      	add	sp, #32
 800100e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001012:	bf00      	nop
 8001014:	40021000 	.word	0x40021000
 8001018:	48000400 	.word	0x48000400
 800101c:	48001c00 	.word	0x48001c00

08001020 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8001020:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001022:	e7fe      	b.n	8001022 <Error_Handler+0x2>

08001024 <MX_SPI1_Init>:
{
 8001024:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 8001026:	480f      	ldr	r0, [pc, #60]	; (8001064 <MX_SPI1_Init+0x40>)
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <MX_SPI1_Init+0x44>)
 800102a:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800102c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001030:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001032:	2300      	movs	r3, #0
 8001034:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001036:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800103a:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800103c:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800103e:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001040:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001044:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001046:	2210      	movs	r2, #16
 8001048:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800104a:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800104c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800104e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001050:	2207      	movs	r2, #7
 8001052:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001054:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001056:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001058:	f002 f99e 	bl	8003398 <HAL_SPI_Init>
 800105c:	b900      	cbnz	r0, 8001060 <MX_SPI1_Init+0x3c>
}
 800105e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001060:	f7ff ffde 	bl	8001020 <Error_Handler>
 8001064:	2000141c 	.word	0x2000141c
 8001068:	40013000 	.word	0x40013000

0800106c <SystemClock_Config>:
{
 800106c:	b500      	push	{lr}
 800106e:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001070:	2244      	movs	r2, #68	; 0x44
 8001072:	2100      	movs	r1, #0
 8001074:	a805      	add	r0, sp, #20
 8001076:	f003 f887 	bl	8004188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800107a:	2300      	movs	r3, #0
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	9301      	str	r3, [sp, #4]
 8001080:	9302      	str	r3, [sp, #8]
 8001082:	9303      	str	r3, [sp, #12]
 8001084:	9304      	str	r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001086:	f44f 7000 	mov.w	r0, #512	; 0x200
 800108a:	f001 fb4b 	bl	8002724 <HAL_PWREx_ControlVoltageScaling>
 800108e:	b9d0      	cbnz	r0, 80010c6 <SystemClock_Config+0x5a>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001090:	2310      	movs	r3, #16
 8001092:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001094:	2301      	movs	r3, #1
 8001096:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 800109c:	2280      	movs	r2, #128	; 0x80
 800109e:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010a0:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a2:	a805      	add	r0, sp, #20
 80010a4:	f001 fc28 	bl	80028f8 <HAL_RCC_OscConfig>
 80010a8:	b978      	cbnz	r0, 80010ca <SystemClock_Config+0x5e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010aa:	230f      	movs	r3, #15
 80010ac:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80010ae:	2100      	movs	r1, #0
 80010b0:	9101      	str	r1, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b2:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010b4:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b6:	9104      	str	r1, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010b8:	4668      	mov	r0, sp
 80010ba:	f001 ff53 	bl	8002f64 <HAL_RCC_ClockConfig>
 80010be:	b930      	cbnz	r0, 80010ce <SystemClock_Config+0x62>
}
 80010c0:	b017      	add	sp, #92	; 0x5c
 80010c2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80010c6:	f7ff ffab 	bl	8001020 <Error_Handler>
    Error_Handler();
 80010ca:	f7ff ffa9 	bl	8001020 <Error_Handler>
    Error_Handler();
 80010ce:	f7ff ffa7 	bl	8001020 <Error_Handler>
	...

080010d4 <main>:
{
 80010d4:	b580      	push	{r7, lr}
  HAL_Init();
 80010d6:	f001 f991 	bl	80023fc <HAL_Init>
  SystemClock_Config();
 80010da:	f7ff ffc7 	bl	800106c <SystemClock_Config>
  MX_GPIO_Init();
 80010de:	f7ff fedf 	bl	8000ea0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80010e2:	f7ff ff9f 	bl	8001024 <MX_SPI1_Init>
  IMU_init(&hspi1, &IMU0, 0);
 80010e6:	4d1b      	ldr	r5, [pc, #108]	; (8001154 <main+0x80>)
 80010e8:	4c1b      	ldr	r4, [pc, #108]	; (8001158 <main+0x84>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	4629      	mov	r1, r5
 80010ee:	4620      	mov	r0, r4
 80010f0:	f7ff fe32 	bl	8000d58 <IMU_init>
  IMU_init(&hspi1, &IMU1, 1);
 80010f4:	4e19      	ldr	r6, [pc, #100]	; (800115c <main+0x88>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	4631      	mov	r1, r6
 80010fa:	4620      	mov	r0, r4
 80010fc:	f7ff fe2c 	bl	8000d58 <IMU_init>
  IMU_init(&hspi1, &IMU2, 2);
 8001100:	4f17      	ldr	r7, [pc, #92]	; (8001160 <main+0x8c>)
 8001102:	2202      	movs	r2, #2
 8001104:	4639      	mov	r1, r7
 8001106:	4620      	mov	r0, r4
 8001108:	f7ff fe26 	bl	8000d58 <IMU_init>
  init_processing();
 800110c:	f000 fdc0 	bl	8001c90 <init_processing>
  IMU_zero(&IMU0, &IMU1, &IMU2);
 8001110:	463a      	mov	r2, r7
 8001112:	4631      	mov	r1, r6
 8001114:	4628      	mov	r0, r5
 8001116:	f7ff fe8d 	bl	8000e34 <IMU_zero>
	  if (DRDY_flag || 1) {
 800111a:	4c12      	ldr	r4, [pc, #72]	; (8001164 <main+0x90>)
 800111c:	7823      	ldrb	r3, [r4, #0]
		  IMU_readSensorData(&IMU0, &IMU0_data);
 800111e:	4d12      	ldr	r5, [pc, #72]	; (8001168 <main+0x94>)
 8001120:	4629      	mov	r1, r5
 8001122:	480c      	ldr	r0, [pc, #48]	; (8001154 <main+0x80>)
 8001124:	f7ff fdc7 	bl	8000cb6 <IMU_readSensorData>
		  IMU_readSensorData(&IMU1, &IMU1_data);
 8001128:	4e10      	ldr	r6, [pc, #64]	; (800116c <main+0x98>)
 800112a:	4631      	mov	r1, r6
 800112c:	480b      	ldr	r0, [pc, #44]	; (800115c <main+0x88>)
 800112e:	f7ff fdc2 	bl	8000cb6 <IMU_readSensorData>
		  IMU_readSensorData(&IMU2, &IMU2_data);
 8001132:	490f      	ldr	r1, [pc, #60]	; (8001170 <main+0x9c>)
 8001134:	480a      	ldr	r0, [pc, #40]	; (8001160 <main+0x8c>)
 8001136:	f7ff fdbe 	bl	8000cb6 <IMU_readSensorData>
		  calculateCorrectedState(&IMU0_data, &IMU1_data, timeDelta);
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <main+0xa0>)
 800113c:	ed93 0a00 	vldr	s0, [r3]
 8001140:	4631      	mov	r1, r6
 8001142:	4628      	mov	r0, r5
 8001144:	f000 ff1e 	bl	8001f84 <calculateCorrectedState>
		  DRDY_flag = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	7023      	strb	r3, [r4, #0]
	  if (periodic_tx_flag) {
 800114c:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <main+0xa4>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	e7e3      	b.n	800111a <main+0x46>
 8001152:	bf00      	nop
 8001154:	200013bc 	.word	0x200013bc
 8001158:	2000141c 	.word	0x2000141c
 800115c:	200013dc 	.word	0x200013dc
 8001160:	200013fc 	.word	0x200013fc
 8001164:	200013b8 	.word	0x200013b8
 8001168:	200013c4 	.word	0x200013c4
 800116c:	200013e4 	.word	0x200013e4
 8001170:	20001404 	.word	0x20001404
 8001174:	2000000c 	.word	0x2000000c
 8001178:	20001480 	.word	0x20001480

0800117c <calculateRotationMatrix>:
	w_avg_b0_mag = (w_avg_b0_f32[0]*w_avg_b0_f32[0]) + (w_avg_b0_f32[1]*w_avg_b0_f32[1]) + (w_avg_b0_f32[2]*w_avg_b0_f32[2]);
	arm_sqrt_f32(w_avg_b0_mag, &w_avg_b0_mag);
}

void calculateRotationMatrix(
		float timeDelta) { // TODO Verify this
 800117c:	b510      	push	{r4, lr}
 800117e:	ed2d 8b02 	vpush	{d8}
 8001182:	b084      	sub	sp, #16

	// Determine change in rotation angle / 2 (units of radians)
	float rotation_angle_div_2 = w_avg_b0_mag * timeDelta * deg2rad / 2;
 8001184:	4b2d      	ldr	r3, [pc, #180]	; (800123c <calculateRotationMatrix+0xc0>)
 8001186:	ed93 8a00 	vldr	s16, [r3]
 800118a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800118e:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8001240 <calculateRotationMatrix+0xc4>
 8001192:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001196:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800119a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800119e:	ee17 4a90 	vmov	r4, s15

	float q1_3_scaling_term = (w_avg_b0_mag) ?
			(float)sin(rotation_angle_div_2) / w_avg_b0_mag : w_avg_b0_mag; // reduce number of calculations
 80011a2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80011a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011aa:	d00f      	beq.n	80011cc <calculateRotationMatrix+0x50>
 80011ac:	ee17 0a90 	vmov	r0, s15
 80011b0:	f7ff f9c2 	bl	8000538 <__aeabi_f2d>
 80011b4:	ec41 0b10 	vmov	d0, r0, r1
 80011b8:	f004 f806 	bl	80051c8 <sin>
 80011bc:	ec51 0b10 	vmov	r0, r1, d0
 80011c0:	f7ff fcd4 	bl	8000b6c <__aeabi_d2f>
 80011c4:	ee07 0a90 	vmov	s15, r0
 80011c8:	ee87 8a88 	vdiv.f32	s16, s15, s16

	// Determine change in rotation as quaternion
	float delta_q_f32[4];
	delta_q_f32[0] = (float)cos(rotation_angle_div_2);
 80011cc:	4620      	mov	r0, r4
 80011ce:	f7ff f9b3 	bl	8000538 <__aeabi_f2d>
 80011d2:	ec41 0b10 	vmov	d0, r0, r1
 80011d6:	f003 ffa3 	bl	8005120 <cos>
 80011da:	ec51 0b10 	vmov	r0, r1, d0
 80011de:	f7ff fcc5 	bl	8000b6c <__aeabi_d2f>
 80011e2:	9000      	str	r0, [sp, #0]
	delta_q_f32[1] = w_avg_b0_f32[0] * q1_3_scaling_term;
 80011e4:	4b17      	ldr	r3, [pc, #92]	; (8001244 <calculateRotationMatrix+0xc8>)
 80011e6:	edd3 7a00 	vldr	s15, [r3]
 80011ea:	ee67 7a88 	vmul.f32	s15, s15, s16
 80011ee:	edcd 7a01 	vstr	s15, [sp, #4]
	delta_q_f32[2] = w_avg_b0_f32[1] * q1_3_scaling_term;
 80011f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80011f6:	ee67 7a88 	vmul.f32	s15, s15, s16
 80011fa:	edcd 7a02 	vstr	s15, [sp, #8]
	delta_q_f32[3] = w_avg_b0_f32[2] * q1_3_scaling_term;
 80011fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8001202:	ee27 8a88 	vmul.f32	s16, s15, s16
 8001206:	ed8d 8a03 	vstr	s16, [sp, #12]

	arm_quaternion_normalize_f32(delta_q_f32, delta_q_f32, 1);	// q = q / |q|
 800120a:	2201      	movs	r2, #1
 800120c:	4669      	mov	r1, sp
 800120e:	4668      	mov	r0, sp
 8001210:	f002 fe77 	bl	8003f02 <arm_quaternion_normalize_f32>

	// Calculate new normalized quaternion
	arm_quaternion_product_single_f32(delta_q_f32, q_f32, q_f32); // q = q x delta_q
 8001214:	4c0c      	ldr	r4, [pc, #48]	; (8001248 <calculateRotationMatrix+0xcc>)
 8001216:	4622      	mov	r2, r4
 8001218:	4621      	mov	r1, r4
 800121a:	4668      	mov	r0, sp
 800121c:	f002 fec8 	bl	8003fb0 <arm_quaternion_product_single_f32>
	arm_quaternion_normalize_f32(q_f32, q_f32, 1);	// q = q / |q|
 8001220:	2201      	movs	r2, #1
 8001222:	4621      	mov	r1, r4
 8001224:	4620      	mov	r0, r4
 8001226:	f002 fe6c 	bl	8003f02 <arm_quaternion_normalize_f32>
	// Calculate rotation matrix from board frame to nav frame using quaternion
	arm_quaternion2rotation_f32(q_f32, rotation_b0_n_f32, 1);
 800122a:	2201      	movs	r2, #1
 800122c:	4907      	ldr	r1, [pc, #28]	; (800124c <calculateRotationMatrix+0xd0>)
 800122e:	4620      	mov	r0, r4
 8001230:	f002 fde6 	bl	8003e00 <arm_quaternion2rotation_f32>
	//printf("%f %f %f %f %f %f %f %f %f\n", rotation_b0_n_f32[0], rotation_b0_n_f32[1], rotation_b0_n_f32[2], rotation_b0_n_f32[3], rotation_b0_n_f32[4], rotation_b0_n_f32[5], rotation_b0_n_f32[6], rotation_b0_n_f32[7], rotation_b0_n_f32[8]);
}
 8001234:	b004      	add	sp, #16
 8001236:	ecbd 8b02 	vpop	{d8}
 800123a:	bd10      	pop	{r4, pc}
 800123c:	20001948 	.word	0x20001948
 8001240:	3c8efa35 	.word	0x3c8efa35
 8001244:	2000193c 	.word	0x2000193c
 8001248:	200012bc 	.word	0x200012bc
 800124c:	200018f0 	.word	0x200018f0

08001250 <calculateStateEstimation>:

void calculateStateEstimation(void) { // TODO Verify this
 8001250:	b500      	push	{lr}
 8001252:	b09d      	sub	sp, #116	; 0x74
	 *  Define Temporary Objects
	 */

	float temp1_f32[12];
	arm_matrix_instance_f32 temp1;
	arm_mat_init_f32(&temp1, 12, 1, temp1_f32); // temp for first term of sum, 12x1
 8001254:	ab10      	add	r3, sp, #64	; 0x40
 8001256:	2201      	movs	r2, #1
 8001258:	210c      	movs	r1, #12
 800125a:	a80e      	add	r0, sp, #56	; 0x38
 800125c:	f002 fc68 	bl	8003b30 <arm_mat_init_f32>

	float temp2_f32[12];
	arm_matrix_instance_f32 temp2;
	arm_mat_init_f32(&temp2, 12, 1, temp2_f32); // temp for second term of sum, 12x1
 8001260:	ab02      	add	r3, sp, #8
 8001262:	2201      	movs	r2, #1
 8001264:	210c      	movs	r1, #12
 8001266:	4668      	mov	r0, sp
 8001268:	f002 fc62 	bl	8003b30 <arm_mat_init_f32>

	/*
	 *  Calculation Section
	 */

	arm_mat_mult_f32(&F_matrix, &x_prev, &temp1); // F*x(k-1) --> (12x12) * (12x1)
 800126c:	aa0e      	add	r2, sp, #56	; 0x38
 800126e:	4919      	ldr	r1, [pc, #100]	; (80012d4 <calculateStateEstimation+0x84>)
 8001270:	4819      	ldr	r0, [pc, #100]	; (80012d8 <calculateStateEstimation+0x88>)
 8001272:	f002 fd57 	bl	8003d24 <arm_mat_mult_f32>

	arm_mat_mult_f32(&B_matrix, &u_curr, &temp2); // B*u(k) --> (12x6) * (6x1)
 8001276:	466a      	mov	r2, sp
 8001278:	4918      	ldr	r1, [pc, #96]	; (80012dc <calculateStateEstimation+0x8c>)
 800127a:	4819      	ldr	r0, [pc, #100]	; (80012e0 <calculateStateEstimation+0x90>)
 800127c:	f002 fd52 	bl	8003d24 <arm_mat_mult_f32>

	arm_mat_add_f32(&temp1, &temp2, &x_curr); // x(k) = F*x(k-1) + B*u(k)
 8001280:	4a18      	ldr	r2, [pc, #96]	; (80012e4 <calculateStateEstimation+0x94>)
 8001282:	4669      	mov	r1, sp
 8001284:	a80e      	add	r0, sp, #56	; 0x38
 8001286:	f002 fc3b 	bl	8003b00 <arm_mat_add_f32>

	prediction_f32[0] = (x_curr_f32[0] + x_curr_f32[3]) / 2;
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <calculateStateEstimation+0x98>)
 800128c:	ed93 7a00 	vldr	s14, [r3]
 8001290:	edd3 7a03 	vldr	s15, [r3, #12]
 8001294:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001298:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800129c:	ee27 7a26 	vmul.f32	s14, s14, s13
 80012a0:	4a12      	ldr	r2, [pc, #72]	; (80012ec <calculateStateEstimation+0x9c>)
 80012a2:	ed82 7a00 	vstr	s14, [r2]
	prediction_f32[1] = (x_curr_f32[1] + x_curr_f32[4]) / 2;
 80012a6:	ed93 7a01 	vldr	s14, [r3, #4]
 80012aa:	edd3 7a04 	vldr	s15, [r3, #16]
 80012ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012b2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80012b6:	ed82 7a01 	vstr	s14, [r2, #4]
	prediction_f32[2] = (x_curr_f32[2] + x_curr_f32[5]) / 2;
 80012ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80012be:	ed93 7a05 	vldr	s14, [r3, #20]
 80012c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80012ca:	edc2 7a02 	vstr	s15, [r2, #8]
}
 80012ce:	b01d      	add	sp, #116	; 0x74
 80012d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80012d4:	200019b8 	.word	0x200019b8
 80012d8:	2000148c 	.word	0x2000148c
 80012dc:	20001914 	.word	0x20001914
 80012e0:	20001484 	.word	0x20001484
 80012e4:	200019b0 	.word	0x200019b0
 80012e8:	200012cc 	.word	0x200012cc
 80012ec:	200018dc 	.word	0x200018dc

080012f0 <calculateStateEstimationErrorCovariance>:

void calculateStateEstimationErrorCovariance(void) {
 80012f0:	b510      	push	{r4, lr}
 80012f2:	f5ad 6d92 	sub.w	sp, sp, #1168	; 0x490
	 *  Define Temporary Objects
	 */

	float temp12x12_0_f32[144];
	arm_matrix_instance_f32 temp12x12_0;
	arm_mat_init_f32(&temp12x12_0, 12, 12, temp12x12_0_f32); // Temp 12x12 matrix
 80012f6:	ab94      	add	r3, sp, #592	; 0x250
 80012f8:	220c      	movs	r2, #12
 80012fa:	4611      	mov	r1, r2
 80012fc:	a892      	add	r0, sp, #584	; 0x248
 80012fe:	f002 fc17 	bl	8003b30 <arm_mat_init_f32>
	arm_mat_trans_f32(&F_matrix, &temp12x12_0);	// Initialize to transpose of F
 8001302:	4c0e      	ldr	r4, [pc, #56]	; (800133c <calculateStateEstimationErrorCovariance+0x4c>)
 8001304:	a992      	add	r1, sp, #584	; 0x248
 8001306:	4620      	mov	r0, r4
 8001308:	f002 fd5e 	bl	8003dc8 <arm_mat_trans_f32>

	float temp12x12_1_f32[144];
	arm_matrix_instance_f32 temp12x12_1;
	arm_mat_init_f32(&temp12x12_1, 12, 12, temp12x12_1_f32); // Temp 12x12 matrix
 800130c:	ab02      	add	r3, sp, #8
 800130e:	220c      	movs	r2, #12
 8001310:	4611      	mov	r1, r2
 8001312:	4668      	mov	r0, sp
 8001314:	f002 fc0c 	bl	8003b30 <arm_mat_init_f32>
	/*
	 *  Calculation Section
	 */

	arm_mat_mult_f32(&P_prev, &temp12x12_0, &temp12x12_1);	// P(k-1)*F^T --> (12x12) * (12x12)
 8001318:	466a      	mov	r2, sp
 800131a:	a992      	add	r1, sp, #584	; 0x248
 800131c:	4808      	ldr	r0, [pc, #32]	; (8001340 <calculateStateEstimationErrorCovariance+0x50>)
 800131e:	f002 fd01 	bl	8003d24 <arm_mat_mult_f32>

	arm_mat_mult_f32(&F_matrix, &temp12x12_1, &temp12x12_0);	// F*(P(k-1)*F^T) --> (12x12) * (12x12)
 8001322:	aa92      	add	r2, sp, #584	; 0x248
 8001324:	4669      	mov	r1, sp
 8001326:	4620      	mov	r0, r4
 8001328:	f002 fcfc 	bl	8003d24 <arm_mat_mult_f32>

	arm_mat_add_f32(&temp12x12_0, &Q_prev, &P_minus);	// P-(k) = (F*P(k-1)*F^T) + Q(k-1)
 800132c:	4a05      	ldr	r2, [pc, #20]	; (8001344 <calculateStateEstimationErrorCovariance+0x54>)
 800132e:	4906      	ldr	r1, [pc, #24]	; (8001348 <calculateStateEstimationErrorCovariance+0x58>)
 8001330:	a892      	add	r0, sp, #584	; 0x248
 8001332:	f002 fbe5 	bl	8003b00 <arm_mat_add_f32>

}
 8001336:	f50d 6d92 	add.w	sp, sp, #1168	; 0x490
 800133a:	bd10      	pop	{r4, pc}
 800133c:	2000148c 	.word	0x2000148c
 8001340:	20001824 	.word	0x20001824
 8001344:	2000181c 	.word	0x2000181c
 8001348:	2000182c 	.word	0x2000182c

0800134c <calculateGainMatrix>:

void calculateGainMatrix(
		arm_matrix_instance_f32* Ki, /*(12xN)*/
		arm_matrix_instance_f32* Hi, /*(Nx12)*/
		arm_matrix_instance_f32* Ri /*(NxN)*/) { // TODO Verify this
 800134c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001350:	b089      	sub	sp, #36	; 0x24
 8001352:	4605      	mov	r5, r0
 8001354:	460e      	mov	r6, r1
 8001356:	4693      	mov	fp, r2

	uint16_t N = Hi->numRows;
 8001358:	880c      	ldrh	r4, [r1, #0]

	/*
	 *  Define Temporary Objects
	 */

	float* temp12xN_0_f32 = (float*)malloc(12 * N * sizeof(float));
 800135a:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 800135e:	013f      	lsls	r7, r7, #4
 8001360:	4638      	mov	r0, r7
 8001362:	f002 ff01 	bl	8004168 <malloc>
 8001366:	4682      	mov	sl, r0
	arm_matrix_instance_f32 temp12xN_0;
	arm_mat_init_f32(&temp12xN_0, 12, N, temp12xN_0_f32); // temp matrix (12xN)
 8001368:	4603      	mov	r3, r0
 800136a:	4622      	mov	r2, r4
 800136c:	210c      	movs	r1, #12
 800136e:	a806      	add	r0, sp, #24
 8001370:	f002 fbde 	bl	8003b30 <arm_mat_init_f32>
	arm_mat_trans_f32(Hi, &temp12xN_0); // init to transpose of Hi
 8001374:	a906      	add	r1, sp, #24
 8001376:	4630      	mov	r0, r6
 8001378:	f002 fd26 	bl	8003dc8 <arm_mat_trans_f32>

	float* temp12xN_1_f32 = (float*)malloc(12 * N * sizeof(float));
 800137c:	4638      	mov	r0, r7
 800137e:	f002 fef3 	bl	8004168 <malloc>
 8001382:	4680      	mov	r8, r0
	arm_matrix_instance_f32 temp12xN_1;
	arm_mat_init_f32(&temp12xN_1, 12, N, temp12xN_1_f32); // temp matrix (12xN)
 8001384:	4603      	mov	r3, r0
 8001386:	4622      	mov	r2, r4
 8001388:	210c      	movs	r1, #12
 800138a:	a804      	add	r0, sp, #16
 800138c:	f002 fbd0 	bl	8003b30 <arm_mat_init_f32>

	float* tempNxN_0_f32 = (float*)malloc(N * N * sizeof(float));
 8001390:	fb04 f704 	mul.w	r7, r4, r4
 8001394:	00bf      	lsls	r7, r7, #2
 8001396:	4638      	mov	r0, r7
 8001398:	f002 fee6 	bl	8004168 <malloc>
 800139c:	4681      	mov	r9, r0
	arm_matrix_instance_f32 tempNxN_0;
	arm_mat_init_f32(&tempNxN_0, N, N, tempNxN_0_f32); // temp matrix (NxN)
 800139e:	4603      	mov	r3, r0
 80013a0:	4622      	mov	r2, r4
 80013a2:	4621      	mov	r1, r4
 80013a4:	a802      	add	r0, sp, #8
 80013a6:	f002 fbc3 	bl	8003b30 <arm_mat_init_f32>

	float* tempNxN_1_f32 = (float*)malloc(N * N * sizeof(float));
 80013aa:	4638      	mov	r0, r7
 80013ac:	f002 fedc 	bl	8004168 <malloc>
 80013b0:	4607      	mov	r7, r0
	arm_matrix_instance_f32 tempNxN_1;
	arm_mat_init_f32(&tempNxN_1, N, N, tempNxN_1_f32); // temp matrix (NxN)
 80013b2:	4603      	mov	r3, r0
 80013b4:	4622      	mov	r2, r4
 80013b6:	4621      	mov	r1, r4
 80013b8:	4668      	mov	r0, sp
 80013ba:	f002 fbb9 	bl	8003b30 <arm_mat_init_f32>

	/*
	 *  Calculation Section
	 */

	arm_mat_mult_f32(&P_minus, &temp12xN_0, &temp12xN_1);	// P-(k)*Hi^T --> (12x12) * (12xN)
 80013be:	aa04      	add	r2, sp, #16
 80013c0:	a906      	add	r1, sp, #24
 80013c2:	4824      	ldr	r0, [pc, #144]	; (8001454 <calculateGainMatrix+0x108>)
 80013c4:	f002 fcae 	bl	8003d24 <arm_mat_mult_f32>

	arm_mat_mult_f32(Hi, &temp12xN_1, &tempNxN_0);	// Hi*(P-(k)*Hi^T) --> (Nx12) * (12xN)
 80013c8:	aa02      	add	r2, sp, #8
 80013ca:	a904      	add	r1, sp, #16
 80013cc:	4630      	mov	r0, r6
 80013ce:	f002 fca9 	bl	8003d24 <arm_mat_mult_f32>

	arm_mat_add_f32(&tempNxN_0, Ri, &tempNxN_1);	// (Hi*P-(k)*Hi^T + Ri(k))
 80013d2:	466a      	mov	r2, sp
 80013d4:	4659      	mov	r1, fp
 80013d6:	a802      	add	r0, sp, #8
 80013d8:	f002 fb92 	bl	8003b00 <arm_mat_add_f32>

	arm_mat_inverse_f32(&tempNxN_1, &tempNxN_0);	// (Hi*P-(k)*Hi^T + Ri(k))^-1
 80013dc:	a902      	add	r1, sp, #8
 80013de:	4668      	mov	r0, sp
 80013e0:	f002 fbaa 	bl	8003b38 <arm_mat_inverse_f32>

	arm_mat_mult_f32(&temp12xN_1, &tempNxN_0, Ki);	// Ki(k) = P-(k)*Hi^T * (Hi*P-(k)*Hi^T + Ri(k))^-1 --> (12xN) * (NxN)
 80013e4:	462a      	mov	r2, r5
 80013e6:	a902      	add	r1, sp, #8
 80013e8:	a804      	add	r0, sp, #16
 80013ea:	f002 fc9b 	bl	8003d24 <arm_mat_mult_f32>
	/*
	 *  Cleanup Section
	 */

	// Free malloc'd memory
	free(temp12xN_0_f32);
 80013ee:	4650      	mov	r0, sl
 80013f0:	f002 fec2 	bl	8004178 <free>
	free(tempNxN_0_f32);
 80013f4:	4648      	mov	r0, r9
 80013f6:	f002 febf 	bl	8004178 <free>
	free(temp12xN_1_f32);
 80013fa:	4640      	mov	r0, r8
 80013fc:	f002 febc 	bl	8004178 <free>
	free(tempNxN_1_f32);
 8001400:	4638      	mov	r0, r7
 8001402:	f002 feb9 	bl	8004178 <free>

	gain_f32[0] = (Ki->pData[0] + Ki->pData[3]) / 2;
 8001406:	686b      	ldr	r3, [r5, #4]
 8001408:	ed93 7a00 	vldr	s14, [r3]
 800140c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001410:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001414:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001418:	ee27 7a26 	vmul.f32	s14, s14, s13
 800141c:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <calculateGainMatrix+0x10c>)
 800141e:	ed82 7a00 	vstr	s14, [r2]
	gain_f32[1] = (Ki->pData[1] + Ki->pData[4]) / 2;
 8001422:	ed93 7a01 	vldr	s14, [r3, #4]
 8001426:	edd3 7a04 	vldr	s15, [r3, #16]
 800142a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800142e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001432:	ed82 7a01 	vstr	s14, [r2, #4]
	gain_f32[2] = (Ki->pData[2] + Ki->pData[5]) / 2;
 8001436:	686b      	ldr	r3, [r5, #4]
 8001438:	edd3 7a02 	vldr	s15, [r3, #8]
 800143c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001440:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001444:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001448:	edc2 7a02 	vstr	s15, [r2, #8]
}
 800144c:	b009      	add	sp, #36	; 0x24
 800144e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001452:	bf00      	nop
 8001454:	2000181c 	.word	0x2000181c
 8001458:	200018b4 	.word	0x200018b4

0800145c <calculateOptimalStateEstimation>:
#define Z_THRES 0.1

void calculateOptimalStateEstimation(
		arm_matrix_instance_f32* Ki, /*(12xN)*/
		arm_matrix_instance_f32* Zi, /*(Nx1)*/
		arm_matrix_instance_f32* Hi /*(Nx12)*/) { // TODO Verify this
 800145c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001460:	b093      	sub	sp, #76	; 0x4c
 8001462:	4680      	mov	r8, r0
 8001464:	460e      	mov	r6, r1
 8001466:	4691      	mov	r9, r2

	uint16_t N = Zi->numRows;
 8001468:	880f      	ldrh	r7, [r1, #0]

	/*
	 *  Define Temporary Objects
	 */

	float* tempNx1_0_f32 = (float*)malloc(N * sizeof(float));
 800146a:	00bc      	lsls	r4, r7, #2
 800146c:	4620      	mov	r0, r4
 800146e:	f002 fe7b 	bl	8004168 <malloc>
 8001472:	4605      	mov	r5, r0
	arm_matrix_instance_f32 tempNx1_0;
	arm_mat_init_f32(&tempNx1_0, N, 1, tempNx1_0_f32); // Will temporarily store some operation results, (Nx1)
 8001474:	4603      	mov	r3, r0
 8001476:	2201      	movs	r2, #1
 8001478:	4639      	mov	r1, r7
 800147a:	a810      	add	r0, sp, #64	; 0x40
 800147c:	f002 fb58 	bl	8003b30 <arm_mat_init_f32>

	float* tempNx1_1_f32 = (float*)malloc(N * sizeof(float));
 8001480:	4620      	mov	r0, r4
 8001482:	f002 fe71 	bl	8004168 <malloc>
 8001486:	4604      	mov	r4, r0
	arm_matrix_instance_f32 tempNx1_1;
	arm_mat_init_f32(&tempNx1_1, N, 1, tempNx1_1_f32); // Will temporarily store some operation results, (Nx1)
 8001488:	4603      	mov	r3, r0
 800148a:	2201      	movs	r2, #1
 800148c:	4639      	mov	r1, r7
 800148e:	a80e      	add	r0, sp, #56	; 0x38
 8001490:	f002 fb4e 	bl	8003b30 <arm_mat_init_f32>

	float temp12x1_f32[12];
	arm_matrix_instance_f32 temp12x1;
	arm_mat_init_f32(&temp12x1, 12, 1, temp12x1_f32); // Will temporarily store some operation results, (12x1)
 8001494:	ab02      	add	r3, sp, #8
 8001496:	2201      	movs	r2, #1
 8001498:	210c      	movs	r1, #12
 800149a:	4668      	mov	r0, sp
 800149c:	f002 fb48 	bl	8003b30 <arm_mat_init_f32>

	/*
	 *  Calculation Section
	 */

	arm_mat_mult_f32(Hi, &x_curr, &tempNx1_0);	// Hi*x(k) --> (Nx12) * (12x1)
 80014a0:	4f1f      	ldr	r7, [pc, #124]	; (8001520 <calculateOptimalStateEstimation+0xc4>)
 80014a2:	aa10      	add	r2, sp, #64	; 0x40
 80014a4:	4639      	mov	r1, r7
 80014a6:	4648      	mov	r0, r9
 80014a8:	f002 fc3c 	bl	8003d24 <arm_mat_mult_f32>

	// Calculate correction factor
	arm_mat_sub_f32(Zi, &tempNx1_0, &tempNx1_1);	// (Zi(k) - Hi*x(k)) -> tempNx1
 80014ac:	aa0e      	add	r2, sp, #56	; 0x38
 80014ae:	a910      	add	r1, sp, #64	; 0x40
 80014b0:	4630      	mov	r0, r6
 80014b2:	f002 fc71 	bl	8003d98 <arm_mat_sub_f32>
//	printf("%f %f %f\n", tempNx1_f32[3], tempNx1_f32[4], tempNx1_f32[5]); // should be ideally zero

	// Weight correction factor by Kalman Gain
	arm_mat_mult_f32(Ki, &tempNx1_1, &temp12x1); // Ki(k) * (Zi(k) - Hi*x(k)) --> (12xN) * (Nx1) -> temp12x1
 80014b6:	466a      	mov	r2, sp
 80014b8:	a90e      	add	r1, sp, #56	; 0x38
 80014ba:	4640      	mov	r0, r8
 80014bc:	f002 fc32 	bl	8003d24 <arm_mat_mult_f32>

	correction_f32[0] = (temp12x1_f32[0] + temp12x1_f32[3]) / 2;
 80014c0:	ed9d 7a02 	vldr	s14, [sp, #8]
 80014c4:	eddd 7a05 	vldr	s15, [sp, #20]
 80014c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014cc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80014d0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80014d4:	4b13      	ldr	r3, [pc, #76]	; (8001524 <calculateOptimalStateEstimation+0xc8>)
 80014d6:	ed83 7a00 	vstr	s14, [r3]
	correction_f32[1] = (temp12x1_f32[1] + temp12x1_f32[4]) / 2;
 80014da:	ed9d 7a03 	vldr	s14, [sp, #12]
 80014de:	eddd 7a06 	vldr	s15, [sp, #24]
 80014e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014e6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80014ea:	ed83 7a01 	vstr	s14, [r3, #4]
	correction_f32[2] = (temp12x1_f32[2] + temp12x1_f32[5]) / 2;
 80014ee:	eddd 7a04 	vldr	s15, [sp, #16]
 80014f2:	ed9d 7a07 	vldr	s14, [sp, #28]
 80014f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80014fe:	edc3 7a02 	vstr	s15, [r3, #8]

//	printf("X_curr_before: %f \n", (x_curr_f32[0] + x_curr_f32[3]) / 2);
//	printf("Correction: %f \n", (temp12x1_f32[0] + temp12x1_f32[3]) / 2);

	// Add weighted correction factor
	arm_mat_add_f32(&x_curr, &temp12x1, &x_curr); // x(k) <= x_best(k) = x(k) + Ki(k) * (Zi(k) - Hi*x(k))
 8001502:	463a      	mov	r2, r7
 8001504:	4669      	mov	r1, sp
 8001506:	4638      	mov	r0, r7
 8001508:	f002 fafa 	bl	8003b00 <arm_mat_add_f32>
	/*
	 *  Cleanup Section
	 */

	// Free malloc'd memory
	free(tempNx1_0_f32);
 800150c:	4628      	mov	r0, r5
 800150e:	f002 fe33 	bl	8004178 <free>
	free(tempNx1_1_f32);
 8001512:	4620      	mov	r0, r4
 8001514:	f002 fe30 	bl	8004178 <free>
}
 8001518:	b013      	add	sp, #76	; 0x4c
 800151a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800151e:	bf00      	nop
 8001520:	200019b0 	.word	0x200019b0
 8001524:	200018a0 	.word	0x200018a0

08001528 <calculateOptimalEstimationErrorCovariance>:

void calculateOptimalEstimationErrorCovariance(
		arm_matrix_instance_f32* Ki, /*(12xN)*/
		arm_matrix_instance_f32* Hi, /*(Nx12)*/
		arm_matrix_instance_f32* Ri /*(NxN)*/) { // TODO Verify this
 8001528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800152c:	f6ad 1d34 	subw	sp, sp, #2356	; 0x934
 8001530:	4605      	mov	r5, r0
 8001532:	4688      	mov	r8, r1
 8001534:	4691      	mov	r9, r2

	uint16_t N = Hi->numRows;
 8001536:	880c      	ldrh	r4, [r1, #0]

	/*
	 *  Define Temporary Objects
	 */

	float* tempNx12_0_f32 = (float*)malloc(12 * N * sizeof(float));
 8001538:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 800153c:	013f      	lsls	r7, r7, #4
 800153e:	4638      	mov	r0, r7
 8001540:	f002 fe12 	bl	8004168 <malloc>
 8001544:	4606      	mov	r6, r0
	arm_matrix_instance_f32 tempNx12_0;
	arm_mat_init_f32(&tempNx12_0, N, 12, tempNx12_0_f32); // temp matrix (Nx12)
 8001546:	4603      	mov	r3, r0
 8001548:	220c      	movs	r2, #12
 800154a:	4621      	mov	r1, r4
 800154c:	f60d 1028 	addw	r0, sp, #2344	; 0x928
 8001550:	f002 faee 	bl	8003b30 <arm_mat_init_f32>
	arm_mat_trans_f32(Ki, &tempNx12_0); // init to transpose of Ki
 8001554:	f60d 1128 	addw	r1, sp, #2344	; 0x928
 8001558:	4628      	mov	r0, r5
 800155a:	f002 fc35 	bl	8003dc8 <arm_mat_trans_f32>

	float* temp12xN_0_f32 = (float*)malloc(12 * N * sizeof(float));
 800155e:	4638      	mov	r0, r7
 8001560:	f002 fe02 	bl	8004168 <malloc>
 8001564:	4607      	mov	r7, r0
	arm_matrix_instance_f32 temp12xN_0;
	arm_mat_init_f32(&temp12xN_0, 12, N, temp12xN_0_f32); // temp matrix (12xN)
 8001566:	4603      	mov	r3, r0
 8001568:	4622      	mov	r2, r4
 800156a:	210c      	movs	r1, #12
 800156c:	f50d 6012 	add.w	r0, sp, #2336	; 0x920
 8001570:	f002 fade 	bl	8003b30 <arm_mat_init_f32>

	float Identity12x12_f32[144] = {
 8001574:	f50d 64dc 	add.w	r4, sp, #1760	; 0x6e0
 8001578:	f44f 7210 	mov.w	r2, #576	; 0x240
 800157c:	2100      	movs	r1, #0
 800157e:	4620      	mov	r0, r4
 8001580:	f002 fe02 	bl	8004188 <memset>
 8001584:	f04f 5c7e 	mov.w	ip, #1065353216	; 0x3f800000
 8001588:	f8c4 c000 	str.w	ip, [r4]
 800158c:	f8c4 c034 	str.w	ip, [r4, #52]	; 0x34
 8001590:	f8c4 c068 	str.w	ip, [r4, #104]	; 0x68
 8001594:	f8c4 c09c 	str.w	ip, [r4, #156]	; 0x9c
 8001598:	f8c4 c0d0 	str.w	ip, [r4, #208]	; 0xd0
 800159c:	f8c4 c104 	str.w	ip, [r4, #260]	; 0x104
 80015a0:	f8c4 c138 	str.w	ip, [r4, #312]	; 0x138
 80015a4:	f8c4 c16c 	str.w	ip, [r4, #364]	; 0x16c
 80015a8:	f8c4 c1a0 	str.w	ip, [r4, #416]	; 0x1a0
 80015ac:	f8c4 c1d4 	str.w	ip, [r4, #468]	; 0x1d4
 80015b0:	f8c4 c208 	str.w	ip, [r4, #520]	; 0x208
 80015b4:	f8c4 c23c 	str.w	ip, [r4, #572]	; 0x23c
			0,0,0,	0,0,0,	0,0,0,	1,0,0,
			0,0,0,	0,0,0,	0,0,0,	0,1,0,
			0,0,0,	0,0,0,	0,0,0,	0,0,1,
	};
	arm_matrix_instance_f32 Identity12x12;
	arm_mat_init_f32(&Identity12x12, 12, 12, Identity12x12_f32); // 12x12 Identity matrix
 80015b8:	4623      	mov	r3, r4
 80015ba:	220c      	movs	r2, #12
 80015bc:	4611      	mov	r1, r2
 80015be:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
 80015c2:	f002 fab5 	bl	8003b30 <arm_mat_init_f32>

	float temp12x12_0_f32[144];
	arm_matrix_instance_f32 temp12x12_0;
	arm_mat_init_f32(&temp12x12_0, 12, 12, temp12x12_0_f32); // Temp 12x12 matrix 0
 80015c6:	f50d 6393 	add.w	r3, sp, #1176	; 0x498
 80015ca:	220c      	movs	r2, #12
 80015cc:	4611      	mov	r1, r2
 80015ce:	f50d 6092 	add.w	r0, sp, #1168	; 0x490
 80015d2:	f002 faad 	bl	8003b30 <arm_mat_init_f32>

	float temp12x12_1_f32[144];
	arm_matrix_instance_f32 temp12x12_1;
	arm_mat_init_f32(&temp12x12_1, 12, 12, temp12x12_1_f32); // Temp 12x12 matrix 1
 80015d6:	ab94      	add	r3, sp, #592	; 0x250
 80015d8:	220c      	movs	r2, #12
 80015da:	4611      	mov	r1, r2
 80015dc:	a892      	add	r0, sp, #584	; 0x248
 80015de:	f002 faa7 	bl	8003b30 <arm_mat_init_f32>

	float temp12x12_2_f32[144];
	arm_matrix_instance_f32 temp12x12_2;
	arm_mat_init_f32(&temp12x12_2, 12, 12, temp12x12_2_f32); // Temp 12x12 matrix 2
 80015e2:	ab02      	add	r3, sp, #8
 80015e4:	220c      	movs	r2, #12
 80015e6:	4611      	mov	r1, r2
 80015e8:	4668      	mov	r0, sp
 80015ea:	f002 faa1 	bl	8003b30 <arm_mat_init_f32>

	/*
	 *  Calculation Section
	 */

	arm_mat_mult_f32(Ki, Hi, &temp12x12_0);	// Ki(k)*Hi --> (12xN) * (Nx12)
 80015ee:	f50d 6292 	add.w	r2, sp, #1168	; 0x490
 80015f2:	4641      	mov	r1, r8
 80015f4:	4628      	mov	r0, r5
 80015f6:	f002 fb95 	bl	8003d24 <arm_mat_mult_f32>

	arm_mat_sub_f32(&Identity12x12, &temp12x12_0, &temp12x12_0); // I - (Ki(k)*Hi)
 80015fa:	f50d 6292 	add.w	r2, sp, #1168	; 0x490
 80015fe:	4611      	mov	r1, r2
 8001600:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
 8001604:	f002 fbc8 	bl	8003d98 <arm_mat_sub_f32>

	arm_mat_trans_f32(&temp12x12_0, &temp12x12_1); 	// I - (Ki(k)*Hi)^T
 8001608:	a992      	add	r1, sp, #584	; 0x248
 800160a:	f50d 6092 	add.w	r0, sp, #1168	; 0x490
 800160e:	f002 fbdb 	bl	8003dc8 <arm_mat_trans_f32>

	arm_mat_mult_f32(&temp12x12_0, &P_minus, &temp12x12_2);	// (I - Ki(k)*Hi)*P-(k) --> (12x12) * (12x12)
 8001612:	466a      	mov	r2, sp
 8001614:	4913      	ldr	r1, [pc, #76]	; (8001664 <calculateOptimalEstimationErrorCovariance+0x13c>)
 8001616:	f50d 6092 	add.w	r0, sp, #1168	; 0x490
 800161a:	f002 fb83 	bl	8003d24 <arm_mat_mult_f32>

	arm_mat_mult_f32(&temp12x12_2, &temp12x12_1, &temp12x12_0);	// (I - Ki(k)*Hi)*P-(k)*(I - (Ki(k)*Hi)^T
 800161e:	f50d 6292 	add.w	r2, sp, #1168	; 0x490
 8001622:	a992      	add	r1, sp, #584	; 0x248
 8001624:	4668      	mov	r0, sp
 8001626:	f002 fb7d 	bl	8003d24 <arm_mat_mult_f32>

	arm_mat_mult_f32(Ki, Ri, &temp12xN_0);	// Ki(k)*Ri --> (12xN) * (NxN)
 800162a:	f50d 6212 	add.w	r2, sp, #2336	; 0x920
 800162e:	4649      	mov	r1, r9
 8001630:	4628      	mov	r0, r5
 8001632:	f002 fb77 	bl	8003d24 <arm_mat_mult_f32>

	arm_mat_mult_f32(&temp12xN_0, &tempNx12_0, &temp12x12_1);	// Ki(k)*Ri*Ki(k)^T --> (12xN) * (Nx12)
 8001636:	aa92      	add	r2, sp, #584	; 0x248
 8001638:	f60d 1128 	addw	r1, sp, #2344	; 0x928
 800163c:	f50d 6012 	add.w	r0, sp, #2336	; 0x920
 8001640:	f002 fb70 	bl	8003d24 <arm_mat_mult_f32>

	arm_mat_add_f32(&temp12x12_0, &temp12x12_1, &P_curr);	// P(k) = (I - Ki(k)*Hi)*P-(k)*(I - (Ki(k)*Hi)^T + Ki(k)*Ri*Ki(k)^T
 8001644:	4a08      	ldr	r2, [pc, #32]	; (8001668 <calculateOptimalEstimationErrorCovariance+0x140>)
 8001646:	a992      	add	r1, sp, #584	; 0x248
 8001648:	f50d 6092 	add.w	r0, sp, #1168	; 0x490
 800164c:	f002 fa58 	bl	8003b00 <arm_mat_add_f32>

	/*
	 *  Cleanup Section
	 */

	free(temp12xN_0_f32);
 8001650:	4638      	mov	r0, r7
 8001652:	f002 fd91 	bl	8004178 <free>
	free(tempNx12_0_f32);
 8001656:	4630      	mov	r0, r6
 8001658:	f002 fd8e 	bl	8004178 <free>

}
 800165c:	f60d 1d34 	addw	sp, sp, #2356	; 0x934
 8001660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001664:	2000181c 	.word	0x2000181c
 8001668:	20001814 	.word	0x20001814

0800166c <updateFMatrix>:

void updateFMatrix(
		float timeDelta) { // TODO Verify this

	int i;
	for(i = 0; i < 6; ++i) { // Update specific indices of F matrix
 800166c:	2300      	movs	r3, #0
 800166e:	e00a      	b.n	8001686 <updateFMatrix+0x1a>
		F_matrix_f32[6 + (13*i)] = timeDelta;
 8001670:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001674:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8001678:	3206      	adds	r2, #6
 800167a:	4904      	ldr	r1, [pc, #16]	; (800168c <updateFMatrix+0x20>)
 800167c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001680:	ed82 0a00 	vstr	s0, [r2]
	for(i = 0; i < 6; ++i) { // Update specific indices of F matrix
 8001684:	3301      	adds	r3, #1
 8001686:	2b05      	cmp	r3, #5
 8001688:	ddf2      	ble.n	8001670 <updateFMatrix+0x4>
	}
}
 800168a:	4770      	bx	lr
 800168c:	20000130 	.word	0x20000130

08001690 <updateBMatrix>:

void updateBMatrix(
		float timeDelta) { // TODO Verify this

	float dt2 = timeDelta * timeDelta / 2;
 8001690:	ee60 7a00 	vmul.f32	s15, s0, s0
 8001694:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001698:	ee67 7a87 	vmul.f32	s15, s15, s14

	int i;
	for(i = 0; i < 6; ++i) { // Update specific indices of B matrix with (timeDelta^2)/2
 800169c:	2300      	movs	r3, #0
 800169e:	e007      	b.n	80016b0 <updateBMatrix+0x20>
		B_matrix_f32[(7*i)] = dt2;
 80016a0:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 80016a4:	4a0b      	ldr	r2, [pc, #44]	; (80016d4 <updateBMatrix+0x44>)
 80016a6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80016aa:	edc2 7a00 	vstr	s15, [r2]
	for(i = 0; i < 6; ++i) { // Update specific indices of B matrix with (timeDelta^2)/2
 80016ae:	3301      	adds	r3, #1
 80016b0:	2b05      	cmp	r3, #5
 80016b2:	ddf5      	ble.n	80016a0 <updateBMatrix+0x10>
	}

	for(i = 0; i < 6; ++i) { // Update specific indices of B matrix with timeDelta
 80016b4:	2300      	movs	r3, #0
 80016b6:	e009      	b.n	80016cc <updateBMatrix+0x3c>
		B_matrix_f32[36 + (7*i)] = timeDelta;
 80016b8:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 80016bc:	f102 0124 	add.w	r1, r2, #36	; 0x24
 80016c0:	4a04      	ldr	r2, [pc, #16]	; (80016d4 <updateBMatrix+0x44>)
 80016c2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80016c6:	ed82 0a00 	vstr	s0, [r2]
	for(i = 0; i < 6; ++i) { // Update specific indices of B matrix with timeDelta
 80016ca:	3301      	adds	r3, #1
 80016cc:	2b05      	cmp	r3, #5
 80016ce:	ddf3      	ble.n	80016b8 <updateBMatrix+0x28>
	}
}
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	20000010 	.word	0x20000010

080016d8 <updatePreviousMatrices>:
	Zi->pData[0] = tempRw_f32[0];
	Zi->pData[1] = tempRw_f32[1];
	Zi->pData[2] = tempRw_f32[2];
}

void updatePreviousMatrices(void) { // TODO Verify this
 80016d8:	b500      	push	{lr}
	int i;
	int j;
	for (i = 0; i < x_curr.numRows; ++i) {
 80016da:	2300      	movs	r3, #0
 80016dc:	e00a      	b.n	80016f4 <updatePreviousMatrices+0x1c>
		x_prev.pData[i] = x_curr.pData[i];
 80016de:	4a18      	ldr	r2, [pc, #96]	; (8001740 <updatePreviousMatrices+0x68>)
 80016e0:	6851      	ldr	r1, [r2, #4]
 80016e2:	4a18      	ldr	r2, [pc, #96]	; (8001744 <updatePreviousMatrices+0x6c>)
 80016e4:	6852      	ldr	r2, [r2, #4]
 80016e6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80016ea:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80016ee:	6809      	ldr	r1, [r1, #0]
 80016f0:	6011      	str	r1, [r2, #0]
	for (i = 0; i < x_curr.numRows; ++i) {
 80016f2:	3301      	adds	r3, #1
 80016f4:	4a12      	ldr	r2, [pc, #72]	; (8001740 <updatePreviousMatrices+0x68>)
 80016f6:	8812      	ldrh	r2, [r2, #0]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	dcf0      	bgt.n	80016de <updatePreviousMatrices+0x6>
	}

	for (i = 0; i < P_prev.numRows; ++i) {
 80016fc:	f04f 0e00 	mov.w	lr, #0
 8001700:	e015      	b.n	800172e <updatePreviousMatrices+0x56>
		for (j = 0; j < P_prev.numCols; ++j) {
			P_prev.pData[(i*P_prev.numCols) + j] = P_curr.pData[(i*P_curr.numCols) + j];
 8001702:	4911      	ldr	r1, [pc, #68]	; (8001748 <updatePreviousMatrices+0x70>)
 8001704:	6848      	ldr	r0, [r1, #4]
 8001706:	8849      	ldrh	r1, [r1, #2]
 8001708:	fb0e 3c01 	mla	ip, lr, r1, r3
 800170c:	490f      	ldr	r1, [pc, #60]	; (800174c <updatePreviousMatrices+0x74>)
 800170e:	6849      	ldr	r1, [r1, #4]
 8001710:	fb0e 3202 	mla	r2, lr, r2, r3
 8001714:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001718:	eb00 018c 	add.w	r1, r0, ip, lsl #2
 800171c:	6809      	ldr	r1, [r1, #0]
 800171e:	6011      	str	r1, [r2, #0]
		for (j = 0; j < P_prev.numCols; ++j) {
 8001720:	3301      	adds	r3, #1
 8001722:	4a0a      	ldr	r2, [pc, #40]	; (800174c <updatePreviousMatrices+0x74>)
 8001724:	8852      	ldrh	r2, [r2, #2]
 8001726:	429a      	cmp	r2, r3
 8001728:	dceb      	bgt.n	8001702 <updatePreviousMatrices+0x2a>
	for (i = 0; i < P_prev.numRows; ++i) {
 800172a:	f10e 0e01 	add.w	lr, lr, #1
 800172e:	4b07      	ldr	r3, [pc, #28]	; (800174c <updatePreviousMatrices+0x74>)
 8001730:	881b      	ldrh	r3, [r3, #0]
 8001732:	4573      	cmp	r3, lr
 8001734:	dd01      	ble.n	800173a <updatePreviousMatrices+0x62>
		for (j = 0; j < P_prev.numCols; ++j) {
 8001736:	2300      	movs	r3, #0
 8001738:	e7f3      	b.n	8001722 <updatePreviousMatrices+0x4a>
		}
	}

	// TODO Update Q(k-1) somehow
}
 800173a:	f85d fb04 	ldr.w	pc, [sp], #4
 800173e:	bf00      	nop
 8001740:	200019b0 	.word	0x200019b0
 8001744:	200019b8 	.word	0x200019b8
 8001748:	20001814 	.word	0x20001814
 800174c:	20001824 	.word	0x20001824

08001750 <cross_product>:

void cross_product(
		arm_matrix_instance_f32* a,
		arm_matrix_instance_f32* b,
		arm_matrix_instance_f32* c) { // TODO Verify this
 8001750:	b086      	sub	sp, #24

	// Make copy to avoid using overwritten data in calculations (ex. if a = c)
	float aData[3] = {a->pData[0], a->pData[1], a->pData[2]};
 8001752:	6843      	ldr	r3, [r0, #4]
 8001754:	edd3 7a00 	vldr	s15, [r3]
 8001758:	edcd 7a03 	vstr	s15, [sp, #12]
 800175c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001760:	edcd 6a04 	vstr	s13, [sp, #16]
 8001764:	ed93 7a02 	vldr	s14, [r3, #8]
 8001768:	ed8d 7a05 	vstr	s14, [sp, #20]
	float bData[3] = {b->pData[0], b->pData[1], b->pData[2]};
 800176c:	684b      	ldr	r3, [r1, #4]
 800176e:	edd3 5a00 	vldr	s11, [r3]
 8001772:	edcd 5a00 	vstr	s11, [sp]
 8001776:	ed93 5a01 	vldr	s10, [r3, #4]
 800177a:	ed8d 5a01 	vstr	s10, [sp, #4]
 800177e:	ed93 6a02 	vldr	s12, [r3, #8]
 8001782:	ed8d 6a02 	vstr	s12, [sp, #8]

	c->pData[0] = aData[1] * bData[2] - aData[2] * bData[1];
 8001786:	ee66 4a86 	vmul.f32	s9, s13, s12
 800178a:	ee27 4a05 	vmul.f32	s8, s14, s10
 800178e:	6853      	ldr	r3, [r2, #4]
 8001790:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8001794:	edc3 4a00 	vstr	s9, [r3]
	c->pData[1] = aData[2] * bData[0] - aData[0] * bData[2];
 8001798:	ee27 7a25 	vmul.f32	s14, s14, s11
 800179c:	ee27 6a86 	vmul.f32	s12, s15, s12
 80017a0:	6853      	ldr	r3, [r2, #4]
 80017a2:	ee37 7a46 	vsub.f32	s14, s14, s12
 80017a6:	ed83 7a01 	vstr	s14, [r3, #4]
	c->pData[2] = aData[0] * bData[1] - aData[1] * bData[0];
 80017aa:	ee67 7a85 	vmul.f32	s15, s15, s10
 80017ae:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80017b2:	6853      	ldr	r3, [r2, #4]
 80017b4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80017b8:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80017bc:	b006      	add	sp, #24
 80017be:	4770      	bx	lr

080017c0 <updateZiVector>:
		arm_matrix_instance_f32* Zi) { // TODO Verify this
 80017c0:	b530      	push	{r4, r5, lr}
 80017c2:	b08b      	sub	sp, #44	; 0x2c
 80017c4:	4604      	mov	r4, r0
	arm_mat_init_f32(&tempRm, 3, 1, tempRm_f32);
 80017c6:	ab07      	add	r3, sp, #28
 80017c8:	2201      	movs	r2, #1
 80017ca:	2103      	movs	r1, #3
 80017cc:	a805      	add	r0, sp, #20
 80017ce:	f002 f9af 	bl	8003b30 <arm_mat_init_f32>
	arm_mat_init_f32(&tempRw, 3, 1, tempRw_f32);
 80017d2:	ab02      	add	r3, sp, #8
 80017d4:	2201      	movs	r2, #1
 80017d6:	2103      	movs	r1, #3
 80017d8:	4668      	mov	r0, sp
 80017da:	f002 f9a9 	bl	8003b30 <arm_mat_init_f32>
	arm_mat_mult_f32(&rotation_b0_n, &w_avg_b0, &tempRw);	// R_b0_n*w_avg_b0 --> (3x3) * (3x1)
 80017de:	4d12      	ldr	r5, [pc, #72]	; (8001828 <updateZiVector+0x68>)
 80017e0:	466a      	mov	r2, sp
 80017e2:	4912      	ldr	r1, [pc, #72]	; (800182c <updateZiVector+0x6c>)
 80017e4:	4628      	mov	r0, r5
 80017e6:	f002 fa9d 	bl	8003d24 <arm_mat_mult_f32>
	arm_mat_mult_f32(&rotation_b0_n, &m_b0, &tempRm);	// R_b0_n*m_b0 --> (3x3) * (3x1)
 80017ea:	aa05      	add	r2, sp, #20
 80017ec:	4910      	ldr	r1, [pc, #64]	; (8001830 <updateZiVector+0x70>)
 80017ee:	4628      	mov	r0, r5
 80017f0:	f002 fa98 	bl	8003d24 <arm_mat_mult_f32>
	Zi->pData[3] = tempRm_f32[0];
 80017f4:	6863      	ldr	r3, [r4, #4]
 80017f6:	9a07      	ldr	r2, [sp, #28]
 80017f8:	60da      	str	r2, [r3, #12]
	Zi->pData[4] = tempRm_f32[1];
 80017fa:	6863      	ldr	r3, [r4, #4]
 80017fc:	9a08      	ldr	r2, [sp, #32]
 80017fe:	611a      	str	r2, [r3, #16]
	Zi->pData[5] = tempRm_f32[2];
 8001800:	6863      	ldr	r3, [r4, #4]
 8001802:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001804:	615a      	str	r2, [r3, #20]
	cross_product(&tempRw, &tempRm, &tempRw);
 8001806:	466a      	mov	r2, sp
 8001808:	a905      	add	r1, sp, #20
 800180a:	4668      	mov	r0, sp
 800180c:	f7ff ffa0 	bl	8001750 <cross_product>
	Zi->pData[0] = tempRw_f32[0];
 8001810:	6863      	ldr	r3, [r4, #4]
 8001812:	9a02      	ldr	r2, [sp, #8]
 8001814:	601a      	str	r2, [r3, #0]
	Zi->pData[1] = tempRw_f32[1];
 8001816:	6863      	ldr	r3, [r4, #4]
 8001818:	9a03      	ldr	r2, [sp, #12]
 800181a:	605a      	str	r2, [r3, #4]
	Zi->pData[2] = tempRw_f32[2];
 800181c:	6863      	ldr	r3, [r4, #4]
 800181e:	9a04      	ldr	r2, [sp, #16]
 8001820:	609a      	str	r2, [r3, #8]
}
 8001822:	b00b      	add	sp, #44	; 0x2c
 8001824:	bd30      	pop	{r4, r5, pc}
 8001826:	bf00      	nop
 8001828:	200018e8 	.word	0x200018e8
 800182c:	20001934 	.word	0x20001934
 8001830:	200018c0 	.word	0x200018c0

08001834 <initRingBuffers>:

void initRingBuffers(void) {
	int i;
	for(i = 0; i < RING_SIZE; ++i) {
 8001834:	2300      	movs	r3, #0
 8001836:	e025      	b.n	8001884 <initRingBuffers+0x50>
		w_avg_x_ring[i] = 0;
 8001838:	4914      	ldr	r1, [pc, #80]	; (800188c <initRingBuffers+0x58>)
 800183a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800183e:	2200      	movs	r2, #0
 8001840:	600a      	str	r2, [r1, #0]
		w_avg_y_ring[i] = 0;
 8001842:	4913      	ldr	r1, [pc, #76]	; (8001890 <initRingBuffers+0x5c>)
 8001844:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001848:	600a      	str	r2, [r1, #0]
		w_avg_z_ring[i] = 0;
 800184a:	4912      	ldr	r1, [pc, #72]	; (8001894 <initRingBuffers+0x60>)
 800184c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001850:	600a      	str	r2, [r1, #0]
		xl0_avg_x_ring[i] = 0;
 8001852:	4911      	ldr	r1, [pc, #68]	; (8001898 <initRingBuffers+0x64>)
 8001854:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001858:	600a      	str	r2, [r1, #0]
		xl0_avg_y_ring[i] = 0;
 800185a:	4910      	ldr	r1, [pc, #64]	; (800189c <initRingBuffers+0x68>)
 800185c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001860:	600a      	str	r2, [r1, #0]
		xl0_avg_z_ring[i] = 0;
 8001862:	490f      	ldr	r1, [pc, #60]	; (80018a0 <initRingBuffers+0x6c>)
 8001864:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001868:	600a      	str	r2, [r1, #0]
		xl1_avg_x_ring[i] = 0;
 800186a:	490e      	ldr	r1, [pc, #56]	; (80018a4 <initRingBuffers+0x70>)
 800186c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001870:	600a      	str	r2, [r1, #0]
		xl1_avg_y_ring[i] = 0;
 8001872:	490d      	ldr	r1, [pc, #52]	; (80018a8 <initRingBuffers+0x74>)
 8001874:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001878:	600a      	str	r2, [r1, #0]
		xl1_avg_z_ring[i] = 0;
 800187a:	490c      	ldr	r1, [pc, #48]	; (80018ac <initRingBuffers+0x78>)
 800187c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001880:	600a      	str	r2, [r1, #0]
	for(i = 0; i < RING_SIZE; ++i) {
 8001882:	3301      	adds	r3, #1
 8001884:	2b07      	cmp	r3, #7
 8001886:	ddd7      	ble.n	8001838 <initRingBuffers+0x4>
	}
}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	2000194c 	.word	0x2000194c
 8001890:	2000196c 	.word	0x2000196c
 8001894:	2000198c 	.word	0x2000198c
 8001898:	200019c0 	.word	0x200019c0
 800189c:	200019e0 	.word	0x200019e0
 80018a0:	20001a00 	.word	0x20001a00
 80018a4:	20001a20 	.word	0x20001a20
 80018a8:	20001a40 	.word	0x20001a40
 80018ac:	20001a60 	.word	0x20001a60

080018b0 <getNextGyroReading>:

void getNextGyroReading(SensorData* IMU0_data, SensorData* IMU1_data, float* gyroOut) {
 80018b0:	b430      	push	{r4, r5}
	w_avg_x_ring[w_oldest] = (IMU0_data->G_X + IMU1_data->G_X) / 2;
 80018b2:	ed90 7a03 	vldr	s14, [r0, #12]
 80018b6:	edd1 7a03 	vldr	s15, [r1, #12]
 80018ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018be:	4d37      	ldr	r5, [pc, #220]	; (800199c <getNextGyroReading+0xec>)
 80018c0:	782b      	ldrb	r3, [r5, #0]
 80018c2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80018c6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80018ca:	4c35      	ldr	r4, [pc, #212]	; (80019a0 <getNextGyroReading+0xf0>)
 80018cc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80018d0:	ed84 7a00 	vstr	s14, [r4]
	w_avg_y_ring[w_oldest] = (IMU0_data->G_Y + IMU1_data->G_Y) / 2;
 80018d4:	ed90 7a04 	vldr	s14, [r0, #16]
 80018d8:	edd1 7a04 	vldr	s15, [r1, #16]
 80018dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018e0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80018e4:	4c2f      	ldr	r4, [pc, #188]	; (80019a4 <getNextGyroReading+0xf4>)
 80018e6:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 80018ea:	ed8c 7a00 	vstr	s14, [ip]
	w_avg_z_ring[w_oldest] = (IMU0_data->G_Z + IMU1_data->G_Z) / 2;
 80018ee:	edd0 7a05 	vldr	s15, [r0, #20]
 80018f2:	ed91 7a05 	vldr	s14, [r1, #20]
 80018f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80018fe:	492a      	ldr	r1, [pc, #168]	; (80019a8 <getNextGyroReading+0xf8>)
 8001900:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001904:	edc1 7a00 	vstr	s15, [r1]

	w_oldest = (w_oldest + 1) % RING_SIZE;
 8001908:	3301      	adds	r3, #1
 800190a:	4259      	negs	r1, r3
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	f001 0107 	and.w	r1, r1, #7
 8001914:	bf58      	it	pl
 8001916:	424b      	negpl	r3, r1
 8001918:	702b      	strb	r3, [r5, #0]

	gyroOut[0] = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	6013      	str	r3, [r2, #0]
	gyroOut[1] = 0;
 800191e:	6053      	str	r3, [r2, #4]
	gyroOut[2] = 0;
 8001920:	6093      	str	r3, [r2, #8]

	int i;
	for(i = 0; i < RING_SIZE; ++i) {
 8001922:	2300      	movs	r3, #0
 8001924:	e021      	b.n	800196a <getNextGyroReading+0xba>
		gyroOut[0] += w_avg_x_ring[i];
 8001926:	491e      	ldr	r1, [pc, #120]	; (80019a0 <getNextGyroReading+0xf0>)
 8001928:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800192c:	ed91 7a00 	vldr	s14, [r1]
 8001930:	edd2 7a00 	vldr	s15, [r2]
 8001934:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001938:	edc2 7a00 	vstr	s15, [r2]
		gyroOut[1] += w_avg_y_ring[i];
 800193c:	4919      	ldr	r1, [pc, #100]	; (80019a4 <getNextGyroReading+0xf4>)
 800193e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001942:	ed91 7a00 	vldr	s14, [r1]
 8001946:	edd2 7a01 	vldr	s15, [r2, #4]
 800194a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800194e:	edc2 7a01 	vstr	s15, [r2, #4]
		gyroOut[2] += w_avg_z_ring[i];
 8001952:	4915      	ldr	r1, [pc, #84]	; (80019a8 <getNextGyroReading+0xf8>)
 8001954:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001958:	ed91 7a00 	vldr	s14, [r1]
 800195c:	edd2 7a02 	vldr	s15, [r2, #8]
 8001960:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001964:	edc2 7a02 	vstr	s15, [r2, #8]
	for(i = 0; i < RING_SIZE; ++i) {
 8001968:	3301      	adds	r3, #1
 800196a:	2b07      	cmp	r3, #7
 800196c:	dddb      	ble.n	8001926 <getNextGyroReading+0x76>
	}

	gyroOut[0] /= RING_SIZE;
 800196e:	edd2 7a00 	vldr	s15, [r2]
 8001972:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8001976:	ee67 7a87 	vmul.f32	s15, s15, s14
 800197a:	edc2 7a00 	vstr	s15, [r2]
	gyroOut[1] /= RING_SIZE;
 800197e:	edd2 7a01 	vldr	s15, [r2, #4]
 8001982:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001986:	edc2 7a01 	vstr	s15, [r2, #4]
	gyroOut[2] /= RING_SIZE;
 800198a:	edd2 7a02 	vldr	s15, [r2, #8]
 800198e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001992:	edc2 7a02 	vstr	s15, [r2, #8]
}
 8001996:	bc30      	pop	{r4, r5}
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	200019ac 	.word	0x200019ac
 80019a0:	2000194c 	.word	0x2000194c
 80019a4:	2000196c 	.word	0x2000196c
 80019a8:	2000198c 	.word	0x2000198c

080019ac <calculateAvgAngularRate>:
		SensorData* IMU1_data) { // TODO Verify this
 80019ac:	b510      	push	{r4, lr}
	getNextGyroReading(IMU0_data, IMU1_data, w_avg_b0_f32);
 80019ae:	4c13      	ldr	r4, [pc, #76]	; (80019fc <calculateAvgAngularRate+0x50>)
 80019b0:	4622      	mov	r2, r4
 80019b2:	f7ff ff7d 	bl	80018b0 <getNextGyroReading>
	w_avg_b0_mag = (w_avg_b0_f32[0]*w_avg_b0_f32[0]) + (w_avg_b0_f32[1]*w_avg_b0_f32[1]) + (w_avg_b0_f32[2]*w_avg_b0_f32[2]);
 80019b6:	ed94 0a00 	vldr	s0, [r4]
 80019ba:	ee20 0a00 	vmul.f32	s0, s0, s0
 80019be:	edd4 7a01 	vldr	s15, [r4, #4]
 80019c2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80019c6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80019ca:	edd4 7a02 	vldr	s15, [r4, #8]
 80019ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80019d2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80019d6:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <calculateAvgAngularRate+0x54>)
 80019d8:	ed83 0a00 	vstr	s0, [r3]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 80019dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80019e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e4:	db05      	blt.n	80019f2 <calculateAvgAngularRate+0x46>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 80019e6:	f003 fc47 	bl	8005278 <sqrtf>
 80019ea:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <calculateAvgAngularRate+0x54>)
 80019ec:	ed83 0a00 	vstr	s0, [r3]
}
 80019f0:	bd10      	pop	{r4, pc}

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 80019f2:	4b03      	ldr	r3, [pc, #12]	; (8001a00 <calculateAvgAngularRate+0x54>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	e7fa      	b.n	80019f0 <calculateAvgAngularRate+0x44>
 80019fa:	bf00      	nop
 80019fc:	2000193c 	.word	0x2000193c
 8001a00:	20001948 	.word	0x20001948

08001a04 <getNextXLReading>:

void getNextXLReading(SensorData* IMU0_data, SensorData* IMU1_data, float* xl0Out, float* xl1Out) {
 8001a04:	b530      	push	{r4, r5, lr}
	xl0_avg_x_ring[xl_oldest] = IMU0_data->XL_X;
 8001a06:	4c53      	ldr	r4, [pc, #332]	; (8001b54 <getNextXLReading+0x150>)
 8001a08:	f894 c000 	ldrb.w	ip, [r4]
 8001a0c:	f8d0 e000 	ldr.w	lr, [r0]
 8001a10:	4d51      	ldr	r5, [pc, #324]	; (8001b58 <getNextXLReading+0x154>)
 8001a12:	eb05 058c 	add.w	r5, r5, ip, lsl #2
 8001a16:	f8c5 e000 	str.w	lr, [r5]
	xl0_avg_y_ring[xl_oldest] = IMU0_data->XL_Y;
 8001a1a:	edd0 7a01 	vldr	s15, [r0, #4]
 8001a1e:	4d4f      	ldr	r5, [pc, #316]	; (8001b5c <getNextXLReading+0x158>)
 8001a20:	eb05 0e8c 	add.w	lr, r5, ip, lsl #2
 8001a24:	edce 7a00 	vstr	s15, [lr]
	xl0_avg_z_ring[xl_oldest] = IMU0_data->XL_Z;
 8001a28:	6885      	ldr	r5, [r0, #8]
 8001a2a:	484d      	ldr	r0, [pc, #308]	; (8001b60 <getNextXLReading+0x15c>)
 8001a2c:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8001a30:	6005      	str	r5, [r0, #0]
	xl1_avg_x_ring[xl_oldest] = IMU1_data->XL_X;
 8001a32:	680d      	ldr	r5, [r1, #0]
 8001a34:	484b      	ldr	r0, [pc, #300]	; (8001b64 <getNextXLReading+0x160>)
 8001a36:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8001a3a:	6005      	str	r5, [r0, #0]
	xl1_avg_y_ring[xl_oldest] = IMU1_data->XL_Y;
 8001a3c:	684d      	ldr	r5, [r1, #4]
 8001a3e:	484a      	ldr	r0, [pc, #296]	; (8001b68 <getNextXLReading+0x164>)
 8001a40:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8001a44:	6005      	str	r5, [r0, #0]
	xl1_avg_z_ring[xl_oldest] = IMU1_data->XL_Z;
 8001a46:	6888      	ldr	r0, [r1, #8]
 8001a48:	4948      	ldr	r1, [pc, #288]	; (8001b6c <getNextXLReading+0x168>)
 8001a4a:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 8001a4e:	6008      	str	r0, [r1, #0]

	xl_oldest = (xl_oldest + 1) % RING_SIZE;
 8001a50:	f10c 0c01 	add.w	ip, ip, #1
 8001a54:	f1dc 0100 	rsbs	r1, ip, #0
 8001a58:	f00c 0c07 	and.w	ip, ip, #7
 8001a5c:	f001 0107 	and.w	r1, r1, #7
 8001a60:	bf58      	it	pl
 8001a62:	f1c1 0c00 	rsbpl	ip, r1, #0
 8001a66:	f884 c000 	strb.w	ip, [r4]

	xl0Out[0] = 0;
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	6011      	str	r1, [r2, #0]
	xl0Out[1] = 0;
 8001a6e:	6051      	str	r1, [r2, #4]
	xl0Out[2] = 0;
 8001a70:	6091      	str	r1, [r2, #8]
	xl1Out[0] = 0;
 8001a72:	6019      	str	r1, [r3, #0]
	xl1Out[1] = 0;
 8001a74:	6059      	str	r1, [r3, #4]
	xl1Out[2] = 0;
 8001a76:	6099      	str	r1, [r3, #8]

	int i;
	for(i = 0; i < RING_SIZE; ++i) {
 8001a78:	2100      	movs	r1, #0
 8001a7a:	e042      	b.n	8001b02 <getNextXLReading+0xfe>
		xl0Out[0] += xl0_avg_x_ring[i];
 8001a7c:	4836      	ldr	r0, [pc, #216]	; (8001b58 <getNextXLReading+0x154>)
 8001a7e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8001a82:	ed90 7a00 	vldr	s14, [r0]
 8001a86:	edd2 7a00 	vldr	s15, [r2]
 8001a8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a8e:	edc2 7a00 	vstr	s15, [r2]
		xl0Out[1] += xl0_avg_y_ring[i];
 8001a92:	4832      	ldr	r0, [pc, #200]	; (8001b5c <getNextXLReading+0x158>)
 8001a94:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8001a98:	ed90 7a00 	vldr	s14, [r0]
 8001a9c:	edd2 7a01 	vldr	s15, [r2, #4]
 8001aa0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001aa4:	edc2 7a01 	vstr	s15, [r2, #4]
		xl0Out[2] += xl0_avg_z_ring[i];
 8001aa8:	482d      	ldr	r0, [pc, #180]	; (8001b60 <getNextXLReading+0x15c>)
 8001aaa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8001aae:	ed90 7a00 	vldr	s14, [r0]
 8001ab2:	edd2 7a02 	vldr	s15, [r2, #8]
 8001ab6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001aba:	edc2 7a02 	vstr	s15, [r2, #8]
		xl1Out[0] += xl1_avg_x_ring[i];
 8001abe:	4829      	ldr	r0, [pc, #164]	; (8001b64 <getNextXLReading+0x160>)
 8001ac0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8001ac4:	ed90 7a00 	vldr	s14, [r0]
 8001ac8:	edd3 7a00 	vldr	s15, [r3]
 8001acc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ad0:	edc3 7a00 	vstr	s15, [r3]
		xl1Out[1] += xl1_avg_y_ring[i];
 8001ad4:	4824      	ldr	r0, [pc, #144]	; (8001b68 <getNextXLReading+0x164>)
 8001ad6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8001ada:	ed90 7a00 	vldr	s14, [r0]
 8001ade:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ae2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ae6:	edc3 7a01 	vstr	s15, [r3, #4]
		xl1Out[2] += xl1_avg_z_ring[i];
 8001aea:	4820      	ldr	r0, [pc, #128]	; (8001b6c <getNextXLReading+0x168>)
 8001aec:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8001af0:	ed90 7a00 	vldr	s14, [r0]
 8001af4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001af8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001afc:	edc3 7a02 	vstr	s15, [r3, #8]
	for(i = 0; i < RING_SIZE; ++i) {
 8001b00:	3101      	adds	r1, #1
 8001b02:	2907      	cmp	r1, #7
 8001b04:	ddba      	ble.n	8001a7c <getNextXLReading+0x78>
	}

	xl0Out[0] /= RING_SIZE;
 8001b06:	ed92 7a00 	vldr	s14, [r2]
 8001b0a:	eef4 7a00 	vmov.f32	s15, #64	; 0x3e000000  0.125
 8001b0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b12:	ed82 7a00 	vstr	s14, [r2]
	xl0Out[1] /= RING_SIZE;
 8001b16:	ed92 7a01 	vldr	s14, [r2, #4]
 8001b1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b1e:	ed82 7a01 	vstr	s14, [r2, #4]
	xl0Out[2] /= RING_SIZE;
 8001b22:	ed92 7a02 	vldr	s14, [r2, #8]
 8001b26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b2a:	ed82 7a02 	vstr	s14, [r2, #8]
	xl1Out[0] /= RING_SIZE;
 8001b2e:	ed93 7a00 	vldr	s14, [r3]
 8001b32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b36:	ed83 7a00 	vstr	s14, [r3]
	xl1Out[1] /= RING_SIZE;
 8001b3a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b42:	ed83 7a01 	vstr	s14, [r3, #4]
	xl1Out[2] /= RING_SIZE;
 8001b46:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b4e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001b52:	bd30      	pop	{r4, r5, pc}
 8001b54:	20001a98 	.word	0x20001a98
 8001b58:	200019c0 	.word	0x200019c0
 8001b5c:	200019e0 	.word	0x200019e0
 8001b60:	20001a00 	.word	0x20001a00
 8001b64:	20001a20 	.word	0x20001a20
 8001b68:	20001a40 	.word	0x20001a40
 8001b6c:	20001a60 	.word	0x20001a60

08001b70 <updateUVector>:
		SensorData* IMU1_data) { // TODO Verify this
 8001b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b72:	b095      	sub	sp, #84	; 0x54
 8001b74:	4604      	mov	r4, r0
 8001b76:	460d      	mov	r5, r1
	float temp0_f32[3] = {IMU0_data->XL_X, IMU0_data->XL_Y, IMU0_data->XL_Z}; // Init with IMU0 acceleration
 8001b78:	6803      	ldr	r3, [r0, #0]
 8001b7a:	9311      	str	r3, [sp, #68]	; 0x44
 8001b7c:	6843      	ldr	r3, [r0, #4]
 8001b7e:	9312      	str	r3, [sp, #72]	; 0x48
 8001b80:	6883      	ldr	r3, [r0, #8]
 8001b82:	9313      	str	r3, [sp, #76]	; 0x4c
	arm_mat_init_f32(&temp0, 3, 1, temp0_f32); // temp for IMU0 vector
 8001b84:	ab11      	add	r3, sp, #68	; 0x44
 8001b86:	2201      	movs	r2, #1
 8001b88:	2103      	movs	r1, #3
 8001b8a:	a80f      	add	r0, sp, #60	; 0x3c
 8001b8c:	f001 ffd0 	bl	8003b30 <arm_mat_init_f32>
	float temp1_f32[3] = {IMU1_data->XL_X, IMU1_data->XL_Y, IMU1_data->XL_Z}; // Init with IMU1 acceleration
 8001b90:	682b      	ldr	r3, [r5, #0]
 8001b92:	930c      	str	r3, [sp, #48]	; 0x30
 8001b94:	686b      	ldr	r3, [r5, #4]
 8001b96:	930d      	str	r3, [sp, #52]	; 0x34
 8001b98:	68ab      	ldr	r3, [r5, #8]
 8001b9a:	930e      	str	r3, [sp, #56]	; 0x38
	arm_mat_init_f32(&temp1, 3, 1, temp1_f32); // temp for IMU1 vector
 8001b9c:	ab0c      	add	r3, sp, #48	; 0x30
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	2103      	movs	r1, #3
 8001ba2:	a80a      	add	r0, sp, #40	; 0x28
 8001ba4:	f001 ffc4 	bl	8003b30 <arm_mat_init_f32>
	float temp2_f32[3] = {0,0,0};
 8001ba8:	2600      	movs	r6, #0
 8001baa:	9607      	str	r6, [sp, #28]
 8001bac:	9608      	str	r6, [sp, #32]
 8001bae:	9609      	str	r6, [sp, #36]	; 0x24
	arm_mat_init_f32(&temp2, 3, 1, temp2_f32); // temp for rotated IMU0 vector
 8001bb0:	ab07      	add	r3, sp, #28
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	2103      	movs	r1, #3
 8001bb6:	a805      	add	r0, sp, #20
 8001bb8:	f001 ffba 	bl	8003b30 <arm_mat_init_f32>
	float temp3_f32[3] = {0,0,0};
 8001bbc:	9602      	str	r6, [sp, #8]
 8001bbe:	9603      	str	r6, [sp, #12]
 8001bc0:	9604      	str	r6, [sp, #16]
	arm_mat_init_f32(&temp3, 3, 1, temp3_f32); // temp for rotated IMU1 vector
 8001bc2:	ab02      	add	r3, sp, #8
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	2103      	movs	r1, #3
 8001bc8:	4668      	mov	r0, sp
 8001bca:	f001 ffb1 	bl	8003b30 <arm_mat_init_f32>
	arm_mat_mult_f32(&rotation_b0_n, &temp0, &temp2);	// R_b0_n*a0_b0 --> (3x3) * (3x1)
 8001bce:	4e16      	ldr	r6, [pc, #88]	; (8001c28 <updateUVector+0xb8>)
 8001bd0:	aa05      	add	r2, sp, #20
 8001bd2:	a90f      	add	r1, sp, #60	; 0x3c
 8001bd4:	4630      	mov	r0, r6
 8001bd6:	f002 f8a5 	bl	8003d24 <arm_mat_mult_f32>
	arm_mat_mult_f32(&rotation_b0_n, &temp1, &temp3);	// R_b0_n*a1_b0 --> (3x3) * (3x1)
 8001bda:	466a      	mov	r2, sp
 8001bdc:	a90a      	add	r1, sp, #40	; 0x28
 8001bde:	4630      	mov	r0, r6
 8001be0:	f002 f8a0 	bl	8003d24 <arm_mat_mult_f32>
	arm_mat_sub_f32(&temp2, &g_n, &temp0);
 8001be4:	4e11      	ldr	r6, [pc, #68]	; (8001c2c <updateUVector+0xbc>)
 8001be6:	aa0f      	add	r2, sp, #60	; 0x3c
 8001be8:	4631      	mov	r1, r6
 8001bea:	a805      	add	r0, sp, #20
 8001bec:	f002 f8d4 	bl	8003d98 <arm_mat_sub_f32>
	arm_mat_sub_f32(&temp3, &g_n, &temp1);
 8001bf0:	aa0a      	add	r2, sp, #40	; 0x28
 8001bf2:	4631      	mov	r1, r6
 8001bf4:	4668      	mov	r0, sp
 8001bf6:	f002 f8cf 	bl	8003d98 <arm_mat_sub_f32>
	getNextXLReading(IMU0_data, IMU1_data, xl_b0_f32, xl_b1_f32);
 8001bfa:	4e0d      	ldr	r6, [pc, #52]	; (8001c30 <updateUVector+0xc0>)
 8001bfc:	4f0d      	ldr	r7, [pc, #52]	; (8001c34 <updateUVector+0xc4>)
 8001bfe:	4633      	mov	r3, r6
 8001c00:	463a      	mov	r2, r7
 8001c02:	4629      	mov	r1, r5
 8001c04:	4620      	mov	r0, r4
 8001c06:	f7ff fefd 	bl	8001a04 <getNextXLReading>
	u_curr_f32[0] = xl_b0_f32[0];
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <updateUVector+0xc8>)
 8001c0e:	601a      	str	r2, [r3, #0]
	u_curr_f32[1] = xl_b0_f32[1];
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	605a      	str	r2, [r3, #4]
	u_curr_f32[2] = xl_b0_f32[2];
 8001c14:	68ba      	ldr	r2, [r7, #8]
 8001c16:	609a      	str	r2, [r3, #8]
	u_curr_f32[3] = xl_b1_f32[0];
 8001c18:	6832      	ldr	r2, [r6, #0]
 8001c1a:	60da      	str	r2, [r3, #12]
	u_curr_f32[4] = xl_b1_f32[1];
 8001c1c:	6872      	ldr	r2, [r6, #4]
 8001c1e:	611a      	str	r2, [r3, #16]
	u_curr_f32[5] = xl_b1_f32[2];
 8001c20:	68b2      	ldr	r2, [r6, #8]
 8001c22:	615a      	str	r2, [r3, #20]
}
 8001c24:	b015      	add	sp, #84	; 0x54
 8001c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c28:	200018e8 	.word	0x200018e8
 8001c2c:	200018ac 	.word	0x200018ac
 8001c30:	20001a8c 	.word	0x20001a8c
 8001c34:	20001a80 	.word	0x20001a80
 8001c38:	2000191c 	.word	0x2000191c

08001c3c <createZUPTNode>:
	}

	return curr_phase;
}

ZUPTNode* createZUPTNode(float w_mag) {
 8001c3c:	b508      	push	{r3, lr}
 8001c3e:	ed2d 8b02 	vpush	{d8}
 8001c42:	eeb0 8a40 	vmov.f32	s16, s0
	ZUPTNode* node = (ZUPTNode*)malloc(sizeof(ZUPTNode));
 8001c46:	2008      	movs	r0, #8
 8001c48:	f002 fa8e 	bl	8004168 <malloc>

	node->next = NULL;
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	6002      	str	r2, [r0, #0]
	node->w_mag_sq = w_mag * w_mag;
 8001c50:	ee28 8a08 	vmul.f32	s16, s16, s16
 8001c54:	ed80 8a01 	vstr	s16, [r0, #4]

	return node;
}
 8001c58:	ecbd 8b02 	vpop	{d8}
 8001c5c:	bd08      	pop	{r3, pc}
	...

08001c60 <initZUPT>:
void initZUPT(void) {
 8001c60:	b538      	push	{r3, r4, r5, lr}
	ZUPTHead = (ZUPTNode*)createZUPTNode(0.0);
 8001c62:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8001c88 <initZUPT+0x28>
 8001c66:	f7ff ffe9 	bl	8001c3c <createZUPTNode>
 8001c6a:	4605      	mov	r5, r0
 8001c6c:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <initZUPT+0x2c>)
 8001c6e:	6018      	str	r0, [r3, #0]
	for(i = 0; i < ZUPT_W-1; ++i) {
 8001c70:	2400      	movs	r4, #0
 8001c72:	e006      	b.n	8001c82 <initZUPT+0x22>
		tempNode->next = (ZUPTNode*)createZUPTNode(0.0);
 8001c74:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8001c88 <initZUPT+0x28>
 8001c78:	f7ff ffe0 	bl	8001c3c <createZUPTNode>
 8001c7c:	6028      	str	r0, [r5, #0]
	for(i = 0; i < ZUPT_W-1; ++i) {
 8001c7e:	3401      	adds	r4, #1
		tempNode = (ZUPTNode*)tempNode->next;
 8001c80:	4605      	mov	r5, r0
	for(i = 0; i < ZUPT_W-1; ++i) {
 8001c82:	2c12      	cmp	r4, #18
 8001c84:	ddf6      	ble.n	8001c74 <initZUPT+0x14>
}
 8001c86:	bd38      	pop	{r3, r4, r5, pc}
 8001c88:	00000000 	.word	0x00000000
 8001c8c:	20001844 	.word	0x20001844

08001c90 <init_processing>:
void init_processing(void) {
 8001c90:	b508      	push	{r3, lr}
	arm_mat_init_f32(&m_b0, numRows, numCols, m_b0_f32);
 8001c92:	4b44      	ldr	r3, [pc, #272]	; (8001da4 <init_processing+0x114>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	2103      	movs	r1, #3
 8001c98:	4843      	ldr	r0, [pc, #268]	; (8001da8 <init_processing+0x118>)
 8001c9a:	f001 ff49 	bl	8003b30 <arm_mat_init_f32>
	arm_mat_init_f32(&g_n, numRows, numCols, g_n_f32);
 8001c9e:	4b43      	ldr	r3, [pc, #268]	; (8001dac <init_processing+0x11c>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	2103      	movs	r1, #3
 8001ca4:	4842      	ldr	r0, [pc, #264]	; (8001db0 <init_processing+0x120>)
 8001ca6:	f001 ff43 	bl	8003b30 <arm_mat_init_f32>
	arm_mat_init_f32(&w_avg_b0, numRows, numCols, w_avg_b0_f32);
 8001caa:	4b42      	ldr	r3, [pc, #264]	; (8001db4 <init_processing+0x124>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	2103      	movs	r1, #3
 8001cb0:	4841      	ldr	r0, [pc, #260]	; (8001db8 <init_processing+0x128>)
 8001cb2:	f001 ff3d 	bl	8003b30 <arm_mat_init_f32>
	arm_mat_init_f32(&rotation_b0_n, numRows, numCols, rotation_b0_n_f32);
 8001cb6:	4b41      	ldr	r3, [pc, #260]	; (8001dbc <init_processing+0x12c>)
 8001cb8:	2203      	movs	r2, #3
 8001cba:	4611      	mov	r1, r2
 8001cbc:	4840      	ldr	r0, [pc, #256]	; (8001dc0 <init_processing+0x130>)
 8001cbe:	f001 ff37 	bl	8003b30 <arm_mat_init_f32>
	arm_mat_init_f32(&x_prev, numRows, numCols, x_prev_f32);
 8001cc2:	4b40      	ldr	r3, [pc, #256]	; (8001dc4 <init_processing+0x134>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	210c      	movs	r1, #12
 8001cc8:	483f      	ldr	r0, [pc, #252]	; (8001dc8 <init_processing+0x138>)
 8001cca:	f001 ff31 	bl	8003b30 <arm_mat_init_f32>
	arm_mat_init_f32(&x_curr, numRows, numCols, x_curr_f32);
 8001cce:	4b3f      	ldr	r3, [pc, #252]	; (8001dcc <init_processing+0x13c>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	210c      	movs	r1, #12
 8001cd4:	483e      	ldr	r0, [pc, #248]	; (8001dd0 <init_processing+0x140>)
 8001cd6:	f001 ff2b 	bl	8003b30 <arm_mat_init_f32>
	arm_mat_init_f32(&F_matrix, numRows, numCols, F_matrix_f32);
 8001cda:	4b3e      	ldr	r3, [pc, #248]	; (8001dd4 <init_processing+0x144>)
 8001cdc:	220c      	movs	r2, #12
 8001cde:	4611      	mov	r1, r2
 8001ce0:	483d      	ldr	r0, [pc, #244]	; (8001dd8 <init_processing+0x148>)
 8001ce2:	f001 ff25 	bl	8003b30 <arm_mat_init_f32>
	arm_mat_init_f32(&B_matrix, numRows, numCols, B_matrix_f32);
 8001ce6:	4b3d      	ldr	r3, [pc, #244]	; (8001ddc <init_processing+0x14c>)
 8001ce8:	2206      	movs	r2, #6
 8001cea:	210c      	movs	r1, #12
 8001cec:	483c      	ldr	r0, [pc, #240]	; (8001de0 <init_processing+0x150>)
 8001cee:	f001 ff1f 	bl	8003b30 <arm_mat_init_f32>
	arm_mat_init_f32(&u_curr, numRows, numCols, u_curr_f32);
 8001cf2:	4b3c      	ldr	r3, [pc, #240]	; (8001de4 <init_processing+0x154>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	2106      	movs	r1, #6
 8001cf8:	483b      	ldr	r0, [pc, #236]	; (8001de8 <init_processing+0x158>)
 8001cfa:	f001 ff19 	bl	8003b30 <arm_mat_init_f32>
	arm_mat_init_f32(&H_swing, numRows, numCols, H_swing_f32);
 8001cfe:	4b3b      	ldr	r3, [pc, #236]	; (8001dec <init_processing+0x15c>)
 8001d00:	220c      	movs	r2, #12
 8001d02:	2106      	movs	r1, #6
 8001d04:	483a      	ldr	r0, [pc, #232]	; (8001df0 <init_processing+0x160>)
 8001d06:	f001 ff13 	bl	8003b30 <arm_mat_init_f32>
	arm_mat_init_f32(&H_stance, numRows, numCols, H_stance_f32);
 8001d0a:	4b3a      	ldr	r3, [pc, #232]	; (8001df4 <init_processing+0x164>)
 8001d0c:	220c      	movs	r2, #12
 8001d0e:	4611      	mov	r1, r2
 8001d10:	4839      	ldr	r0, [pc, #228]	; (8001df8 <init_processing+0x168>)
 8001d12:	f001 ff0d 	bl	8003b30 <arm_mat_init_f32>
	arm_mat_init_f32(&Z_swing, numRows, numCols, Z_swing_f32);
 8001d16:	4b39      	ldr	r3, [pc, #228]	; (8001dfc <init_processing+0x16c>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	2106      	movs	r1, #6
 8001d1c:	4838      	ldr	r0, [pc, #224]	; (8001e00 <init_processing+0x170>)
 8001d1e:	f001 ff07 	bl	8003b30 <arm_mat_init_f32>
	arm_mat_init_f32(&Z_stance, numRows, numCols, Z_stance_f32);
 8001d22:	4b38      	ldr	r3, [pc, #224]	; (8001e04 <init_processing+0x174>)
 8001d24:	2201      	movs	r2, #1
 8001d26:	210c      	movs	r1, #12
 8001d28:	4837      	ldr	r0, [pc, #220]	; (8001e08 <init_processing+0x178>)
 8001d2a:	f001 ff01 	bl	8003b30 <arm_mat_init_f32>
	arm_mat_init_f32(&K_swing, numRows, numCols, K_swing_f32);
 8001d2e:	4b37      	ldr	r3, [pc, #220]	; (8001e0c <init_processing+0x17c>)
 8001d30:	2206      	movs	r2, #6
 8001d32:	210c      	movs	r1, #12
 8001d34:	4836      	ldr	r0, [pc, #216]	; (8001e10 <init_processing+0x180>)
 8001d36:	f001 fefb 	bl	8003b30 <arm_mat_init_f32>
	arm_mat_init_f32(&K_stance, numRows, numCols, K_stance_f32);
 8001d3a:	4b36      	ldr	r3, [pc, #216]	; (8001e14 <init_processing+0x184>)
 8001d3c:	220c      	movs	r2, #12
 8001d3e:	4611      	mov	r1, r2
 8001d40:	4835      	ldr	r0, [pc, #212]	; (8001e18 <init_processing+0x188>)
 8001d42:	f001 fef5 	bl	8003b30 <arm_mat_init_f32>
	arm_mat_init_f32(&R_swing, numRows, numCols, R_swing_f32);
 8001d46:	4b35      	ldr	r3, [pc, #212]	; (8001e1c <init_processing+0x18c>)
 8001d48:	2206      	movs	r2, #6
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	4834      	ldr	r0, [pc, #208]	; (8001e20 <init_processing+0x190>)
 8001d4e:	f001 feef 	bl	8003b30 <arm_mat_init_f32>
	arm_mat_init_f32(&R_stance, numRows, numCols, R_stance_f32);
 8001d52:	4b34      	ldr	r3, [pc, #208]	; (8001e24 <init_processing+0x194>)
 8001d54:	220c      	movs	r2, #12
 8001d56:	4611      	mov	r1, r2
 8001d58:	4833      	ldr	r0, [pc, #204]	; (8001e28 <init_processing+0x198>)
 8001d5a:	f001 fee9 	bl	8003b30 <arm_mat_init_f32>
	arm_mat_init_f32(&P_prev, numRows, numCols, P_prev_f32);
 8001d5e:	4b33      	ldr	r3, [pc, #204]	; (8001e2c <init_processing+0x19c>)
 8001d60:	220c      	movs	r2, #12
 8001d62:	4611      	mov	r1, r2
 8001d64:	4832      	ldr	r0, [pc, #200]	; (8001e30 <init_processing+0x1a0>)
 8001d66:	f001 fee3 	bl	8003b30 <arm_mat_init_f32>
	arm_mat_init_f32(&P_curr, numRows, numCols, P_curr_f32);
 8001d6a:	4b32      	ldr	r3, [pc, #200]	; (8001e34 <init_processing+0x1a4>)
 8001d6c:	220c      	movs	r2, #12
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4831      	ldr	r0, [pc, #196]	; (8001e38 <init_processing+0x1a8>)
 8001d72:	f001 fedd 	bl	8003b30 <arm_mat_init_f32>
	arm_mat_init_f32(&P_minus, numRows, numCols, P_minus_f32);
 8001d76:	4b31      	ldr	r3, [pc, #196]	; (8001e3c <init_processing+0x1ac>)
 8001d78:	220c      	movs	r2, #12
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	4830      	ldr	r0, [pc, #192]	; (8001e40 <init_processing+0x1b0>)
 8001d7e:	f001 fed7 	bl	8003b30 <arm_mat_init_f32>
	arm_mat_init_f32(&Q_prev, numRows, numCols, Q_prev_f32);
 8001d82:	4b30      	ldr	r3, [pc, #192]	; (8001e44 <init_processing+0x1b4>)
 8001d84:	220c      	movs	r2, #12
 8001d86:	4611      	mov	r1, r2
 8001d88:	482f      	ldr	r0, [pc, #188]	; (8001e48 <init_processing+0x1b8>)
 8001d8a:	f001 fed1 	bl	8003b30 <arm_mat_init_f32>
	initZUPT(); // Initialize ZUPT phase detector
 8001d8e:	f7ff ff67 	bl	8001c60 <initZUPT>
	initRingBuffers();
 8001d92:	f7ff fd4f 	bl	8001834 <initRingBuffers>
	arm_quaternion_normalize_f32(q_f32, q_f32, 1); // normalize initial quaternion
 8001d96:	482d      	ldr	r0, [pc, #180]	; (8001e4c <init_processing+0x1bc>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	4601      	mov	r1, r0
 8001d9c:	f002 f8b1 	bl	8003f02 <arm_quaternion_normalize_f32>
}
 8001da0:	bd08      	pop	{r3, pc}
 8001da2:	bf00      	nop
 8001da4:	200012b0 	.word	0x200012b0
 8001da8:	200018c0 	.word	0x200018c0
 8001dac:	200012a4 	.word	0x200012a4
 8001db0:	200018ac 	.word	0x200018ac
 8001db4:	2000193c 	.word	0x2000193c
 8001db8:	20001934 	.word	0x20001934
 8001dbc:	200018f0 	.word	0x200018f0
 8001dc0:	200018e8 	.word	0x200018e8
 8001dc4:	200012fc 	.word	0x200012fc
 8001dc8:	200019b8 	.word	0x200019b8
 8001dcc:	200012cc 	.word	0x200012cc
 8001dd0:	200019b0 	.word	0x200019b0
 8001dd4:	20000130 	.word	0x20000130
 8001dd8:	2000148c 	.word	0x2000148c
 8001ddc:	20000010 	.word	0x20000010
 8001de0:	20001484 	.word	0x20001484
 8001de4:	2000191c 	.word	0x2000191c
 8001de8:	20001914 	.word	0x20001914
 8001dec:	200005b0 	.word	0x200005b0
 8001df0:	2000149c 	.word	0x2000149c
 8001df4:	20000370 	.word	0x20000370
 8001df8:	20001494 	.word	0x20001494
 8001dfc:	20001888 	.word	0x20001888
 8001e00:	20001880 	.word	0x20001880
 8001e04:	20001850 	.word	0x20001850
 8001e08:	20001848 	.word	0x20001848
 8001e0c:	200016f4 	.word	0x200016f4
 8001e10:	200016ec 	.word	0x200016ec
 8001e14:	200014ac 	.word	0x200014ac
 8001e18:	200014a4 	.word	0x200014a4
 8001e1c:	20001210 	.word	0x20001210
 8001e20:	2000183c 	.word	0x2000183c
 8001e24:	20000fd0 	.word	0x20000fd0
 8001e28:	20001834 	.word	0x20001834
 8001e2c:	20000b50 	.word	0x20000b50
 8001e30:	20001824 	.word	0x20001824
 8001e34:	200006d0 	.word	0x200006d0
 8001e38:	20001814 	.word	0x20001814
 8001e3c:	20000910 	.word	0x20000910
 8001e40:	2000181c 	.word	0x2000181c
 8001e44:	20000d90 	.word	0x20000d90
 8001e48:	2000182c 	.word	0x2000182c
 8001e4c:	200012bc 	.word	0x200012bc

08001e50 <detectZUPTPhase>:
enum PHASE detectZUPTPhase(void) {
 8001e50:	b510      	push	{r4, lr}
 8001e52:	ed2d 8b02 	vpush	{d8}
	assert(ZUPTHead != NULL);
 8001e56:	4b40      	ldr	r3, [pc, #256]	; (8001f58 <detectZUPTPhase+0x108>)
 8001e58:	6818      	ldr	r0, [r3, #0]
 8001e5a:	b140      	cbz	r0, 8001e6e <detectZUPTPhase+0x1e>
	ZUPTNode* tempNode = (ZUPTNode*)ZUPTHead->next;
 8001e5c:	6804      	ldr	r4, [r0, #0]
	free(ZUPTHead);
 8001e5e:	f002 f98b 	bl	8004178 <free>
	ZUPTHead = tempNode;
 8001e62:	4b3d      	ldr	r3, [pc, #244]	; (8001f58 <detectZUPTPhase+0x108>)
 8001e64:	601c      	str	r4, [r3, #0]
	for(i = 0; i < ZUPT_W-2; ++i) {
 8001e66:	2300      	movs	r3, #0
	float sum = 0;
 8001e68:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8001f5c <detectZUPTPhase+0x10c>
	for(i = 0; i < ZUPT_W-2; ++i) {
 8001e6c:	e00c      	b.n	8001e88 <detectZUPTPhase+0x38>
	assert(ZUPTHead != NULL);
 8001e6e:	4b3c      	ldr	r3, [pc, #240]	; (8001f60 <detectZUPTPhase+0x110>)
 8001e70:	4a3c      	ldr	r2, [pc, #240]	; (8001f64 <detectZUPTPhase+0x114>)
 8001e72:	f240 419e 	movw	r1, #1182	; 0x49e
 8001e76:	483c      	ldr	r0, [pc, #240]	; (8001f68 <detectZUPTPhase+0x118>)
 8001e78:	f002 f91c 	bl	80040b4 <__assert_func>
		sum += tempNode->w_mag_sq;
 8001e7c:	ed94 7a01 	vldr	s14, [r4, #4]
 8001e80:	ee77 7a87 	vadd.f32	s15, s15, s14
		tempNode = (ZUPTNode*)tempNode->next;
 8001e84:	6824      	ldr	r4, [r4, #0]
	for(i = 0; i < ZUPT_W-2; ++i) {
 8001e86:	3301      	adds	r3, #1
 8001e88:	2b11      	cmp	r3, #17
 8001e8a:	dc08      	bgt.n	8001e9e <detectZUPTPhase+0x4e>
		assert(tempNode != NULL);
 8001e8c:	2c00      	cmp	r4, #0
 8001e8e:	d1f5      	bne.n	8001e7c <detectZUPTPhase+0x2c>
 8001e90:	4b36      	ldr	r3, [pc, #216]	; (8001f6c <detectZUPTPhase+0x11c>)
 8001e92:	4a34      	ldr	r2, [pc, #208]	; (8001f64 <detectZUPTPhase+0x114>)
 8001e94:	f240 41a7 	movw	r1, #1191	; 0x4a7
 8001e98:	4833      	ldr	r0, [pc, #204]	; (8001f68 <detectZUPTPhase+0x118>)
 8001e9a:	f002 f90b 	bl	80040b4 <__assert_func>
	assert(tempNode != NULL);
 8001e9e:	2c00      	cmp	r4, #0
 8001ea0:	d03d      	beq.n	8001f1e <detectZUPTPhase+0xce>
	sum += tempNode->w_mag_sq; // last node
 8001ea2:	ed94 8a01 	vldr	s16, [r4, #4]
 8001ea6:	ee38 8a27 	vadd.f32	s16, s16, s15
	tempNode->next = (ZUPTNode*)createZUPTNode(w_avg_b0_mag);
 8001eaa:	4b31      	ldr	r3, [pc, #196]	; (8001f70 <detectZUPTPhase+0x120>)
 8001eac:	ed93 0a00 	vldr	s0, [r3]
 8001eb0:	f7ff fec4 	bl	8001c3c <createZUPTNode>
 8001eb4:	6020      	str	r0, [r4, #0]
	assert(tempNode->next != NULL);
 8001eb6:	2800      	cmp	r0, #0
 8001eb8:	d038      	beq.n	8001f2c <detectZUPTPhase+0xdc>
	sum += tempNode->w_mag_sq;
 8001eba:	edd0 7a01 	vldr	s15, [r0, #4]
	float Tw = sum * ZUPT_SCALE_FACTOR;
 8001ebe:	ee77 7a88 	vadd.f32	s15, s15, s16
 8001ec2:	ee17 0a90 	vmov	r0, s15
 8001ec6:	f7fe fb37 	bl	8000538 <__aeabi_f2d>
 8001eca:	a321      	add	r3, pc, #132	; (adr r3, 8001f50 <detectZUPTPhase+0x100>)
 8001ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed0:	f7fe fcb4 	bl	800083c <__aeabi_ddiv>
 8001ed4:	f7fe fe4a 	bl	8000b6c <__aeabi_d2f>
 8001ed8:	ee07 0a90 	vmov	s15, r0
	enum PHASE detected_phase = (Tw < ZUPT_THRESHOLD) ? STANCE : SWING;
 8001edc:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001f74 <detectZUPTPhase+0x124>
 8001ee0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee8:	bf4c      	ite	mi
 8001eea:	2301      	movmi	r3, #1
 8001eec:	2300      	movpl	r3, #0
	if (detected_phase != curr_phase) {
 8001eee:	4a22      	ldr	r2, [pc, #136]	; (8001f78 <detectZUPTPhase+0x128>)
 8001ef0:	7812      	ldrb	r2, [r2, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d00e      	beq.n	8001f14 <detectZUPTPhase+0xc4>
		if (detected_phase == SWING) {
 8001ef6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001efe:	d41c      	bmi.n	8001f3a <detectZUPTPhase+0xea>
			++phase_counter;
 8001f00:	4a1e      	ldr	r2, [pc, #120]	; (8001f7c <detectZUPTPhase+0x12c>)
 8001f02:	7813      	ldrb	r3, [r2, #0]
 8001f04:	3301      	adds	r3, #1
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	7013      	strb	r3, [r2, #0]
			curr_phase = (phase_counter == PHASE_INTERVAL_THRESHOLD) ? SWING : STANCE;
 8001f0a:	3b0a      	subs	r3, #10
 8001f0c:	bf18      	it	ne
 8001f0e:	2301      	movne	r3, #1
 8001f10:	4a19      	ldr	r2, [pc, #100]	; (8001f78 <detectZUPTPhase+0x128>)
 8001f12:	7013      	strb	r3, [r2, #0]
}
 8001f14:	4b18      	ldr	r3, [pc, #96]	; (8001f78 <detectZUPTPhase+0x128>)
 8001f16:	7818      	ldrb	r0, [r3, #0]
 8001f18:	ecbd 8b02 	vpop	{d8}
 8001f1c:	bd10      	pop	{r4, pc}
	assert(tempNode != NULL);
 8001f1e:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <detectZUPTPhase+0x11c>)
 8001f20:	4a10      	ldr	r2, [pc, #64]	; (8001f64 <detectZUPTPhase+0x114>)
 8001f22:	f240 41ab 	movw	r1, #1195	; 0x4ab
 8001f26:	4810      	ldr	r0, [pc, #64]	; (8001f68 <detectZUPTPhase+0x118>)
 8001f28:	f002 f8c4 	bl	80040b4 <__assert_func>
	assert(tempNode->next != NULL);
 8001f2c:	4b14      	ldr	r3, [pc, #80]	; (8001f80 <detectZUPTPhase+0x130>)
 8001f2e:	4a0d      	ldr	r2, [pc, #52]	; (8001f64 <detectZUPTPhase+0x114>)
 8001f30:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8001f34:	480c      	ldr	r0, [pc, #48]	; (8001f68 <detectZUPTPhase+0x118>)
 8001f36:	f002 f8bd 	bl	80040b4 <__assert_func>
			--phase_counter;
 8001f3a:	4a10      	ldr	r2, [pc, #64]	; (8001f7c <detectZUPTPhase+0x12c>)
 8001f3c:	7813      	ldrb	r3, [r2, #0]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	7013      	strb	r3, [r2, #0]
			curr_phase = (phase_counter == 0) ? STANCE : SWING;
 8001f44:	fab3 f383 	clz	r3, r3
 8001f48:	095b      	lsrs	r3, r3, #5
 8001f4a:	4a0b      	ldr	r2, [pc, #44]	; (8001f78 <detectZUPTPhase+0x128>)
 8001f4c:	7013      	strb	r3, [r2, #0]
 8001f4e:	e7e1      	b.n	8001f14 <detectZUPTPhase+0xc4>
 8001f50:	cccccccd 	.word	0xcccccccd
 8001f54:	3f60624d 	.word	0x3f60624d
 8001f58:	20001844 	.word	0x20001844
 8001f5c:	00000000 	.word	0x00000000
 8001f60:	080062f8 	.word	0x080062f8
 8001f64:	08006354 	.word	0x08006354
 8001f68:	0800630c 	.word	0x0800630c
 8001f6c:	08006328 	.word	0x08006328
 8001f70:	20001948 	.word	0x20001948
 8001f74:	4684d000 	.word	0x4684d000
 8001f78:	200012a0 	.word	0x200012a0
 8001f7c:	200018d4 	.word	0x200018d4
 8001f80:	0800633c 	.word	0x0800633c

08001f84 <calculateCorrectedState>:
		float timeDelta) { // TODO Verify this
 8001f84:	b530      	push	{r4, r5, lr}
 8001f86:	ed2d 8b02 	vpush	{d8}
 8001f8a:	b089      	sub	sp, #36	; 0x24
 8001f8c:	4604      	mov	r4, r0
 8001f8e:	460d      	mov	r5, r1
 8001f90:	eeb0 8a40 	vmov.f32	s16, s0
	calculateAvgAngularRate(IMU0_data, IMU1_data); // w_avg_b0
 8001f94:	f7ff fd0a 	bl	80019ac <calculateAvgAngularRate>
	calculateRotationMatrix(timeDelta);	// R_b0_n
 8001f98:	eeb0 0a48 	vmov.f32	s0, s16
 8001f9c:	f7ff f8ee 	bl	800117c <calculateRotationMatrix>
	updateFMatrix(timeDelta);	// Update F with new timeDelta
 8001fa0:	eeb0 0a48 	vmov.f32	s0, s16
 8001fa4:	f7ff fb62 	bl	800166c <updateFMatrix>
	updateBMatrix(timeDelta);	// Update B with new timeDelta
 8001fa8:	eeb0 0a48 	vmov.f32	s0, s16
 8001fac:	f7ff fb70 	bl	8001690 <updateBMatrix>
	updateUVector(IMU0_data, IMU1_data);	// Update u_curr with IMU data
 8001fb0:	4629      	mov	r1, r5
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	f7ff fddc 	bl	8001b70 <updateUVector>
	calculateStateEstimation();	// x(k) = F*x(k-1) + B*u(k)
 8001fb8:	f7ff f94a 	bl	8001250 <calculateStateEstimation>
	calculateStateEstimationErrorCovariance();	// P-(k) = F*P(k-1)*F^T + Q(k-1)
 8001fbc:	f7ff f998 	bl	80012f0 <calculateStateEstimationErrorCovariance>
	phase = detectZUPTPhase();
 8001fc0:	f7ff ff46 	bl	8001e50 <detectZUPTPhase>
	if (phase == SWING) {
 8001fc4:	4604      	mov	r4, r0
 8001fc6:	2800      	cmp	r0, #0
 8001fc8:	f040 8090 	bne.w	80020ec <calculateCorrectedState+0x168>
		Hi = H_swing;
 8001fcc:	4b59      	ldr	r3, [pc, #356]	; (8002134 <calculateCorrectedState+0x1b0>)
 8001fce:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001fd2:	ab08      	add	r3, sp, #32
 8001fd4:	e903 0003 	stmdb	r3, {r0, r1}
		Zi = Z_swing;
 8001fd8:	4a57      	ldr	r2, [pc, #348]	; (8002138 <calculateCorrectedState+0x1b4>)
 8001fda:	ab04      	add	r3, sp, #16
 8001fdc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fe0:	e883 0003 	stmia.w	r3, {r0, r1}
		Ri = R_swing;
 8001fe4:	4a55      	ldr	r2, [pc, #340]	; (800213c <calculateCorrectedState+0x1b8>)
 8001fe6:	ab02      	add	r3, sp, #8
 8001fe8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fec:	e883 0003 	stmia.w	r3, {r0, r1}
		Ki = K_swing;
 8001ff0:	4a53      	ldr	r2, [pc, #332]	; (8002140 <calculateCorrectedState+0x1bc>)
 8001ff2:	466b      	mov	r3, sp
 8001ff4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ff8:	e883 0003 	stmia.w	r3, {r0, r1}
	updateZiVector(&Zi);	// Update Observation Vector Z for optimal state estimation
 8001ffc:	a804      	add	r0, sp, #16
 8001ffe:	f7ff fbdf 	bl	80017c0 <updateZiVector>
	calculateGainMatrix(&Ki, &Hi, &Ri); // Ki(k) = P-(k)*Hi^T * (Hi*P-(k)*Hi^T + Ri(k))^-1
 8002002:	aa02      	add	r2, sp, #8
 8002004:	a906      	add	r1, sp, #24
 8002006:	4668      	mov	r0, sp
 8002008:	f7ff f9a0 	bl	800134c <calculateGainMatrix>
	calculateOptimalStateEstimation(&Ki, &Zi, &Hi);	// x(k) <-- x_best(k) = x(k) + Ki(k)*(Zi(k) - Hi*x(k))
 800200c:	aa06      	add	r2, sp, #24
 800200e:	a904      	add	r1, sp, #16
 8002010:	4668      	mov	r0, sp
 8002012:	f7ff fa23 	bl	800145c <calculateOptimalStateEstimation>
	if (phase == STANCE) {
 8002016:	2c01      	cmp	r4, #1
 8002018:	f000 8081 	beq.w	800211e <calculateCorrectedState+0x19a>
	if (fabs(x_curr_f32[8]) > v_gate) {
 800201c:	4b49      	ldr	r3, [pc, #292]	; (8002144 <calculateCorrectedState+0x1c0>)
 800201e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002022:	eef0 6ae7 	vabs.f32	s13, s15
 8002026:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002148 <calculateCorrectedState+0x1c4>
 800202a:	eef4 6ac7 	vcmpe.f32	s13, s14
 800202e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002032:	dd0d      	ble.n	8002050 <calculateCorrectedState+0xcc>
		x_curr_f32[8] = v_gate * (x_curr_f32[8] > 0 ? 1 : -1);
 8002034:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203c:	dd74      	ble.n	8002128 <calculateCorrectedState+0x1a4>
 800203e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002042:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002148 <calculateCorrectedState+0x1c4>
 8002046:	ee67 7a87 	vmul.f32	s15, s15, s14
 800204a:	4b3e      	ldr	r3, [pc, #248]	; (8002144 <calculateCorrectedState+0x1c0>)
 800204c:	edc3 7a08 	vstr	s15, [r3, #32]
	if (fabs(x_curr_f32[11]) > v_gate) {
 8002050:	4b3c      	ldr	r3, [pc, #240]	; (8002144 <calculateCorrectedState+0x1c0>)
 8002052:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002056:	eef0 6ae7 	vabs.f32	s13, s15
 800205a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002148 <calculateCorrectedState+0x1c4>
 800205e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8002062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002066:	dd0d      	ble.n	8002084 <calculateCorrectedState+0x100>
		x_curr_f32[11] = v_gate * (x_curr_f32[11] > 0 ? 1 : -1);
 8002068:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800206c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002070:	dd5d      	ble.n	800212e <calculateCorrectedState+0x1aa>
 8002072:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002076:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002148 <calculateCorrectedState+0x1c4>
 800207a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800207e:	4b31      	ldr	r3, [pc, #196]	; (8002144 <calculateCorrectedState+0x1c0>)
 8002080:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	optimal_f32[0] = (x_curr_f32[0] + x_curr_f32[3]) / 2;
 8002084:	4b2f      	ldr	r3, [pc, #188]	; (8002144 <calculateCorrectedState+0x1c0>)
 8002086:	ed93 7a00 	vldr	s14, [r3]
 800208a:	edd3 7a03 	vldr	s15, [r3, #12]
 800208e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002092:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002096:	ee27 7a26 	vmul.f32	s14, s14, s13
 800209a:	4a2c      	ldr	r2, [pc, #176]	; (800214c <calculateCorrectedState+0x1c8>)
 800209c:	ed82 7a00 	vstr	s14, [r2]
	optimal_f32[1] = (x_curr_f32[1] + x_curr_f32[4]) / 2;
 80020a0:	ed93 7a01 	vldr	s14, [r3, #4]
 80020a4:	edd3 7a04 	vldr	s15, [r3, #16]
 80020a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020ac:	ee27 7a26 	vmul.f32	s14, s14, s13
 80020b0:	ed82 7a01 	vstr	s14, [r2, #4]
	optimal_f32[2] = (x_curr_f32[2] + x_curr_f32[5]) / 2;
 80020b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80020b8:	ed93 7a05 	vldr	s14, [r3, #20]
 80020bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80020c4:	edc2 7a02 	vstr	s15, [r2, #8]
	calculateOptimalEstimationErrorCovariance(&Ki, &Hi, &Ri);	// P(k) = (I - Ki(k)*Hi)*P-(k)
 80020c8:	aa02      	add	r2, sp, #8
 80020ca:	a906      	add	r1, sp, #24
 80020cc:	4668      	mov	r0, sp
 80020ce:	f7ff fa2b 	bl	8001528 <calculateOptimalEstimationErrorCovariance>
	updatePreviousMatrices();	// update x_prev, P_prev, (Q_prev?) // TODO Add Q_prev to this?
 80020d2:	f7ff fb01 	bl	80016d8 <updatePreviousMatrices>
	phase_out = (float)phase;
 80020d6:	ee07 4a90 	vmov	s15, r4
 80020da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020de:	4b1c      	ldr	r3, [pc, #112]	; (8002150 <calculateCorrectedState+0x1cc>)
 80020e0:	edc3 7a00 	vstr	s15, [r3]
}
 80020e4:	b009      	add	sp, #36	; 0x24
 80020e6:	ecbd 8b02 	vpop	{d8}
 80020ea:	bd30      	pop	{r4, r5, pc}
		Hi = H_stance;
 80020ec:	4b19      	ldr	r3, [pc, #100]	; (8002154 <calculateCorrectedState+0x1d0>)
 80020ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020f2:	ab08      	add	r3, sp, #32
 80020f4:	e903 0003 	stmdb	r3, {r0, r1}
		Zi = Z_stance;
 80020f8:	4a17      	ldr	r2, [pc, #92]	; (8002158 <calculateCorrectedState+0x1d4>)
 80020fa:	ab04      	add	r3, sp, #16
 80020fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002100:	e883 0003 	stmia.w	r3, {r0, r1}
		Ri = R_stance;
 8002104:	4a15      	ldr	r2, [pc, #84]	; (800215c <calculateCorrectedState+0x1d8>)
 8002106:	ab02      	add	r3, sp, #8
 8002108:	e892 0003 	ldmia.w	r2, {r0, r1}
 800210c:	e883 0003 	stmia.w	r3, {r0, r1}
		Ki = K_stance;
 8002110:	4a13      	ldr	r2, [pc, #76]	; (8002160 <calculateCorrectedState+0x1dc>)
 8002112:	466b      	mov	r3, sp
 8002114:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002118:	e883 0003 	stmia.w	r3, {r0, r1}
 800211c:	e76e      	b.n	8001ffc <calculateCorrectedState+0x78>
		x_curr_f32[2] = 0;
 800211e:	4b09      	ldr	r3, [pc, #36]	; (8002144 <calculateCorrectedState+0x1c0>)
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
		x_curr_f32[5] = 0;
 8002124:	615a      	str	r2, [r3, #20]
 8002126:	e779      	b.n	800201c <calculateCorrectedState+0x98>
		x_curr_f32[8] = v_gate * (x_curr_f32[8] > 0 ? 1 : -1);
 8002128:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800212c:	e789      	b.n	8002042 <calculateCorrectedState+0xbe>
		x_curr_f32[11] = v_gate * (x_curr_f32[11] > 0 ? 1 : -1);
 800212e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8002132:	e7a0      	b.n	8002076 <calculateCorrectedState+0xf2>
 8002134:	2000149c 	.word	0x2000149c
 8002138:	20001880 	.word	0x20001880
 800213c:	2000183c 	.word	0x2000183c
 8002140:	200016ec 	.word	0x200016ec
 8002144:	200012cc 	.word	0x200012cc
 8002148:	3e99999a 	.word	0x3e99999a
 800214c:	200018c8 	.word	0x200018c8
 8002150:	200018d8 	.word	0x200018d8
 8002154:	20001494 	.word	0x20001494
 8002158:	20001848 	.word	0x20001848
 800215c:	20001834 	.word	0x20001834
 8002160:	200014a4 	.word	0x200014a4

08002164 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002164:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002166:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <HAL_MspInit+0x2c>)
 8002168:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800216a:	f042 0201 	orr.w	r2, r2, #1
 800216e:	661a      	str	r2, [r3, #96]	; 0x60
 8002170:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002172:	f002 0201 	and.w	r2, r2, #1
 8002176:	9200      	str	r2, [sp, #0]
 8002178:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800217a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800217c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002180:	659a      	str	r2, [r3, #88]	; 0x58
 8002182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002188:	9301      	str	r3, [sp, #4]
 800218a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800218c:	b002      	add	sp, #8
 800218e:	4770      	bx	lr
 8002190:	40021000 	.word	0x40021000

08002194 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002194:	b500      	push	{lr}
 8002196:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	2300      	movs	r3, #0
 800219a:	9303      	str	r3, [sp, #12]
 800219c:	9304      	str	r3, [sp, #16]
 800219e:	9305      	str	r3, [sp, #20]
 80021a0:	9306      	str	r3, [sp, #24]
 80021a2:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 80021a4:	6802      	ldr	r2, [r0, #0]
 80021a6:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <HAL_SPI_MspInit+0x64>)
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d002      	beq.n	80021b2 <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80021ac:	b009      	add	sp, #36	; 0x24
 80021ae:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021b2:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80021b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80021bc:	661a      	str	r2, [r3, #96]	; 0x60
 80021be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021c0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80021c4:	9201      	str	r2, [sp, #4]
 80021c6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021ca:	f042 0201 	orr.w	r2, r2, #1
 80021ce:	64da      	str	r2, [r3, #76]	; 0x4c
 80021d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	9302      	str	r3, [sp, #8]
 80021d8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80021da:	23c2      	movs	r3, #194	; 0xc2
 80021dc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021de:	2302      	movs	r3, #2
 80021e0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e2:	2303      	movs	r3, #3
 80021e4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021e6:	2305      	movs	r3, #5
 80021e8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ea:	a903      	add	r1, sp, #12
 80021ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021f0:	f000 f998 	bl	8002524 <HAL_GPIO_Init>
}
 80021f4:	e7da      	b.n	80021ac <HAL_SPI_MspInit+0x18>
 80021f6:	bf00      	nop
 80021f8:	40013000 	.word	0x40013000

080021fc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021fc:	e7fe      	b.n	80021fc <NMI_Handler>

080021fe <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021fe:	e7fe      	b.n	80021fe <HardFault_Handler>

08002200 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002200:	e7fe      	b.n	8002200 <MemManage_Handler>

08002202 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002202:	e7fe      	b.n	8002202 <BusFault_Handler>

08002204 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002204:	e7fe      	b.n	8002204 <UsageFault_Handler>

08002206 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002206:	4770      	bx	lr

08002208 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002208:	4770      	bx	lr

0800220a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800220a:	4770      	bx	lr

0800220c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800220c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800220e:	f000 f90b 	bl	8002428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002212:	bd08      	pop	{r3, pc}

08002214 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002214:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MAG_INT_Pin);
 8002216:	2001      	movs	r0, #1
 8002218:	f000 fa6e 	bl	80026f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800221c:	bd08      	pop	{r3, pc}
	...

08002220 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002220:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU3_INT1_Pin);
 8002222:	2008      	movs	r0, #8
 8002224:	f000 fa68 	bl	80026f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  DRDY_flag = 1;
 8002228:	4b01      	ldr	r3, [pc, #4]	; (8002230 <EXTI3_IRQHandler+0x10>)
 800222a:	2201      	movs	r2, #1
 800222c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI3_IRQn 1 */
}
 800222e:	bd08      	pop	{r3, pc}
 8002230:	200013b8 	.word	0x200013b8

08002234 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002234:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU3_INT2_Pin);
 8002236:	2010      	movs	r0, #16
 8002238:	f000 fa5e 	bl	80026f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  DRDY_flag = 1;
 800223c:	4b01      	ldr	r3, [pc, #4]	; (8002244 <EXTI4_IRQHandler+0x10>)
 800223e:	2201      	movs	r2, #1
 8002240:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI4_IRQn 1 */
}
 8002242:	bd08      	pop	{r3, pc}
 8002244:	200013b8 	.word	0x200013b8

08002248 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002248:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU2_INT1_Pin);
 800224a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800224e:	f000 fa53 	bl	80026f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  DRDY_flag = 1;
 8002252:	4b02      	ldr	r3, [pc, #8]	; (800225c <EXTI9_5_IRQHandler+0x14>)
 8002254:	2201      	movs	r2, #1
 8002256:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002258:	bd08      	pop	{r3, pc}
 800225a:	bf00      	nop
 800225c:	200013b8 	.word	0x200013b8

08002260 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002260:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU2_INT2_Pin);
 8002262:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002266:	f000 fa47 	bl	80026f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IMU1_INT1_Pin);
 800226a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800226e:	f000 fa43 	bl	80026f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IMU1_INT2_Pin);
 8002272:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002276:	f000 fa3f 	bl	80026f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  DRDY_flag = 1;
 800227a:	4b02      	ldr	r3, [pc, #8]	; (8002284 <EXTI15_10_IRQHandler+0x24>)
 800227c:	2201      	movs	r2, #1
 800227e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002280:	bd08      	pop	{r3, pc}
 8002282:	bf00      	nop
 8002284:	200013b8 	.word	0x200013b8

08002288 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8002288:	2001      	movs	r0, #1
 800228a:	4770      	bx	lr

0800228c <_kill>:

int _kill(int pid, int sig)
{
 800228c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800228e:	f001 ff2f 	bl	80040f0 <__errno>
 8002292:	2316      	movs	r3, #22
 8002294:	6003      	str	r3, [r0, #0]
  return -1;
}
 8002296:	f04f 30ff 	mov.w	r0, #4294967295
 800229a:	bd08      	pop	{r3, pc}

0800229c <_exit>:

void _exit (int status)
{
 800229c:	b508      	push	{r3, lr}
  _kill(status, -1);
 800229e:	f04f 31ff 	mov.w	r1, #4294967295
 80022a2:	f7ff fff3 	bl	800228c <_kill>
  while (1) {}    /* Make sure we hang here */
 80022a6:	e7fe      	b.n	80022a6 <_exit+0xa>

080022a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022a8:	b570      	push	{r4, r5, r6, lr}
 80022aa:	460c      	mov	r4, r1
 80022ac:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ae:	2500      	movs	r5, #0
 80022b0:	e006      	b.n	80022c0 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 80022b2:	f3af 8000 	nop.w
 80022b6:	4621      	mov	r1, r4
 80022b8:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022bc:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 80022be:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c0:	42b5      	cmp	r5, r6
 80022c2:	dbf6      	blt.n	80022b2 <_read+0xa>
  }

  return len;
}
 80022c4:	4630      	mov	r0, r6
 80022c6:	bd70      	pop	{r4, r5, r6, pc}

080022c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022c8:	b570      	push	{r4, r5, r6, lr}
 80022ca:	460c      	mov	r4, r1
 80022cc:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ce:	2500      	movs	r5, #0
 80022d0:	e004      	b.n	80022dc <_write+0x14>
  {
    __io_putchar(*ptr++);
 80022d2:	f814 0b01 	ldrb.w	r0, [r4], #1
 80022d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022da:	3501      	adds	r5, #1
 80022dc:	42b5      	cmp	r5, r6
 80022de:	dbf8      	blt.n	80022d2 <_write+0xa>
  }
  return len;
}
 80022e0:	4630      	mov	r0, r6
 80022e2:	bd70      	pop	{r4, r5, r6, pc}

080022e4 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80022e4:	f04f 30ff 	mov.w	r0, #4294967295
 80022e8:	4770      	bx	lr

080022ea <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80022ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022ee:	604b      	str	r3, [r1, #4]
  return 0;
}
 80022f0:	2000      	movs	r0, #0
 80022f2:	4770      	bx	lr

080022f4 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80022f4:	2001      	movs	r0, #1
 80022f6:	4770      	bx	lr

080022f8 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80022f8:	2000      	movs	r0, #0
 80022fa:	4770      	bx	lr

080022fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022fc:	b510      	push	{r4, lr}
 80022fe:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002300:	4a0c      	ldr	r2, [pc, #48]	; (8002334 <_sbrk+0x38>)
 8002302:	490d      	ldr	r1, [pc, #52]	; (8002338 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002304:	480d      	ldr	r0, [pc, #52]	; (800233c <_sbrk+0x40>)
 8002306:	6800      	ldr	r0, [r0, #0]
 8002308:	b140      	cbz	r0, 800231c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800230a:	480c      	ldr	r0, [pc, #48]	; (800233c <_sbrk+0x40>)
 800230c:	6800      	ldr	r0, [r0, #0]
 800230e:	4403      	add	r3, r0
 8002310:	1a52      	subs	r2, r2, r1
 8002312:	4293      	cmp	r3, r2
 8002314:	d806      	bhi.n	8002324 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002316:	4a09      	ldr	r2, [pc, #36]	; (800233c <_sbrk+0x40>)
 8002318:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800231a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800231c:	4807      	ldr	r0, [pc, #28]	; (800233c <_sbrk+0x40>)
 800231e:	4c08      	ldr	r4, [pc, #32]	; (8002340 <_sbrk+0x44>)
 8002320:	6004      	str	r4, [r0, #0]
 8002322:	e7f2      	b.n	800230a <_sbrk+0xe>
    errno = ENOMEM;
 8002324:	f001 fee4 	bl	80040f0 <__errno>
 8002328:	230c      	movs	r3, #12
 800232a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800232c:	f04f 30ff 	mov.w	r0, #4294967295
 8002330:	e7f3      	b.n	800231a <_sbrk+0x1e>
 8002332:	bf00      	nop
 8002334:	20010000 	.word	0x20010000
 8002338:	00000400 	.word	0x00000400
 800233c:	20001a9c 	.word	0x20001a9c
 8002340:	20001ab8 	.word	0x20001ab8

08002344 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002344:	4a03      	ldr	r2, [pc, #12]	; (8002354 <SystemInit+0x10>)
 8002346:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800234a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800234e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002352:	4770      	bx	lr
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002358:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002390 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800235c:	f7ff fff2 	bl	8002344 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002360:	480c      	ldr	r0, [pc, #48]	; (8002394 <LoopForever+0x6>)
  ldr r1, =_edata
 8002362:	490d      	ldr	r1, [pc, #52]	; (8002398 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002364:	4a0d      	ldr	r2, [pc, #52]	; (800239c <LoopForever+0xe>)
  movs r3, #0
 8002366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002368:	e002      	b.n	8002370 <LoopCopyDataInit>

0800236a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800236a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800236c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800236e:	3304      	adds	r3, #4

08002370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002374:	d3f9      	bcc.n	800236a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002376:	4a0a      	ldr	r2, [pc, #40]	; (80023a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002378:	4c0a      	ldr	r4, [pc, #40]	; (80023a4 <LoopForever+0x16>)
  movs r3, #0
 800237a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800237c:	e001      	b.n	8002382 <LoopFillZerobss>

0800237e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800237e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002380:	3204      	adds	r2, #4

08002382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002384:	d3fb      	bcc.n	800237e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002386:	f001 fecb 	bl	8004120 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800238a:	f7fe fea3 	bl	80010d4 <main>

0800238e <LoopForever>:

LoopForever:
    b LoopForever
 800238e:	e7fe      	b.n	800238e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002390:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002398:	2000139c 	.word	0x2000139c
  ldr r2, =_sidata
 800239c:	08006658 	.word	0x08006658
  ldr r2, =_sbss
 80023a0:	2000139c 	.word	0x2000139c
  ldr r4, =_ebss
 80023a4:	20001ab4 	.word	0x20001ab4

080023a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023a8:	e7fe      	b.n	80023a8 <ADC1_IRQHandler>
	...

080023ac <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80023ac:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <HAL_InitTick+0x44>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	b90b      	cbnz	r3, 80023b6 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80023b2:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80023b4:	4770      	bx	lr
{
 80023b6:	b510      	push	{r4, lr}
 80023b8:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80023ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023be:	fbb0 f3f3 	udiv	r3, r0, r3
 80023c2:	4a0c      	ldr	r2, [pc, #48]	; (80023f4 <HAL_InitTick+0x48>)
 80023c4:	6810      	ldr	r0, [r2, #0]
 80023c6:	fbb0 f0f3 	udiv	r0, r0, r3
 80023ca:	f000 f897 	bl	80024fc <HAL_SYSTICK_Config>
 80023ce:	b968      	cbnz	r0, 80023ec <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023d0:	2c0f      	cmp	r4, #15
 80023d2:	d901      	bls.n	80023d8 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 80023d4:	2001      	movs	r0, #1
 80023d6:	e00a      	b.n	80023ee <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023d8:	2200      	movs	r2, #0
 80023da:	4621      	mov	r1, r4
 80023dc:	f04f 30ff 	mov.w	r0, #4294967295
 80023e0:	f000 f846 	bl	8002470 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023e4:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <HAL_InitTick+0x4c>)
 80023e6:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 80023e8:	2000      	movs	r0, #0
 80023ea:	e000      	b.n	80023ee <HAL_InitTick+0x42>
      status = HAL_ERROR;
 80023ec:	2001      	movs	r0, #1
}
 80023ee:	bd10      	pop	{r4, pc}
 80023f0:	20001330 	.word	0x20001330
 80023f4:	2000132c 	.word	0x2000132c
 80023f8:	20001334 	.word	0x20001334

080023fc <HAL_Init>:
{
 80023fc:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023fe:	4a09      	ldr	r2, [pc, #36]	; (8002424 <HAL_Init+0x28>)
 8002400:	6813      	ldr	r3, [r2, #0]
 8002402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002406:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002408:	2003      	movs	r0, #3
 800240a:	f000 f81f 	bl	800244c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800240e:	200f      	movs	r0, #15
 8002410:	f7ff ffcc 	bl	80023ac <HAL_InitTick>
 8002414:	b110      	cbz	r0, 800241c <HAL_Init+0x20>
    status = HAL_ERROR;
 8002416:	2401      	movs	r4, #1
}
 8002418:	4620      	mov	r0, r4
 800241a:	bd10      	pop	{r4, pc}
 800241c:	4604      	mov	r4, r0
    HAL_MspInit();
 800241e:	f7ff fea1 	bl	8002164 <HAL_MspInit>
 8002422:	e7f9      	b.n	8002418 <HAL_Init+0x1c>
 8002424:	40022000 	.word	0x40022000

08002428 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002428:	4b03      	ldr	r3, [pc, #12]	; (8002438 <HAL_IncTick+0x10>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	4a03      	ldr	r2, [pc, #12]	; (800243c <HAL_IncTick+0x14>)
 800242e:	6811      	ldr	r1, [r2, #0]
 8002430:	440b      	add	r3, r1
 8002432:	6013      	str	r3, [r2, #0]
}
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	20001330 	.word	0x20001330
 800243c:	20001aa0 	.word	0x20001aa0

08002440 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002440:	4b01      	ldr	r3, [pc, #4]	; (8002448 <HAL_GetTick+0x8>)
 8002442:	6818      	ldr	r0, [r3, #0]
}
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	20001aa0 	.word	0x20001aa0

0800244c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800244c:	4a07      	ldr	r2, [pc, #28]	; (800246c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800244e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002450:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002454:	041b      	lsls	r3, r3, #16
 8002456:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002458:	0200      	lsls	r0, r0, #8
 800245a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800245e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002460:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002468:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800246a:	4770      	bx	lr
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002470:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002472:	4b19      	ldr	r3, [pc, #100]	; (80024d8 <HAL_NVIC_SetPriority+0x68>)
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800247a:	f1c3 0c07 	rsb	ip, r3, #7
 800247e:	f1bc 0f04 	cmp.w	ip, #4
 8002482:	bf28      	it	cs
 8002484:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002488:	f103 0e04 	add.w	lr, r3, #4
 800248c:	f1be 0f06 	cmp.w	lr, #6
 8002490:	d918      	bls.n	80024c4 <HAL_NVIC_SetPriority+0x54>
 8002492:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002494:	f04f 3eff 	mov.w	lr, #4294967295
 8002498:	fa0e fc0c 	lsl.w	ip, lr, ip
 800249c:	ea21 010c 	bic.w	r1, r1, ip
 80024a0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a2:	fa0e f303 	lsl.w	r3, lr, r3
 80024a6:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024aa:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80024ac:	2800      	cmp	r0, #0
 80024ae:	db0b      	blt.n	80024c8 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b0:	0109      	lsls	r1, r1, #4
 80024b2:	b2c9      	uxtb	r1, r1
 80024b4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80024b8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80024bc:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80024c0:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024c4:	2300      	movs	r3, #0
 80024c6:	e7e5      	b.n	8002494 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c8:	f000 000f 	and.w	r0, r0, #15
 80024cc:	0109      	lsls	r1, r1, #4
 80024ce:	b2c9      	uxtb	r1, r1
 80024d0:	4b02      	ldr	r3, [pc, #8]	; (80024dc <HAL_NVIC_SetPriority+0x6c>)
 80024d2:	5419      	strb	r1, [r3, r0]
 80024d4:	e7f4      	b.n	80024c0 <HAL_NVIC_SetPriority+0x50>
 80024d6:	bf00      	nop
 80024d8:	e000ed00 	.word	0xe000ed00
 80024dc:	e000ed14 	.word	0xe000ed14

080024e0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80024e0:	2800      	cmp	r0, #0
 80024e2:	db07      	blt.n	80024f4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024e4:	f000 021f 	and.w	r2, r0, #31
 80024e8:	0940      	lsrs	r0, r0, #5
 80024ea:	2301      	movs	r3, #1
 80024ec:	4093      	lsls	r3, r2
 80024ee:	4a02      	ldr	r2, [pc, #8]	; (80024f8 <HAL_NVIC_EnableIRQ+0x18>)
 80024f0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	e000e100 	.word	0xe000e100

080024fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024fc:	3801      	subs	r0, #1
 80024fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002502:	d20b      	bcs.n	800251c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002504:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002508:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250a:	4a05      	ldr	r2, [pc, #20]	; (8002520 <HAL_SYSTICK_Config+0x24>)
 800250c:	21f0      	movs	r1, #240	; 0xf0
 800250e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002512:	2000      	movs	r0, #0
 8002514:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002516:	2207      	movs	r2, #7
 8002518:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800251a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800251c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800251e:	4770      	bx	lr
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002526:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8002528:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800252a:	e062      	b.n	80025f2 <HAL_GPIO_Init+0xce>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800252c:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800252e:	005e      	lsls	r6, r3, #1
 8002530:	2403      	movs	r4, #3
 8002532:	40b4      	lsls	r4, r6
 8002534:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002538:	68cc      	ldr	r4, [r1, #12]
 800253a:	40b4      	lsls	r4, r6
 800253c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800253e:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002540:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002542:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002546:	684c      	ldr	r4, [r1, #4]
 8002548:	f3c4 1400 	ubfx	r4, r4, #4, #1
 800254c:	409c      	lsls	r4, r3
 800254e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8002552:	6044      	str	r4, [r0, #4]
 8002554:	e05e      	b.n	8002614 <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002556:	08dd      	lsrs	r5, r3, #3
 8002558:	3508      	adds	r5, #8
 800255a:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800255e:	f003 0407 	and.w	r4, r3, #7
 8002562:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8002566:	240f      	movs	r4, #15
 8002568:	fa04 f40c 	lsl.w	r4, r4, ip
 800256c:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002570:	690c      	ldr	r4, [r1, #16]
 8002572:	fa04 f40c 	lsl.w	r4, r4, ip
 8002576:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 800257a:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 800257e:	e060      	b.n	8002642 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002580:	2404      	movs	r4, #4
 8002582:	e000      	b.n	8002586 <HAL_GPIO_Init+0x62>
 8002584:	2400      	movs	r4, #0
 8002586:	fa04 f40e 	lsl.w	r4, r4, lr
 800258a:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 800258c:	f10c 0c02 	add.w	ip, ip, #2
 8002590:	4d52      	ldr	r5, [pc, #328]	; (80026dc <HAL_GPIO_Init+0x1b8>)
 8002592:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002596:	4c52      	ldr	r4, [pc, #328]	; (80026e0 <HAL_GPIO_Init+0x1bc>)
 8002598:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 800259a:	43d4      	mvns	r4, r2
 800259c:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025a0:	684f      	ldr	r7, [r1, #4]
 80025a2:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80025a6:	d001      	beq.n	80025ac <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 80025a8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80025ac:	4d4c      	ldr	r5, [pc, #304]	; (80026e0 <HAL_GPIO_Init+0x1bc>)
 80025ae:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 80025b0:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 80025b2:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025b6:	684f      	ldr	r7, [r1, #4]
 80025b8:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 80025bc:	d001      	beq.n	80025c2 <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 80025be:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 80025c2:	4d47      	ldr	r5, [pc, #284]	; (80026e0 <HAL_GPIO_Init+0x1bc>)
 80025c4:	60ee      	str	r6, [r5, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025c6:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80025c8:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025cc:	684f      	ldr	r7, [r1, #4]
 80025ce:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80025d2:	d001      	beq.n	80025d8 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 80025d4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 80025d8:	4d41      	ldr	r5, [pc, #260]	; (80026e0 <HAL_GPIO_Init+0x1bc>)
 80025da:	606e      	str	r6, [r5, #4]

        temp = EXTI->IMR1;
 80025dc:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 80025de:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025e0:	684e      	ldr	r6, [r1, #4]
 80025e2:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 80025e6:	d001      	beq.n	80025ec <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 80025e8:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 80025ec:	4a3c      	ldr	r2, [pc, #240]	; (80026e0 <HAL_GPIO_Init+0x1bc>)
 80025ee:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 80025f0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025f2:	680a      	ldr	r2, [r1, #0]
 80025f4:	fa32 f403 	lsrs.w	r4, r2, r3
 80025f8:	d06e      	beq.n	80026d8 <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025fa:	f04f 0c01 	mov.w	ip, #1
 80025fe:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8002602:	ea1c 0202 	ands.w	r2, ip, r2
 8002606:	d0f3      	beq.n	80025f0 <HAL_GPIO_Init+0xcc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002608:	684c      	ldr	r4, [r1, #4]
 800260a:	f004 0403 	and.w	r4, r4, #3
 800260e:	3c01      	subs	r4, #1
 8002610:	2c01      	cmp	r4, #1
 8002612:	d98b      	bls.n	800252c <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002614:	684c      	ldr	r4, [r1, #4]
 8002616:	f004 0403 	and.w	r4, r4, #3
 800261a:	2c03      	cmp	r4, #3
 800261c:	d00c      	beq.n	8002638 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 800261e:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002620:	005d      	lsls	r5, r3, #1
 8002622:	f04f 0c03 	mov.w	ip, #3
 8002626:	fa0c fc05 	lsl.w	ip, ip, r5
 800262a:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800262e:	688c      	ldr	r4, [r1, #8]
 8002630:	40ac      	lsls	r4, r5
 8002632:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8002636:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002638:	684c      	ldr	r4, [r1, #4]
 800263a:	f004 0403 	and.w	r4, r4, #3
 800263e:	2c02      	cmp	r4, #2
 8002640:	d089      	beq.n	8002556 <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 8002642:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002644:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002648:	f04f 0c03 	mov.w	ip, #3
 800264c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002650:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002654:	684c      	ldr	r4, [r1, #4]
 8002656:	f004 0403 	and.w	r4, r4, #3
 800265a:	fa04 f40e 	lsl.w	r4, r4, lr
 800265e:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8002662:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002664:	684c      	ldr	r4, [r1, #4]
 8002666:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 800266a:	d0c1      	beq.n	80025f0 <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800266c:	4c1d      	ldr	r4, [pc, #116]	; (80026e4 <HAL_GPIO_Init+0x1c0>)
 800266e:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8002670:	f045 0501 	orr.w	r5, r5, #1
 8002674:	6625      	str	r5, [r4, #96]	; 0x60
 8002676:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8002678:	f004 0401 	and.w	r4, r4, #1
 800267c:	9401      	str	r4, [sp, #4]
 800267e:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002680:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8002684:	f10c 0502 	add.w	r5, ip, #2
 8002688:	4c14      	ldr	r4, [pc, #80]	; (80026dc <HAL_GPIO_Init+0x1b8>)
 800268a:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800268e:	f003 0403 	and.w	r4, r3, #3
 8002692:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8002696:	240f      	movs	r4, #15
 8002698:	fa04 f40e 	lsl.w	r4, r4, lr
 800269c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026a0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80026a4:	f43f af6e 	beq.w	8002584 <HAL_GPIO_Init+0x60>
 80026a8:	4c0f      	ldr	r4, [pc, #60]	; (80026e8 <HAL_GPIO_Init+0x1c4>)
 80026aa:	42a0      	cmp	r0, r4
 80026ac:	d00e      	beq.n	80026cc <HAL_GPIO_Init+0x1a8>
 80026ae:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80026b2:	42a0      	cmp	r0, r4
 80026b4:	d00c      	beq.n	80026d0 <HAL_GPIO_Init+0x1ac>
 80026b6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80026ba:	42a0      	cmp	r0, r4
 80026bc:	d00a      	beq.n	80026d4 <HAL_GPIO_Init+0x1b0>
 80026be:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80026c2:	42a0      	cmp	r0, r4
 80026c4:	f43f af5c 	beq.w	8002580 <HAL_GPIO_Init+0x5c>
 80026c8:	2407      	movs	r4, #7
 80026ca:	e75c      	b.n	8002586 <HAL_GPIO_Init+0x62>
 80026cc:	2401      	movs	r4, #1
 80026ce:	e75a      	b.n	8002586 <HAL_GPIO_Init+0x62>
 80026d0:	2402      	movs	r4, #2
 80026d2:	e758      	b.n	8002586 <HAL_GPIO_Init+0x62>
 80026d4:	2403      	movs	r4, #3
 80026d6:	e756      	b.n	8002586 <HAL_GPIO_Init+0x62>
  }
}
 80026d8:	b003      	add	sp, #12
 80026da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026dc:	40010000 	.word	0x40010000
 80026e0:	40010400 	.word	0x40010400
 80026e4:	40021000 	.word	0x40021000
 80026e8:	48000400 	.word	0x48000400

080026ec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026ec:	b10a      	cbz	r2, 80026f2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026ee:	6181      	str	r1, [r0, #24]
 80026f0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026f2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80026f4:	4770      	bx	lr

080026f6 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80026f6:	4770      	bx	lr

080026f8 <HAL_GPIO_EXTI_IRQHandler>:
{
 80026f8:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026fa:	4b05      	ldr	r3, [pc, #20]	; (8002710 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	4203      	tst	r3, r0
 8002700:	d100      	bne.n	8002704 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8002702:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002704:	4b02      	ldr	r3, [pc, #8]	; (8002710 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002706:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002708:	f7ff fff5 	bl	80026f6 <HAL_GPIO_EXTI_Callback>
}
 800270c:	e7f9      	b.n	8002702 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800270e:	bf00      	nop
 8002710:	40010400 	.word	0x40010400

08002714 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002714:	4b02      	ldr	r3, [pc, #8]	; (8002720 <HAL_PWREx_GetVoltageRange+0xc>)
 8002716:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002718:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	40007000 	.word	0x40007000

08002724 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002724:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002728:	d00f      	beq.n	800274a <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800272a:	4b1f      	ldr	r3, [pc, #124]	; (80027a8 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002736:	d034      	beq.n	80027a2 <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002738:	4a1b      	ldr	r2, [pc, #108]	; (80027a8 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800273a:	6813      	ldr	r3, [r2, #0]
 800273c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002740:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002744:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002746:	2000      	movs	r0, #0
 8002748:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800274a:	4b17      	ldr	r3, [pc, #92]	; (80027a8 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002752:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002756:	d020      	beq.n	800279a <HAL_PWREx_ControlVoltageScaling+0x76>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002758:	4a13      	ldr	r2, [pc, #76]	; (80027a8 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800275a:	6813      	ldr	r3, [r2, #0]
 800275c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002760:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002764:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002766:	4b11      	ldr	r3, [pc, #68]	; (80027ac <HAL_PWREx_ControlVoltageScaling+0x88>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2232      	movs	r2, #50	; 0x32
 800276c:	fb02 f303 	mul.w	r3, r2, r3
 8002770:	4a0f      	ldr	r2, [pc, #60]	; (80027b0 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8002772:	fba2 2303 	umull	r2, r3, r2, r3
 8002776:	0c9b      	lsrs	r3, r3, #18
 8002778:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800277a:	e000      	b.n	800277e <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 800277c:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800277e:	4a0a      	ldr	r2, [pc, #40]	; (80027a8 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8002780:	6952      	ldr	r2, [r2, #20]
 8002782:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002786:	d001      	beq.n	800278c <HAL_PWREx_ControlVoltageScaling+0x68>
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1f7      	bne.n	800277c <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800278c:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002794:	d103      	bne.n	800279e <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 8002796:	2000      	movs	r0, #0
 8002798:	4770      	bx	lr
 800279a:	2000      	movs	r0, #0
 800279c:	4770      	bx	lr
        return HAL_TIMEOUT;
 800279e:	2003      	movs	r0, #3
 80027a0:	4770      	bx	lr
  return HAL_OK;
 80027a2:	2000      	movs	r0, #0
}
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40007000 	.word	0x40007000
 80027ac:	2000132c 	.word	0x2000132c
 80027b0:	431bde83 	.word	0x431bde83

080027b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027b4:	b530      	push	{r4, r5, lr}
 80027b6:	b083      	sub	sp, #12
 80027b8:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027ba:	4b20      	ldr	r3, [pc, #128]	; (800283c <RCC_SetFlashLatencyFromMSIRange+0x88>)
 80027bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027be:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80027c2:	d00b      	beq.n	80027dc <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027c4:	f7ff ffa6 	bl	8002714 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027c8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80027cc:	d017      	beq.n	80027fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80027ce:	2c80      	cmp	r4, #128	; 0x80
 80027d0:	d81f      	bhi.n	8002812 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80027d2:	d02d      	beq.n	8002830 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 80027d4:	2c70      	cmp	r4, #112	; 0x70
 80027d6:	d02d      	beq.n	8002834 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027d8:	2100      	movs	r1, #0
 80027da:	e01b      	b.n	8002814 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 80027dc:	4d17      	ldr	r5, [pc, #92]	; (800283c <RCC_SetFlashLatencyFromMSIRange+0x88>)
 80027de:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80027e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e4:	65ab      	str	r3, [r5, #88]	; 0x58
 80027e6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80027e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ec:	9301      	str	r3, [sp, #4]
 80027ee:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80027f0:	f7ff ff90 	bl	8002714 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80027f4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80027f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027fa:	65ab      	str	r3, [r5, #88]	; 0x58
 80027fc:	e7e4      	b.n	80027c8 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 80027fe:	2c80      	cmp	r4, #128	; 0x80
 8002800:	d903      	bls.n	800280a <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8002802:	2ca0      	cmp	r4, #160	; 0xa0
 8002804:	d903      	bls.n	800280e <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8002806:	2102      	movs	r1, #2
 8002808:	e004      	b.n	8002814 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800280a:	2100      	movs	r1, #0
 800280c:	e002      	b.n	8002814 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 800280e:	2101      	movs	r1, #1
 8002810:	e000      	b.n	8002814 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8002812:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002814:	4a0a      	ldr	r2, [pc, #40]	; (8002840 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8002816:	6813      	ldr	r3, [r2, #0]
 8002818:	f023 0307 	bic.w	r3, r3, #7
 800281c:	430b      	orrs	r3, r1
 800281e:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002820:	6813      	ldr	r3, [r2, #0]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	428b      	cmp	r3, r1
 8002828:	d106      	bne.n	8002838 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800282a:	2000      	movs	r0, #0
}
 800282c:	b003      	add	sp, #12
 800282e:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8002830:	2102      	movs	r1, #2
 8002832:	e7ef      	b.n	8002814 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8002834:	2101      	movs	r1, #1
 8002836:	e7ed      	b.n	8002814 <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 8002838:	2001      	movs	r0, #1
 800283a:	e7f7      	b.n	800282c <RCC_SetFlashLatencyFromMSIRange+0x78>
 800283c:	40021000 	.word	0x40021000
 8002840:	40022000 	.word	0x40022000

08002844 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002844:	4a28      	ldr	r2, [pc, #160]	; (80028e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002846:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002848:	68d2      	ldr	r2, [r2, #12]
 800284a:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800284e:	f013 030c 	ands.w	r3, r3, #12
 8002852:	d00a      	beq.n	800286a <HAL_RCC_GetSysClockFreq+0x26>
 8002854:	2b0c      	cmp	r3, #12
 8002856:	d006      	beq.n	8002866 <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002858:	2b04      	cmp	r3, #4
 800285a:	d01f      	beq.n	800289c <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800285c:	2b08      	cmp	r3, #8
 800285e:	d020      	beq.n	80028a2 <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002860:	2000      	movs	r0, #0
 8002862:	4602      	mov	r2, r0
 8002864:	e010      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002866:	2a01      	cmp	r2, #1
 8002868:	d1f6      	bne.n	8002858 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800286a:	4a1f      	ldr	r2, [pc, #124]	; (80028e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800286c:	6812      	ldr	r2, [r2, #0]
 800286e:	f012 0f08 	tst.w	r2, #8
 8002872:	d10c      	bne.n	800288e <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002874:	4a1c      	ldr	r2, [pc, #112]	; (80028e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002876:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 800287a:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 800287e:	491b      	ldr	r1, [pc, #108]	; (80028ec <HAL_RCC_GetSysClockFreq+0xa8>)
 8002880:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002884:	b143      	cbz	r3, 8002898 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002886:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002888:	2b0c      	cmp	r3, #12
 800288a:	d00d      	beq.n	80028a8 <HAL_RCC_GetSysClockFreq+0x64>
}
 800288c:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800288e:	4a16      	ldr	r2, [pc, #88]	; (80028e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002890:	6812      	ldr	r2, [r2, #0]
 8002892:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002896:	e7f2      	b.n	800287e <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 8002898:	4610      	mov	r0, r2
 800289a:	e7f5      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 800289c:	4814      	ldr	r0, [pc, #80]	; (80028f0 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800289e:	2200      	movs	r2, #0
 80028a0:	e7f2      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 80028a2:	4814      	ldr	r0, [pc, #80]	; (80028f4 <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028a4:	2200      	movs	r2, #0
 80028a6:	e7ef      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028a8:	4b0f      	ldr	r3, [pc, #60]	; (80028e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d016      	beq.n	80028e2 <HAL_RCC_GetSysClockFreq+0x9e>
 80028b4:	2b03      	cmp	r3, #3
 80028b6:	d100      	bne.n	80028ba <HAL_RCC_GetSysClockFreq+0x76>
      pllvco = HSE_VALUE;
 80028b8:	4a0e      	ldr	r2, [pc, #56]	; (80028f4 <HAL_RCC_GetSysClockFreq+0xb0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028ba:	490b      	ldr	r1, [pc, #44]	; (80028e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028bc:	68c8      	ldr	r0, [r1, #12]
 80028be:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80028c2:	1c43      	adds	r3, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80028c4:	68c8      	ldr	r0, [r1, #12]
 80028c6:	f3c0 2006 	ubfx	r0, r0, #8, #7
 80028ca:	fb02 f000 	mul.w	r0, r2, r0
 80028ce:	fbb0 f0f3 	udiv	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028d2:	68cb      	ldr	r3, [r1, #12]
 80028d4:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80028d8:	3301      	adds	r3, #1
 80028da:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 80028dc:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 80028e0:	e7d4      	b.n	800288c <HAL_RCC_GetSysClockFreq+0x48>
    switch (pllsource)
 80028e2:	4a03      	ldr	r2, [pc, #12]	; (80028f0 <HAL_RCC_GetSysClockFreq+0xac>)
 80028e4:	e7e9      	b.n	80028ba <HAL_RCC_GetSysClockFreq+0x76>
 80028e6:	bf00      	nop
 80028e8:	40021000 	.word	0x40021000
 80028ec:	08006374 	.word	0x08006374
 80028f0:	00f42400 	.word	0x00f42400
 80028f4:	007a1200 	.word	0x007a1200

080028f8 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80028f8:	2800      	cmp	r0, #0
 80028fa:	f000 831c 	beq.w	8002f36 <HAL_RCC_OscConfig+0x63e>
{
 80028fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002900:	b083      	sub	sp, #12
 8002902:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002904:	4b96      	ldr	r3, [pc, #600]	; (8002b60 <HAL_RCC_OscConfig+0x268>)
 8002906:	689d      	ldr	r5, [r3, #8]
 8002908:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800290c:	68de      	ldr	r6, [r3, #12]
 800290e:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002912:	6803      	ldr	r3, [r0, #0]
 8002914:	f013 0f10 	tst.w	r3, #16
 8002918:	d05a      	beq.n	80029d0 <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800291a:	b1e5      	cbz	r5, 8002956 <HAL_RCC_OscConfig+0x5e>
 800291c:	2d0c      	cmp	r5, #12
 800291e:	d018      	beq.n	8002952 <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002920:	69a3      	ldr	r3, [r4, #24]
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 80bb 	beq.w	8002a9e <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 8002928:	4a8d      	ldr	r2, [pc, #564]	; (8002b60 <HAL_RCC_OscConfig+0x268>)
 800292a:	6813      	ldr	r3, [r2, #0]
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002932:	f7ff fd85 	bl	8002440 <HAL_GetTick>
 8002936:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002938:	4b89      	ldr	r3, [pc, #548]	; (8002b60 <HAL_RCC_OscConfig+0x268>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f013 0f02 	tst.w	r3, #2
 8002940:	f040 809a 	bne.w	8002a78 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002944:	f7ff fd7c 	bl	8002440 <HAL_GetTick>
 8002948:	1bc0      	subs	r0, r0, r7
 800294a:	2802      	cmp	r0, #2
 800294c:	d9f4      	bls.n	8002938 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 800294e:	2003      	movs	r0, #3
 8002950:	e2fc      	b.n	8002f4c <HAL_RCC_OscConfig+0x654>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002952:	2e01      	cmp	r6, #1
 8002954:	d1e4      	bne.n	8002920 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002956:	4b82      	ldr	r3, [pc, #520]	; (8002b60 <HAL_RCC_OscConfig+0x268>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f013 0f02 	tst.w	r3, #2
 800295e:	d003      	beq.n	8002968 <HAL_RCC_OscConfig+0x70>
 8002960:	69a3      	ldr	r3, [r4, #24]
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 82e9 	beq.w	8002f3a <HAL_RCC_OscConfig+0x642>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002968:	6a20      	ldr	r0, [r4, #32]
 800296a:	4b7d      	ldr	r3, [pc, #500]	; (8002b60 <HAL_RCC_OscConfig+0x268>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f013 0f08 	tst.w	r3, #8
 8002972:	d05b      	beq.n	8002a2c <HAL_RCC_OscConfig+0x134>
 8002974:	4b7a      	ldr	r3, [pc, #488]	; (8002b60 <HAL_RCC_OscConfig+0x268>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800297c:	4298      	cmp	r0, r3
 800297e:	d85c      	bhi.n	8002a3a <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002980:	4b77      	ldr	r3, [pc, #476]	; (8002b60 <HAL_RCC_OscConfig+0x268>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	f042 0208 	orr.w	r2, r2, #8
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002990:	6a21      	ldr	r1, [r4, #32]
 8002992:	430a      	orrs	r2, r1
 8002994:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800299c:	69e1      	ldr	r1, [r4, #28]
 800299e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80029a2:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029a4:	2d00      	cmp	r5, #0
 80029a6:	d060      	beq.n	8002a6a <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029a8:	f7ff ff4c 	bl	8002844 <HAL_RCC_GetSysClockFreq>
 80029ac:	4b6c      	ldr	r3, [pc, #432]	; (8002b60 <HAL_RCC_OscConfig+0x268>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80029b4:	4a6b      	ldr	r2, [pc, #428]	; (8002b64 <HAL_RCC_OscConfig+0x26c>)
 80029b6:	5cd3      	ldrb	r3, [r2, r3]
 80029b8:	f003 031f 	and.w	r3, r3, #31
 80029bc:	40d8      	lsrs	r0, r3
 80029be:	4b6a      	ldr	r3, [pc, #424]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 80029c0:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80029c2:	4b6a      	ldr	r3, [pc, #424]	; (8002b6c <HAL_RCC_OscConfig+0x274>)
 80029c4:	6818      	ldr	r0, [r3, #0]
 80029c6:	f7ff fcf1 	bl	80023ac <HAL_InitTick>
        if(status != HAL_OK)
 80029ca:	2800      	cmp	r0, #0
 80029cc:	f040 82be 	bne.w	8002f4c <HAL_RCC_OscConfig+0x654>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029d0:	6823      	ldr	r3, [r4, #0]
 80029d2:	f013 0f01 	tst.w	r3, #1
 80029d6:	f000 8081 	beq.w	8002adc <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80029da:	2d08      	cmp	r5, #8
 80029dc:	d075      	beq.n	8002aca <HAL_RCC_OscConfig+0x1d2>
 80029de:	2d0c      	cmp	r5, #12
 80029e0:	d071      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029e2:	6863      	ldr	r3, [r4, #4]
 80029e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e8:	f000 8097 	beq.w	8002b1a <HAL_RCC_OscConfig+0x222>
 80029ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029f0:	f000 8099 	beq.w	8002b26 <HAL_RCC_OscConfig+0x22e>
 80029f4:	4b5a      	ldr	r3, [pc, #360]	; (8002b60 <HAL_RCC_OscConfig+0x268>)
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a04:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a06:	6863      	ldr	r3, [r4, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 8099 	beq.w	8002b40 <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 8002a0e:	f7ff fd17 	bl	8002440 <HAL_GetTick>
 8002a12:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a14:	4b52      	ldr	r3, [pc, #328]	; (8002b60 <HAL_RCC_OscConfig+0x268>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002a1c:	d15e      	bne.n	8002adc <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a1e:	f7ff fd0f 	bl	8002440 <HAL_GetTick>
 8002a22:	1bc0      	subs	r0, r0, r7
 8002a24:	2864      	cmp	r0, #100	; 0x64
 8002a26:	d9f5      	bls.n	8002a14 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 8002a28:	2003      	movs	r0, #3
 8002a2a:	e28f      	b.n	8002f4c <HAL_RCC_OscConfig+0x654>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a2c:	4b4c      	ldr	r3, [pc, #304]	; (8002b60 <HAL_RCC_OscConfig+0x268>)
 8002a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a32:	091b      	lsrs	r3, r3, #4
 8002a34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a38:	e7a0      	b.n	800297c <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a3a:	f7ff febb 	bl	80027b4 <RCC_SetFlashLatencyFromMSIRange>
 8002a3e:	2800      	cmp	r0, #0
 8002a40:	f040 827d 	bne.w	8002f3e <HAL_RCC_OscConfig+0x646>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a44:	4b46      	ldr	r3, [pc, #280]	; (8002b60 <HAL_RCC_OscConfig+0x268>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	f042 0208 	orr.w	r2, r2, #8
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002a54:	6a21      	ldr	r1, [r4, #32]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002a60:	69e1      	ldr	r1, [r4, #28]
 8002a62:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002a66:	605a      	str	r2, [r3, #4]
 8002a68:	e79e      	b.n	80029a8 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a6a:	6a20      	ldr	r0, [r4, #32]
 8002a6c:	f7ff fea2 	bl	80027b4 <RCC_SetFlashLatencyFromMSIRange>
 8002a70:	2800      	cmp	r0, #0
 8002a72:	d099      	beq.n	80029a8 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 8002a74:	2001      	movs	r0, #1
 8002a76:	e269      	b.n	8002f4c <HAL_RCC_OscConfig+0x654>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a78:	4b39      	ldr	r3, [pc, #228]	; (8002b60 <HAL_RCC_OscConfig+0x268>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	f042 0208 	orr.w	r2, r2, #8
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002a88:	6a21      	ldr	r1, [r4, #32]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002a94:	69e1      	ldr	r1, [r4, #28]
 8002a96:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002a9a:	605a      	str	r2, [r3, #4]
 8002a9c:	e798      	b.n	80029d0 <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 8002a9e:	4a30      	ldr	r2, [pc, #192]	; (8002b60 <HAL_RCC_OscConfig+0x268>)
 8002aa0:	6813      	ldr	r3, [r2, #0]
 8002aa2:	f023 0301 	bic.w	r3, r3, #1
 8002aa6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002aa8:	f7ff fcca 	bl	8002440 <HAL_GetTick>
 8002aac:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002aae:	4b2c      	ldr	r3, [pc, #176]	; (8002b60 <HAL_RCC_OscConfig+0x268>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f013 0f02 	tst.w	r3, #2
 8002ab6:	d08b      	beq.n	80029d0 <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ab8:	f7ff fcc2 	bl	8002440 <HAL_GetTick>
 8002abc:	1bc0      	subs	r0, r0, r7
 8002abe:	2802      	cmp	r0, #2
 8002ac0:	d9f5      	bls.n	8002aae <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 8002ac2:	2003      	movs	r0, #3
 8002ac4:	e242      	b.n	8002f4c <HAL_RCC_OscConfig+0x654>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ac6:	2e03      	cmp	r6, #3
 8002ac8:	d18b      	bne.n	80029e2 <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aca:	4b25      	ldr	r3, [pc, #148]	; (8002b60 <HAL_RCC_OscConfig+0x268>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002ad2:	d003      	beq.n	8002adc <HAL_RCC_OscConfig+0x1e4>
 8002ad4:	6863      	ldr	r3, [r4, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 8233 	beq.w	8002f42 <HAL_RCC_OscConfig+0x64a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002adc:	6823      	ldr	r3, [r4, #0]
 8002ade:	f013 0f02 	tst.w	r3, #2
 8002ae2:	d058      	beq.n	8002b96 <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ae4:	2d04      	cmp	r5, #4
 8002ae6:	d045      	beq.n	8002b74 <HAL_RCC_OscConfig+0x27c>
 8002ae8:	2d0c      	cmp	r5, #12
 8002aea:	d041      	beq.n	8002b70 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aec:	68e3      	ldr	r3, [r4, #12]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d077      	beq.n	8002be2 <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 8002af2:	4a1b      	ldr	r2, [pc, #108]	; (8002b60 <HAL_RCC_OscConfig+0x268>)
 8002af4:	6813      	ldr	r3, [r2, #0]
 8002af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002afa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002afc:	f7ff fca0 	bl	8002440 <HAL_GetTick>
 8002b00:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b02:	4b17      	ldr	r3, [pc, #92]	; (8002b60 <HAL_RCC_OscConfig+0x268>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002b0a:	d161      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b0c:	f7ff fc98 	bl	8002440 <HAL_GetTick>
 8002b10:	1b80      	subs	r0, r0, r6
 8002b12:	2802      	cmp	r0, #2
 8002b14:	d9f5      	bls.n	8002b02 <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 8002b16:	2003      	movs	r0, #3
 8002b18:	e218      	b.n	8002f4c <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b1a:	4a11      	ldr	r2, [pc, #68]	; (8002b60 <HAL_RCC_OscConfig+0x268>)
 8002b1c:	6813      	ldr	r3, [r2, #0]
 8002b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b22:	6013      	str	r3, [r2, #0]
 8002b24:	e76f      	b.n	8002a06 <HAL_RCC_OscConfig+0x10e>
 8002b26:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b2a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	e762      	b.n	8002a06 <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 8002b40:	f7ff fc7e 	bl	8002440 <HAL_GetTick>
 8002b44:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b46:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <HAL_RCC_OscConfig+0x268>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002b4e:	d0c5      	beq.n	8002adc <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b50:	f7ff fc76 	bl	8002440 <HAL_GetTick>
 8002b54:	1bc0      	subs	r0, r0, r7
 8002b56:	2864      	cmp	r0, #100	; 0x64
 8002b58:	d9f5      	bls.n	8002b46 <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 8002b5a:	2003      	movs	r0, #3
 8002b5c:	e1f6      	b.n	8002f4c <HAL_RCC_OscConfig+0x654>
 8002b5e:	bf00      	nop
 8002b60:	40021000 	.word	0x40021000
 8002b64:	08006364 	.word	0x08006364
 8002b68:	2000132c 	.word	0x2000132c
 8002b6c:	20001334 	.word	0x20001334
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b70:	2e02      	cmp	r6, #2
 8002b72:	d1bb      	bne.n	8002aec <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b74:	4ba4      	ldr	r3, [pc, #656]	; (8002e08 <HAL_RCC_OscConfig+0x510>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002b7c:	d003      	beq.n	8002b86 <HAL_RCC_OscConfig+0x28e>
 8002b7e:	68e3      	ldr	r3, [r4, #12]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 81e0 	beq.w	8002f46 <HAL_RCC_OscConfig+0x64e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b86:	4aa0      	ldr	r2, [pc, #640]	; (8002e08 <HAL_RCC_OscConfig+0x510>)
 8002b88:	6853      	ldr	r3, [r2, #4]
 8002b8a:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002b8e:	6921      	ldr	r1, [r4, #16]
 8002b90:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002b94:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b96:	6823      	ldr	r3, [r4, #0]
 8002b98:	f013 0f08 	tst.w	r3, #8
 8002b9c:	d04c      	beq.n	8002c38 <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b9e:	6963      	ldr	r3, [r4, #20]
 8002ba0:	b39b      	cbz	r3, 8002c0a <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 8002ba2:	4a99      	ldr	r2, [pc, #612]	; (8002e08 <HAL_RCC_OscConfig+0x510>)
 8002ba4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002bb0:	f7ff fc46 	bl	8002440 <HAL_GetTick>
 8002bb4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bb6:	4b94      	ldr	r3, [pc, #592]	; (8002e08 <HAL_RCC_OscConfig+0x510>)
 8002bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bbc:	f013 0f02 	tst.w	r3, #2
 8002bc0:	d13a      	bne.n	8002c38 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bc2:	f7ff fc3d 	bl	8002440 <HAL_GetTick>
 8002bc6:	1b80      	subs	r0, r0, r6
 8002bc8:	2802      	cmp	r0, #2
 8002bca:	d9f4      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 8002bcc:	2003      	movs	r0, #3
 8002bce:	e1bd      	b.n	8002f4c <HAL_RCC_OscConfig+0x654>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd0:	4a8d      	ldr	r2, [pc, #564]	; (8002e08 <HAL_RCC_OscConfig+0x510>)
 8002bd2:	6853      	ldr	r3, [r2, #4]
 8002bd4:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002bd8:	6921      	ldr	r1, [r4, #16]
 8002bda:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002bde:	6053      	str	r3, [r2, #4]
 8002be0:	e7d9      	b.n	8002b96 <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 8002be2:	4a89      	ldr	r2, [pc, #548]	; (8002e08 <HAL_RCC_OscConfig+0x510>)
 8002be4:	6813      	ldr	r3, [r2, #0]
 8002be6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bea:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002bec:	f7ff fc28 	bl	8002440 <HAL_GetTick>
 8002bf0:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bf2:	4b85      	ldr	r3, [pc, #532]	; (8002e08 <HAL_RCC_OscConfig+0x510>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002bfa:	d0cc      	beq.n	8002b96 <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bfc:	f7ff fc20 	bl	8002440 <HAL_GetTick>
 8002c00:	1b80      	subs	r0, r0, r6
 8002c02:	2802      	cmp	r0, #2
 8002c04:	d9f5      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 8002c06:	2003      	movs	r0, #3
 8002c08:	e1a0      	b.n	8002f4c <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_LSI_DISABLE();
 8002c0a:	4a7f      	ldr	r2, [pc, #508]	; (8002e08 <HAL_RCC_OscConfig+0x510>)
 8002c0c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002c10:	f023 0301 	bic.w	r3, r3, #1
 8002c14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002c18:	f7ff fc12 	bl	8002440 <HAL_GetTick>
 8002c1c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c1e:	4b7a      	ldr	r3, [pc, #488]	; (8002e08 <HAL_RCC_OscConfig+0x510>)
 8002c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c24:	f013 0f02 	tst.w	r3, #2
 8002c28:	d006      	beq.n	8002c38 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c2a:	f7ff fc09 	bl	8002440 <HAL_GetTick>
 8002c2e:	1b80      	subs	r0, r0, r6
 8002c30:	2802      	cmp	r0, #2
 8002c32:	d9f4      	bls.n	8002c1e <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 8002c34:	2003      	movs	r0, #3
 8002c36:	e189      	b.n	8002f4c <HAL_RCC_OscConfig+0x654>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c38:	6823      	ldr	r3, [r4, #0]
 8002c3a:	f013 0f04 	tst.w	r3, #4
 8002c3e:	d07a      	beq.n	8002d36 <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c40:	4b71      	ldr	r3, [pc, #452]	; (8002e08 <HAL_RCC_OscConfig+0x510>)
 8002c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c44:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002c48:	d136      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c4a:	4b6f      	ldr	r3, [pc, #444]	; (8002e08 <HAL_RCC_OscConfig+0x510>)
 8002c4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c4e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c52:	659a      	str	r2, [r3, #88]	; 0x58
 8002c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	9301      	str	r3, [sp, #4]
 8002c5c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002c5e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c60:	4b6a      	ldr	r3, [pc, #424]	; (8002e0c <HAL_RCC_OscConfig+0x514>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002c68:	d028      	beq.n	8002cbc <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c6a:	68a3      	ldr	r3, [r4, #8]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d039      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x3ec>
 8002c70:	2b05      	cmp	r3, #5
 8002c72:	d03f      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x3fc>
 8002c74:	4b64      	ldr	r3, [pc, #400]	; (8002e08 <HAL_RCC_OscConfig+0x510>)
 8002c76:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002c7a:	f022 0201 	bic.w	r2, r2, #1
 8002c7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002c82:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002c86:	f022 0204 	bic.w	r2, r2, #4
 8002c8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c8e:	68a3      	ldr	r3, [r4, #8]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d03d      	beq.n	8002d10 <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 8002c94:	f7ff fbd4 	bl	8002440 <HAL_GetTick>
 8002c98:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c9a:	4b5b      	ldr	r3, [pc, #364]	; (8002e08 <HAL_RCC_OscConfig+0x510>)
 8002c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca0:	f013 0f02 	tst.w	r3, #2
 8002ca4:	d146      	bne.n	8002d34 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca6:	f7ff fbcb 	bl	8002440 <HAL_GetTick>
 8002caa:	1bc0      	subs	r0, r0, r7
 8002cac:	f241 3388 	movw	r3, #5000	; 0x1388
 8002cb0:	4298      	cmp	r0, r3
 8002cb2:	d9f2      	bls.n	8002c9a <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 8002cb4:	2003      	movs	r0, #3
 8002cb6:	e149      	b.n	8002f4c <HAL_RCC_OscConfig+0x654>
    FlagStatus       pwrclkchanged = RESET;
 8002cb8:	2600      	movs	r6, #0
 8002cba:	e7d1      	b.n	8002c60 <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cbc:	4a53      	ldr	r2, [pc, #332]	; (8002e0c <HAL_RCC_OscConfig+0x514>)
 8002cbe:	6813      	ldr	r3, [r2, #0]
 8002cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002cc6:	f7ff fbbb 	bl	8002440 <HAL_GetTick>
 8002cca:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ccc:	4b4f      	ldr	r3, [pc, #316]	; (8002e0c <HAL_RCC_OscConfig+0x514>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002cd4:	d1c9      	bne.n	8002c6a <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cd6:	f7ff fbb3 	bl	8002440 <HAL_GetTick>
 8002cda:	1bc0      	subs	r0, r0, r7
 8002cdc:	2802      	cmp	r0, #2
 8002cde:	d9f5      	bls.n	8002ccc <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 8002ce0:	2003      	movs	r0, #3
 8002ce2:	e133      	b.n	8002f4c <HAL_RCC_OscConfig+0x654>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ce4:	4a48      	ldr	r2, [pc, #288]	; (8002e08 <HAL_RCC_OscConfig+0x510>)
 8002ce6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002cea:	f043 0301 	orr.w	r3, r3, #1
 8002cee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cf2:	e7cc      	b.n	8002c8e <HAL_RCC_OscConfig+0x396>
 8002cf4:	4b44      	ldr	r3, [pc, #272]	; (8002e08 <HAL_RCC_OscConfig+0x510>)
 8002cf6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002cfa:	f042 0204 	orr.w	r2, r2, #4
 8002cfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002d02:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002d06:	f042 0201 	orr.w	r2, r2, #1
 8002d0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002d0e:	e7be      	b.n	8002c8e <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 8002d10:	f7ff fb96 	bl	8002440 <HAL_GetTick>
 8002d14:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d16:	4b3c      	ldr	r3, [pc, #240]	; (8002e08 <HAL_RCC_OscConfig+0x510>)
 8002d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1c:	f013 0f02 	tst.w	r3, #2
 8002d20:	d008      	beq.n	8002d34 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d22:	f7ff fb8d 	bl	8002440 <HAL_GetTick>
 8002d26:	1bc0      	subs	r0, r0, r7
 8002d28:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d2c:	4298      	cmp	r0, r3
 8002d2e:	d9f2      	bls.n	8002d16 <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 8002d30:	2003      	movs	r0, #3
 8002d32:	e10b      	b.n	8002f4c <HAL_RCC_OscConfig+0x654>
    if(pwrclkchanged == SET)
 8002d34:	b9e6      	cbnz	r6, 8002d70 <HAL_RCC_OscConfig+0x478>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d36:	6823      	ldr	r3, [r4, #0]
 8002d38:	f013 0f20 	tst.w	r3, #32
 8002d3c:	d035      	beq.n	8002daa <HAL_RCC_OscConfig+0x4b2>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d40:	b1e3      	cbz	r3, 8002d7c <HAL_RCC_OscConfig+0x484>
      __HAL_RCC_HSI48_ENABLE();
 8002d42:	4a31      	ldr	r2, [pc, #196]	; (8002e08 <HAL_RCC_OscConfig+0x510>)
 8002d44:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002d50:	f7ff fb76 	bl	8002440 <HAL_GetTick>
 8002d54:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d56:	4b2c      	ldr	r3, [pc, #176]	; (8002e08 <HAL_RCC_OscConfig+0x510>)
 8002d58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d5c:	f013 0f02 	tst.w	r3, #2
 8002d60:	d123      	bne.n	8002daa <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d62:	f7ff fb6d 	bl	8002440 <HAL_GetTick>
 8002d66:	1b80      	subs	r0, r0, r6
 8002d68:	2802      	cmp	r0, #2
 8002d6a:	d9f4      	bls.n	8002d56 <HAL_RCC_OscConfig+0x45e>
          return HAL_TIMEOUT;
 8002d6c:	2003      	movs	r0, #3
 8002d6e:	e0ed      	b.n	8002f4c <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d70:	4a25      	ldr	r2, [pc, #148]	; (8002e08 <HAL_RCC_OscConfig+0x510>)
 8002d72:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d78:	6593      	str	r3, [r2, #88]	; 0x58
 8002d7a:	e7dc      	b.n	8002d36 <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_HSI48_DISABLE();
 8002d7c:	4a22      	ldr	r2, [pc, #136]	; (8002e08 <HAL_RCC_OscConfig+0x510>)
 8002d7e:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8002d82:	f023 0301 	bic.w	r3, r3, #1
 8002d86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002d8a:	f7ff fb59 	bl	8002440 <HAL_GetTick>
 8002d8e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d90:	4b1d      	ldr	r3, [pc, #116]	; (8002e08 <HAL_RCC_OscConfig+0x510>)
 8002d92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d96:	f013 0f02 	tst.w	r3, #2
 8002d9a:	d006      	beq.n	8002daa <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d9c:	f7ff fb50 	bl	8002440 <HAL_GetTick>
 8002da0:	1b80      	subs	r0, r0, r6
 8002da2:	2802      	cmp	r0, #2
 8002da4:	d9f4      	bls.n	8002d90 <HAL_RCC_OscConfig+0x498>
          return HAL_TIMEOUT;
 8002da6:	2003      	movs	r0, #3
 8002da8:	e0d0      	b.n	8002f4c <HAL_RCC_OscConfig+0x654>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002daa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 80cc 	beq.w	8002f4a <HAL_RCC_OscConfig+0x652>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d017      	beq.n	8002de6 <HAL_RCC_OscConfig+0x4ee>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002db6:	2d0c      	cmp	r5, #12
 8002db8:	f000 80cc 	beq.w	8002f54 <HAL_RCC_OscConfig+0x65c>
        __HAL_RCC_PLL_DISABLE();
 8002dbc:	4a12      	ldr	r2, [pc, #72]	; (8002e08 <HAL_RCC_OscConfig+0x510>)
 8002dbe:	6813      	ldr	r3, [r2, #0]
 8002dc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dc4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002dc6:	f7ff fb3b 	bl	8002440 <HAL_GetTick>
 8002dca:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dcc:	4b0e      	ldr	r3, [pc, #56]	; (8002e08 <HAL_RCC_OscConfig+0x510>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002dd4:	f000 80a8 	beq.w	8002f28 <HAL_RCC_OscConfig+0x630>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd8:	f7ff fb32 	bl	8002440 <HAL_GetTick>
 8002ddc:	1b00      	subs	r0, r0, r4
 8002dde:	2802      	cmp	r0, #2
 8002de0:	d9f4      	bls.n	8002dcc <HAL_RCC_OscConfig+0x4d4>
            return HAL_TIMEOUT;
 8002de2:	2003      	movs	r0, #3
 8002de4:	e0b2      	b.n	8002f4c <HAL_RCC_OscConfig+0x654>
      pll_config = RCC->PLLCFGR;
 8002de6:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <HAL_RCC_OscConfig+0x510>)
 8002de8:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dea:	f003 0103 	and.w	r1, r3, #3
 8002dee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002df0:	4291      	cmp	r1, r2
 8002df2:	d00d      	beq.n	8002e10 <HAL_RCC_OscConfig+0x518>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002df4:	2d0c      	cmp	r5, #12
 8002df6:	f000 80ab 	beq.w	8002f50 <HAL_RCC_OscConfig+0x658>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002dfa:	4b03      	ldr	r3, [pc, #12]	; (8002e08 <HAL_RCC_OscConfig+0x510>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8002e02:	d02f      	beq.n	8002e64 <HAL_RCC_OscConfig+0x56c>
            return HAL_ERROR;
 8002e04:	2001      	movs	r0, #1
 8002e06:	e0a1      	b.n	8002f4c <HAL_RCC_OscConfig+0x654>
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	40007000 	.word	0x40007000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e10:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e14:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002e16:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e18:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002e1c:	d1ea      	bne.n	8002df4 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e1e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e22:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e24:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002e28:	d1e4      	bne.n	8002df4 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e2a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002e2e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e30:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8002e34:	d1de      	bne.n	8002df4 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e36:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8002e3a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002e3c:	0852      	lsrs	r2, r2, #1
 8002e3e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e40:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002e44:	d1d6      	bne.n	8002df4 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e46:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002e4a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002e4c:	0852      	lsrs	r2, r2, #1
 8002e4e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e50:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8002e54:	d1ce      	bne.n	8002df4 <HAL_RCC_OscConfig+0x4fc>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e56:	4b40      	ldr	r3, [pc, #256]	; (8002f58 <HAL_RCC_OscConfig+0x660>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002e5e:	d049      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x5fc>
  return HAL_OK;
 8002e60:	2000      	movs	r0, #0
 8002e62:	e073      	b.n	8002f4c <HAL_RCC_OscConfig+0x654>
            __HAL_RCC_PLL_DISABLE();
 8002e64:	4a3c      	ldr	r2, [pc, #240]	; (8002f58 <HAL_RCC_OscConfig+0x660>)
 8002e66:	6813      	ldr	r3, [r2, #0]
 8002e68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e6c:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8002e6e:	f7ff fae7 	bl	8002440 <HAL_GetTick>
 8002e72:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e74:	4b38      	ldr	r3, [pc, #224]	; (8002f58 <HAL_RCC_OscConfig+0x660>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002e7c:	d006      	beq.n	8002e8c <HAL_RCC_OscConfig+0x594>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7e:	f7ff fadf 	bl	8002440 <HAL_GetTick>
 8002e82:	1b40      	subs	r0, r0, r5
 8002e84:	2802      	cmp	r0, #2
 8002e86:	d9f5      	bls.n	8002e74 <HAL_RCC_OscConfig+0x57c>
                return HAL_TIMEOUT;
 8002e88:	2003      	movs	r0, #3
 8002e8a:	e05f      	b.n	8002f4c <HAL_RCC_OscConfig+0x654>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e8c:	4a32      	ldr	r2, [pc, #200]	; (8002f58 <HAL_RCC_OscConfig+0x660>)
 8002e8e:	68d3      	ldr	r3, [r2, #12]
 8002e90:	4932      	ldr	r1, [pc, #200]	; (8002f5c <HAL_RCC_OscConfig+0x664>)
 8002e92:	4019      	ands	r1, r3
 8002e94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002e96:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002e98:	3801      	subs	r0, #1
 8002e9a:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8002e9e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002ea0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002ea4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002ea6:	0840      	lsrs	r0, r0, #1
 8002ea8:	3801      	subs	r0, #1
 8002eaa:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8002eae:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002eb0:	0840      	lsrs	r0, r0, #1
 8002eb2:	3801      	subs	r0, #1
 8002eb4:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8002eb8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002eba:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8002ebe:	430b      	orrs	r3, r1
 8002ec0:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 8002ec2:	6813      	ldr	r3, [r2, #0]
 8002ec4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ec8:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002eca:	68d3      	ldr	r3, [r2, #12]
 8002ecc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ed0:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 8002ed2:	f7ff fab5 	bl	8002440 <HAL_GetTick>
 8002ed6:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ed8:	4b1f      	ldr	r3, [pc, #124]	; (8002f58 <HAL_RCC_OscConfig+0x660>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002ee0:	d106      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x5f8>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee2:	f7ff faad 	bl	8002440 <HAL_GetTick>
 8002ee6:	1b00      	subs	r0, r0, r4
 8002ee8:	2802      	cmp	r0, #2
 8002eea:	d9f5      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x5e0>
                return HAL_TIMEOUT;
 8002eec:	2003      	movs	r0, #3
 8002eee:	e02d      	b.n	8002f4c <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	e02b      	b.n	8002f4c <HAL_RCC_OscConfig+0x654>
          __HAL_RCC_PLL_ENABLE();
 8002ef4:	4b18      	ldr	r3, [pc, #96]	; (8002f58 <HAL_RCC_OscConfig+0x660>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002efc:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002efe:	68da      	ldr	r2, [r3, #12]
 8002f00:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002f04:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 8002f06:	f7ff fa9b 	bl	8002440 <HAL_GetTick>
 8002f0a:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f0c:	4b12      	ldr	r3, [pc, #72]	; (8002f58 <HAL_RCC_OscConfig+0x660>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002f14:	d106      	bne.n	8002f24 <HAL_RCC_OscConfig+0x62c>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f16:	f7ff fa93 	bl	8002440 <HAL_GetTick>
 8002f1a:	1b03      	subs	r3, r0, r4
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d9f5      	bls.n	8002f0c <HAL_RCC_OscConfig+0x614>
              return HAL_TIMEOUT;
 8002f20:	2003      	movs	r0, #3
 8002f22:	e013      	b.n	8002f4c <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 8002f24:	2000      	movs	r0, #0
 8002f26:	e011      	b.n	8002f4c <HAL_RCC_OscConfig+0x654>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002f28:	4a0b      	ldr	r2, [pc, #44]	; (8002f58 <HAL_RCC_OscConfig+0x660>)
 8002f2a:	68d1      	ldr	r1, [r2, #12]
 8002f2c:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <HAL_RCC_OscConfig+0x668>)
 8002f2e:	400b      	ands	r3, r1
 8002f30:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8002f32:	2000      	movs	r0, #0
 8002f34:	e00a      	b.n	8002f4c <HAL_RCC_OscConfig+0x654>
    return HAL_ERROR;
 8002f36:	2001      	movs	r0, #1
}
 8002f38:	4770      	bx	lr
        return HAL_ERROR;
 8002f3a:	2001      	movs	r0, #1
 8002f3c:	e006      	b.n	8002f4c <HAL_RCC_OscConfig+0x654>
            return HAL_ERROR;
 8002f3e:	2001      	movs	r0, #1
 8002f40:	e004      	b.n	8002f4c <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 8002f42:	2001      	movs	r0, #1
 8002f44:	e002      	b.n	8002f4c <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 8002f46:	2001      	movs	r0, #1
 8002f48:	e000      	b.n	8002f4c <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 8002f4a:	2000      	movs	r0, #0
}
 8002f4c:	b003      	add	sp, #12
 8002f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8002f50:	2001      	movs	r0, #1
 8002f52:	e7fb      	b.n	8002f4c <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 8002f54:	2001      	movs	r0, #1
 8002f56:	e7f9      	b.n	8002f4c <HAL_RCC_OscConfig+0x654>
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	019d808c 	.word	0x019d808c
 8002f60:	feeefffc 	.word	0xfeeefffc

08002f64 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002f64:	2800      	cmp	r0, #0
 8002f66:	f000 80af 	beq.w	80030c8 <HAL_RCC_ClockConfig+0x164>
{
 8002f6a:	b570      	push	{r4, r5, r6, lr}
 8002f6c:	460d      	mov	r5, r1
 8002f6e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f70:	4b59      	ldr	r3, [pc, #356]	; (80030d8 <HAL_RCC_ClockConfig+0x174>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	428b      	cmp	r3, r1
 8002f7a:	d20b      	bcs.n	8002f94 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7c:	4a56      	ldr	r2, [pc, #344]	; (80030d8 <HAL_RCC_ClockConfig+0x174>)
 8002f7e:	6813      	ldr	r3, [r2, #0]
 8002f80:	f023 0307 	bic.w	r3, r3, #7
 8002f84:	430b      	orrs	r3, r1
 8002f86:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f88:	6813      	ldr	r3, [r2, #0]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	428b      	cmp	r3, r1
 8002f90:	f040 809c 	bne.w	80030cc <HAL_RCC_ClockConfig+0x168>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f94:	6823      	ldr	r3, [r4, #0]
 8002f96:	f013 0f02 	tst.w	r3, #2
 8002f9a:	d00c      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x52>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f9c:	68a2      	ldr	r2, [r4, #8]
 8002f9e:	4b4f      	ldr	r3, [pc, #316]	; (80030dc <HAL_RCC_ClockConfig+0x178>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d905      	bls.n	8002fb6 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002faa:	494c      	ldr	r1, [pc, #304]	; (80030dc <HAL_RCC_ClockConfig+0x178>)
 8002fac:	688b      	ldr	r3, [r1, #8]
 8002fae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fb6:	6823      	ldr	r3, [r4, #0]
 8002fb8:	f013 0f01 	tst.w	r3, #1
 8002fbc:	d039      	beq.n	8003032 <HAL_RCC_ClockConfig+0xce>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fbe:	6863      	ldr	r3, [r4, #4]
 8002fc0:	2b03      	cmp	r3, #3
 8002fc2:	d009      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x74>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d026      	beq.n	8003016 <HAL_RCC_ClockConfig+0xb2>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002fc8:	bb63      	cbnz	r3, 8003024 <HAL_RCC_ClockConfig+0xc0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fca:	4a44      	ldr	r2, [pc, #272]	; (80030dc <HAL_RCC_ClockConfig+0x178>)
 8002fcc:	6812      	ldr	r2, [r2, #0]
 8002fce:	f012 0f02 	tst.w	r2, #2
 8002fd2:	d106      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8002fd4:	2001      	movs	r0, #1
 8002fd6:	e076      	b.n	80030c6 <HAL_RCC_ClockConfig+0x162>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fd8:	4a40      	ldr	r2, [pc, #256]	; (80030dc <HAL_RCC_ClockConfig+0x178>)
 8002fda:	6812      	ldr	r2, [r2, #0]
 8002fdc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002fe0:	d076      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x16c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fe2:	493e      	ldr	r1, [pc, #248]	; (80030dc <HAL_RCC_ClockConfig+0x178>)
 8002fe4:	688a      	ldr	r2, [r1, #8]
 8002fe6:	f022 0203 	bic.w	r2, r2, #3
 8002fea:	4313      	orrs	r3, r2
 8002fec:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002fee:	f7ff fa27 	bl	8002440 <HAL_GetTick>
 8002ff2:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff4:	4b39      	ldr	r3, [pc, #228]	; (80030dc <HAL_RCC_ClockConfig+0x178>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 030c 	and.w	r3, r3, #12
 8002ffc:	6862      	ldr	r2, [r4, #4]
 8002ffe:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003002:	d016      	beq.n	8003032 <HAL_RCC_ClockConfig+0xce>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003004:	f7ff fa1c 	bl	8002440 <HAL_GetTick>
 8003008:	1b80      	subs	r0, r0, r6
 800300a:	f241 3388 	movw	r3, #5000	; 0x1388
 800300e:	4298      	cmp	r0, r3
 8003010:	d9f0      	bls.n	8002ff4 <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 8003012:	2003      	movs	r0, #3
 8003014:	e057      	b.n	80030c6 <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003016:	4a31      	ldr	r2, [pc, #196]	; (80030dc <HAL_RCC_ClockConfig+0x178>)
 8003018:	6812      	ldr	r2, [r2, #0]
 800301a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800301e:	d1e0      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8003020:	2001      	movs	r0, #1
 8003022:	e050      	b.n	80030c6 <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003024:	4a2d      	ldr	r2, [pc, #180]	; (80030dc <HAL_RCC_ClockConfig+0x178>)
 8003026:	6812      	ldr	r2, [r2, #0]
 8003028:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800302c:	d1d9      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 800302e:	2001      	movs	r0, #1
 8003030:	e049      	b.n	80030c6 <HAL_RCC_ClockConfig+0x162>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003032:	6823      	ldr	r3, [r4, #0]
 8003034:	f013 0f02 	tst.w	r3, #2
 8003038:	d00c      	beq.n	8003054 <HAL_RCC_ClockConfig+0xf0>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800303a:	68a2      	ldr	r2, [r4, #8]
 800303c:	4b27      	ldr	r3, [pc, #156]	; (80030dc <HAL_RCC_ClockConfig+0x178>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003044:	429a      	cmp	r2, r3
 8003046:	d205      	bcs.n	8003054 <HAL_RCC_ClockConfig+0xf0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003048:	4924      	ldr	r1, [pc, #144]	; (80030dc <HAL_RCC_ClockConfig+0x178>)
 800304a:	688b      	ldr	r3, [r1, #8]
 800304c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003050:	431a      	orrs	r2, r3
 8003052:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003054:	4b20      	ldr	r3, [pc, #128]	; (80030d8 <HAL_RCC_ClockConfig+0x174>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	42ab      	cmp	r3, r5
 800305e:	d90a      	bls.n	8003076 <HAL_RCC_ClockConfig+0x112>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003060:	4a1d      	ldr	r2, [pc, #116]	; (80030d8 <HAL_RCC_ClockConfig+0x174>)
 8003062:	6813      	ldr	r3, [r2, #0]
 8003064:	f023 0307 	bic.w	r3, r3, #7
 8003068:	432b      	orrs	r3, r5
 800306a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800306c:	6813      	ldr	r3, [r2, #0]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	42ab      	cmp	r3, r5
 8003074:	d12e      	bne.n	80030d4 <HAL_RCC_ClockConfig+0x170>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003076:	6823      	ldr	r3, [r4, #0]
 8003078:	f013 0f04 	tst.w	r3, #4
 800307c:	d006      	beq.n	800308c <HAL_RCC_ClockConfig+0x128>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800307e:	4a17      	ldr	r2, [pc, #92]	; (80030dc <HAL_RCC_ClockConfig+0x178>)
 8003080:	6893      	ldr	r3, [r2, #8]
 8003082:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003086:	68e1      	ldr	r1, [r4, #12]
 8003088:	430b      	orrs	r3, r1
 800308a:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800308c:	6823      	ldr	r3, [r4, #0]
 800308e:	f013 0f08 	tst.w	r3, #8
 8003092:	d007      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003094:	4a11      	ldr	r2, [pc, #68]	; (80030dc <HAL_RCC_ClockConfig+0x178>)
 8003096:	6893      	ldr	r3, [r2, #8]
 8003098:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800309c:	6921      	ldr	r1, [r4, #16]
 800309e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80030a2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030a4:	f7ff fbce 	bl	8002844 <HAL_RCC_GetSysClockFreq>
 80030a8:	4b0c      	ldr	r3, [pc, #48]	; (80030dc <HAL_RCC_ClockConfig+0x178>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80030b0:	4a0b      	ldr	r2, [pc, #44]	; (80030e0 <HAL_RCC_ClockConfig+0x17c>)
 80030b2:	5cd3      	ldrb	r3, [r2, r3]
 80030b4:	f003 031f 	and.w	r3, r3, #31
 80030b8:	40d8      	lsrs	r0, r3
 80030ba:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <HAL_RCC_ClockConfig+0x180>)
 80030bc:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80030be:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <HAL_RCC_ClockConfig+0x184>)
 80030c0:	6818      	ldr	r0, [r3, #0]
 80030c2:	f7ff f973 	bl	80023ac <HAL_InitTick>
}
 80030c6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80030c8:	2001      	movs	r0, #1
}
 80030ca:	4770      	bx	lr
      return HAL_ERROR;
 80030cc:	2001      	movs	r0, #1
 80030ce:	e7fa      	b.n	80030c6 <HAL_RCC_ClockConfig+0x162>
        return HAL_ERROR;
 80030d0:	2001      	movs	r0, #1
 80030d2:	e7f8      	b.n	80030c6 <HAL_RCC_ClockConfig+0x162>
      return HAL_ERROR;
 80030d4:	2001      	movs	r0, #1
 80030d6:	e7f6      	b.n	80030c6 <HAL_RCC_ClockConfig+0x162>
 80030d8:	40022000 	.word	0x40022000
 80030dc:	40021000 	.word	0x40021000
 80030e0:	08006364 	.word	0x08006364
 80030e4:	2000132c 	.word	0x2000132c
 80030e8:	20001334 	.word	0x20001334

080030ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030f0:	b082      	sub	sp, #8
 80030f2:	4605      	mov	r5, r0
 80030f4:	4688      	mov	r8, r1
 80030f6:	4617      	mov	r7, r2
 80030f8:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80030fa:	f7ff f9a1 	bl	8002440 <HAL_GetTick>
 80030fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003100:	1a1b      	subs	r3, r3, r0
 8003102:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8003106:	f7ff f99b 	bl	8002440 <HAL_GetTick>
 800310a:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800310c:	4b2b      	ldr	r3, [pc, #172]	; (80031bc <SPI_WaitFlagStateUntilTimeout+0xd0>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8003114:	fb09 f303 	mul.w	r3, r9, r3
 8003118:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800311a:	682b      	ldr	r3, [r5, #0]
 800311c:	689c      	ldr	r4, [r3, #8]
 800311e:	ea38 0304 	bics.w	r3, r8, r4
 8003122:	bf0c      	ite	eq
 8003124:	f04f 0c01 	moveq.w	ip, #1
 8003128:	f04f 0c00 	movne.w	ip, #0
 800312c:	45bc      	cmp	ip, r7
 800312e:	d040      	beq.n	80031b2 <SPI_WaitFlagStateUntilTimeout+0xc6>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003130:	f1b6 3fff 	cmp.w	r6, #4294967295
 8003134:	d0f1      	beq.n	800311a <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003136:	f7ff f983 	bl	8002440 <HAL_GetTick>
 800313a:	eba0 000a 	sub.w	r0, r0, sl
 800313e:	4548      	cmp	r0, r9
 8003140:	d20a      	bcs.n	8003158 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8003142:	f1b9 0f00 	cmp.w	r9, #0
 8003146:	d007      	beq.n	8003158 <SPI_WaitFlagStateUntilTimeout+0x6c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003148:	9a01      	ldr	r2, [sp, #4]
 800314a:	b102      	cbz	r2, 800314e <SPI_WaitFlagStateUntilTimeout+0x62>
 800314c:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 800314e:	9b01      	ldr	r3, [sp, #4]
 8003150:	3b01      	subs	r3, #1
 8003152:	9301      	str	r3, [sp, #4]
 8003154:	4691      	mov	r9, r2
 8003156:	e7e0      	b.n	800311a <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003158:	682a      	ldr	r2, [r5, #0]
 800315a:	6853      	ldr	r3, [r2, #4]
 800315c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003160:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003162:	686b      	ldr	r3, [r5, #4]
 8003164:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003168:	d00b      	beq.n	8003182 <SPI_WaitFlagStateUntilTimeout+0x96>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800316a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800316c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003170:	d014      	beq.n	800319c <SPI_WaitFlagStateUntilTimeout+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 8003172:	2301      	movs	r3, #1
 8003174:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8003178:	2300      	movs	r3, #0
 800317a:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 800317e:	2003      	movs	r0, #3
 8003180:	e018      	b.n	80031b4 <SPI_WaitFlagStateUntilTimeout+0xc8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003182:	68ab      	ldr	r3, [r5, #8]
 8003184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003188:	d002      	beq.n	8003190 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800318a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800318e:	d1ec      	bne.n	800316a <SPI_WaitFlagStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 8003190:	682a      	ldr	r2, [r5, #0]
 8003192:	6813      	ldr	r3, [r2, #0]
 8003194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	e7e6      	b.n	800316a <SPI_WaitFlagStateUntilTimeout+0x7e>
          SPI_RESET_CRC(hspi);
 800319c:	682a      	ldr	r2, [r5, #0]
 800319e:	6813      	ldr	r3, [r2, #0]
 80031a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	682a      	ldr	r2, [r5, #0]
 80031a8:	6813      	ldr	r3, [r2, #0]
 80031aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031ae:	6013      	str	r3, [r2, #0]
 80031b0:	e7df      	b.n	8003172 <SPI_WaitFlagStateUntilTimeout+0x86>
    }
  }

  return HAL_OK;
 80031b2:	2000      	movs	r0, #0
}
 80031b4:	b002      	add	sp, #8
 80031b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031ba:	bf00      	nop
 80031bc:	2000132c 	.word	0x2000132c

080031c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031c4:	b082      	sub	sp, #8
 80031c6:	4606      	mov	r6, r0
 80031c8:	460c      	mov	r4, r1
 80031ca:	4615      	mov	r5, r2
 80031cc:	461f      	mov	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80031ce:	2300      	movs	r3, #0
 80031d0:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80031d4:	f7ff f934 	bl	8002440 <HAL_GetTick>
 80031d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80031da:	1a1b      	subs	r3, r3, r0
 80031dc:	eb03 0807 	add.w	r8, r3, r7
  tmp_tickstart = HAL_GetTick();
 80031e0:	f7ff f92e 	bl	8002440 <HAL_GetTick>
 80031e4:	4681      	mov	r9, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80031e6:	f8d6 a000 	ldr.w	sl, [r6]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80031ea:	4b31      	ldr	r3, [pc, #196]	; (80032b0 <SPI_WaitFifoStateUntilTimeout+0xf0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80031f2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80031f6:	0d1b      	lsrs	r3, r3, #20
 80031f8:	fb08 f303 	mul.w	r3, r8, r3
 80031fc:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 80031fe:	e002      	b.n	8003206 <SPI_WaitFifoStateUntilTimeout+0x46>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8003200:	f1b7 3fff 	cmp.w	r7, #4294967295
 8003204:	d112      	bne.n	800322c <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 8003206:	6833      	ldr	r3, [r6, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	ea03 0c04 	and.w	ip, r3, r4
 800320e:	45ac      	cmp	ip, r5
 8003210:	d04a      	beq.n	80032a8 <SPI_WaitFifoStateUntilTimeout+0xe8>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003212:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8003216:	d1f3      	bne.n	8003200 <SPI_WaitFifoStateUntilTimeout+0x40>
 8003218:	2d00      	cmp	r5, #0
 800321a:	d1f1      	bne.n	8003200 <SPI_WaitFifoStateUntilTimeout+0x40>
      tmpreg8 = *ptmpreg8;
 800321c:	f89a 300c 	ldrb.w	r3, [sl, #12]
 8003220:	b2db      	uxtb	r3, r3
 8003222:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8003226:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800322a:	e7e9      	b.n	8003200 <SPI_WaitFifoStateUntilTimeout+0x40>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800322c:	f7ff f908 	bl	8002440 <HAL_GetTick>
 8003230:	eba0 0009 	sub.w	r0, r0, r9
 8003234:	4540      	cmp	r0, r8
 8003236:	d20a      	bcs.n	800324e <SPI_WaitFifoStateUntilTimeout+0x8e>
 8003238:	f1b8 0f00 	cmp.w	r8, #0
 800323c:	d007      	beq.n	800324e <SPI_WaitFifoStateUntilTimeout+0x8e>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800323e:	9a01      	ldr	r2, [sp, #4]
 8003240:	b102      	cbz	r2, 8003244 <SPI_WaitFifoStateUntilTimeout+0x84>
 8003242:	4642      	mov	r2, r8
      {
        tmp_timeout = 0U;
      }
      count--;
 8003244:	9b01      	ldr	r3, [sp, #4]
 8003246:	3b01      	subs	r3, #1
 8003248:	9301      	str	r3, [sp, #4]
 800324a:	4690      	mov	r8, r2
 800324c:	e7db      	b.n	8003206 <SPI_WaitFifoStateUntilTimeout+0x46>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800324e:	6832      	ldr	r2, [r6, #0]
 8003250:	6853      	ldr	r3, [r2, #4]
 8003252:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003256:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003258:	6873      	ldr	r3, [r6, #4]
 800325a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800325e:	d00b      	beq.n	8003278 <SPI_WaitFifoStateUntilTimeout+0xb8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003260:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003266:	d014      	beq.n	8003292 <SPI_WaitFifoStateUntilTimeout+0xd2>
        hspi->State = HAL_SPI_STATE_READY;
 8003268:	2301      	movs	r3, #1
 800326a:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800326e:	2300      	movs	r3, #0
 8003270:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 8003274:	2003      	movs	r0, #3
 8003276:	e018      	b.n	80032aa <SPI_WaitFifoStateUntilTimeout+0xea>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003278:	68b3      	ldr	r3, [r6, #8]
 800327a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800327e:	d002      	beq.n	8003286 <SPI_WaitFifoStateUntilTimeout+0xc6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003284:	d1ec      	bne.n	8003260 <SPI_WaitFifoStateUntilTimeout+0xa0>
          __HAL_SPI_DISABLE(hspi);
 8003286:	6832      	ldr	r2, [r6, #0]
 8003288:	6813      	ldr	r3, [r2, #0]
 800328a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800328e:	6013      	str	r3, [r2, #0]
 8003290:	e7e6      	b.n	8003260 <SPI_WaitFifoStateUntilTimeout+0xa0>
          SPI_RESET_CRC(hspi);
 8003292:	6832      	ldr	r2, [r6, #0]
 8003294:	6813      	ldr	r3, [r2, #0]
 8003296:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800329a:	6013      	str	r3, [r2, #0]
 800329c:	6832      	ldr	r2, [r6, #0]
 800329e:	6813      	ldr	r3, [r2, #0]
 80032a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80032a4:	6013      	str	r3, [r2, #0]
 80032a6:	e7df      	b.n	8003268 <SPI_WaitFifoStateUntilTimeout+0xa8>
    }
  }

  return HAL_OK;
 80032a8:	2000      	movs	r0, #0
}
 80032aa:	b002      	add	sp, #8
 80032ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032b0:	2000132c 	.word	0x2000132c

080032b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032b4:	b570      	push	{r4, r5, r6, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	4604      	mov	r4, r0
 80032ba:	460d      	mov	r5, r1
 80032bc:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80032be:	9200      	str	r2, [sp, #0]
 80032c0:	460b      	mov	r3, r1
 80032c2:	2200      	movs	r2, #0
 80032c4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80032c8:	f7ff ff7a 	bl	80031c0 <SPI_WaitFifoStateUntilTimeout>
 80032cc:	b9b0      	cbnz	r0, 80032fc <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032ce:	9600      	str	r6, [sp, #0]
 80032d0:	462b      	mov	r3, r5
 80032d2:	2200      	movs	r2, #0
 80032d4:	2180      	movs	r1, #128	; 0x80
 80032d6:	4620      	mov	r0, r4
 80032d8:	f7ff ff08 	bl	80030ec <SPI_WaitFlagStateUntilTimeout>
 80032dc:	b9a8      	cbnz	r0, 800330a <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80032de:	9600      	str	r6, [sp, #0]
 80032e0:	462b      	mov	r3, r5
 80032e2:	2200      	movs	r2, #0
 80032e4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80032e8:	4620      	mov	r0, r4
 80032ea:	f7ff ff69 	bl	80031c0 <SPI_WaitFifoStateUntilTimeout>
 80032ee:	b150      	cbz	r0, 8003306 <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032f0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80032f2:	f043 0320 	orr.w	r3, r3, #32
 80032f6:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80032f8:	2003      	movs	r0, #3
 80032fa:	e004      	b.n	8003306 <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032fc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80032fe:	f043 0320 	orr.w	r3, r3, #32
 8003302:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003304:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8003306:	b002      	add	sp, #8
 8003308:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800330a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800330c:	f043 0320 	orr.w	r3, r3, #32
 8003310:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003312:	2003      	movs	r0, #3
 8003314:	e7f7      	b.n	8003306 <SPI_EndRxTxTransaction+0x52>

08003316 <SPI_EndRxTransaction>:
{
 8003316:	b570      	push	{r4, r5, r6, lr}
 8003318:	b082      	sub	sp, #8
 800331a:	4604      	mov	r4, r0
 800331c:	460d      	mov	r5, r1
 800331e:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003320:	6843      	ldr	r3, [r0, #4]
 8003322:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003326:	d00d      	beq.n	8003344 <SPI_EndRxTransaction+0x2e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003328:	9600      	str	r6, [sp, #0]
 800332a:	462b      	mov	r3, r5
 800332c:	2200      	movs	r2, #0
 800332e:	2180      	movs	r1, #128	; 0x80
 8003330:	4620      	mov	r0, r4
 8003332:	f7ff fedb 	bl	80030ec <SPI_WaitFlagStateUntilTimeout>
 8003336:	b990      	cbnz	r0, 800335e <SPI_EndRxTransaction+0x48>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003338:	6863      	ldr	r3, [r4, #4]
 800333a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800333e:	d014      	beq.n	800336a <SPI_EndRxTransaction+0x54>
}
 8003340:	b002      	add	sp, #8
 8003342:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003344:	6883      	ldr	r3, [r0, #8]
 8003346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800334a:	d002      	beq.n	8003352 <SPI_EndRxTransaction+0x3c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800334c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003350:	d1ea      	bne.n	8003328 <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 8003352:	6822      	ldr	r2, [r4, #0]
 8003354:	6813      	ldr	r3, [r2, #0]
 8003356:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800335a:	6013      	str	r3, [r2, #0]
 800335c:	e7e4      	b.n	8003328 <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800335e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003360:	f043 0320 	orr.w	r3, r3, #32
 8003364:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003366:	2003      	movs	r0, #3
 8003368:	e7ea      	b.n	8003340 <SPI_EndRxTransaction+0x2a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800336a:	68a3      	ldr	r3, [r4, #8]
 800336c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003370:	d002      	beq.n	8003378 <SPI_EndRxTransaction+0x62>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003376:	d1e3      	bne.n	8003340 <SPI_EndRxTransaction+0x2a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003378:	9600      	str	r6, [sp, #0]
 800337a:	462b      	mov	r3, r5
 800337c:	2200      	movs	r2, #0
 800337e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003382:	4620      	mov	r0, r4
 8003384:	f7ff ff1c 	bl	80031c0 <SPI_WaitFifoStateUntilTimeout>
 8003388:	2800      	cmp	r0, #0
 800338a:	d0d9      	beq.n	8003340 <SPI_EndRxTransaction+0x2a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800338c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800338e:	f043 0320 	orr.w	r3, r3, #32
 8003392:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8003394:	2003      	movs	r0, #3
 8003396:	e7d3      	b.n	8003340 <SPI_EndRxTransaction+0x2a>

08003398 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003398:	2800      	cmp	r0, #0
 800339a:	d06a      	beq.n	8003472 <HAL_SPI_Init+0xda>
{
 800339c:	b510      	push	{r4, lr}
 800339e:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80033a2:	b933      	cbnz	r3, 80033b2 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033a4:	6843      	ldr	r3, [r0, #4]
 80033a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033aa:	d005      	beq.n	80033b8 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033ac:	2300      	movs	r3, #0
 80033ae:	61c3      	str	r3, [r0, #28]
 80033b0:	e002      	b.n	80033b8 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033b2:	2300      	movs	r3, #0
 80033b4:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033b6:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033b8:	2300      	movs	r3, #0
 80033ba:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80033bc:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d04d      	beq.n	8003460 <HAL_SPI_Init+0xc8>
  hspi->State = HAL_SPI_STATE_BUSY;
 80033c4:	2302      	movs	r3, #2
 80033c6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80033ca:	6822      	ldr	r2, [r4, #0]
 80033cc:	6813      	ldr	r3, [r2, #0]
 80033ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033d2:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033d4:	68e3      	ldr	r3, [r4, #12]
 80033d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80033da:	d947      	bls.n	800346c <HAL_SPI_Init+0xd4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80033dc:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80033de:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80033e2:	d004      	beq.n	80033ee <HAL_SPI_Init+0x56>
 80033e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80033e8:	d001      	beq.n	80033ee <HAL_SPI_Init+0x56>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033ea:	2300      	movs	r3, #0
 80033ec:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033ee:	6863      	ldr	r3, [r4, #4]
 80033f0:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80033f4:	68a1      	ldr	r1, [r4, #8]
 80033f6:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 80033fa:	430b      	orrs	r3, r1
 80033fc:	6921      	ldr	r1, [r4, #16]
 80033fe:	f001 0102 	and.w	r1, r1, #2
 8003402:	430b      	orrs	r3, r1
 8003404:	6961      	ldr	r1, [r4, #20]
 8003406:	f001 0101 	and.w	r1, r1, #1
 800340a:	430b      	orrs	r3, r1
 800340c:	69a1      	ldr	r1, [r4, #24]
 800340e:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8003412:	430b      	orrs	r3, r1
 8003414:	69e1      	ldr	r1, [r4, #28]
 8003416:	f001 0138 	and.w	r1, r1, #56	; 0x38
 800341a:	430b      	orrs	r3, r1
 800341c:	6a21      	ldr	r1, [r4, #32]
 800341e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003422:	430b      	orrs	r3, r1
 8003424:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003426:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 800342a:	6820      	ldr	r0, [r4, #0]
 800342c:	430b      	orrs	r3, r1
 800342e:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003430:	8b63      	ldrh	r3, [r4, #26]
 8003432:	f003 0304 	and.w	r3, r3, #4
 8003436:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003438:	f001 0110 	and.w	r1, r1, #16
 800343c:	430b      	orrs	r3, r1
 800343e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003440:	f001 0108 	and.w	r1, r1, #8
 8003444:	430b      	orrs	r3, r1
 8003446:	68e1      	ldr	r1, [r4, #12]
 8003448:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 800344c:	430b      	orrs	r3, r1
 800344e:	6821      	ldr	r1, [r4, #0]
 8003450:	4313      	orrs	r3, r2
 8003452:	604b      	str	r3, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003454:	2000      	movs	r0, #0
 8003456:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003458:	2301      	movs	r3, #1
 800345a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 800345e:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003460:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8003464:	4620      	mov	r0, r4
 8003466:	f7fe fe95 	bl	8002194 <HAL_SPI_MspInit>
 800346a:	e7ab      	b.n	80033c4 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800346c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003470:	e7b5      	b.n	80033de <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8003472:	2001      	movs	r0, #1
}
 8003474:	4770      	bx	lr

08003476 <HAL_SPI_Transmit>:
{
 8003476:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800347a:	b083      	sub	sp, #12
 800347c:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800347e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8003482:	2b01      	cmp	r3, #1
 8003484:	f000 80f6 	beq.w	8003674 <HAL_SPI_Transmit+0x1fe>
 8003488:	4604      	mov	r4, r0
 800348a:	4688      	mov	r8, r1
 800348c:	4691      	mov	r9, r2
 800348e:	2301      	movs	r3, #1
 8003490:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003494:	f7fe ffd4 	bl	8002440 <HAL_GetTick>
 8003498:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800349a:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 800349e:	b2f6      	uxtb	r6, r6
 80034a0:	2e01      	cmp	r6, #1
 80034a2:	f040 80d4 	bne.w	800364e <HAL_SPI_Transmit+0x1d8>
  if ((pData == NULL) || (Size == 0U))
 80034a6:	f1b8 0f00 	cmp.w	r8, #0
 80034aa:	f000 80d1 	beq.w	8003650 <HAL_SPI_Transmit+0x1da>
 80034ae:	f1b9 0f00 	cmp.w	r9, #0
 80034b2:	f000 80cd 	beq.w	8003650 <HAL_SPI_Transmit+0x1da>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80034b6:	2303      	movs	r3, #3
 80034b8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034bc:	2300      	movs	r3, #0
 80034be:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80034c0:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80034c4:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80034c8:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034cc:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80034ce:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80034d2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 80034d6:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 80034d8:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034da:	68a3      	ldr	r3, [r4, #8]
 80034dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034e0:	d01e      	beq.n	8003520 <HAL_SPI_Transmit+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034e2:	6823      	ldr	r3, [r4, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80034ea:	d103      	bne.n	80034f4 <HAL_SPI_Transmit+0x7e>
    __HAL_SPI_ENABLE(hspi);
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034f2:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034f4:	68e3      	ldr	r3, [r4, #12]
 80034f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034fa:	d942      	bls.n	8003582 <HAL_SPI_Transmit+0x10c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034fc:	6863      	ldr	r3, [r4, #4]
 80034fe:	b113      	cbz	r3, 8003506 <HAL_SPI_Transmit+0x90>
 8003500:	f1b9 0f01 	cmp.w	r9, #1
 8003504:	d123      	bne.n	800354e <HAL_SPI_Transmit+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003506:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003508:	6823      	ldr	r3, [r4, #0]
 800350a:	8812      	ldrh	r2, [r2, #0]
 800350c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800350e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003510:	3302      	adds	r3, #2
 8003512:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003514:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003516:	b29b      	uxth	r3, r3
 8003518:	3b01      	subs	r3, #1
 800351a:	b29b      	uxth	r3, r3
 800351c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800351e:	e016      	b.n	800354e <HAL_SPI_Transmit+0xd8>
    __HAL_SPI_DISABLE(hspi);
 8003520:	6822      	ldr	r2, [r4, #0]
 8003522:	6813      	ldr	r3, [r2, #0]
 8003524:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003528:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 800352a:	6822      	ldr	r2, [r4, #0]
 800352c:	6813      	ldr	r3, [r2, #0]
 800352e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	e7d5      	b.n	80034e2 <HAL_SPI_Transmit+0x6c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003536:	f7fe ff83 	bl	8002440 <HAL_GetTick>
 800353a:	1bc0      	subs	r0, r0, r7
 800353c:	42a8      	cmp	r0, r5
 800353e:	d303      	bcc.n	8003548 <HAL_SPI_Transmit+0xd2>
 8003540:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003544:	f040 808e 	bne.w	8003664 <HAL_SPI_Transmit+0x1ee>
 8003548:	2d00      	cmp	r5, #0
 800354a:	f000 808d 	beq.w	8003668 <HAL_SPI_Transmit+0x1f2>
    while (hspi->TxXferCount > 0U)
 800354e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003550:	b29b      	uxth	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d066      	beq.n	8003624 <HAL_SPI_Transmit+0x1ae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003556:	6823      	ldr	r3, [r4, #0]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	f012 0f02 	tst.w	r2, #2
 800355e:	d0ea      	beq.n	8003536 <HAL_SPI_Transmit+0xc0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003560:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003562:	8812      	ldrh	r2, [r2, #0]
 8003564:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003566:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003568:	3302      	adds	r3, #2
 800356a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800356c:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 8003570:	fa1f fc8c 	uxth.w	ip, ip
 8003574:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003578:	fa1f fc8c 	uxth.w	ip, ip
 800357c:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 8003580:	e7e5      	b.n	800354e <HAL_SPI_Transmit+0xd8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003582:	6863      	ldr	r3, [r4, #4]
 8003584:	b113      	cbz	r3, 800358c <HAL_SPI_Transmit+0x116>
 8003586:	f1b9 0f01 	cmp.w	r9, #1
 800358a:	d133      	bne.n	80035f4 <HAL_SPI_Transmit+0x17e>
      if (hspi->TxXferCount > 1U)
 800358c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800358e:	b29b      	uxth	r3, r3
 8003590:	2b01      	cmp	r3, #1
 8003592:	d90c      	bls.n	80035ae <HAL_SPI_Transmit+0x138>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003594:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003596:	6823      	ldr	r3, [r4, #0]
 8003598:	8812      	ldrh	r2, [r2, #0]
 800359a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800359c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800359e:	3302      	adds	r3, #2
 80035a0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80035a2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	3b02      	subs	r3, #2
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80035ac:	e022      	b.n	80035f4 <HAL_SPI_Transmit+0x17e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035ae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80035b0:	6823      	ldr	r3, [r4, #0]
 80035b2:	7812      	ldrb	r2, [r2, #0]
 80035b4:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 80035b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80035b8:	3301      	adds	r3, #1
 80035ba:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80035bc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80035be:	b29b      	uxth	r3, r3
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80035c6:	e015      	b.n	80035f4 <HAL_SPI_Transmit+0x17e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80035ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80035d0:	3301      	adds	r3, #1
 80035d2:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80035d4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29b      	uxth	r3, r3
 80035dc:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80035de:	e009      	b.n	80035f4 <HAL_SPI_Transmit+0x17e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035e0:	f7fe ff2e 	bl	8002440 <HAL_GetTick>
 80035e4:	1bc0      	subs	r0, r0, r7
 80035e6:	42a8      	cmp	r0, r5
 80035e8:	d302      	bcc.n	80035f0 <HAL_SPI_Transmit+0x17a>
 80035ea:	f1b5 3fff 	cmp.w	r5, #4294967295
 80035ee:	d13d      	bne.n	800366c <HAL_SPI_Transmit+0x1f6>
 80035f0:	2d00      	cmp	r5, #0
 80035f2:	d03d      	beq.n	8003670 <HAL_SPI_Transmit+0x1fa>
    while (hspi->TxXferCount > 0U)
 80035f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	b1a3      	cbz	r3, 8003624 <HAL_SPI_Transmit+0x1ae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035fa:	6822      	ldr	r2, [r4, #0]
 80035fc:	6893      	ldr	r3, [r2, #8]
 80035fe:	f013 0f02 	tst.w	r3, #2
 8003602:	d0ed      	beq.n	80035e0 <HAL_SPI_Transmit+0x16a>
        if (hspi->TxXferCount > 1U)
 8003604:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003606:	b29b      	uxth	r3, r3
 8003608:	2b01      	cmp	r3, #1
 800360a:	d9dd      	bls.n	80035c8 <HAL_SPI_Transmit+0x152>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800360c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800360e:	881b      	ldrh	r3, [r3, #0]
 8003610:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003612:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003614:	3302      	adds	r3, #2
 8003616:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003618:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800361a:	b29b      	uxth	r3, r3
 800361c:	3b02      	subs	r3, #2
 800361e:	b29b      	uxth	r3, r3
 8003620:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003622:	e7e7      	b.n	80035f4 <HAL_SPI_Transmit+0x17e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003624:	463a      	mov	r2, r7
 8003626:	4629      	mov	r1, r5
 8003628:	4620      	mov	r0, r4
 800362a:	f7ff fe43 	bl	80032b4 <SPI_EndRxTxTransaction>
 800362e:	b108      	cbz	r0, 8003634 <HAL_SPI_Transmit+0x1be>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003630:	2320      	movs	r3, #32
 8003632:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003634:	68a3      	ldr	r3, [r4, #8]
 8003636:	b933      	cbnz	r3, 8003646 <HAL_SPI_Transmit+0x1d0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003638:	9301      	str	r3, [sp, #4]
 800363a:	6823      	ldr	r3, [r4, #0]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	9201      	str	r2, [sp, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	9301      	str	r3, [sp, #4]
 8003644:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003646:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003648:	b913      	cbnz	r3, 8003650 <HAL_SPI_Transmit+0x1da>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800364a:	2600      	movs	r6, #0
 800364c:	e000      	b.n	8003650 <HAL_SPI_Transmit+0x1da>
    errorcode = HAL_BUSY;
 800364e:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003650:	2301      	movs	r3, #1
 8003652:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003656:	2300      	movs	r3, #0
 8003658:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800365c:	4630      	mov	r0, r6
 800365e:	b003      	add	sp, #12
 8003660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8003664:	2603      	movs	r6, #3
 8003666:	e7f3      	b.n	8003650 <HAL_SPI_Transmit+0x1da>
 8003668:	2603      	movs	r6, #3
 800366a:	e7f1      	b.n	8003650 <HAL_SPI_Transmit+0x1da>
          errorcode = HAL_TIMEOUT;
 800366c:	2603      	movs	r6, #3
 800366e:	e7ef      	b.n	8003650 <HAL_SPI_Transmit+0x1da>
 8003670:	2603      	movs	r6, #3
 8003672:	e7ed      	b.n	8003650 <HAL_SPI_Transmit+0x1da>
  __HAL_LOCK(hspi);
 8003674:	2602      	movs	r6, #2
 8003676:	e7f1      	b.n	800365c <HAL_SPI_Transmit+0x1e6>

08003678 <HAL_SPI_TransmitReceive>:
{
 8003678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800367c:	461f      	mov	r7, r3
 800367e:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 8003680:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8003684:	2b01      	cmp	r3, #1
 8003686:	f000 8164 	beq.w	8003952 <HAL_SPI_TransmitReceive+0x2da>
 800368a:	4604      	mov	r4, r0
 800368c:	4688      	mov	r8, r1
 800368e:	4691      	mov	r9, r2
 8003690:	2301      	movs	r3, #1
 8003692:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003696:	f7fe fed3 	bl	8002440 <HAL_GetTick>
 800369a:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 800369c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80036a0:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 80036a2:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d00a      	beq.n	80036be <HAL_SPI_TransmitReceive+0x46>
 80036a8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80036ac:	f040 8138 	bne.w	8003920 <HAL_SPI_TransmitReceive+0x2a8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036b0:	68a2      	ldr	r2, [r4, #8]
 80036b2:	2a00      	cmp	r2, #0
 80036b4:	f040 813d 	bne.w	8003932 <HAL_SPI_TransmitReceive+0x2ba>
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	f040 813c 	bne.w	8003936 <HAL_SPI_TransmitReceive+0x2be>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036be:	f1b8 0f00 	cmp.w	r8, #0
 80036c2:	f000 813a 	beq.w	800393a <HAL_SPI_TransmitReceive+0x2c2>
 80036c6:	f1b9 0f00 	cmp.w	r9, #0
 80036ca:	f000 8138 	beq.w	800393e <HAL_SPI_TransmitReceive+0x2c6>
 80036ce:	2f00      	cmp	r7, #0
 80036d0:	f000 8137 	beq.w	8003942 <HAL_SPI_TransmitReceive+0x2ca>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036d4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b04      	cmp	r3, #4
 80036dc:	d002      	beq.n	80036e4 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80036de:	2305      	movs	r3, #5
 80036e0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036e4:	2300      	movs	r3, #0
 80036e6:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80036e8:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80036ec:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80036f0:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80036f4:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80036f8:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80036fa:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 80036fc:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80036fe:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003700:	68e3      	ldr	r3, [r4, #12]
 8003702:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003706:	d801      	bhi.n	800370c <HAL_SPI_TransmitReceive+0x94>
 8003708:	2f01      	cmp	r7, #1
 800370a:	d923      	bls.n	8003754 <HAL_SPI_TransmitReceive+0xdc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800370c:	6822      	ldr	r2, [r4, #0]
 800370e:	6853      	ldr	r3, [r2, #4]
 8003710:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003714:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003716:	6823      	ldr	r3, [r4, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800371e:	d103      	bne.n	8003728 <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003726:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003728:	68e3      	ldr	r3, [r4, #12]
 800372a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800372e:	d958      	bls.n	80037e2 <HAL_SPI_TransmitReceive+0x16a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003730:	6863      	ldr	r3, [r4, #4]
 8003732:	b10b      	cbz	r3, 8003738 <HAL_SPI_TransmitReceive+0xc0>
 8003734:	2f01      	cmp	r7, #1
 8003736:	d10b      	bne.n	8003750 <HAL_SPI_TransmitReceive+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003738:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800373a:	6823      	ldr	r3, [r4, #0]
 800373c:	8812      	ldrh	r2, [r2, #0]
 800373e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003740:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003742:	3302      	adds	r3, #2
 8003744:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003746:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003748:	b29b      	uxth	r3, r3
 800374a:	3b01      	subs	r3, #1
 800374c:	b29b      	uxth	r3, r3
 800374e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003750:	2701      	movs	r7, #1
 8003752:	e031      	b.n	80037b8 <HAL_SPI_TransmitReceive+0x140>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003754:	6822      	ldr	r2, [r4, #0]
 8003756:	6853      	ldr	r3, [r2, #4]
 8003758:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800375c:	6053      	str	r3, [r2, #4]
 800375e:	e7da      	b.n	8003716 <HAL_SPI_TransmitReceive+0x9e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003760:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003762:	8812      	ldrh	r2, [r2, #0]
 8003764:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003766:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003768:	3302      	adds	r3, #2
 800376a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800376c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800376e:	b29b      	uxth	r3, r3
 8003770:	3b01      	subs	r3, #1
 8003772:	b29b      	uxth	r3, r3
 8003774:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8003776:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003778:	6823      	ldr	r3, [r4, #0]
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	f012 0f01 	tst.w	r2, #1
 8003780:	d011      	beq.n	80037a6 <HAL_SPI_TransmitReceive+0x12e>
 8003782:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003786:	b292      	uxth	r2, r2
 8003788:	b16a      	cbz	r2, 80037a6 <HAL_SPI_TransmitReceive+0x12e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800378e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003790:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003792:	3302      	adds	r3, #2
 8003794:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003796:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800379a:	b29b      	uxth	r3, r3
 800379c:	3b01      	subs	r3, #1
 800379e:	b29b      	uxth	r3, r3
 80037a0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 80037a4:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80037a6:	f7fe fe4b 	bl	8002440 <HAL_GetTick>
 80037aa:	1b83      	subs	r3, r0, r6
 80037ac:	42ab      	cmp	r3, r5
 80037ae:	d303      	bcc.n	80037b8 <HAL_SPI_TransmitReceive+0x140>
 80037b0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80037b4:	f040 80c7 	bne.w	8003946 <HAL_SPI_TransmitReceive+0x2ce>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037b8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	b92b      	cbnz	r3, 80037ca <HAL_SPI_TransmitReceive+0x152>
 80037be:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 80a1 	beq.w	800390c <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037ca:	6823      	ldr	r3, [r4, #0]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	f012 0f02 	tst.w	r2, #2
 80037d2:	d0d1      	beq.n	8003778 <HAL_SPI_TransmitReceive+0x100>
 80037d4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80037d6:	b292      	uxth	r2, r2
 80037d8:	2a00      	cmp	r2, #0
 80037da:	d0cd      	beq.n	8003778 <HAL_SPI_TransmitReceive+0x100>
 80037dc:	2f00      	cmp	r7, #0
 80037de:	d0cb      	beq.n	8003778 <HAL_SPI_TransmitReceive+0x100>
 80037e0:	e7be      	b.n	8003760 <HAL_SPI_TransmitReceive+0xe8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037e2:	6863      	ldr	r3, [r4, #4]
 80037e4:	b10b      	cbz	r3, 80037ea <HAL_SPI_TransmitReceive+0x172>
 80037e6:	2f01      	cmp	r7, #1
 80037e8:	d10f      	bne.n	800380a <HAL_SPI_TransmitReceive+0x192>
      if (hspi->TxXferCount > 1U)
 80037ea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d90d      	bls.n	800380e <HAL_SPI_TransmitReceive+0x196>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037f2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80037f4:	6823      	ldr	r3, [r4, #0]
 80037f6:	8812      	ldrh	r2, [r2, #0]
 80037f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80037fc:	3302      	adds	r3, #2
 80037fe:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003800:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003802:	b29b      	uxth	r3, r3
 8003804:	3b02      	subs	r3, #2
 8003806:	b29b      	uxth	r3, r3
 8003808:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800380a:	2701      	movs	r7, #1
 800380c:	e049      	b.n	80038a2 <HAL_SPI_TransmitReceive+0x22a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800380e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003810:	6823      	ldr	r3, [r4, #0]
 8003812:	7812      	ldrb	r2, [r2, #0]
 8003814:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8003816:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003818:	3301      	adds	r3, #1
 800381a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800381c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800381e:	b29b      	uxth	r3, r3
 8003820:	3b01      	subs	r3, #1
 8003822:	b29b      	uxth	r3, r3
 8003824:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003826:	e7f0      	b.n	800380a <HAL_SPI_TransmitReceive+0x192>
        if (hspi->TxXferCount > 1U)
 8003828:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800382a:	b292      	uxth	r2, r2
 800382c:	2a01      	cmp	r2, #1
 800382e:	d90c      	bls.n	800384a <HAL_SPI_TransmitReceive+0x1d2>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003830:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003832:	8812      	ldrh	r2, [r2, #0]
 8003834:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003836:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003838:	3302      	adds	r3, #2
 800383a:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800383c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800383e:	b29b      	uxth	r3, r3
 8003840:	3b02      	subs	r3, #2
 8003842:	b29b      	uxth	r3, r3
 8003844:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8003846:	2700      	movs	r7, #0
 8003848:	e03d      	b.n	80038c6 <HAL_SPI_TransmitReceive+0x24e>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800384a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800384c:	7812      	ldrb	r2, [r2, #0]
 800384e:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 8003850:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003852:	3301      	adds	r3, #1
 8003854:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8003856:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003858:	b29b      	uxth	r3, r3
 800385a:	3b01      	subs	r3, #1
 800385c:	b29b      	uxth	r3, r3
 800385e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8003860:	2700      	movs	r7, #0
 8003862:	e030      	b.n	80038c6 <HAL_SPI_TransmitReceive+0x24e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003864:	6822      	ldr	r2, [r4, #0]
 8003866:	6853      	ldr	r3, [r2, #4]
 8003868:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800386c:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 800386e:	2701      	movs	r7, #1
 8003870:	e00d      	b.n	800388e <HAL_SPI_TransmitReceive+0x216>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003872:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003874:	7b1b      	ldrb	r3, [r3, #12]
 8003876:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 8003878:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800387a:	3301      	adds	r3, #1
 800387c:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 800387e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003882:	b29b      	uxth	r3, r3
 8003884:	3b01      	subs	r3, #1
 8003886:	b29b      	uxth	r3, r3
 8003888:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800388c:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800388e:	f7fe fdd7 	bl	8002440 <HAL_GetTick>
 8003892:	1b80      	subs	r0, r0, r6
 8003894:	42a8      	cmp	r0, r5
 8003896:	d302      	bcc.n	800389e <HAL_SPI_TransmitReceive+0x226>
 8003898:	f1b5 3fff 	cmp.w	r5, #4294967295
 800389c:	d155      	bne.n	800394a <HAL_SPI_TransmitReceive+0x2d2>
 800389e:	2d00      	cmp	r5, #0
 80038a0:	d055      	beq.n	800394e <HAL_SPI_TransmitReceive+0x2d6>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038a2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	b923      	cbnz	r3, 80038b2 <HAL_SPI_TransmitReceive+0x23a>
 80038a8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d02c      	beq.n	800390c <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038b2:	6823      	ldr	r3, [r4, #0]
 80038b4:	689a      	ldr	r2, [r3, #8]
 80038b6:	f012 0f02 	tst.w	r2, #2
 80038ba:	d004      	beq.n	80038c6 <HAL_SPI_TransmitReceive+0x24e>
 80038bc:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80038be:	b292      	uxth	r2, r2
 80038c0:	b10a      	cbz	r2, 80038c6 <HAL_SPI_TransmitReceive+0x24e>
 80038c2:	2f00      	cmp	r7, #0
 80038c4:	d1b0      	bne.n	8003828 <HAL_SPI_TransmitReceive+0x1b0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038c6:	6823      	ldr	r3, [r4, #0]
 80038c8:	689a      	ldr	r2, [r3, #8]
 80038ca:	f012 0f01 	tst.w	r2, #1
 80038ce:	d0de      	beq.n	800388e <HAL_SPI_TransmitReceive+0x216>
 80038d0:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80038d4:	b292      	uxth	r2, r2
 80038d6:	2a00      	cmp	r2, #0
 80038d8:	d0d9      	beq.n	800388e <HAL_SPI_TransmitReceive+0x216>
        if (hspi->RxXferCount > 1U)
 80038da:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80038de:	b292      	uxth	r2, r2
 80038e0:	2a01      	cmp	r2, #1
 80038e2:	d9c6      	bls.n	8003872 <HAL_SPI_TransmitReceive+0x1fa>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038e4:	68da      	ldr	r2, [r3, #12]
 80038e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80038e8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80038ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80038ec:	3302      	adds	r3, #2
 80038ee:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80038f0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	3b02      	subs	r3, #2
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80038fe:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003902:	b29b      	uxth	r3, r3
 8003904:	2b01      	cmp	r3, #1
 8003906:	d9ad      	bls.n	8003864 <HAL_SPI_TransmitReceive+0x1ec>
        txallowed = 1U;
 8003908:	2701      	movs	r7, #1
 800390a:	e7c0      	b.n	800388e <HAL_SPI_TransmitReceive+0x216>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800390c:	4632      	mov	r2, r6
 800390e:	4629      	mov	r1, r5
 8003910:	4620      	mov	r0, r4
 8003912:	f7ff fccf 	bl	80032b4 <SPI_EndRxTxTransaction>
 8003916:	b120      	cbz	r0, 8003922 <HAL_SPI_TransmitReceive+0x2aa>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003918:	2320      	movs	r3, #32
 800391a:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800391c:	2001      	movs	r0, #1
 800391e:	e000      	b.n	8003922 <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_BUSY;
 8003920:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003922:	2301      	movs	r3, #1
 8003924:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003928:	2300      	movs	r3, #0
 800392a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800392e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8003932:	2002      	movs	r0, #2
 8003934:	e7f5      	b.n	8003922 <HAL_SPI_TransmitReceive+0x2aa>
 8003936:	2002      	movs	r0, #2
 8003938:	e7f3      	b.n	8003922 <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_ERROR;
 800393a:	2001      	movs	r0, #1
 800393c:	e7f1      	b.n	8003922 <HAL_SPI_TransmitReceive+0x2aa>
 800393e:	2001      	movs	r0, #1
 8003940:	e7ef      	b.n	8003922 <HAL_SPI_TransmitReceive+0x2aa>
 8003942:	2001      	movs	r0, #1
 8003944:	e7ed      	b.n	8003922 <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 8003946:	2003      	movs	r0, #3
 8003948:	e7eb      	b.n	8003922 <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 800394a:	2003      	movs	r0, #3
 800394c:	e7e9      	b.n	8003922 <HAL_SPI_TransmitReceive+0x2aa>
 800394e:	2003      	movs	r0, #3
 8003950:	e7e7      	b.n	8003922 <HAL_SPI_TransmitReceive+0x2aa>
  __HAL_LOCK(hspi);
 8003952:	2002      	movs	r0, #2
 8003954:	e7eb      	b.n	800392e <HAL_SPI_TransmitReceive+0x2b6>

08003956 <HAL_SPI_Receive>:
{
 8003956:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800395a:	b083      	sub	sp, #12
 800395c:	4604      	mov	r4, r0
 800395e:	4688      	mov	r8, r1
 8003960:	4691      	mov	r9, r2
 8003962:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003964:	6840      	ldr	r0, [r0, #4]
 8003966:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 800396a:	d043      	beq.n	80039f4 <HAL_SPI_Receive+0x9e>
  __HAL_LOCK(hspi);
 800396c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8003970:	2b01      	cmp	r3, #1
 8003972:	f000 80c3 	beq.w	8003afc <HAL_SPI_Receive+0x1a6>
 8003976:	2301      	movs	r3, #1
 8003978:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800397c:	f7fe fd60 	bl	8002440 <HAL_GetTick>
 8003980:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003982:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 8003986:	b2f6      	uxtb	r6, r6
 8003988:	2e01      	cmp	r6, #1
 800398a:	f040 80a4 	bne.w	8003ad6 <HAL_SPI_Receive+0x180>
  if ((pData == NULL) || (Size == 0U))
 800398e:	f1b8 0f00 	cmp.w	r8, #0
 8003992:	f000 80a1 	beq.w	8003ad8 <HAL_SPI_Receive+0x182>
 8003996:	f1b9 0f00 	cmp.w	r9, #0
 800399a:	f000 809d 	beq.w	8003ad8 <HAL_SPI_Receive+0x182>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800399e:	2304      	movs	r3, #4
 80039a0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039a4:	2300      	movs	r3, #0
 80039a6:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80039a8:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80039ac:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 80039b0:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80039b4:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80039b6:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80039b8:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80039ba:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80039bc:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039be:	68e3      	ldr	r3, [r4, #12]
 80039c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039c4:	d924      	bls.n	8003a10 <HAL_SPI_Receive+0xba>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039c6:	6822      	ldr	r2, [r4, #0]
 80039c8:	6853      	ldr	r3, [r2, #4]
 80039ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039ce:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039d0:	68a3      	ldr	r3, [r4, #8]
 80039d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039d6:	d021      	beq.n	8003a1c <HAL_SPI_Receive+0xc6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039d8:	6823      	ldr	r3, [r4, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	f012 0f40 	tst.w	r2, #64	; 0x40
 80039e0:	d103      	bne.n	80039ea <HAL_SPI_Receive+0x94>
    __HAL_SPI_ENABLE(hspi);
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039e8:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80039ea:	68e3      	ldr	r3, [r4, #12]
 80039ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039f0:	d929      	bls.n	8003a46 <HAL_SPI_Receive+0xf0>
 80039f2:	e04a      	b.n	8003a8a <HAL_SPI_Receive+0x134>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80039f4:	68a3      	ldr	r3, [r4, #8]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1b8      	bne.n	800396c <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80039fa:	2304      	movs	r3, #4
 80039fc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003a00:	9500      	str	r5, [sp, #0]
 8003a02:	4613      	mov	r3, r2
 8003a04:	460a      	mov	r2, r1
 8003a06:	4620      	mov	r0, r4
 8003a08:	f7ff fe36 	bl	8003678 <HAL_SPI_TransmitReceive>
 8003a0c:	4606      	mov	r6, r0
 8003a0e:	e069      	b.n	8003ae4 <HAL_SPI_Receive+0x18e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a10:	6822      	ldr	r2, [r4, #0]
 8003a12:	6853      	ldr	r3, [r2, #4]
 8003a14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a18:	6053      	str	r3, [r2, #4]
 8003a1a:	e7d9      	b.n	80039d0 <HAL_SPI_Receive+0x7a>
    __HAL_SPI_DISABLE(hspi);
 8003a1c:	6822      	ldr	r2, [r4, #0]
 8003a1e:	6813      	ldr	r3, [r2, #0]
 8003a20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a24:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8003a26:	6822      	ldr	r2, [r4, #0]
 8003a28:	6813      	ldr	r3, [r2, #0]
 8003a2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	e7d2      	b.n	80039d8 <HAL_SPI_Receive+0x82>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a32:	f7fe fd05 	bl	8002440 <HAL_GetTick>
 8003a36:	1bc0      	subs	r0, r0, r7
 8003a38:	42a8      	cmp	r0, r5
 8003a3a:	d302      	bcc.n	8003a42 <HAL_SPI_Receive+0xec>
 8003a3c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003a40:	d154      	bne.n	8003aec <HAL_SPI_Receive+0x196>
 8003a42:	2d00      	cmp	r5, #0
 8003a44:	d054      	beq.n	8003af0 <HAL_SPI_Receive+0x19a>
    while (hspi->RxXferCount > 0U)
 8003a46:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d036      	beq.n	8003abe <HAL_SPI_Receive+0x168>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a50:	6823      	ldr	r3, [r4, #0]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	f012 0f01 	tst.w	r2, #1
 8003a58:	d0eb      	beq.n	8003a32 <HAL_SPI_Receive+0xdc>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a5a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003a5c:	7b1b      	ldrb	r3, [r3, #12]
 8003a5e:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003a60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a62:	3301      	adds	r3, #1
 8003a64:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003a66:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8003a74:	e7e7      	b.n	8003a46 <HAL_SPI_Receive+0xf0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a76:	f7fe fce3 	bl	8002440 <HAL_GetTick>
 8003a7a:	1bc0      	subs	r0, r0, r7
 8003a7c:	42a8      	cmp	r0, r5
 8003a7e:	d302      	bcc.n	8003a86 <HAL_SPI_Receive+0x130>
 8003a80:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003a84:	d136      	bne.n	8003af4 <HAL_SPI_Receive+0x19e>
 8003a86:	2d00      	cmp	r5, #0
 8003a88:	d036      	beq.n	8003af8 <HAL_SPI_Receive+0x1a2>
    while (hspi->RxXferCount > 0U)
 8003a8a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	b1ab      	cbz	r3, 8003abe <HAL_SPI_Receive+0x168>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a92:	6823      	ldr	r3, [r4, #0]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	f012 0f01 	tst.w	r2, #1
 8003a9a:	d0ec      	beq.n	8003a76 <HAL_SPI_Receive+0x120>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003aa0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003aa2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003aa4:	3302      	adds	r3, #2
 8003aa6:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003aa8:	f8b4 c046 	ldrh.w	ip, [r4, #70]	; 0x46
 8003aac:	fa1f fc8c 	uxth.w	ip, ip
 8003ab0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003ab4:	fa1f fc8c 	uxth.w	ip, ip
 8003ab8:	f8a4 c046 	strh.w	ip, [r4, #70]	; 0x46
 8003abc:	e7e5      	b.n	8003a8a <HAL_SPI_Receive+0x134>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003abe:	463a      	mov	r2, r7
 8003ac0:	4629      	mov	r1, r5
 8003ac2:	4620      	mov	r0, r4
 8003ac4:	f7ff fc27 	bl	8003316 <SPI_EndRxTransaction>
 8003ac8:	b108      	cbz	r0, 8003ace <HAL_SPI_Receive+0x178>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003aca:	2320      	movs	r3, #32
 8003acc:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ace:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003ad0:	b913      	cbnz	r3, 8003ad8 <HAL_SPI_Receive+0x182>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ad2:	2600      	movs	r6, #0
 8003ad4:	e000      	b.n	8003ad8 <HAL_SPI_Receive+0x182>
    errorcode = HAL_BUSY;
 8003ad6:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003ade:	2300      	movs	r3, #0
 8003ae0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8003ae4:	4630      	mov	r0, r6
 8003ae6:	b003      	add	sp, #12
 8003ae8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8003aec:	2603      	movs	r6, #3
 8003aee:	e7f3      	b.n	8003ad8 <HAL_SPI_Receive+0x182>
 8003af0:	2603      	movs	r6, #3
 8003af2:	e7f1      	b.n	8003ad8 <HAL_SPI_Receive+0x182>
          errorcode = HAL_TIMEOUT;
 8003af4:	2603      	movs	r6, #3
 8003af6:	e7ef      	b.n	8003ad8 <HAL_SPI_Receive+0x182>
 8003af8:	2603      	movs	r6, #3
 8003afa:	e7ed      	b.n	8003ad8 <HAL_SPI_Receive+0x182>
  __HAL_LOCK(hspi);
 8003afc:	2602      	movs	r6, #2
 8003afe:	e7f1      	b.n	8003ae4 <HAL_SPI_Receive+0x18e>

08003b00 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8003b00:	468c      	mov	ip, r1
 8003b02:	4613      	mov	r3, r2
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8003b04:	6841      	ldr	r1, [r0, #4]
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8003b06:	f8dc 2004 	ldr.w	r2, [ip, #4]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8003b0a:	685b      	ldr	r3, [r3, #4]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8003b0c:	f8b0 c000 	ldrh.w	ip, [r0]
 8003b10:	8840      	ldrh	r0, [r0, #2]
 8003b12:	fb00 f00c 	mul.w	r0, r0, ip
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8003b16:	e008      	b.n	8003b2a <arm_mat_add_f32+0x2a>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 8003b18:	ecf1 7a01 	vldmia	r1!, {s15}
 8003b1c:	ecb2 7a01 	vldmia	r2!, {s14}
 8003b20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b24:	ece3 7a01 	vstmia	r3!, {s15}

      /* Decrement loop counter */
      blkCnt--;
 8003b28:	3801      	subs	r0, #1
    while (blkCnt > 0U)
 8003b2a:	2800      	cmp	r0, #0
 8003b2c:	d1f4      	bne.n	8003b18 <arm_mat_add_f32+0x18>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
 8003b2e:	4770      	bx	lr

08003b30 <arm_mat_init_f32>:
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
  /* Assign Number of Rows */
  S->numRows = nRows;
 8003b30:	8001      	strh	r1, [r0, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8003b32:	8042      	strh	r2, [r0, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8003b34:	6043      	str	r3, [r0, #4]
}
 8003b36:	4770      	bx	lr

08003b38 <arm_mat_inverse_f32>:
}
#else
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8003b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b3c:	b085      	sub	sp, #20
 8003b3e:	9003      	str	r0, [sp, #12]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8003b40:	f8d0 b004 	ldr.w	fp, [r0, #4]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8003b44:	684b      	ldr	r3, [r1, #4]
 8003b46:	9301      	str	r3, [sp, #4]
  float32_t *pInT1, *pInT2;                      /* Temporary input data matrix pointer */
  float32_t *pOutT1, *pOutT2;                    /* Temporary output data matrix pointer */
  float32_t *pPivotRowIn, *pPRT_in, *pPivotRowDst, *pPRT_pDst;  /* Temporary input and output data matrix pointer */
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8003b48:	f8b0 9000 	ldrh.w	r9, [r0]
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 8003b4c:	f8b0 e002 	ldrh.w	lr, [r0, #2]

    /* Loop over the number of rows */
    rowCnt = numRows;

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 8003b50:	4648      	mov	r0, r9
 8003b52:	e012      	b.n	8003b7a <arm_mat_inverse_f32+0x42>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
      while (j > 0U)
      {
        *pOutT1++ = 0.0f;
 8003b54:	2100      	movs	r1, #0
 8003b56:	f843 1b04 	str.w	r1, [r3], #4
        j--;
 8003b5a:	3a01      	subs	r2, #1
      while (j > 0U)
 8003b5c:	2a00      	cmp	r2, #0
 8003b5e:	d1f9      	bne.n	8003b54 <arm_mat_inverse_f32+0x1c>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pOutT1++ = 1.0f;
 8003b60:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003b64:	f843 2b04 	str.w	r2, [r3], #4

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 8003b68:	3801      	subs	r0, #1
 8003b6a:	4602      	mov	r2, r0
      while (j > 0U)
 8003b6c:	e003      	b.n	8003b76 <arm_mat_inverse_f32+0x3e>
      {
        *pOutT1++ = 0.0f;
 8003b6e:	2100      	movs	r1, #0
 8003b70:	f843 1b04 	str.w	r1, [r3], #4
        j--;
 8003b74:	3a01      	subs	r2, #1
      while (j > 0U)
 8003b76:	2a00      	cmp	r2, #0
 8003b78:	d1f9      	bne.n	8003b6e <arm_mat_inverse_f32+0x36>
    while (rowCnt > 0U)
 8003b7a:	b110      	cbz	r0, 8003b82 <arm_mat_inverse_f32+0x4a>
      j = numRows - rowCnt;
 8003b7c:	eba9 0200 	sub.w	r2, r9, r0
      while (j > 0U)
 8003b80:	e7ec      	b.n	8003b5c <arm_mat_inverse_f32+0x24>
    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */
    loopCnt = numCols;

    /* Index modifier to navigate through the columns */
    l = 0U;
 8003b82:	4684      	mov	ip, r0
    loopCnt = numCols;
 8003b84:	46f2      	mov	sl, lr
  float32_t Xchg, in = 0.0f, in1;                /* Temporary input values  */
 8003b86:	eddf 6a66 	vldr	s13, [pc, #408]	; 8003d20 <arm_mat_inverse_f32+0x1e8>
 8003b8a:	9002      	str	r0, [sp, #8]
 8003b8c:	e07c      	b.n	8003c88 <arm_mat_inverse_f32+0x150>
           * replace in the rows below */
          if (*pInT2 != 0.0f)
          {
            /* Loop over number of columns
             * to the right of the pilot element */
            j = numCols - l;
 8003b8e:	ebae 000c 	sub.w	r0, lr, ip
      pInT1 = pIn + (l * numCols);
 8003b92:	4632      	mov	r2, r6

            while (j > 0U)
 8003b94:	e006      	b.n	8003ba4 <arm_mat_inverse_f32+0x6c>
            {
              /* Exchange the row elements of the input matrix */
              Xchg = *pInT2;
 8003b96:	681c      	ldr	r4, [r3, #0]
              *pInT2++ = *pInT1;
 8003b98:	6815      	ldr	r5, [r2, #0]
 8003b9a:	f843 5b04 	str.w	r5, [r3], #4
              *pInT1++ = Xchg;
 8003b9e:	f842 4b04 	str.w	r4, [r2], #4

              /* Decrement the loop counter */
              j--;
 8003ba2:	3801      	subs	r0, #1
            while (j > 0U)
 8003ba4:	2800      	cmp	r0, #0
 8003ba6:	d1f6      	bne.n	8003b96 <arm_mat_inverse_f32+0x5e>
            }

            /* Loop over number of columns of the destination matrix */
            j = numCols;
 8003ba8:	4672      	mov	r2, lr
      pOutT1 = pOut + (l * numCols);
 8003baa:	4643      	mov	r3, r8
 8003bac:	e006      	b.n	8003bbc <arm_mat_inverse_f32+0x84>

            while (j > 0U)
            {
              /* Exchange the row elements of the destination matrix */
              Xchg = *pOutT2;
 8003bae:	6808      	ldr	r0, [r1, #0]
              *pOutT2++ = *pOutT1;
 8003bb0:	681c      	ldr	r4, [r3, #0]
 8003bb2:	f841 4b04 	str.w	r4, [r1], #4
              *pOutT1++ = Xchg;
 8003bb6:	f843 0b04 	str.w	r0, [r3], #4

              /* Decrement loop counter */
              j--;
 8003bba:	3a01      	subs	r2, #1
            while (j > 0U)
 8003bbc:	2a00      	cmp	r2, #0
 8003bbe:	d1f6      	bne.n	8003bae <arm_mat_inverse_f32+0x76>
            }

            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	9302      	str	r3, [sp, #8]
 8003bc4:	e071      	b.n	8003caa <arm_mat_inverse_f32+0x172>
        for (i = 1U; i < numRows - l; i++)
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	eba9 030c 	sub.w	r3, r9, ip
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d96c      	bls.n	8003caa <arm_mat_inverse_f32+0x172>
          pInT2 = pInT1 + (numCols * i);
 8003bd0:	fb0e f102 	mul.w	r1, lr, r2
 8003bd4:	eb06 0381 	add.w	r3, r6, r1, lsl #2
          pOutT2 = pOutT1 + (numCols * i);
 8003bd8:	eb08 0181 	add.w	r1, r8, r1, lsl #2
          if (*pInT2 != 0.0f)
 8003bdc:	edd3 7a00 	vldr	s15, [r3]
 8003be0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be8:	d1d1      	bne.n	8003b8e <arm_mat_inverse_f32+0x56>
        for (i = 1U; i < numRows - l; i++)
 8003bea:	3201      	adds	r2, #1
 8003bec:	e7ec      	b.n	8003bc8 <arm_mat_inverse_f32+0x90>

      while (j > 0U)
      {
        /* Divide each element of the row of the input matrix
         * by the pivot element */
        in1 = *pInT1;
 8003bee:	ed93 7a00 	vldr	s14, [r3]
        *pInT1++ = in1 / in;
 8003bf2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bf6:	ece3 7a01 	vstmia	r3!, {s15}

        /* Decrement the loop counter */
        j--;
 8003bfa:	3a01      	subs	r2, #1
      while (j > 0U)
 8003bfc:	2a00      	cmp	r2, #0
 8003bfe:	d1f6      	bne.n	8003bee <arm_mat_inverse_f32+0xb6>
      }

      /* Loop over number of columns of the destination matrix */
      j = numCols;
 8003c00:	4670      	mov	r0, lr
      pInT2 = pPivotRowDst;
 8003c02:	4643      	mov	r3, r8
 8003c04:	e006      	b.n	8003c14 <arm_mat_inverse_f32+0xdc>

      while (j > 0U)
      {
        /* Divide each element of the row of the destination matrix
         * by the pivot element */
        in1 = *pInT2;
 8003c06:	ed93 7a00 	vldr	s14, [r3]
        *pInT2++ = in1 / in;
 8003c0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c0e:	ece3 7a01 	vstmia	r3!, {s15}

        /* Decrement the loop counter */
        j--;
 8003c12:	3801      	subs	r0, #1
      while (j > 0U)
 8003c14:	2800      	cmp	r0, #0
 8003c16:	d1f6      	bne.n	8003c06 <arm_mat_inverse_f32+0xce>
      /* index used to check for pivot element */
      i = 0U;

      /* Loop over number of rows */
      /*  to be replaced by the sum of that row and a multiple of row i */
      k = numRows;
 8003c18:	464c      	mov	r4, r9
      pInT2 = pOut;
 8003c1a:	9a01      	ldr	r2, [sp, #4]
      pInT1 = pIn;
 8003c1c:	465b      	mov	r3, fp
 8003c1e:	e025      	b.n	8003c6c <arm_mat_inverse_f32+0x134>
        /* Check for the pivot element */
        if (i == l)
        {
          /* If the processing element is the pivot element,
             only the columns to the right are to be processed */
          pInT1 += numCols - l;
 8003c20:	eb03 0387 	add.w	r3, r3, r7, lsl #2

          pInT2 += numCols;
 8003c24:	eb02 028e 	add.w	r2, r2, lr, lsl #2
 8003c28:	e01c      	b.n	8003c64 <arm_mat_inverse_f32+0x12c>

          while (j > 0U)
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT1;
 8003c2a:	edd3 7a00 	vldr	s15, [r3]
            *pInT1++ = in1 - (in * *pPRT_in++);
 8003c2e:	ecb1 7a01 	vldmia	r1!, {s14}
 8003c32:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003c36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c3a:	ece3 7a01 	vstmia	r3!, {s15}

            /* Decrement the loop counter */
            j--;
 8003c3e:	3d01      	subs	r5, #1
          while (j > 0U)
 8003c40:	2d00      	cmp	r5, #0
 8003c42:	d1f2      	bne.n	8003c2a <arm_mat_inverse_f32+0xf2>
          }

          /* Loop over the number of columns to
             replace the elements in the destination matrix */
          j = numCols;
 8003c44:	4675      	mov	r5, lr
          pPRT_pDst = pPivotRowDst;
 8003c46:	4641      	mov	r1, r8
 8003c48:	e00a      	b.n	8003c60 <arm_mat_inverse_f32+0x128>

          while (j > 0U)
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT2;
 8003c4a:	edd2 7a00 	vldr	s15, [r2]
            *pInT2++ = in1 - (in * *pPRT_pDst++);
 8003c4e:	ecb1 7a01 	vldmia	r1!, {s14}
 8003c52:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003c56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c5a:	ece2 7a01 	vstmia	r2!, {s15}

            /* Decrement loop counter */
            j--;
 8003c5e:	3d01      	subs	r5, #1
          while (j > 0U)
 8003c60:	2d00      	cmp	r5, #0
 8003c62:	d1f2      	bne.n	8003c4a <arm_mat_inverse_f32+0x112>
          }

        }

        /* Increment temporary input pointer */
        pInT1 = pInT1 + l;
 8003c64:	eb03 038c 	add.w	r3, r3, ip, lsl #2

        /* Decrement loop counter */
        k--;
 8003c68:	3c01      	subs	r4, #1

        /* Increment pivot index */
        i++;
 8003c6a:	3001      	adds	r0, #1
      while (k > 0U)
 8003c6c:	b134      	cbz	r4, 8003c7c <arm_mat_inverse_f32+0x144>
        if (i == l)
 8003c6e:	4560      	cmp	r0, ip
 8003c70:	d0d6      	beq.n	8003c20 <arm_mat_inverse_f32+0xe8>
          in = *pInT1;
 8003c72:	edd3 6a00 	vldr	s13, [r3]
          j = (numCols - l);
 8003c76:	463d      	mov	r5, r7
          pPRT_in = pPivotRowIn;
 8003c78:	4631      	mov	r1, r6
          while (j > 0U)
 8003c7a:	e7e1      	b.n	8003c40 <arm_mat_inverse_f32+0x108>
      }

      /* Increment the input pointer */
      pIn++;
 8003c7c:	f10b 0b04 	add.w	fp, fp, #4

      /* Decrement the loop counter */
      loopCnt--;
 8003c80:	f10a 3aff 	add.w	sl, sl, #4294967295

      /* Increment the index modifier */
      l++;
 8003c84:	f10c 0c01 	add.w	ip, ip, #1
    while (loopCnt > 0U)
 8003c88:	f1ba 0f00 	cmp.w	sl, #0
 8003c8c:	d01c      	beq.n	8003cc8 <arm_mat_inverse_f32+0x190>
      pInT1 = pIn + (l * numCols);
 8003c8e:	fb0e f50c 	mul.w	r5, lr, ip
 8003c92:	eb0b 0685 	add.w	r6, fp, r5, lsl #2
      pOutT1 = pOut + (l * numCols);
 8003c96:	9b01      	ldr	r3, [sp, #4]
 8003c98:	eb03 0885 	add.w	r8, r3, r5, lsl #2
      in = *pInT1;
 8003c9c:	ed96 7a00 	vldr	s14, [r6]
      if (*pInT1 == 0.0f)
 8003ca0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8003ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ca8:	d08d      	beq.n	8003bc6 <arm_mat_inverse_f32+0x8e>
      if ((flag != 1U) && (in == 0.0f))
 8003caa:	9b02      	ldr	r3, [sp, #8]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d004      	beq.n	8003cba <arm_mat_inverse_f32+0x182>
 8003cb0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8003cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cb8:	d026      	beq.n	8003d08 <arm_mat_inverse_f32+0x1d0>
      in = *pPivotRowIn;
 8003cba:	edd6 6a00 	vldr	s13, [r6]
      j = (numCols - l);
 8003cbe:	ebae 070c 	sub.w	r7, lr, ip
 8003cc2:	463a      	mov	r2, r7
      pInT1 = pPivotRowIn;
 8003cc4:	4633      	mov	r3, r6
      while (j > 0U)
 8003cc6:	e799      	b.n	8003bfc <arm_mat_inverse_f32+0xc4>
#endif /* #if defined (ARM_MATH_DSP) */

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;

    if ((flag != 1U) && (in == 0.0f))
 8003cc8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8003ccc:	f1b8 0f01 	cmp.w	r8, #1
 8003cd0:	d01f      	beq.n	8003d12 <arm_mat_inverse_f32+0x1da>
 8003cd2:	eef5 6a40 	vcmp.f32	s13, #0.0
 8003cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cda:	d11c      	bne.n	8003d16 <arm_mat_inverse_f32+0x1de>
    {
      pIn = pSrc->pData;
 8003cdc:	9b03      	ldr	r3, [sp, #12]
 8003cde:	6859      	ldr	r1, [r3, #4]
      for (i = 0; i < numRows * numCols; i++)
 8003ce0:	fb0e f309 	mul.w	r3, lr, r9
 8003ce4:	4543      	cmp	r3, r8
 8003ce6:	d90b      	bls.n	8003d00 <arm_mat_inverse_f32+0x1c8>
      {
        if (pIn[i] != 0.0f)
 8003ce8:	eb01 0288 	add.w	r2, r1, r8, lsl #2
 8003cec:	edd2 7a00 	vldr	s15, [r2]
 8003cf0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cf8:	d102      	bne.n	8003d00 <arm_mat_inverse_f32+0x1c8>
      for (i = 0; i < numRows * numCols; i++)
 8003cfa:	f108 0801 	add.w	r8, r8, #1
 8003cfe:	e7ef      	b.n	8003ce0 <arm_mat_inverse_f32+0x1a8>
            break;
      }

      if (i == numRows * numCols)
 8003d00:	4543      	cmp	r3, r8
 8003d02:	d00a      	beq.n	8003d1a <arm_mat_inverse_f32+0x1e2>
    status = ARM_MATH_SUCCESS;
 8003d04:	2000      	movs	r0, #0
 8003d06:	e001      	b.n	8003d0c <arm_mat_inverse_f32+0x1d4>
        return ARM_MATH_SINGULAR;
 8003d08:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return to application */
  return (status);
}
 8003d0c:	b005      	add	sp, #20
 8003d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    status = ARM_MATH_SUCCESS;
 8003d12:	2000      	movs	r0, #0
 8003d14:	e7fa      	b.n	8003d0c <arm_mat_inverse_f32+0x1d4>
 8003d16:	2000      	movs	r0, #0
 8003d18:	e7f8      	b.n	8003d0c <arm_mat_inverse_f32+0x1d4>
        status = ARM_MATH_SINGULAR;
 8003d1a:	f06f 0004 	mvn.w	r0, #4
 8003d1e:	e7f5      	b.n	8003d0c <arm_mat_inverse_f32+0x1d4>
 8003d20:	00000000 	.word	0x00000000

08003d24 <arm_mat_mult_f32>:
#else
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8003d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d28:	4603      	mov	r3, r0
 8003d2a:	4688      	mov	r8, r1
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 8003d2c:	f8d0 c004 	ldr.w	ip, [r0, #4]
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 8003d30:	684d      	ldr	r5, [r1, #4]
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8003d32:	f8d2 9004 	ldr.w	r9, [r2, #4]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 8003d36:	8848      	ldrh	r0, [r1, #2]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 8003d38:	f8b3 e002 	ldrh.w	lr, [r3, #2]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 8003d3c:	881f      	ldrh	r7, [r3, #0]
 8003d3e:	2600      	movs	r6, #0
 8003d40:	e01f      	b.n	8003d82 <arm_mat_mult_f32+0x5e>
        while (colCnt > 0U)
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 8003d42:	ecf3 7a01 	vldmia	r3!, {s15}
 8003d46:	edd2 6a00 	vldr	s13, [r2]
 8003d4a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003d4e:	ee37 7a27 	vadd.f32	s14, s14, s15
          pIn2 += numColsB;
 8003d52:	eb02 0280 	add.w	r2, r2, r0, lsl #2

          /* Decrement loop counter */
          colCnt--;
 8003d56:	3901      	subs	r1, #1
        while (colCnt > 0U)
 8003d58:	2900      	cmp	r1, #0
 8003d5a:	d1f2      	bne.n	8003d42 <arm_mat_mult_f32+0x1e>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 8003d5c:	4653      	mov	r3, sl
 8003d5e:	eca3 7a01 	vstmia	r3!, {s14}

        /* Decrement column loop counter */
        col--;
 8003d62:	3c01      	subs	r4, #1

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 8003d64:	1b02      	subs	r2, r0, r4
 8003d66:	eb05 0282 	add.w	r2, r5, r2, lsl #2

      } while (col > 0U);
 8003d6a:	b12c      	cbz	r4, 8003d78 <arm_mat_mult_f32+0x54>
        *px++ = sum;
 8003d6c:	469a      	mov	sl, r3
        colCnt = numColsA;
 8003d6e:	4671      	mov	r1, lr
        pIn1 = pInA;
 8003d70:	4663      	mov	r3, ip
        sum = 0.0f;
 8003d72:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003d94 <arm_mat_mult_f32+0x70>
        while (colCnt > 0U)
 8003d76:	e7ef      	b.n	8003d58 <arm_mat_mult_f32+0x34>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 8003d78:	4406      	add	r6, r0
      pInA = pInA + numColsA;
 8003d7a:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2

      /* Decrement row loop counter */
      row--;

    } while (row > 0U);
 8003d7e:	3f01      	subs	r7, #1
 8003d80:	d005      	beq.n	8003d8e <arm_mat_mult_f32+0x6a>
      px = pOut + i;
 8003d82:	eb09 0a86 	add.w	sl, r9, r6, lsl #2
      pIn2 = pSrcB->pData;
 8003d86:	f8d8 2004 	ldr.w	r2, [r8, #4]
      col = numColsB;
 8003d8a:	4604      	mov	r4, r0
 8003d8c:	e7ef      	b.n	8003d6e <arm_mat_mult_f32+0x4a>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
 8003d8e:	2000      	movs	r0, #0
 8003d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d94:	00000000 	.word	0x00000000

08003d98 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8003d98:	468c      	mov	ip, r1
 8003d9a:	4613      	mov	r3, r2
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8003d9c:	6841      	ldr	r1, [r0, #4]
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8003d9e:	f8dc 2004 	ldr.w	r2, [ip, #4]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8003da2:	685b      	ldr	r3, [r3, #4]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8003da4:	f8b0 c000 	ldrh.w	ip, [r0]
 8003da8:	8840      	ldrh	r0, [r0, #2]
 8003daa:	fb00 f00c 	mul.w	r0, r0, ip
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8003dae:	e008      	b.n	8003dc2 <arm_mat_sub_f32+0x2a>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 8003db0:	ecf1 7a01 	vldmia	r1!, {s15}
 8003db4:	ecb2 7a01 	vldmia	r2!, {s14}
 8003db8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003dbc:	ece3 7a01 	vstmia	r3!, {s15}

      /* Decrement loop counter */
      blkCnt--;
 8003dc0:	3801      	subs	r0, #1
    while (blkCnt > 0U)
 8003dc2:	2800      	cmp	r0, #0
 8003dc4:	d1f4      	bne.n	8003db0 <arm_mat_sub_f32+0x18>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
 8003dc6:	4770      	bx	lr

08003dc8 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8003dc8:	b570      	push	{r4, r5, r6, lr}
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8003dca:	6843      	ldr	r3, [r0, #4]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8003dcc:	684e      	ldr	r6, [r1, #4]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8003dce:	f8b0 c000 	ldrh.w	ip, [r0]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8003dd2:	8845      	ldrh	r5, [r0, #2]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8003dd4:	4664      	mov	r4, ip
 8003dd6:	f04f 0e00 	mov.w	lr, #0
 8003dda:	e00b      	b.n	8003df4 <arm_mat_trans_f32+0x2c>
#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8003ddc:	f853 0b04 	ldr.w	r0, [r3], #4
 8003de0:	6008      	str	r0, [r1, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8003de2:	eb01 018c 	add.w	r1, r1, ip, lsl #2

        /* Decrement column loop counter */
        col--;
 8003de6:	3a01      	subs	r2, #1
      while (col > 0U)
 8003de8:	2a00      	cmp	r2, #0
 8003dea:	d1f7      	bne.n	8003ddc <arm_mat_trans_f32+0x14>
      }

      i++;
 8003dec:	f10e 0e01 	add.w	lr, lr, #1

      /* Decrement row loop counter */
      row--;

    } while (row > 0U);          /* row loop end */
 8003df0:	3c01      	subs	r4, #1
 8003df2:	d003      	beq.n	8003dfc <arm_mat_trans_f32+0x34>
      px = pOut + i;
 8003df4:	eb06 018e 	add.w	r1, r6, lr, lsl #2
      col = nCols;
 8003df8:	462a      	mov	r2, r5
      while (col > 0U)
 8003dfa:	e7f5      	b.n	8003de8 <arm_mat_trans_f32+0x20>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
 8003dfc:	2000      	movs	r0, #0
 8003dfe:	bd70      	pop	{r4, r5, r6, pc}

08003e00 <arm_quaternion2rotation_f32>:
#else
void arm_quaternion2rotation_f32(const float32_t *pInputQuaternions, 
    float32_t *pOutputRotations, 
    uint32_t nbQuaternions)
{
   for(uint32_t nb=0; nb < nbQuaternions; nb++)
 8003e00:	f04f 0c00 	mov.w	ip, #0
 8003e04:	4594      	cmp	ip, r2
 8003e06:	d27b      	bcs.n	8003f00 <arm_quaternion2rotation_f32+0x100>
{
 8003e08:	b500      	push	{lr}
   {
        float32_t q00 = SQ(pInputQuaternions[0 + nb * 4]);
 8003e0a:	eb00 130c 	add.w	r3, r0, ip, lsl #4
 8003e0e:	ed93 7a00 	vldr	s14, [r3]
 8003e12:	ee67 6a07 	vmul.f32	s13, s14, s14
        float32_t q11 = SQ(pInputQuaternions[1 + nb * 4]);
 8003e16:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e1a:	ee67 3aa7 	vmul.f32	s7, s15, s15
        float32_t q22 = SQ(pInputQuaternions[2 + nb * 4]);
 8003e1e:	ed93 6a02 	vldr	s12, [r3, #8]
 8003e22:	ee26 4a06 	vmul.f32	s8, s12, s12
        float32_t q33 = SQ(pInputQuaternions[3 + nb * 4]);
 8003e26:	ed93 5a03 	vldr	s10, [r3, #12]
 8003e2a:	ee65 4a05 	vmul.f32	s9, s10, s10
        float32_t q01 =  pInputQuaternions[0 + nb * 4]*pInputQuaternions[1 + nb * 4];
 8003e2e:	ee67 5a27 	vmul.f32	s11, s14, s15
        float32_t q02 =  pInputQuaternions[0 + nb * 4]*pInputQuaternions[2 + nb * 4];
 8003e32:	ee67 2a06 	vmul.f32	s5, s14, s12
        float32_t q03 =  pInputQuaternions[0 + nb * 4]*pInputQuaternions[3 + nb * 4];
 8003e36:	ee27 7a05 	vmul.f32	s14, s14, s10
        float32_t q12 =  pInputQuaternions[1 + nb * 4]*pInputQuaternions[2 + nb * 4];
 8003e3a:	ee27 2a86 	vmul.f32	s4, s15, s12
        float32_t q13 =  pInputQuaternions[1 + nb * 4]*pInputQuaternions[3 + nb * 4];
 8003e3e:	ee67 7a85 	vmul.f32	s15, s15, s10
        float32_t q23 =  pInputQuaternions[2 + nb * 4]*pInputQuaternions[3 + nb * 4];
 8003e42:	ee26 6a05 	vmul.f32	s12, s12, s10

        float32_t xx = q00 + q11 - q22 - q33;
 8003e46:	ee36 5aa3 	vadd.f32	s10, s13, s7
 8003e4a:	ee35 5a44 	vsub.f32	s10, s10, s8
 8003e4e:	ee35 5a64 	vsub.f32	s10, s10, s9
        float32_t yy = q00 - q11 + q22 - q33;
 8003e52:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8003e56:	ee36 3a84 	vadd.f32	s6, s13, s8
 8003e5a:	ee33 3a64 	vsub.f32	s6, s6, s9
        float32_t zz = q00 - q11 - q22 + q33;
 8003e5e:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8003e62:	ee76 6aa4 	vadd.f32	s13, s13, s9
        float32_t xy = 2*(q12 - q03);
 8003e66:	ee72 4a47 	vsub.f32	s9, s4, s14
 8003e6a:	ee74 3aa4 	vadd.f32	s7, s9, s9
        float32_t xz = 2*(q13 + q02);
 8003e6e:	ee72 4aa7 	vadd.f32	s9, s5, s15
 8003e72:	ee34 4aa4 	vadd.f32	s8, s9, s9
        float32_t yx = 2*(q12 + q03);
 8003e76:	ee37 7a02 	vadd.f32	s14, s14, s4
 8003e7a:	ee37 7a07 	vadd.f32	s14, s14, s14
        float32_t yz = 2*(q23 - q01);
 8003e7e:	ee76 4a65 	vsub.f32	s9, s12, s11
 8003e82:	ee74 4aa4 	vadd.f32	s9, s9, s9
        float32_t zx = 2*(q13 - q02);
 8003e86:	ee77 7ae2 	vsub.f32	s15, s15, s5
 8003e8a:	ee77 7aa7 	vadd.f32	s15, s15, s15
        float32_t zy = 2*(q23 + q01);
 8003e8e:	ee35 6a86 	vadd.f32	s12, s11, s12
 8003e92:	ee36 6a06 	vadd.f32	s12, s12, s12

        pOutputRotations[0 + nb * 9] = xx; pOutputRotations[1 + nb * 9] = xy; pOutputRotations[2 + nb * 9] = xz;
 8003e96:	eb0c 0ecc 	add.w	lr, ip, ip, lsl #3
 8003e9a:	ea4f 038e 	mov.w	r3, lr, lsl #2
 8003e9e:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
 8003ea2:	ed8e 5a00 	vstr	s10, [lr]
 8003ea6:	f103 0e04 	add.w	lr, r3, #4
 8003eaa:	448e      	add	lr, r1
 8003eac:	edce 3a00 	vstr	s7, [lr]
 8003eb0:	f103 0e08 	add.w	lr, r3, #8
 8003eb4:	448e      	add	lr, r1
 8003eb6:	ed8e 4a00 	vstr	s8, [lr]
        pOutputRotations[3 + nb * 9] = yx; pOutputRotations[4 + nb * 9] = yy; pOutputRotations[5 + nb * 9] = yz;
 8003eba:	f103 0e0c 	add.w	lr, r3, #12
 8003ebe:	448e      	add	lr, r1
 8003ec0:	ed8e 7a00 	vstr	s14, [lr]
 8003ec4:	f103 0e10 	add.w	lr, r3, #16
 8003ec8:	448e      	add	lr, r1
 8003eca:	ed8e 3a00 	vstr	s6, [lr]
 8003ece:	f103 0e14 	add.w	lr, r3, #20
 8003ed2:	448e      	add	lr, r1
 8003ed4:	edce 4a00 	vstr	s9, [lr]
        pOutputRotations[6 + nb * 9] = zx; pOutputRotations[7 + nb * 9] = zy; pOutputRotations[8 + nb * 9] = zz;
 8003ed8:	f103 0e18 	add.w	lr, r3, #24
 8003edc:	448e      	add	lr, r1
 8003ede:	edce 7a00 	vstr	s15, [lr]
 8003ee2:	f103 0e1c 	add.w	lr, r3, #28
 8003ee6:	448e      	add	lr, r1
 8003ee8:	ed8e 6a00 	vstr	s12, [lr]
 8003eec:	3320      	adds	r3, #32
 8003eee:	440b      	add	r3, r1
 8003ef0:	edc3 6a00 	vstr	s13, [r3]
   for(uint32_t nb=0; nb < nbQuaternions; nb++)
 8003ef4:	f10c 0c01 	add.w	ip, ip, #1
 8003ef8:	4594      	cmp	ip, r2
 8003efa:	d386      	bcc.n	8003e0a <arm_quaternion2rotation_f32+0xa>
   }
}
 8003efc:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <arm_quaternion_normalize_f32>:

#else
void arm_quaternion_normalize_f32(const float32_t *pInputQuaternions, 
    float32_t *pNormalizedQuaternions, 
    uint32_t nbQuaternions)
{
 8003f02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f06:	b085      	sub	sp, #20
 8003f08:	4607      	mov	r7, r0
 8003f0a:	460e      	mov	r6, r1
 8003f0c:	9203      	str	r2, [sp, #12]
   float32_t temp;

   for(uint32_t i=0; i < nbQuaternions; i++)
 8003f0e:	2500      	movs	r5, #0
 8003f10:	e048      	b.n	8003fa4 <arm_quaternion_normalize_f32+0xa2>
   {
      temp = SQ(pInputQuaternions[4 * i + 0]) +
 8003f12:	012c      	lsls	r4, r5, #4
 8003f14:	eb07 1b05 	add.w	fp, r7, r5, lsl #4
 8003f18:	ed9b 0a00 	vldr	s0, [fp]
 8003f1c:	ee20 0a00 	vmul.f32	s0, s0, s0
             SQ(pInputQuaternions[4 * i + 1]) +
 8003f20:	1d23      	adds	r3, r4, #4
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	eb07 0a03 	add.w	sl, r7, r3
 8003f28:	edda 7a00 	vldr	s15, [sl]
 8003f2c:	ee67 7aa7 	vmul.f32	s15, s15, s15
      temp = SQ(pInputQuaternions[4 * i + 0]) +
 8003f30:	ee30 0a27 	vadd.f32	s0, s0, s15
             SQ(pInputQuaternions[4 * i + 2]) +
 8003f34:	f104 0208 	add.w	r2, r4, #8
 8003f38:	9201      	str	r2, [sp, #4]
 8003f3a:	eb07 0902 	add.w	r9, r7, r2
 8003f3e:	edd9 7a00 	vldr	s15, [r9]
 8003f42:	ee67 7aa7 	vmul.f32	s15, s15, s15
             SQ(pInputQuaternions[4 * i + 1]) +
 8003f46:	ee30 0a27 	vadd.f32	s0, s0, s15
             SQ(pInputQuaternions[4 * i + 3]);
 8003f4a:	f104 010c 	add.w	r1, r4, #12
 8003f4e:	9102      	str	r1, [sp, #8]
 8003f50:	eb07 0801 	add.w	r8, r7, r1
 8003f54:	edd8 7a00 	vldr	s15, [r8]
 8003f58:	ee67 7aa7 	vmul.f32	s15, s15, s15
      temp = sqrtf(temp);
 8003f5c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003f60:	f001 f98a 	bl	8005278 <sqrtf>

      pNormalizedQuaternions[4 * i + 0] = pInputQuaternions[4 * i + 0] / temp;
 8003f64:	ed9b 7a00 	vldr	s14, [fp]
 8003f68:	4434      	add	r4, r6
 8003f6a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8003f6e:	edc4 7a00 	vstr	s15, [r4]
      pNormalizedQuaternions[4 * i + 1] = pInputQuaternions[4 * i + 1] / temp;
 8003f72:	ed9a 7a00 	vldr	s14, [sl]
 8003f76:	9b00      	ldr	r3, [sp, #0]
 8003f78:	18f3      	adds	r3, r6, r3
 8003f7a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8003f7e:	edc3 7a00 	vstr	s15, [r3]
      pNormalizedQuaternions[4 * i + 2] = pInputQuaternions[4 * i + 2] / temp;
 8003f82:	ed99 7a00 	vldr	s14, [r9]
 8003f86:	9a01      	ldr	r2, [sp, #4]
 8003f88:	18b3      	adds	r3, r6, r2
 8003f8a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8003f8e:	edc3 7a00 	vstr	s15, [r3]
      pNormalizedQuaternions[4 * i + 3] = pInputQuaternions[4 * i + 3] / temp;
 8003f92:	ed98 7a00 	vldr	s14, [r8]
 8003f96:	9902      	ldr	r1, [sp, #8]
 8003f98:	1873      	adds	r3, r6, r1
 8003f9a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8003f9e:	edc3 7a00 	vstr	s15, [r3]
   for(uint32_t i=0; i < nbQuaternions; i++)
 8003fa2:	3501      	adds	r5, #1
 8003fa4:	9b03      	ldr	r3, [sp, #12]
 8003fa6:	429d      	cmp	r5, r3
 8003fa8:	d3b3      	bcc.n	8003f12 <arm_quaternion_normalize_f32+0x10>
   }
}
 8003faa:	b005      	add	sp, #20
 8003fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003fb0 <arm_quaternion_product_single_f32>:
#else
void arm_quaternion_product_single_f32(const float32_t *qa, 
    const float32_t *qb, 
    float32_t *qr)
{
    qr[0] = qa[0] * qb[0] - qa[1] * qb[1] - qa[2] * qb[2] - qa[3] * qb[3];
 8003fb0:	edd0 7a00 	vldr	s15, [r0]
 8003fb4:	ed91 7a00 	vldr	s14, [r1]
 8003fb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fbc:	ed90 7a01 	vldr	s14, [r0, #4]
 8003fc0:	edd1 6a01 	vldr	s13, [r1, #4]
 8003fc4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003fc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003fcc:	ed90 7a02 	vldr	s14, [r0, #8]
 8003fd0:	edd1 6a02 	vldr	s13, [r1, #8]
 8003fd4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003fd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003fdc:	ed90 7a03 	vldr	s14, [r0, #12]
 8003fe0:	edd1 6a03 	vldr	s13, [r1, #12]
 8003fe4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003fe8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003fec:	edc2 7a00 	vstr	s15, [r2]
    qr[1] = qa[0] * qb[1] + qa[1] * qb[0] + qa[2] * qb[3] - qa[3] * qb[2];
 8003ff0:	edd0 7a00 	vldr	s15, [r0]
 8003ff4:	ed91 7a01 	vldr	s14, [r1, #4]
 8003ff8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ffc:	ed90 7a01 	vldr	s14, [r0, #4]
 8004000:	edd1 6a00 	vldr	s13, [r1]
 8004004:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004008:	ee77 7a87 	vadd.f32	s15, s15, s14
 800400c:	ed90 7a02 	vldr	s14, [r0, #8]
 8004010:	edd1 6a03 	vldr	s13, [r1, #12]
 8004014:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004018:	ee77 7a87 	vadd.f32	s15, s15, s14
 800401c:	ed90 7a03 	vldr	s14, [r0, #12]
 8004020:	edd1 6a02 	vldr	s13, [r1, #8]
 8004024:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004028:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800402c:	edc2 7a01 	vstr	s15, [r2, #4]
    qr[2] = qa[0] * qb[2] + qa[2] * qb[0] + qa[3] * qb[1] - qa[1] * qb[3];
 8004030:	edd0 7a00 	vldr	s15, [r0]
 8004034:	ed91 7a02 	vldr	s14, [r1, #8]
 8004038:	ee67 7a87 	vmul.f32	s15, s15, s14
 800403c:	ed90 7a02 	vldr	s14, [r0, #8]
 8004040:	edd1 6a00 	vldr	s13, [r1]
 8004044:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004048:	ee77 7a87 	vadd.f32	s15, s15, s14
 800404c:	ed90 7a03 	vldr	s14, [r0, #12]
 8004050:	edd1 6a01 	vldr	s13, [r1, #4]
 8004054:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004058:	ee77 7a87 	vadd.f32	s15, s15, s14
 800405c:	ed90 7a01 	vldr	s14, [r0, #4]
 8004060:	edd1 6a03 	vldr	s13, [r1, #12]
 8004064:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004068:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800406c:	edc2 7a02 	vstr	s15, [r2, #8]
    qr[3] = qa[0] * qb[3] + qa[3] * qb[0] + qa[1] * qb[2] - qa[2] * qb[1];
 8004070:	edd0 7a00 	vldr	s15, [r0]
 8004074:	ed91 7a03 	vldr	s14, [r1, #12]
 8004078:	ee67 7a87 	vmul.f32	s15, s15, s14
 800407c:	ed90 7a03 	vldr	s14, [r0, #12]
 8004080:	edd1 6a00 	vldr	s13, [r1]
 8004084:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004088:	ee77 7a87 	vadd.f32	s15, s15, s14
 800408c:	ed90 7a01 	vldr	s14, [r0, #4]
 8004090:	edd1 6a02 	vldr	s13, [r1, #8]
 8004094:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004098:	ee77 7a87 	vadd.f32	s15, s15, s14
 800409c:	ed90 7a02 	vldr	s14, [r0, #8]
 80040a0:	edd1 6a01 	vldr	s13, [r1, #4]
 80040a4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80040a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80040ac:	edc2 7a03 	vstr	s15, [r2, #12]
}
 80040b0:	4770      	bx	lr
	...

080040b4 <__assert_func>:
 80040b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80040b6:	4614      	mov	r4, r2
 80040b8:	461a      	mov	r2, r3
 80040ba:	4b09      	ldr	r3, [pc, #36]	; (80040e0 <__assert_func+0x2c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4605      	mov	r5, r0
 80040c0:	68d8      	ldr	r0, [r3, #12]
 80040c2:	b14c      	cbz	r4, 80040d8 <__assert_func+0x24>
 80040c4:	4b07      	ldr	r3, [pc, #28]	; (80040e4 <__assert_func+0x30>)
 80040c6:	9100      	str	r1, [sp, #0]
 80040c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80040cc:	4906      	ldr	r1, [pc, #24]	; (80040e8 <__assert_func+0x34>)
 80040ce:	462b      	mov	r3, r5
 80040d0:	f000 f814 	bl	80040fc <fiprintf>
 80040d4:	f000 fcfe 	bl	8004ad4 <abort>
 80040d8:	4b04      	ldr	r3, [pc, #16]	; (80040ec <__assert_func+0x38>)
 80040da:	461c      	mov	r4, r3
 80040dc:	e7f3      	b.n	80040c6 <__assert_func+0x12>
 80040de:	bf00      	nop
 80040e0:	20001338 	.word	0x20001338
 80040e4:	080063a4 	.word	0x080063a4
 80040e8:	080063b1 	.word	0x080063b1
 80040ec:	080063df 	.word	0x080063df

080040f0 <__errno>:
 80040f0:	4b01      	ldr	r3, [pc, #4]	; (80040f8 <__errno+0x8>)
 80040f2:	6818      	ldr	r0, [r3, #0]
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	20001338 	.word	0x20001338

080040fc <fiprintf>:
 80040fc:	b40e      	push	{r1, r2, r3}
 80040fe:	b503      	push	{r0, r1, lr}
 8004100:	4601      	mov	r1, r0
 8004102:	ab03      	add	r3, sp, #12
 8004104:	4805      	ldr	r0, [pc, #20]	; (800411c <fiprintf+0x20>)
 8004106:	f853 2b04 	ldr.w	r2, [r3], #4
 800410a:	6800      	ldr	r0, [r0, #0]
 800410c:	9301      	str	r3, [sp, #4]
 800410e:	f000 f94d 	bl	80043ac <_vfiprintf_r>
 8004112:	b002      	add	sp, #8
 8004114:	f85d eb04 	ldr.w	lr, [sp], #4
 8004118:	b003      	add	sp, #12
 800411a:	4770      	bx	lr
 800411c:	20001338 	.word	0x20001338

08004120 <__libc_init_array>:
 8004120:	b570      	push	{r4, r5, r6, lr}
 8004122:	4d0d      	ldr	r5, [pc, #52]	; (8004158 <__libc_init_array+0x38>)
 8004124:	4c0d      	ldr	r4, [pc, #52]	; (800415c <__libc_init_array+0x3c>)
 8004126:	1b64      	subs	r4, r4, r5
 8004128:	10a4      	asrs	r4, r4, #2
 800412a:	2600      	movs	r6, #0
 800412c:	42a6      	cmp	r6, r4
 800412e:	d109      	bne.n	8004144 <__libc_init_array+0x24>
 8004130:	4d0b      	ldr	r5, [pc, #44]	; (8004160 <__libc_init_array+0x40>)
 8004132:	4c0c      	ldr	r4, [pc, #48]	; (8004164 <__libc_init_array+0x44>)
 8004134:	f002 f8b6 	bl	80062a4 <_init>
 8004138:	1b64      	subs	r4, r4, r5
 800413a:	10a4      	asrs	r4, r4, #2
 800413c:	2600      	movs	r6, #0
 800413e:	42a6      	cmp	r6, r4
 8004140:	d105      	bne.n	800414e <__libc_init_array+0x2e>
 8004142:	bd70      	pop	{r4, r5, r6, pc}
 8004144:	f855 3b04 	ldr.w	r3, [r5], #4
 8004148:	4798      	blx	r3
 800414a:	3601      	adds	r6, #1
 800414c:	e7ee      	b.n	800412c <__libc_init_array+0xc>
 800414e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004152:	4798      	blx	r3
 8004154:	3601      	adds	r6, #1
 8004156:	e7f2      	b.n	800413e <__libc_init_array+0x1e>
 8004158:	08006650 	.word	0x08006650
 800415c:	08006650 	.word	0x08006650
 8004160:	08006650 	.word	0x08006650
 8004164:	08006654 	.word	0x08006654

08004168 <malloc>:
 8004168:	4b02      	ldr	r3, [pc, #8]	; (8004174 <malloc+0xc>)
 800416a:	4601      	mov	r1, r0
 800416c:	6818      	ldr	r0, [r3, #0]
 800416e:	f000 b87f 	b.w	8004270 <_malloc_r>
 8004172:	bf00      	nop
 8004174:	20001338 	.word	0x20001338

08004178 <free>:
 8004178:	4b02      	ldr	r3, [pc, #8]	; (8004184 <free+0xc>)
 800417a:	4601      	mov	r1, r0
 800417c:	6818      	ldr	r0, [r3, #0]
 800417e:	f000 b80b 	b.w	8004198 <_free_r>
 8004182:	bf00      	nop
 8004184:	20001338 	.word	0x20001338

08004188 <memset>:
 8004188:	4402      	add	r2, r0
 800418a:	4603      	mov	r3, r0
 800418c:	4293      	cmp	r3, r2
 800418e:	d100      	bne.n	8004192 <memset+0xa>
 8004190:	4770      	bx	lr
 8004192:	f803 1b01 	strb.w	r1, [r3], #1
 8004196:	e7f9      	b.n	800418c <memset+0x4>

08004198 <_free_r>:
 8004198:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800419a:	2900      	cmp	r1, #0
 800419c:	d044      	beq.n	8004228 <_free_r+0x90>
 800419e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041a2:	9001      	str	r0, [sp, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f1a1 0404 	sub.w	r4, r1, #4
 80041aa:	bfb8      	it	lt
 80041ac:	18e4      	addlt	r4, r4, r3
 80041ae:	f000 feb9 	bl	8004f24 <__malloc_lock>
 80041b2:	4a1e      	ldr	r2, [pc, #120]	; (800422c <_free_r+0x94>)
 80041b4:	9801      	ldr	r0, [sp, #4]
 80041b6:	6813      	ldr	r3, [r2, #0]
 80041b8:	b933      	cbnz	r3, 80041c8 <_free_r+0x30>
 80041ba:	6063      	str	r3, [r4, #4]
 80041bc:	6014      	str	r4, [r2, #0]
 80041be:	b003      	add	sp, #12
 80041c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80041c4:	f000 beb4 	b.w	8004f30 <__malloc_unlock>
 80041c8:	42a3      	cmp	r3, r4
 80041ca:	d908      	bls.n	80041de <_free_r+0x46>
 80041cc:	6825      	ldr	r5, [r4, #0]
 80041ce:	1961      	adds	r1, r4, r5
 80041d0:	428b      	cmp	r3, r1
 80041d2:	bf01      	itttt	eq
 80041d4:	6819      	ldreq	r1, [r3, #0]
 80041d6:	685b      	ldreq	r3, [r3, #4]
 80041d8:	1949      	addeq	r1, r1, r5
 80041da:	6021      	streq	r1, [r4, #0]
 80041dc:	e7ed      	b.n	80041ba <_free_r+0x22>
 80041de:	461a      	mov	r2, r3
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	b10b      	cbz	r3, 80041e8 <_free_r+0x50>
 80041e4:	42a3      	cmp	r3, r4
 80041e6:	d9fa      	bls.n	80041de <_free_r+0x46>
 80041e8:	6811      	ldr	r1, [r2, #0]
 80041ea:	1855      	adds	r5, r2, r1
 80041ec:	42a5      	cmp	r5, r4
 80041ee:	d10b      	bne.n	8004208 <_free_r+0x70>
 80041f0:	6824      	ldr	r4, [r4, #0]
 80041f2:	4421      	add	r1, r4
 80041f4:	1854      	adds	r4, r2, r1
 80041f6:	42a3      	cmp	r3, r4
 80041f8:	6011      	str	r1, [r2, #0]
 80041fa:	d1e0      	bne.n	80041be <_free_r+0x26>
 80041fc:	681c      	ldr	r4, [r3, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	6053      	str	r3, [r2, #4]
 8004202:	4421      	add	r1, r4
 8004204:	6011      	str	r1, [r2, #0]
 8004206:	e7da      	b.n	80041be <_free_r+0x26>
 8004208:	d902      	bls.n	8004210 <_free_r+0x78>
 800420a:	230c      	movs	r3, #12
 800420c:	6003      	str	r3, [r0, #0]
 800420e:	e7d6      	b.n	80041be <_free_r+0x26>
 8004210:	6825      	ldr	r5, [r4, #0]
 8004212:	1961      	adds	r1, r4, r5
 8004214:	428b      	cmp	r3, r1
 8004216:	bf04      	itt	eq
 8004218:	6819      	ldreq	r1, [r3, #0]
 800421a:	685b      	ldreq	r3, [r3, #4]
 800421c:	6063      	str	r3, [r4, #4]
 800421e:	bf04      	itt	eq
 8004220:	1949      	addeq	r1, r1, r5
 8004222:	6021      	streq	r1, [r4, #0]
 8004224:	6054      	str	r4, [r2, #4]
 8004226:	e7ca      	b.n	80041be <_free_r+0x26>
 8004228:	b003      	add	sp, #12
 800422a:	bd30      	pop	{r4, r5, pc}
 800422c:	20001aa4 	.word	0x20001aa4

08004230 <sbrk_aligned>:
 8004230:	b570      	push	{r4, r5, r6, lr}
 8004232:	4e0e      	ldr	r6, [pc, #56]	; (800426c <sbrk_aligned+0x3c>)
 8004234:	460c      	mov	r4, r1
 8004236:	6831      	ldr	r1, [r6, #0]
 8004238:	4605      	mov	r5, r0
 800423a:	b911      	cbnz	r1, 8004242 <sbrk_aligned+0x12>
 800423c:	f000 fb7a 	bl	8004934 <_sbrk_r>
 8004240:	6030      	str	r0, [r6, #0]
 8004242:	4621      	mov	r1, r4
 8004244:	4628      	mov	r0, r5
 8004246:	f000 fb75 	bl	8004934 <_sbrk_r>
 800424a:	1c43      	adds	r3, r0, #1
 800424c:	d00a      	beq.n	8004264 <sbrk_aligned+0x34>
 800424e:	1cc4      	adds	r4, r0, #3
 8004250:	f024 0403 	bic.w	r4, r4, #3
 8004254:	42a0      	cmp	r0, r4
 8004256:	d007      	beq.n	8004268 <sbrk_aligned+0x38>
 8004258:	1a21      	subs	r1, r4, r0
 800425a:	4628      	mov	r0, r5
 800425c:	f000 fb6a 	bl	8004934 <_sbrk_r>
 8004260:	3001      	adds	r0, #1
 8004262:	d101      	bne.n	8004268 <sbrk_aligned+0x38>
 8004264:	f04f 34ff 	mov.w	r4, #4294967295
 8004268:	4620      	mov	r0, r4
 800426a:	bd70      	pop	{r4, r5, r6, pc}
 800426c:	20001aa8 	.word	0x20001aa8

08004270 <_malloc_r>:
 8004270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004274:	1ccd      	adds	r5, r1, #3
 8004276:	f025 0503 	bic.w	r5, r5, #3
 800427a:	3508      	adds	r5, #8
 800427c:	2d0c      	cmp	r5, #12
 800427e:	bf38      	it	cc
 8004280:	250c      	movcc	r5, #12
 8004282:	2d00      	cmp	r5, #0
 8004284:	4607      	mov	r7, r0
 8004286:	db01      	blt.n	800428c <_malloc_r+0x1c>
 8004288:	42a9      	cmp	r1, r5
 800428a:	d905      	bls.n	8004298 <_malloc_r+0x28>
 800428c:	230c      	movs	r3, #12
 800428e:	603b      	str	r3, [r7, #0]
 8004290:	2600      	movs	r6, #0
 8004292:	4630      	mov	r0, r6
 8004294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004298:	4e2e      	ldr	r6, [pc, #184]	; (8004354 <_malloc_r+0xe4>)
 800429a:	f000 fe43 	bl	8004f24 <__malloc_lock>
 800429e:	6833      	ldr	r3, [r6, #0]
 80042a0:	461c      	mov	r4, r3
 80042a2:	bb34      	cbnz	r4, 80042f2 <_malloc_r+0x82>
 80042a4:	4629      	mov	r1, r5
 80042a6:	4638      	mov	r0, r7
 80042a8:	f7ff ffc2 	bl	8004230 <sbrk_aligned>
 80042ac:	1c43      	adds	r3, r0, #1
 80042ae:	4604      	mov	r4, r0
 80042b0:	d14d      	bne.n	800434e <_malloc_r+0xde>
 80042b2:	6834      	ldr	r4, [r6, #0]
 80042b4:	4626      	mov	r6, r4
 80042b6:	2e00      	cmp	r6, #0
 80042b8:	d140      	bne.n	800433c <_malloc_r+0xcc>
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	4631      	mov	r1, r6
 80042be:	4638      	mov	r0, r7
 80042c0:	eb04 0803 	add.w	r8, r4, r3
 80042c4:	f000 fb36 	bl	8004934 <_sbrk_r>
 80042c8:	4580      	cmp	r8, r0
 80042ca:	d13a      	bne.n	8004342 <_malloc_r+0xd2>
 80042cc:	6821      	ldr	r1, [r4, #0]
 80042ce:	3503      	adds	r5, #3
 80042d0:	1a6d      	subs	r5, r5, r1
 80042d2:	f025 0503 	bic.w	r5, r5, #3
 80042d6:	3508      	adds	r5, #8
 80042d8:	2d0c      	cmp	r5, #12
 80042da:	bf38      	it	cc
 80042dc:	250c      	movcc	r5, #12
 80042de:	4629      	mov	r1, r5
 80042e0:	4638      	mov	r0, r7
 80042e2:	f7ff ffa5 	bl	8004230 <sbrk_aligned>
 80042e6:	3001      	adds	r0, #1
 80042e8:	d02b      	beq.n	8004342 <_malloc_r+0xd2>
 80042ea:	6823      	ldr	r3, [r4, #0]
 80042ec:	442b      	add	r3, r5
 80042ee:	6023      	str	r3, [r4, #0]
 80042f0:	e00e      	b.n	8004310 <_malloc_r+0xa0>
 80042f2:	6822      	ldr	r2, [r4, #0]
 80042f4:	1b52      	subs	r2, r2, r5
 80042f6:	d41e      	bmi.n	8004336 <_malloc_r+0xc6>
 80042f8:	2a0b      	cmp	r2, #11
 80042fa:	d916      	bls.n	800432a <_malloc_r+0xba>
 80042fc:	1961      	adds	r1, r4, r5
 80042fe:	42a3      	cmp	r3, r4
 8004300:	6025      	str	r5, [r4, #0]
 8004302:	bf18      	it	ne
 8004304:	6059      	strne	r1, [r3, #4]
 8004306:	6863      	ldr	r3, [r4, #4]
 8004308:	bf08      	it	eq
 800430a:	6031      	streq	r1, [r6, #0]
 800430c:	5162      	str	r2, [r4, r5]
 800430e:	604b      	str	r3, [r1, #4]
 8004310:	4638      	mov	r0, r7
 8004312:	f104 060b 	add.w	r6, r4, #11
 8004316:	f000 fe0b 	bl	8004f30 <__malloc_unlock>
 800431a:	f026 0607 	bic.w	r6, r6, #7
 800431e:	1d23      	adds	r3, r4, #4
 8004320:	1af2      	subs	r2, r6, r3
 8004322:	d0b6      	beq.n	8004292 <_malloc_r+0x22>
 8004324:	1b9b      	subs	r3, r3, r6
 8004326:	50a3      	str	r3, [r4, r2]
 8004328:	e7b3      	b.n	8004292 <_malloc_r+0x22>
 800432a:	6862      	ldr	r2, [r4, #4]
 800432c:	42a3      	cmp	r3, r4
 800432e:	bf0c      	ite	eq
 8004330:	6032      	streq	r2, [r6, #0]
 8004332:	605a      	strne	r2, [r3, #4]
 8004334:	e7ec      	b.n	8004310 <_malloc_r+0xa0>
 8004336:	4623      	mov	r3, r4
 8004338:	6864      	ldr	r4, [r4, #4]
 800433a:	e7b2      	b.n	80042a2 <_malloc_r+0x32>
 800433c:	4634      	mov	r4, r6
 800433e:	6876      	ldr	r6, [r6, #4]
 8004340:	e7b9      	b.n	80042b6 <_malloc_r+0x46>
 8004342:	230c      	movs	r3, #12
 8004344:	603b      	str	r3, [r7, #0]
 8004346:	4638      	mov	r0, r7
 8004348:	f000 fdf2 	bl	8004f30 <__malloc_unlock>
 800434c:	e7a1      	b.n	8004292 <_malloc_r+0x22>
 800434e:	6025      	str	r5, [r4, #0]
 8004350:	e7de      	b.n	8004310 <_malloc_r+0xa0>
 8004352:	bf00      	nop
 8004354:	20001aa4 	.word	0x20001aa4

08004358 <__sfputc_r>:
 8004358:	6893      	ldr	r3, [r2, #8]
 800435a:	3b01      	subs	r3, #1
 800435c:	2b00      	cmp	r3, #0
 800435e:	b410      	push	{r4}
 8004360:	6093      	str	r3, [r2, #8]
 8004362:	da08      	bge.n	8004376 <__sfputc_r+0x1e>
 8004364:	6994      	ldr	r4, [r2, #24]
 8004366:	42a3      	cmp	r3, r4
 8004368:	db01      	blt.n	800436e <__sfputc_r+0x16>
 800436a:	290a      	cmp	r1, #10
 800436c:	d103      	bne.n	8004376 <__sfputc_r+0x1e>
 800436e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004372:	f000 baef 	b.w	8004954 <__swbuf_r>
 8004376:	6813      	ldr	r3, [r2, #0]
 8004378:	1c58      	adds	r0, r3, #1
 800437a:	6010      	str	r0, [r2, #0]
 800437c:	7019      	strb	r1, [r3, #0]
 800437e:	4608      	mov	r0, r1
 8004380:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004384:	4770      	bx	lr

08004386 <__sfputs_r>:
 8004386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004388:	4606      	mov	r6, r0
 800438a:	460f      	mov	r7, r1
 800438c:	4614      	mov	r4, r2
 800438e:	18d5      	adds	r5, r2, r3
 8004390:	42ac      	cmp	r4, r5
 8004392:	d101      	bne.n	8004398 <__sfputs_r+0x12>
 8004394:	2000      	movs	r0, #0
 8004396:	e007      	b.n	80043a8 <__sfputs_r+0x22>
 8004398:	f814 1b01 	ldrb.w	r1, [r4], #1
 800439c:	463a      	mov	r2, r7
 800439e:	4630      	mov	r0, r6
 80043a0:	f7ff ffda 	bl	8004358 <__sfputc_r>
 80043a4:	1c43      	adds	r3, r0, #1
 80043a6:	d1f3      	bne.n	8004390 <__sfputs_r+0xa>
 80043a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080043ac <_vfiprintf_r>:
 80043ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043b0:	460d      	mov	r5, r1
 80043b2:	b09d      	sub	sp, #116	; 0x74
 80043b4:	4614      	mov	r4, r2
 80043b6:	4698      	mov	r8, r3
 80043b8:	4606      	mov	r6, r0
 80043ba:	b118      	cbz	r0, 80043c4 <_vfiprintf_r+0x18>
 80043bc:	6983      	ldr	r3, [r0, #24]
 80043be:	b90b      	cbnz	r3, 80043c4 <_vfiprintf_r+0x18>
 80043c0:	f000 fcaa 	bl	8004d18 <__sinit>
 80043c4:	4b89      	ldr	r3, [pc, #548]	; (80045ec <_vfiprintf_r+0x240>)
 80043c6:	429d      	cmp	r5, r3
 80043c8:	d11b      	bne.n	8004402 <_vfiprintf_r+0x56>
 80043ca:	6875      	ldr	r5, [r6, #4]
 80043cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043ce:	07d9      	lsls	r1, r3, #31
 80043d0:	d405      	bmi.n	80043de <_vfiprintf_r+0x32>
 80043d2:	89ab      	ldrh	r3, [r5, #12]
 80043d4:	059a      	lsls	r2, r3, #22
 80043d6:	d402      	bmi.n	80043de <_vfiprintf_r+0x32>
 80043d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80043da:	f000 fd3b 	bl	8004e54 <__retarget_lock_acquire_recursive>
 80043de:	89ab      	ldrh	r3, [r5, #12]
 80043e0:	071b      	lsls	r3, r3, #28
 80043e2:	d501      	bpl.n	80043e8 <_vfiprintf_r+0x3c>
 80043e4:	692b      	ldr	r3, [r5, #16]
 80043e6:	b9eb      	cbnz	r3, 8004424 <_vfiprintf_r+0x78>
 80043e8:	4629      	mov	r1, r5
 80043ea:	4630      	mov	r0, r6
 80043ec:	f000 fb04 	bl	80049f8 <__swsetup_r>
 80043f0:	b1c0      	cbz	r0, 8004424 <_vfiprintf_r+0x78>
 80043f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043f4:	07dc      	lsls	r4, r3, #31
 80043f6:	d50e      	bpl.n	8004416 <_vfiprintf_r+0x6a>
 80043f8:	f04f 30ff 	mov.w	r0, #4294967295
 80043fc:	b01d      	add	sp, #116	; 0x74
 80043fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004402:	4b7b      	ldr	r3, [pc, #492]	; (80045f0 <_vfiprintf_r+0x244>)
 8004404:	429d      	cmp	r5, r3
 8004406:	d101      	bne.n	800440c <_vfiprintf_r+0x60>
 8004408:	68b5      	ldr	r5, [r6, #8]
 800440a:	e7df      	b.n	80043cc <_vfiprintf_r+0x20>
 800440c:	4b79      	ldr	r3, [pc, #484]	; (80045f4 <_vfiprintf_r+0x248>)
 800440e:	429d      	cmp	r5, r3
 8004410:	bf08      	it	eq
 8004412:	68f5      	ldreq	r5, [r6, #12]
 8004414:	e7da      	b.n	80043cc <_vfiprintf_r+0x20>
 8004416:	89ab      	ldrh	r3, [r5, #12]
 8004418:	0598      	lsls	r0, r3, #22
 800441a:	d4ed      	bmi.n	80043f8 <_vfiprintf_r+0x4c>
 800441c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800441e:	f000 fd1a 	bl	8004e56 <__retarget_lock_release_recursive>
 8004422:	e7e9      	b.n	80043f8 <_vfiprintf_r+0x4c>
 8004424:	2300      	movs	r3, #0
 8004426:	9309      	str	r3, [sp, #36]	; 0x24
 8004428:	2320      	movs	r3, #32
 800442a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800442e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004432:	2330      	movs	r3, #48	; 0x30
 8004434:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80045f8 <_vfiprintf_r+0x24c>
 8004438:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800443c:	f04f 0901 	mov.w	r9, #1
 8004440:	4623      	mov	r3, r4
 8004442:	469a      	mov	sl, r3
 8004444:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004448:	b10a      	cbz	r2, 800444e <_vfiprintf_r+0xa2>
 800444a:	2a25      	cmp	r2, #37	; 0x25
 800444c:	d1f9      	bne.n	8004442 <_vfiprintf_r+0x96>
 800444e:	ebba 0b04 	subs.w	fp, sl, r4
 8004452:	d00b      	beq.n	800446c <_vfiprintf_r+0xc0>
 8004454:	465b      	mov	r3, fp
 8004456:	4622      	mov	r2, r4
 8004458:	4629      	mov	r1, r5
 800445a:	4630      	mov	r0, r6
 800445c:	f7ff ff93 	bl	8004386 <__sfputs_r>
 8004460:	3001      	adds	r0, #1
 8004462:	f000 80aa 	beq.w	80045ba <_vfiprintf_r+0x20e>
 8004466:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004468:	445a      	add	r2, fp
 800446a:	9209      	str	r2, [sp, #36]	; 0x24
 800446c:	f89a 3000 	ldrb.w	r3, [sl]
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 80a2 	beq.w	80045ba <_vfiprintf_r+0x20e>
 8004476:	2300      	movs	r3, #0
 8004478:	f04f 32ff 	mov.w	r2, #4294967295
 800447c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004480:	f10a 0a01 	add.w	sl, sl, #1
 8004484:	9304      	str	r3, [sp, #16]
 8004486:	9307      	str	r3, [sp, #28]
 8004488:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800448c:	931a      	str	r3, [sp, #104]	; 0x68
 800448e:	4654      	mov	r4, sl
 8004490:	2205      	movs	r2, #5
 8004492:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004496:	4858      	ldr	r0, [pc, #352]	; (80045f8 <_vfiprintf_r+0x24c>)
 8004498:	f7fb fe9a 	bl	80001d0 <memchr>
 800449c:	9a04      	ldr	r2, [sp, #16]
 800449e:	b9d8      	cbnz	r0, 80044d8 <_vfiprintf_r+0x12c>
 80044a0:	06d1      	lsls	r1, r2, #27
 80044a2:	bf44      	itt	mi
 80044a4:	2320      	movmi	r3, #32
 80044a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044aa:	0713      	lsls	r3, r2, #28
 80044ac:	bf44      	itt	mi
 80044ae:	232b      	movmi	r3, #43	; 0x2b
 80044b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044b4:	f89a 3000 	ldrb.w	r3, [sl]
 80044b8:	2b2a      	cmp	r3, #42	; 0x2a
 80044ba:	d015      	beq.n	80044e8 <_vfiprintf_r+0x13c>
 80044bc:	9a07      	ldr	r2, [sp, #28]
 80044be:	4654      	mov	r4, sl
 80044c0:	2000      	movs	r0, #0
 80044c2:	f04f 0c0a 	mov.w	ip, #10
 80044c6:	4621      	mov	r1, r4
 80044c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044cc:	3b30      	subs	r3, #48	; 0x30
 80044ce:	2b09      	cmp	r3, #9
 80044d0:	d94e      	bls.n	8004570 <_vfiprintf_r+0x1c4>
 80044d2:	b1b0      	cbz	r0, 8004502 <_vfiprintf_r+0x156>
 80044d4:	9207      	str	r2, [sp, #28]
 80044d6:	e014      	b.n	8004502 <_vfiprintf_r+0x156>
 80044d8:	eba0 0308 	sub.w	r3, r0, r8
 80044dc:	fa09 f303 	lsl.w	r3, r9, r3
 80044e0:	4313      	orrs	r3, r2
 80044e2:	9304      	str	r3, [sp, #16]
 80044e4:	46a2      	mov	sl, r4
 80044e6:	e7d2      	b.n	800448e <_vfiprintf_r+0xe2>
 80044e8:	9b03      	ldr	r3, [sp, #12]
 80044ea:	1d19      	adds	r1, r3, #4
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	9103      	str	r1, [sp, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	bfbb      	ittet	lt
 80044f4:	425b      	neglt	r3, r3
 80044f6:	f042 0202 	orrlt.w	r2, r2, #2
 80044fa:	9307      	strge	r3, [sp, #28]
 80044fc:	9307      	strlt	r3, [sp, #28]
 80044fe:	bfb8      	it	lt
 8004500:	9204      	strlt	r2, [sp, #16]
 8004502:	7823      	ldrb	r3, [r4, #0]
 8004504:	2b2e      	cmp	r3, #46	; 0x2e
 8004506:	d10c      	bne.n	8004522 <_vfiprintf_r+0x176>
 8004508:	7863      	ldrb	r3, [r4, #1]
 800450a:	2b2a      	cmp	r3, #42	; 0x2a
 800450c:	d135      	bne.n	800457a <_vfiprintf_r+0x1ce>
 800450e:	9b03      	ldr	r3, [sp, #12]
 8004510:	1d1a      	adds	r2, r3, #4
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	9203      	str	r2, [sp, #12]
 8004516:	2b00      	cmp	r3, #0
 8004518:	bfb8      	it	lt
 800451a:	f04f 33ff 	movlt.w	r3, #4294967295
 800451e:	3402      	adds	r4, #2
 8004520:	9305      	str	r3, [sp, #20]
 8004522:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004608 <_vfiprintf_r+0x25c>
 8004526:	7821      	ldrb	r1, [r4, #0]
 8004528:	2203      	movs	r2, #3
 800452a:	4650      	mov	r0, sl
 800452c:	f7fb fe50 	bl	80001d0 <memchr>
 8004530:	b140      	cbz	r0, 8004544 <_vfiprintf_r+0x198>
 8004532:	2340      	movs	r3, #64	; 0x40
 8004534:	eba0 000a 	sub.w	r0, r0, sl
 8004538:	fa03 f000 	lsl.w	r0, r3, r0
 800453c:	9b04      	ldr	r3, [sp, #16]
 800453e:	4303      	orrs	r3, r0
 8004540:	3401      	adds	r4, #1
 8004542:	9304      	str	r3, [sp, #16]
 8004544:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004548:	482c      	ldr	r0, [pc, #176]	; (80045fc <_vfiprintf_r+0x250>)
 800454a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800454e:	2206      	movs	r2, #6
 8004550:	f7fb fe3e 	bl	80001d0 <memchr>
 8004554:	2800      	cmp	r0, #0
 8004556:	d03f      	beq.n	80045d8 <_vfiprintf_r+0x22c>
 8004558:	4b29      	ldr	r3, [pc, #164]	; (8004600 <_vfiprintf_r+0x254>)
 800455a:	bb1b      	cbnz	r3, 80045a4 <_vfiprintf_r+0x1f8>
 800455c:	9b03      	ldr	r3, [sp, #12]
 800455e:	3307      	adds	r3, #7
 8004560:	f023 0307 	bic.w	r3, r3, #7
 8004564:	3308      	adds	r3, #8
 8004566:	9303      	str	r3, [sp, #12]
 8004568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800456a:	443b      	add	r3, r7
 800456c:	9309      	str	r3, [sp, #36]	; 0x24
 800456e:	e767      	b.n	8004440 <_vfiprintf_r+0x94>
 8004570:	fb0c 3202 	mla	r2, ip, r2, r3
 8004574:	460c      	mov	r4, r1
 8004576:	2001      	movs	r0, #1
 8004578:	e7a5      	b.n	80044c6 <_vfiprintf_r+0x11a>
 800457a:	2300      	movs	r3, #0
 800457c:	3401      	adds	r4, #1
 800457e:	9305      	str	r3, [sp, #20]
 8004580:	4619      	mov	r1, r3
 8004582:	f04f 0c0a 	mov.w	ip, #10
 8004586:	4620      	mov	r0, r4
 8004588:	f810 2b01 	ldrb.w	r2, [r0], #1
 800458c:	3a30      	subs	r2, #48	; 0x30
 800458e:	2a09      	cmp	r2, #9
 8004590:	d903      	bls.n	800459a <_vfiprintf_r+0x1ee>
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0c5      	beq.n	8004522 <_vfiprintf_r+0x176>
 8004596:	9105      	str	r1, [sp, #20]
 8004598:	e7c3      	b.n	8004522 <_vfiprintf_r+0x176>
 800459a:	fb0c 2101 	mla	r1, ip, r1, r2
 800459e:	4604      	mov	r4, r0
 80045a0:	2301      	movs	r3, #1
 80045a2:	e7f0      	b.n	8004586 <_vfiprintf_r+0x1da>
 80045a4:	ab03      	add	r3, sp, #12
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	462a      	mov	r2, r5
 80045aa:	4b16      	ldr	r3, [pc, #88]	; (8004604 <_vfiprintf_r+0x258>)
 80045ac:	a904      	add	r1, sp, #16
 80045ae:	4630      	mov	r0, r6
 80045b0:	f3af 8000 	nop.w
 80045b4:	4607      	mov	r7, r0
 80045b6:	1c78      	adds	r0, r7, #1
 80045b8:	d1d6      	bne.n	8004568 <_vfiprintf_r+0x1bc>
 80045ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045bc:	07d9      	lsls	r1, r3, #31
 80045be:	d405      	bmi.n	80045cc <_vfiprintf_r+0x220>
 80045c0:	89ab      	ldrh	r3, [r5, #12]
 80045c2:	059a      	lsls	r2, r3, #22
 80045c4:	d402      	bmi.n	80045cc <_vfiprintf_r+0x220>
 80045c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045c8:	f000 fc45 	bl	8004e56 <__retarget_lock_release_recursive>
 80045cc:	89ab      	ldrh	r3, [r5, #12]
 80045ce:	065b      	lsls	r3, r3, #25
 80045d0:	f53f af12 	bmi.w	80043f8 <_vfiprintf_r+0x4c>
 80045d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045d6:	e711      	b.n	80043fc <_vfiprintf_r+0x50>
 80045d8:	ab03      	add	r3, sp, #12
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	462a      	mov	r2, r5
 80045de:	4b09      	ldr	r3, [pc, #36]	; (8004604 <_vfiprintf_r+0x258>)
 80045e0:	a904      	add	r1, sp, #16
 80045e2:	4630      	mov	r0, r6
 80045e4:	f000 f880 	bl	80046e8 <_printf_i>
 80045e8:	e7e4      	b.n	80045b4 <_vfiprintf_r+0x208>
 80045ea:	bf00      	nop
 80045ec:	08006438 	.word	0x08006438
 80045f0:	08006458 	.word	0x08006458
 80045f4:	08006418 	.word	0x08006418
 80045f8:	080063e4 	.word	0x080063e4
 80045fc:	080063ee 	.word	0x080063ee
 8004600:	00000000 	.word	0x00000000
 8004604:	08004387 	.word	0x08004387
 8004608:	080063ea 	.word	0x080063ea

0800460c <_printf_common>:
 800460c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004610:	4616      	mov	r6, r2
 8004612:	4699      	mov	r9, r3
 8004614:	688a      	ldr	r2, [r1, #8]
 8004616:	690b      	ldr	r3, [r1, #16]
 8004618:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800461c:	4293      	cmp	r3, r2
 800461e:	bfb8      	it	lt
 8004620:	4613      	movlt	r3, r2
 8004622:	6033      	str	r3, [r6, #0]
 8004624:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004628:	4607      	mov	r7, r0
 800462a:	460c      	mov	r4, r1
 800462c:	b10a      	cbz	r2, 8004632 <_printf_common+0x26>
 800462e:	3301      	adds	r3, #1
 8004630:	6033      	str	r3, [r6, #0]
 8004632:	6823      	ldr	r3, [r4, #0]
 8004634:	0699      	lsls	r1, r3, #26
 8004636:	bf42      	ittt	mi
 8004638:	6833      	ldrmi	r3, [r6, #0]
 800463a:	3302      	addmi	r3, #2
 800463c:	6033      	strmi	r3, [r6, #0]
 800463e:	6825      	ldr	r5, [r4, #0]
 8004640:	f015 0506 	ands.w	r5, r5, #6
 8004644:	d106      	bne.n	8004654 <_printf_common+0x48>
 8004646:	f104 0a19 	add.w	sl, r4, #25
 800464a:	68e3      	ldr	r3, [r4, #12]
 800464c:	6832      	ldr	r2, [r6, #0]
 800464e:	1a9b      	subs	r3, r3, r2
 8004650:	42ab      	cmp	r3, r5
 8004652:	dc26      	bgt.n	80046a2 <_printf_common+0x96>
 8004654:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004658:	1e13      	subs	r3, r2, #0
 800465a:	6822      	ldr	r2, [r4, #0]
 800465c:	bf18      	it	ne
 800465e:	2301      	movne	r3, #1
 8004660:	0692      	lsls	r2, r2, #26
 8004662:	d42b      	bmi.n	80046bc <_printf_common+0xb0>
 8004664:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004668:	4649      	mov	r1, r9
 800466a:	4638      	mov	r0, r7
 800466c:	47c0      	blx	r8
 800466e:	3001      	adds	r0, #1
 8004670:	d01e      	beq.n	80046b0 <_printf_common+0xa4>
 8004672:	6823      	ldr	r3, [r4, #0]
 8004674:	68e5      	ldr	r5, [r4, #12]
 8004676:	6832      	ldr	r2, [r6, #0]
 8004678:	f003 0306 	and.w	r3, r3, #6
 800467c:	2b04      	cmp	r3, #4
 800467e:	bf08      	it	eq
 8004680:	1aad      	subeq	r5, r5, r2
 8004682:	68a3      	ldr	r3, [r4, #8]
 8004684:	6922      	ldr	r2, [r4, #16]
 8004686:	bf0c      	ite	eq
 8004688:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800468c:	2500      	movne	r5, #0
 800468e:	4293      	cmp	r3, r2
 8004690:	bfc4      	itt	gt
 8004692:	1a9b      	subgt	r3, r3, r2
 8004694:	18ed      	addgt	r5, r5, r3
 8004696:	2600      	movs	r6, #0
 8004698:	341a      	adds	r4, #26
 800469a:	42b5      	cmp	r5, r6
 800469c:	d11a      	bne.n	80046d4 <_printf_common+0xc8>
 800469e:	2000      	movs	r0, #0
 80046a0:	e008      	b.n	80046b4 <_printf_common+0xa8>
 80046a2:	2301      	movs	r3, #1
 80046a4:	4652      	mov	r2, sl
 80046a6:	4649      	mov	r1, r9
 80046a8:	4638      	mov	r0, r7
 80046aa:	47c0      	blx	r8
 80046ac:	3001      	adds	r0, #1
 80046ae:	d103      	bne.n	80046b8 <_printf_common+0xac>
 80046b0:	f04f 30ff 	mov.w	r0, #4294967295
 80046b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046b8:	3501      	adds	r5, #1
 80046ba:	e7c6      	b.n	800464a <_printf_common+0x3e>
 80046bc:	18e1      	adds	r1, r4, r3
 80046be:	1c5a      	adds	r2, r3, #1
 80046c0:	2030      	movs	r0, #48	; 0x30
 80046c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046c6:	4422      	add	r2, r4
 80046c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046d0:	3302      	adds	r3, #2
 80046d2:	e7c7      	b.n	8004664 <_printf_common+0x58>
 80046d4:	2301      	movs	r3, #1
 80046d6:	4622      	mov	r2, r4
 80046d8:	4649      	mov	r1, r9
 80046da:	4638      	mov	r0, r7
 80046dc:	47c0      	blx	r8
 80046de:	3001      	adds	r0, #1
 80046e0:	d0e6      	beq.n	80046b0 <_printf_common+0xa4>
 80046e2:	3601      	adds	r6, #1
 80046e4:	e7d9      	b.n	800469a <_printf_common+0x8e>
	...

080046e8 <_printf_i>:
 80046e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046ec:	7e0f      	ldrb	r7, [r1, #24]
 80046ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80046f0:	2f78      	cmp	r7, #120	; 0x78
 80046f2:	4691      	mov	r9, r2
 80046f4:	4680      	mov	r8, r0
 80046f6:	460c      	mov	r4, r1
 80046f8:	469a      	mov	sl, r3
 80046fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80046fe:	d807      	bhi.n	8004710 <_printf_i+0x28>
 8004700:	2f62      	cmp	r7, #98	; 0x62
 8004702:	d80a      	bhi.n	800471a <_printf_i+0x32>
 8004704:	2f00      	cmp	r7, #0
 8004706:	f000 80d8 	beq.w	80048ba <_printf_i+0x1d2>
 800470a:	2f58      	cmp	r7, #88	; 0x58
 800470c:	f000 80a3 	beq.w	8004856 <_printf_i+0x16e>
 8004710:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004714:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004718:	e03a      	b.n	8004790 <_printf_i+0xa8>
 800471a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800471e:	2b15      	cmp	r3, #21
 8004720:	d8f6      	bhi.n	8004710 <_printf_i+0x28>
 8004722:	a101      	add	r1, pc, #4	; (adr r1, 8004728 <_printf_i+0x40>)
 8004724:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004728:	08004781 	.word	0x08004781
 800472c:	08004795 	.word	0x08004795
 8004730:	08004711 	.word	0x08004711
 8004734:	08004711 	.word	0x08004711
 8004738:	08004711 	.word	0x08004711
 800473c:	08004711 	.word	0x08004711
 8004740:	08004795 	.word	0x08004795
 8004744:	08004711 	.word	0x08004711
 8004748:	08004711 	.word	0x08004711
 800474c:	08004711 	.word	0x08004711
 8004750:	08004711 	.word	0x08004711
 8004754:	080048a1 	.word	0x080048a1
 8004758:	080047c5 	.word	0x080047c5
 800475c:	08004883 	.word	0x08004883
 8004760:	08004711 	.word	0x08004711
 8004764:	08004711 	.word	0x08004711
 8004768:	080048c3 	.word	0x080048c3
 800476c:	08004711 	.word	0x08004711
 8004770:	080047c5 	.word	0x080047c5
 8004774:	08004711 	.word	0x08004711
 8004778:	08004711 	.word	0x08004711
 800477c:	0800488b 	.word	0x0800488b
 8004780:	682b      	ldr	r3, [r5, #0]
 8004782:	1d1a      	adds	r2, r3, #4
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	602a      	str	r2, [r5, #0]
 8004788:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800478c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004790:	2301      	movs	r3, #1
 8004792:	e0a3      	b.n	80048dc <_printf_i+0x1f4>
 8004794:	6820      	ldr	r0, [r4, #0]
 8004796:	6829      	ldr	r1, [r5, #0]
 8004798:	0606      	lsls	r6, r0, #24
 800479a:	f101 0304 	add.w	r3, r1, #4
 800479e:	d50a      	bpl.n	80047b6 <_printf_i+0xce>
 80047a0:	680e      	ldr	r6, [r1, #0]
 80047a2:	602b      	str	r3, [r5, #0]
 80047a4:	2e00      	cmp	r6, #0
 80047a6:	da03      	bge.n	80047b0 <_printf_i+0xc8>
 80047a8:	232d      	movs	r3, #45	; 0x2d
 80047aa:	4276      	negs	r6, r6
 80047ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047b0:	485e      	ldr	r0, [pc, #376]	; (800492c <_printf_i+0x244>)
 80047b2:	230a      	movs	r3, #10
 80047b4:	e019      	b.n	80047ea <_printf_i+0x102>
 80047b6:	680e      	ldr	r6, [r1, #0]
 80047b8:	602b      	str	r3, [r5, #0]
 80047ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80047be:	bf18      	it	ne
 80047c0:	b236      	sxthne	r6, r6
 80047c2:	e7ef      	b.n	80047a4 <_printf_i+0xbc>
 80047c4:	682b      	ldr	r3, [r5, #0]
 80047c6:	6820      	ldr	r0, [r4, #0]
 80047c8:	1d19      	adds	r1, r3, #4
 80047ca:	6029      	str	r1, [r5, #0]
 80047cc:	0601      	lsls	r1, r0, #24
 80047ce:	d501      	bpl.n	80047d4 <_printf_i+0xec>
 80047d0:	681e      	ldr	r6, [r3, #0]
 80047d2:	e002      	b.n	80047da <_printf_i+0xf2>
 80047d4:	0646      	lsls	r6, r0, #25
 80047d6:	d5fb      	bpl.n	80047d0 <_printf_i+0xe8>
 80047d8:	881e      	ldrh	r6, [r3, #0]
 80047da:	4854      	ldr	r0, [pc, #336]	; (800492c <_printf_i+0x244>)
 80047dc:	2f6f      	cmp	r7, #111	; 0x6f
 80047de:	bf0c      	ite	eq
 80047e0:	2308      	moveq	r3, #8
 80047e2:	230a      	movne	r3, #10
 80047e4:	2100      	movs	r1, #0
 80047e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047ea:	6865      	ldr	r5, [r4, #4]
 80047ec:	60a5      	str	r5, [r4, #8]
 80047ee:	2d00      	cmp	r5, #0
 80047f0:	bfa2      	ittt	ge
 80047f2:	6821      	ldrge	r1, [r4, #0]
 80047f4:	f021 0104 	bicge.w	r1, r1, #4
 80047f8:	6021      	strge	r1, [r4, #0]
 80047fa:	b90e      	cbnz	r6, 8004800 <_printf_i+0x118>
 80047fc:	2d00      	cmp	r5, #0
 80047fe:	d04d      	beq.n	800489c <_printf_i+0x1b4>
 8004800:	4615      	mov	r5, r2
 8004802:	fbb6 f1f3 	udiv	r1, r6, r3
 8004806:	fb03 6711 	mls	r7, r3, r1, r6
 800480a:	5dc7      	ldrb	r7, [r0, r7]
 800480c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004810:	4637      	mov	r7, r6
 8004812:	42bb      	cmp	r3, r7
 8004814:	460e      	mov	r6, r1
 8004816:	d9f4      	bls.n	8004802 <_printf_i+0x11a>
 8004818:	2b08      	cmp	r3, #8
 800481a:	d10b      	bne.n	8004834 <_printf_i+0x14c>
 800481c:	6823      	ldr	r3, [r4, #0]
 800481e:	07de      	lsls	r6, r3, #31
 8004820:	d508      	bpl.n	8004834 <_printf_i+0x14c>
 8004822:	6923      	ldr	r3, [r4, #16]
 8004824:	6861      	ldr	r1, [r4, #4]
 8004826:	4299      	cmp	r1, r3
 8004828:	bfde      	ittt	le
 800482a:	2330      	movle	r3, #48	; 0x30
 800482c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004830:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004834:	1b52      	subs	r2, r2, r5
 8004836:	6122      	str	r2, [r4, #16]
 8004838:	f8cd a000 	str.w	sl, [sp]
 800483c:	464b      	mov	r3, r9
 800483e:	aa03      	add	r2, sp, #12
 8004840:	4621      	mov	r1, r4
 8004842:	4640      	mov	r0, r8
 8004844:	f7ff fee2 	bl	800460c <_printf_common>
 8004848:	3001      	adds	r0, #1
 800484a:	d14c      	bne.n	80048e6 <_printf_i+0x1fe>
 800484c:	f04f 30ff 	mov.w	r0, #4294967295
 8004850:	b004      	add	sp, #16
 8004852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004856:	4835      	ldr	r0, [pc, #212]	; (800492c <_printf_i+0x244>)
 8004858:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800485c:	6829      	ldr	r1, [r5, #0]
 800485e:	6823      	ldr	r3, [r4, #0]
 8004860:	f851 6b04 	ldr.w	r6, [r1], #4
 8004864:	6029      	str	r1, [r5, #0]
 8004866:	061d      	lsls	r5, r3, #24
 8004868:	d514      	bpl.n	8004894 <_printf_i+0x1ac>
 800486a:	07df      	lsls	r7, r3, #31
 800486c:	bf44      	itt	mi
 800486e:	f043 0320 	orrmi.w	r3, r3, #32
 8004872:	6023      	strmi	r3, [r4, #0]
 8004874:	b91e      	cbnz	r6, 800487e <_printf_i+0x196>
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	f023 0320 	bic.w	r3, r3, #32
 800487c:	6023      	str	r3, [r4, #0]
 800487e:	2310      	movs	r3, #16
 8004880:	e7b0      	b.n	80047e4 <_printf_i+0xfc>
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	f043 0320 	orr.w	r3, r3, #32
 8004888:	6023      	str	r3, [r4, #0]
 800488a:	2378      	movs	r3, #120	; 0x78
 800488c:	4828      	ldr	r0, [pc, #160]	; (8004930 <_printf_i+0x248>)
 800488e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004892:	e7e3      	b.n	800485c <_printf_i+0x174>
 8004894:	0659      	lsls	r1, r3, #25
 8004896:	bf48      	it	mi
 8004898:	b2b6      	uxthmi	r6, r6
 800489a:	e7e6      	b.n	800486a <_printf_i+0x182>
 800489c:	4615      	mov	r5, r2
 800489e:	e7bb      	b.n	8004818 <_printf_i+0x130>
 80048a0:	682b      	ldr	r3, [r5, #0]
 80048a2:	6826      	ldr	r6, [r4, #0]
 80048a4:	6961      	ldr	r1, [r4, #20]
 80048a6:	1d18      	adds	r0, r3, #4
 80048a8:	6028      	str	r0, [r5, #0]
 80048aa:	0635      	lsls	r5, r6, #24
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	d501      	bpl.n	80048b4 <_printf_i+0x1cc>
 80048b0:	6019      	str	r1, [r3, #0]
 80048b2:	e002      	b.n	80048ba <_printf_i+0x1d2>
 80048b4:	0670      	lsls	r0, r6, #25
 80048b6:	d5fb      	bpl.n	80048b0 <_printf_i+0x1c8>
 80048b8:	8019      	strh	r1, [r3, #0]
 80048ba:	2300      	movs	r3, #0
 80048bc:	6123      	str	r3, [r4, #16]
 80048be:	4615      	mov	r5, r2
 80048c0:	e7ba      	b.n	8004838 <_printf_i+0x150>
 80048c2:	682b      	ldr	r3, [r5, #0]
 80048c4:	1d1a      	adds	r2, r3, #4
 80048c6:	602a      	str	r2, [r5, #0]
 80048c8:	681d      	ldr	r5, [r3, #0]
 80048ca:	6862      	ldr	r2, [r4, #4]
 80048cc:	2100      	movs	r1, #0
 80048ce:	4628      	mov	r0, r5
 80048d0:	f7fb fc7e 	bl	80001d0 <memchr>
 80048d4:	b108      	cbz	r0, 80048da <_printf_i+0x1f2>
 80048d6:	1b40      	subs	r0, r0, r5
 80048d8:	6060      	str	r0, [r4, #4]
 80048da:	6863      	ldr	r3, [r4, #4]
 80048dc:	6123      	str	r3, [r4, #16]
 80048de:	2300      	movs	r3, #0
 80048e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048e4:	e7a8      	b.n	8004838 <_printf_i+0x150>
 80048e6:	6923      	ldr	r3, [r4, #16]
 80048e8:	462a      	mov	r2, r5
 80048ea:	4649      	mov	r1, r9
 80048ec:	4640      	mov	r0, r8
 80048ee:	47d0      	blx	sl
 80048f0:	3001      	adds	r0, #1
 80048f2:	d0ab      	beq.n	800484c <_printf_i+0x164>
 80048f4:	6823      	ldr	r3, [r4, #0]
 80048f6:	079b      	lsls	r3, r3, #30
 80048f8:	d413      	bmi.n	8004922 <_printf_i+0x23a>
 80048fa:	68e0      	ldr	r0, [r4, #12]
 80048fc:	9b03      	ldr	r3, [sp, #12]
 80048fe:	4298      	cmp	r0, r3
 8004900:	bfb8      	it	lt
 8004902:	4618      	movlt	r0, r3
 8004904:	e7a4      	b.n	8004850 <_printf_i+0x168>
 8004906:	2301      	movs	r3, #1
 8004908:	4632      	mov	r2, r6
 800490a:	4649      	mov	r1, r9
 800490c:	4640      	mov	r0, r8
 800490e:	47d0      	blx	sl
 8004910:	3001      	adds	r0, #1
 8004912:	d09b      	beq.n	800484c <_printf_i+0x164>
 8004914:	3501      	adds	r5, #1
 8004916:	68e3      	ldr	r3, [r4, #12]
 8004918:	9903      	ldr	r1, [sp, #12]
 800491a:	1a5b      	subs	r3, r3, r1
 800491c:	42ab      	cmp	r3, r5
 800491e:	dcf2      	bgt.n	8004906 <_printf_i+0x21e>
 8004920:	e7eb      	b.n	80048fa <_printf_i+0x212>
 8004922:	2500      	movs	r5, #0
 8004924:	f104 0619 	add.w	r6, r4, #25
 8004928:	e7f5      	b.n	8004916 <_printf_i+0x22e>
 800492a:	bf00      	nop
 800492c:	080063f5 	.word	0x080063f5
 8004930:	08006406 	.word	0x08006406

08004934 <_sbrk_r>:
 8004934:	b538      	push	{r3, r4, r5, lr}
 8004936:	4d06      	ldr	r5, [pc, #24]	; (8004950 <_sbrk_r+0x1c>)
 8004938:	2300      	movs	r3, #0
 800493a:	4604      	mov	r4, r0
 800493c:	4608      	mov	r0, r1
 800493e:	602b      	str	r3, [r5, #0]
 8004940:	f7fd fcdc 	bl	80022fc <_sbrk>
 8004944:	1c43      	adds	r3, r0, #1
 8004946:	d102      	bne.n	800494e <_sbrk_r+0x1a>
 8004948:	682b      	ldr	r3, [r5, #0]
 800494a:	b103      	cbz	r3, 800494e <_sbrk_r+0x1a>
 800494c:	6023      	str	r3, [r4, #0]
 800494e:	bd38      	pop	{r3, r4, r5, pc}
 8004950:	20001ab0 	.word	0x20001ab0

08004954 <__swbuf_r>:
 8004954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004956:	460e      	mov	r6, r1
 8004958:	4614      	mov	r4, r2
 800495a:	4605      	mov	r5, r0
 800495c:	b118      	cbz	r0, 8004966 <__swbuf_r+0x12>
 800495e:	6983      	ldr	r3, [r0, #24]
 8004960:	b90b      	cbnz	r3, 8004966 <__swbuf_r+0x12>
 8004962:	f000 f9d9 	bl	8004d18 <__sinit>
 8004966:	4b21      	ldr	r3, [pc, #132]	; (80049ec <__swbuf_r+0x98>)
 8004968:	429c      	cmp	r4, r3
 800496a:	d12b      	bne.n	80049c4 <__swbuf_r+0x70>
 800496c:	686c      	ldr	r4, [r5, #4]
 800496e:	69a3      	ldr	r3, [r4, #24]
 8004970:	60a3      	str	r3, [r4, #8]
 8004972:	89a3      	ldrh	r3, [r4, #12]
 8004974:	071a      	lsls	r2, r3, #28
 8004976:	d52f      	bpl.n	80049d8 <__swbuf_r+0x84>
 8004978:	6923      	ldr	r3, [r4, #16]
 800497a:	b36b      	cbz	r3, 80049d8 <__swbuf_r+0x84>
 800497c:	6923      	ldr	r3, [r4, #16]
 800497e:	6820      	ldr	r0, [r4, #0]
 8004980:	1ac0      	subs	r0, r0, r3
 8004982:	6963      	ldr	r3, [r4, #20]
 8004984:	b2f6      	uxtb	r6, r6
 8004986:	4283      	cmp	r3, r0
 8004988:	4637      	mov	r7, r6
 800498a:	dc04      	bgt.n	8004996 <__swbuf_r+0x42>
 800498c:	4621      	mov	r1, r4
 800498e:	4628      	mov	r0, r5
 8004990:	f000 f92e 	bl	8004bf0 <_fflush_r>
 8004994:	bb30      	cbnz	r0, 80049e4 <__swbuf_r+0x90>
 8004996:	68a3      	ldr	r3, [r4, #8]
 8004998:	3b01      	subs	r3, #1
 800499a:	60a3      	str	r3, [r4, #8]
 800499c:	6823      	ldr	r3, [r4, #0]
 800499e:	1c5a      	adds	r2, r3, #1
 80049a0:	6022      	str	r2, [r4, #0]
 80049a2:	701e      	strb	r6, [r3, #0]
 80049a4:	6963      	ldr	r3, [r4, #20]
 80049a6:	3001      	adds	r0, #1
 80049a8:	4283      	cmp	r3, r0
 80049aa:	d004      	beq.n	80049b6 <__swbuf_r+0x62>
 80049ac:	89a3      	ldrh	r3, [r4, #12]
 80049ae:	07db      	lsls	r3, r3, #31
 80049b0:	d506      	bpl.n	80049c0 <__swbuf_r+0x6c>
 80049b2:	2e0a      	cmp	r6, #10
 80049b4:	d104      	bne.n	80049c0 <__swbuf_r+0x6c>
 80049b6:	4621      	mov	r1, r4
 80049b8:	4628      	mov	r0, r5
 80049ba:	f000 f919 	bl	8004bf0 <_fflush_r>
 80049be:	b988      	cbnz	r0, 80049e4 <__swbuf_r+0x90>
 80049c0:	4638      	mov	r0, r7
 80049c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049c4:	4b0a      	ldr	r3, [pc, #40]	; (80049f0 <__swbuf_r+0x9c>)
 80049c6:	429c      	cmp	r4, r3
 80049c8:	d101      	bne.n	80049ce <__swbuf_r+0x7a>
 80049ca:	68ac      	ldr	r4, [r5, #8]
 80049cc:	e7cf      	b.n	800496e <__swbuf_r+0x1a>
 80049ce:	4b09      	ldr	r3, [pc, #36]	; (80049f4 <__swbuf_r+0xa0>)
 80049d0:	429c      	cmp	r4, r3
 80049d2:	bf08      	it	eq
 80049d4:	68ec      	ldreq	r4, [r5, #12]
 80049d6:	e7ca      	b.n	800496e <__swbuf_r+0x1a>
 80049d8:	4621      	mov	r1, r4
 80049da:	4628      	mov	r0, r5
 80049dc:	f000 f80c 	bl	80049f8 <__swsetup_r>
 80049e0:	2800      	cmp	r0, #0
 80049e2:	d0cb      	beq.n	800497c <__swbuf_r+0x28>
 80049e4:	f04f 37ff 	mov.w	r7, #4294967295
 80049e8:	e7ea      	b.n	80049c0 <__swbuf_r+0x6c>
 80049ea:	bf00      	nop
 80049ec:	08006438 	.word	0x08006438
 80049f0:	08006458 	.word	0x08006458
 80049f4:	08006418 	.word	0x08006418

080049f8 <__swsetup_r>:
 80049f8:	4b32      	ldr	r3, [pc, #200]	; (8004ac4 <__swsetup_r+0xcc>)
 80049fa:	b570      	push	{r4, r5, r6, lr}
 80049fc:	681d      	ldr	r5, [r3, #0]
 80049fe:	4606      	mov	r6, r0
 8004a00:	460c      	mov	r4, r1
 8004a02:	b125      	cbz	r5, 8004a0e <__swsetup_r+0x16>
 8004a04:	69ab      	ldr	r3, [r5, #24]
 8004a06:	b913      	cbnz	r3, 8004a0e <__swsetup_r+0x16>
 8004a08:	4628      	mov	r0, r5
 8004a0a:	f000 f985 	bl	8004d18 <__sinit>
 8004a0e:	4b2e      	ldr	r3, [pc, #184]	; (8004ac8 <__swsetup_r+0xd0>)
 8004a10:	429c      	cmp	r4, r3
 8004a12:	d10f      	bne.n	8004a34 <__swsetup_r+0x3c>
 8004a14:	686c      	ldr	r4, [r5, #4]
 8004a16:	89a3      	ldrh	r3, [r4, #12]
 8004a18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a1c:	0719      	lsls	r1, r3, #28
 8004a1e:	d42c      	bmi.n	8004a7a <__swsetup_r+0x82>
 8004a20:	06dd      	lsls	r5, r3, #27
 8004a22:	d411      	bmi.n	8004a48 <__swsetup_r+0x50>
 8004a24:	2309      	movs	r3, #9
 8004a26:	6033      	str	r3, [r6, #0]
 8004a28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004a2c:	81a3      	strh	r3, [r4, #12]
 8004a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a32:	e03e      	b.n	8004ab2 <__swsetup_r+0xba>
 8004a34:	4b25      	ldr	r3, [pc, #148]	; (8004acc <__swsetup_r+0xd4>)
 8004a36:	429c      	cmp	r4, r3
 8004a38:	d101      	bne.n	8004a3e <__swsetup_r+0x46>
 8004a3a:	68ac      	ldr	r4, [r5, #8]
 8004a3c:	e7eb      	b.n	8004a16 <__swsetup_r+0x1e>
 8004a3e:	4b24      	ldr	r3, [pc, #144]	; (8004ad0 <__swsetup_r+0xd8>)
 8004a40:	429c      	cmp	r4, r3
 8004a42:	bf08      	it	eq
 8004a44:	68ec      	ldreq	r4, [r5, #12]
 8004a46:	e7e6      	b.n	8004a16 <__swsetup_r+0x1e>
 8004a48:	0758      	lsls	r0, r3, #29
 8004a4a:	d512      	bpl.n	8004a72 <__swsetup_r+0x7a>
 8004a4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a4e:	b141      	cbz	r1, 8004a62 <__swsetup_r+0x6a>
 8004a50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a54:	4299      	cmp	r1, r3
 8004a56:	d002      	beq.n	8004a5e <__swsetup_r+0x66>
 8004a58:	4630      	mov	r0, r6
 8004a5a:	f7ff fb9d 	bl	8004198 <_free_r>
 8004a5e:	2300      	movs	r3, #0
 8004a60:	6363      	str	r3, [r4, #52]	; 0x34
 8004a62:	89a3      	ldrh	r3, [r4, #12]
 8004a64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004a68:	81a3      	strh	r3, [r4, #12]
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	6063      	str	r3, [r4, #4]
 8004a6e:	6923      	ldr	r3, [r4, #16]
 8004a70:	6023      	str	r3, [r4, #0]
 8004a72:	89a3      	ldrh	r3, [r4, #12]
 8004a74:	f043 0308 	orr.w	r3, r3, #8
 8004a78:	81a3      	strh	r3, [r4, #12]
 8004a7a:	6923      	ldr	r3, [r4, #16]
 8004a7c:	b94b      	cbnz	r3, 8004a92 <__swsetup_r+0x9a>
 8004a7e:	89a3      	ldrh	r3, [r4, #12]
 8004a80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a88:	d003      	beq.n	8004a92 <__swsetup_r+0x9a>
 8004a8a:	4621      	mov	r1, r4
 8004a8c:	4630      	mov	r0, r6
 8004a8e:	f000 fa09 	bl	8004ea4 <__smakebuf_r>
 8004a92:	89a0      	ldrh	r0, [r4, #12]
 8004a94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a98:	f010 0301 	ands.w	r3, r0, #1
 8004a9c:	d00a      	beq.n	8004ab4 <__swsetup_r+0xbc>
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	60a3      	str	r3, [r4, #8]
 8004aa2:	6963      	ldr	r3, [r4, #20]
 8004aa4:	425b      	negs	r3, r3
 8004aa6:	61a3      	str	r3, [r4, #24]
 8004aa8:	6923      	ldr	r3, [r4, #16]
 8004aaa:	b943      	cbnz	r3, 8004abe <__swsetup_r+0xc6>
 8004aac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ab0:	d1ba      	bne.n	8004a28 <__swsetup_r+0x30>
 8004ab2:	bd70      	pop	{r4, r5, r6, pc}
 8004ab4:	0781      	lsls	r1, r0, #30
 8004ab6:	bf58      	it	pl
 8004ab8:	6963      	ldrpl	r3, [r4, #20]
 8004aba:	60a3      	str	r3, [r4, #8]
 8004abc:	e7f4      	b.n	8004aa8 <__swsetup_r+0xb0>
 8004abe:	2000      	movs	r0, #0
 8004ac0:	e7f7      	b.n	8004ab2 <__swsetup_r+0xba>
 8004ac2:	bf00      	nop
 8004ac4:	20001338 	.word	0x20001338
 8004ac8:	08006438 	.word	0x08006438
 8004acc:	08006458 	.word	0x08006458
 8004ad0:	08006418 	.word	0x08006418

08004ad4 <abort>:
 8004ad4:	b508      	push	{r3, lr}
 8004ad6:	2006      	movs	r0, #6
 8004ad8:	f000 fa58 	bl	8004f8c <raise>
 8004adc:	2001      	movs	r0, #1
 8004ade:	f7fd fbdd 	bl	800229c <_exit>
	...

08004ae4 <__sflush_r>:
 8004ae4:	898a      	ldrh	r2, [r1, #12]
 8004ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aea:	4605      	mov	r5, r0
 8004aec:	0710      	lsls	r0, r2, #28
 8004aee:	460c      	mov	r4, r1
 8004af0:	d458      	bmi.n	8004ba4 <__sflush_r+0xc0>
 8004af2:	684b      	ldr	r3, [r1, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	dc05      	bgt.n	8004b04 <__sflush_r+0x20>
 8004af8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	dc02      	bgt.n	8004b04 <__sflush_r+0x20>
 8004afe:	2000      	movs	r0, #0
 8004b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b06:	2e00      	cmp	r6, #0
 8004b08:	d0f9      	beq.n	8004afe <__sflush_r+0x1a>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b10:	682f      	ldr	r7, [r5, #0]
 8004b12:	602b      	str	r3, [r5, #0]
 8004b14:	d032      	beq.n	8004b7c <__sflush_r+0x98>
 8004b16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b18:	89a3      	ldrh	r3, [r4, #12]
 8004b1a:	075a      	lsls	r2, r3, #29
 8004b1c:	d505      	bpl.n	8004b2a <__sflush_r+0x46>
 8004b1e:	6863      	ldr	r3, [r4, #4]
 8004b20:	1ac0      	subs	r0, r0, r3
 8004b22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b24:	b10b      	cbz	r3, 8004b2a <__sflush_r+0x46>
 8004b26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b28:	1ac0      	subs	r0, r0, r3
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b30:	6a21      	ldr	r1, [r4, #32]
 8004b32:	4628      	mov	r0, r5
 8004b34:	47b0      	blx	r6
 8004b36:	1c43      	adds	r3, r0, #1
 8004b38:	89a3      	ldrh	r3, [r4, #12]
 8004b3a:	d106      	bne.n	8004b4a <__sflush_r+0x66>
 8004b3c:	6829      	ldr	r1, [r5, #0]
 8004b3e:	291d      	cmp	r1, #29
 8004b40:	d82c      	bhi.n	8004b9c <__sflush_r+0xb8>
 8004b42:	4a2a      	ldr	r2, [pc, #168]	; (8004bec <__sflush_r+0x108>)
 8004b44:	40ca      	lsrs	r2, r1
 8004b46:	07d6      	lsls	r6, r2, #31
 8004b48:	d528      	bpl.n	8004b9c <__sflush_r+0xb8>
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	6062      	str	r2, [r4, #4]
 8004b4e:	04d9      	lsls	r1, r3, #19
 8004b50:	6922      	ldr	r2, [r4, #16]
 8004b52:	6022      	str	r2, [r4, #0]
 8004b54:	d504      	bpl.n	8004b60 <__sflush_r+0x7c>
 8004b56:	1c42      	adds	r2, r0, #1
 8004b58:	d101      	bne.n	8004b5e <__sflush_r+0x7a>
 8004b5a:	682b      	ldr	r3, [r5, #0]
 8004b5c:	b903      	cbnz	r3, 8004b60 <__sflush_r+0x7c>
 8004b5e:	6560      	str	r0, [r4, #84]	; 0x54
 8004b60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b62:	602f      	str	r7, [r5, #0]
 8004b64:	2900      	cmp	r1, #0
 8004b66:	d0ca      	beq.n	8004afe <__sflush_r+0x1a>
 8004b68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b6c:	4299      	cmp	r1, r3
 8004b6e:	d002      	beq.n	8004b76 <__sflush_r+0x92>
 8004b70:	4628      	mov	r0, r5
 8004b72:	f7ff fb11 	bl	8004198 <_free_r>
 8004b76:	2000      	movs	r0, #0
 8004b78:	6360      	str	r0, [r4, #52]	; 0x34
 8004b7a:	e7c1      	b.n	8004b00 <__sflush_r+0x1c>
 8004b7c:	6a21      	ldr	r1, [r4, #32]
 8004b7e:	2301      	movs	r3, #1
 8004b80:	4628      	mov	r0, r5
 8004b82:	47b0      	blx	r6
 8004b84:	1c41      	adds	r1, r0, #1
 8004b86:	d1c7      	bne.n	8004b18 <__sflush_r+0x34>
 8004b88:	682b      	ldr	r3, [r5, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d0c4      	beq.n	8004b18 <__sflush_r+0x34>
 8004b8e:	2b1d      	cmp	r3, #29
 8004b90:	d001      	beq.n	8004b96 <__sflush_r+0xb2>
 8004b92:	2b16      	cmp	r3, #22
 8004b94:	d101      	bne.n	8004b9a <__sflush_r+0xb6>
 8004b96:	602f      	str	r7, [r5, #0]
 8004b98:	e7b1      	b.n	8004afe <__sflush_r+0x1a>
 8004b9a:	89a3      	ldrh	r3, [r4, #12]
 8004b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ba0:	81a3      	strh	r3, [r4, #12]
 8004ba2:	e7ad      	b.n	8004b00 <__sflush_r+0x1c>
 8004ba4:	690f      	ldr	r7, [r1, #16]
 8004ba6:	2f00      	cmp	r7, #0
 8004ba8:	d0a9      	beq.n	8004afe <__sflush_r+0x1a>
 8004baa:	0793      	lsls	r3, r2, #30
 8004bac:	680e      	ldr	r6, [r1, #0]
 8004bae:	bf08      	it	eq
 8004bb0:	694b      	ldreq	r3, [r1, #20]
 8004bb2:	600f      	str	r7, [r1, #0]
 8004bb4:	bf18      	it	ne
 8004bb6:	2300      	movne	r3, #0
 8004bb8:	eba6 0807 	sub.w	r8, r6, r7
 8004bbc:	608b      	str	r3, [r1, #8]
 8004bbe:	f1b8 0f00 	cmp.w	r8, #0
 8004bc2:	dd9c      	ble.n	8004afe <__sflush_r+0x1a>
 8004bc4:	6a21      	ldr	r1, [r4, #32]
 8004bc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004bc8:	4643      	mov	r3, r8
 8004bca:	463a      	mov	r2, r7
 8004bcc:	4628      	mov	r0, r5
 8004bce:	47b0      	blx	r6
 8004bd0:	2800      	cmp	r0, #0
 8004bd2:	dc06      	bgt.n	8004be2 <__sflush_r+0xfe>
 8004bd4:	89a3      	ldrh	r3, [r4, #12]
 8004bd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bda:	81a3      	strh	r3, [r4, #12]
 8004bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8004be0:	e78e      	b.n	8004b00 <__sflush_r+0x1c>
 8004be2:	4407      	add	r7, r0
 8004be4:	eba8 0800 	sub.w	r8, r8, r0
 8004be8:	e7e9      	b.n	8004bbe <__sflush_r+0xda>
 8004bea:	bf00      	nop
 8004bec:	20400001 	.word	0x20400001

08004bf0 <_fflush_r>:
 8004bf0:	b538      	push	{r3, r4, r5, lr}
 8004bf2:	690b      	ldr	r3, [r1, #16]
 8004bf4:	4605      	mov	r5, r0
 8004bf6:	460c      	mov	r4, r1
 8004bf8:	b913      	cbnz	r3, 8004c00 <_fflush_r+0x10>
 8004bfa:	2500      	movs	r5, #0
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	bd38      	pop	{r3, r4, r5, pc}
 8004c00:	b118      	cbz	r0, 8004c0a <_fflush_r+0x1a>
 8004c02:	6983      	ldr	r3, [r0, #24]
 8004c04:	b90b      	cbnz	r3, 8004c0a <_fflush_r+0x1a>
 8004c06:	f000 f887 	bl	8004d18 <__sinit>
 8004c0a:	4b14      	ldr	r3, [pc, #80]	; (8004c5c <_fflush_r+0x6c>)
 8004c0c:	429c      	cmp	r4, r3
 8004c0e:	d11b      	bne.n	8004c48 <_fflush_r+0x58>
 8004c10:	686c      	ldr	r4, [r5, #4]
 8004c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d0ef      	beq.n	8004bfa <_fflush_r+0xa>
 8004c1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c1c:	07d0      	lsls	r0, r2, #31
 8004c1e:	d404      	bmi.n	8004c2a <_fflush_r+0x3a>
 8004c20:	0599      	lsls	r1, r3, #22
 8004c22:	d402      	bmi.n	8004c2a <_fflush_r+0x3a>
 8004c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c26:	f000 f915 	bl	8004e54 <__retarget_lock_acquire_recursive>
 8004c2a:	4628      	mov	r0, r5
 8004c2c:	4621      	mov	r1, r4
 8004c2e:	f7ff ff59 	bl	8004ae4 <__sflush_r>
 8004c32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c34:	07da      	lsls	r2, r3, #31
 8004c36:	4605      	mov	r5, r0
 8004c38:	d4e0      	bmi.n	8004bfc <_fflush_r+0xc>
 8004c3a:	89a3      	ldrh	r3, [r4, #12]
 8004c3c:	059b      	lsls	r3, r3, #22
 8004c3e:	d4dd      	bmi.n	8004bfc <_fflush_r+0xc>
 8004c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c42:	f000 f908 	bl	8004e56 <__retarget_lock_release_recursive>
 8004c46:	e7d9      	b.n	8004bfc <_fflush_r+0xc>
 8004c48:	4b05      	ldr	r3, [pc, #20]	; (8004c60 <_fflush_r+0x70>)
 8004c4a:	429c      	cmp	r4, r3
 8004c4c:	d101      	bne.n	8004c52 <_fflush_r+0x62>
 8004c4e:	68ac      	ldr	r4, [r5, #8]
 8004c50:	e7df      	b.n	8004c12 <_fflush_r+0x22>
 8004c52:	4b04      	ldr	r3, [pc, #16]	; (8004c64 <_fflush_r+0x74>)
 8004c54:	429c      	cmp	r4, r3
 8004c56:	bf08      	it	eq
 8004c58:	68ec      	ldreq	r4, [r5, #12]
 8004c5a:	e7da      	b.n	8004c12 <_fflush_r+0x22>
 8004c5c:	08006438 	.word	0x08006438
 8004c60:	08006458 	.word	0x08006458
 8004c64:	08006418 	.word	0x08006418

08004c68 <std>:
 8004c68:	2300      	movs	r3, #0
 8004c6a:	b510      	push	{r4, lr}
 8004c6c:	4604      	mov	r4, r0
 8004c6e:	e9c0 3300 	strd	r3, r3, [r0]
 8004c72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c76:	6083      	str	r3, [r0, #8]
 8004c78:	8181      	strh	r1, [r0, #12]
 8004c7a:	6643      	str	r3, [r0, #100]	; 0x64
 8004c7c:	81c2      	strh	r2, [r0, #14]
 8004c7e:	6183      	str	r3, [r0, #24]
 8004c80:	4619      	mov	r1, r3
 8004c82:	2208      	movs	r2, #8
 8004c84:	305c      	adds	r0, #92	; 0x5c
 8004c86:	f7ff fa7f 	bl	8004188 <memset>
 8004c8a:	4b05      	ldr	r3, [pc, #20]	; (8004ca0 <std+0x38>)
 8004c8c:	6263      	str	r3, [r4, #36]	; 0x24
 8004c8e:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <std+0x3c>)
 8004c90:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c92:	4b05      	ldr	r3, [pc, #20]	; (8004ca8 <std+0x40>)
 8004c94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c96:	4b05      	ldr	r3, [pc, #20]	; (8004cac <std+0x44>)
 8004c98:	6224      	str	r4, [r4, #32]
 8004c9a:	6323      	str	r3, [r4, #48]	; 0x30
 8004c9c:	bd10      	pop	{r4, pc}
 8004c9e:	bf00      	nop
 8004ca0:	08004fc5 	.word	0x08004fc5
 8004ca4:	08004fe7 	.word	0x08004fe7
 8004ca8:	0800501f 	.word	0x0800501f
 8004cac:	08005043 	.word	0x08005043

08004cb0 <_cleanup_r>:
 8004cb0:	4901      	ldr	r1, [pc, #4]	; (8004cb8 <_cleanup_r+0x8>)
 8004cb2:	f000 b8af 	b.w	8004e14 <_fwalk_reent>
 8004cb6:	bf00      	nop
 8004cb8:	08004bf1 	.word	0x08004bf1

08004cbc <__sfmoreglue>:
 8004cbc:	b570      	push	{r4, r5, r6, lr}
 8004cbe:	2268      	movs	r2, #104	; 0x68
 8004cc0:	1e4d      	subs	r5, r1, #1
 8004cc2:	4355      	muls	r5, r2
 8004cc4:	460e      	mov	r6, r1
 8004cc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004cca:	f7ff fad1 	bl	8004270 <_malloc_r>
 8004cce:	4604      	mov	r4, r0
 8004cd0:	b140      	cbz	r0, 8004ce4 <__sfmoreglue+0x28>
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	e9c0 1600 	strd	r1, r6, [r0]
 8004cd8:	300c      	adds	r0, #12
 8004cda:	60a0      	str	r0, [r4, #8]
 8004cdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004ce0:	f7ff fa52 	bl	8004188 <memset>
 8004ce4:	4620      	mov	r0, r4
 8004ce6:	bd70      	pop	{r4, r5, r6, pc}

08004ce8 <__sfp_lock_acquire>:
 8004ce8:	4801      	ldr	r0, [pc, #4]	; (8004cf0 <__sfp_lock_acquire+0x8>)
 8004cea:	f000 b8b3 	b.w	8004e54 <__retarget_lock_acquire_recursive>
 8004cee:	bf00      	nop
 8004cf0:	20001aad 	.word	0x20001aad

08004cf4 <__sfp_lock_release>:
 8004cf4:	4801      	ldr	r0, [pc, #4]	; (8004cfc <__sfp_lock_release+0x8>)
 8004cf6:	f000 b8ae 	b.w	8004e56 <__retarget_lock_release_recursive>
 8004cfa:	bf00      	nop
 8004cfc:	20001aad 	.word	0x20001aad

08004d00 <__sinit_lock_acquire>:
 8004d00:	4801      	ldr	r0, [pc, #4]	; (8004d08 <__sinit_lock_acquire+0x8>)
 8004d02:	f000 b8a7 	b.w	8004e54 <__retarget_lock_acquire_recursive>
 8004d06:	bf00      	nop
 8004d08:	20001aae 	.word	0x20001aae

08004d0c <__sinit_lock_release>:
 8004d0c:	4801      	ldr	r0, [pc, #4]	; (8004d14 <__sinit_lock_release+0x8>)
 8004d0e:	f000 b8a2 	b.w	8004e56 <__retarget_lock_release_recursive>
 8004d12:	bf00      	nop
 8004d14:	20001aae 	.word	0x20001aae

08004d18 <__sinit>:
 8004d18:	b510      	push	{r4, lr}
 8004d1a:	4604      	mov	r4, r0
 8004d1c:	f7ff fff0 	bl	8004d00 <__sinit_lock_acquire>
 8004d20:	69a3      	ldr	r3, [r4, #24]
 8004d22:	b11b      	cbz	r3, 8004d2c <__sinit+0x14>
 8004d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d28:	f7ff bff0 	b.w	8004d0c <__sinit_lock_release>
 8004d2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004d30:	6523      	str	r3, [r4, #80]	; 0x50
 8004d32:	4b13      	ldr	r3, [pc, #76]	; (8004d80 <__sinit+0x68>)
 8004d34:	4a13      	ldr	r2, [pc, #76]	; (8004d84 <__sinit+0x6c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	62a2      	str	r2, [r4, #40]	; 0x28
 8004d3a:	42a3      	cmp	r3, r4
 8004d3c:	bf04      	itt	eq
 8004d3e:	2301      	moveq	r3, #1
 8004d40:	61a3      	streq	r3, [r4, #24]
 8004d42:	4620      	mov	r0, r4
 8004d44:	f000 f820 	bl	8004d88 <__sfp>
 8004d48:	6060      	str	r0, [r4, #4]
 8004d4a:	4620      	mov	r0, r4
 8004d4c:	f000 f81c 	bl	8004d88 <__sfp>
 8004d50:	60a0      	str	r0, [r4, #8]
 8004d52:	4620      	mov	r0, r4
 8004d54:	f000 f818 	bl	8004d88 <__sfp>
 8004d58:	2200      	movs	r2, #0
 8004d5a:	60e0      	str	r0, [r4, #12]
 8004d5c:	2104      	movs	r1, #4
 8004d5e:	6860      	ldr	r0, [r4, #4]
 8004d60:	f7ff ff82 	bl	8004c68 <std>
 8004d64:	68a0      	ldr	r0, [r4, #8]
 8004d66:	2201      	movs	r2, #1
 8004d68:	2109      	movs	r1, #9
 8004d6a:	f7ff ff7d 	bl	8004c68 <std>
 8004d6e:	68e0      	ldr	r0, [r4, #12]
 8004d70:	2202      	movs	r2, #2
 8004d72:	2112      	movs	r1, #18
 8004d74:	f7ff ff78 	bl	8004c68 <std>
 8004d78:	2301      	movs	r3, #1
 8004d7a:	61a3      	str	r3, [r4, #24]
 8004d7c:	e7d2      	b.n	8004d24 <__sinit+0xc>
 8004d7e:	bf00      	nop
 8004d80:	080063e0 	.word	0x080063e0
 8004d84:	08004cb1 	.word	0x08004cb1

08004d88 <__sfp>:
 8004d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d8a:	4607      	mov	r7, r0
 8004d8c:	f7ff ffac 	bl	8004ce8 <__sfp_lock_acquire>
 8004d90:	4b1e      	ldr	r3, [pc, #120]	; (8004e0c <__sfp+0x84>)
 8004d92:	681e      	ldr	r6, [r3, #0]
 8004d94:	69b3      	ldr	r3, [r6, #24]
 8004d96:	b913      	cbnz	r3, 8004d9e <__sfp+0x16>
 8004d98:	4630      	mov	r0, r6
 8004d9a:	f7ff ffbd 	bl	8004d18 <__sinit>
 8004d9e:	3648      	adds	r6, #72	; 0x48
 8004da0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004da4:	3b01      	subs	r3, #1
 8004da6:	d503      	bpl.n	8004db0 <__sfp+0x28>
 8004da8:	6833      	ldr	r3, [r6, #0]
 8004daa:	b30b      	cbz	r3, 8004df0 <__sfp+0x68>
 8004dac:	6836      	ldr	r6, [r6, #0]
 8004dae:	e7f7      	b.n	8004da0 <__sfp+0x18>
 8004db0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004db4:	b9d5      	cbnz	r5, 8004dec <__sfp+0x64>
 8004db6:	4b16      	ldr	r3, [pc, #88]	; (8004e10 <__sfp+0x88>)
 8004db8:	60e3      	str	r3, [r4, #12]
 8004dba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004dbe:	6665      	str	r5, [r4, #100]	; 0x64
 8004dc0:	f000 f847 	bl	8004e52 <__retarget_lock_init_recursive>
 8004dc4:	f7ff ff96 	bl	8004cf4 <__sfp_lock_release>
 8004dc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004dcc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004dd0:	6025      	str	r5, [r4, #0]
 8004dd2:	61a5      	str	r5, [r4, #24]
 8004dd4:	2208      	movs	r2, #8
 8004dd6:	4629      	mov	r1, r5
 8004dd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004ddc:	f7ff f9d4 	bl	8004188 <memset>
 8004de0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004de4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004de8:	4620      	mov	r0, r4
 8004dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dec:	3468      	adds	r4, #104	; 0x68
 8004dee:	e7d9      	b.n	8004da4 <__sfp+0x1c>
 8004df0:	2104      	movs	r1, #4
 8004df2:	4638      	mov	r0, r7
 8004df4:	f7ff ff62 	bl	8004cbc <__sfmoreglue>
 8004df8:	4604      	mov	r4, r0
 8004dfa:	6030      	str	r0, [r6, #0]
 8004dfc:	2800      	cmp	r0, #0
 8004dfe:	d1d5      	bne.n	8004dac <__sfp+0x24>
 8004e00:	f7ff ff78 	bl	8004cf4 <__sfp_lock_release>
 8004e04:	230c      	movs	r3, #12
 8004e06:	603b      	str	r3, [r7, #0]
 8004e08:	e7ee      	b.n	8004de8 <__sfp+0x60>
 8004e0a:	bf00      	nop
 8004e0c:	080063e0 	.word	0x080063e0
 8004e10:	ffff0001 	.word	0xffff0001

08004e14 <_fwalk_reent>:
 8004e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e18:	4606      	mov	r6, r0
 8004e1a:	4688      	mov	r8, r1
 8004e1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004e20:	2700      	movs	r7, #0
 8004e22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e26:	f1b9 0901 	subs.w	r9, r9, #1
 8004e2a:	d505      	bpl.n	8004e38 <_fwalk_reent+0x24>
 8004e2c:	6824      	ldr	r4, [r4, #0]
 8004e2e:	2c00      	cmp	r4, #0
 8004e30:	d1f7      	bne.n	8004e22 <_fwalk_reent+0xe>
 8004e32:	4638      	mov	r0, r7
 8004e34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e38:	89ab      	ldrh	r3, [r5, #12]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d907      	bls.n	8004e4e <_fwalk_reent+0x3a>
 8004e3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e42:	3301      	adds	r3, #1
 8004e44:	d003      	beq.n	8004e4e <_fwalk_reent+0x3a>
 8004e46:	4629      	mov	r1, r5
 8004e48:	4630      	mov	r0, r6
 8004e4a:	47c0      	blx	r8
 8004e4c:	4307      	orrs	r7, r0
 8004e4e:	3568      	adds	r5, #104	; 0x68
 8004e50:	e7e9      	b.n	8004e26 <_fwalk_reent+0x12>

08004e52 <__retarget_lock_init_recursive>:
 8004e52:	4770      	bx	lr

08004e54 <__retarget_lock_acquire_recursive>:
 8004e54:	4770      	bx	lr

08004e56 <__retarget_lock_release_recursive>:
 8004e56:	4770      	bx	lr

08004e58 <__swhatbuf_r>:
 8004e58:	b570      	push	{r4, r5, r6, lr}
 8004e5a:	460e      	mov	r6, r1
 8004e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e60:	2900      	cmp	r1, #0
 8004e62:	b096      	sub	sp, #88	; 0x58
 8004e64:	4614      	mov	r4, r2
 8004e66:	461d      	mov	r5, r3
 8004e68:	da08      	bge.n	8004e7c <__swhatbuf_r+0x24>
 8004e6a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	602a      	str	r2, [r5, #0]
 8004e72:	061a      	lsls	r2, r3, #24
 8004e74:	d410      	bmi.n	8004e98 <__swhatbuf_r+0x40>
 8004e76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e7a:	e00e      	b.n	8004e9a <__swhatbuf_r+0x42>
 8004e7c:	466a      	mov	r2, sp
 8004e7e:	f000 f907 	bl	8005090 <_fstat_r>
 8004e82:	2800      	cmp	r0, #0
 8004e84:	dbf1      	blt.n	8004e6a <__swhatbuf_r+0x12>
 8004e86:	9a01      	ldr	r2, [sp, #4]
 8004e88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004e8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004e90:	425a      	negs	r2, r3
 8004e92:	415a      	adcs	r2, r3
 8004e94:	602a      	str	r2, [r5, #0]
 8004e96:	e7ee      	b.n	8004e76 <__swhatbuf_r+0x1e>
 8004e98:	2340      	movs	r3, #64	; 0x40
 8004e9a:	2000      	movs	r0, #0
 8004e9c:	6023      	str	r3, [r4, #0]
 8004e9e:	b016      	add	sp, #88	; 0x58
 8004ea0:	bd70      	pop	{r4, r5, r6, pc}
	...

08004ea4 <__smakebuf_r>:
 8004ea4:	898b      	ldrh	r3, [r1, #12]
 8004ea6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ea8:	079d      	lsls	r5, r3, #30
 8004eaa:	4606      	mov	r6, r0
 8004eac:	460c      	mov	r4, r1
 8004eae:	d507      	bpl.n	8004ec0 <__smakebuf_r+0x1c>
 8004eb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004eb4:	6023      	str	r3, [r4, #0]
 8004eb6:	6123      	str	r3, [r4, #16]
 8004eb8:	2301      	movs	r3, #1
 8004eba:	6163      	str	r3, [r4, #20]
 8004ebc:	b002      	add	sp, #8
 8004ebe:	bd70      	pop	{r4, r5, r6, pc}
 8004ec0:	ab01      	add	r3, sp, #4
 8004ec2:	466a      	mov	r2, sp
 8004ec4:	f7ff ffc8 	bl	8004e58 <__swhatbuf_r>
 8004ec8:	9900      	ldr	r1, [sp, #0]
 8004eca:	4605      	mov	r5, r0
 8004ecc:	4630      	mov	r0, r6
 8004ece:	f7ff f9cf 	bl	8004270 <_malloc_r>
 8004ed2:	b948      	cbnz	r0, 8004ee8 <__smakebuf_r+0x44>
 8004ed4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ed8:	059a      	lsls	r2, r3, #22
 8004eda:	d4ef      	bmi.n	8004ebc <__smakebuf_r+0x18>
 8004edc:	f023 0303 	bic.w	r3, r3, #3
 8004ee0:	f043 0302 	orr.w	r3, r3, #2
 8004ee4:	81a3      	strh	r3, [r4, #12]
 8004ee6:	e7e3      	b.n	8004eb0 <__smakebuf_r+0xc>
 8004ee8:	4b0d      	ldr	r3, [pc, #52]	; (8004f20 <__smakebuf_r+0x7c>)
 8004eea:	62b3      	str	r3, [r6, #40]	; 0x28
 8004eec:	89a3      	ldrh	r3, [r4, #12]
 8004eee:	6020      	str	r0, [r4, #0]
 8004ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ef4:	81a3      	strh	r3, [r4, #12]
 8004ef6:	9b00      	ldr	r3, [sp, #0]
 8004ef8:	6163      	str	r3, [r4, #20]
 8004efa:	9b01      	ldr	r3, [sp, #4]
 8004efc:	6120      	str	r0, [r4, #16]
 8004efe:	b15b      	cbz	r3, 8004f18 <__smakebuf_r+0x74>
 8004f00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f04:	4630      	mov	r0, r6
 8004f06:	f000 f8d5 	bl	80050b4 <_isatty_r>
 8004f0a:	b128      	cbz	r0, 8004f18 <__smakebuf_r+0x74>
 8004f0c:	89a3      	ldrh	r3, [r4, #12]
 8004f0e:	f023 0303 	bic.w	r3, r3, #3
 8004f12:	f043 0301 	orr.w	r3, r3, #1
 8004f16:	81a3      	strh	r3, [r4, #12]
 8004f18:	89a0      	ldrh	r0, [r4, #12]
 8004f1a:	4305      	orrs	r5, r0
 8004f1c:	81a5      	strh	r5, [r4, #12]
 8004f1e:	e7cd      	b.n	8004ebc <__smakebuf_r+0x18>
 8004f20:	08004cb1 	.word	0x08004cb1

08004f24 <__malloc_lock>:
 8004f24:	4801      	ldr	r0, [pc, #4]	; (8004f2c <__malloc_lock+0x8>)
 8004f26:	f7ff bf95 	b.w	8004e54 <__retarget_lock_acquire_recursive>
 8004f2a:	bf00      	nop
 8004f2c:	20001aac 	.word	0x20001aac

08004f30 <__malloc_unlock>:
 8004f30:	4801      	ldr	r0, [pc, #4]	; (8004f38 <__malloc_unlock+0x8>)
 8004f32:	f7ff bf90 	b.w	8004e56 <__retarget_lock_release_recursive>
 8004f36:	bf00      	nop
 8004f38:	20001aac 	.word	0x20001aac

08004f3c <_raise_r>:
 8004f3c:	291f      	cmp	r1, #31
 8004f3e:	b538      	push	{r3, r4, r5, lr}
 8004f40:	4604      	mov	r4, r0
 8004f42:	460d      	mov	r5, r1
 8004f44:	d904      	bls.n	8004f50 <_raise_r+0x14>
 8004f46:	2316      	movs	r3, #22
 8004f48:	6003      	str	r3, [r0, #0]
 8004f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f4e:	bd38      	pop	{r3, r4, r5, pc}
 8004f50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004f52:	b112      	cbz	r2, 8004f5a <_raise_r+0x1e>
 8004f54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004f58:	b94b      	cbnz	r3, 8004f6e <_raise_r+0x32>
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	f000 f830 	bl	8004fc0 <_getpid_r>
 8004f60:	462a      	mov	r2, r5
 8004f62:	4601      	mov	r1, r0
 8004f64:	4620      	mov	r0, r4
 8004f66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f6a:	f000 b817 	b.w	8004f9c <_kill_r>
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d00a      	beq.n	8004f88 <_raise_r+0x4c>
 8004f72:	1c59      	adds	r1, r3, #1
 8004f74:	d103      	bne.n	8004f7e <_raise_r+0x42>
 8004f76:	2316      	movs	r3, #22
 8004f78:	6003      	str	r3, [r0, #0]
 8004f7a:	2001      	movs	r0, #1
 8004f7c:	e7e7      	b.n	8004f4e <_raise_r+0x12>
 8004f7e:	2400      	movs	r4, #0
 8004f80:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004f84:	4628      	mov	r0, r5
 8004f86:	4798      	blx	r3
 8004f88:	2000      	movs	r0, #0
 8004f8a:	e7e0      	b.n	8004f4e <_raise_r+0x12>

08004f8c <raise>:
 8004f8c:	4b02      	ldr	r3, [pc, #8]	; (8004f98 <raise+0xc>)
 8004f8e:	4601      	mov	r1, r0
 8004f90:	6818      	ldr	r0, [r3, #0]
 8004f92:	f7ff bfd3 	b.w	8004f3c <_raise_r>
 8004f96:	bf00      	nop
 8004f98:	20001338 	.word	0x20001338

08004f9c <_kill_r>:
 8004f9c:	b538      	push	{r3, r4, r5, lr}
 8004f9e:	4d07      	ldr	r5, [pc, #28]	; (8004fbc <_kill_r+0x20>)
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	4604      	mov	r4, r0
 8004fa4:	4608      	mov	r0, r1
 8004fa6:	4611      	mov	r1, r2
 8004fa8:	602b      	str	r3, [r5, #0]
 8004faa:	f7fd f96f 	bl	800228c <_kill>
 8004fae:	1c43      	adds	r3, r0, #1
 8004fb0:	d102      	bne.n	8004fb8 <_kill_r+0x1c>
 8004fb2:	682b      	ldr	r3, [r5, #0]
 8004fb4:	b103      	cbz	r3, 8004fb8 <_kill_r+0x1c>
 8004fb6:	6023      	str	r3, [r4, #0]
 8004fb8:	bd38      	pop	{r3, r4, r5, pc}
 8004fba:	bf00      	nop
 8004fbc:	20001ab0 	.word	0x20001ab0

08004fc0 <_getpid_r>:
 8004fc0:	f7fd b962 	b.w	8002288 <_getpid>

08004fc4 <__sread>:
 8004fc4:	b510      	push	{r4, lr}
 8004fc6:	460c      	mov	r4, r1
 8004fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fcc:	f000 f894 	bl	80050f8 <_read_r>
 8004fd0:	2800      	cmp	r0, #0
 8004fd2:	bfab      	itete	ge
 8004fd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004fd6:	89a3      	ldrhlt	r3, [r4, #12]
 8004fd8:	181b      	addge	r3, r3, r0
 8004fda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004fde:	bfac      	ite	ge
 8004fe0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004fe2:	81a3      	strhlt	r3, [r4, #12]
 8004fe4:	bd10      	pop	{r4, pc}

08004fe6 <__swrite>:
 8004fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fea:	461f      	mov	r7, r3
 8004fec:	898b      	ldrh	r3, [r1, #12]
 8004fee:	05db      	lsls	r3, r3, #23
 8004ff0:	4605      	mov	r5, r0
 8004ff2:	460c      	mov	r4, r1
 8004ff4:	4616      	mov	r6, r2
 8004ff6:	d505      	bpl.n	8005004 <__swrite+0x1e>
 8004ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	2200      	movs	r2, #0
 8005000:	f000 f868 	bl	80050d4 <_lseek_r>
 8005004:	89a3      	ldrh	r3, [r4, #12]
 8005006:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800500a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800500e:	81a3      	strh	r3, [r4, #12]
 8005010:	4632      	mov	r2, r6
 8005012:	463b      	mov	r3, r7
 8005014:	4628      	mov	r0, r5
 8005016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800501a:	f000 b817 	b.w	800504c <_write_r>

0800501e <__sseek>:
 800501e:	b510      	push	{r4, lr}
 8005020:	460c      	mov	r4, r1
 8005022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005026:	f000 f855 	bl	80050d4 <_lseek_r>
 800502a:	1c43      	adds	r3, r0, #1
 800502c:	89a3      	ldrh	r3, [r4, #12]
 800502e:	bf15      	itete	ne
 8005030:	6560      	strne	r0, [r4, #84]	; 0x54
 8005032:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005036:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800503a:	81a3      	strheq	r3, [r4, #12]
 800503c:	bf18      	it	ne
 800503e:	81a3      	strhne	r3, [r4, #12]
 8005040:	bd10      	pop	{r4, pc}

08005042 <__sclose>:
 8005042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005046:	f000 b813 	b.w	8005070 <_close_r>
	...

0800504c <_write_r>:
 800504c:	b538      	push	{r3, r4, r5, lr}
 800504e:	4d07      	ldr	r5, [pc, #28]	; (800506c <_write_r+0x20>)
 8005050:	4604      	mov	r4, r0
 8005052:	4608      	mov	r0, r1
 8005054:	4611      	mov	r1, r2
 8005056:	2200      	movs	r2, #0
 8005058:	602a      	str	r2, [r5, #0]
 800505a:	461a      	mov	r2, r3
 800505c:	f7fd f934 	bl	80022c8 <_write>
 8005060:	1c43      	adds	r3, r0, #1
 8005062:	d102      	bne.n	800506a <_write_r+0x1e>
 8005064:	682b      	ldr	r3, [r5, #0]
 8005066:	b103      	cbz	r3, 800506a <_write_r+0x1e>
 8005068:	6023      	str	r3, [r4, #0]
 800506a:	bd38      	pop	{r3, r4, r5, pc}
 800506c:	20001ab0 	.word	0x20001ab0

08005070 <_close_r>:
 8005070:	b538      	push	{r3, r4, r5, lr}
 8005072:	4d06      	ldr	r5, [pc, #24]	; (800508c <_close_r+0x1c>)
 8005074:	2300      	movs	r3, #0
 8005076:	4604      	mov	r4, r0
 8005078:	4608      	mov	r0, r1
 800507a:	602b      	str	r3, [r5, #0]
 800507c:	f7fd f932 	bl	80022e4 <_close>
 8005080:	1c43      	adds	r3, r0, #1
 8005082:	d102      	bne.n	800508a <_close_r+0x1a>
 8005084:	682b      	ldr	r3, [r5, #0]
 8005086:	b103      	cbz	r3, 800508a <_close_r+0x1a>
 8005088:	6023      	str	r3, [r4, #0]
 800508a:	bd38      	pop	{r3, r4, r5, pc}
 800508c:	20001ab0 	.word	0x20001ab0

08005090 <_fstat_r>:
 8005090:	b538      	push	{r3, r4, r5, lr}
 8005092:	4d07      	ldr	r5, [pc, #28]	; (80050b0 <_fstat_r+0x20>)
 8005094:	2300      	movs	r3, #0
 8005096:	4604      	mov	r4, r0
 8005098:	4608      	mov	r0, r1
 800509a:	4611      	mov	r1, r2
 800509c:	602b      	str	r3, [r5, #0]
 800509e:	f7fd f924 	bl	80022ea <_fstat>
 80050a2:	1c43      	adds	r3, r0, #1
 80050a4:	d102      	bne.n	80050ac <_fstat_r+0x1c>
 80050a6:	682b      	ldr	r3, [r5, #0]
 80050a8:	b103      	cbz	r3, 80050ac <_fstat_r+0x1c>
 80050aa:	6023      	str	r3, [r4, #0]
 80050ac:	bd38      	pop	{r3, r4, r5, pc}
 80050ae:	bf00      	nop
 80050b0:	20001ab0 	.word	0x20001ab0

080050b4 <_isatty_r>:
 80050b4:	b538      	push	{r3, r4, r5, lr}
 80050b6:	4d06      	ldr	r5, [pc, #24]	; (80050d0 <_isatty_r+0x1c>)
 80050b8:	2300      	movs	r3, #0
 80050ba:	4604      	mov	r4, r0
 80050bc:	4608      	mov	r0, r1
 80050be:	602b      	str	r3, [r5, #0]
 80050c0:	f7fd f918 	bl	80022f4 <_isatty>
 80050c4:	1c43      	adds	r3, r0, #1
 80050c6:	d102      	bne.n	80050ce <_isatty_r+0x1a>
 80050c8:	682b      	ldr	r3, [r5, #0]
 80050ca:	b103      	cbz	r3, 80050ce <_isatty_r+0x1a>
 80050cc:	6023      	str	r3, [r4, #0]
 80050ce:	bd38      	pop	{r3, r4, r5, pc}
 80050d0:	20001ab0 	.word	0x20001ab0

080050d4 <_lseek_r>:
 80050d4:	b538      	push	{r3, r4, r5, lr}
 80050d6:	4d07      	ldr	r5, [pc, #28]	; (80050f4 <_lseek_r+0x20>)
 80050d8:	4604      	mov	r4, r0
 80050da:	4608      	mov	r0, r1
 80050dc:	4611      	mov	r1, r2
 80050de:	2200      	movs	r2, #0
 80050e0:	602a      	str	r2, [r5, #0]
 80050e2:	461a      	mov	r2, r3
 80050e4:	f7fd f908 	bl	80022f8 <_lseek>
 80050e8:	1c43      	adds	r3, r0, #1
 80050ea:	d102      	bne.n	80050f2 <_lseek_r+0x1e>
 80050ec:	682b      	ldr	r3, [r5, #0]
 80050ee:	b103      	cbz	r3, 80050f2 <_lseek_r+0x1e>
 80050f0:	6023      	str	r3, [r4, #0]
 80050f2:	bd38      	pop	{r3, r4, r5, pc}
 80050f4:	20001ab0 	.word	0x20001ab0

080050f8 <_read_r>:
 80050f8:	b538      	push	{r3, r4, r5, lr}
 80050fa:	4d07      	ldr	r5, [pc, #28]	; (8005118 <_read_r+0x20>)
 80050fc:	4604      	mov	r4, r0
 80050fe:	4608      	mov	r0, r1
 8005100:	4611      	mov	r1, r2
 8005102:	2200      	movs	r2, #0
 8005104:	602a      	str	r2, [r5, #0]
 8005106:	461a      	mov	r2, r3
 8005108:	f7fd f8ce 	bl	80022a8 <_read>
 800510c:	1c43      	adds	r3, r0, #1
 800510e:	d102      	bne.n	8005116 <_read_r+0x1e>
 8005110:	682b      	ldr	r3, [r5, #0]
 8005112:	b103      	cbz	r3, 8005116 <_read_r+0x1e>
 8005114:	6023      	str	r3, [r4, #0]
 8005116:	bd38      	pop	{r3, r4, r5, pc}
 8005118:	20001ab0 	.word	0x20001ab0
 800511c:	00000000 	.word	0x00000000

08005120 <cos>:
 8005120:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005122:	ec53 2b10 	vmov	r2, r3, d0
 8005126:	4826      	ldr	r0, [pc, #152]	; (80051c0 <cos+0xa0>)
 8005128:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800512c:	4281      	cmp	r1, r0
 800512e:	dc06      	bgt.n	800513e <cos+0x1e>
 8005130:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80051b8 <cos+0x98>
 8005134:	b005      	add	sp, #20
 8005136:	f85d eb04 	ldr.w	lr, [sp], #4
 800513a:	f000 bacd 	b.w	80056d8 <__kernel_cos>
 800513e:	4821      	ldr	r0, [pc, #132]	; (80051c4 <cos+0xa4>)
 8005140:	4281      	cmp	r1, r0
 8005142:	dd09      	ble.n	8005158 <cos+0x38>
 8005144:	ee10 0a10 	vmov	r0, s0
 8005148:	4619      	mov	r1, r3
 800514a:	f7fb f895 	bl	8000278 <__aeabi_dsub>
 800514e:	ec41 0b10 	vmov	d0, r0, r1
 8005152:	b005      	add	sp, #20
 8005154:	f85d fb04 	ldr.w	pc, [sp], #4
 8005158:	4668      	mov	r0, sp
 800515a:	f000 f8ad 	bl	80052b8 <__ieee754_rem_pio2>
 800515e:	f000 0003 	and.w	r0, r0, #3
 8005162:	2801      	cmp	r0, #1
 8005164:	d00b      	beq.n	800517e <cos+0x5e>
 8005166:	2802      	cmp	r0, #2
 8005168:	d016      	beq.n	8005198 <cos+0x78>
 800516a:	b9e0      	cbnz	r0, 80051a6 <cos+0x86>
 800516c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005170:	ed9d 0b00 	vldr	d0, [sp]
 8005174:	f000 fab0 	bl	80056d8 <__kernel_cos>
 8005178:	ec51 0b10 	vmov	r0, r1, d0
 800517c:	e7e7      	b.n	800514e <cos+0x2e>
 800517e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005182:	ed9d 0b00 	vldr	d0, [sp]
 8005186:	f000 febf 	bl	8005f08 <__kernel_sin>
 800518a:	ec53 2b10 	vmov	r2, r3, d0
 800518e:	ee10 0a10 	vmov	r0, s0
 8005192:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005196:	e7da      	b.n	800514e <cos+0x2e>
 8005198:	ed9d 1b02 	vldr	d1, [sp, #8]
 800519c:	ed9d 0b00 	vldr	d0, [sp]
 80051a0:	f000 fa9a 	bl	80056d8 <__kernel_cos>
 80051a4:	e7f1      	b.n	800518a <cos+0x6a>
 80051a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80051aa:	ed9d 0b00 	vldr	d0, [sp]
 80051ae:	2001      	movs	r0, #1
 80051b0:	f000 feaa 	bl	8005f08 <__kernel_sin>
 80051b4:	e7e0      	b.n	8005178 <cos+0x58>
 80051b6:	bf00      	nop
	...
 80051c0:	3fe921fb 	.word	0x3fe921fb
 80051c4:	7fefffff 	.word	0x7fefffff

080051c8 <sin>:
 80051c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80051ca:	ec53 2b10 	vmov	r2, r3, d0
 80051ce:	4828      	ldr	r0, [pc, #160]	; (8005270 <sin+0xa8>)
 80051d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80051d4:	4281      	cmp	r1, r0
 80051d6:	dc07      	bgt.n	80051e8 <sin+0x20>
 80051d8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8005268 <sin+0xa0>
 80051dc:	2000      	movs	r0, #0
 80051de:	b005      	add	sp, #20
 80051e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80051e4:	f000 be90 	b.w	8005f08 <__kernel_sin>
 80051e8:	4822      	ldr	r0, [pc, #136]	; (8005274 <sin+0xac>)
 80051ea:	4281      	cmp	r1, r0
 80051ec:	dd09      	ble.n	8005202 <sin+0x3a>
 80051ee:	ee10 0a10 	vmov	r0, s0
 80051f2:	4619      	mov	r1, r3
 80051f4:	f7fb f840 	bl	8000278 <__aeabi_dsub>
 80051f8:	ec41 0b10 	vmov	d0, r0, r1
 80051fc:	b005      	add	sp, #20
 80051fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8005202:	4668      	mov	r0, sp
 8005204:	f000 f858 	bl	80052b8 <__ieee754_rem_pio2>
 8005208:	f000 0003 	and.w	r0, r0, #3
 800520c:	2801      	cmp	r0, #1
 800520e:	d00c      	beq.n	800522a <sin+0x62>
 8005210:	2802      	cmp	r0, #2
 8005212:	d011      	beq.n	8005238 <sin+0x70>
 8005214:	b9f0      	cbnz	r0, 8005254 <sin+0x8c>
 8005216:	ed9d 1b02 	vldr	d1, [sp, #8]
 800521a:	ed9d 0b00 	vldr	d0, [sp]
 800521e:	2001      	movs	r0, #1
 8005220:	f000 fe72 	bl	8005f08 <__kernel_sin>
 8005224:	ec51 0b10 	vmov	r0, r1, d0
 8005228:	e7e6      	b.n	80051f8 <sin+0x30>
 800522a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800522e:	ed9d 0b00 	vldr	d0, [sp]
 8005232:	f000 fa51 	bl	80056d8 <__kernel_cos>
 8005236:	e7f5      	b.n	8005224 <sin+0x5c>
 8005238:	ed9d 1b02 	vldr	d1, [sp, #8]
 800523c:	ed9d 0b00 	vldr	d0, [sp]
 8005240:	2001      	movs	r0, #1
 8005242:	f000 fe61 	bl	8005f08 <__kernel_sin>
 8005246:	ec53 2b10 	vmov	r2, r3, d0
 800524a:	ee10 0a10 	vmov	r0, s0
 800524e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005252:	e7d1      	b.n	80051f8 <sin+0x30>
 8005254:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005258:	ed9d 0b00 	vldr	d0, [sp]
 800525c:	f000 fa3c 	bl	80056d8 <__kernel_cos>
 8005260:	e7f1      	b.n	8005246 <sin+0x7e>
 8005262:	bf00      	nop
 8005264:	f3af 8000 	nop.w
	...
 8005270:	3fe921fb 	.word	0x3fe921fb
 8005274:	7fefffff 	.word	0x7fefffff

08005278 <sqrtf>:
 8005278:	b508      	push	{r3, lr}
 800527a:	ed2d 8b02 	vpush	{d8}
 800527e:	eeb0 8a40 	vmov.f32	s16, s0
 8005282:	f000 fa25 	bl	80056d0 <__ieee754_sqrtf>
 8005286:	eeb4 8a48 	vcmp.f32	s16, s16
 800528a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800528e:	d60c      	bvs.n	80052aa <sqrtf+0x32>
 8005290:	eddf 8a07 	vldr	s17, [pc, #28]	; 80052b0 <sqrtf+0x38>
 8005294:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800529c:	d505      	bpl.n	80052aa <sqrtf+0x32>
 800529e:	f7fe ff27 	bl	80040f0 <__errno>
 80052a2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80052a6:	2321      	movs	r3, #33	; 0x21
 80052a8:	6003      	str	r3, [r0, #0]
 80052aa:	ecbd 8b02 	vpop	{d8}
 80052ae:	bd08      	pop	{r3, pc}
	...

080052b8 <__ieee754_rem_pio2>:
 80052b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052bc:	ed2d 8b02 	vpush	{d8}
 80052c0:	ec55 4b10 	vmov	r4, r5, d0
 80052c4:	4bca      	ldr	r3, [pc, #808]	; (80055f0 <__ieee754_rem_pio2+0x338>)
 80052c6:	b08b      	sub	sp, #44	; 0x2c
 80052c8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80052cc:	4598      	cmp	r8, r3
 80052ce:	4682      	mov	sl, r0
 80052d0:	9502      	str	r5, [sp, #8]
 80052d2:	dc08      	bgt.n	80052e6 <__ieee754_rem_pio2+0x2e>
 80052d4:	2200      	movs	r2, #0
 80052d6:	2300      	movs	r3, #0
 80052d8:	ed80 0b00 	vstr	d0, [r0]
 80052dc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80052e0:	f04f 0b00 	mov.w	fp, #0
 80052e4:	e028      	b.n	8005338 <__ieee754_rem_pio2+0x80>
 80052e6:	4bc3      	ldr	r3, [pc, #780]	; (80055f4 <__ieee754_rem_pio2+0x33c>)
 80052e8:	4598      	cmp	r8, r3
 80052ea:	dc78      	bgt.n	80053de <__ieee754_rem_pio2+0x126>
 80052ec:	9b02      	ldr	r3, [sp, #8]
 80052ee:	4ec2      	ldr	r6, [pc, #776]	; (80055f8 <__ieee754_rem_pio2+0x340>)
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	ee10 0a10 	vmov	r0, s0
 80052f6:	a3b0      	add	r3, pc, #704	; (adr r3, 80055b8 <__ieee754_rem_pio2+0x300>)
 80052f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fc:	4629      	mov	r1, r5
 80052fe:	dd39      	ble.n	8005374 <__ieee754_rem_pio2+0xbc>
 8005300:	f7fa ffba 	bl	8000278 <__aeabi_dsub>
 8005304:	45b0      	cmp	r8, r6
 8005306:	4604      	mov	r4, r0
 8005308:	460d      	mov	r5, r1
 800530a:	d01b      	beq.n	8005344 <__ieee754_rem_pio2+0x8c>
 800530c:	a3ac      	add	r3, pc, #688	; (adr r3, 80055c0 <__ieee754_rem_pio2+0x308>)
 800530e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005312:	f7fa ffb1 	bl	8000278 <__aeabi_dsub>
 8005316:	4602      	mov	r2, r0
 8005318:	460b      	mov	r3, r1
 800531a:	e9ca 2300 	strd	r2, r3, [sl]
 800531e:	4620      	mov	r0, r4
 8005320:	4629      	mov	r1, r5
 8005322:	f7fa ffa9 	bl	8000278 <__aeabi_dsub>
 8005326:	a3a6      	add	r3, pc, #664	; (adr r3, 80055c0 <__ieee754_rem_pio2+0x308>)
 8005328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532c:	f7fa ffa4 	bl	8000278 <__aeabi_dsub>
 8005330:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005334:	f04f 0b01 	mov.w	fp, #1
 8005338:	4658      	mov	r0, fp
 800533a:	b00b      	add	sp, #44	; 0x2c
 800533c:	ecbd 8b02 	vpop	{d8}
 8005340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005344:	a3a0      	add	r3, pc, #640	; (adr r3, 80055c8 <__ieee754_rem_pio2+0x310>)
 8005346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534a:	f7fa ff95 	bl	8000278 <__aeabi_dsub>
 800534e:	a3a0      	add	r3, pc, #640	; (adr r3, 80055d0 <__ieee754_rem_pio2+0x318>)
 8005350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005354:	4604      	mov	r4, r0
 8005356:	460d      	mov	r5, r1
 8005358:	f7fa ff8e 	bl	8000278 <__aeabi_dsub>
 800535c:	4602      	mov	r2, r0
 800535e:	460b      	mov	r3, r1
 8005360:	e9ca 2300 	strd	r2, r3, [sl]
 8005364:	4620      	mov	r0, r4
 8005366:	4629      	mov	r1, r5
 8005368:	f7fa ff86 	bl	8000278 <__aeabi_dsub>
 800536c:	a398      	add	r3, pc, #608	; (adr r3, 80055d0 <__ieee754_rem_pio2+0x318>)
 800536e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005372:	e7db      	b.n	800532c <__ieee754_rem_pio2+0x74>
 8005374:	f7fa ff82 	bl	800027c <__adddf3>
 8005378:	45b0      	cmp	r8, r6
 800537a:	4604      	mov	r4, r0
 800537c:	460d      	mov	r5, r1
 800537e:	d016      	beq.n	80053ae <__ieee754_rem_pio2+0xf6>
 8005380:	a38f      	add	r3, pc, #572	; (adr r3, 80055c0 <__ieee754_rem_pio2+0x308>)
 8005382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005386:	f7fa ff79 	bl	800027c <__adddf3>
 800538a:	4602      	mov	r2, r0
 800538c:	460b      	mov	r3, r1
 800538e:	e9ca 2300 	strd	r2, r3, [sl]
 8005392:	4620      	mov	r0, r4
 8005394:	4629      	mov	r1, r5
 8005396:	f7fa ff6f 	bl	8000278 <__aeabi_dsub>
 800539a:	a389      	add	r3, pc, #548	; (adr r3, 80055c0 <__ieee754_rem_pio2+0x308>)
 800539c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a0:	f7fa ff6c 	bl	800027c <__adddf3>
 80053a4:	f04f 3bff 	mov.w	fp, #4294967295
 80053a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80053ac:	e7c4      	b.n	8005338 <__ieee754_rem_pio2+0x80>
 80053ae:	a386      	add	r3, pc, #536	; (adr r3, 80055c8 <__ieee754_rem_pio2+0x310>)
 80053b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b4:	f7fa ff62 	bl	800027c <__adddf3>
 80053b8:	a385      	add	r3, pc, #532	; (adr r3, 80055d0 <__ieee754_rem_pio2+0x318>)
 80053ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053be:	4604      	mov	r4, r0
 80053c0:	460d      	mov	r5, r1
 80053c2:	f7fa ff5b 	bl	800027c <__adddf3>
 80053c6:	4602      	mov	r2, r0
 80053c8:	460b      	mov	r3, r1
 80053ca:	e9ca 2300 	strd	r2, r3, [sl]
 80053ce:	4620      	mov	r0, r4
 80053d0:	4629      	mov	r1, r5
 80053d2:	f7fa ff51 	bl	8000278 <__aeabi_dsub>
 80053d6:	a37e      	add	r3, pc, #504	; (adr r3, 80055d0 <__ieee754_rem_pio2+0x318>)
 80053d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053dc:	e7e0      	b.n	80053a0 <__ieee754_rem_pio2+0xe8>
 80053de:	4b87      	ldr	r3, [pc, #540]	; (80055fc <__ieee754_rem_pio2+0x344>)
 80053e0:	4598      	cmp	r8, r3
 80053e2:	f300 80d9 	bgt.w	8005598 <__ieee754_rem_pio2+0x2e0>
 80053e6:	f000 fe4d 	bl	8006084 <fabs>
 80053ea:	ec55 4b10 	vmov	r4, r5, d0
 80053ee:	ee10 0a10 	vmov	r0, s0
 80053f2:	a379      	add	r3, pc, #484	; (adr r3, 80055d8 <__ieee754_rem_pio2+0x320>)
 80053f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f8:	4629      	mov	r1, r5
 80053fa:	f7fb f8f5 	bl	80005e8 <__aeabi_dmul>
 80053fe:	4b80      	ldr	r3, [pc, #512]	; (8005600 <__ieee754_rem_pio2+0x348>)
 8005400:	2200      	movs	r2, #0
 8005402:	f7fa ff3b 	bl	800027c <__adddf3>
 8005406:	f7fb fb89 	bl	8000b1c <__aeabi_d2iz>
 800540a:	4683      	mov	fp, r0
 800540c:	f7fb f882 	bl	8000514 <__aeabi_i2d>
 8005410:	4602      	mov	r2, r0
 8005412:	460b      	mov	r3, r1
 8005414:	ec43 2b18 	vmov	d8, r2, r3
 8005418:	a367      	add	r3, pc, #412	; (adr r3, 80055b8 <__ieee754_rem_pio2+0x300>)
 800541a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541e:	f7fb f8e3 	bl	80005e8 <__aeabi_dmul>
 8005422:	4602      	mov	r2, r0
 8005424:	460b      	mov	r3, r1
 8005426:	4620      	mov	r0, r4
 8005428:	4629      	mov	r1, r5
 800542a:	f7fa ff25 	bl	8000278 <__aeabi_dsub>
 800542e:	a364      	add	r3, pc, #400	; (adr r3, 80055c0 <__ieee754_rem_pio2+0x308>)
 8005430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005434:	4606      	mov	r6, r0
 8005436:	460f      	mov	r7, r1
 8005438:	ec51 0b18 	vmov	r0, r1, d8
 800543c:	f7fb f8d4 	bl	80005e8 <__aeabi_dmul>
 8005440:	f1bb 0f1f 	cmp.w	fp, #31
 8005444:	4604      	mov	r4, r0
 8005446:	460d      	mov	r5, r1
 8005448:	dc0d      	bgt.n	8005466 <__ieee754_rem_pio2+0x1ae>
 800544a:	4b6e      	ldr	r3, [pc, #440]	; (8005604 <__ieee754_rem_pio2+0x34c>)
 800544c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005454:	4543      	cmp	r3, r8
 8005456:	d006      	beq.n	8005466 <__ieee754_rem_pio2+0x1ae>
 8005458:	4622      	mov	r2, r4
 800545a:	462b      	mov	r3, r5
 800545c:	4630      	mov	r0, r6
 800545e:	4639      	mov	r1, r7
 8005460:	f7fa ff0a 	bl	8000278 <__aeabi_dsub>
 8005464:	e00f      	b.n	8005486 <__ieee754_rem_pio2+0x1ce>
 8005466:	462b      	mov	r3, r5
 8005468:	4622      	mov	r2, r4
 800546a:	4630      	mov	r0, r6
 800546c:	4639      	mov	r1, r7
 800546e:	f7fa ff03 	bl	8000278 <__aeabi_dsub>
 8005472:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005476:	9303      	str	r3, [sp, #12]
 8005478:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800547c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8005480:	f1b8 0f10 	cmp.w	r8, #16
 8005484:	dc02      	bgt.n	800548c <__ieee754_rem_pio2+0x1d4>
 8005486:	e9ca 0100 	strd	r0, r1, [sl]
 800548a:	e039      	b.n	8005500 <__ieee754_rem_pio2+0x248>
 800548c:	a34e      	add	r3, pc, #312	; (adr r3, 80055c8 <__ieee754_rem_pio2+0x310>)
 800548e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005492:	ec51 0b18 	vmov	r0, r1, d8
 8005496:	f7fb f8a7 	bl	80005e8 <__aeabi_dmul>
 800549a:	4604      	mov	r4, r0
 800549c:	460d      	mov	r5, r1
 800549e:	4602      	mov	r2, r0
 80054a0:	460b      	mov	r3, r1
 80054a2:	4630      	mov	r0, r6
 80054a4:	4639      	mov	r1, r7
 80054a6:	f7fa fee7 	bl	8000278 <__aeabi_dsub>
 80054aa:	4602      	mov	r2, r0
 80054ac:	460b      	mov	r3, r1
 80054ae:	4680      	mov	r8, r0
 80054b0:	4689      	mov	r9, r1
 80054b2:	4630      	mov	r0, r6
 80054b4:	4639      	mov	r1, r7
 80054b6:	f7fa fedf 	bl	8000278 <__aeabi_dsub>
 80054ba:	4622      	mov	r2, r4
 80054bc:	462b      	mov	r3, r5
 80054be:	f7fa fedb 	bl	8000278 <__aeabi_dsub>
 80054c2:	a343      	add	r3, pc, #268	; (adr r3, 80055d0 <__ieee754_rem_pio2+0x318>)
 80054c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c8:	4604      	mov	r4, r0
 80054ca:	460d      	mov	r5, r1
 80054cc:	ec51 0b18 	vmov	r0, r1, d8
 80054d0:	f7fb f88a 	bl	80005e8 <__aeabi_dmul>
 80054d4:	4622      	mov	r2, r4
 80054d6:	462b      	mov	r3, r5
 80054d8:	f7fa fece 	bl	8000278 <__aeabi_dsub>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	4604      	mov	r4, r0
 80054e2:	460d      	mov	r5, r1
 80054e4:	4640      	mov	r0, r8
 80054e6:	4649      	mov	r1, r9
 80054e8:	f7fa fec6 	bl	8000278 <__aeabi_dsub>
 80054ec:	9a03      	ldr	r2, [sp, #12]
 80054ee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	2b31      	cmp	r3, #49	; 0x31
 80054f6:	dc24      	bgt.n	8005542 <__ieee754_rem_pio2+0x28a>
 80054f8:	e9ca 0100 	strd	r0, r1, [sl]
 80054fc:	4646      	mov	r6, r8
 80054fe:	464f      	mov	r7, r9
 8005500:	e9da 8900 	ldrd	r8, r9, [sl]
 8005504:	4630      	mov	r0, r6
 8005506:	4642      	mov	r2, r8
 8005508:	464b      	mov	r3, r9
 800550a:	4639      	mov	r1, r7
 800550c:	f7fa feb4 	bl	8000278 <__aeabi_dsub>
 8005510:	462b      	mov	r3, r5
 8005512:	4622      	mov	r2, r4
 8005514:	f7fa feb0 	bl	8000278 <__aeabi_dsub>
 8005518:	9b02      	ldr	r3, [sp, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005520:	f6bf af0a 	bge.w	8005338 <__ieee754_rem_pio2+0x80>
 8005524:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005528:	f8ca 3004 	str.w	r3, [sl, #4]
 800552c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005530:	f8ca 8000 	str.w	r8, [sl]
 8005534:	f8ca 0008 	str.w	r0, [sl, #8]
 8005538:	f8ca 300c 	str.w	r3, [sl, #12]
 800553c:	f1cb 0b00 	rsb	fp, fp, #0
 8005540:	e6fa      	b.n	8005338 <__ieee754_rem_pio2+0x80>
 8005542:	a327      	add	r3, pc, #156	; (adr r3, 80055e0 <__ieee754_rem_pio2+0x328>)
 8005544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005548:	ec51 0b18 	vmov	r0, r1, d8
 800554c:	f7fb f84c 	bl	80005e8 <__aeabi_dmul>
 8005550:	4604      	mov	r4, r0
 8005552:	460d      	mov	r5, r1
 8005554:	4602      	mov	r2, r0
 8005556:	460b      	mov	r3, r1
 8005558:	4640      	mov	r0, r8
 800555a:	4649      	mov	r1, r9
 800555c:	f7fa fe8c 	bl	8000278 <__aeabi_dsub>
 8005560:	4602      	mov	r2, r0
 8005562:	460b      	mov	r3, r1
 8005564:	4606      	mov	r6, r0
 8005566:	460f      	mov	r7, r1
 8005568:	4640      	mov	r0, r8
 800556a:	4649      	mov	r1, r9
 800556c:	f7fa fe84 	bl	8000278 <__aeabi_dsub>
 8005570:	4622      	mov	r2, r4
 8005572:	462b      	mov	r3, r5
 8005574:	f7fa fe80 	bl	8000278 <__aeabi_dsub>
 8005578:	a31b      	add	r3, pc, #108	; (adr r3, 80055e8 <__ieee754_rem_pio2+0x330>)
 800557a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557e:	4604      	mov	r4, r0
 8005580:	460d      	mov	r5, r1
 8005582:	ec51 0b18 	vmov	r0, r1, d8
 8005586:	f7fb f82f 	bl	80005e8 <__aeabi_dmul>
 800558a:	4622      	mov	r2, r4
 800558c:	462b      	mov	r3, r5
 800558e:	f7fa fe73 	bl	8000278 <__aeabi_dsub>
 8005592:	4604      	mov	r4, r0
 8005594:	460d      	mov	r5, r1
 8005596:	e75f      	b.n	8005458 <__ieee754_rem_pio2+0x1a0>
 8005598:	4b1b      	ldr	r3, [pc, #108]	; (8005608 <__ieee754_rem_pio2+0x350>)
 800559a:	4598      	cmp	r8, r3
 800559c:	dd36      	ble.n	800560c <__ieee754_rem_pio2+0x354>
 800559e:	ee10 2a10 	vmov	r2, s0
 80055a2:	462b      	mov	r3, r5
 80055a4:	4620      	mov	r0, r4
 80055a6:	4629      	mov	r1, r5
 80055a8:	f7fa fe66 	bl	8000278 <__aeabi_dsub>
 80055ac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80055b0:	e9ca 0100 	strd	r0, r1, [sl]
 80055b4:	e694      	b.n	80052e0 <__ieee754_rem_pio2+0x28>
 80055b6:	bf00      	nop
 80055b8:	54400000 	.word	0x54400000
 80055bc:	3ff921fb 	.word	0x3ff921fb
 80055c0:	1a626331 	.word	0x1a626331
 80055c4:	3dd0b461 	.word	0x3dd0b461
 80055c8:	1a600000 	.word	0x1a600000
 80055cc:	3dd0b461 	.word	0x3dd0b461
 80055d0:	2e037073 	.word	0x2e037073
 80055d4:	3ba3198a 	.word	0x3ba3198a
 80055d8:	6dc9c883 	.word	0x6dc9c883
 80055dc:	3fe45f30 	.word	0x3fe45f30
 80055e0:	2e000000 	.word	0x2e000000
 80055e4:	3ba3198a 	.word	0x3ba3198a
 80055e8:	252049c1 	.word	0x252049c1
 80055ec:	397b839a 	.word	0x397b839a
 80055f0:	3fe921fb 	.word	0x3fe921fb
 80055f4:	4002d97b 	.word	0x4002d97b
 80055f8:	3ff921fb 	.word	0x3ff921fb
 80055fc:	413921fb 	.word	0x413921fb
 8005600:	3fe00000 	.word	0x3fe00000
 8005604:	08006478 	.word	0x08006478
 8005608:	7fefffff 	.word	0x7fefffff
 800560c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8005610:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8005614:	ee10 0a10 	vmov	r0, s0
 8005618:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800561c:	ee10 6a10 	vmov	r6, s0
 8005620:	460f      	mov	r7, r1
 8005622:	f7fb fa7b 	bl	8000b1c <__aeabi_d2iz>
 8005626:	f7fa ff75 	bl	8000514 <__aeabi_i2d>
 800562a:	4602      	mov	r2, r0
 800562c:	460b      	mov	r3, r1
 800562e:	4630      	mov	r0, r6
 8005630:	4639      	mov	r1, r7
 8005632:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005636:	f7fa fe1f 	bl	8000278 <__aeabi_dsub>
 800563a:	4b23      	ldr	r3, [pc, #140]	; (80056c8 <__ieee754_rem_pio2+0x410>)
 800563c:	2200      	movs	r2, #0
 800563e:	f7fa ffd3 	bl	80005e8 <__aeabi_dmul>
 8005642:	460f      	mov	r7, r1
 8005644:	4606      	mov	r6, r0
 8005646:	f7fb fa69 	bl	8000b1c <__aeabi_d2iz>
 800564a:	f7fa ff63 	bl	8000514 <__aeabi_i2d>
 800564e:	4602      	mov	r2, r0
 8005650:	460b      	mov	r3, r1
 8005652:	4630      	mov	r0, r6
 8005654:	4639      	mov	r1, r7
 8005656:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800565a:	f7fa fe0d 	bl	8000278 <__aeabi_dsub>
 800565e:	4b1a      	ldr	r3, [pc, #104]	; (80056c8 <__ieee754_rem_pio2+0x410>)
 8005660:	2200      	movs	r2, #0
 8005662:	f7fa ffc1 	bl	80005e8 <__aeabi_dmul>
 8005666:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800566a:	ad04      	add	r5, sp, #16
 800566c:	f04f 0803 	mov.w	r8, #3
 8005670:	46a9      	mov	r9, r5
 8005672:	2600      	movs	r6, #0
 8005674:	2700      	movs	r7, #0
 8005676:	4632      	mov	r2, r6
 8005678:	463b      	mov	r3, r7
 800567a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800567e:	46c3      	mov	fp, r8
 8005680:	3d08      	subs	r5, #8
 8005682:	f108 38ff 	add.w	r8, r8, #4294967295
 8005686:	f7fb fa17 	bl	8000ab8 <__aeabi_dcmpeq>
 800568a:	2800      	cmp	r0, #0
 800568c:	d1f3      	bne.n	8005676 <__ieee754_rem_pio2+0x3be>
 800568e:	4b0f      	ldr	r3, [pc, #60]	; (80056cc <__ieee754_rem_pio2+0x414>)
 8005690:	9301      	str	r3, [sp, #4]
 8005692:	2302      	movs	r3, #2
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	4622      	mov	r2, r4
 8005698:	465b      	mov	r3, fp
 800569a:	4651      	mov	r1, sl
 800569c:	4648      	mov	r0, r9
 800569e:	f000 f8e3 	bl	8005868 <__kernel_rem_pio2>
 80056a2:	9b02      	ldr	r3, [sp, #8]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	4683      	mov	fp, r0
 80056a8:	f6bf ae46 	bge.w	8005338 <__ieee754_rem_pio2+0x80>
 80056ac:	e9da 2100 	ldrd	r2, r1, [sl]
 80056b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80056b4:	e9ca 2300 	strd	r2, r3, [sl]
 80056b8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80056bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80056c0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80056c4:	e73a      	b.n	800553c <__ieee754_rem_pio2+0x284>
 80056c6:	bf00      	nop
 80056c8:	41700000 	.word	0x41700000
 80056cc:	080064f8 	.word	0x080064f8

080056d0 <__ieee754_sqrtf>:
 80056d0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80056d4:	4770      	bx	lr
	...

080056d8 <__kernel_cos>:
 80056d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056dc:	ec57 6b10 	vmov	r6, r7, d0
 80056e0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80056e4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80056e8:	ed8d 1b00 	vstr	d1, [sp]
 80056ec:	da07      	bge.n	80056fe <__kernel_cos+0x26>
 80056ee:	ee10 0a10 	vmov	r0, s0
 80056f2:	4639      	mov	r1, r7
 80056f4:	f7fb fa12 	bl	8000b1c <__aeabi_d2iz>
 80056f8:	2800      	cmp	r0, #0
 80056fa:	f000 8088 	beq.w	800580e <__kernel_cos+0x136>
 80056fe:	4632      	mov	r2, r6
 8005700:	463b      	mov	r3, r7
 8005702:	4630      	mov	r0, r6
 8005704:	4639      	mov	r1, r7
 8005706:	f7fa ff6f 	bl	80005e8 <__aeabi_dmul>
 800570a:	4b51      	ldr	r3, [pc, #324]	; (8005850 <__kernel_cos+0x178>)
 800570c:	2200      	movs	r2, #0
 800570e:	4604      	mov	r4, r0
 8005710:	460d      	mov	r5, r1
 8005712:	f7fa ff69 	bl	80005e8 <__aeabi_dmul>
 8005716:	a340      	add	r3, pc, #256	; (adr r3, 8005818 <__kernel_cos+0x140>)
 8005718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571c:	4682      	mov	sl, r0
 800571e:	468b      	mov	fp, r1
 8005720:	4620      	mov	r0, r4
 8005722:	4629      	mov	r1, r5
 8005724:	f7fa ff60 	bl	80005e8 <__aeabi_dmul>
 8005728:	a33d      	add	r3, pc, #244	; (adr r3, 8005820 <__kernel_cos+0x148>)
 800572a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572e:	f7fa fda5 	bl	800027c <__adddf3>
 8005732:	4622      	mov	r2, r4
 8005734:	462b      	mov	r3, r5
 8005736:	f7fa ff57 	bl	80005e8 <__aeabi_dmul>
 800573a:	a33b      	add	r3, pc, #236	; (adr r3, 8005828 <__kernel_cos+0x150>)
 800573c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005740:	f7fa fd9a 	bl	8000278 <__aeabi_dsub>
 8005744:	4622      	mov	r2, r4
 8005746:	462b      	mov	r3, r5
 8005748:	f7fa ff4e 	bl	80005e8 <__aeabi_dmul>
 800574c:	a338      	add	r3, pc, #224	; (adr r3, 8005830 <__kernel_cos+0x158>)
 800574e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005752:	f7fa fd93 	bl	800027c <__adddf3>
 8005756:	4622      	mov	r2, r4
 8005758:	462b      	mov	r3, r5
 800575a:	f7fa ff45 	bl	80005e8 <__aeabi_dmul>
 800575e:	a336      	add	r3, pc, #216	; (adr r3, 8005838 <__kernel_cos+0x160>)
 8005760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005764:	f7fa fd88 	bl	8000278 <__aeabi_dsub>
 8005768:	4622      	mov	r2, r4
 800576a:	462b      	mov	r3, r5
 800576c:	f7fa ff3c 	bl	80005e8 <__aeabi_dmul>
 8005770:	a333      	add	r3, pc, #204	; (adr r3, 8005840 <__kernel_cos+0x168>)
 8005772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005776:	f7fa fd81 	bl	800027c <__adddf3>
 800577a:	4622      	mov	r2, r4
 800577c:	462b      	mov	r3, r5
 800577e:	f7fa ff33 	bl	80005e8 <__aeabi_dmul>
 8005782:	4622      	mov	r2, r4
 8005784:	462b      	mov	r3, r5
 8005786:	f7fa ff2f 	bl	80005e8 <__aeabi_dmul>
 800578a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800578e:	4604      	mov	r4, r0
 8005790:	460d      	mov	r5, r1
 8005792:	4630      	mov	r0, r6
 8005794:	4639      	mov	r1, r7
 8005796:	f7fa ff27 	bl	80005e8 <__aeabi_dmul>
 800579a:	460b      	mov	r3, r1
 800579c:	4602      	mov	r2, r0
 800579e:	4629      	mov	r1, r5
 80057a0:	4620      	mov	r0, r4
 80057a2:	f7fa fd69 	bl	8000278 <__aeabi_dsub>
 80057a6:	4b2b      	ldr	r3, [pc, #172]	; (8005854 <__kernel_cos+0x17c>)
 80057a8:	4598      	cmp	r8, r3
 80057aa:	4606      	mov	r6, r0
 80057ac:	460f      	mov	r7, r1
 80057ae:	dc10      	bgt.n	80057d2 <__kernel_cos+0xfa>
 80057b0:	4602      	mov	r2, r0
 80057b2:	460b      	mov	r3, r1
 80057b4:	4650      	mov	r0, sl
 80057b6:	4659      	mov	r1, fp
 80057b8:	f7fa fd5e 	bl	8000278 <__aeabi_dsub>
 80057bc:	460b      	mov	r3, r1
 80057be:	4926      	ldr	r1, [pc, #152]	; (8005858 <__kernel_cos+0x180>)
 80057c0:	4602      	mov	r2, r0
 80057c2:	2000      	movs	r0, #0
 80057c4:	f7fa fd58 	bl	8000278 <__aeabi_dsub>
 80057c8:	ec41 0b10 	vmov	d0, r0, r1
 80057cc:	b003      	add	sp, #12
 80057ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057d2:	4b22      	ldr	r3, [pc, #136]	; (800585c <__kernel_cos+0x184>)
 80057d4:	4920      	ldr	r1, [pc, #128]	; (8005858 <__kernel_cos+0x180>)
 80057d6:	4598      	cmp	r8, r3
 80057d8:	bfcc      	ite	gt
 80057da:	4d21      	ldrgt	r5, [pc, #132]	; (8005860 <__kernel_cos+0x188>)
 80057dc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80057e0:	2400      	movs	r4, #0
 80057e2:	4622      	mov	r2, r4
 80057e4:	462b      	mov	r3, r5
 80057e6:	2000      	movs	r0, #0
 80057e8:	f7fa fd46 	bl	8000278 <__aeabi_dsub>
 80057ec:	4622      	mov	r2, r4
 80057ee:	4680      	mov	r8, r0
 80057f0:	4689      	mov	r9, r1
 80057f2:	462b      	mov	r3, r5
 80057f4:	4650      	mov	r0, sl
 80057f6:	4659      	mov	r1, fp
 80057f8:	f7fa fd3e 	bl	8000278 <__aeabi_dsub>
 80057fc:	4632      	mov	r2, r6
 80057fe:	463b      	mov	r3, r7
 8005800:	f7fa fd3a 	bl	8000278 <__aeabi_dsub>
 8005804:	4602      	mov	r2, r0
 8005806:	460b      	mov	r3, r1
 8005808:	4640      	mov	r0, r8
 800580a:	4649      	mov	r1, r9
 800580c:	e7da      	b.n	80057c4 <__kernel_cos+0xec>
 800580e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8005848 <__kernel_cos+0x170>
 8005812:	e7db      	b.n	80057cc <__kernel_cos+0xf4>
 8005814:	f3af 8000 	nop.w
 8005818:	be8838d4 	.word	0xbe8838d4
 800581c:	bda8fae9 	.word	0xbda8fae9
 8005820:	bdb4b1c4 	.word	0xbdb4b1c4
 8005824:	3e21ee9e 	.word	0x3e21ee9e
 8005828:	809c52ad 	.word	0x809c52ad
 800582c:	3e927e4f 	.word	0x3e927e4f
 8005830:	19cb1590 	.word	0x19cb1590
 8005834:	3efa01a0 	.word	0x3efa01a0
 8005838:	16c15177 	.word	0x16c15177
 800583c:	3f56c16c 	.word	0x3f56c16c
 8005840:	5555554c 	.word	0x5555554c
 8005844:	3fa55555 	.word	0x3fa55555
 8005848:	00000000 	.word	0x00000000
 800584c:	3ff00000 	.word	0x3ff00000
 8005850:	3fe00000 	.word	0x3fe00000
 8005854:	3fd33332 	.word	0x3fd33332
 8005858:	3ff00000 	.word	0x3ff00000
 800585c:	3fe90000 	.word	0x3fe90000
 8005860:	3fd20000 	.word	0x3fd20000
 8005864:	00000000 	.word	0x00000000

08005868 <__kernel_rem_pio2>:
 8005868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800586c:	ed2d 8b02 	vpush	{d8}
 8005870:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8005874:	f112 0f14 	cmn.w	r2, #20
 8005878:	9308      	str	r3, [sp, #32]
 800587a:	9101      	str	r1, [sp, #4]
 800587c:	4bc4      	ldr	r3, [pc, #784]	; (8005b90 <__kernel_rem_pio2+0x328>)
 800587e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8005880:	900b      	str	r0, [sp, #44]	; 0x2c
 8005882:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005886:	9302      	str	r3, [sp, #8]
 8005888:	9b08      	ldr	r3, [sp, #32]
 800588a:	f103 33ff 	add.w	r3, r3, #4294967295
 800588e:	bfa8      	it	ge
 8005890:	1ed4      	subge	r4, r2, #3
 8005892:	9306      	str	r3, [sp, #24]
 8005894:	bfb2      	itee	lt
 8005896:	2400      	movlt	r4, #0
 8005898:	2318      	movge	r3, #24
 800589a:	fb94 f4f3 	sdivge	r4, r4, r3
 800589e:	f06f 0317 	mvn.w	r3, #23
 80058a2:	fb04 3303 	mla	r3, r4, r3, r3
 80058a6:	eb03 0a02 	add.w	sl, r3, r2
 80058aa:	9b02      	ldr	r3, [sp, #8]
 80058ac:	9a06      	ldr	r2, [sp, #24]
 80058ae:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8005b80 <__kernel_rem_pio2+0x318>
 80058b2:	eb03 0802 	add.w	r8, r3, r2
 80058b6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80058b8:	1aa7      	subs	r7, r4, r2
 80058ba:	ae22      	add	r6, sp, #136	; 0x88
 80058bc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80058c0:	2500      	movs	r5, #0
 80058c2:	4545      	cmp	r5, r8
 80058c4:	dd13      	ble.n	80058ee <__kernel_rem_pio2+0x86>
 80058c6:	9b08      	ldr	r3, [sp, #32]
 80058c8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8005b80 <__kernel_rem_pio2+0x318>
 80058cc:	aa22      	add	r2, sp, #136	; 0x88
 80058ce:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80058d2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80058d6:	f04f 0800 	mov.w	r8, #0
 80058da:	9b02      	ldr	r3, [sp, #8]
 80058dc:	4598      	cmp	r8, r3
 80058de:	dc2f      	bgt.n	8005940 <__kernel_rem_pio2+0xd8>
 80058e0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80058e4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80058e8:	462f      	mov	r7, r5
 80058ea:	2600      	movs	r6, #0
 80058ec:	e01b      	b.n	8005926 <__kernel_rem_pio2+0xbe>
 80058ee:	42ef      	cmn	r7, r5
 80058f0:	d407      	bmi.n	8005902 <__kernel_rem_pio2+0x9a>
 80058f2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80058f6:	f7fa fe0d 	bl	8000514 <__aeabi_i2d>
 80058fa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80058fe:	3501      	adds	r5, #1
 8005900:	e7df      	b.n	80058c2 <__kernel_rem_pio2+0x5a>
 8005902:	ec51 0b18 	vmov	r0, r1, d8
 8005906:	e7f8      	b.n	80058fa <__kernel_rem_pio2+0x92>
 8005908:	e9d7 2300 	ldrd	r2, r3, [r7]
 800590c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005910:	f7fa fe6a 	bl	80005e8 <__aeabi_dmul>
 8005914:	4602      	mov	r2, r0
 8005916:	460b      	mov	r3, r1
 8005918:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800591c:	f7fa fcae 	bl	800027c <__adddf3>
 8005920:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005924:	3601      	adds	r6, #1
 8005926:	9b06      	ldr	r3, [sp, #24]
 8005928:	429e      	cmp	r6, r3
 800592a:	f1a7 0708 	sub.w	r7, r7, #8
 800592e:	ddeb      	ble.n	8005908 <__kernel_rem_pio2+0xa0>
 8005930:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005934:	f108 0801 	add.w	r8, r8, #1
 8005938:	ecab 7b02 	vstmia	fp!, {d7}
 800593c:	3508      	adds	r5, #8
 800593e:	e7cc      	b.n	80058da <__kernel_rem_pio2+0x72>
 8005940:	9b02      	ldr	r3, [sp, #8]
 8005942:	aa0e      	add	r2, sp, #56	; 0x38
 8005944:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005948:	930d      	str	r3, [sp, #52]	; 0x34
 800594a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800594c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005950:	9c02      	ldr	r4, [sp, #8]
 8005952:	930c      	str	r3, [sp, #48]	; 0x30
 8005954:	00e3      	lsls	r3, r4, #3
 8005956:	930a      	str	r3, [sp, #40]	; 0x28
 8005958:	ab9a      	add	r3, sp, #616	; 0x268
 800595a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800595e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8005962:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8005966:	ab72      	add	r3, sp, #456	; 0x1c8
 8005968:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800596c:	46c3      	mov	fp, r8
 800596e:	46a1      	mov	r9, r4
 8005970:	f1b9 0f00 	cmp.w	r9, #0
 8005974:	f1a5 0508 	sub.w	r5, r5, #8
 8005978:	dc77      	bgt.n	8005a6a <__kernel_rem_pio2+0x202>
 800597a:	ec47 6b10 	vmov	d0, r6, r7
 800597e:	4650      	mov	r0, sl
 8005980:	f000 fc0a 	bl	8006198 <scalbn>
 8005984:	ec57 6b10 	vmov	r6, r7, d0
 8005988:	2200      	movs	r2, #0
 800598a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800598e:	ee10 0a10 	vmov	r0, s0
 8005992:	4639      	mov	r1, r7
 8005994:	f7fa fe28 	bl	80005e8 <__aeabi_dmul>
 8005998:	ec41 0b10 	vmov	d0, r0, r1
 800599c:	f000 fb7c 	bl	8006098 <floor>
 80059a0:	4b7c      	ldr	r3, [pc, #496]	; (8005b94 <__kernel_rem_pio2+0x32c>)
 80059a2:	ec51 0b10 	vmov	r0, r1, d0
 80059a6:	2200      	movs	r2, #0
 80059a8:	f7fa fe1e 	bl	80005e8 <__aeabi_dmul>
 80059ac:	4602      	mov	r2, r0
 80059ae:	460b      	mov	r3, r1
 80059b0:	4630      	mov	r0, r6
 80059b2:	4639      	mov	r1, r7
 80059b4:	f7fa fc60 	bl	8000278 <__aeabi_dsub>
 80059b8:	460f      	mov	r7, r1
 80059ba:	4606      	mov	r6, r0
 80059bc:	f7fb f8ae 	bl	8000b1c <__aeabi_d2iz>
 80059c0:	9004      	str	r0, [sp, #16]
 80059c2:	f7fa fda7 	bl	8000514 <__aeabi_i2d>
 80059c6:	4602      	mov	r2, r0
 80059c8:	460b      	mov	r3, r1
 80059ca:	4630      	mov	r0, r6
 80059cc:	4639      	mov	r1, r7
 80059ce:	f7fa fc53 	bl	8000278 <__aeabi_dsub>
 80059d2:	f1ba 0f00 	cmp.w	sl, #0
 80059d6:	4606      	mov	r6, r0
 80059d8:	460f      	mov	r7, r1
 80059da:	dd6d      	ble.n	8005ab8 <__kernel_rem_pio2+0x250>
 80059dc:	1e62      	subs	r2, r4, #1
 80059de:	ab0e      	add	r3, sp, #56	; 0x38
 80059e0:	9d04      	ldr	r5, [sp, #16]
 80059e2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80059e6:	f1ca 0118 	rsb	r1, sl, #24
 80059ea:	fa40 f301 	asr.w	r3, r0, r1
 80059ee:	441d      	add	r5, r3
 80059f0:	408b      	lsls	r3, r1
 80059f2:	1ac0      	subs	r0, r0, r3
 80059f4:	ab0e      	add	r3, sp, #56	; 0x38
 80059f6:	9504      	str	r5, [sp, #16]
 80059f8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80059fc:	f1ca 0317 	rsb	r3, sl, #23
 8005a00:	fa40 fb03 	asr.w	fp, r0, r3
 8005a04:	f1bb 0f00 	cmp.w	fp, #0
 8005a08:	dd65      	ble.n	8005ad6 <__kernel_rem_pio2+0x26e>
 8005a0a:	9b04      	ldr	r3, [sp, #16]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	3301      	adds	r3, #1
 8005a10:	9304      	str	r3, [sp, #16]
 8005a12:	4615      	mov	r5, r2
 8005a14:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005a18:	4294      	cmp	r4, r2
 8005a1a:	f300 809c 	bgt.w	8005b56 <__kernel_rem_pio2+0x2ee>
 8005a1e:	f1ba 0f00 	cmp.w	sl, #0
 8005a22:	dd07      	ble.n	8005a34 <__kernel_rem_pio2+0x1cc>
 8005a24:	f1ba 0f01 	cmp.w	sl, #1
 8005a28:	f000 80c0 	beq.w	8005bac <__kernel_rem_pio2+0x344>
 8005a2c:	f1ba 0f02 	cmp.w	sl, #2
 8005a30:	f000 80c6 	beq.w	8005bc0 <__kernel_rem_pio2+0x358>
 8005a34:	f1bb 0f02 	cmp.w	fp, #2
 8005a38:	d14d      	bne.n	8005ad6 <__kernel_rem_pio2+0x26e>
 8005a3a:	4632      	mov	r2, r6
 8005a3c:	463b      	mov	r3, r7
 8005a3e:	4956      	ldr	r1, [pc, #344]	; (8005b98 <__kernel_rem_pio2+0x330>)
 8005a40:	2000      	movs	r0, #0
 8005a42:	f7fa fc19 	bl	8000278 <__aeabi_dsub>
 8005a46:	4606      	mov	r6, r0
 8005a48:	460f      	mov	r7, r1
 8005a4a:	2d00      	cmp	r5, #0
 8005a4c:	d043      	beq.n	8005ad6 <__kernel_rem_pio2+0x26e>
 8005a4e:	4650      	mov	r0, sl
 8005a50:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8005b88 <__kernel_rem_pio2+0x320>
 8005a54:	f000 fba0 	bl	8006198 <scalbn>
 8005a58:	4630      	mov	r0, r6
 8005a5a:	4639      	mov	r1, r7
 8005a5c:	ec53 2b10 	vmov	r2, r3, d0
 8005a60:	f7fa fc0a 	bl	8000278 <__aeabi_dsub>
 8005a64:	4606      	mov	r6, r0
 8005a66:	460f      	mov	r7, r1
 8005a68:	e035      	b.n	8005ad6 <__kernel_rem_pio2+0x26e>
 8005a6a:	4b4c      	ldr	r3, [pc, #304]	; (8005b9c <__kernel_rem_pio2+0x334>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	4630      	mov	r0, r6
 8005a70:	4639      	mov	r1, r7
 8005a72:	f7fa fdb9 	bl	80005e8 <__aeabi_dmul>
 8005a76:	f7fb f851 	bl	8000b1c <__aeabi_d2iz>
 8005a7a:	f7fa fd4b 	bl	8000514 <__aeabi_i2d>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	460b      	mov	r3, r1
 8005a82:	ec43 2b18 	vmov	d8, r2, r3
 8005a86:	4b46      	ldr	r3, [pc, #280]	; (8005ba0 <__kernel_rem_pio2+0x338>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f7fa fdad 	bl	80005e8 <__aeabi_dmul>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	460b      	mov	r3, r1
 8005a92:	4630      	mov	r0, r6
 8005a94:	4639      	mov	r1, r7
 8005a96:	f7fa fbef 	bl	8000278 <__aeabi_dsub>
 8005a9a:	f7fb f83f 	bl	8000b1c <__aeabi_d2iz>
 8005a9e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005aa2:	f84b 0b04 	str.w	r0, [fp], #4
 8005aa6:	ec51 0b18 	vmov	r0, r1, d8
 8005aaa:	f7fa fbe7 	bl	800027c <__adddf3>
 8005aae:	f109 39ff 	add.w	r9, r9, #4294967295
 8005ab2:	4606      	mov	r6, r0
 8005ab4:	460f      	mov	r7, r1
 8005ab6:	e75b      	b.n	8005970 <__kernel_rem_pio2+0x108>
 8005ab8:	d106      	bne.n	8005ac8 <__kernel_rem_pio2+0x260>
 8005aba:	1e63      	subs	r3, r4, #1
 8005abc:	aa0e      	add	r2, sp, #56	; 0x38
 8005abe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005ac2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8005ac6:	e79d      	b.n	8005a04 <__kernel_rem_pio2+0x19c>
 8005ac8:	4b36      	ldr	r3, [pc, #216]	; (8005ba4 <__kernel_rem_pio2+0x33c>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	f7fb f812 	bl	8000af4 <__aeabi_dcmpge>
 8005ad0:	2800      	cmp	r0, #0
 8005ad2:	d13d      	bne.n	8005b50 <__kernel_rem_pio2+0x2e8>
 8005ad4:	4683      	mov	fp, r0
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	2300      	movs	r3, #0
 8005ada:	4630      	mov	r0, r6
 8005adc:	4639      	mov	r1, r7
 8005ade:	f7fa ffeb 	bl	8000ab8 <__aeabi_dcmpeq>
 8005ae2:	2800      	cmp	r0, #0
 8005ae4:	f000 80c0 	beq.w	8005c68 <__kernel_rem_pio2+0x400>
 8005ae8:	1e65      	subs	r5, r4, #1
 8005aea:	462b      	mov	r3, r5
 8005aec:	2200      	movs	r2, #0
 8005aee:	9902      	ldr	r1, [sp, #8]
 8005af0:	428b      	cmp	r3, r1
 8005af2:	da6c      	bge.n	8005bce <__kernel_rem_pio2+0x366>
 8005af4:	2a00      	cmp	r2, #0
 8005af6:	f000 8089 	beq.w	8005c0c <__kernel_rem_pio2+0x3a4>
 8005afa:	ab0e      	add	r3, sp, #56	; 0x38
 8005afc:	f1aa 0a18 	sub.w	sl, sl, #24
 8005b00:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f000 80ad 	beq.w	8005c64 <__kernel_rem_pio2+0x3fc>
 8005b0a:	4650      	mov	r0, sl
 8005b0c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8005b88 <__kernel_rem_pio2+0x320>
 8005b10:	f000 fb42 	bl	8006198 <scalbn>
 8005b14:	ab9a      	add	r3, sp, #616	; 0x268
 8005b16:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005b1a:	ec57 6b10 	vmov	r6, r7, d0
 8005b1e:	00ec      	lsls	r4, r5, #3
 8005b20:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8005b24:	46aa      	mov	sl, r5
 8005b26:	f1ba 0f00 	cmp.w	sl, #0
 8005b2a:	f280 80d6 	bge.w	8005cda <__kernel_rem_pio2+0x472>
 8005b2e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8005b80 <__kernel_rem_pio2+0x318>
 8005b32:	462e      	mov	r6, r5
 8005b34:	2e00      	cmp	r6, #0
 8005b36:	f2c0 8104 	blt.w	8005d42 <__kernel_rem_pio2+0x4da>
 8005b3a:	ab72      	add	r3, sp, #456	; 0x1c8
 8005b3c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8005b40:	f8df a064 	ldr.w	sl, [pc, #100]	; 8005ba8 <__kernel_rem_pio2+0x340>
 8005b44:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8005b48:	f04f 0800 	mov.w	r8, #0
 8005b4c:	1baf      	subs	r7, r5, r6
 8005b4e:	e0ea      	b.n	8005d26 <__kernel_rem_pio2+0x4be>
 8005b50:	f04f 0b02 	mov.w	fp, #2
 8005b54:	e759      	b.n	8005a0a <__kernel_rem_pio2+0x1a2>
 8005b56:	f8d8 3000 	ldr.w	r3, [r8]
 8005b5a:	b955      	cbnz	r5, 8005b72 <__kernel_rem_pio2+0x30a>
 8005b5c:	b123      	cbz	r3, 8005b68 <__kernel_rem_pio2+0x300>
 8005b5e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005b62:	f8c8 3000 	str.w	r3, [r8]
 8005b66:	2301      	movs	r3, #1
 8005b68:	3201      	adds	r2, #1
 8005b6a:	f108 0804 	add.w	r8, r8, #4
 8005b6e:	461d      	mov	r5, r3
 8005b70:	e752      	b.n	8005a18 <__kernel_rem_pio2+0x1b0>
 8005b72:	1acb      	subs	r3, r1, r3
 8005b74:	f8c8 3000 	str.w	r3, [r8]
 8005b78:	462b      	mov	r3, r5
 8005b7a:	e7f5      	b.n	8005b68 <__kernel_rem_pio2+0x300>
 8005b7c:	f3af 8000 	nop.w
	...
 8005b8c:	3ff00000 	.word	0x3ff00000
 8005b90:	08006640 	.word	0x08006640
 8005b94:	40200000 	.word	0x40200000
 8005b98:	3ff00000 	.word	0x3ff00000
 8005b9c:	3e700000 	.word	0x3e700000
 8005ba0:	41700000 	.word	0x41700000
 8005ba4:	3fe00000 	.word	0x3fe00000
 8005ba8:	08006600 	.word	0x08006600
 8005bac:	1e62      	subs	r2, r4, #1
 8005bae:	ab0e      	add	r3, sp, #56	; 0x38
 8005bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bb4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005bb8:	a90e      	add	r1, sp, #56	; 0x38
 8005bba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005bbe:	e739      	b.n	8005a34 <__kernel_rem_pio2+0x1cc>
 8005bc0:	1e62      	subs	r2, r4, #1
 8005bc2:	ab0e      	add	r3, sp, #56	; 0x38
 8005bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bc8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005bcc:	e7f4      	b.n	8005bb8 <__kernel_rem_pio2+0x350>
 8005bce:	a90e      	add	r1, sp, #56	; 0x38
 8005bd0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	e789      	b.n	8005aee <__kernel_rem_pio2+0x286>
 8005bda:	3301      	adds	r3, #1
 8005bdc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005be0:	2900      	cmp	r1, #0
 8005be2:	d0fa      	beq.n	8005bda <__kernel_rem_pio2+0x372>
 8005be4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005be6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8005bea:	446a      	add	r2, sp
 8005bec:	3a98      	subs	r2, #152	; 0x98
 8005bee:	920a      	str	r2, [sp, #40]	; 0x28
 8005bf0:	9a08      	ldr	r2, [sp, #32]
 8005bf2:	18e3      	adds	r3, r4, r3
 8005bf4:	18a5      	adds	r5, r4, r2
 8005bf6:	aa22      	add	r2, sp, #136	; 0x88
 8005bf8:	f104 0801 	add.w	r8, r4, #1
 8005bfc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8005c00:	9304      	str	r3, [sp, #16]
 8005c02:	9b04      	ldr	r3, [sp, #16]
 8005c04:	4543      	cmp	r3, r8
 8005c06:	da04      	bge.n	8005c12 <__kernel_rem_pio2+0x3aa>
 8005c08:	461c      	mov	r4, r3
 8005c0a:	e6a3      	b.n	8005954 <__kernel_rem_pio2+0xec>
 8005c0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e7e4      	b.n	8005bdc <__kernel_rem_pio2+0x374>
 8005c12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c14:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005c18:	f7fa fc7c 	bl	8000514 <__aeabi_i2d>
 8005c1c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8005c20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c22:	46ab      	mov	fp, r5
 8005c24:	461c      	mov	r4, r3
 8005c26:	f04f 0900 	mov.w	r9, #0
 8005c2a:	2600      	movs	r6, #0
 8005c2c:	2700      	movs	r7, #0
 8005c2e:	9b06      	ldr	r3, [sp, #24]
 8005c30:	4599      	cmp	r9, r3
 8005c32:	dd06      	ble.n	8005c42 <__kernel_rem_pio2+0x3da>
 8005c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c36:	e8e3 6702 	strd	r6, r7, [r3], #8
 8005c3a:	f108 0801 	add.w	r8, r8, #1
 8005c3e:	930a      	str	r3, [sp, #40]	; 0x28
 8005c40:	e7df      	b.n	8005c02 <__kernel_rem_pio2+0x39a>
 8005c42:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005c46:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005c4a:	f7fa fccd 	bl	80005e8 <__aeabi_dmul>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	460b      	mov	r3, r1
 8005c52:	4630      	mov	r0, r6
 8005c54:	4639      	mov	r1, r7
 8005c56:	f7fa fb11 	bl	800027c <__adddf3>
 8005c5a:	f109 0901 	add.w	r9, r9, #1
 8005c5e:	4606      	mov	r6, r0
 8005c60:	460f      	mov	r7, r1
 8005c62:	e7e4      	b.n	8005c2e <__kernel_rem_pio2+0x3c6>
 8005c64:	3d01      	subs	r5, #1
 8005c66:	e748      	b.n	8005afa <__kernel_rem_pio2+0x292>
 8005c68:	ec47 6b10 	vmov	d0, r6, r7
 8005c6c:	f1ca 0000 	rsb	r0, sl, #0
 8005c70:	f000 fa92 	bl	8006198 <scalbn>
 8005c74:	ec57 6b10 	vmov	r6, r7, d0
 8005c78:	4ba0      	ldr	r3, [pc, #640]	; (8005efc <__kernel_rem_pio2+0x694>)
 8005c7a:	ee10 0a10 	vmov	r0, s0
 8005c7e:	2200      	movs	r2, #0
 8005c80:	4639      	mov	r1, r7
 8005c82:	f7fa ff37 	bl	8000af4 <__aeabi_dcmpge>
 8005c86:	b1f8      	cbz	r0, 8005cc8 <__kernel_rem_pio2+0x460>
 8005c88:	4b9d      	ldr	r3, [pc, #628]	; (8005f00 <__kernel_rem_pio2+0x698>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	4630      	mov	r0, r6
 8005c8e:	4639      	mov	r1, r7
 8005c90:	f7fa fcaa 	bl	80005e8 <__aeabi_dmul>
 8005c94:	f7fa ff42 	bl	8000b1c <__aeabi_d2iz>
 8005c98:	4680      	mov	r8, r0
 8005c9a:	f7fa fc3b 	bl	8000514 <__aeabi_i2d>
 8005c9e:	4b97      	ldr	r3, [pc, #604]	; (8005efc <__kernel_rem_pio2+0x694>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f7fa fca1 	bl	80005e8 <__aeabi_dmul>
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	4602      	mov	r2, r0
 8005caa:	4639      	mov	r1, r7
 8005cac:	4630      	mov	r0, r6
 8005cae:	f7fa fae3 	bl	8000278 <__aeabi_dsub>
 8005cb2:	f7fa ff33 	bl	8000b1c <__aeabi_d2iz>
 8005cb6:	1c65      	adds	r5, r4, #1
 8005cb8:	ab0e      	add	r3, sp, #56	; 0x38
 8005cba:	f10a 0a18 	add.w	sl, sl, #24
 8005cbe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005cc2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005cc6:	e720      	b.n	8005b0a <__kernel_rem_pio2+0x2a2>
 8005cc8:	4630      	mov	r0, r6
 8005cca:	4639      	mov	r1, r7
 8005ccc:	f7fa ff26 	bl	8000b1c <__aeabi_d2iz>
 8005cd0:	ab0e      	add	r3, sp, #56	; 0x38
 8005cd2:	4625      	mov	r5, r4
 8005cd4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005cd8:	e717      	b.n	8005b0a <__kernel_rem_pio2+0x2a2>
 8005cda:	ab0e      	add	r3, sp, #56	; 0x38
 8005cdc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8005ce0:	f7fa fc18 	bl	8000514 <__aeabi_i2d>
 8005ce4:	4632      	mov	r2, r6
 8005ce6:	463b      	mov	r3, r7
 8005ce8:	f7fa fc7e 	bl	80005e8 <__aeabi_dmul>
 8005cec:	4b84      	ldr	r3, [pc, #528]	; (8005f00 <__kernel_rem_pio2+0x698>)
 8005cee:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	4630      	mov	r0, r6
 8005cf6:	4639      	mov	r1, r7
 8005cf8:	f7fa fc76 	bl	80005e8 <__aeabi_dmul>
 8005cfc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d00:	4606      	mov	r6, r0
 8005d02:	460f      	mov	r7, r1
 8005d04:	e70f      	b.n	8005b26 <__kernel_rem_pio2+0x2be>
 8005d06:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8005d0a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8005d0e:	f7fa fc6b 	bl	80005e8 <__aeabi_dmul>
 8005d12:	4602      	mov	r2, r0
 8005d14:	460b      	mov	r3, r1
 8005d16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d1a:	f7fa faaf 	bl	800027c <__adddf3>
 8005d1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005d22:	f108 0801 	add.w	r8, r8, #1
 8005d26:	9b02      	ldr	r3, [sp, #8]
 8005d28:	4598      	cmp	r8, r3
 8005d2a:	dc01      	bgt.n	8005d30 <__kernel_rem_pio2+0x4c8>
 8005d2c:	45b8      	cmp	r8, r7
 8005d2e:	ddea      	ble.n	8005d06 <__kernel_rem_pio2+0x49e>
 8005d30:	ed9d 7b06 	vldr	d7, [sp, #24]
 8005d34:	ab4a      	add	r3, sp, #296	; 0x128
 8005d36:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005d3a:	ed87 7b00 	vstr	d7, [r7]
 8005d3e:	3e01      	subs	r6, #1
 8005d40:	e6f8      	b.n	8005b34 <__kernel_rem_pio2+0x2cc>
 8005d42:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	dc0b      	bgt.n	8005d60 <__kernel_rem_pio2+0x4f8>
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	dc35      	bgt.n	8005db8 <__kernel_rem_pio2+0x550>
 8005d4c:	d059      	beq.n	8005e02 <__kernel_rem_pio2+0x59a>
 8005d4e:	9b04      	ldr	r3, [sp, #16]
 8005d50:	f003 0007 	and.w	r0, r3, #7
 8005d54:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005d58:	ecbd 8b02 	vpop	{d8}
 8005d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d60:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005d62:	2b03      	cmp	r3, #3
 8005d64:	d1f3      	bne.n	8005d4e <__kernel_rem_pio2+0x4e6>
 8005d66:	ab4a      	add	r3, sp, #296	; 0x128
 8005d68:	4423      	add	r3, r4
 8005d6a:	9306      	str	r3, [sp, #24]
 8005d6c:	461c      	mov	r4, r3
 8005d6e:	469a      	mov	sl, r3
 8005d70:	9502      	str	r5, [sp, #8]
 8005d72:	9b02      	ldr	r3, [sp, #8]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	f1aa 0a08 	sub.w	sl, sl, #8
 8005d7a:	dc6b      	bgt.n	8005e54 <__kernel_rem_pio2+0x5ec>
 8005d7c:	46aa      	mov	sl, r5
 8005d7e:	f1ba 0f01 	cmp.w	sl, #1
 8005d82:	f1a4 0408 	sub.w	r4, r4, #8
 8005d86:	f300 8085 	bgt.w	8005e94 <__kernel_rem_pio2+0x62c>
 8005d8a:	9c06      	ldr	r4, [sp, #24]
 8005d8c:	2000      	movs	r0, #0
 8005d8e:	3408      	adds	r4, #8
 8005d90:	2100      	movs	r1, #0
 8005d92:	2d01      	cmp	r5, #1
 8005d94:	f300 809d 	bgt.w	8005ed2 <__kernel_rem_pio2+0x66a>
 8005d98:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8005d9c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8005da0:	f1bb 0f00 	cmp.w	fp, #0
 8005da4:	f040 809b 	bne.w	8005ede <__kernel_rem_pio2+0x676>
 8005da8:	9b01      	ldr	r3, [sp, #4]
 8005daa:	e9c3 5600 	strd	r5, r6, [r3]
 8005dae:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8005db2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005db6:	e7ca      	b.n	8005d4e <__kernel_rem_pio2+0x4e6>
 8005db8:	3408      	adds	r4, #8
 8005dba:	ab4a      	add	r3, sp, #296	; 0x128
 8005dbc:	441c      	add	r4, r3
 8005dbe:	462e      	mov	r6, r5
 8005dc0:	2000      	movs	r0, #0
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	2e00      	cmp	r6, #0
 8005dc6:	da36      	bge.n	8005e36 <__kernel_rem_pio2+0x5ce>
 8005dc8:	f1bb 0f00 	cmp.w	fp, #0
 8005dcc:	d039      	beq.n	8005e42 <__kernel_rem_pio2+0x5da>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005dd4:	9c01      	ldr	r4, [sp, #4]
 8005dd6:	e9c4 2300 	strd	r2, r3, [r4]
 8005dda:	4602      	mov	r2, r0
 8005ddc:	460b      	mov	r3, r1
 8005dde:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005de2:	f7fa fa49 	bl	8000278 <__aeabi_dsub>
 8005de6:	ae4c      	add	r6, sp, #304	; 0x130
 8005de8:	2401      	movs	r4, #1
 8005dea:	42a5      	cmp	r5, r4
 8005dec:	da2c      	bge.n	8005e48 <__kernel_rem_pio2+0x5e0>
 8005dee:	f1bb 0f00 	cmp.w	fp, #0
 8005df2:	d002      	beq.n	8005dfa <__kernel_rem_pio2+0x592>
 8005df4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005df8:	4619      	mov	r1, r3
 8005dfa:	9b01      	ldr	r3, [sp, #4]
 8005dfc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005e00:	e7a5      	b.n	8005d4e <__kernel_rem_pio2+0x4e6>
 8005e02:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8005e06:	eb0d 0403 	add.w	r4, sp, r3
 8005e0a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005e0e:	2000      	movs	r0, #0
 8005e10:	2100      	movs	r1, #0
 8005e12:	2d00      	cmp	r5, #0
 8005e14:	da09      	bge.n	8005e2a <__kernel_rem_pio2+0x5c2>
 8005e16:	f1bb 0f00 	cmp.w	fp, #0
 8005e1a:	d002      	beq.n	8005e22 <__kernel_rem_pio2+0x5ba>
 8005e1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005e20:	4619      	mov	r1, r3
 8005e22:	9b01      	ldr	r3, [sp, #4]
 8005e24:	e9c3 0100 	strd	r0, r1, [r3]
 8005e28:	e791      	b.n	8005d4e <__kernel_rem_pio2+0x4e6>
 8005e2a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005e2e:	f7fa fa25 	bl	800027c <__adddf3>
 8005e32:	3d01      	subs	r5, #1
 8005e34:	e7ed      	b.n	8005e12 <__kernel_rem_pio2+0x5aa>
 8005e36:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005e3a:	f7fa fa1f 	bl	800027c <__adddf3>
 8005e3e:	3e01      	subs	r6, #1
 8005e40:	e7c0      	b.n	8005dc4 <__kernel_rem_pio2+0x55c>
 8005e42:	4602      	mov	r2, r0
 8005e44:	460b      	mov	r3, r1
 8005e46:	e7c5      	b.n	8005dd4 <__kernel_rem_pio2+0x56c>
 8005e48:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005e4c:	f7fa fa16 	bl	800027c <__adddf3>
 8005e50:	3401      	adds	r4, #1
 8005e52:	e7ca      	b.n	8005dea <__kernel_rem_pio2+0x582>
 8005e54:	e9da 8900 	ldrd	r8, r9, [sl]
 8005e58:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8005e5c:	9b02      	ldr	r3, [sp, #8]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	9302      	str	r3, [sp, #8]
 8005e62:	4632      	mov	r2, r6
 8005e64:	463b      	mov	r3, r7
 8005e66:	4640      	mov	r0, r8
 8005e68:	4649      	mov	r1, r9
 8005e6a:	f7fa fa07 	bl	800027c <__adddf3>
 8005e6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005e72:	4602      	mov	r2, r0
 8005e74:	460b      	mov	r3, r1
 8005e76:	4640      	mov	r0, r8
 8005e78:	4649      	mov	r1, r9
 8005e7a:	f7fa f9fd 	bl	8000278 <__aeabi_dsub>
 8005e7e:	4632      	mov	r2, r6
 8005e80:	463b      	mov	r3, r7
 8005e82:	f7fa f9fb 	bl	800027c <__adddf3>
 8005e86:	ed9d 7b08 	vldr	d7, [sp, #32]
 8005e8a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005e8e:	ed8a 7b00 	vstr	d7, [sl]
 8005e92:	e76e      	b.n	8005d72 <__kernel_rem_pio2+0x50a>
 8005e94:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005e98:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8005e9c:	4640      	mov	r0, r8
 8005e9e:	4632      	mov	r2, r6
 8005ea0:	463b      	mov	r3, r7
 8005ea2:	4649      	mov	r1, r9
 8005ea4:	f7fa f9ea 	bl	800027c <__adddf3>
 8005ea8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005eac:	4602      	mov	r2, r0
 8005eae:	460b      	mov	r3, r1
 8005eb0:	4640      	mov	r0, r8
 8005eb2:	4649      	mov	r1, r9
 8005eb4:	f7fa f9e0 	bl	8000278 <__aeabi_dsub>
 8005eb8:	4632      	mov	r2, r6
 8005eba:	463b      	mov	r3, r7
 8005ebc:	f7fa f9de 	bl	800027c <__adddf3>
 8005ec0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005ec4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005ec8:	ed84 7b00 	vstr	d7, [r4]
 8005ecc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ed0:	e755      	b.n	8005d7e <__kernel_rem_pio2+0x516>
 8005ed2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005ed6:	f7fa f9d1 	bl	800027c <__adddf3>
 8005eda:	3d01      	subs	r5, #1
 8005edc:	e759      	b.n	8005d92 <__kernel_rem_pio2+0x52a>
 8005ede:	9b01      	ldr	r3, [sp, #4]
 8005ee0:	9a01      	ldr	r2, [sp, #4]
 8005ee2:	601d      	str	r5, [r3, #0]
 8005ee4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8005ee8:	605c      	str	r4, [r3, #4]
 8005eea:	609f      	str	r7, [r3, #8]
 8005eec:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8005ef0:	60d3      	str	r3, [r2, #12]
 8005ef2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ef6:	6110      	str	r0, [r2, #16]
 8005ef8:	6153      	str	r3, [r2, #20]
 8005efa:	e728      	b.n	8005d4e <__kernel_rem_pio2+0x4e6>
 8005efc:	41700000 	.word	0x41700000
 8005f00:	3e700000 	.word	0x3e700000
 8005f04:	00000000 	.word	0x00000000

08005f08 <__kernel_sin>:
 8005f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f0c:	ed2d 8b04 	vpush	{d8-d9}
 8005f10:	eeb0 8a41 	vmov.f32	s16, s2
 8005f14:	eef0 8a61 	vmov.f32	s17, s3
 8005f18:	ec55 4b10 	vmov	r4, r5, d0
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005f22:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005f26:	9001      	str	r0, [sp, #4]
 8005f28:	da06      	bge.n	8005f38 <__kernel_sin+0x30>
 8005f2a:	ee10 0a10 	vmov	r0, s0
 8005f2e:	4629      	mov	r1, r5
 8005f30:	f7fa fdf4 	bl	8000b1c <__aeabi_d2iz>
 8005f34:	2800      	cmp	r0, #0
 8005f36:	d051      	beq.n	8005fdc <__kernel_sin+0xd4>
 8005f38:	4622      	mov	r2, r4
 8005f3a:	462b      	mov	r3, r5
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	4629      	mov	r1, r5
 8005f40:	f7fa fb52 	bl	80005e8 <__aeabi_dmul>
 8005f44:	4682      	mov	sl, r0
 8005f46:	468b      	mov	fp, r1
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	4629      	mov	r1, r5
 8005f50:	f7fa fb4a 	bl	80005e8 <__aeabi_dmul>
 8005f54:	a341      	add	r3, pc, #260	; (adr r3, 800605c <__kernel_sin+0x154>)
 8005f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5a:	4680      	mov	r8, r0
 8005f5c:	4689      	mov	r9, r1
 8005f5e:	4650      	mov	r0, sl
 8005f60:	4659      	mov	r1, fp
 8005f62:	f7fa fb41 	bl	80005e8 <__aeabi_dmul>
 8005f66:	a33f      	add	r3, pc, #252	; (adr r3, 8006064 <__kernel_sin+0x15c>)
 8005f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6c:	f7fa f984 	bl	8000278 <__aeabi_dsub>
 8005f70:	4652      	mov	r2, sl
 8005f72:	465b      	mov	r3, fp
 8005f74:	f7fa fb38 	bl	80005e8 <__aeabi_dmul>
 8005f78:	a33c      	add	r3, pc, #240	; (adr r3, 800606c <__kernel_sin+0x164>)
 8005f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7e:	f7fa f97d 	bl	800027c <__adddf3>
 8005f82:	4652      	mov	r2, sl
 8005f84:	465b      	mov	r3, fp
 8005f86:	f7fa fb2f 	bl	80005e8 <__aeabi_dmul>
 8005f8a:	a33a      	add	r3, pc, #232	; (adr r3, 8006074 <__kernel_sin+0x16c>)
 8005f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f90:	f7fa f972 	bl	8000278 <__aeabi_dsub>
 8005f94:	4652      	mov	r2, sl
 8005f96:	465b      	mov	r3, fp
 8005f98:	f7fa fb26 	bl	80005e8 <__aeabi_dmul>
 8005f9c:	a337      	add	r3, pc, #220	; (adr r3, 800607c <__kernel_sin+0x174>)
 8005f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa2:	f7fa f96b 	bl	800027c <__adddf3>
 8005fa6:	9b01      	ldr	r3, [sp, #4]
 8005fa8:	4606      	mov	r6, r0
 8005faa:	460f      	mov	r7, r1
 8005fac:	b9eb      	cbnz	r3, 8005fea <__kernel_sin+0xe2>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	4650      	mov	r0, sl
 8005fb4:	4659      	mov	r1, fp
 8005fb6:	f7fa fb17 	bl	80005e8 <__aeabi_dmul>
 8005fba:	a325      	add	r3, pc, #148	; (adr r3, 8006050 <__kernel_sin+0x148>)
 8005fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc0:	f7fa f95a 	bl	8000278 <__aeabi_dsub>
 8005fc4:	4642      	mov	r2, r8
 8005fc6:	464b      	mov	r3, r9
 8005fc8:	f7fa fb0e 	bl	80005e8 <__aeabi_dmul>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	460b      	mov	r3, r1
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	4629      	mov	r1, r5
 8005fd4:	f7fa f952 	bl	800027c <__adddf3>
 8005fd8:	4604      	mov	r4, r0
 8005fda:	460d      	mov	r5, r1
 8005fdc:	ec45 4b10 	vmov	d0, r4, r5
 8005fe0:	b003      	add	sp, #12
 8005fe2:	ecbd 8b04 	vpop	{d8-d9}
 8005fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fea:	4b1b      	ldr	r3, [pc, #108]	; (8006058 <__kernel_sin+0x150>)
 8005fec:	ec51 0b18 	vmov	r0, r1, d8
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f7fa faf9 	bl	80005e8 <__aeabi_dmul>
 8005ff6:	4632      	mov	r2, r6
 8005ff8:	ec41 0b19 	vmov	d9, r0, r1
 8005ffc:	463b      	mov	r3, r7
 8005ffe:	4640      	mov	r0, r8
 8006000:	4649      	mov	r1, r9
 8006002:	f7fa faf1 	bl	80005e8 <__aeabi_dmul>
 8006006:	4602      	mov	r2, r0
 8006008:	460b      	mov	r3, r1
 800600a:	ec51 0b19 	vmov	r0, r1, d9
 800600e:	f7fa f933 	bl	8000278 <__aeabi_dsub>
 8006012:	4652      	mov	r2, sl
 8006014:	465b      	mov	r3, fp
 8006016:	f7fa fae7 	bl	80005e8 <__aeabi_dmul>
 800601a:	ec53 2b18 	vmov	r2, r3, d8
 800601e:	f7fa f92b 	bl	8000278 <__aeabi_dsub>
 8006022:	a30b      	add	r3, pc, #44	; (adr r3, 8006050 <__kernel_sin+0x148>)
 8006024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006028:	4606      	mov	r6, r0
 800602a:	460f      	mov	r7, r1
 800602c:	4640      	mov	r0, r8
 800602e:	4649      	mov	r1, r9
 8006030:	f7fa fada 	bl	80005e8 <__aeabi_dmul>
 8006034:	4602      	mov	r2, r0
 8006036:	460b      	mov	r3, r1
 8006038:	4630      	mov	r0, r6
 800603a:	4639      	mov	r1, r7
 800603c:	f7fa f91e 	bl	800027c <__adddf3>
 8006040:	4602      	mov	r2, r0
 8006042:	460b      	mov	r3, r1
 8006044:	4620      	mov	r0, r4
 8006046:	4629      	mov	r1, r5
 8006048:	f7fa f916 	bl	8000278 <__aeabi_dsub>
 800604c:	e7c4      	b.n	8005fd8 <__kernel_sin+0xd0>
 800604e:	bf00      	nop
 8006050:	55555549 	.word	0x55555549
 8006054:	3fc55555 	.word	0x3fc55555
 8006058:	3fe00000 	.word	0x3fe00000
 800605c:	5acfd57c 	.word	0x5acfd57c
 8006060:	3de5d93a 	.word	0x3de5d93a
 8006064:	8a2b9ceb 	.word	0x8a2b9ceb
 8006068:	3e5ae5e6 	.word	0x3e5ae5e6
 800606c:	57b1fe7d 	.word	0x57b1fe7d
 8006070:	3ec71de3 	.word	0x3ec71de3
 8006074:	19c161d5 	.word	0x19c161d5
 8006078:	3f2a01a0 	.word	0x3f2a01a0
 800607c:	1110f8a6 	.word	0x1110f8a6
 8006080:	3f811111 	.word	0x3f811111

08006084 <fabs>:
 8006084:	ec51 0b10 	vmov	r0, r1, d0
 8006088:	ee10 2a10 	vmov	r2, s0
 800608c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006090:	ec43 2b10 	vmov	d0, r2, r3
 8006094:	4770      	bx	lr
	...

08006098 <floor>:
 8006098:	ec51 0b10 	vmov	r0, r1, d0
 800609c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060a0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80060a4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80060a8:	2e13      	cmp	r6, #19
 80060aa:	ee10 5a10 	vmov	r5, s0
 80060ae:	ee10 8a10 	vmov	r8, s0
 80060b2:	460c      	mov	r4, r1
 80060b4:	dc32      	bgt.n	800611c <floor+0x84>
 80060b6:	2e00      	cmp	r6, #0
 80060b8:	da14      	bge.n	80060e4 <floor+0x4c>
 80060ba:	a333      	add	r3, pc, #204	; (adr r3, 8006188 <floor+0xf0>)
 80060bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c0:	f7fa f8dc 	bl	800027c <__adddf3>
 80060c4:	2200      	movs	r2, #0
 80060c6:	2300      	movs	r3, #0
 80060c8:	f7fa fd1e 	bl	8000b08 <__aeabi_dcmpgt>
 80060cc:	b138      	cbz	r0, 80060de <floor+0x46>
 80060ce:	2c00      	cmp	r4, #0
 80060d0:	da57      	bge.n	8006182 <floor+0xea>
 80060d2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80060d6:	431d      	orrs	r5, r3
 80060d8:	d001      	beq.n	80060de <floor+0x46>
 80060da:	4c2d      	ldr	r4, [pc, #180]	; (8006190 <floor+0xf8>)
 80060dc:	2500      	movs	r5, #0
 80060de:	4621      	mov	r1, r4
 80060e0:	4628      	mov	r0, r5
 80060e2:	e025      	b.n	8006130 <floor+0x98>
 80060e4:	4f2b      	ldr	r7, [pc, #172]	; (8006194 <floor+0xfc>)
 80060e6:	4137      	asrs	r7, r6
 80060e8:	ea01 0307 	and.w	r3, r1, r7
 80060ec:	4303      	orrs	r3, r0
 80060ee:	d01f      	beq.n	8006130 <floor+0x98>
 80060f0:	a325      	add	r3, pc, #148	; (adr r3, 8006188 <floor+0xf0>)
 80060f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f6:	f7fa f8c1 	bl	800027c <__adddf3>
 80060fa:	2200      	movs	r2, #0
 80060fc:	2300      	movs	r3, #0
 80060fe:	f7fa fd03 	bl	8000b08 <__aeabi_dcmpgt>
 8006102:	2800      	cmp	r0, #0
 8006104:	d0eb      	beq.n	80060de <floor+0x46>
 8006106:	2c00      	cmp	r4, #0
 8006108:	bfbe      	ittt	lt
 800610a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800610e:	fa43 f606 	asrlt.w	r6, r3, r6
 8006112:	19a4      	addlt	r4, r4, r6
 8006114:	ea24 0407 	bic.w	r4, r4, r7
 8006118:	2500      	movs	r5, #0
 800611a:	e7e0      	b.n	80060de <floor+0x46>
 800611c:	2e33      	cmp	r6, #51	; 0x33
 800611e:	dd0b      	ble.n	8006138 <floor+0xa0>
 8006120:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006124:	d104      	bne.n	8006130 <floor+0x98>
 8006126:	ee10 2a10 	vmov	r2, s0
 800612a:	460b      	mov	r3, r1
 800612c:	f7fa f8a6 	bl	800027c <__adddf3>
 8006130:	ec41 0b10 	vmov	d0, r0, r1
 8006134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006138:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800613c:	f04f 33ff 	mov.w	r3, #4294967295
 8006140:	fa23 f707 	lsr.w	r7, r3, r7
 8006144:	4207      	tst	r7, r0
 8006146:	d0f3      	beq.n	8006130 <floor+0x98>
 8006148:	a30f      	add	r3, pc, #60	; (adr r3, 8006188 <floor+0xf0>)
 800614a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614e:	f7fa f895 	bl	800027c <__adddf3>
 8006152:	2200      	movs	r2, #0
 8006154:	2300      	movs	r3, #0
 8006156:	f7fa fcd7 	bl	8000b08 <__aeabi_dcmpgt>
 800615a:	2800      	cmp	r0, #0
 800615c:	d0bf      	beq.n	80060de <floor+0x46>
 800615e:	2c00      	cmp	r4, #0
 8006160:	da02      	bge.n	8006168 <floor+0xd0>
 8006162:	2e14      	cmp	r6, #20
 8006164:	d103      	bne.n	800616e <floor+0xd6>
 8006166:	3401      	adds	r4, #1
 8006168:	ea25 0507 	bic.w	r5, r5, r7
 800616c:	e7b7      	b.n	80060de <floor+0x46>
 800616e:	2301      	movs	r3, #1
 8006170:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006174:	fa03 f606 	lsl.w	r6, r3, r6
 8006178:	4435      	add	r5, r6
 800617a:	4545      	cmp	r5, r8
 800617c:	bf38      	it	cc
 800617e:	18e4      	addcc	r4, r4, r3
 8006180:	e7f2      	b.n	8006168 <floor+0xd0>
 8006182:	2500      	movs	r5, #0
 8006184:	462c      	mov	r4, r5
 8006186:	e7aa      	b.n	80060de <floor+0x46>
 8006188:	8800759c 	.word	0x8800759c
 800618c:	7e37e43c 	.word	0x7e37e43c
 8006190:	bff00000 	.word	0xbff00000
 8006194:	000fffff 	.word	0x000fffff

08006198 <scalbn>:
 8006198:	b570      	push	{r4, r5, r6, lr}
 800619a:	ec55 4b10 	vmov	r4, r5, d0
 800619e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80061a2:	4606      	mov	r6, r0
 80061a4:	462b      	mov	r3, r5
 80061a6:	b99a      	cbnz	r2, 80061d0 <scalbn+0x38>
 80061a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80061ac:	4323      	orrs	r3, r4
 80061ae:	d036      	beq.n	800621e <scalbn+0x86>
 80061b0:	4b39      	ldr	r3, [pc, #228]	; (8006298 <scalbn+0x100>)
 80061b2:	4629      	mov	r1, r5
 80061b4:	ee10 0a10 	vmov	r0, s0
 80061b8:	2200      	movs	r2, #0
 80061ba:	f7fa fa15 	bl	80005e8 <__aeabi_dmul>
 80061be:	4b37      	ldr	r3, [pc, #220]	; (800629c <scalbn+0x104>)
 80061c0:	429e      	cmp	r6, r3
 80061c2:	4604      	mov	r4, r0
 80061c4:	460d      	mov	r5, r1
 80061c6:	da10      	bge.n	80061ea <scalbn+0x52>
 80061c8:	a32b      	add	r3, pc, #172	; (adr r3, 8006278 <scalbn+0xe0>)
 80061ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ce:	e03a      	b.n	8006246 <scalbn+0xae>
 80061d0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80061d4:	428a      	cmp	r2, r1
 80061d6:	d10c      	bne.n	80061f2 <scalbn+0x5a>
 80061d8:	ee10 2a10 	vmov	r2, s0
 80061dc:	4620      	mov	r0, r4
 80061de:	4629      	mov	r1, r5
 80061e0:	f7fa f84c 	bl	800027c <__adddf3>
 80061e4:	4604      	mov	r4, r0
 80061e6:	460d      	mov	r5, r1
 80061e8:	e019      	b.n	800621e <scalbn+0x86>
 80061ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80061ee:	460b      	mov	r3, r1
 80061f0:	3a36      	subs	r2, #54	; 0x36
 80061f2:	4432      	add	r2, r6
 80061f4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80061f8:	428a      	cmp	r2, r1
 80061fa:	dd08      	ble.n	800620e <scalbn+0x76>
 80061fc:	2d00      	cmp	r5, #0
 80061fe:	a120      	add	r1, pc, #128	; (adr r1, 8006280 <scalbn+0xe8>)
 8006200:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006204:	da1c      	bge.n	8006240 <scalbn+0xa8>
 8006206:	a120      	add	r1, pc, #128	; (adr r1, 8006288 <scalbn+0xf0>)
 8006208:	e9d1 0100 	ldrd	r0, r1, [r1]
 800620c:	e018      	b.n	8006240 <scalbn+0xa8>
 800620e:	2a00      	cmp	r2, #0
 8006210:	dd08      	ble.n	8006224 <scalbn+0x8c>
 8006212:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006216:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800621a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800621e:	ec45 4b10 	vmov	d0, r4, r5
 8006222:	bd70      	pop	{r4, r5, r6, pc}
 8006224:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006228:	da19      	bge.n	800625e <scalbn+0xc6>
 800622a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800622e:	429e      	cmp	r6, r3
 8006230:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006234:	dd0a      	ble.n	800624c <scalbn+0xb4>
 8006236:	a112      	add	r1, pc, #72	; (adr r1, 8006280 <scalbn+0xe8>)
 8006238:	e9d1 0100 	ldrd	r0, r1, [r1]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1e2      	bne.n	8006206 <scalbn+0x6e>
 8006240:	a30f      	add	r3, pc, #60	; (adr r3, 8006280 <scalbn+0xe8>)
 8006242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006246:	f7fa f9cf 	bl	80005e8 <__aeabi_dmul>
 800624a:	e7cb      	b.n	80061e4 <scalbn+0x4c>
 800624c:	a10a      	add	r1, pc, #40	; (adr r1, 8006278 <scalbn+0xe0>)
 800624e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d0b8      	beq.n	80061c8 <scalbn+0x30>
 8006256:	a10e      	add	r1, pc, #56	; (adr r1, 8006290 <scalbn+0xf8>)
 8006258:	e9d1 0100 	ldrd	r0, r1, [r1]
 800625c:	e7b4      	b.n	80061c8 <scalbn+0x30>
 800625e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006262:	3236      	adds	r2, #54	; 0x36
 8006264:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006268:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800626c:	4620      	mov	r0, r4
 800626e:	4b0c      	ldr	r3, [pc, #48]	; (80062a0 <scalbn+0x108>)
 8006270:	2200      	movs	r2, #0
 8006272:	e7e8      	b.n	8006246 <scalbn+0xae>
 8006274:	f3af 8000 	nop.w
 8006278:	c2f8f359 	.word	0xc2f8f359
 800627c:	01a56e1f 	.word	0x01a56e1f
 8006280:	8800759c 	.word	0x8800759c
 8006284:	7e37e43c 	.word	0x7e37e43c
 8006288:	8800759c 	.word	0x8800759c
 800628c:	fe37e43c 	.word	0xfe37e43c
 8006290:	c2f8f359 	.word	0xc2f8f359
 8006294:	81a56e1f 	.word	0x81a56e1f
 8006298:	43500000 	.word	0x43500000
 800629c:	ffff3cb0 	.word	0xffff3cb0
 80062a0:	3c900000 	.word	0x3c900000

080062a4 <_init>:
 80062a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a6:	bf00      	nop
 80062a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062aa:	bc08      	pop	{r3}
 80062ac:	469e      	mov	lr, r3
 80062ae:	4770      	bx	lr

080062b0 <_fini>:
 80062b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b2:	bf00      	nop
 80062b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062b6:	bc08      	pop	{r3}
 80062b8:	469e      	mov	lr, r3
 80062ba:	4770      	bx	lr
